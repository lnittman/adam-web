
# 2025-02-07 23:31:39.503512
+Y

# 2025-02-07 23:34:11.133104
+This file is a merged representation of the entire codebase, combining all repository files into a single document.
+Generated by Repomix on: 2025-02-08T07:31:27.472Z
+
+================================================================
+File Summary
+================================================================
+
+Purpose:
+--------
+This file contains a packed representation of the entire repository's contents.
+It is designed to be easily consumable by AI systems for analysis, code review,
+or other automated processes.
+
+File Format:
+------------
+The content is organized as follows:
+1. This summary section
+2. Repository information
+3. Directory structure
+4. Multiple file entries, each consisting of:
+  a. A separator line (================)
+  b. The file path (File: path/to/file)
+  c. Another separator line
+  d. The full contents of the file
+  e. A blank line
+
+Usage Guidelines:
+-----------------
+- This file should be treated as read-only. Any changes should be made to the
+  original repository files, not this packed version.
+- When processing this file, use the file path to distinguish
+  between different files in the repository.
+- Be aware that this file may contain sensitive information. Handle it with
+  the same level of security as you would the original repository.
+
+Notes:
+------
+- Some files may have been excluded based on .gitignore rules and Repomix's
+  configuration.
+- Binary files are not included in this packed representation. Please refer to
+  the Repository Structure section for a complete list of file paths, including
+  binary files.
+
+Additional Info:
+----------------
+
+================================================================
+Directory Structure
+================================================================
+public/
+  file.svg
+  globe.svg
+  next.svg
+  vercel.svg
+  window.svg
+reference/
+  .git/
+    hooks/
+      applypatch-msg.sample
+      commit-msg.sample
+      fsmonitor-watchman.sample
+      post-update.sample
+      pre-applypatch.sample
+      pre-commit.sample
+      pre-merge-commit.sample
+      pre-push.sample
+      pre-rebase.sample
+      pre-receive.sample
+      prepare-commit-msg.sample
+      push-to-checkout.sample
+      update.sample
+    info/
+      exclude
+    logs/
+      refs/
+        heads/
+          main
+        remotes/
+          origin/
+            HEAD
+      HEAD
+    refs/
+      heads/
+        main
+      remotes/
+        origin/
+          HEAD
+    config
+    description
+    FETCH_HEAD
+    HEAD
+    packed-refs
+  app/
+    office/
+      head.tsx
+      layout.tsx
+      page.tsx
+    head.tsx
+    layout.tsx
+    manifest.ts
+    page.tsx
+    robots.ts
+    sitemap.ts
+  common/
+    constants.ts
+    hooks.ts
+    position.ts
+    queries.ts
+    server.ts
+    utilities.ts
+  components/
+    detectors/
+      OutsideElementEvent.tsx
+    examples/
+      AS400.module.scss
+      AS400.tsx
+      DashboardRadar.module.scss
+      DashboardRadar.tsx
+      Denabase.module.scss
+      Denabase.tsx
+      MessagesInterface.tsx
+      UpdatingDataTable.tsx
+    modals/
+      ModalAlert.module.scss
+      ModalAlert.tsx
+      ModalCanvasPlatformer.module.scss
+      ModalCanvasPlatformer.tsx
+      ModalCanvasSnake.module.scss
+      ModalCanvasSnake.tsx
+      ModalChess.module.scss
+      ModalChess.tsx
+      ModalCreateAccount.module.scss
+      ModalCreateAccount.tsx
+      ModalError.module.scss
+      ModalError.tsx
+      ModalMatrixModes.module.scss
+      ModalMatrixModes.tsx
+    page/
+      DefaultActionBar.module.scss
+      DefaultActionBar.tsx
+      DefaultLayout.module.scss
+      DefaultLayout.tsx
+      ModalContext.tsx
+      root.module.scss
+    svg/
+      InternetDevelopmentLogo.tsx
+      InternetDevelopmentLogoMark.tsx
+      Sphere.tsx
+    Accordion.module.scss
+    Accordion.tsx
+    ActionBar.module.scss
+    ActionBar.tsx
+    ActionButton.module.scss
+    ActionButton.tsx
+    ActionListItem.module.scss
+    ActionListItem.tsx
+    AlertBanner.module.scss
+    AlertBanner.tsx
+    Avatar.module.scss
+    Avatar.tsx
+    Badge.module.scss
+    Badge.tsx
+    BarLoader.module.scss
+    BarLoader.tsx
+    BarProgress.module.scss
+    BarProgress.tsx
+    Block.module.scss
+    Block.tsx
+    BlockLoader.module.scss
+    BlockLoader.tsx
+    BreadCrumbs.module.scss
+    BreadCrumbs.tsx
+    Button.module.scss
+    Button.tsx
+    ButtonGroup.module.scss
+    ButtonGroup.tsx
+    Canvas.module.scss
+    Canvas.tsx
+    CanvasPlatformer.module.scss
+    CanvasPlatformer.tsx
+    CanvasSnake.module.scss
+    CanvasSnake.tsx
+    Card.module.scss
+    Card.tsx
+    CardDouble.module.scss
+    CardDouble.tsx
+    Checkbox.module.scss
+    Checkbox.tsx
+    Chessboard.module.scss
+    Chessboard.tsx
+    CodeBlock.module.scss
+    CodeBlock.tsx
+    ComboBox.module.scss
+    ComboBox.tsx
+    ContentFluid.module.scss
+    ContentFluid.tsx
+    DataTable.module.scss
+    DataTable.tsx
+    DatePicker.module.scss
+    DatePicker.tsx
+    DebugGrid.tsx
+    DefaultMetaTags.tsx
+    Dialog.module.scss
+    Dialog.tsx
+    Divider.module.scss
+    Divider.tsx
+    Drawer.module.scss
+    Drawer.tsx
+    DropdownMenu.module.scss
+    DropdownMenu.tsx
+    DropdownMenuTrigger.module.scss
+    DropdownMenuTrigger.tsx
+    Grid.module.scss
+    Grid.tsx
+    HoverComponentTrigger.module.scss
+    HoverComponentTrigger.tsx
+    Indent.module.scss
+    Indent.tsx
+    Input.module.scss
+    Input.tsx
+    ListItem.module.scss
+    ListItem.tsx
+    MatrixLoader.module.scss
+    MatrixLoader.tsx
+    Message.module.scss
+    Message.tsx
+    MessageViewer.module.scss
+    MessageViewer.tsx
+    ModalStack.module.scss
+    ModalStack.tsx
+    ModalTrigger.tsx
+    Navigation.module.scss
+    Navigation.tsx
+    NumberRangeSlider.module.scss
+    NumberRangeSlider.tsx
+    Popover.module.scss
+    Popover.tsx
+    Providers.tsx
+    RadioButton.module.scss
+    RadioButton.tsx
+    RadioButtonGroup.tsx
+    Row.module.scss
+    Row.tsx
+    RowEllipsis.module.scss
+    RowEllipsis.tsx
+    RowSpaceBetween.module.scss
+    RowSpaceBetween.tsx
+    Select.module.scss
+    Select.tsx
+    SidebarLayout.module.scss
+    SidebarLayout.tsx
+    Table.module.scss
+    Table.tsx
+    TableColumn.module.scss
+    TableColumn.tsx
+    TableRow.module.scss
+    TableRow.tsx
+    Text.module.scss
+    Text.tsx
+    TextArea.module.scss
+    TextArea.tsx
+    Tooltip.module.scss
+    Tooltip.tsx
+    TreeView.module.scss
+    TreeView.tsx
+  modules/
+    hotkeys/
+      bound-hotkeys-proxy-provider.tsx
+      hotkeys-provider.tsx
+      index.ts
+      is-hotkey-pressed.ts
+      parse-hotkeys.ts
+      types.ts
+      use-deep-equal-memo.ts
+      use-hotkeys.ts
+      use-record-hotkeys.ts
+      validators.ts
+    cors.ts
+    object-assign.ts
+    vary.ts
+  pages/
+    api/
+      index.ts
+    _app.tsx
+    _document.tsx
+  .gitignore
+  .prettierrc
+  global.scss
+  LICENSE.md
+  package.json
+  README.md
+  tsconfig.json
+src/
+  app/
+    globals.css
+    layout.tsx
+    page.tsx
+.gitignore
+eslint.config.mjs
+next.config.ts
+package.json
+postcss.config.mjs
+README.md
+tailwind.config.ts
+tsconfig.json
+
+================================================================
+Files
+================================================================
+
+================
+File: public/file.svg
+================
+<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
+
+================
+File: public/globe.svg
+================
+<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
+
+================
+File: public/next.svg
+================
+<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
+
+================
+File: public/vercel.svg
+================
+<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
+
+================
+File: public/window.svg
+================
+<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
+
+================
+File: reference/.git/hooks/applypatch-msg.sample
+================
+#!/bin/sh
+#
+# An example hook script to check the commit log message taken by
+# applypatch from an e-mail message.
+#
+# The hook should exit with non-zero status after issuing an
+# appropriate message if it wants to stop the commit.  The hook is
+# allowed to edit the commit message file.
+#
+# To enable this hook, rename this file to "applypatch-msg".
+
+. git-sh-setup
+commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
+test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
+:
+
+================
+File: reference/.git/hooks/commit-msg.sample
+================
+#!/bin/sh
+#
+# An example hook script to check the commit log message.
+# Called by "git commit" with one argument, the name of the file
+# that has the commit message.  The hook should exit with non-zero
+# status after issuing an appropriate message if it wants to stop the
+# commit.  The hook is allowed to edit the commit message file.
+#
+# To enable this hook, rename this file to "commit-msg".
+
+# Uncomment the below to add a Signed-off-by line to the message.
+# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
+# hook is more suited to it.
+#
+# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
+# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"
+
+# This example catches duplicate Signed-off-by lines.
+
+test "" = "$(grep '^Signed-off-by: ' "$1" |
+	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
+	echo >&2 Duplicate Signed-off-by lines.
+	exit 1
+}
+
+================
+File: reference/.git/hooks/fsmonitor-watchman.sample
+================
+#!/usr/bin/perl
+
+use strict;
+use warnings;
+use IPC::Open2;
+
+# An example hook script to integrate Watchman
+# (https://facebook.github.io/watchman/) with git to speed up detecting
+# new and modified files.
+#
+# The hook is passed a version (currently 2) and last update token
+# formatted as a string and outputs to stdout a new update token and
+# all files that have been modified since the update token. Paths must
+# be relative to the root of the working tree and separated by a single NUL.
+#
+# To enable this hook, rename this file to "query-watchman" and set
+# 'git config core.fsmonitor .git/hooks/query-watchman'
+#
+my ($version, $last_update_token) = @ARGV;
+
+# Uncomment for debugging
+# print STDERR "$0 $version $last_update_token\n";
+
+# Check the hook interface version
+if ($version ne 2) {
+	die "Unsupported query-fsmonitor hook version '$version'.\n" .
+	    "Falling back to scanning...\n";
+}
+
+my $git_work_tree = get_working_dir();
+
+my $retry = 1;
+
+my $json_pkg;
+eval {
+	require JSON::XS;
+	$json_pkg = "JSON::XS";
+	1;
+} or do {
+	require JSON::PP;
+	$json_pkg = "JSON::PP";
+};
+
+launch_watchman();
+
+sub launch_watchman {
+	my $o = watchman_query();
+	if (is_work_tree_watched($o)) {
+		output_result($o->{clock}, @{$o->{files}});
+	}
+}
+
+sub output_result {
+	my ($clockid, @files) = @_;
+
+	# Uncomment for debugging watchman output
+	# open (my $fh, ">", ".git/watchman-output.out");
+	# binmode $fh, ":utf8";
+	# print $fh "$clockid\n@files\n";
+	# close $fh;
+
+	binmode STDOUT, ":utf8";
+	print $clockid;
+	print "\0";
+	local $, = "\0";
+	print @files;
+}
+
+sub watchman_clock {
+	my $response = qx/watchman clock "$git_work_tree"/;
+	die "Failed to get clock id on '$git_work_tree'.\n" .
+		"Falling back to scanning...\n" if $? != 0;
+
+	return $json_pkg->new->utf8->decode($response);
+}
+
+sub watchman_query {
+	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
+	or die "open2() failed: $!\n" .
+	"Falling back to scanning...\n";
+
+	# In the query expression below we're asking for names of files that
+	# changed since $last_update_token but not from the .git folder.
+	#
+	# To accomplish this, we're using the "since" generator to use the
+	# recency index to select candidate nodes and "fields" to limit the
+	# output to file names only. Then we're using the "expression" term to
+	# further constrain the results.
+	my $last_update_line = "";
+	if (substr($last_update_token, 0, 1) eq "c") {
+		$last_update_token = "\"$last_update_token\"";
+		$last_update_line = qq[\n"since": $last_update_token,];
+	}
+	my $query = <<"	END";
+		["query", "$git_work_tree", {$last_update_line
+			"fields": ["name"],
+			"expression": ["not", ["dirname", ".git"]]
+		}]
+	END
+
+	# Uncomment for debugging the watchman query
+	# open (my $fh, ">", ".git/watchman-query.json");
+	# print $fh $query;
+	# close $fh;
+
+	print CHLD_IN $query;
+	close CHLD_IN;
+	my $response = do {local $/; <CHLD_OUT>};
+
+	# Uncomment for debugging the watch response
+	# open ($fh, ">", ".git/watchman-response.json");
+	# print $fh $response;
+	# close $fh;
+
+	die "Watchman: command returned no output.\n" .
+	"Falling back to scanning...\n" if $response eq "";
+	die "Watchman: command returned invalid output: $response\n" .
+	"Falling back to scanning...\n" unless $response =~ /^\{/;
+
+	return $json_pkg->new->utf8->decode($response);
+}
+
+sub is_work_tree_watched {
+	my ($output) = @_;
+	my $error = $output->{error};
+	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
+		$retry--;
+		my $response = qx/watchman watch "$git_work_tree"/;
+		die "Failed to make watchman watch '$git_work_tree'.\n" .
+		    "Falling back to scanning...\n" if $? != 0;
+		$output = $json_pkg->new->utf8->decode($response);
+		$error = $output->{error};
+		die "Watchman: $error.\n" .
+		"Falling back to scanning...\n" if $error;
+
+		# Uncomment for debugging watchman output
+		# open (my $fh, ">", ".git/watchman-output.out");
+		# close $fh;
+
+		# Watchman will always return all files on the first query so
+		# return the fast "everything is dirty" flag to git and do the
+		# Watchman query just to get it over with now so we won't pay
+		# the cost in git to look up each individual file.
+		my $o = watchman_clock();
+		$error = $output->{error};
+
+		die "Watchman: $error.\n" .
+		"Falling back to scanning...\n" if $error;
+
+		output_result($o->{clock}, ("/"));
+		$last_update_token = $o->{clock};
+
+		eval { launch_watchman() };
+		return 0;
+	}
+
+	die "Watchman: $error.\n" .
+	"Falling back to scanning...\n" if $error;
+
+	return 1;
+}
+
+sub get_working_dir {
+	my $working_dir;
+	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
+		$working_dir = Win32::GetCwd();
+		$working_dir =~ tr/\\/\//;
+	} else {
+		require Cwd;
+		$working_dir = Cwd::cwd();
+	}
+
+	return $working_dir;
+}
+
+================
+File: reference/.git/hooks/post-update.sample
+================
+#!/bin/sh
+#
+# An example hook script to prepare a packed repository for use over
+# dumb transports.
+#
+# To enable this hook, rename this file to "post-update".
+
+exec git update-server-info
+
+================
+File: reference/.git/hooks/pre-applypatch.sample
+================
+#!/bin/sh
+#
+# An example hook script to verify what is about to be committed
+# by applypatch from an e-mail message.
+#
+# The hook should exit with non-zero status after issuing an
+# appropriate message if it wants to stop the commit.
+#
+# To enable this hook, rename this file to "pre-applypatch".
+
+. git-sh-setup
+precommit="$(git rev-parse --git-path hooks/pre-commit)"
+test -x "$precommit" && exec "$precommit" ${1+"$@"}
+:
+
+================
+File: reference/.git/hooks/pre-commit.sample
+================
+#!/bin/sh
+#
+# An example hook script to verify what is about to be committed.
+# Called by "git commit" with no arguments.  The hook should
+# exit with non-zero status after issuing an appropriate message if
+# it wants to stop the commit.
+#
+# To enable this hook, rename this file to "pre-commit".
+
+if git rev-parse --verify HEAD >/dev/null 2>&1
+then
+	against=HEAD
+else
+	# Initial commit: diff against an empty tree object
+	against=$(git hash-object -t tree /dev/null)
+fi
+
+# If you want to allow non-ASCII filenames set this variable to true.
+allownonascii=$(git config --type=bool hooks.allownonascii)
+
+# Redirect output to stderr.
+exec 1>&2
+
+# Cross platform projects tend to avoid non-ASCII filenames; prevent
+# them from being added to the repository. We exploit the fact that the
+# printable range starts at the space character and ends with tilde.
+if [ "$allownonascii" != "true" ] &&
+	# Note that the use of brackets around a tr range is ok here, (it's
+	# even required, for portability to Solaris 10's /usr/bin/tr), since
+	# the square bracket bytes happen to fall in the designated range.
+	test $(git diff --cached --name-only --diff-filter=A -z $against |
+	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
+then
+	cat <<\EOF
+Error: Attempt to add a non-ASCII file name.
+
+This can cause problems if you want to work with people on other platforms.
+
+To be portable it is advisable to rename the file.
+
+If you know what you are doing you can disable this check using:
+
+  git config hooks.allownonascii true
+EOF
+	exit 1
+fi
+
+# If there are whitespace errors, print the offending file names and fail.
+exec git diff-index --check --cached $against --
+
+================
+File: reference/.git/hooks/pre-merge-commit.sample
+================
+#!/bin/sh
+#
+# An example hook script to verify what is about to be committed.
+# Called by "git merge" with no arguments.  The hook should
+# exit with non-zero status after issuing an appropriate message to
+# stderr if it wants to stop the merge commit.
+#
+# To enable this hook, rename this file to "pre-merge-commit".
+
+. git-sh-setup
+test -x "$GIT_DIR/hooks/pre-commit" &&
+        exec "$GIT_DIR/hooks/pre-commit"
+:
+
+================
+File: reference/.git/hooks/pre-push.sample
+================
+#!/bin/sh
+
+# An example hook script to verify what is about to be pushed.  Called by "git
+# push" after it has checked the remote status, but before anything has been
+# pushed.  If this script exits with a non-zero status nothing will be pushed.
+#
+# This hook is called with the following parameters:
+#
+# $1 -- Name of the remote to which the push is being done
+# $2 -- URL to which the push is being done
+#
+# If pushing without using a named remote those arguments will be equal.
+#
+# Information about the commits which are being pushed is supplied as lines to
+# the standard input in the form:
+#
+#   <local ref> <local oid> <remote ref> <remote oid>
+#
+# This sample shows how to prevent push of commits where the log message starts
+# with "WIP" (work in progress).
+
+remote="$1"
+url="$2"
+
+zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
+
+while read local_ref local_oid remote_ref remote_oid
+do
+	if test "$local_oid" = "$zero"
+	then
+		# Handle delete
+		:
+	else
+		if test "$remote_oid" = "$zero"
+		then
+			# New branch, examine all commits
+			range="$local_oid"
+		else
+			# Update to existing branch, examine new commits
+			range="$remote_oid..$local_oid"
+		fi
+
+		# Check for WIP commit
+		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
+		if test -n "$commit"
+		then
+			echo >&2 "Found WIP commit in $local_ref, not pushing"
+			exit 1
+		fi
+	fi
+done
+
+exit 0
+
+================
+File: reference/.git/hooks/pre-rebase.sample
+================
+#!/bin/sh
+#
+# Copyright (c) 2006, 2008 Junio C Hamano
+#
+# The "pre-rebase" hook is run just before "git rebase" starts doing
+# its job, and can prevent the command from running by exiting with
+# non-zero status.
+#
+# The hook is called with the following parameters:
+#
+# $1 -- the upstream the series was forked from.
+# $2 -- the branch being rebased (or empty when rebasing the current branch).
+#
+# This sample shows how to prevent topic branches that are already
+# merged to 'next' branch from getting rebased, because allowing it
+# would result in rebasing already published history.
+
+publish=next
+basebranch="$1"
+if test "$#" = 2
+then
+	topic="refs/heads/$2"
+else
+	topic=`git symbolic-ref HEAD` ||
+	exit 0 ;# we do not interrupt rebasing detached HEAD
+fi
+
+case "$topic" in
+refs/heads/??/*)
+	;;
+*)
+	exit 0 ;# we do not interrupt others.
+	;;
+esac
+
+# Now we are dealing with a topic branch being rebased
+# on top of master.  Is it OK to rebase it?
+
+# Does the topic really exist?
+git show-ref -q "$topic" || {
+	echo >&2 "No such branch $topic"
+	exit 1
+}
+
+# Is topic fully merged to master?
+not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
+if test -z "$not_in_master"
+then
+	echo >&2 "$topic is fully merged to master; better remove it."
+	exit 1 ;# we could allow it, but there is no point.
+fi
+
+# Is topic ever merged to next?  If so you should not be rebasing it.
+only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
+only_next_2=`git rev-list ^master           ${publish} | sort`
+if test "$only_next_1" = "$only_next_2"
+then
+	not_in_topic=`git rev-list "^$topic" master`
+	if test -z "$not_in_topic"
+	then
+		echo >&2 "$topic is already up to date with master"
+		exit 1 ;# we could allow it, but there is no point.
+	else
+		exit 0
+	fi
+else
+	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
+	/usr/bin/perl -e '
+		my $topic = $ARGV[0];
+		my $msg = "* $topic has commits already merged to public branch:\n";
+		my (%not_in_next) = map {
+			/^([0-9a-f]+) /;
+			($1 => 1);
+		} split(/\n/, $ARGV[1]);
+		for my $elem (map {
+				/^([0-9a-f]+) (.*)$/;
+				[$1 => $2];
+			} split(/\n/, $ARGV[2])) {
+			if (!exists $not_in_next{$elem->[0]}) {
+				if ($msg) {
+					print STDERR $msg;
+					undef $msg;
+				}
+				print STDERR " $elem->[1]\n";
+			}
+		}
+	' "$topic" "$not_in_next" "$not_in_master"
+	exit 1
+fi
+
+<<\DOC_END
+
+This sample hook safeguards topic branches that have been
+published from being rewound.
+
+The workflow assumed here is:
+
+ * Once a topic branch forks from "master", "master" is never
+   merged into it again (either directly or indirectly).
+
+ * Once a topic branch is fully cooked and merged into "master",
+   it is deleted.  If you need to build on top of it to correct
+   earlier mistakes, a new topic branch is created by forking at
+   the tip of the "master".  This is not strictly necessary, but
+   it makes it easier to keep your history simple.
+
+ * Whenever you need to test or publish your changes to topic
+   branches, merge them into "next" branch.
+
+The script, being an example, hardcodes the publish branch name
+to be "next", but it is trivial to make it configurable via
+$GIT_DIR/config mechanism.
+
+With this workflow, you would want to know:
+
+(1) ... if a topic branch has ever been merged to "next".  Young
+    topic branches can have stupid mistakes you would rather
+    clean up before publishing, and things that have not been
+    merged into other branches can be easily rebased without
+    affecting other people.  But once it is published, you would
+    not want to rewind it.
+
+(2) ... if a topic branch has been fully merged to "master".
+    Then you can delete it.  More importantly, you should not
+    build on top of it -- other people may already want to
+    change things related to the topic as patches against your
+    "master", so if you need further changes, it is better to
+    fork the topic (perhaps with the same name) afresh from the
+    tip of "master".
+
+Let's look at this example:
+
+		   o---o---o---o---o---o---o---o---o---o "next"
+		  /       /           /           /
+		 /   a---a---b A     /           /
+		/   /               /           /
+	       /   /   c---c---c---c B         /
+	      /   /   /             \         /
+	     /   /   /   b---b C     \       /
+	    /   /   /   /             \     /
+    ---o---o---o---o---o---o---o---o---o---o---o "master"
+
+
+A, B and C are topic branches.
+
+ * A has one fix since it was merged up to "next".
+
+ * B has finished.  It has been fully merged up to "master" and "next",
+   and is ready to be deleted.
+
+ * C has not merged to "next" at all.
+
+We would want to allow C to be rebased, refuse A, and encourage
+B to be deleted.
+
+To compute (1):
+
+	git rev-list ^master ^topic next
+	git rev-list ^master        next
+
+	if these match, topic has not merged in next at all.
+
+To compute (2):
+
+	git rev-list master..topic
+
+	if this is empty, it is fully merged to "master".
+
+DOC_END
+
+================
+File: reference/.git/hooks/pre-receive.sample
+================
+#!/bin/sh
+#
+# An example hook script to make use of push options.
+# The example simply echoes all push options that start with 'echoback='
+# and rejects all pushes when the "reject" push option is used.
+#
+# To enable this hook, rename this file to "pre-receive".
+
+if test -n "$GIT_PUSH_OPTION_COUNT"
+then
+	i=0
+	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
+	do
+		eval "value=\$GIT_PUSH_OPTION_$i"
+		case "$value" in
+		echoback=*)
+			echo "echo from the pre-receive-hook: ${value#*=}" >&2
+			;;
+		reject)
+			exit 1
+		esac
+		i=$((i + 1))
+	done
+fi
+
+================
+File: reference/.git/hooks/prepare-commit-msg.sample
+================
+#!/bin/sh
+#
+# An example hook script to prepare the commit log message.
+# Called by "git commit" with the name of the file that has the
+# commit message, followed by the description of the commit
+# message's source.  The hook's purpose is to edit the commit
+# message file.  If the hook fails with a non-zero status,
+# the commit is aborted.
+#
+# To enable this hook, rename this file to "prepare-commit-msg".
+
+# This hook includes three examples. The first one removes the
+# "# Please enter the commit message..." help message.
+#
+# The second includes the output of "git diff --name-status -r"
+# into the message, just before the "git status" output.  It is
+# commented because it doesn't cope with --amend or with squashed
+# commits.
+#
+# The third example adds a Signed-off-by line to the message, that can
+# still be edited.  This is rarely a good idea.
+
+COMMIT_MSG_FILE=$1
+COMMIT_SOURCE=$2
+SHA1=$3
+
+/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"
+
+# case "$COMMIT_SOURCE,$SHA1" in
+#  ,|template,)
+#    /usr/bin/perl -i.bak -pe '
+#       print "\n" . `git diff --cached --name-status -r`
+# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
+#  *) ;;
+# esac
+
+# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
+# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
+# if test -z "$COMMIT_SOURCE"
+# then
+#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
+# fi
+
+================
+File: reference/.git/hooks/push-to-checkout.sample
+================
+#!/bin/sh
+
+# An example hook script to update a checked-out tree on a git push.
+#
+# This hook is invoked by git-receive-pack(1) when it reacts to git
+# push and updates reference(s) in its repository, and when the push
+# tries to update the branch that is currently checked out and the
+# receive.denyCurrentBranch configuration variable is set to
+# updateInstead.
+#
+# By default, such a push is refused if the working tree and the index
+# of the remote repository has any difference from the currently
+# checked out commit; when both the working tree and the index match
+# the current commit, they are updated to match the newly pushed tip
+# of the branch. This hook is to be used to override the default
+# behaviour; however the code below reimplements the default behaviour
+# as a starting point for convenient modification.
+#
+# The hook receives the commit with which the tip of the current
+# branch is going to be updated:
+commit=$1
+
+# It can exit with a non-zero status to refuse the push (when it does
+# so, it must not modify the index or the working tree).
+die () {
+	echo >&2 "$*"
+	exit 1
+}
+
+# Or it can make any necessary changes to the working tree and to the
+# index to bring them to the desired state when the tip of the current
+# branch is updated to the new commit, and exit with a zero status.
+#
+# For example, the hook can simply run git read-tree -u -m HEAD "$1"
+# in order to emulate git fetch that is run in the reverse direction
+# with git push, as the two-tree form of git read-tree -u -m is
+# essentially the same as git switch or git checkout that switches
+# branches while keeping the local changes in the working tree that do
+# not interfere with the difference between the branches.
+
+# The below is a more-or-less exact translation to shell of the C code
+# for the default behaviour for git's push-to-checkout hook defined in
+# the push_to_deploy() function in builtin/receive-pack.c.
+#
+# Note that the hook will be executed from the repository directory,
+# not from the working tree, so if you want to perform operations on
+# the working tree, you will have to adapt your code accordingly, e.g.
+# by adding "cd .." or using relative paths.
+
+if ! git update-index -q --ignore-submodules --refresh
+then
+	die "Up-to-date check failed"
+fi
+
+if ! git diff-files --quiet --ignore-submodules --
+then
+	die "Working directory has unstaged changes"
+fi
+
+# This is a rough translation of:
+#
+#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
+if git cat-file -e HEAD 2>/dev/null
+then
+	head=HEAD
+else
+	head=$(git hash-object -t tree --stdin </dev/null)
+fi
+
+if ! git diff-index --quiet --cached --ignore-submodules $head --
+then
+	die "Working directory has staged changes"
+fi
+
+if ! git read-tree -u -m "$commit"
+then
+	die "Could not update working tree to new HEAD"
+fi
+
+================
+File: reference/.git/hooks/update.sample
+================
+#!/bin/sh
+#
+# An example hook script to block unannotated tags from entering.
+# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
+#
+# To enable this hook, rename this file to "update".
+#
+# Config
+# ------
+# hooks.allowunannotated
+#   This boolean sets whether unannotated tags will be allowed into the
+#   repository.  By default they won't be.
+# hooks.allowdeletetag
+#   This boolean sets whether deleting tags will be allowed in the
+#   repository.  By default they won't be.
+# hooks.allowmodifytag
+#   This boolean sets whether a tag may be modified after creation. By default
+#   it won't be.
+# hooks.allowdeletebranch
+#   This boolean sets whether deleting branches will be allowed in the
+#   repository.  By default they won't be.
+# hooks.denycreatebranch
+#   This boolean sets whether remotely creating branches will be denied
+#   in the repository.  By default this is allowed.
+#
+
+# --- Command line
+refname="$1"
+oldrev="$2"
+newrev="$3"
+
+# --- Safety check
+if [ -z "$GIT_DIR" ]; then
+	echo "Don't run this script from the command line." >&2
+	echo " (if you want, you could supply GIT_DIR then run" >&2
+	echo "  $0 <ref> <oldrev> <newrev>)" >&2
+	exit 1
+fi
+
+if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
+	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
+	exit 1
+fi
+
+# --- Config
+allowunannotated=$(git config --type=bool hooks.allowunannotated)
+allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
+denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
+allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
+allowmodifytag=$(git config --type=bool hooks.allowmodifytag)
+
+# check for no description
+projectdesc=$(sed -e '1q' "$GIT_DIR/description")
+case "$projectdesc" in
+"Unnamed repository"* | "")
+	echo "*** Project description file hasn't been set" >&2
+	exit 1
+	;;
+esac
+
+# --- Check types
+# if $newrev is 0000...0000, it's a commit to delete a ref.
+zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
+if [ "$newrev" = "$zero" ]; then
+	newrev_type=delete
+else
+	newrev_type=$(git cat-file -t $newrev)
+fi
+
+case "$refname","$newrev_type" in
+	refs/tags/*,commit)
+		# un-annotated tag
+		short_refname=${refname##refs/tags/}
+		if [ "$allowunannotated" != "true" ]; then
+			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
+			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
+			exit 1
+		fi
+		;;
+	refs/tags/*,delete)
+		# delete tag
+		if [ "$allowdeletetag" != "true" ]; then
+			echo "*** Deleting a tag is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	refs/tags/*,tag)
+		# annotated tag
+		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
+		then
+			echo "*** Tag '$refname' already exists." >&2
+			echo "*** Modifying a tag is not allowed in this repository." >&2
+			exit 1
+		fi
+		;;
+	refs/heads/*,commit)
+		# branch
+		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
+			echo "*** Creating a branch is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	refs/heads/*,delete)
+		# delete branch
+		if [ "$allowdeletebranch" != "true" ]; then
+			echo "*** Deleting a branch is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	refs/remotes/*,commit)
+		# tracking branch
+		;;
+	refs/remotes/*,delete)
+		# delete tracking branch
+		if [ "$allowdeletebranch" != "true" ]; then
+			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	*)
+		# Anything else (is there anything else?)
+		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
+		exit 1
+		;;
+esac
+
+# --- Finished
+exit 0
+
+================
+File: reference/.git/info/exclude
+================
+# git ls-files --others --exclude-from=.git/info/exclude
+# Lines that start with '#' are comments.
+# For a project mostly in C, the following would be a good set of
+# exclude patterns (uncomment them if you want to use them):
+# *.[oa]
+# *~
+
+================
+File: reference/.git/logs/refs/heads/main
+================
+0000000000000000000000000000000000000000 0c32f7764e928daf9473961c488e6e9a855339d2 Luke Nittmann <luke.nittmann@gmail.com> 1738221446 -0800	clone: from https://github.com/internet-development/www-internet-v2.git
+
+================
+File: reference/.git/logs/refs/remotes/origin/HEAD
+================
+0000000000000000000000000000000000000000 0c32f7764e928daf9473961c488e6e9a855339d2 Luke Nittmann <luke.nittmann@gmail.com> 1738221446 -0800	clone: from https://github.com/internet-development/www-internet-v2.git
+
+================
+File: reference/.git/logs/HEAD
+================
+0000000000000000000000000000000000000000 0c32f7764e928daf9473961c488e6e9a855339d2 Luke Nittmann <luke.nittmann@gmail.com> 1738221446 -0800	clone: from https://github.com/internet-development/www-internet-v2.git
+
+================
+File: reference/.git/refs/heads/main
+================
+0c32f7764e928daf9473961c488e6e9a855339d2
+
+================
+File: reference/.git/refs/remotes/origin/HEAD
+================
+ref: refs/remotes/origin/main
+
+================
+File: reference/.git/config
+================
+[core]
+	repositoryformatversion = 0
+	filemode = true
+	bare = false
+	logallrefupdates = true
+	ignorecase = true
+	precomposeunicode = true
+[remote "origin"]
+	url = https://github.com/internet-development/www-internet-v2.git
+	fetch = +refs/heads/*:refs/remotes/origin/*
+[branch "main"]
+	remote = origin
+	merge = refs/heads/main
+	vscode-merge-base = origin/main
+
+================
+File: reference/.git/description
+================
+Unnamed repository; edit this file 'description' to name the repository.
+
+================
+File: reference/.git/FETCH_HEAD
+================
+0c32f7764e928daf9473961c488e6e9a855339d2		branch 'main' of https://github.com/internet-development/www-internet-v2
+
+================
+File: reference/.git/HEAD
+================
+ref: refs/heads/main
+
+================
+File: reference/.git/packed-refs
+================
+# pack-refs with: peeled fully-peeled sorted 
+0c32f7764e928daf9473961c488e6e9a855339d2 refs/remotes/origin/main
+
+================
+File: reference/app/office/head.tsx
+================
+import DefaultMetaTags from '@components/DefaultMetaTags';
+
+export default async function Head({ params }) {
+  return (
+    <>
+      <DefaultMetaTags />
+    </>
+  );
+}
+
+================
+File: reference/app/office/layout.tsx
+================
+import Providers from '@components/Providers';
+
+export default function RootLayout({ children }: { children: React.ReactNode }) {
+  return (
+    <html lang="en-us">
+      <body className="theme-light">
+        <Providers>{children}</Providers>
+      </body>
+    </html>
+  );
+}
+
+================
+File: reference/app/office/page.tsx
+================
+import '@root/global.scss';
+
+import * as Constants from '@common/constants';
+import * as Utilities from '@common/utilities';
+
+import Accordion from '@components/Accordion';
+import ActionListItem from '@components/ActionListItem';
+import Canvas from '@components/Canvas';
+import DefaultLayout from '@components/page/DefaultLayout';
+import InternetDevelopmentLogo from '@components/svg/InternetDevelopmentLogo';
+import InternetDevelopmentLogoMark from '@components/svg/InternetDevelopmentLogoMark';
+import Table from '@components/Table';
+import TableRow from '@components/TableRow';
+import TableColumn from '@components/TableColumn';
+import Package from '@root/package.json';
+import styles from '@components/page/root.module.scss';
+
+export const dynamic = 'force-static';
+
+const VIDEO_URL = 'https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/03025ac3-aa78-4a21-ac3c-a465cb792d39.mp4';
+
+export async function generateMetadata({ params, searchParams }) {
+  const title = `${Package.name} - OFFICE`;
+  const description = `Learn more about our Office in Pike Place, Seattle`;
+  const url = 'https://internet.dev';
+  const handle = '@internetxstudio';
+
+  return {
+    description,
+    icons: {
+      icon: '/favicon-32x32.png',
+      shortcut: '/favicon-16x16.png',
+    },
+    metadataBase: new URL('https://internet.dev/office'),
+    openGraph: {
+      description,
+      images: [
+        {
+          url: 'https://next-s3-public.s3.us-west-2.amazonaws.com/internet-dev/intdev.png',
+          width: 1500,
+          height: 785,
+        },
+      ],
+      title,
+      type: 'website',
+      url,
+    },
+    title,
+    twitter: {
+      card: 'summary_large_image',
+      description,
+      handle,
+      images: ['https://next-s3-public.s3.us-west-2.amazonaws.com/internet-dev/intdev.png'],
+      title,
+      url,
+    },
+    url,
+  };
+}
+
+export default async function Page(props) {
+  return (
+    <DefaultLayout previewPixelSRC="https://intdev-global.s3.us-west-2.amazonaws.com/template-app-icon.png">
+      <div className={styles.row}>
+        <div className={styles.column} style={{ height: '176px', padding: 0 }}>
+          <Canvas />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <InternetDevelopmentLogo height="24px" />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <img className={styles.image} src="https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/7e6088bb-4ce2-47d9-9dfd-d658faed484d.png" />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <aside className={styles.aside}>
+            Champion Building, Pike Place
+            <br />
+            Seattle, Washington
+            <br />
+            United States of America, Earth
+          </aside>
+          <br />
+          <p className={styles.p}>We invite builders who love trying new things and learning to collaborate with us, guided by our values: everything matters, support your friends, and doing your best is more than enough.</p>
+          <br />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <img className={styles.image} src="https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/0bc8d758-d4a9-412e-aa28-1fa6e6481a9a.jpg" />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`What does the INTDEV office offer?`}>
+            <br />
+            Our space offers hardwood floors, symmetrical fiber internet, a local area network, two full kitchens, three meeting booths, a server room, lunch tables, and dedicated workstations. With 24/7 access and amenities like a color printer, shredder, scanner, gallery lounge, and triple-filtered water, we foster a collaborative environment where you can build your vision alongside like-minded peers.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Apply on Users Garden
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Manage your account
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+              Read our Office Use Agreement
+            </ActionListItem>
+            <br />
+            <br /> <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <img className={styles.image} src="https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/6dcedf7d-82d1-45db-a53e-31de509a7759.jpg" />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How do I work with INTDEV at their office?`}>
+            <br />
+            You can find an application link below or by reaching out through social. Please note that the INTDEV reserved desks are invite-only and intended for those with a genuine interest in building things together.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Apply on Users Garden
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Manage your account
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+              Read our Office Use Agreement
+            </ActionListItem>
+            <br />
+            <br /> <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <img className={styles.image} src="https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/9c524b6a-855e-4329-88cd-7bb81796fcc2.jpg" />
+          <br />
+        </div>
+      </div>
+
+      <footer className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <ActionListItem icon={`⊹`} href="https://wireframes.internet.dev/" target="_blank">
+            Explore INTDEV's open source work
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://github.com/orgs/internet-development/repositories" target="_blank">
+            Follow us on GitHub
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://www.linkedin.com/company/internet-dev" target="_blank">
+            Follow us on LinkedIn
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://www.instagram.com/internetdevelopmentstudio/" target="_blank">
+            Follow us on Instagram
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://read.cv/teams/intdev" target="_blank">
+            Follow us on Read.cv
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://x.com/internetxstudio" target="_blank">
+            Follow us on X
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+            Get our attention on Telegram
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="/">
+            Go home
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+            Manage your account
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-acceptable-use" target="_blank">
+            Read our Acceptable Use Policy
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+            Read our Office Use Agreement
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-privacy-policy" target="_blank">
+            Read our Privacy Policy
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-terms-of-service" target="_blank">
+            Read our Terms of Use
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://github.com/internet-development/www-internet-v2" target="_blank">
+            View source
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev" target="_blank">
+            Write a post
+          </ActionListItem>
+          <br />
+          Copyright © 2025. All rights reserved.
+          <br />
+          <br />
+          <br />
+        </div>
+      </footer>
+    </DefaultLayout>
+  );
+}
+
+================
+File: reference/app/head.tsx
+================
+import DefaultMetaTags from '@components/DefaultMetaTags';
+
+export default async function Head({ params }) {
+  return (
+    <>
+      <DefaultMetaTags />
+    </>
+  );
+}
+
+================
+File: reference/app/layout.tsx
+================
+import Providers from '@components/Providers';
+
+export default function RootLayout({ children }: { children: React.ReactNode }) {
+  return (
+    <html lang="en-us">
+      <body className="theme-light">
+        <Providers>{children}</Providers>
+      </body>
+    </html>
+  );
+}
+
+================
+File: reference/app/manifest.ts
+================
+import Package from '@root/package.json';
+
+import { MetadataRoute } from 'next';
+
+export default function manifest(): MetadataRoute.Manifest {
+  return {
+    background_color: '#ffffff',
+    description: Package.description,
+    display: 'standalone',
+    icons: [
+      {
+        src: '/favicon.ico',
+        sizes: 'any',
+        type: 'image/x-icon',
+      },
+    ],
+    name: Package.name,
+    short_name: Package.name,
+    start_url: '/',
+    theme_color: '#ffffff',
+  };
+}
+
+================
+File: reference/app/page.tsx
+================
+import '@root/global.scss';
+
+import * as Constants from '@common/constants';
+import * as Utilities from '@common/utilities';
+
+import Accordion from '@components/Accordion';
+import ActionListItem from '@components/ActionListItem';
+import Canvas from '@components/Canvas';
+import DefaultLayout from '@components/page/DefaultLayout';
+import InternetDevelopmentLogo from '@components/svg/InternetDevelopmentLogo';
+import InternetDevelopmentLogoMark from '@components/svg/InternetDevelopmentLogoMark';
+import Table from '@components/Table';
+import TableRow from '@components/TableRow';
+import TableColumn from '@components/TableColumn';
+import Package from '@root/package.json';
+import styles from '@components/page/root.module.scss';
+
+export const dynamic = 'force-static';
+
+const VIDEO_URL = 'https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/03025ac3-aa78-4a21-ac3c-a465cb792d39.mp4';
+
+export async function generateMetadata({ params, searchParams }) {
+  const title = Package.name;
+  const description = Package.description;
+  const url = 'https://internet.dev';
+  const handle = '@internetxstudio';
+
+  return {
+    description,
+    icons: {
+      icon: '/favicon-32x32.png',
+      shortcut: '/favicon-16x16.png',
+    },
+    metadataBase: new URL('https://internet.dev'),
+    openGraph: {
+      description,
+      images: [
+        {
+          url: 'https://next-s3-public.s3.us-west-2.amazonaws.com/internet-dev/intdev.png',
+          width: 1500,
+          height: 785,
+        },
+      ],
+      title,
+      type: 'website',
+      url,
+    },
+    title,
+    twitter: {
+      card: 'summary_large_image',
+      description,
+      handle,
+      images: ['https://next-s3-public.s3.us-west-2.amazonaws.com/internet-dev/intdev.png'],
+      title,
+      url,
+    },
+    url,
+  };
+}
+
+export default async function Page(props) {
+  return (
+    <DefaultLayout previewPixelSRC="https://intdev-global.s3.us-west-2.amazonaws.com/template-app-icon.png">
+      <div className={styles.row}>
+        <div className={styles.column} style={{ height: '176px', padding: 0 }}>
+          <Canvas />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <video className={styles.video} src={VIDEO_URL} autoPlay muted loop playsInline preload="auto">
+            Your browser does not support the video tag.
+          </video>
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <h1 className={styles.h1}>Internet Development Studio Company ("INTDEV")</h1>
+          <aside className={styles.aside}>
+            Champion Building, Pike Place
+            <br />
+            Seattle, Washington
+            <br />
+            United States of America, Earth
+          </aside>
+          <br />
+          <p className={styles.p}>An american vocation guild and great hall for webmasters. Every day we practice the craft of designing, building, shipping, and maintaining websites, platforms, brands, and applications—end to end.</p>
+          <br />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <ActionListItem icon={`⊹`} href="https://wireframes.internet.dev/" target="_blank">
+            Explore INTDEV's open source work
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+            Get our attention on Telegram
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://sacred.computer" target="_blank">
+            Go explore SRCL
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="/office">
+            Learn more about the Pike Place office
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://www.beautifulthings.xyz/" target="_blank">
+            Look at beautiful things
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+            Manage your account
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev" target="_blank">
+            Write a post
+          </ActionListItem>
+
+          <br />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`What does the Internet Development Studio Company ("INTDEV") actually do?`}>
+            <br />
+            We provide a team you can hire to get things done.
+            <br />
+            <br />
+            That team is a 6 person dedicated tiger team specializing in delivering high-performance web applications, internal tools, branding assets, presentations, static websites, LLM interfaces, illustrations, productivity applications, technical writing, and general web development services. By embedding with up to four companies at a time, we allocate a shared bandwidth of 360 hours per week to drive productivity and deliver results. It’s a process we genuinely enjoy, and every major milestone we knock out helps us grow and learn.
+            <br />
+            <br />
+            We also provide an invite-only space in Seattle for people to work alongside us, offering a collaborative environment that also serves the portfolio venture companies of{' '}
+            <a href="https://mana.inc" target="_blank">
+              Mana Industries Fund 1 LP
+            </a>{' '}
+            and contributors.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://wireframes.internet.dev/" target="_blank">
+              Explore INTDEV's open source work
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`Who did INTDEV work for in 2024?`}>
+            <br />
+            Aliaksandr Hudzilin, Bakken & Bæck, Beautiful Things, El Cap Capital, Google, Mana Industries, Microsoft, Protocol Labs and various startups.
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`Who is INTDEV working for in 2025?`}>
+            <br />
+            Microsoft
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How does an engagement with INTDEV typically feel?`}>
+            <br />
+            Imagine hiring your own team, and one that already has a well-established design and engineering culture.
+            <br />
+            <br />
+            By hiring us, you gain a team that works seamlessly in person, is highly productive, and has a proven track record. This is all made possible by the extensive successful startup experience shared across our team.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How much does it cost to hire this team?`}>
+            <br />
+            <Table>
+              <TableRow>
+                <TableColumn>ONE MONTH</TableColumn>
+                <TableColumn>$70,000 USD</TableColumn>
+              </TableRow>
+
+              <TableRow>
+                <TableColumn>THREE MONTHS</TableColumn>
+                <TableColumn>$195,000 USD</TableColumn>
+              </TableRow>
+
+              <TableRow>
+                <TableColumn>SIX MONTHS</TableColumn>
+                <TableColumn>$360,000 USD</TableColumn>
+              </TableRow>
+
+              <TableRow>
+                <TableColumn>NINE MONTHS</TableColumn>
+                <TableColumn>$495,000 USD</TableColumn>
+              </TableRow>
+
+              <TableRow>
+                <TableColumn>TWELVE MONTHS</TableColumn>
+                <TableColumn>$600,000 USD</TableColumn>
+              </TableRow>
+            </Table>
+            <br />
+            From the start, it will feel like you built this team yourself.
+            <br />
+            <br />
+            We don’t do change orders—instead, we aim to complete as much work as possible within our estimates while you have us on retainer. This approach is ideal for situations where you want to accomplish a lot efficiently.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`Why do I have to hire the full six-person team?`}>
+            <br />
+            Our studio fosters deep in-person collaboration, where we openly discuss challenges and make a concerted effort to learn and improve our skills through shared experiences.
+            <br />
+            <br />
+            This approach strengthens our team and enables us to support venture-backed companies with tight deadlines and ambitious goals. By learning from each other’s mistakes, we continually refine our work and strive to hit the mark every time.
+            <br />
+            <br />
+            Also, it should be known that, based on our prices, you're only paying the cost of a full-time employee for a much larger headcount. A lot of clients find this to be high value.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`Is there a discount if we want to work with less people from the INTDEV?`}>
+            <br />
+            No, but as a client, you are welcome to work with fewer team members if that is your preference.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How does working with the INTDEV work day to day?`}>
+            <br />
+            Here’s a glimpse of what it’s like to collaborate with our six-person team.
+            <br />
+            <br />
+            <Accordion defaultValue={true} title={`Discovery Video Call`}>
+              <br />
+              We begin with a video call to understand your goals and explore how our team can deliver results. We’re flexible with your preferred video chat platform.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`[OPTIONAL] First Meeting in Seattle, WA`}>
+              <br />
+              Join us at our Pike Place office to work alongside our team as we dive into your goals. You’re welcome to use our meeting rooms and open desks, meet other companies, and enjoy engaging conversations. We always have filtered water and are here on weekends, too.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Onboarding`}>
+              <br />
+              From day one, we integrate seamlessly into your team, bringing years of experience and familiarity with compliance requirements like NDAs. Comfortable across Linux, MacOS, and Windows, we’re happy to train your employees when needed and adapt to your existing tools and processes.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Embedding`}>
+              <br />
+              We adapt to the roles you need, whether following your direction or advocating for key features, integrating into your daily routine at whatever level you require. Comfortable with agile, waterfall, or even a “move fast and break things” approach, we’re always ready to embrace challenges.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Working in the Office`}>
+              <br />
+              We can host stand-ups and any meetings you need in our office, with meeting rooms perfect for bringing in your own customers. Sharing the space often leads to team-building, and we’re happy to host and cook for large groups with a little notice. <br />
+              <br />
+              Pike Place offers great restaurants and scenic spots for breaks, though guest parking isn’t available, so please plan accordingly. Our office features symmetrical fiber internet and quiet workspaces, and we keep our client list small to stay flexible and accommodating.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Technical Program Management`}>
+              <br />
+              We help identify your Technical Program Management needs, aligning your team around a shared goal with fresh perspectives. We guide long-term strategic decisions, define “done” from the start, and set expectations upfront. We bring experience from high-profile projects while focusing on supporting your vision and helping you achieve it.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Zero to One`}>
+              <br />
+              With over a decade of startup experience, our design partners help bring your product to market for the first time and support future launches, treating each launch as a personal milestone. We love exploring logos, drawing inspiration from our collection of books, and rely on tools like Figma, Sketch, Photoshop, and Illustrator. <br />
+              <br />
+              Our network also includes some of Seattle’s top photographers and videographers, many of whom work directly in our space.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Get in Quick`}>
+              <br />
+              When you need quick results without extra discussion, we’re ready to jump in, whether it’s tackling long-standing backlogs, handling one-off tasks, or adding missing design system components. We can deliver results without delay. <br />
+              <br />
+              We’re unfazed by technical debt, comfortable managing tricky repository forks, and always ready to take on backlog tasks—just let us know how we can help.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Tooling Investment`}>
+              <br />
+              We know a team’s identity is often shaped by the tools they use. Whether you’re looking to strengthen your current toolkit or start fresh, we can help. Our expertise spans tools like Next.js, Postgres, Figma, GSAP, and Tailwind, along with CSS dialects like CSS-in-JS and email-compliant inline styles. <br />
+              <br />
+              With one of our partners contributing to Expo (React Native), we deeply value tooling. We respect your existing tools while embracing fresh starts that energize teams and foster growth. Involve us in consulting meetings for fresh perspectives—we’re always ready to explore new technologies, including LLMs.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Launch, Maintain, and Survive`}>
+              <br />
+              Your uptime is critical, and while we can’t promise 99.9999999% uptime at scale, we specialize in keeping websites running with low effort on your part. This allows you to focus on growing your product and engaging your customers without unnecessary distractions.
+              <br />
+              <br />
+              Whether you need help with IPFS, managing VPS, consulting on on-premise solutions, or working with tools like Fly, Vercel, and Render, we’ve got you covered. With experience in GCE, GCS, AWS EC2, S3, and database backups, we’re here to ensure your systems work.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Supporting Volatility`}>
+              <br />
+              If you’re navigating changes in priorities, we offer the flexibility to help you adapt. We understand that leadership shifts happen, and we’re here to support you while keeping your team focused on what matters most. Whether starting fresh or removing what’s not working, our flexible deal structure evolves with your needs, always aligned with your goal of driving success and growth for your business.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Libraries and Documentation`}>
+              <br />
+              We value great documentation and design systems, even if they’re not always a priority for everyone. We can create clear, user-friendly documentation and develop intuitive design systems for your web products, building tools to make these processes more efficient. <br />
+              <br />
+              Whether working with tools like Scalar, GitBook, and Notion or contributing to publications, blog posts, and video tutorials, we’re happy to provide custom solutions to meet your needs.
+              <br />
+              <br />
+            </Accordion>
+            <br />
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`What is INTDEV's relationship with the University of Washington?`}>
+            <br />
+            If your department requires a website that complies with the latest legal standards, is powered by modern web tooling, and boasts a functional design, partner with us. We read 313 pages of documentation for you.
+            <br />
+            <br />
+            We admire the{' '}
+            <a href="https://www.washington.edu/" target="_blank">
+              University of Washington
+            </a>
+            ’s dedication to innovation and inclusivity, and the alumni who work in our office proudly align our mission with these values. As designers, we are committed to ensuring that every website we create is not only modern but also accessible.
+            <br />
+            <br />
+            <a href="https://www.federalregister.gov/documents/2024/04/24/2024-07758/nondiscrimination-on-the-basis-of-disability-accessibility-of-web-information-and-services-of-state" target="_blank">
+              The guidelines
+            </a>{' '}
+            released by the Department of Justice under Title II of the Americans with Disabilities Act (ADA) have set a new bar for digital accessibility, which we embrace. Effective April 24, 2024, these standards require all web content to achieve compliance by April 24, 2026.
+            <br />
+            <br />
+            <Accordion defaultValue={true} title={`Ensuring all web content and mobile applications meet the Web Content Accessibility Guidelines (WCAG) 2.1, Level AA standards.`}>
+              <br />
+              This is a cornerstone of our approach to accessibility. We achieve this through rigorous processes and meticulous attention to detail. Our team follows best practices to make sure every user has a seamless and inclusive experience.
+              <br />
+              <br />
+              <Table>
+                <TableRow>
+                  <TableColumn>Semantic HTML</TableColumn>
+                  <TableColumn>We use semantic HTML to define the structure and meaning of web content, ensuring assistive technologies can interpret and navigate the site effectively.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Keyboard Accessibility</TableColumn>
+                  <TableColumn>We ensure all features are accessible via keyboard for users who cannot use a mouse.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Color Contrast</TableColumn>
+                  <TableColumn>We employ high-contrast color schemes to ensure text is readable by users with visual impairments while adhering to UW’s brand guidelines.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Alternative Text</TableColumn>
+                  <TableColumn>We provide descriptive text for images and multimedia content, helping screen readers convey information accurately to visually impaired users.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Resizable Text</TableColumn>
+                  <TableColumn>Our designs allow for text resizing without loss of content or functionality, catering to users who need larger fonts.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Error Identification and Suggestion</TableColumn>
+                  <TableColumn>Our forms are designed to identify errors and provide suggestions for correction, improving usability for those with cognitive disabilities.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Consistent Navigation</TableColumn>
+                  <TableColumn>Our predictable navigation and layouts help users with cognitive and learning disabilities.</TableColumn>
+                </TableRow>
+              </Table>
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Providing alternative text for all visual media, including images, videos, and interactive elements.`}>
+              <br />
+              Alternative text ensures that all users, including those with visual impairments, can fully understand and engage with all content on the website.
+              <br />
+              <br />
+              <Table>
+                <TableRow>
+                  <TableColumn>Descriptive Alt Text for Images</TableColumn>
+                  <TableColumn>We provide concise and descriptive alternative text for all images, enabling screen reader users to understand the context and content of visual elements.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Detailed Descriptions for Complex Images</TableColumn>
+                  <TableColumn>For complex images such as charts, infographics, or detailed diagrams, we offer extended descriptions to convey all critical information effectively.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Captions for Videos</TableColumn>
+                  <TableColumn>All video content includes synchronized captions, ensuring that users with hearing impairments can access the information being presented.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Transcripts for Audio Content</TableColumn>
+                  <TableColumn>We provide textual transcripts for all audio content, making it accessible to users with hearing impairments and allowing for easier comprehension during listening.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Text Alternatives for Interactive Elements</TableColumn>
+                  <TableColumn>Interactive elements, such as buttons, forms, and dynamic content, come with clear text alternatives or labels that describe their function and purpose.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Accessible Icons</TableColumn>
+                  <TableColumn>We use ARIA labels or alternative text for icons and other graphical elements to ensure they communicate their meaning to assistive technologies.</TableColumn>
+                </TableRow>
+              </Table>
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Making complex navigational structures accessible with clear and user-friendly interfaces.`}>
+              <br />
+              This is a fundamental aspect of our design philosophy. We believe that every user deserves an accessible browsing experience, regardless of the complexity of the content.
+              <br />
+              <br />
+              <Table>
+                <TableRow>
+                  <TableColumn>Logical Menu Hierarchies</TableColumn>
+                  <TableColumn>We design navigation menus with logical hierarchies, ensuring that users can easily find the information they need with minimal clicks.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Descriptive Links</TableColumn>
+                  <TableColumn>All links are clearly labeled with descriptive text, so users understand where each link will take them, aiding both screen readers and visual users.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Accessible Dropdown Menus</TableColumn>
+                  <TableColumn>Our dropdown menus are designed to be keyboard-accessible and screen reader-friendly, ensuring inclusivity for all users.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Breadcrumb Navigation</TableColumn>
+                  <TableColumn>We employ breadcrumb navigation to help users understand their current location within the website and easily backtrack if necessary.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Search Functionality</TableColumn>
+                  <TableColumn>We integrate advanced search functionalities, allowing users to quickly locate specific content without navigating through multiple menus.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Consistent Layouts</TableColumn>
+                  <TableColumn>We maintain consistency in layouts and navigation across all pages, so users can predict and understand where to find information.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Skip Navigation Links</TableColumn>
+                  <TableColumn>Our skip links allow users to bypass repetitive content and navigate directly to the main content, which is particularly helpful for screen reader users.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Visual Indicators</TableColumn>
+                  <TableColumn>Clear visual indicators highlight the current page or section, helping users keep track of their navigation path.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>ARIA Landmarks</TableColumn>
+                  <TableColumn>We implement ARIA (Accessible Rich Internet Applications) landmarks to define regions of a page, making it easier for screen reader users to navigate and skip to different sections.</TableColumn>
+                </TableRow>
+              </Table>
+              <br />
+              <br />
+            </Accordion>
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How do I join INTDEV as a Webmaster?`}>
+            <br />
+            In 2025, we plan to grow our team from six to eight members. If you’re passionate about the vocation of being a Webmaster, let’s talk.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://wireframes.internet.dev/examples/features/job-posting" target="_blank">
+              View the job
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`What does the INTDEV office offer?`}>
+            <br />
+            Our space offers hardwood floors, symmetrical fiber internet, a local area network, two full kitchens, three meeting booths, a server room, lunch tables, and dedicated workstations. With 24/7 access and amenities like a color printer, shredder, scanner, gallery lounge, and triple-filtered water, we foster a collaborative environment where you can build your vision alongside like-minded peers.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Apply on Users Garden
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Manage your account
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+              Read our Office Use Agreement
+            </ActionListItem>
+            <br />
+            <br /> <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How do I work with INTDEV at their office?`}>
+            <br />
+            You can find an application link below or by reaching out through social. Please note that the INTDEV reserved desks are invite-only and intended for those with a genuine interest in building things together.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Apply on Users Garden
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Manage your account
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+              Read our Office Use Agreement
+            </ActionListItem>
+            <br />
+            <br /> <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          Use this SVG for a logo without the word “INTDEV.”
+          <br />
+          <br />
+          <InternetDevelopmentLogoMark height="48px" />
+          <br />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          Use this SVG for a logo that includes our brand name.
+          <br />
+          <br />
+          <InternetDevelopmentLogo height="48px" />
+          <br />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <footer className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <img className={styles.image} src="https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/2fb7e012-4fa9-4446-9bf4-e2c5c7e4992a.jpg" />
+          <ActionListItem icon={`⊹`} href="https://wireframes.internet.dev/" target="_blank">
+            Explore INTDEV's open source work
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://bsky.app/profile/internetstudio.bsky.social" target="_blank">
+            Follow us on Bluesky
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://github.com/orgs/internet-development/repositories" target="_blank">
+            Follow us on GitHub
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://www.linkedin.com/company/internet-dev" target="_blank">
+            Follow us on LinkedIn
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://www.instagram.com/internetdevelopmentstudio/" target="_blank">
+            Follow us on Instagram
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://read.cv/teams/intdev" target="_blank">
+            Follow us on Read.cv
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://x.com/internetxstudio" target="_blank">
+            Follow us on X
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+            Get our attention on Telegram
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://sacred.computer" target="_blank">
+            Go explore SRCL
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="/office">
+            Learn more about the Pike Place office
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+            Manage your account
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-acceptable-use" target="_blank">
+            Read our Acceptable Use Policy
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+            Read our Office Use Agreement
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-privacy-policy" target="_blank">
+            Read our Privacy Policy
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-terms-of-service" target="_blank">
+            Read our Terms of Use
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://github.com/internet-development/www-internet-v2" target="_blank">
+            View source
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev" target="_blank">
+            Write a post
+          </ActionListItem>
+          <br />
+          Copyright © 2025. All rights reserved.
+          <br />
+          <br />
+          <br />
+        </div>
+      </footer>
+    </DefaultLayout>
+  );
+}
+
+================
+File: reference/app/robots.ts
+================
+import { MetadataRoute } from 'next';
+
+export default function robots(): MetadataRoute.Robots {
+  return {
+    rules: {
+      userAgent: '*',
+      allow: '/',
+      disallow: '/api/',
+    },
+    sitemap: 'https://internet.dev/sitemap.xml',
+  };
+}
+
+================
+File: reference/app/sitemap.ts
+================
+import { MetadataRoute } from 'next';
+
+export default function sitemap(): MetadataRoute.Sitemap {
+  return [
+    {
+      url: 'https://internet.dev',
+      lastModified: new Date(),
+    },
+  ];
+}
+
+================
+File: reference/common/constants.ts
+================
+export const MAX_SIZE_BYTES = 15728640;
+
+// NOTE(jimmylee):
+// https://github.com/internet-development/apis
+// export const API = `http://localhost:10001/api`;
+export const API = `https://api.internet.dev/api`;
+
+export const Users = {
+  tiers: {
+    UNVERIFIED: 0,
+    VERIFIED: 10,
+    PAYING: 20,
+    GENERAL_CO_WORKING: 30,
+    PARTNER: 40,
+    ADMIN: 100,
+  },
+};
+
+export const Tiers = {
+  PAYING: 899,
+  GENERAL_CO_WORKING: 32900,
+  PARTNER: 279000,
+};
+
+export const Payments = {
+  899: 'PAYING',
+  32900: 'GENERAL_CO_WORKING',
+  279000: 'PARTNER',
+};
+
+export const Payouts = {
+  PAYING: 1500,
+  GENERAL_CO_WORKING: 45000,
+  PARTNER: 45000,
+};
+
+export const LANDSCAPES = [
+  ['Sahara Desert', 'The Sahara stretches across North Africa with shifting dunes that tower above the horizon. Even in its harsh sunlight and cold nights, resilient life finds a way to endure.'],
+  ['Grand Canyon', 'Carved by the Colorado River, the Grand Canyon reveals layers of ancient rock. Its chasms echo with wind and the distant calls of raptors gliding through the afternoon sky.'],
+  ['Amazon Rainforest', 'The Amazon Rainforest teems with biodiversity under a dense green canopy. Rivers and flooded plains sustain countless species, while humid air hangs heavy with the promise of storms.'],
+  ['Rocky Mountains', 'The Rockies rise like rugged spines across the continent. Snowpack feeds rivers that carve valleys where elk graze, and fir trees cling to the slopes.'],
+  ['Gobi Desert', 'The Gobi Desert rolls out in arid sweeps across northern China and southern Mongolia. Sparse grasses and hardy camels testify to its unforgiving climate.'],
+  ['Andes Mountains', 'The Andes dominate western South America with ragged peaks and hidden valleys. Llamas graze on high plateaus, and glaciers feed the rivers far below.'],
+  ['Serengeti Plains', 'The Serengeti spreads under the African sun in rolling grasslands. Wildebeests and zebras migrate in vast herds, guided by the promise of water and fresh pasture.'],
+  ['Yosemite Valley', 'Glacial forces shaped this granite cradle in California. Towering waterfalls cascade from sheer cliffs, while giant sequoias stand in quiet strength.'],
+  ['Namib Desert', 'The Namib Desert clings to the Atlantic coast of southern Africa. Rust-red dunes shift above hidden water tables where desert elephants roam.'],
+  ['Patagonia', 'Patagonia’s windswept plains and jagged peaks stretch across Argentina and Chile. Glaciers calve into turquoise lakes, and guanacos graze on hardy grasses.'],
+  ['Swiss Alps', 'The Swiss Alps rise with sharp spires of snow and ice. Mountain chalets cling to slopes where wildflowers bloom each summer in vibrant displays.'],
+  ['Himalayas', 'The Himalayas hold the world’s highest summits beneath a freezing sky. From lush foothills to lofty glaciers, this range tests life’s resilience.'],
+  ['Icelandic Highlands', 'Iceland’s interior stands stark and raw with volcanic plains, steaming vents, and glacier-fed rivers. The wind sweeps across moss-coated lava fields in lonely gusts.'],
+  ['Atacama Desert', 'The Atacama is among the driest places on Earth. Its scorched soil and salt flats see rare blooms that burst into color after elusive rains.'],
+  ['Redwood Forest', 'Coastal redwoods tower in perpetual mist along the Pacific. Their trunks, thick and ancient, cradle a hidden world of fern and moss.'],
+  ['Scottish Highlands', 'The Highlands roll in rugged hills capped by heather and stone. Lochs reflect ever-shifting skies, and the wind carries the distant clang of sheep bells.'],
+  ['Great Rift Valley', 'This massive geological trench cleaves eastern Africa, where lakes shimmer at the bottom of steep escarpments. Flamingos gather in vast flocks to feed on algae.'],
+  ['Okavango Delta', 'The Okavango spreads like a bright labyrinth of channels and wetlands in Botswana. Seasonal floods create a green haven for elephants, lions, and hippos.'],
+  ['Appalachian Mountains', 'Old and eroded, the Appalachians meander through eastern North America. Their forests host black bears, rhododendrons, and the misty quiet of forest hollows.'],
+  ['Death Valley', 'Death Valley bakes under a relentless sun, reaching some of the hottest temperatures on record. Cracked salt flats testify to evaporated lakes and lost water.'],
+  ['Dolomites', 'Jagged limestone peaks define northern Italy’s Dolomites. Alpine meadows lie below sheer cliffs, where climbers test themselves against silent stone.'],
+  ['Torres del Paine', 'Chile’s Torres del Paine juts into the southern sky with glacier-fed lakes at its base. Guanacos roam windblown plains as ice cracks overhead.'],
+  ['Lofoten Islands', 'Lofoten’s dramatic peaks rise straight from Norway’s cold seas. Fishing villages huddle along rocky shores, while gulls circle overhead in crisp air.'],
+  ['Siberian Tundra', 'The Siberian tundra spans a realm of permafrost and low shrubs. Winters stretch long and bleak, yet migratory birds still find respite here each summer.'],
+  ['Norwegian Fjords', 'Deep fjords carve into Norway’s coast where dark waters mirror towering cliffs. Small farms cling to green patches between rock and sea.'],
+  ['Bungle Bungle Range', 'These striped sandstone domes rise from the Australian outback. Gorges cut deep under a harsh sun, hiding pockets of lush vegetation.'],
+  ['Zion Canyon', 'Zion Canyon glows red and orange under the Utah sky. The Virgin River sculpts sheer walls that watch over narrow trails and hidden pools.'],
+  ['Lake Baikal', 'Lake Baikal in Siberia is the world’s deepest lake. Its waters shimmer with unmatched clarity, home to species found nowhere else on Earth.'],
+  ['Banff National Park', 'Banff crowns the Canadian Rockies with turquoise lakes and towering peaks. Grizzlies roam pine forests while glacier-fed rivers reflect untouched wilderness.'],
+  ['Wadi Rum', 'Wadi Rum’s sandstone cliffs loom in Jordan’s desert, carved by millennia of wind and time. Nomadic tribes wander under a silent, star-filled sky.'],
+  ['Cappadocia', 'Cappadocia’s whimsical rock formations rise over central Turkey’s plains. Soft stone spires hold hidden chapels and the ghosts of ancient dwellers.'],
+];
+
+export const SAMPLE_TABLE_DATA_CHANGE_ME = [
+  ['NAME', 'SYMBOL', 'PRICE', 'HOLDINGS'],
+  ['Bat', 'BAT', '$9.01', '400'],
+  ['Bear', 'BR', '$56.78', '200'],
+  ['Camel', 'CML', '$55.67', '70'],
+  ['Cheetah', 'CHT', '$13.45', '150'],
+  ['Crab', 'CRB', '$15.67', '250'],
+  ['Deer', 'DER', '$29.99', '110'],
+  ['Dolphin', 'DLP', '$77.89', '50'],
+  ['Eagle', 'EGL', '$45.67', '90'],
+  ['Falcon', 'FLC', '$40.22', '85'],
+  ['Fox', 'FOX', '$12.34', '100'],
+  ['Frog', 'FRG', '$7.89', '400'],
+  ['Giraffe', 'GRF', '$44.56', '80'],
+  ['Hedgehog', 'HDG', '$11.23', '200'],
+  ['Horse', 'HRS', '$54.32', '70'],
+  ['Kangaroo', 'KNG', '$15.67', '120'],
+  ['Koala', 'KLA', '$22.34', '150'],
+  ['Leopard', 'LPR', '$14.56', '110'],
+  ['Lemur', 'LMR', '$11.12', '320'],
+  ['Lion', 'LION', '$67.89', '80'],
+  ['Lynx', 'LNX', '$16.78', '130'],
+  ['Mouse', 'MSE', '$5.12', '500'],
+  ['Octopus', 'OCT', '$88.90', '40'],
+  ['Otter', 'OTR', '$20.21', '180'],
+  ['Owl', 'OWL', '$19.01', '160'],
+  ['Panda', 'PND', '$78.90', '55'],
+  ['Peacock', 'PCK', '$12.34', '100'],
+  ['Penguin', 'PNG', '$33.45', '90'],
+  ['Porcupine', 'PRC', '$17.89', '140'],
+  ['Rabbit', 'RBT', '$9.10', '350'],
+  ['Raccoon', 'RCC', '$18.90', '150'],
+  ['Shark', 'SHK', '$89.01', '50'],
+  ['Snake', 'SNK', '$10.11', '300'],
+  ['Squirrel', 'SQL', '$10.12', '250'],
+  ['Tiger', 'TGR', '$34.56', '120'],
+  ['Turtle', 'TRL', '$66.78', '60'],
+  ['Whale', 'WHL', '$123.45', '30'],
+  ['Wolf', 'WLF', '$23.45', '150'],
+  ['Zebra', 'ZBR', '$65.43', '60'],
+];
+
+export const CHESSBOARD_DEFAULT_POSITIONS: string[][] = [
+  ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'],
+  ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],
+  ['', '', '', '', '', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],
+  ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R'],
+];
+
+export const CHESSBOARD_BAD_BISHOP: string[][] = [
+  ['r', ' ', ' ', 'q', ' ', 'r', 'k', ''],
+  [' ', 'b', ' ', ' ', ' ', 'p', 'p', 'p'],
+  ['p', '', 'p', 'b', 'p', 'n', '', ''],
+  ['', '', 'p', 'p', '', '', '', ''],
+  ['Q', '', '', 'P', '', '', '', ''],
+  ['', '', 'P', '', 'P', 'N', 'B', ''],
+  ['P', 'P', ' ', 'N', '', 'P', 'P', 'P'],
+  ['R', ' ', ' ', ' ', 'K', ' ', ' ', 'R'],
+];
+
+export const CHESSBOARD_CHECKMATE_STEP_ONE: string[][] = [
+  [' ', ' ', ' ', '', ' ', 'r', ' ', 'r'],
+  ['p', 'b', ' ', 'n', ' ', 'p', ' ', 'k'],
+  ['', 'q', '', 'N', 'p', '', '', ''],
+  ['', 'p', 'p', 'n', 'P', '', 'Q', ''],
+  ['', 'b', 'p', 'P', 'B', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['P', 'P', ' ', ' ', ' ', 'P', 'P', 'P'],
+  ['R', ' ', ' ', ' ', ' ', 'R', 'K', ''],
+];
+
+export const CHESSBOARD_CHECKMATE_STEP_TWO: string[][] = [
+  [' ', ' ', ' ', '', ' ', 'r', ' ', 'r'],
+  ['p', 'b', ' ', 'n', ' ', ' ', ' ', 'k'],
+  ['', 'q', '', 'N', 'p', '', '', ''],
+  ['', 'p', 'p', 'n', 'P', 'p', 'Q', ''],
+  ['', 'b', 'p', 'P', 'B', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['P', 'P', ' ', ' ', ' ', 'P', 'P', 'P'],
+  ['R', ' ', ' ', ' ', ' ', 'R', 'K', ''],
+];
+
+export const CHESSBOARD_CHECKMATE_STEP_THREE: string[][] = [
+  [' ', ' ', ' ', '', ' ', 'r', ' ', 'r'],
+  ['p', 'b', ' ', 'n', ' ', ' ', ' ', 'k'],
+  ['', 'q', '', 'N', 'p', 'P', '', ''],
+  ['', 'p', 'p', 'n', '', '', 'Q', ''],
+  ['', 'b', 'p', 'P', 'B', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['P', 'P', ' ', ' ', ' ', 'P', 'P', 'P'],
+  ['R', ' ', ' ', ' ', ' ', 'R', 'K', ''],
+];
+
+================
+File: reference/common/hooks.ts
+================
+import * as React from 'react';
+
+export function useDebouncedCallback<T>(ms: number, f: (...args: T[]) => void, deps: any[]): (...args: T[]) => void {
+  let throttled = false;
+  let latestArgs: T | null = null;
+
+  const clearThrottle = () => {
+    throttled = false;
+
+    if (latestArgs !== null) {
+      f(latestArgs);
+      latestArgs = null;
+    }
+  };
+
+  return React.useCallback(
+    (args) => {
+      if (throttled) {
+        latestArgs = args;
+      } else {
+        f(args);
+
+        throttled = true;
+
+        setTimeout(clearThrottle, ms);
+      }
+    },
+    [...deps, ms]
+  );
+}
+
+================
+File: reference/common/position.ts
+================
+export type Placement = 'top' | 'bottom' | 'left' | 'right';
+
+export function calculate(triggerElement: HTMLElement, popoverElement: HTMLElement, scrollX: number = window.scrollX, scrollY: number = window.scrollY): { placement: Placement; position: { top: number; left: number } } {
+  let triggerRect;
+  let popoverRect;
+
+  if (triggerElement) {
+    triggerRect = triggerElement.getBoundingClientRect();
+  }
+
+  if (popoverElement) {
+    popoverRect = popoverElement.getBoundingClientRect();
+  }
+
+  const spaceAbove = triggerRect.top;
+  const spaceBelow = window.innerHeight - triggerRect.bottom;
+  const spaceLeft = triggerRect.left;
+  const spaceRight = window.innerWidth - triggerRect.right;
+
+  const viewportHeightThreshold = window.innerHeight * 0.4;
+  const viewportWidthThreshold = window.innerWidth * 0.4;
+
+  let placement: Placement = 'bottom';
+  let top = 0;
+  let left = 0;
+  if (!popoverRect) {
+    return { placement, position: { top: 0, left: 0 } };
+  }
+
+  if (spaceAbove >= viewportHeightThreshold && spaceAbove >= popoverRect.height) {
+    placement = 'top';
+    top = triggerRect.top + scrollY - popoverRect.height;
+    left = triggerRect.left + scrollX + (triggerRect.width - popoverRect.width) / 2;
+  } else if (spaceBelow >= viewportHeightThreshold && spaceBelow >= popoverRect.height) {
+    placement = 'bottom';
+    top = triggerRect.bottom + scrollY;
+    left = triggerRect.left + scrollX + (triggerRect.width - popoverRect.width) / 2;
+  } else if (spaceRight >= viewportWidthThreshold && spaceRight >= popoverRect.width) {
+    placement = 'right';
+    top = triggerRect.top + scrollY + (triggerRect.height - popoverRect.height) / 2;
+    left = triggerRect.right + scrollX;
+  } else if (spaceLeft >= viewportWidthThreshold && spaceLeft >= popoverRect.width) {
+    placement = 'left';
+    top = triggerRect.top + scrollY + (triggerRect.height - popoverRect.height) / 2;
+    left = triggerRect.left + scrollX - popoverRect.width;
+  } else {
+    placement = 'bottom';
+    top = triggerRect.bottom + scrollY;
+    left = triggerRect.left + scrollX + (triggerRect.width - popoverRect.width) / 2;
+  }
+
+  if (left < 0) left = 0;
+  else if (left + popoverRect.width > window.innerWidth) left = window.innerWidth - popoverRect.width;
+
+  if (top < 0) top = 0;
+  else if (top + popoverRect.height > window.innerHeight + scrollY) top = window.innerHeight + scrollY - popoverRect.height;
+
+  return { placement, position: { top, left } };
+}
+
+================
+File: reference/common/queries.ts
+================
+import * as Constants from '@common/constants';
+import * as Utilities from '@common/utilities';
+
+export async function getData({ route, key, body }, qualifier = 'data') {
+  let result;
+  try {
+    const response = await fetch(route, {
+      method: 'POST',
+      headers: { 'X-API-KEY': key, 'Content-Type': 'application/json' },
+      body: JSON.stringify(body),
+    });
+    result = await response.json();
+  } catch (e) {
+    return null;
+  }
+
+  if (!result) {
+    return null;
+  }
+
+  if (result.error) {
+    return null;
+  }
+
+  if (!result[qualifier]) {
+    return null;
+  }
+
+  return result;
+}
+
+export async function onUserListData({ key }) {
+  const route = `${Constants.API}/data`;
+  const body = {};
+  return await getData({ route, key, body });
+}
+
+export async function onUserDeleteData({ id, key }) {
+  const route = `${Constants.API}/data/delete`;
+  const body = { id };
+  return await getData({ route, key, body });
+}
+
+export async function onRefreshDocuments({ key, type, domain }) {
+  const route = `${Constants.API}/documents`;
+  const body = { type, domain };
+  return await getData({ route, key, body });
+}
+
+export async function onGetDocumentById({ id }) {
+  const route = `${Constants.API}/documents/${id}`;
+  const body = {};
+  return await getData({ route, key: null, body });
+}
+
+export async function onUserCreateDocument({ key, type, domain }) {
+  const route = `${Constants.API}/documents/create`;
+  const body = { type, domain };
+  return await getData({ route, key, body });
+}
+
+export async function onDeleteDocumentById({ id, key }) {
+  const route = `${Constants.API}/documents/delete`;
+  const body = { id };
+  return await getData({ route, key, body });
+}
+
+export async function onUpdateDocumentById({ id, key, data }) {
+  const route = `${Constants.API}/documents/update`;
+  const body = { id, data };
+  return await getData({ route, key, body });
+}
+
+export async function onPublicUserAuthenticate({ email, password }) {
+  const route = `${Constants.API}/users/authenticate`;
+  const body = { email, password };
+  return getData({ route, key: null, body }, 'user');
+}
+
+export async function onPublicUserForgotPassword({ email }) {
+  const route = `${Constants.API}/users/reset-password`;
+  const body = { email, source: 'wireframes.internet.dev' };
+  return getData({ route, key: null, body }, 'success');
+}
+
+export async function onUserChangePassword({ key, password }) {
+  const route = `${Constants.API}/users/update-viewer-password`;
+  const body = { password };
+  return getData({ route, key, body });
+}
+
+export async function onUserRegenerateAPIKey({ email, password }) {
+  const route = `${Constants.API}/users/regenerate-key`;
+  const body = { email, password };
+  return getData({ route, key: null, body }, 'user');
+}
+
+export async function onUserUnsubscribeServices({ key }) {
+  const route = `${Constants.API}/users/subscriptions/unsubscribe`;
+  const body = null;
+  return getData({ route, key, body }, 'user');
+}
+
+export async function onRefreshPosts({ key, type, user_id }) {
+  const route = `${Constants.API}/posts`;
+  const body = { type, user_id };
+  return await getData({ route, key, body });
+}
+
+export async function onUserCreatePost({ id, key, src, type }) {
+  const route = `${Constants.API}/posts/create`;
+  const body = { type, fields: { fileId: id, public: true }, src };
+  return getData({ route, key, body });
+}
+
+export async function onUserCreateThread({ fields, key, src, type }) {
+  const route = `${Constants.API}/posts/create`;
+  const body = { fields, src, type };
+  return getData({ route, key, body });
+}
+
+export async function onUserDeletePost({ id, key }) {
+  const route = `${Constants.API}/posts/delete`;
+  const body = { id };
+  return getData({ route, key, body });
+}
+
+export async function onUserListThreadReplies({ id, key, orderBy }) {
+  const route = `${Constants.API}/posts/all-thread-replies`;
+  const body = { id, orderBy };
+  return getData({ route, key, body });
+}
+
+export async function onUserListThreads({ key, orderBy }) {
+  const route = `${Constants.API}/posts/all-threads`;
+  const body = { orderBy };
+  return getData({ route, key, body });
+}
+
+export async function onUserUploadDataGCS({ domain, file, key }) {
+  let signedResult;
+  const name = file.name;
+  const type = file.type;
+  const size = file.size;
+
+  if (size > Constants.MAX_SIZE_BYTES) {
+    return { error: 'File size exceeds 15mb limit' };
+  }
+
+  try {
+    const route = `${Constants.API}/data/generate-presigned-url-gcs`;
+    const body = { domain, type, file: name, size };
+    signedResult = await getData({ route, key, body }, 'uploadURL');
+  } catch (e) {
+    return null;
+  }
+
+  try {
+    fetch(signedResult.uploadURL, {
+      method: 'PUT',
+      headers: {
+        'Content-Type': 'application/octet-stream',
+      },
+      body: file,
+    });
+  } catch (e) {
+    return null;
+  }
+
+  return signedResult;
+}
+
+export async function onUserUploadDataS3({ domain, file, key }) {
+  let signedResult;
+  const name = file.name;
+  const type = file.type;
+  const size = file.size;
+
+  if (size > Constants.MAX_SIZE_BYTES) {
+    return { error: 'File size exceeds 15mb limit' };
+  }
+
+  try {
+    const route = `${Constants.API}/data/generate-presigned-url`;
+    const body = { domain, type, file: name, size };
+    signedResult = await getData({ route, key, body }, 'uploadURL');
+  } catch (e) {
+    return null;
+  }
+
+  try {
+    fetch(signedResult.uploadURL, {
+      method: 'PUT',
+      body: file,
+    });
+  } catch (e) {
+    return null;
+  }
+
+  return signedResult;
+}
+
+================
+File: reference/common/server.ts
+================
+import * as Utilities from '@common/utilities';
+
+import Cors from '@modules/cors';
+
+// NOTE(jimmylee)
+// import aesjs from 'aes-js';
+/*
+Some endpoints on https://api.internet.dev require server-side decryption. Without it, you won’t be able to perform actions like password recovery or Google authentication. To enable these features, you’ll need to set two environment variables with the correct values, and have an active partnership with us.
+
+When we built this open-source template for learning purposes, we aimed to make it fully open and accessible. However, since we are also running a service, certain restrictions are necessary. We appreciate your understanding.
+
+API_AES_KEY=
+API_IV_KEY=
+*/
+
+/*
+export function decrypt(hex) {
+  if (Utilities.isEmpty(process.env.API_AES_KEY)) {
+    throw new Error('process.env.API_AES_KEY');
+    return;
+  }
+
+  if (Utilities.isEmpty(process.env.API_IV_KEY)) {
+    throw new Error('process.env.API_IV_KEY');
+    return;
+  }
+
+  const aesKey = aesjs.utils.utf8.toBytes(process.env.API_AES_KEY);
+  const base64IV = process.env.API_IV_KEY;
+
+  if (!base64IV) {
+    throw new Error('process.env.API_IV_KEY is undefined. Please set the environment variable.');
+  }
+
+  const ivBytes = aesjs.utils.hex.toBytes(Buffer.from(base64IV, 'base64').toString('hex'));
+  const aesCtr = new aesjs.ModeOfOperation.ctr(aesKey, new aesjs.Counter(ivBytes));
+  const encryptedBytes = aesjs.utils.hex.toBytes(hex);
+  const decryptedBytes = aesCtr.decrypt(encryptedBytes);
+  const decrypted = aesjs.utils.utf8.fromBytes(decryptedBytes);
+
+  return decrypted;
+}
+*/
+
+export function initMiddleware(middleware) {
+  return (req, res) =>
+    new Promise((resolve, reject) => {
+      middleware(req, res, (result) => {
+        if (result instanceof Error) {
+          return reject(result);
+        }
+        return resolve(result);
+      });
+    });
+}
+
+export const cors = initMiddleware(
+  Cors({
+    methods: ['GET', 'POST', 'DELETE', 'OPTIONS'],
+  })
+);
+
+export async function setup(context): Promise<{ sessionKey?: any; viewer?: Record<string, any> | null }> {
+  let viewer = null;
+  let sessionKey = context.req.cookies['sitekey'] || '';
+
+  if (!Utilities.isEmpty(sessionKey)) {
+    try {
+      const response = await fetch('https://api.internet.dev/api/users/viewer', {
+        method: 'PUT',
+        headers: { 'X-API-KEY': sessionKey, 'Content-Type': 'application/json' },
+      });
+      const result = await response.json();
+      if (result && result.viewer) {
+        viewer = result.viewer;
+      }
+    } catch (e) {}
+  }
+
+  return { sessionKey, viewer };
+}
+
+export async function tryKeyWithoutCookie(key): Promise<{ sessionKey?: any; viewer?: Record<string, any> | null }> {
+  let viewer = null;
+
+  if (!Utilities.isEmpty(key)) {
+    try {
+      const response = await fetch('https://api.internet.dev/api/users/viewer', {
+        method: 'PUT',
+        headers: { 'X-API-KEY': key, 'Content-Type': 'application/json' },
+      });
+      const result = await response.json();
+      if (result && result.viewer) {
+        viewer = result.viewer;
+      }
+    } catch (e) {}
+  }
+
+  return { sessionKey: key, viewer };
+}
+
+================
+File: reference/common/utilities.ts
+================
+const hasOwn = {}.hasOwnProperty;
+const localhostDomainRE = /^localhost[\:?\d]*(?:[^\:?\d]\S*)?$/;
+const nonLocalhostDomainRE = /^[^\s\.]+\.\S{2,}$/;
+const protocolAndDomainRE = /^(?:\w+:)?\/\/(\S+)$/;
+
+export function noop() {
+  return null;
+}
+
+export function pluralize(text: string, count: number) {
+  return count > 1 || count === 0 ? `${text}s` : text;
+}
+
+export function getOrdinalNumber(n) {
+  return n + (n > 0 ? ['th', 'st', 'nd', 'rd'][(n > 3 && n < 21) || n % 10 > 3 ? 0 : n % 10] : '');
+}
+
+// NOTE(jimmylee)
+// Stolen from: https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/deepEqual.ts
+export function deepEqual(x: any, y: any): boolean {
+  //@ts-ignore
+  return x && y && typeof x === 'object' && typeof y === 'object'
+    ? Object.keys(x).length === Object.keys(y).length &&
+        //@ts-ignore
+        Object.keys(x).reduce((isEqual, key) => isEqual && deepEqual(x[key], y[key]), true)
+    : x === y;
+}
+
+export function getDomainFromEmailWithoutAnySubdomain(email: string): string {
+  const atIndex = email.lastIndexOf('@');
+  if (atIndex === -1) {
+    return '';
+  }
+
+  const domain = email.slice(atIndex + 1);
+  const domainParts = domain.split('.');
+
+  if (domainParts.length < 2) {
+    return '';
+  }
+
+  const mainDomain = domainParts.slice(-2).join('.');
+  return mainDomain;
+}
+
+export function onHandleThemeChange(className?: string) {
+  const body = document.body;
+
+  body.classList.forEach((existingClass) => {
+    if (existingClass.startsWith('theme-')) {
+      body.classList.remove(existingClass);
+    }
+  });
+
+  if (className) {
+    body.classList.add(className);
+  } else {
+    body.classList.add('theme-light');
+  }
+}
+
+export function onHandleFontChange(className?: string) {
+  const body = document.body;
+
+  if (className) {
+    body.classList.forEach((existingClass) => {
+      if (existingClass.startsWith('font-')) {
+        body.classList.remove(existingClass);
+      }
+    });
+
+    body.classList.add(className);
+    return;
+  }
+
+  body.classList.forEach((existingClass) => {
+    if (existingClass.startsWith('font-')) {
+      body.classList.remove(existingClass);
+    }
+  });
+}
+
+export function formatDollars(value: number): string {
+  return new Intl.NumberFormat('en-US', {
+    style: 'currency',
+    currency: 'USD',
+  }).format(value);
+}
+
+export function calculatePositionWithGutter(rect, objectWidth, viewportWidth, gutter = 24) {
+  const right = viewportWidth - rect.right;
+  const top = rect.top + rect.height + gutter;
+  const side = right + objectWidth >= viewportWidth ? 'left' : 'right';
+  const adjustedRight = side === 'left' ? viewportWidth - objectWidth - gutter : right;
+  return { top, right: adjustedRight, side };
+}
+
+export function calculatePositionWithGutterById(id, objectWidth, viewportWidth, gutter?) {
+  let rect;
+  if (id) {
+    const el = document.getElementById(id);
+    if (el) {
+      rect = el.getBoundingClientRect();
+    }
+  }
+  return calculatePositionWithGutter(rect, objectWidth, viewportWidth, gutter);
+}
+
+export function leftPad(input, length) {
+  const zerosNeeded = length - input.length;
+  if (zerosNeeded <= 0) {
+    return input;
+  }
+
+  const zeros = '0'.repeat(zerosNeeded);
+
+  return zeros + input;
+}
+
+export function toDateISOString(data: string) {
+  const date = new Date(data);
+  const dayOfWeek = date.toLocaleDateString('en-US', {
+    weekday: 'long',
+  });
+  const month = date.toLocaleDateString('en-US', {
+    month: 'long',
+  });
+  const dayOfMonth = getOrdinalNumber(date.getDate());
+  const year = date.getFullYear();
+
+  const formattedDate = `${dayOfWeek}, ${month} ${dayOfMonth}, ${year}`;
+
+  return formattedDate;
+}
+
+export function elide(string, length = 140, emptyState = '...') {
+  if (isEmpty(string)) {
+    return emptyState;
+  }
+
+  if (string.length < length) {
+    return string.trim();
+  }
+
+  return `${string.substring(0, length)}...`;
+}
+
+export function bytesToSize(bytes: number, decimals: number = 2) {
+  if (bytes === 0) return '0 Bytes';
+
+  const k = 1000;
+  const dm = decimals < 0 ? 0 : decimals;
+  const sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
+
+  const i = Math.floor(Math.log(bytes) / Math.log(k));
+
+  return `${(bytes / Math.pow(k, i)).toFixed(dm)} ${sizes[i]}`;
+}
+
+export function isEmpty(text: any) {
+  // NOTE(jimmylee):
+  // If a number gets passed in, it isn't considered empty for zero.
+  if (text === 0) {
+    return false;
+  }
+
+  if (!text) {
+    return true;
+  }
+
+  if (typeof text === 'object') {
+    return true;
+  }
+
+  if (text.length === 0) {
+    return true;
+  }
+
+  text = text.toString();
+
+  return Boolean(!text.trim());
+}
+
+export function createSlug(text: any) {
+  if (isEmpty(text)) {
+    return 'untitled';
+  }
+
+  const a = 'æøåàáäâèéëêìíïîòóöôùúüûñçßÿœæŕśńṕẃǵǹḿǘẍźḧ·/_,:;';
+  const b = 'aoaaaaaeeeeiiiioooouuuuncsyoarsnpwgnmuxzh------';
+  const p = new RegExp(a.split('').join('|'), 'g');
+
+  return text
+    .toString()
+    .toLowerCase()
+    .replace(/\s+/g, '-') // Replace spaces with -
+    .replace(p, (c) => b.charAt(a.indexOf(c))) // Replace special chars
+    .replace(/&/g, '-and-') // Replace & with 'and'
+    .replace(/[^\w\-]+/g, '') // Remove all non-word chars
+    .replace(/\-\-+/g, '-') // Replace multiple - with single -
+    .replace(/^-+/, '') // Trim - from start of text
+    .replace(/-+$/, ''); // Trim - from end of text
+}
+
+export function isUrl(string: any) {
+  if (typeof string !== 'string') {
+    return false;
+  }
+
+  let match = string.match(protocolAndDomainRE);
+  if (!match) {
+    return false;
+  }
+
+  let everythingAfterProtocol = match[1];
+  if (!everythingAfterProtocol) {
+    return false;
+  }
+
+  if (localhostDomainRE.test(everythingAfterProtocol) || nonLocalhostDomainRE.test(everythingAfterProtocol)) {
+    return true;
+  }
+
+  return false;
+}
+
+export function debounce<Args extends unknown[]>(fn: (...args: Args) => void, delay: number) {
+  let timeoutID: number | undefined;
+  let lastArgs: Args | undefined;
+
+  const run = () => {
+    if (lastArgs) {
+      fn(...lastArgs);
+      lastArgs = undefined;
+    }
+  };
+
+  const debounced = (...args: Args) => {
+    clearTimeout(timeoutID);
+    lastArgs = args;
+    timeoutID = window.setTimeout(run, delay);
+  };
+
+  debounced.flush = () => {
+    clearTimeout(timeoutID);
+  };
+
+  return debounced;
+}
+
+export function timeAgo(dateInput: Date | string | number): string {
+  const date = new Date(dateInput);
+  const now = new Date();
+  const secondsPast = (now.getTime() - date.getTime()) / 1000;
+
+  if (secondsPast < 0 || isNaN(secondsPast)) {
+    return '[INVALID]';
+  }
+
+  if (secondsPast < 60) {
+    return 'Just now';
+  } else if (secondsPast < 3600) {
+    const minutes = Math.floor(secondsPast / 60);
+    return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;
+  } else if (secondsPast < 86400) {
+    const hours = Math.floor(secondsPast / 3600);
+    return `${hours} hour${hours > 1 ? 's' : ''} ago`;
+  } else if (secondsPast < 604800) {
+    const days = Math.floor(secondsPast / 86400);
+    return `${days} day${days > 1 ? 's' : ''} ago`;
+  }
+
+  const formattedDate = date.toLocaleDateString('en-US', {
+    month: '2-digit',
+    day: '2-digit',
+    year: 'numeric',
+  });
+
+  return formattedDate;
+}
+
+export function classNames(...args: any[]): string {
+  let classes: string[] = [];
+
+  for (let i = 0; i < arguments.length; i++) {
+    let arg = arguments[i];
+    if (!arg) continue;
+
+    let argType = typeof arg;
+
+    if (argType === 'string' || argType === 'number') {
+      classes.push(arg);
+    } else if (Array.isArray(arg)) {
+      if (arg.length) {
+        let inner = classNames.apply(null, arg);
+        if (inner) {
+          classes.push(inner);
+        }
+      }
+    } else if (argType === 'object') {
+      if (arg.toString !== Object.prototype.toString) {
+        classes.push(arg.toString());
+      } else {
+        for (let key in arg) {
+          if (hasOwn.call(arg, key) && arg[key]) {
+            classes.push(key);
+          }
+        }
+      }
+    }
+  }
+
+  return classes.join(' ');
+}
+
+export async function generateNonce() {
+  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
+  let result = '';
+  const charactersLength = characters.length;
+  for (let i = 0; i < 8; i++) {
+    result += characters.charAt(Math.floor(Math.random() * charactersLength));
+  }
+  return result;
+}
+
+export function filterUndefined(obj) {
+  const res = {};
+  Object.keys(obj)
+    .filter((k) => obj[k] !== undefined)
+    .forEach((k) => (res[k] = obj[k]));
+  return res;
+}
+
+export const isFocusableElement = (element: EventTarget | null): element is HTMLElement => {
+  if (!element || !(element instanceof HTMLElement)) {
+    return false;
+  }
+
+  const focusableSelectors = ['a[href]', 'button', 'input', 'select', 'textarea', '[tabindex]:not([tabindex="-1"])', '[contenteditable="true"]'];
+
+  return element.matches(focusableSelectors.join(', '));
+};
+
+export const findNextFocusable = (element: Element | null, direction: 'next' | 'previous' = 'next'): HTMLElement | null => {
+  if (!element) return null;
+
+  const focusableSelectors = ['a[href]', 'button', 'input', 'select', 'textarea', '[tabindex]:not([tabindex="-1"])', '[contenteditable="true"]'];
+
+  const focusableElements = Array.from(document.querySelectorAll<HTMLElement>(focusableSelectors.join(', ')));
+
+  const currentIndex = focusableElements.indexOf(element as HTMLElement);
+
+  if (currentIndex !== -1) {
+    const nextIndex = direction === 'next' ? (currentIndex + 1) % focusableElements.length : (currentIndex - 1 + focusableElements.length) % focusableElements.length;
+
+    return focusableElements[nextIndex];
+  }
+
+  return null;
+};
+
+export const findFocusableDescendant = (container: Element | null, currentFocused: Element | null = null, direction: 'next' | 'previous' = 'next'): HTMLElement | null => {
+  if (!container) return null;
+
+  const focusableElements = Array.from(container.querySelectorAll<HTMLElement>('a[href], button, input, select, textarea, [tabindex]:not([tabindex="-1"]), [contenteditable="true"]'));
+
+  if (focusableElements.length === 0) return null;
+
+  let index = 0;
+  if (currentFocused) {
+    const currentIndex = focusableElements.indexOf(currentFocused as HTMLElement);
+    if (currentIndex !== -1) {
+      index = direction === 'next' ? currentIndex + 1 : currentIndex - 1;
+    }
+  }
+
+  if (index >= 0 && index < focusableElements.length) {
+    return focusableElements[index];
+  }
+
+  return null;
+};
+
+================
+File: reference/components/detectors/OutsideElementEvent.tsx
+================
+import * as React from 'react';
+
+interface OutsideElementEventProps {
+  className?: string;
+  children: React.ReactNode;
+  onOutsideEvent: (event: MouseEvent | TouchEvent) => void;
+  style?: React.CSSProperties;
+}
+
+const OutsideElementEvent: React.FC<OutsideElementEventProps> = ({ className, children, onOutsideEvent, style }) => {
+  const ref = React.useRef<HTMLDivElement>(null);
+
+  const handleOutsideEvent = React.useCallback(
+    (event: MouseEvent | TouchEvent) => {
+      if (!(event.target instanceof Element)) return;
+
+      if (event.target.hasAttribute('data-detector-ignore')) {
+        return;
+      }
+
+      if (ref.current && !ref.current.contains(event.target as Node)) {
+        onOutsideEvent(event);
+      }
+    },
+    [onOutsideEvent]
+  );
+
+  React.useEffect(() => {
+    document.addEventListener('mousedown', handleOutsideEvent);
+    document.addEventListener('touchstart', handleOutsideEvent);
+
+    return () => {
+      document.removeEventListener('mousedown', handleOutsideEvent);
+      document.removeEventListener('touchstart', handleOutsideEvent);
+    };
+  }, [handleOutsideEvent]);
+
+  return (
+    <div ref={ref} className={className} style={style}>
+      {children}
+    </div>
+  );
+};
+
+export default OutsideElementEvent;
+
+================
+File: reference/components/examples/AS400.module.scss
+================
+.root {
+}
+
+================
+File: reference/components/examples/AS400.tsx
+================
+'use client';
+
+import styles from '@components/AS400.module.scss';
+
+import * as React from 'react';
+
+import Card from '@components/Card';
+import Row from '@components/Row';
+import RowSpaceBetween from '@components/RowSpaceBetween';
+import Table from '@components/Table';
+import TableRow from '@components/TableRow';
+import TableColumn from '@components/TableColumn';
+import TextArea from '@components/TextArea';
+
+type AS400Props = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const AS400 = () => {
+  return (
+    <>
+      <Card>
+        <RowSpaceBetween>
+          <span style={{ minWidth: `10ch` }}>COMMAND</span>
+          <span style={{ minWidth: `10ch` }}>Menu : ⌃+T</span>
+          <span style={{ minWidth: `10ch`, textAlign: 'right' }}>IND333</span>
+        </RowSpaceBetween>
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow style={{ textAlign: 'center' }}>
+            <TableColumn>F O O D&nbsp;&nbsp;D I S T R I B U T I O N</TableColumn>
+          </TableRow>
+          <TableRow style={{ textAlign: 'center' }}>
+            <TableColumn>- - Advance Sales Menu - -</TableColumn>
+          </TableRow>
+        </Table>
+        <br />
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow>
+            <TableColumn>1. Order Entry</TableColumn>
+            <TableColumn>13. Create Texlon/MSI Orders</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>2. Route Recap</TableColumn>
+            <TableColumn>14. Create Posting w/Scanner</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>3. Staging Ticket</TableColumn>
+            <TableColumn></TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>4. Picking Ticket</TableColumn>
+            <TableColumn>15. Order List</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>5. Order Posting</TableColumn>
+            <TableColumn>16. Order Maintenance</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>6. Bill of Lading</TableColumn>
+            <TableColumn>16. Order Hold</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>7. Load Sheets</TableColumn>
+            <TableColumn>18. Order Release</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>8. Order Entry Invoicing</TableColumn>
+            <TableColumn>19. Order Cancellation</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>9. Order Entry Confirmation</TableColumn>
+            <TableColumn>20. Order Change</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>10. Order Entry Processing</TableColumn>
+            <TableColumn>21. Unsettled Invoice Report</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>&nbsp;</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>11. Credit Memo Entry</TableColumn>
+            <TableColumn>- - Transaction Processing Menu - -</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>12. Credit Memo Processing</TableColumn>
+            <TableColumn>- - Main Menu - -</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn></TableColumn>
+            <TableColumn>24. Sign Off</TableColumn>
+          </TableRow>
+        </Table>
+        <br />
+        <br />
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow>
+            <TableColumn>Ready for option number or command</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>
+              <TextArea isBlink />
+            </TableColumn>
+          </TableRow>
+        </Table>
+      </Card>
+      <br />
+      <Card>
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;Option: 1337...&nbsp;&nbsp; Copy: US&nbsp;&nbsp;&nbsp;&nbsp;ITEM ACTIVITY INQUIRY</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>IND333</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Regn: NW</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}></TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;Item #: 6666666</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}></TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GMO HONEYDEW MELON USDA PRIME 72 OZ</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}></TableColumn>
+          </TableRow>
+        </Table>
+        <br />
+        <br />
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow>
+            <TableColumn>Warehouse</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>On Hand</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>On Order</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>In Transit</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>Total</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>W/S</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>Sell</TableColumn>
+          </TableRow>
+
+          <TableRow>
+            <TableColumn>&nbsp;</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;01 SEATTLE</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;02 PORTLAND</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;06 TUKWILA</TableColumn>
+            <TableColumn>89</TableColumn>
+            <TableColumn>162</TableColumn>
+            <TableColumn>162</TableColumn>
+            <TableColumn>413</TableColumn>
+            <TableColumn>7.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;08 KIRKLAND</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;09 ALOHA</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;10 ANCHORAGE</TableColumn>
+            <TableColumn>107</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>324</TableColumn>
+            <TableColumn>511</TableColumn>
+            <TableColumn>5.5</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;13 SILVERDALE</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;17 EUGENE</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;61 FEDERAL WAY</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;63 NE ANCHORAGE</TableColumn>
+            <TableColumn>229</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>162</TableColumn>
+            <TableColumn>391</TableColumn>
+            <TableColumn>4.5</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;64 TUMWATER</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;67 MISSOULA</TableColumn>
+            <TableColumn>201</TableColumn>
+            <TableColumn>648</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>849</TableColumn>
+            <TableColumn>5.2</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;95 TACOMA</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+        </Table>
+        <br />
+        <br />
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow>
+            <TableColumn>CF-3 Exit&nbsp;&nbsp;&nbsp;&nbsp;CF7-Next Item&nbsp;&nbsp;&nbsp;&nbsp;CF21-Print Report</TableColumn>
+          </TableRow>
+        </Table>
+      </Card>
+    </>
+  );
+};
+
+AS400.displayName = 'AS400';
+
+export default AS400;
+
+================
+File: reference/components/examples/DashboardRadar.module.scss
+================
+.customSidebar {
+  display: flex;
+  align-items: center;
+  justify-content: space-between;
+  width: 100%;
+  flex-direction: column;
+  height: calc(var(--theme-line-height-base) * (var(--font-size) * 29.5));
+}
+
+.customTop {
+  min-height: 10%;
+  height: 100%;
+}
+
+.customBottom {
+  flex-shrink: 0;
+  width: 100%;
+}
+
+.root {
+  min-width: 56ch;
+}
+
+.cross {
+  width: 9ch;
+  height: calc(var(--theme-line-height-base) * (var(--font-size) * 7));
+  margin: calc(var(--theme-line-height-base) * (var(--font-size) * 0.5)) 0 calc(var(--theme-line-height-base) * (var(--font-size) * 0.5)) 0;
+  display: flex;
+  justify-content: space-between;
+  flex-direction: column;
+}
+
+.square {
+  width: 4.3ch;
+  height: calc(var(--theme-line-height-base) * (var(--font-size) * 3.4));
+}
+
+.nw {
+  border-right: 2px solid var(--theme-text);
+  border-bottom: 2px solid var(--theme-text);
+}
+
+.ne {
+  border-left: 2px solid var(--theme-text);
+  border-bottom: 2px solid var(--theme-text);
+}
+
+.sw {
+  border-top: 2px solid var(--theme-text);
+  border-right: 2px solid var(--theme-text);
+}
+
+.se {
+  border-top: 2px solid var(--theme-text);
+  border-left: 2px solid var(--theme-text);
+}
+
+.customContent {
+  width: 100%;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  height: calc(var(--theme-line-height-base) * (var(--font-size) * 24.5));
+}
+
+================
+File: reference/components/examples/DashboardRadar.tsx
+================
+import styles from '@components/examples/DashboardRadar.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import ActionButton from '@components/ActionButton';
+import ButtonGroup from '@components/ButtonGroup';
+import Card from '@components/Card';
+import RowSpaceBetween from '@components/RowSpaceBetween';
+import SidebarLayout from '@components/SidebarLayout';
+import Sphere from '@components/svg/Sphere';
+
+const RadarMarker = (props) => {
+  return (
+    <div className={styles.cross}>
+      <RowSpaceBetween>
+        <div className={Utilities.classNames(styles.square, styles.nw)} />
+        <div className={Utilities.classNames(styles.square, styles.ne)} />
+      </RowSpaceBetween>
+      <RowSpaceBetween>
+        <div className={Utilities.classNames(styles.square, styles.sw)} />
+        <div className={Utilities.classNames(styles.square, styles.se)} />
+      </RowSpaceBetween>
+    </div>
+  );
+};
+
+const DashboardRadar = (props) => {
+  return (
+    <div className={styles.root}>
+      <SidebarLayout
+        isReversed
+        sidebar={
+          <Card>
+            <div className={styles.customSidebar}>
+              <div className={styles.customTop}>
+                TIME FROM
+                <ActionButton style={{ width: '100%' }}>11:11:11:11</ActionButton>
+                <br />
+                <br />
+                PRESENT
+                <br />
+                P.O.R.
+                <br />
+                NOSTROMO
+                <br />
+              </div>
+              <div className={styles.customBottom}>
+                HEADING
+                <br />
+                <ButtonGroup isFull items={[{ body: 'N .36' }, { body: 'E .18' }]} />
+                <br />
+                GROUND
+                <br />
+                <ActionButton rootStyle={{ width: '100%' }}>SPEED 78.26</ActionButton>
+                <br />
+                CONDITION
+                <br />
+                CODE
+                <br />
+                <ActionButton style={{ width: '100%' }}>16 S=C75C</ActionButton>
+                <ActionButton>PAST=8</ActionButton>
+                <br />
+                <br />
+                <ActionButton rootStyle={{ width: '100%' }}>System #4</ActionButton>
+                <br />
+                <br />
+                AUTODECOUNT
+                <br />
+                <br />
+                <ActionButton rootStyle={{ width: '100%', textAlign: 'right' }}>3454.94#</ActionButton>
+              </div>
+            </div>
+          </Card>
+        }
+        defaultSidebarWidth={19}
+      >
+        <Card>
+          <RowSpaceBetween>
+            <span style={{ flexShrink: 0 }}>DEORBITAL DESCENT</span>
+            <span style={{ minWidth: '10%', width: '100%', display: 'flex', justifyContent: 'flex-end' }}>
+              <span>
+                <ActionButton>COMMENCE FINAL</ActionButton>
+                <br />
+                <ActionButton>SYSTEM :0L: 76.75 :08:</ActionButton>
+              </span>
+            </span>
+          </RowSpaceBetween>
+        </Card>
+        <br />
+        <Card>
+          <RowSpaceBetween style={{ position: 'absolute', top: 0, left: `6ch`, right: `6ch` }}>
+            <RadarMarker />
+            <RadarMarker />
+          </RowSpaceBetween>
+          <div className={styles.customContent}>
+            <Sphere style={{ transform: 'translateX(24ch) rotateZ(40deg)' }} />
+          </div>
+          <RowSpaceBetween style={{ position: 'absolute', bottom: `calc(var(--theme-line-height-base) * (var(--font-size) * 0.5))`, left: `6ch`, right: `6ch` }}>
+            <RadarMarker />
+            <RadarMarker />
+          </RowSpaceBetween>
+        </Card>
+      </SidebarLayout>
+    </div>
+  );
+};
+
+export default DashboardRadar;
+
+================
+File: reference/components/examples/Denabase.module.scss
+================
+.root {
+  min-width: 68ch;
+  margin-top: calc(var(--theme-line-height-base) * 1rem);
+}
+
+.dna {
+  min-width: 71ch;
+  -webkit-text-size-adjust: 100%;
+}
+
+.tag {
+  width: 3ch;
+  height: calc(var(--theme-line-height-base) * 0.5rem);
+  flex-shrink: 0;
+  box-shadow:
+    inset 2px 0 0 var(--theme-text),
+    inset -2px 0 0 var(--theme-text),
+    inset 0 2px 0 var(--theme-text);
+}
+
+.secondaryTag {
+  width: 3ch;
+  align-self: stretch;
+  flex-shrink: 0;
+  box-shadow:
+    inset 2px 0 0 var(--theme-text),
+    inset -2px 0 0 var(--theme-text),
+    inset 0 2px 0 var(--theme-text);
+}
+
+.small {
+  width: 13ch;
+  flex-shrink: 0;
+  text-align: right;
+}
+
+.smallWithBorder {
+  width: 13ch;
+  flex-shrink: 0;
+  text-align: right;
+  box-shadow: inset 0 2px 0 var(--theme-text);
+}
+
+.smallSection {
+  width: 13ch;
+  flex-shrink: 0;
+  min-width: 10%;
+  text-align: right;
+  box-shadow: inset 0 2px 0 var(--theme-text);
+}
+
+.large {
+  width: 80%;
+  min-width: 10%;
+  text-align: right;
+}
+
+.largeWithBorder {
+  width: 80%;
+  min-width: 10%;
+  text-align: right;
+  box-shadow:
+    inset 0 2px 0 var(--theme-text),
+    inset -2px 0 0 var(--theme-text);
+}
+
+.largeSection {
+  width: 80%;
+  min-width: 10%;
+  text-align: right;
+  box-shadow:
+    inset 0 2px 0 var(--theme-text),
+    inset -2px 0 0 var(--theme-text);
+}
+
+.absoluteTag {
+  top: calc(var(--theme-line-height-base) * -0.5rem);
+  left: 0;
+  height: calc(var(--theme-line-height-base) * 0.5rem);
+  width: 14.2ch;
+  background: var(--theme-background);
+  position: absolute;
+  box-shadow:
+    inset 2px 0 0 var(--theme-text),
+    inset -2px 0 0 var(--theme-text),
+    inset 0 2px 0 var(--theme-text);
+}
+
+.box {
+  width: 7.1ch;
+  flex-shrink: 0;
+  height: calc(var(--theme-line-height-base) * 3rem);
+  display: inline-flex;
+  align-items: center;
+  justify-content: center;
+  box-shadow:
+    inset -2px 0 0 var(--theme-text),
+    inset 0 2px 0 var(--theme-text),
+    inset 0 -2px 0 var(--theme-text);
+
+  &:first-child {
+    box-shadow:
+      inset 2px 0 0 var(--theme-text),
+      inset -2px 0 0 var(--theme-text),
+      inset 0 2px 0 var(--theme-text),
+      inset 0 -2px 0 var(--theme-text);
+  }
+}
+
+================
+File: reference/components/examples/Denabase.tsx
+================
+'use client';
+
+import styles from '@components/examples/Denabase.module.scss';
+
+import * as React from 'react';
+
+import ActionButton from '@components/ActionButton';
+import Card from '@components/Card';
+import Divider from '@components/Divider';
+import Row from '@components/Row';
+import RowSpaceBetween from '@components/RowSpaceBetween';
+import SidebarLayout from '@components/SidebarLayout';
+
+const Denabase = (props) => {
+  return (
+    <>
+      <Card style={{ overflowWrap: 'break-word' }}>
+        <Row>
+          <RowSpaceBetween>
+            <ActionButton>TR5342120027455925897981</ActionButton>
+            <ActionButton>02.14.2021</ActionButton>
+          </RowSpaceBetween>
+          <Divider type="GRADIENT" />
+          <div className={styles.dna}>
+            T-CA-AA-AA-TA-TC-GG-GC-AC-AT-TA-TT-TA-TT-TG-CC-GC-TC-GG-GA-AG-TA-GA-A
+            <br />
+            A-TG-GT-AC-AT-GT-GT-TT-TA-TG-AT-TT-CT-CG-CA-GT-GA-AA-AA-GC-AA-CG-AA-C
+            <br />
+            C-TC-GC-CC-TT-AG-AT-TC-TA-TA-GC-TG-CT-CT-GA-GA-CC-GC-AC-TG-GC-AA-GC-A
+            <br />
+            G-AA-AC-TC-CG-CA-TT-CA-GG-CA-GT-CC-TC-CA-TG-CA-CT-TC-CT-GC-CT-GT-CT-G
+            <br />
+            C-TG-AA-CC-TA-TT-AT-TA-GA-GA-TG-GA-CT-GC-AG-TT-CT-CA-AT-CA-CA-CG-GA-T
+            <br />
+            C-TG-AT-AC-CT-GC-TG-GT-AT-GT-TC-CT-GA-TA-CC-CA-CA-GA-CA-GC-GC-CC-GA-A
+            <br />
+            T-TT-TG-GC-AA-CC-GA-AC-TT-CT-CA-AC-AA-AA-CC-GC-CT-AG-TT-GC-TA-AT-TT-G
+            <br />
+            G-TG-AC-CT-GA-CT-GA-AT-TG-TC-AT-TA-AA-CA-CT-CC-TG-CT-AA-GA-TG-CG-AA-G
+            <br />
+            C-TA-TT-AT-AG-TG-TT-TT-GT-AC-AG-GC-TA-TT-TT-GC-GT-GA-AA-CG-CA-AA-CG-C
+            <br />
+            G-TT-GC-AT-TT-CA-GA-AT-TC-CG-TG-CA-TA-GT-TA-TC-TC-AT-GC-CG-TG-CT-CT-T
+            <br />
+            G-AT-TA-TT-GA-CA-TA-TG-CA-GT-TC-GT-CC-TA-AT-CC-GC-GC-CT-GG-TC-TT-TA-G
+            <br />
+            T-CA-CT-AA-CC-GA-CC-CT-TA-GT-AT-TG-TT-CT-CT-CA-AC-AA-AA-TG-TG-TT-AA-A
+            <br />
+            C-CG-GC-AT-AA-TC-TG-GT-GA-TC-GG-GA-GA-TC-CA-GA-GA-AA-CA-CA-CC-TT-GG-G
+            <br />
+            C-TA-GA-TG-CC-CT-AC-AT-TA-GA-TA-AG-GG-GT-CT-AT-AC-GG-GC-GG-GG-TT-AG-T
+            <br />
+            A-CA-CC-TT-GA-GC-GT-AT-AG-GA-GA-GT-AA-CG-AG-GT-GG-TT-GT-CG-TG-GG-AG-G
+            <br />
+            A-GG-AG-TA-TG-TT-CT-CC-CT-TA-CT-AG-TT-GC-CG-AT-AA-CA-GA-TA-CT-GA-TG-T
+            <br />
+            C-TG-GT-AA-TT-GC-CA-GT-CA-TG-GT-TG-TA-GT-AG-CC-GG-GA-CC-CG-CA-GT-CT-G
+            <br />
+            G-GT-AG-CG-CC-TA-AC-AG-AT-AA-GG-GG-GC-CT-AC-TC-CC-GC-CC-TG-GT-CG-GC-C
+            <br />
+            T-GA-TC-AT-AA-AC-CT-CT-GT-AA-TA-CC-AT-GG-GC-CA-CG-TT-AG-GC-GT-CG-AT-G
+            <br />
+            C-CG-GA-CC-CA-TA-TC-TT-TA-CA-TC-AT-CT-CT-TT-CA-TA-GA-AG-TA-CC-CA-CT-T
+            <br />
+          </div>
+          <Divider type="GRADIENT" />
+        </Row>
+      </Card>
+      <br />
+      <Card>
+        <SidebarLayout
+          sidebar={
+            <Card style={{ padding: `0 0 0 0` }}>
+              <br />
+              <br />
+              <Row style={{ textAlign: 'center' }}>╳</Row>
+              <br />
+              <br />
+            </Card>
+          }
+          defaultSidebarWidth={19}
+        >
+          <Card style={{ padding: 0, marginLeft: `1ch`, minWidth: `30ch` }}>
+            <br />
+            <br />
+            <br />
+            <br />
+            <Row style={{ textAlign: 'right' }}>NO DATA</Row>
+          </Card>
+        </SidebarLayout>
+        <div className={styles.root}>
+          <RowSpaceBetween>
+            <div className={styles.tag}></div>
+            <div className={styles.small}></div>
+            <div className={styles.tag}></div>
+            <div className={styles.large}></div>
+          </RowSpaceBetween>
+          <RowSpaceBetween>
+            <div className={styles.secondaryTag}>
+              <br />
+              <br />
+            </div>
+            <div className={styles.smallSection}>
+              <br />
+              2181&nbsp;
+              <br />
+              <br />
+            </div>
+            <div className={styles.secondaryTag}></div>
+            <div className={styles.largeSection}>
+              <br />
+              UNKNOWN&nbsp;&nbsp;
+              <br />
+              <br />
+            </div>
+          </RowSpaceBetween>
+          <RowSpaceBetween>
+            <div className={styles.tag}></div>
+            <div className={styles.smallWithBorder}></div>
+            <div className={styles.tag}></div>
+            <div className={styles.largeWithBorder}></div>
+          </RowSpaceBetween>
+          <RowSpaceBetween>
+            <div className={styles.secondaryTag}>
+              <br />
+              <br />
+            </div>
+            <div className={styles.smallSection}>
+              <br />
+              DECEASED&nbsp;
+              <br />
+              <br />
+            </div>
+            <div className={styles.secondaryTag}></div>
+            <div className={styles.largeSection}>
+              <br />
+              MORRILLCOLE&nbsp;&nbsp;
+              <br />
+              <br />
+            </div>
+          </RowSpaceBetween>
+          <RowSpaceBetween style={{ position: 'relative' }}>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.absoluteTag}></div>
+          </RowSpaceBetween>
+        </div>
+      </Card>
+    </>
+  );
+};
+
+export default Denabase;
+
+================
+File: reference/components/examples/MessagesInterface.tsx
+================
+import Avatar from '@components/Avatar';
+import ActionButton from '@components/ActionButton';
+import Divider from '@components/Divider';
+import DropdownMenuTrigger from '@components/DropdownMenuTrigger';
+import Indent from '@components/Indent';
+import Input from '@components/Input';
+import Message from '@components/Message';
+import MessageViewer from '@components/MessageViewer';
+import ModalError from '@components/modals/ModalError';
+import Navigation from '@components/Navigation';
+import RowEllipsis from '@components/RowEllipsis';
+import SidebarLayout from '@components/SidebarLayout';
+
+import * as React from 'react';
+
+interface MessagesInterfaceProps extends React.HTMLAttributes<HTMLSpanElement> {}
+
+const ChatPreviewInline = (props) => {
+  return <RowEllipsis style={{ opacity: 0.5, marginBottom: `10px` }}>{props.children}</RowEllipsis>;
+};
+
+const MessagesInterface: React.FC<MessagesInterfaceProps> = () => {
+  return (
+    <div style={{ minWidth: '28ch' }}>
+      <Navigation
+        logo="✶"
+        left={
+          <>
+            <DropdownMenuTrigger
+              items={[
+                {
+                  icon: '⊹',
+                  children: 'Open',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'New Message',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Quick Look',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Close Messages',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Open Conversation in New Window',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Print...',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+              ]}
+            >
+              <ActionButton>FILE</ActionButton>
+            </DropdownMenuTrigger>
+
+            <DropdownMenuTrigger
+              items={[
+                {
+                  icon: '⊹',
+                  children: 'Undo',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Redo',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Cut',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Copy',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Paste',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Paste and Match Style',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Delete',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Select All',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Find...',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Find Next',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Find Previous',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Spelling and Grammar',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Substitutions',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Speech',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Send Message',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Reply to Last Message',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Tapback Last Message',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Edit Last Message',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Autofill',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Start Dictation',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Emoji & Symbols',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+              ]}
+            >
+              <ActionButton>EDIT</ActionButton>
+            </DropdownMenuTrigger>
+            <DropdownMenuTrigger
+              items={[
+                {
+                  icon: '⊹',
+                  children: 'Show Tab Bar',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Show All Tabs',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Make Text Bigger',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Make Text Normal Size',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Make Text Smaller',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'All Messages',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Known Senders',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Unknown Senders',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Unread Messages',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Recently Delete',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Show Sidebar',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Enter Full Screen',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+              ]}
+            >
+              <ActionButton>VIEW</ActionButton>
+            </DropdownMenuTrigger>
+          </>
+        }
+        right={
+          <>
+            <DropdownMenuTrigger
+              items={[
+                {
+                  icon: '⊹',
+                  children: 'Search',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Messages Help',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+              ]}
+            >
+              <ActionButton>HELP</ActionButton>
+            </DropdownMenuTrigger>
+          </>
+        }
+      ></Navigation>
+      <Divider type="DOUBLE" />
+      <SidebarLayout
+        defaultSidebarWidth={12}
+        isShowingHandle={true}
+        sidebar={
+          <>
+            <Avatar>
+              <Indent>
+                Arthur
+                <br />
+                <ChatPreviewInline>No, it has to be more unique</ChatPreviewInline>
+              </Indent>
+            </Avatar>
+            <Avatar>
+              <Indent>
+                Ariadne
+                <br />
+                <ChatPreviewInline>No. Just you.</ChatPreviewInline>
+              </Indent>
+            </Avatar>
+            <Avatar>
+              <Indent>
+                Eames
+                <br />
+                <ChatPreviewInline>dream a little bigger</ChatPreviewInline>
+              </Indent>
+            </Avatar>
+            <Avatar>
+              <Indent>
+                Yusef
+                <br />
+                <ChatPreviewInline>Depends on the dream.</ChatPreviewInline>
+              </Indent>
+            </Avatar>
+            <Avatar>
+              <Indent>
+                Saito
+                <br />
+                <ChatPreviewInline>I bought the airline.</ChatPreviewInline>
+              </Indent>
+            </Avatar>
+          </>
+        }
+      >
+        <Message>Why are they all looking at me?</Message>
+        <MessageViewer>Because my subconscious feels that someone else is creating this world. The more you change things, the quicker the projections start to converge on you.</MessageViewer>
+        <Message>Converge?</Message>
+        <MessageViewer>It's the foreign nature of the dreamer. They attack like white blood cells fighting an infection.</MessageViewer>
+        <Message>They're going to attack us?</Message>
+        <MessageViewer>No. Just you.</MessageViewer>
+        <br />
+        <br />
+        <Input autoComplete="off" isBlink={true} label="Message" name="test_message_interface" />
+      </SidebarLayout>
+    </div>
+  );
+};
+
+export default MessagesInterface;
+
+================
+File: reference/components/examples/UpdatingDataTable.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+import DataTable from '@components/DataTable';
+
+const UpdatingDataTable = (props) => {
+  const [tableData, setTableData] = React.useState(props.data);
+
+  React.useEffect(() => {
+    const interval = setInterval(() => {
+      setTableData((prevData) => {
+        const header = prevData[0];
+        const rows = prevData.slice(1);
+
+        const updatedRows = rows.map((row) => {
+          const currentPrice = parseFloat(row[2].replace('$', ''));
+          const currentHoldings = parseInt(row[3], 10);
+          const priceChangeFactor = 1 + (Math.random() - 0.5) * 0.1;
+          const newPrice = currentPrice * priceChangeFactor;
+          const holdingsChange = Math.floor((Math.random() - 0.5) * 20);
+          const newHoldings = Math.max(1, currentHoldings + holdingsChange);
+
+          return [row[0], row[1], `$${newPrice.toFixed(2)}`, newHoldings.toString()];
+        });
+
+        updatedRows.sort((a, b) => {
+          const priceA = parseFloat(a[2].replace('$', ''));
+          const priceB = parseFloat(b[2].replace('$', ''));
+          return priceB - priceA;
+        });
+
+        return [header, ...updatedRows];
+      });
+    }, 1000);
+
+    return () => clearInterval(interval);
+  }, []);
+
+  return (
+    <>
+      <DataTable data={tableData} />
+    </>
+  );
+};
+
+export default UpdatingDataTable;
+
+================
+File: reference/components/modals/ModalAlert.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalAlert.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalAlert.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import Card from '@components/Card';
+
+interface ModalAlertProps {
+  buttonText?: string | any;
+  message: string;
+}
+
+function ModalAlert({ message, buttonText }: ModalAlertProps) {
+  const { close } = useModals();
+
+  return (
+    <div className={styles.root}>
+      <Card title="ALERT">
+        {message}
+        <br />
+        <br />
+        <Button onClick={() => close()}>{Utilities.isEmpty(buttonText) ? 'Close' : buttonText}</Button>
+      </Card>
+    </div>
+  );
+}
+
+export default ModalAlert;
+
+================
+File: reference/components/modals/ModalCanvasPlatformer.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalCanvasPlatformer.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalCanvasPlatformer.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import CanvasPlatformer from '@components/CanvasPlatformer';
+import Card from '@components/Card';
+
+interface ModalCanvasPlatformerProps {
+  buttonText?: string | any;
+}
+
+function ModalCanvasPlatformer({ buttonText }: ModalCanvasPlatformerProps) {
+  const { close } = useModals();
+
+  return (
+    <div className={styles.root}>
+      <Card title="ALERT">
+        <CanvasPlatformer rows={12} />
+        <br />
+        <br />
+        <Button onClick={() => close()}>{Utilities.isEmpty(buttonText) ? 'Close' : buttonText}</Button>
+      </Card>
+    </div>
+  );
+}
+
+export default ModalCanvasPlatformer;
+
+================
+File: reference/components/modals/ModalCanvasSnake.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalCanvasSnake.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalCanvasSnake.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import CanvasSnake from '@components/CanvasSnake';
+import Card from '@components/Card';
+
+interface ModalCanvasSnakeProps {
+  buttonText?: string | any;
+}
+
+function ModalCanvasSnake({ buttonText }: ModalCanvasSnakeProps) {
+  const { close } = useModals();
+
+  return (
+    <div className={styles.root}>
+      <Card title="CANVAS PLATFORMER">
+        <CanvasSnake rows={12} />
+        <br />
+        <br />
+        <Button onClick={() => close()}>{Utilities.isEmpty(buttonText) ? 'Close' : buttonText}</Button>
+      </Card>
+    </div>
+  );
+}
+
+export default ModalCanvasSnake;
+
+================
+File: reference/components/modals/ModalChess.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalChess.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalChess.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useHotkeys } from '@modules/hotkeys';
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import CardDouble from '@components/CardDouble';
+import Chessboard from '@components/Chessboard';
+
+interface ModalErrorProps {
+  buttonText?: string | any;
+  board: string[][];
+  title?: string;
+}
+
+function ModalChess({ board, buttonText, title }: ModalErrorProps) {
+  const { close } = useModals();
+
+  useHotkeys('enter', () => close());
+
+  return (
+    <div className={styles.root}>
+      <CardDouble title={title} style={{ textAlign: 'center' }}>
+        <Chessboard board={board} />
+        <br />
+        <br />
+        <Button onClick={() => close()}>{Utilities.isEmpty(buttonText) ? 'CLOSE' : buttonText}</Button>
+      </CardDouble>
+    </div>
+  );
+}
+
+export default ModalChess;
+
+================
+File: reference/components/modals/ModalCreateAccount.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalCreateAccount.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalAlert.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import CardDouble from '@components/CardDouble';
+import Checkbox from '@components/Checkbox';
+import Input from '@components/Input';
+import RadioButtonGroup from '@components/RadioButtonGroup';
+
+function ModalCreateAccount() {
+  const { close } = useModals();
+
+  return (
+    <div className={styles.root}>
+      <CardDouble title="NEW ACCOUNT">
+        Create a new MakeBelieve™ account, where anything is possible at your command line in the browser.
+        <br />
+        <br />
+        <RadioButtonGroup
+          defaultValue="modal_developer"
+          options={[
+            { value: 'modal_individual', label: 'I’m using this for personal use.' },
+            { value: 'modal_developer', label: 'I’m building or creating something for work.' },
+            { value: 'modal_company', label: 'We’re using this as a team or organization.' },
+          ]}
+        />
+        <br />
+        <Input autoComplete="off" label="USERNAME" placeholder="Choose a username (e.g., SurfGirl29)" name="modal_username" />
+        <Input autoComplete="off" label="PASSWORD" placeholder="Create a password (8+ characters)" type="password" name="modal_password" />
+        <Input autoComplete="off" label="CONFIRM" placeholder="Type it again" type="password" name="modal_confirm" />
+        <br />
+        <Checkbox name="modal_terms">I agree to the Terms of Service, Data Privacy Policy, and Acceptable Use Guidelines.</Checkbox>
+        <Checkbox name="modal_goodwill">I agree not to use this service for unlawful purposes.</Checkbox>
+        <br />
+        <Button onClick={() => close()}>Create an account</Button>
+      </CardDouble>
+    </div>
+  );
+}
+
+export default ModalCreateAccount;
+
+================
+File: reference/components/modals/ModalError.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalError.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalError.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useHotkeys } from '@modules/hotkeys';
+import { useModals } from '@components/page/ModalContext';
+
+import ActionButton from '@components/ActionButton';
+import Button from '@components/Button';
+import CardDouble from '@components/CardDouble';
+import Grid from '@components/Grid';
+
+interface ModalErrorProps {
+  buttonText?: string | any;
+  message: string | any;
+  title?: string;
+}
+
+// TODO(jimmylee)
+// Enter doesn't always work for some reason.
+function ModalError({ message, buttonText, title }: ModalErrorProps) {
+  const { close } = useModals();
+
+  useHotkeys('enter', () => close());
+
+  return (
+    <div className={styles.root}>
+      <CardDouble title={title}>
+        <br />
+        {message}
+        <Grid>
+          <ul>
+            <li>
+              Press{' '}
+              <ActionButton hotkey="⏎" onClick={() => close()}>
+                ENTER
+              </ActionButton>{' '}
+              to continue.
+            </li>
+          </ul>
+        </Grid>
+      </CardDouble>
+    </div>
+  );
+}
+
+export default ModalError;
+
+================
+File: reference/components/modals/ModalMatrixModes.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalMatrixModes.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalMatrixModes.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import Card from '@components/Card';
+import MatrixLoader from '@components/MatrixLoader';
+
+interface ModalMatrixModesProps {
+  buttonText?: string | any;
+}
+
+function ModalMatrixModes({ buttonText }: ModalMatrixModesProps) {
+  const { close } = useModals();
+
+  return (
+    <div className={styles.root}>
+      <Card title="MATRIX MODES">
+        <Card title="KATAKANA DEFAULT">
+          <MatrixLoader rows={32} mode="katakana" />
+        </Card>
+        <Card title="GREEK LTR">
+          <MatrixLoader direction="left-to-right" rows={8} mode="greek" />
+        </Card>
+        <br />
+        <br />
+        <Button onClick={() => close()}>{Utilities.isEmpty(buttonText) ? 'Close' : buttonText}</Button>
+      </Card>
+    </div>
+  );
+}
+
+export default ModalMatrixModes;
+
+================
+File: reference/components/page/DefaultActionBar.module.scss
+================
+.root {
+  position: fixed;
+  top: 0;
+  left: 2ch;
+  z-index: 1;
+}
+
+================
+File: reference/components/page/DefaultActionBar.tsx
+================
+'use client';
+
+import styles from '@components/page/DefaultActionBar.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { toggleDebugGrid } from '@components/DebugGrid';
+import { useHotkeys } from '@modules/hotkeys';
+
+import ActionBar from '@components/ActionBar';
+import ButtonGroup from '@components/ButtonGroup';
+
+function isElement(target: EventTarget | null): target is Element {
+  return target instanceof Element;
+}
+
+function isHTMLElement(target: EventTarget | null): target is HTMLElement {
+  return target instanceof HTMLElement;
+}
+
+const findFocusableParent = (element: Element | null): Element | null => {
+  while (element) {
+    element = element.parentElement;
+    if (element && Utilities.isFocusableElement(element)) {
+      return element;
+    }
+  }
+  return null;
+};
+
+const findNextFocusableSibling = (element: Element, direction: 'next' | 'previous'): HTMLElement | null => {
+  let sibling = direction === 'next' ? element.nextElementSibling : element.previousElementSibling;
+
+  while (sibling) {
+    if (Utilities.isFocusableElement(sibling)) {
+      return sibling as HTMLElement;
+    }
+
+    const focusableDescendant = Utilities.findFocusableDescendant(sibling, null, direction);
+    if (focusableDescendant) {
+      return focusableDescendant;
+    }
+
+    sibling = direction === 'next' ? sibling.nextElementSibling : sibling.previousElementSibling;
+  }
+
+  return null;
+};
+
+const findNextFocusableAncestor = (element: Element, direction: 'next' | 'previous'): HTMLElement | null => {
+  let ancestor = element.parentElement;
+
+  while (ancestor) {
+    const nextFocusable = findNextFocusableSibling(ancestor, direction);
+    if (nextFocusable) {
+      return nextFocusable;
+    }
+    ancestor = ancestor.parentElement;
+  }
+
+  return null;
+};
+
+const useGlobalNavigationHotkeys = () => {
+  const onHandleSubmit = (event: KeyboardEvent) => {
+    const target = event.target;
+    if (Utilities.isFocusableElement(target)) {
+      event.preventDefault();
+      (target as HTMLElement).click();
+    }
+  };
+
+  const onHandleNextFocus = (event: KeyboardEvent) => {
+    const target = event.target;
+
+    if (Utilities.isFocusableElement(target)) {
+      event.preventDefault();
+
+      const nextFocusable = Utilities.findNextFocusable(target as Element, 'next');
+      if (nextFocusable) {
+        nextFocusable.focus();
+      }
+    }
+  };
+
+  const onHandlePreviousFocus = (event: KeyboardEvent) => {
+    const target = event.target;
+
+    if (Utilities.isFocusableElement(target)) {
+      event.preventDefault();
+
+      const previousFocusable = Utilities.findNextFocusable(target as Element, 'previous');
+      if (previousFocusable) {
+        previousFocusable.focus();
+      }
+    }
+  };
+
+  useHotkeys('ArrowDown', onHandleNextFocus);
+  useHotkeys('ArrowUp', onHandlePreviousFocus);
+  useHotkeys('ArrowRight', onHandleNextFocus);
+  useHotkeys('ArrowLeft', onHandlePreviousFocus);
+  useHotkeys('Enter', onHandleSubmit);
+  useHotkeys(' ', onHandleSubmit);
+};
+
+interface DefaultActionBarProps {
+  items?: {
+    hotkey: string;
+    onClick: () => void;
+    body: React.ReactNode;
+    items?: any;
+  }[];
+}
+
+const DefaultActionBar: React.FC<DefaultActionBarProps> = ({ items = [] }) => {
+  const [isGrid, setGrid] = React.useState(false);
+  useHotkeys('ctrl+g', () => toggleDebugGrid());
+
+  useGlobalNavigationHotkeys();
+
+  return (
+    <div className={styles.root}>
+      <ActionBar
+        items={[
+          {
+            hotkey: '⌃+O',
+            body: 'Fonts',
+            openHotkey: 'ctrl+o',
+            items: [
+              {
+                icon: '⊹',
+                children: 'Commit Mono V143 [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-commit-mono'),
+              },
+              {
+                icon: '⊹',
+                children: 'Departure Mono [MIT]',
+                onClick: () => Utilities.onHandleFontChange('font-use-departure-mono'),
+              },
+              {
+                icon: '⊹',
+                children: 'Fira Code [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-fira-code'),
+              },
+              {
+                icon: '⊹',
+                children: 'Fragment Mono [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-fragment-mono'),
+              },
+              {
+                icon: '⊹',
+                children: 'Geist Mono [OFL] [DEFAULT]',
+                onClick: () => Utilities.onHandleFontChange(''),
+              },
+              {
+                icon: '⊹',
+                children: 'Iosevka Term [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-iosevka-term'),
+              },
+              {
+                icon: '⊹',
+                children: 'JetBrains Mono [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-jet-brains-mono'),
+              },
+              {
+                icon: '⊹',
+                children: 'SFMono Square [FOSS]',
+                onClick: () => Utilities.onHandleFontChange('font-use-sfmono-square'),
+              },
+              {
+                icon: '⊹',
+                children: 'Server Mono 0.0.6 [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-server-mono'),
+              },
+              {
+                icon: '⊹',
+                children: 'TX-02 Berkeley Mono™',
+                onClick: () => Utilities.onHandleFontChange('font-use-berkeley-mono'),
+              },
+            ],
+          },
+          {
+            hotkey: '⌃+T',
+            body: 'Theme',
+            openHotkey: 'ctrl+t',
+            items: [
+              {
+                icon: '⊹',
+                children: 'Refined White [DEFAULT]',
+                onClick: () => Utilities.onHandleThemeChange(''),
+              },
+              {
+                icon: '⊹',
+                children: 'Black Midnight Vapor',
+                onClick: () => Utilities.onHandleThemeChange('theme-dark'),
+              },
+              {
+                icon: '⊹',
+                children: 'U-571 Code Red',
+                onClick: () => Utilities.onHandleThemeChange('theme-black-red'),
+              },
+              {
+                icon: '⊹',
+                children: 'Digital Bioluminescence',
+                onClick: () => Utilities.onHandleThemeChange('theme-black-teal'),
+              },
+              {
+                icon: '⊹',
+                children: 'Operation Safe Blue',
+                onClick: () => Utilities.onHandleThemeChange('theme-blue'),
+              },
+              {
+                icon: '⊹',
+                children: 'Neon Green Garden',
+                onClick: () => Utilities.onHandleThemeChange('theme-green'),
+              },
+              {
+                icon: '⊹',
+                children: 'Kirkland Signature AS/400',
+                onClick: () => Utilities.onHandleThemeChange('theme-black-green'),
+              },
+            ],
+          },
+          {
+            hotkey: '⌃+G',
+            onClick: () => {
+              toggleDebugGrid();
+            },
+            body: 'Grid',
+            selected: false,
+          },
+          ...items,
+        ]}
+      />
+    </div>
+  );
+};
+
+export default DefaultActionBar;
+
+================
+File: reference/components/page/DefaultLayout.module.scss
+================
+.body {
+  width: 100%;
+}
+
+.pixel {
+  height: 1px;
+  left: 0;
+  position: absolute;
+  top: 0;
+  width: 1px;
+}
+
+================
+File: reference/components/page/DefaultLayout.tsx
+================
+import styles from '@components/page/DefaultLayout.module.scss';
+
+import * as React from 'react';
+
+interface DefaultLayoutProps {
+  previewPixelSRC: string;
+  children?: React.ReactNode;
+}
+
+const DefaultLayout: React.FC<DefaultLayoutProps> = ({ previewPixelSRC, children }) => {
+  return (
+    <div className={styles.body}>
+      <img className={styles.pixel} src={previewPixelSRC} alt="" />
+      {children}
+    </div>
+  );
+};
+
+export default DefaultLayout;
+
+================
+File: reference/components/page/ModalContext.tsx
+================
+import * as React from 'react';
+
+export type ModalComponent<P = {}> = React.ComponentType<React.PropsWithoutRef<P>>;
+
+export interface ModalState<P = any> {
+  key: string;
+  component: ModalComponent<P>;
+  props: P;
+}
+
+interface ModalContextType {
+  modalStack: ModalState[];
+  open: <P>(component: ModalComponent<P>, props: P) => string;
+  close: (key?: string) => void;
+}
+
+const ModalContext = React.createContext<ModalContextType | null>(null);
+
+export const ModalProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
+  const [modalStack, setModalStack] = React.useState<ModalState<any>[]>([]);
+
+  const open = <P,>(component: ModalComponent<P>, props: P): string => {
+    const key = `modal-${Date.now()}-${Math.random()}`;
+
+    const newModal: ModalState<P> = { key, component, props };
+
+    setModalStack((prev) => [...prev, newModal as ModalState<any>]);
+
+    return key;
+  };
+
+  const close = (key?: string): void => {
+    setModalStack((prev) =>
+      key ? prev.filter((modal) => modal.key !== key) : prev.slice(0, -1)
+    );
+  };
+
+  return (
+    <ModalContext.Provider value={{ modalStack, open, close }}>
+      {children}
+    </ModalContext.Provider>
+  );
+};
+
+export const useModals = (): ModalContextType => {
+  const context = React.useContext(ModalContext);
+  if (!context) {
+    throw new Error('useModals must be used within a ModalProvider and use client');
+  }
+  return context;
+};
+
+================
+File: reference/components/page/root.module.scss
+================
+.row {
+  border-bottom: 1px solid var(--theme-border);
+}
+
+.column {
+  max-width: 768px;
+  padding: 0 24px 0 24px;
+  margin: 0 auto 0 auto;
+  display: block;
+  border-left: 1px solid var(--theme-border);
+  border-right: 1px solid var(--theme-border);
+}
+
+.video {
+  display: block;
+  width: 100%;
+}
+
+.h1 {
+  display: block;
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+.p {
+  display: block;
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+.aside {
+  display: block;
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+.h2 {
+  display: block;
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+.image {
+  display: block;
+  width: 100%;
+}
+
+================
+File: reference/components/svg/InternetDevelopmentLogo.tsx
+================
+export default function IntDevLogo(props) {
+  return (
+    <svg viewBox="0 0 494.25 80.29" fill="currentColor" aria-hidden {...props}>
+      <path d="m57.8,29.75h0c0,5.34,4.33,9.67,9.67,9.67h38.11c5.34,0,9.67,4.33,9.67,9.67v.54c0,5.34-4.33,9.67-9.67,9.67h-38.11c-5.34,0-9.67,4.33-9.67,9.67v.29c0,5.34-4.33,9.67-9.67,9.67H9.67c-5.34,0-9.67-4.33-9.67-9.67v-.54c0-5.34,4.33-9.67,9.67-9.67h38.11c5.34,0,9.67-4.33,9.67-9.67v-.02c0-5.34-4.33-9.67-9.67-9.67H9.67c-5.34,0-9.67-4.33-9.67-9.67v-.54c0-5.34,4.33-9.67,9.67-9.67h38.11c5.34,0,9.67-4.33,9.67-9.67v-.27c0-5.34,4.33-9.67,9.67-9.67h38.45c5.34,0,9.67,4.33,9.67,9.67v.55c0,5.34-4.33,9.67-9.67,9.67h-38.11c-5.34,0-9.67,4.33-9.67,9.67Z" />
+      <g>
+        <path d="m136.93,75.57l7.21-2.12V5.34l-7.21-2.02V0h26.69v3.32l-7,2.02v68.11l7,2.12v3.37h-26.69v-3.37Z" />
+        <path d="m182.75,14.67v58.88l7.26,2.02v3.37h-19.54v-3.37l7.31-2.02V5.24l-7.31-1.92V0h20.63l31.88,51.37V5.24l-7.31-1.92V0h19.59v3.32l-7.36,1.92v75.06h-4.72L182.75,14.67Z" />
+        <path d="m253.86,75.57l9.59-2.18V5.13h-14.25c-3.52,5.7-5.96,12.44-7.57,18.09h-2.8l2.95-23.22h55.57l3.01,23.22h-2.8c-1.66-5.65-3.89-12.39-7.41-18.09h-14.2v68.27l9.54,2.18v3.37h-31.62v-3.37Z" />
+        <path d="m304.76,75.47l7.1-1.97V5.24l-7.1-1.92V0h21.87c13.94,0,21.98,1.92,28.35,7.46,7.77,6.74,12.7,18.14,12.7,31.98s-5.23,26.75-13.32,33.43c-5.29,4.35-11.04,6.06-20.01,6.06h-29.6v-3.47Zm42.97-8.92c3.89-5.8,5.75-15.08,5.75-27.47s-1.87-20.73-5.81-26.49c-3.52-5.13-8.6-7.41-16.22-7.41h-7.1v62.51c0,4.46,2.23,6.17,8.4,6.17,6.89,0,11.56-2.23,14.98-7.31Z" />
+        <path d="m374.05,75.57l7.05-2.02V5.24l-7.05-1.92V0h48.93l1.5,22.55h-3.01c-1.4-5.55-3.42-11.77-6.22-17.31h-21.67v29.44h11.61c1.76-3.94,2.75-7.98,3.42-11.82h3.01v28.72h-3.01c-.62-3.89-1.76-7.93-3.42-11.77h-11.61v33.8h21.2c3.47-6.22,5.39-12.44,7.36-18.66h3.78l-3.37,24h-48.52v-3.37Z" />
+        <path d="m436.92,9.59c-1.5-4.61-2.9-5.75-8.66-6.27V0h31.72v3.32c-8.03.73-9.12,1.71-7.67,6.79l12.75,44.89.78.05,11.77-40.48c2.07-7.36.36-9.8-8.09-11.25V0h24.73v3.32c-7.77,1.55-9.17,3.32-11.61,11.4l-19.85,65.31h-3.21l-22.65-70.44Z" />
+      </g>
+    </svg>
+  );
+}
+
+================
+File: reference/components/svg/InternetDevelopmentLogoMark.tsx
+================
+export default function LogoMark(props) {
+  return (
+    <svg viewBox="0 0 116.29 80.29" fill="currentColor" aria-hidden {...props}>
+      <path d="m57.8,29.75h0c0,5.34,4.33,9.67,9.67,9.67h38.11c5.34,0,9.67,4.33,9.67,9.67v.54c0,5.34-4.33,9.67-9.67,9.67h-38.11c-5.34,0-9.67,4.33-9.67,9.67v.29c0,5.34-4.33,9.67-9.67,9.67H9.67c-5.34,0-9.67-4.33-9.67-9.67v-.54c0-5.34,4.33-9.67,9.67-9.67h38.11c5.34,0,9.67-4.33,9.67-9.67v-.02c0-5.34-4.33-9.67-9.67-9.67H9.67c-5.34,0-9.67-4.33-9.67-9.67v-.54c0-5.34,4.33-9.67,9.67-9.67h38.11c5.34,0,9.67-4.33,9.67-9.67v-.27c0-5.34,4.33-9.67,9.67-9.67h38.45c5.34,0,9.67,4.33,9.67,9.67v.55c0,5.34-4.33,9.67-9.67,9.67h-38.11c-5.34,0-9.67,4.33-9.67,9.67Z" />
+    </svg>
+  );
+}
+
+================
+File: reference/components/svg/Sphere.tsx
+================
+import * as React from 'react';
+
+export default function Sphere(props: { size?: number; segments?: number; style?: React.CSSProperties }) {
+  const size = props.size || 500;
+  const segments = props.segments || 6;
+  const radius = size * 0.4;
+
+  const generateSpherePoints = () => {
+    const points: { x: number; y: number }[][] = [];
+    for (let lat = 0; lat <= segments; lat++) {
+      const row: { x: number; y: number }[] = [];
+      const phi = (lat * Math.PI) / segments;
+      for (let lon = 0; lon <= segments; lon++) {
+        const theta = (lon * 2 * Math.PI) / segments;
+        const x = radius * Math.sin(phi) * Math.cos(theta);
+        const y = radius * Math.cos(phi);
+        const z = radius * Math.sin(phi) * Math.sin(theta);
+        const scale = 1 + z / (radius * 4);
+        row.push({
+          x: size / 2 + x * scale,
+          y: size / 2 + y * scale,
+        });
+      }
+      points.push(row);
+    }
+    return points;
+  };
+
+  const createPaths = () => {
+    const spherePoints = generateSpherePoints();
+    const paths: string[] = [];
+    for (let lat = 0; lat <= segments; lat++) {
+      let pathString = `M ${spherePoints[lat][0].x},${spherePoints[lat][0].y}`;
+      for (let lon = 1; lon <= segments; lon++) {
+        pathString += ` L ${spherePoints[lat][lon].x},${spherePoints[lat][lon].y}`;
+      }
+      paths.push(pathString);
+    }
+    for (let lon = 0; lon <= segments; lon++) {
+      let pathString = `M ${spherePoints[0][lon].x},${spherePoints[0][lon].y}`;
+      for (let lat = 1; lat <= segments; lat++) {
+        pathString += ` L ${spherePoints[lat][lon].x},${spherePoints[lat][lon].y}`;
+      }
+      paths.push(pathString);
+    }
+    return paths;
+  };
+
+  return (
+    <svg viewBox={`0 0 ${size} ${size}`} xmlns="http://www.w3.org/2000/svg" style={props.style}>
+      <g fill="none" stroke="currentColor" strokeWidth="1">
+        {createPaths().map((path, index) => (
+          <path key={index} d={path} vectorEffect="non-scaling-stroke" />
+        ))}
+      </g>
+    </svg>
+  );
+}
+
+================
+File: reference/components/Accordion.module.scss
+================
+.flex {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+  padding: calc(var(--theme-line-height-base) * 1rem) 0 calc(var(--theme-line-height-base) * 1rem) 0;
+
+  background: var(--theme-border-subdued);
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.icon {
+  flex-shrink: 0;
+  user-select: none;
+  cursor: pointer;
+  font-size: var(--font-size);
+  align-self: stretch;
+}
+
+.content {
+  min-width: 10%;
+  width: 100%;
+  user-select: none;
+  cursor: pointer;
+  transition: 200ms ease all;
+  transition-property: padding;
+  padding-left: 0ch;
+}
+
+.active {
+  .content {
+    padding-left: 1ch;
+  }
+
+  .icon {
+  }
+}
+
+================
+File: reference/components/Accordion.tsx
+================
+'use client';
+
+import styles from '@components/Accordion.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import Row from '@components/Row';
+
+interface AccordionProps {
+  defaultValue?: boolean;
+  title: string;
+  children?: React.ReactNode;
+}
+
+const Accordion: React.FC<AccordionProps> = ({ defaultValue = false, title, children }) => {
+  const [show, setShow] = React.useState<boolean>(defaultValue);
+  const accordionRef = React.useRef<HTMLDivElement | null>(null);
+
+  const toggleShow = (): void => {
+    setShow((prevShow) => !prevShow);
+  };
+
+  return (
+    <>
+      <Row ref={accordionRef} tabIndex={0} role="button" onClick={toggleShow} aria-expanded={show}>
+        <div className={Utilities.classNames(styles.flex, show ? styles.active : undefined)}>
+          <span className={styles.icon}>{show ? '▾' : '▸'}</span>
+          <span className={styles.content}>{title}</span>
+        </div>
+      </Row>
+      {show && <Row style={{ paddingLeft: '2ch' }}>{children}</Row>}
+    </>
+  );
+};
+
+export default Accordion;
+
+================
+File: reference/components/ActionBar.module.scss
+================
+.root {
+  background: var(--theme-background);
+  box-shadow: inset 0 0 0 1px var(--theme-border);
+}
+
+================
+File: reference/components/ActionBar.tsx
+================
+import styles from '@components/ActionBar.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import ButtonGroup from '@components/ButtonGroup';
+
+interface ActionBarItem {
+  hotkey?: string;
+  onClick?: () => void;
+  openHotkey?: string;
+  selected?: boolean;
+  body: React.ReactNode;
+  items?: any;
+}
+
+interface ActionBarProps {
+  items: ActionBarItem[];
+}
+
+const ActionBar: React.FC<ActionBarProps> = ({ items }) => {
+  return (
+    <div className={styles.root}>
+      <ButtonGroup items={items} />
+    </div>
+  );
+};
+
+export default ActionBar;
+
+================
+File: reference/components/ActionButton.module.scss
+================
+.hotkey {
+  background: var(--theme-button-foreground);
+  color: var(--theme-text);
+  cursor: pointer;
+  flex-shrink: 0;
+  font-weight: 400;
+  padding: 0 1ch 0 1ch;
+  text-indent: 0ch;
+  user-select: none;
+}
+
+.content {
+  background: var(--theme-button-background);
+  box-shadow: inset 0 0 0 2px var(--theme-button-foreground);
+  cursor: pointer;
+  flex-shrink: 0;
+  font-weight: 400;
+  padding: 0 1ch 0 1ch;
+  text-indent: 0ch;
+  text-transform: uppercase;
+  user-select: none;
+}
+
+.root {
+  display: inline-flex;
+  align-items: center;
+  justify-content: space-between;
+  cursor: pointer;
+  outline: 0;
+  border: 0;
+  margin: 0;
+  padding: 0;
+  box-sizing: border-box;
+  font-family: var(--font-family-mono);
+  font-size: var(--font-size);
+  flex-shrink: 0;
+
+  &:hover .hotkey {
+    background: var(--theme-focused-foreground);
+  }
+
+  &:hover .content {
+    box-shadow: inset 0 0 0 2px var(--theme-focused-foreground);
+  }
+
+  &:focus .hotkey {
+    background: var(--theme-focused-foreground);
+  }
+
+  &:focus .content {
+    box-shadow: inset 0 0 0 2px var(--theme-focused-foreground);
+  }
+}
+
+.selected {
+  .content {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/ActionButton.tsx
+================
+import styles from '@components/ActionButton.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface ActionButtonProps {
+  onClick?: () => void;
+  hotkey?: any;
+  children?: React.ReactNode;
+  style?: any;
+  rootStyle?: any;
+  isSelected?: boolean;
+}
+
+const ActionButton = React.forwardRef<HTMLDivElement, ActionButtonProps>(({ onClick, hotkey, children, style, rootStyle, isSelected }, ref) => {
+  return (
+    <div className={Utilities.classNames(styles.root, isSelected ? styles.selected : null)} style={rootStyle} onClick={onClick} tabIndex={0} ref={ref} role="button">
+      {Utilities.isEmpty(hotkey) ? null : <span className={styles.hotkey}>{hotkey}</span>}
+      <span className={styles.content} style={style}>
+        {children}
+      </span>
+    </div>
+  );
+});
+
+ActionButton.displayName = 'ActionButton';
+
+export default ActionButton;
+
+================
+File: reference/components/ActionListItem.module.scss
+================
+.item {
+  align-items: flex-start;
+  background: transparent;
+  color: var(--theme-text);
+  cursor: pointer;
+  display: flex;
+  justify-content: space-between;
+  outline: 0;
+  border: 0;
+  text-decoration: none;
+
+  &:visited {
+    background: transparent;
+    color: var(--theme-text);
+  }
+
+  &:hover {
+    background: transparent;
+    color: var(--theme-text);
+  }
+
+  &:hover .icon {
+    background: var(--theme-focused-foreground);
+  }
+
+  &:focus .icon {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.icon {
+  align-items: center;
+  background: var(--theme-button-foreground);
+  display: inline-flex;
+  flex-shrink: 0;
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  justify-content: center;
+  width: 3ch;
+  user-select: none;
+}
+
+.text {
+  align-items: center;
+  align-self: stretch;
+  background: var(--theme-button-background);
+  display: inline-flex;
+  justify-content: flex-start;
+  min-width: 10%;
+  padding: 0 1ch 0 1ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/ActionListItem.tsx
+================
+import styles from '@components/ActionListItem.module.scss';
+
+import * as React from 'react';
+
+interface ActionListItemProps {
+  style?: React.CSSProperties;
+  icon?: React.ReactNode;
+  children?: React.ReactNode;
+  href?: string;
+  target?: string;
+  onClick?: React.MouseEventHandler<HTMLDivElement | HTMLAnchorElement>;
+}
+
+const ActionListItem: React.FC<ActionListItemProps> = (props) => {
+  const { href, target, onClick, children, icon, style } = props;
+
+  if (href) {
+    return (
+      <a className={styles.item} href={href} target={target} style={style} tabIndex={0} role="link">
+        <figure className={styles.icon}>{icon}</figure>
+        <span className={styles.text}>{children}</span>
+      </a>
+    );
+  }
+
+  return (
+    <div className={styles.item} onClick={onClick} style={style} tabIndex={0} role="button">
+      <figure className={styles.icon}>{icon}</figure>
+      <span className={styles.text}>{children}</span>
+    </div>
+  );
+};
+
+export default ActionListItem;
+
+================
+File: reference/components/AlertBanner.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border);
+  box-shadow: 1ch 1ch 0 0 var(--theme-border-subdued);
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  font-weight: 400;
+}
+
+================
+File: reference/components/AlertBanner.tsx
+================
+import styles from '@components/AlertBanner.module.scss';
+
+import * as React from 'react';
+
+interface AlertBannerProps {
+  style?: any;
+  children?: any;
+}
+
+const AlertBanner: React.FC<AlertBannerProps> = ({ style: propStyle, ...rest }) => {
+  let style: React.CSSProperties = { ...propStyle };
+
+  return <div className={styles.root} {...rest} style={style} />;
+};
+
+export default AlertBanner;
+
+================
+File: reference/components/Avatar.module.scss
+================
+.parent {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+}
+
+.placeholder {
+  background: var(--theme-border);
+  display: inline-block;
+  width: 4ch;
+  height: calc(var(--font-size) * var(--theme-line-height-base) * 2);
+  vertical-align: bottom;
+  flex-shrink: 0;
+  position: relative;
+
+  &:hover {
+    &::before {
+      content: '';
+      top: 0;
+      left: 0;
+      right: 0;
+      bottom: 0;
+      position: absolute;
+      pointer-events: none;
+      opacity: 0.5;
+      background: var(--theme-focused-foreground);
+    }
+  }
+}
+
+.root {
+  background: unset;
+  background-size: cover;
+  background-position: 50% 50%;
+  background-repeat: no-repeat;
+  display: inline-block;
+  width: 4ch;
+  height: calc(var(--font-size) * var(--theme-line-height-base) * 2);
+  vertical-align: bottom;
+  flex-shrink: 0;
+  position: relative;
+
+  &:hover {
+    background: unset;
+    background-size: cover;
+    background-position: 50% 50%;
+    background-repeat: no-repeat;
+    &::before {
+      content: '';
+      top: 0;
+      left: 0;
+      right: 0;
+      bottom: 0;
+      position: absolute;
+      pointer-events: none;
+      opacity: 0.5;
+      background: var(--theme-focused-foreground);
+    }
+  }
+}
+
+a {
+  &.root {
+    background: unset;
+    background-size: cover;
+    background-position: 50% 50%;
+    background-repeat: no-repeat;
+    display: inline-block;
+    width: 4ch;
+    height: calc(var(--font-size) * var(--theme-line-height-base) * 2);
+    vertical-align: bottom;
+    flex-shrink: 0;
+    position: relative;
+
+    &:hover {
+      background: unset;
+      background-size: cover;
+      background-position: 50% 50%;
+      background-repeat: no-repeat;
+      &::before {
+        content: '';
+        top: 0;
+        left: 0;
+        right: 0;
+        bottom: 0;
+        position: absolute;
+        pointer-events: none;
+        opacity: 0.5;
+        background: var(--theme-focused-foreground);
+      }
+    }
+
+    &:focus {
+      background: unset;
+      background-size: cover;
+      background-position: 50% 50%;
+      background-repeat: no-repeat;
+      outline: 0;
+
+      &::before {
+        content: '';
+        top: 0;
+        left: 0;
+        right: 0;
+        bottom: 0;
+        position: absolute;
+        pointer-events: none;
+        opacity: 0.5;
+        background: var(--theme-focused-foreground);
+      }
+    }
+  }
+}
+
+.right {
+  min-width: 10%;
+  width: 100%;
+  background: var(--theme-foreground);
+}
+
+================
+File: reference/components/Avatar.tsx
+================
+import styles from '@components/Avatar.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface AvatarProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'style' | 'className' | 'children'> {
+  src?: string;
+  href?: string;
+  target?: string;
+  style?: React.CSSProperties;
+  children?: React.ReactNode;
+}
+
+const Avatar: React.FC<AvatarProps> = (props) => {
+  const { src, style: propStyle, href, target, children, ...rest } = props;
+
+  const backgroundStyle = src ? { backgroundImage: `url(${src})` } : {};
+
+  const combinedStyle = { ...propStyle, ...backgroundStyle };
+
+  let avatarElement: React.ReactElement;
+
+  if (href) {
+    avatarElement = <a className={Utilities.classNames(src ? styles.root : styles.placeholder)} style={combinedStyle} href={href} target={target} tabIndex={0} role="link" />;
+  } else {
+    avatarElement = <figure className={Utilities.classNames(src ? styles.root : styles.placeholder)} style={combinedStyle} />;
+  }
+
+  if (!children) {
+    return avatarElement;
+  }
+
+  return (
+    <div className={styles.parent} {...rest}>
+      {avatarElement}
+      <span className={styles.right}>{children}</span>
+    </div>
+  );
+};
+
+export default Avatar;
+
+================
+File: reference/components/Badge.module.scss
+================
+.root {
+  display: inline-block;
+  vertical-align: top;
+  text-align: center;
+  font-weight: 400;
+  margin: 0;
+  outline: 0;
+  border: 0;
+  font-family: var(--font-family-mono);
+  min-height: calc(var(--theme-line-height-base) * var(--font-size));
+  text-transform: uppercase;
+  transition: 200ms ease all;
+  background: var(--theme-border);
+  padding: 0 1ch 0 1ch;
+}
+
+================
+File: reference/components/Badge.tsx
+================
+'use client';
+
+import styles from '@components/Badge.module.scss';
+
+import * as React from 'react';
+
+interface BadgeProps extends React.HTMLAttributes<HTMLSpanElement> {
+  children?: React.ReactNode;
+}
+
+const Badge: React.FC<BadgeProps> = ({ children, ...rest }) => {
+  return (
+    <span className={styles.root} {...rest}>
+      {children}
+    </span>
+  );
+};
+
+export default Badge;
+
+================
+File: reference/components/BarLoader.module.scss
+================
+.root {
+  background: var(--theme-border);
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  white-space: nowrap;
+  text-align: left;
+  vertical-align: bottom;
+  display: block;
+}
+
+.bar {
+  background: linear-gradient(to right, transparent, var(--theme-text));
+  height: 100%;
+  width: 0%;
+  transition: width 0.1s linear;
+}
+
+================
+File: reference/components/BarLoader.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+import styles from '@components/BarLoader.module.scss';
+
+interface BarLoaderProps {
+  intervalRate?: number;
+  progress?: number;
+}
+
+const BarLoader: React.FC<BarLoaderProps> = ({ intervalRate, progress }) => {
+  const [currentProgress, setCurrentProgress] = React.useState<number>(progress || 0);
+
+  React.useEffect(() => {
+    if (progress !== undefined) {
+      setCurrentProgress(progress);
+      return;
+    }
+
+    if (!intervalRate) return;
+
+    const interval = setInterval(() => {
+      setCurrentProgress((prev) => (prev + 10) % 110);
+    }, intervalRate);
+
+    return () => clearInterval(interval);
+  }, [intervalRate, progress]);
+
+  return (
+    <div className={styles.root}>
+      <div
+        className={styles.bar}
+        style={{
+          width: `${Math.min(currentProgress, 100)}%`,
+        }}
+      ></div>
+    </div>
+  );
+};
+
+export default BarLoader;
+
+================
+File: reference/components/BarProgress.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border-subdued);
+  white-space: nowrap;
+  text-align: left;
+  vertical-align: bottom;
+  overflow: hidden;
+  position: relative;
+}
+
+.measure {
+  visibility: hidden;
+  position: absolute;
+  pointer-events: none;
+}
+
+================
+File: reference/components/BarProgress.tsx
+================
+'use client';
+
+import styles from '@components/BarProgress.module.scss';
+
+import * as React from 'react';
+
+interface BarProgressProps {
+  intervalRate?: number;
+  progress?: number;
+  fillChar?: string;
+}
+
+const BarProgress: React.FC<BarProgressProps> = ({ intervalRate, progress, fillChar = '░' }) => {
+  const [currentProgress, setCurrentProgress] = React.useState(progress ?? 0);
+  const [containerWidth, setContainerWidth] = React.useState(0);
+  const [charWidth, setCharWidth] = React.useState(0);
+
+  const containerRef = React.useRef<HTMLDivElement>(null);
+  const measureRef = React.useRef<HTMLSpanElement>(null);
+
+  React.useEffect(() => {
+    if (typeof progress === 'number') {
+      setCurrentProgress(progress);
+      return;
+    }
+    if (!intervalRate) return;
+    const interval = setInterval(() => {
+      setCurrentProgress((prev) => (prev + 10) % 110);
+    }, intervalRate);
+    return () => clearInterval(interval);
+  }, [intervalRate, progress]);
+
+  React.useLayoutEffect(() => {
+    if (!measureRef.current) return;
+    const rect = measureRef.current.getBoundingClientRect();
+    if (rect.width > 0) {
+      setCharWidth(rect.width);
+    } else {
+      requestAnimationFrame(() => {
+        const retryRect = measureRef.current?.getBoundingClientRect();
+        if (retryRect && retryRect.width > 0) {
+          setCharWidth(retryRect.width);
+        }
+      });
+    }
+  }, [fillChar]);
+
+  React.useEffect(() => {
+    if (!containerRef.current) return;
+    const observer = new ResizeObserver((entries) => {
+      for (const entry of entries) {
+        const { width } = entry.contentRect;
+        setContainerWidth(width);
+      }
+    });
+    observer.observe(containerRef.current);
+    return () => observer.disconnect();
+  }, []);
+
+  const cappedProgress = Math.min(currentProgress, 100);
+
+  let maxChars = 10;
+  if (charWidth > 0 && containerWidth > 0) {
+    maxChars = Math.max(1, Math.floor(containerWidth / charWidth));
+  }
+
+  const filledChars = Math.round((cappedProgress / 100) * maxChars);
+  const barStr = fillChar.repeat(filledChars);
+
+  return (
+    <div className={styles.root} ref={containerRef} aria-valuenow={cappedProgress} aria-valuemin={0} aria-valuemax={100} role="progressbar">
+      <span ref={measureRef} className={styles.measure}>
+        {fillChar}
+      </span>
+      {barStr}
+    </div>
+  );
+};
+
+export default BarProgress;
+
+================
+File: reference/components/Block.module.scss
+================
+.block {
+  display: inline-block;
+  width: 1ch;
+  background: var(--theme-text);
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  vertical-align: bottom;
+  flex-shrink: 0;
+}
+
+================
+File: reference/components/Block.tsx
+================
+import styles from '@components/Block.module.scss';
+
+import * as React from 'react';
+
+interface BlockProps extends React.HTMLAttributes<HTMLSpanElement> {
+  children?: React.ReactNode;
+}
+
+const Block: React.FC<BlockProps> = ({ children, ...rest }) => {
+  return (
+    <span className={styles.block} {...rest}>
+      {children}
+    </span>
+  );
+};
+
+export default Block;
+
+================
+File: reference/components/BlockLoader.module.scss
+================
+.root {
+  display: inline-block;
+  width: 1ch;
+  color: inherit;
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  vertical-align: bottom;
+}
+
+================
+File: reference/components/BlockLoader.tsx
+================
+'use client';
+
+import styles from '@components/BlockLoader.module.scss';
+
+import * as React from 'react';
+
+const SEQUENCES = [
+  ['⠁', '⠂', '⠄', '⡀', '⢀', '⠠', '⠐', '⠈'],
+  ['⣾', '⣽', '⣻', '⢿', '⡿', '⣟', '⣯', '⣷'],
+  ['▖', '▘', '▝', '▗'],
+  ['▁', '▂', '▃', '▄', '▅', '▆', '▇', '█', '▇', '▆', '▅', '▄', '▃', '▁'],
+  ['▉', '▊', '▋', '▌', '▍', '▎', '▏', '▎', '▍', '▌', '▋', '▊', '▉'],
+  ['←', '↖', '↑', '↗', '→', '↘', '↓', '↙'],
+  ['┤', '┘', '┴', '└', '├', '┌', '┬', '┐'],
+  ['◢', '◣', '◤', '◥'],
+  ['◰', '◳', '◲', '◱'],
+  ['◴', '◷', '◶', '◵'],
+  ['◐', '◓', '◑', '◒'],
+];
+
+interface BlockLoaderProps extends Omit<React.HTMLAttributes<HTMLSpanElement>, 'children'> {
+  mode?: number;
+}
+
+const BlockLoader: React.FC<BlockLoaderProps> = ({ mode = 0 }) => {
+  if (!SEQUENCES[mode]) {
+    return <span className={styles.block}>�</span>;
+  }
+
+  const [index, setIndex] = React.useState(0);
+  const intervalRef = React.useRef<number | null>(null);
+  const indexLength = SEQUENCES[mode].length;
+
+  React.useEffect(() => {
+    if (intervalRef.current) {
+      clearInterval(intervalRef.current);
+    }
+
+    intervalRef.current = window.setInterval(() => {
+      setIndex((prevIndex) => (prevIndex + 1) % indexLength);
+    }, 100);
+
+    return () => {
+      if (intervalRef.current) {
+        clearInterval(intervalRef.current);
+      }
+    };
+  }, [indexLength]);
+
+  return <span className={styles.root}>{SEQUENCES[mode][index]}</span>;
+};
+
+export default BlockLoader;
+
+================
+File: reference/components/BreadCrumbs.module.scss
+================
+.root {
+  display: inline-block;
+}
+
+.line {
+  display: inline-block;
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+}
+
+.link {
+  display: inline-block;
+  color: var(--theme-text);
+  outline: 0;
+  border: 0;
+  text-decoration: none;
+  background: var(--theme-border);
+
+  &:hover {
+    color: var(--theme-text);
+    background: var(--theme-focused-foreground);
+  }
+  
+  &:visited {
+    color: var(--theme-text);
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.symbol {
+  min-width: 1ch;
+  display: inline-block;
+  margin: 0 1ch 0 1ch;
+}
+
+================
+File: reference/components/BreadCrumbs.tsx
+================
+import styles from '@components/BreadCrumbs.module.scss';
+
+import * as React from 'react';
+
+interface BreadCrumbsItem {
+  url?: string;
+  name: string;
+}
+
+interface BreadCrumbsProps {
+  items: BreadCrumbsItem[];
+}
+
+const BreadCrumbs: React.FC<BreadCrumbsProps> = ({ items }) => {
+  return (
+    <nav aria-label="breadcrumb" className={styles.root}>
+      {items.map((item, index) => {
+        const linkElement = (
+          <a className={styles.link} href={item.url} target="_blank" tabIndex={0} role="link">
+            {item.name}
+          </a>
+        );
+
+        return (
+          <span className={styles.line} key={index}>
+            {index === items.length - 1 ? <span>{linkElement}</span> : linkElement}
+            {index < items.length - 1 && <span className={styles.symbol}> ❯ </span>}
+          </span>
+        );
+      })}
+    </nav>
+  );
+};
+
+export default BreadCrumbs;
+
+================
+File: reference/components/Button.module.scss
+================
+.root {
+  vertical-align: top;
+  display: inline-block;
+  font-weight: 400;
+  text-align: center;
+  margin: 0;
+  outline: 0;
+  border: 0;
+  font-family: var(--font-family-mono);
+  width: 100%;
+  font-size: var(--font-size);
+  line-height: calc(var(--theme-line-height-base) * 2em);
+  min-height: calc(var(--theme-line-height-base) * (var(--font-size) * 2));
+  padding: 0 2ch 0 2ch;
+  text-transform: uppercase;
+  letter-spacing: 1px;
+  transition: 200ms ease all;
+}
+
+.primary {
+  background: var(--theme-button);
+  color: var(--theme-button-text);
+  cursor: pointer;
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.secondary {
+  background: var(--theme-background);
+  color: var(--theme-text);
+  box-shadow: inset 0 0 0 1px var(--theme-border);
+  cursor: pointer;
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+    box-shadow: inset 0 0 0 1px transparent;
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    box-shadow: inset 0 0 0 1px transparent;
+  }
+}
+
+.disabled {
+  background: var(--theme-button-background);
+  color: var(--theme-button-foreground);
+  cursor: not-allowed;
+}
+
+================
+File: reference/components/Button.tsx
+================
+'use client';
+
+import styles from '@components/Button.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
+  theme?: 'PRIMARY' | 'SECONDARY';
+  isDisabled?: boolean;
+  children?: React.ReactNode;
+}
+
+const Button: React.FC<ButtonProps> = ({ theme = 'PRIMARY', isDisabled, children, ...rest }) => {
+  let classNames = Utilities.classNames(styles.root, styles.primary);
+
+  if (theme === 'SECONDARY') {
+    classNames = Utilities.classNames(styles.root, styles.secondary);
+  }
+
+  if (isDisabled) {
+    classNames = Utilities.classNames(styles.root, styles.disabled);
+
+    return <div className={classNames}>{children}</div>;
+  }
+
+  return (
+    <button className={classNames} role="button" tabIndex={0} disabled={isDisabled} {...rest}>
+      {children}
+    </button>
+  );
+};
+
+export default Button;
+
+================
+File: reference/components/ButtonGroup.module.scss
+================
+.root {
+}
+
+.full {
+  display: grid;
+  grid-template-columns: repeat(auto-fit, minmax(60px, 1fr));
+  white-space: nowrap;
+}
+
+================
+File: reference/components/ButtonGroup.tsx
+================
+'use client';
+
+import styles from '@components/ButtonGroup.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import ActionButton from '@components/ActionButton';
+import DropdownMenuTrigger from '@components/DropdownMenuTrigger';
+
+const ButtonGroup = (props) => {
+  if (!props.items) {
+    return null;
+  }
+
+  return (
+    <div className={Utilities.classNames(styles.root, props.isFull ? styles.full : null)}>
+      {props.items.map((each) => {
+        if (each.items) {
+          return (
+            <DropdownMenuTrigger key={each.body} items={each.items} hotkey={each.openHotkey}>
+              <ActionButton hotkey={each.hotkey} isSelected={each.selected}>
+                {each.body}
+              </ActionButton>
+            </DropdownMenuTrigger>
+          );
+        }
+
+        return (
+          <ActionButton key={each.body} onClick={each.onClick} hotkey={each.hotkey} isSelected={each.selected}>
+            {each.body}
+          </ActionButton>
+        );
+      })}
+    </div>
+  );
+};
+
+export default ButtonGroup;
+
+================
+File: reference/components/Canvas.module.scss
+================
+.canvas {
+  grid-row-start: 1;
+  grid-column-start: 1;
+  margin: 0;
+  padding: 0;
+  width: 100%;
+  min-height: 100%;
+  max-height: 288px;
+}
+
+================
+File: reference/components/Canvas.tsx
+================
+'use client';
+
+import styles from '@components/Canvas.module.scss';
+
+import * as React from 'react';
+
+type WebGLContextResult = {
+  gl: WebGLRenderingContext | WebGL2RenderingContext;
+  ext: {
+    internalFormat: number;
+    internalFormatRG: number;
+    formatRG: number;
+    texType: number;
+  };
+  support_linear_float: boolean | null;
+};
+
+var config = {
+  TEXTURE_DOWNSAMPLE: 1,
+  DENSITY_DISSIPATION: 0.991,
+  VELOCITY_DISSIPATION: 0.9992,
+  PRESSURE_DISSIPATION: 0.8,
+  PRESSURE_ITERATIONS: 16,
+  CURL: 12,
+  SPLAT_RADIUS: 0.12,
+  SPEED: 0.01,
+};
+
+export default function BlueCanvasComponent(props) {
+  const canvasRef = React.useRef<HTMLCanvasElement>(null);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    canvas.width = canvas.clientWidth;
+    canvas.height = canvas.clientHeight;
+
+    let splatStack: any[] = [];
+
+    const { gl, ext, support_linear_float } = getWebGLContext(canvas);
+
+    function getWebGLContext(canvas: HTMLCanvasElement): WebGLContextResult {
+      const params = {
+        alpha: false,
+        depth: false,
+        stencil: false,
+        antialias: true,
+      };
+
+      let gl: WebGLRenderingContext | WebGL2RenderingContext | null = canvas.getContext('webgl2', params) as WebGL2RenderingContext | null;
+
+      const isWebGL2 = !!gl;
+
+      if (!isWebGL2) {
+        gl = (canvas.getContext('webgl', params) || canvas.getContext('experimental-webgl', params)) as WebGLRenderingContext | null;
+      }
+
+      if (!gl) throw new Error('WebGL not supported');
+
+      const halfFloat = gl.getExtension('OES_texture_half_float');
+      let support_linear_float = gl.getExtension('OES_texture_half_float_linear');
+
+      if (isWebGL2) {
+        gl.getExtension('EXT_color_buffer_float');
+        support_linear_float = gl.getExtension('OES_texture_float_linear');
+      }
+
+      const internalFormat = isWebGL2 ? (gl as WebGL2RenderingContext).RGBA16F : gl.RGBA;
+      const internalFormatRG = isWebGL2 ? (gl as WebGL2RenderingContext).RG16F : gl.RGBA;
+      const formatRG = isWebGL2 ? (gl as WebGL2RenderingContext).RG : gl.RGBA;
+      const texType = isWebGL2 ? (gl as WebGL2RenderingContext).HALF_FLOAT : halfFloat?.HALF_FLOAT_OES || gl.UNSIGNED_BYTE;
+
+      return {
+        gl: gl as WebGLRenderingContext,
+        ext: {
+          internalFormat,
+          internalFormatRG,
+          formatRG,
+          texType,
+        },
+        support_linear_float: !!support_linear_float,
+      };
+    }
+
+    class GLProgram {
+      program: WebGLProgram;
+      uniforms: { [key: string]: WebGLUniformLocation | null };
+
+      constructor(vertexShader: WebGLShader, fragmentShader: WebGLShader) {
+        this.uniforms = {};
+        this.program = gl.createProgram()!;
+
+        gl.attachShader(this.program, vertexShader);
+        gl.attachShader(this.program, fragmentShader);
+        gl.linkProgram(this.program);
+
+        if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {
+          throw new Error(gl.getProgramInfoLog(this.program) || 'Program failed to link');
+        }
+
+        const uniformCount = gl.getProgramParameter(this.program, gl.ACTIVE_UNIFORMS);
+        for (let i = 0; i < uniformCount; i++) {
+          const uniformName = gl.getActiveUniform(this.program, i)!.name;
+          this.uniforms[uniformName] = gl.getUniformLocation(this.program, uniformName);
+        }
+      }
+
+      bind() {
+        gl.useProgram(this.program);
+      }
+    }
+
+    function compileShader(type: number, source: string): WebGLShader {
+      const shader = gl.createShader(type)!;
+      gl.shaderSource(shader, source);
+      gl.compileShader(shader);
+
+      if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
+        throw new Error(gl.getShaderInfoLog(shader) || 'Shader compilation failed');
+      }
+
+      return shader;
+    }
+
+    var baseVertexShader = compileShader(gl.VERTEX_SHADER, 'precision highp float; precision mediump sampler2D; attribute vec2 aPosition; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform vec2 texelSize; void main () {     vUv = aPosition * 0.5 + 0.5;     vL = vUv - vec2(texelSize.x, 0.0);     vR = vUv + vec2(texelSize.x, 0.0);     vT = vUv + vec2(0.0, texelSize.y);     vB = vUv - vec2(0.0, texelSize.y);     gl_Position = vec4(aPosition, 0.0, 1.0); }');
+    var clearShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; uniform sampler2D uTexture; uniform float value; void main () {     gl_FragColor = value * texture2D(uTexture, vUv); }');
+    var displayShader = compileShader(
+      gl.FRAGMENT_SHADER,
+      `
+  precision highp float;
+  precision mediump sampler2D;
+  varying vec2 vUv;
+  uniform sampler2D uTexture;
+  void main () {
+    float density = texture2D(uTexture, vUv).r;
+    vec3 splatColor = vec3(1.0, 1.0, 1.0);
+    vec3 backgroundColor = vec3(0.8, 0.8, 0.8);
+    vec3 color = mix(backgroundColor, splatColor, density);
+    gl_FragColor = vec4(color, 1.0);
+  }
+  `
+    );
+    var splatShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; uniform sampler2D uTarget; uniform float aspectRatio; uniform vec3 color; uniform vec2 point; uniform float radius; void main () {     vec2 p = vUv - point.xy;     p.x *= aspectRatio;     vec3 splat = exp(-dot(p, p) / radius) * color;     vec3 base = texture2D(uTarget, vUv).xyz;     gl_FragColor = vec4(base + splat, 1.0); }');
+    var advectionManualFilteringShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; uniform sampler2D uVelocity; uniform sampler2D uSource; uniform vec2 texelSize; uniform float dt; uniform float dissipation; vec4 bilerp (in sampler2D sam, in vec2 p) {     vec4 st;     st.xy = floor(p - 0.5) + 0.5;     st.zw = st.xy + 1.0;     vec4 uv = st * texelSize.xyxy;     vec4 a = texture2D(sam, uv.xy);     vec4 b = texture2D(sam, uv.zy);     vec4 c = texture2D(sam, uv.xw);     vec4 d = texture2D(sam, uv.zw);     vec2 f = p - st.xy;     return mix(mix(a, b, f.x), mix(c, d, f.x), f.y); } void main () {     vec2 coord = gl_FragCoord.xy - dt * texture2D(uVelocity, vUv).xy;     gl_FragColor = dissipation * bilerp(uSource, coord);     gl_FragColor.a = 1.0; }');
+    var advectionShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; uniform sampler2D uVelocity; uniform sampler2D uSource; uniform vec2 texelSize; uniform float dt; uniform float dissipation; void main () {     vec2 coord = vUv - dt * texture2D(uVelocity, vUv).xy * texelSize;     gl_FragColor = dissipation * texture2D(uSource, coord); }');
+    var divergenceShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform sampler2D uVelocity; vec2 sampleVelocity (in vec2 uv) {     vec2 multiplier = vec2(1.0, 1.0);     if (uv.x < 0.0) { uv.x = 0.0; multiplier.x = -1.0; }     if (uv.x > 1.0) { uv.x = 1.0; multiplier.x = -1.0; }     if (uv.y < 0.0) { uv.y = 0.0; multiplier.y = -1.0; }     if (uv.y > 1.0) { uv.y = 1.0; multiplier.y = -1.0; }     return multiplier * texture2D(uVelocity, uv).xy; } void main () {     float L = sampleVelocity(vL).x;     float R = sampleVelocity(vR).x;     float T = sampleVelocity(vT).y;     float B = sampleVelocity(vB).y;     float div = 0.5 * (R - L + T - B);     gl_FragColor = vec4(div, 0.0, 0.0, 1.0); }');
+    var curlShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform sampler2D uVelocity; void main () {     float L = texture2D(uVelocity, vL).y;     float R = texture2D(uVelocity, vR).y;     float T = texture2D(uVelocity, vT).x;     float B = texture2D(uVelocity, vB).x;     float vorticity = R - L - T + B;     gl_FragColor = vec4(vorticity, 0.0, 0.0, 1.0); }');
+    var vorticityShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform sampler2D uVelocity; uniform sampler2D uCurl; uniform float curl; uniform float dt; void main () {     float L = texture2D(uCurl, vL).y;     float R = texture2D(uCurl, vR).y;     float T = texture2D(uCurl, vT).x;     float B = texture2D(uCurl, vB).x;     float C = texture2D(uCurl, vUv).x;     vec2 force = vec2(abs(T) - abs(B), abs(R) - abs(L));     force *= 1.0 / length(force + 0.00001) * curl * C;     vec2 vel = texture2D(uVelocity, vUv).xy;     gl_FragColor = vec4(vel + force * dt, 0.0, 1.0); }');
+    var pressureShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform sampler2D uPressure; uniform sampler2D uDivergence; vec2 boundary (in vec2 uv) {     uv = min(max(uv, 0.0), 1.0);     return uv; } void main () {     float L = texture2D(uPressure, boundary(vL)).x;     float R = texture2D(uPressure, boundary(vR)).x;     float T = texture2D(uPressure, boundary(vT)).x;     float B = texture2D(uPressure, boundary(vB)).x;     float C = texture2D(uPressure, vUv).x;     float divergence = texture2D(uDivergence, vUv).x;     float pressure = (L + R + B + T - divergence) * 0.25;     gl_FragColor = vec4(pressure, 0.0, 0.0, 1.0); }');
+    var gradientSubtractShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform sampler2D uPressure; uniform sampler2D uVelocity; vec2 boundary (in vec2 uv) {     uv = min(max(uv, 0.0), 1.0);     return uv; } void main () {     float L = texture2D(uPressure, boundary(vL)).x;     float R = texture2D(uPressure, boundary(vR)).x;     float T = texture2D(uPressure, boundary(vT)).x;     float B = texture2D(uPressure, boundary(vB)).x;     vec2 velocity = texture2D(uVelocity, vUv).xy;     velocity.xy -= vec2(R - L, T - B);     gl_FragColor = vec4(velocity, 0.0, 1.0); }');
+
+    let textureWidth: number = 0;
+    let textureHeight: number = 0;
+
+    let density: { first: any[]; second: any[]; swap: () => void } | undefined;
+    let velocity: { first: any[]; second: any[]; swap: () => void } | undefined;
+    let divergence: any[] | undefined;
+    let curl: any[] | undefined;
+    let pressure: { first: any[]; second: any[]; swap: () => void } | undefined;
+
+    initFramebuffers();
+
+    var clearProgram = new GLProgram(baseVertexShader, clearShader);
+    var displayProgram = new GLProgram(baseVertexShader, displayShader);
+    var splatProgram = new GLProgram(baseVertexShader, splatShader);
+    var advectionProgram = new GLProgram(baseVertexShader, support_linear_float ? advectionShader : advectionManualFilteringShader);
+    var divergenceProgram = new GLProgram(baseVertexShader, divergenceShader);
+    var curlProgram = new GLProgram(baseVertexShader, curlShader);
+    var vorticityProgram = new GLProgram(baseVertexShader, vorticityShader);
+    var pressureProgram = new GLProgram(baseVertexShader, pressureShader);
+    var gradienSubtractProgram = new GLProgram(baseVertexShader, gradientSubtractShader);
+
+    function initFramebuffers() {
+      textureWidth = gl.drawingBufferWidth >> config.TEXTURE_DOWNSAMPLE;
+      textureHeight = gl.drawingBufferHeight >> config.TEXTURE_DOWNSAMPLE;
+
+      var iFormat = ext.internalFormat;
+      var iFormatRG = ext.internalFormatRG;
+      var formatRG = ext.formatRG;
+      var texType = ext.texType;
+
+      density = createDoubleFBO(0, textureWidth, textureHeight, iFormat, gl.RGBA, texType, support_linear_float ? gl.LINEAR : gl.NEAREST);
+      velocity = createDoubleFBO(2, textureWidth, textureHeight, iFormatRG, formatRG, texType, support_linear_float ? gl.LINEAR : gl.NEAREST);
+      divergence = createFBO(4, textureWidth, textureHeight, iFormatRG, formatRG, texType, gl.NEAREST);
+      curl = createFBO(5, textureWidth, textureHeight, iFormatRG, formatRG, texType, gl.NEAREST);
+      pressure = createDoubleFBO(6, textureWidth, textureHeight, iFormatRG, formatRG, texType, gl.NEAREST);
+    }
+
+    function createFBO(texId, w, h, internalFormat, format, type, param) {
+      gl.activeTexture(gl.TEXTURE0 + texId);
+
+      var texture = gl.createTexture();
+
+      gl.bindTexture(gl.TEXTURE_2D, texture);
+      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, param);
+      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, param);
+      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
+      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
+      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, w, h, 0, format, type, null);
+
+      var fbo = gl.createFramebuffer();
+
+      gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
+      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
+      gl.viewport(0, 0, w, h);
+      gl.clear(gl.COLOR_BUFFER_BIT);
+
+      return [texture, fbo, texId];
+    }
+
+    function createDoubleFBO(texId, w, h, internalFormat, format, type, param) {
+      var fbo1 = createFBO(texId, w, h, internalFormat, format, type, param);
+      var fbo2 = createFBO(texId + 1, w, h, internalFormat, format, type, param);
+
+      return {
+        get first() {
+          return fbo1;
+        },
+        get second() {
+          return fbo2;
+        },
+        swap: function swap() {
+          var temp = fbo1;
+
+          fbo1 = fbo2;
+          fbo2 = temp;
+        },
+      };
+    }
+
+    const blit = (() => {
+      const vertexData = new Float32Array([-1, -1, -1, 1, 1, 1, 1, -1]);
+      const elementData = new Uint16Array([0, 1, 2, 0, 2, 3]);
+
+      gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());
+      gl.bufferData(gl.ARRAY_BUFFER, vertexData, gl.STATIC_DRAW);
+      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer());
+      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, elementData, gl.STATIC_DRAW);
+      gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);
+      gl.enableVertexAttribArray(0);
+
+      return (destination: WebGLFramebuffer | null) => {
+        gl.bindFramebuffer(gl.FRAMEBUFFER, destination);
+        gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);
+      };
+    })();
+
+    var lastTime = Date.now();
+    let timeAccumulator = 0;
+
+    update();
+
+    function splat(x: number, y: number, dx: number, dy: number) {
+      if (!velocity) return;
+      if (!canvas) return;
+      if (!density) return;
+
+      splatProgram.bind();
+      gl.uniform1i(splatProgram.uniforms.uTarget, velocity.first[2]);
+      gl.uniform1f(splatProgram.uniforms.aspectRatio, canvas.width / canvas.height);
+      gl.uniform2f(splatProgram.uniforms.point, x / canvas.width, 1.0 - y / canvas.height);
+      gl.uniform3f(splatProgram.uniforms.color, dx, -dy, 1.0);
+      gl.uniform1f(splatProgram.uniforms.radius, config.SPLAT_RADIUS);
+      blit(velocity.second[1]);
+      velocity.swap();
+
+      gl.uniform1i(splatProgram.uniforms.uTarget, density.first[2]);
+
+      gl.uniform3f(splatProgram.uniforms.color, 0.9, 0.9, 0.9);
+      blit(density.second[1]);
+      density.swap();
+    }
+
+    function update() {
+      resizeCanvas();
+
+      const dt = Math.min((Date.now() - lastTime) / 1000, 0.016);
+      lastTime = Date.now();
+
+      gl.viewport(0, 0, textureWidth, textureHeight);
+
+      timeAccumulator += dt;
+
+      if (canvas) {
+        if (timeAccumulator >= config.SPEED) {
+          timeAccumulator = 0;
+          // splat(canvas.width * 0.5, canvas.height, 0, 48 * 8);
+          splat(0, canvas.height, canvas.width * 0.3, 8);
+        }
+      }
+
+      advectionProgram.bind();
+
+      if (!velocity) return;
+      if (!density) return;
+      if (!curl) return;
+      if (!divergence) return;
+      if (!pressure) return;
+
+      gl.uniform2f(advectionProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(advectionProgram.uniforms.uVelocity, velocity.first[2]);
+      gl.uniform1i(advectionProgram.uniforms.uSource, velocity.first[2]);
+      gl.uniform1f(advectionProgram.uniforms.dt, dt);
+      gl.uniform1f(advectionProgram.uniforms.dissipation, config.VELOCITY_DISSIPATION);
+      blit(velocity.second[1]);
+      velocity.swap();
+
+      gl.uniform1i(advectionProgram.uniforms.uVelocity, velocity.first[2]);
+
+      gl.uniform1i(advectionProgram.uniforms.uSource, density.first[2]);
+      gl.uniform1f(advectionProgram.uniforms.dissipation, config.DENSITY_DISSIPATION);
+      blit(density.second[1]);
+      density.swap();
+
+      curlProgram.bind();
+      gl.uniform2f(curlProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(curlProgram.uniforms.uVelocity, velocity.first[2]);
+      blit(curl[1]);
+
+      vorticityProgram.bind();
+      gl.uniform2f(vorticityProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(vorticityProgram.uniforms.uVelocity, velocity.first[2]);
+      gl.uniform1i(vorticityProgram.uniforms.uCurl, curl[2]);
+      gl.uniform1f(vorticityProgram.uniforms.curl, config.CURL);
+      gl.uniform1f(vorticityProgram.uniforms.dt, dt);
+      blit(velocity.second[1]);
+      velocity.swap();
+
+      divergenceProgram.bind();
+      gl.uniform2f(divergenceProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(divergenceProgram.uniforms.uVelocity, velocity.first[2]);
+      blit(divergence[1]);
+
+      clearProgram.bind();
+
+      var pressureTexId = pressure.first[2];
+
+      gl.activeTexture(gl.TEXTURE0 + pressureTexId);
+      gl.bindTexture(gl.TEXTURE_2D, pressure.first[0]);
+      gl.uniform1i(clearProgram.uniforms.uTexture, pressureTexId);
+      gl.uniform1f(clearProgram.uniforms.value, config.PRESSURE_DISSIPATION);
+      blit(pressure.second[1]);
+      pressure.swap();
+
+      pressureProgram.bind();
+      gl.uniform2f(pressureProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(pressureProgram.uniforms.uDivergence, divergence[2]);
+      pressureTexId = pressure.first[2];
+      gl.activeTexture(gl.TEXTURE0 + pressureTexId);
+
+      for (var _i = 0; _i < config.PRESSURE_ITERATIONS; _i++) {
+        gl.bindTexture(gl.TEXTURE_2D, pressure.first[0]);
+        gl.uniform1i(pressureProgram.uniforms.uPressure, pressureTexId);
+        blit(pressure.second[1]);
+        pressure.swap();
+      }
+
+      gradienSubtractProgram.bind();
+      gl.uniform2f(gradienSubtractProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(gradienSubtractProgram.uniforms.uPressure, pressure.first[2]);
+      gl.uniform1i(gradienSubtractProgram.uniforms.uVelocity, velocity.first[2]);
+      blit(velocity.second[1]);
+      velocity.swap();
+
+      gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
+      displayProgram.bind();
+      gl.uniform1i(displayProgram.uniforms.uTexture, density.first[2]);
+      blit(null);
+
+      requestAnimationFrame(update);
+    }
+
+    function resizeCanvas() {
+      if (!canvas) return;
+
+      (canvas.width !== canvas.clientWidth || canvas.height !== canvas.clientHeight) && ((canvas.width = canvas.clientWidth), (canvas.height = canvas.clientHeight), initFramebuffers());
+    }
+  }, []);
+
+  return <canvas className={styles.canvas} ref={canvasRef} style={props.style} />;
+}
+
+================
+File: reference/components/CanvasPlatformer.module.scss
+================
+.container {
+  width: 100%;
+  height: auto;
+  position: relative;
+}
+
+.root {
+  display: block;
+  width: 100%;
+  background: transparent;
+
+  &:focus {
+    outline: 0;
+    box-shadow: inset 0 0 0 1px var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/CanvasPlatformer.tsx
+================
+'use client';
+
+import styles from '@components/CanvasPlatformer.module.scss';
+
+import * as React from 'react';
+
+import ActionButton from '@components/ActionButton';
+
+interface PlatformerProps {
+  rows?: number;
+}
+
+// TODO(jimmylee)
+// Move these constants into a separate file
+// Dynamically compute these constants since we're going to
+// Support t-shirt sizes for the system.
+const LINE_HEIGHT = 20;
+const CHARACTER_WIDTH = 9.6;
+const GRAVITY = 0.3;
+const MOVE_SPEED = 2;
+const JUMP_SPEED = -6;
+const FRICTION = 0.85;
+
+interface Position {
+  x: number;
+  y: number;
+}
+
+interface Keys {
+  left: boolean;
+  right: boolean;
+  jump: boolean;
+}
+
+interface Block {
+  x: number;
+  y: number;
+}
+
+const CanvasPlatformer: React.FC<PlatformerProps> = ({ rows = 25 }) => {
+  const canvasRef = React.useRef<HTMLCanvasElement>(null);
+  const [focused, setFocused] = React.useState(false);
+
+  const positionRef = React.useRef<Position>({ x: 50, y: 0 });
+  const velocityRef = React.useRef<Position>({ x: 0, y: 0 });
+  const keysRef = React.useRef<Keys>({ left: false, right: false, jump: false });
+  const platformBlocksRef = React.useRef<Block[]>([]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+    const parent = canvas.parentElement;
+    if (!parent) return;
+
+    const resizeCanvas = () => {
+      const parentWidth = parent.clientWidth;
+      const canvasHeight = rows * LINE_HEIGHT;
+      canvas.width = parentWidth;
+      canvas.height = canvasHeight;
+      const platformY = canvas.height - LINE_HEIGHT * 2;
+      positionRef.current.y = platformY - LINE_HEIGHT;
+      platformBlocksRef.current = [];
+      const numBlocks = Math.floor(parentWidth / CHARACTER_WIDTH);
+      for (let i = 0; i < numBlocks; i++) {
+        platformBlocksRef.current.push({ x: i * CHARACTER_WIDTH, y: platformY });
+      }
+    };
+
+    resizeCanvas();
+    window.addEventListener('resize', resizeCanvas);
+    return () => {
+      window.removeEventListener('resize', resizeCanvas);
+    };
+  }, [rows]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const handleFocus = () => setFocused(true);
+    const handleBlur = () => {
+      setFocused(false);
+      keysRef.current = { left: false, right: false, jump: false };
+    };
+
+    canvas.tabIndex = 0;
+    canvas.addEventListener('focus', handleFocus);
+    canvas.addEventListener('blur', handleBlur);
+
+    const handleClick = (e: MouseEvent) => {
+      const rect = canvas.getBoundingClientRect();
+      const x = Math.floor((e.clientX - rect.left) / CHARACTER_WIDTH) * CHARACTER_WIDTH;
+      const y = Math.floor((e.clientY - rect.top) / LINE_HEIGHT) * LINE_HEIGHT;
+      const blocks = platformBlocksRef.current;
+      const existingIndex = blocks.findIndex((b) => b.x === x && b.y === y);
+      if (existingIndex !== -1) {
+        blocks.splice(existingIndex, 1);
+      } else {
+        blocks.push({ x, y });
+      }
+    };
+
+    canvas.addEventListener('click', handleClick);
+
+    return () => {
+      canvas.removeEventListener('focus', handleFocus);
+      canvas.removeEventListener('blur', handleBlur);
+      canvas.removeEventListener('click', handleClick);
+    };
+  }, []);
+
+  React.useEffect(() => {
+    const handleKeyDown = (e: KeyboardEvent) => {
+      if (!focused) return;
+      if (e.key === 'ArrowLeft' || e.key === 'ArrowRight' || e.code === 'Space') {
+        e.preventDefault();
+        e.stopPropagation();
+      }
+      if (e.key === 'ArrowLeft') keysRef.current.left = true;
+      if (e.key === 'ArrowRight') keysRef.current.right = true;
+      if (e.code === 'Space') keysRef.current.jump = true;
+    };
+
+    const handleKeyUp = (e: KeyboardEvent) => {
+      if (!focused) return;
+      if (e.key === 'ArrowLeft' || e.key === 'ArrowRight' || e.code === 'Space') {
+        e.preventDefault();
+        e.stopPropagation();
+      }
+      if (e.key === 'ArrowLeft') keysRef.current.left = false;
+      if (e.key === 'ArrowRight') keysRef.current.right = false;
+      if (e.code === 'Space') keysRef.current.jump = false;
+    };
+
+    window.addEventListener('keydown', handleKeyDown, { capture: true });
+    window.addEventListener('keyup', handleKeyUp, { capture: true });
+
+    return () => {
+      window.removeEventListener('keydown', handleKeyDown, { capture: true });
+      window.removeEventListener('keyup', handleKeyUp, { capture: true });
+    };
+  }, [focused]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+    const ctx = canvas.getContext('2d');
+    if (!ctx) return;
+
+    const loop = () => {
+      const w = canvas.width;
+      const h = canvas.height;
+      ctx.clearRect(0, 0, w, h);
+
+      const pos = positionRef.current;
+      const vel = velocityRef.current;
+      const keys = keysRef.current;
+      const blocks = platformBlocksRef.current;
+
+      const themeBorderColor = getComputedStyle(document.body).getPropertyValue('--theme-border').trim();
+      const themeTextColor = getComputedStyle(document.body).getPropertyValue('--theme-text').trim();
+
+      ctx.fillStyle = themeBorderColor;
+      for (const b of blocks) {
+        ctx.fillRect(b.x, b.y, CHARACTER_WIDTH, LINE_HEIGHT);
+      }
+
+      if (keys.left) vel.x = -MOVE_SPEED;
+      else if (keys.right) vel.x = MOVE_SPEED;
+      else {
+        vel.x *= FRICTION;
+        if (Math.abs(vel.x) < 0.1) vel.x = 0;
+      }
+
+      const oldY = pos.y;
+      vel.y += GRAVITY;
+      pos.x += vel.x;
+      pos.y += vel.y;
+
+      if (pos.x < 0) pos.x = 0;
+      if (pos.x > w - CHARACTER_WIDTH) pos.x = w - CHARACTER_WIDTH;
+
+      let groundY = h;
+      for (const b of blocks) {
+        const horizontallyOverlapping = pos.x + CHARACTER_WIDTH > b.x && pos.x < b.x + CHARACTER_WIDTH;
+        if (horizontallyOverlapping && oldY + LINE_HEIGHT <= b.y && pos.y + LINE_HEIGHT >= b.y) {
+          if (b.y < groundY) groundY = b.y;
+        }
+      }
+
+      if (pos.y + LINE_HEIGHT > groundY) {
+        pos.y = groundY - LINE_HEIGHT;
+        vel.y = 0;
+        if (keys.jump) vel.y = JUMP_SPEED;
+      }
+
+      ctx.fillStyle = themeTextColor;
+      ctx.fillRect(pos.x, pos.y, CHARACTER_WIDTH, LINE_HEIGHT);
+
+      requestAnimationFrame(loop);
+    };
+
+    requestAnimationFrame(loop);
+  }, []);
+
+  const handleJumpClick = () => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+    const pos = positionRef.current;
+    const vel = velocityRef.current;
+    let w = canvas.width;
+    let h = canvas.height;
+    let groundY = h;
+    for (const b of platformBlocksRef.current) {
+      const horizontallyOverlapping = pos.x + CHARACTER_WIDTH > b.x && pos.x < b.x + CHARACTER_WIDTH;
+      if (horizontallyOverlapping && pos.y + LINE_HEIGHT <= b.y) {
+        if (b.y < groundY) groundY = b.y;
+      }
+    }
+    if (pos.y + LINE_HEIGHT >= groundY) vel.y = JUMP_SPEED;
+  };
+
+  const handleLeftClick = () => {
+    const pos = positionRef.current;
+    pos.x -= CHARACTER_WIDTH;
+    if (pos.x < 0) pos.x = 0;
+  };
+
+  const handleRightClick = () => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+    const pos = positionRef.current;
+    pos.x += CHARACTER_WIDTH;
+    if (pos.x > canvas.width - CHARACTER_WIDTH) pos.x = canvas.width - CHARACTER_WIDTH;
+  };
+
+  return (
+    <>
+      <ActionButton hotkey="␣" onClick={handleJumpClick}>
+        Jump
+      </ActionButton>
+      <ActionButton hotkey="←" onClick={handleLeftClick}>
+        Left
+      </ActionButton>
+      <ActionButton hotkey="→" onClick={handleRightClick}>
+        Right
+      </ActionButton>
+      <div className={styles.container}>
+        <canvas className={styles.root} ref={canvasRef} />
+      </div>
+    </>
+  );
+};
+
+export default CanvasPlatformer;
+
+================
+File: reference/components/CanvasSnake.module.scss
+================
+.container {
+  width: 100%;
+  height: auto;
+  position: relative;
+}
+
+.root {
+  display: block;
+  width: 100%;
+  background: transparent;
+
+  &:focus {
+    outline: 0;
+    box-shadow: inset 0 0 0 1px var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/CanvasSnake.tsx
+================
+'use client';
+
+import styles from '@components/CanvasSnake.module.scss';
+
+import * as React from 'react';
+
+import ActionButton from '@components/ActionButton';
+
+interface SnakeProps {
+  rows?: number;
+}
+
+// TODO(jimmylee)
+// Move these constants into a separate file
+// Dynamically compute these constants since we're going to
+// Support t-shirt sizes for the system.
+const LINE_HEIGHT = 20;
+const CHARACTER_WIDTH = 9.6;
+
+interface Position {
+  x: number;
+  y: number;
+}
+
+type Direction = 'UP' | 'DOWN' | 'LEFT' | 'RIGHT';
+
+const CanvasSnake = ({ rows = 25 }: SnakeProps) => {
+  const canvasRef = React.useRef<HTMLCanvasElement>(null);
+  const [focused, setFocused] = React.useState(false);
+  const directionRef = React.useRef<Direction>('RIGHT');
+  const snakeRef = React.useRef<Position[]>([]);
+  const fruitRef = React.useRef<Position>({ x: 0, y: 0 });
+  const gridWidthRef = React.useRef<number>(0);
+  const gridHeightRef = React.useRef<number>(0);
+  const lastMoveTimeRef = React.useRef<number>(0);
+  const moveInterval = 150;
+  const animationFrameRef = React.useRef<number | null>(null);
+
+  const reset = React.useCallback(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const w = canvas.width;
+    const h = canvas.height;
+    const gridWidth = Math.floor(w / CHARACTER_WIDTH);
+    const gridHeight = Math.floor(h / LINE_HEIGHT);
+
+    gridWidthRef.current = gridWidth;
+    gridHeightRef.current = gridHeight;
+
+    const startX = Math.floor(gridWidth / 2);
+    const startY = Math.floor(gridHeight / 2);
+
+    snakeRef.current = [
+      { x: startX - 13, y: startY },
+      { x: startX - 12, y: startY },
+      { x: startX - 11, y: startY },
+      { x: startX - 10, y: startY },
+      { x: startX - 9, y: startY },
+      { x: startX - 8, y: startY },
+      { x: startX - 7, y: startY },
+      { x: startX - 6, y: startY },
+      { x: startX - 5, y: startY },
+      { x: startX - 4, y: startY },
+      { x: startX - 3, y: startY },
+      { x: startX - 2, y: startY },
+      { x: startX - 1, y: startY },
+      { x: startX, y: startY },
+    ];
+
+    directionRef.current = 'RIGHT';
+
+    fruitRef.current = {
+      x: Math.floor(Math.random() * gridWidth),
+      y: Math.floor(Math.random() * gridHeight),
+    };
+
+    lastMoveTimeRef.current = performance.now();
+  }, []);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const parent = canvas.parentElement;
+    if (!parent) return;
+
+    const onHandleResizeCanvas = () => {
+      const parentWidth = parent.clientWidth;
+      const canvasHeight = rows * LINE_HEIGHT;
+      canvas.width = parentWidth;
+      canvas.height = canvasHeight;
+      reset();
+    };
+
+    onHandleResizeCanvas();
+    window.addEventListener('resize', onHandleResizeCanvas);
+    return () => {
+      window.removeEventListener('resize', onHandleResizeCanvas);
+    };
+  }, [rows, reset]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const onHandleFocus = () => {
+      setFocused(true);
+    };
+    const onHandleBlur = () => {
+      setFocused(false);
+    };
+
+    canvas.tabIndex = 0;
+    canvas.addEventListener('focus', onHandleFocus);
+    canvas.addEventListener('blur', onHandleBlur);
+
+    return () => {
+      canvas.removeEventListener('focus', onHandleFocus);
+      canvas.removeEventListener('blur', onHandleBlur);
+    };
+  }, []);
+
+  React.useEffect(() => {
+    const handleKeyDown = (e: KeyboardEvent) => {
+      if (!focused) return;
+      if (e.key === 'ArrowLeft' || e.key === 'ArrowRight' || e.key === 'ArrowUp' || e.key === 'ArrowDown') {
+        e.preventDefault();
+        e.stopPropagation();
+      }
+      const currentDir = directionRef.current;
+      if (e.key === 'ArrowLeft' && currentDir !== 'RIGHT') directionRef.current = 'LEFT';
+      if (e.key === 'ArrowRight' && currentDir !== 'LEFT') directionRef.current = 'RIGHT';
+      if (e.key === 'ArrowUp' && currentDir !== 'DOWN') directionRef.current = 'UP';
+      if (e.key === 'ArrowDown' && currentDir !== 'UP') directionRef.current = 'DOWN';
+    };
+
+    window.addEventListener('keydown', handleKeyDown, { capture: true });
+    return () => {
+      window.removeEventListener('keydown', handleKeyDown, { capture: true });
+    };
+  }, [focused]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const ctx = canvas.getContext('2d');
+    if (!ctx) return;
+
+    const themeBorderColor = getComputedStyle(document.body).getPropertyValue('--theme-text').trim();
+    const themeTextColor = getComputedStyle(document.body).getPropertyValue('--theme-focused-foreground').trim();
+
+    const moveSnake = () => {
+      const snake = snakeRef.current;
+      const dir = directionRef.current;
+      const head = snake[snake.length - 1];
+      let newHead: Position = { x: head.x, y: head.y };
+      if (dir === 'LEFT') newHead.x -= 1;
+      if (dir === 'RIGHT') newHead.x += 1;
+      if (dir === 'UP') newHead.y -= 1;
+      if (dir === 'DOWN') newHead.y += 1;
+      if (newHead.x < 0 || newHead.x >= gridWidthRef.current || newHead.y < 0 || newHead.y >= gridHeightRef.current) {
+        reset();
+        return;
+      }
+      for (const seg of snake) {
+        if (seg.x === newHead.x && seg.y === newHead.y) {
+          reset();
+          return;
+        }
+      }
+      snake.push(newHead);
+      if (newHead.x === fruitRef.current.x && newHead.y === fruitRef.current.y) {
+        placeTarget();
+      } else {
+        snake.shift();
+      }
+    };
+
+    const placeTarget = () => {
+      const snake = snakeRef.current;
+      const gridW = gridWidthRef.current;
+      const gridH = gridHeightRef.current;
+      let fruitPos: Position;
+      while (true) {
+        fruitPos = {
+          x: Math.floor(Math.random() * gridW),
+          y: Math.floor(Math.random() * gridH),
+        };
+        if (!snake.some((s) => s.x === fruitPos.x && s.y === fruitPos.y)) break;
+      }
+      fruitRef.current = fruitPos;
+    };
+
+    const loop = (time: number) => {
+      if (!ctx) return;
+      if (!focused) return;
+
+      const w = canvas.width;
+      const h = canvas.height;
+
+      ctx.clearRect(0, 0, w, h);
+      ctx.fillStyle = themeTextColor;
+      ctx.fillRect(fruitRef.current.x * CHARACTER_WIDTH, fruitRef.current.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+      ctx.fillStyle = themeBorderColor;
+      for (const segment of snakeRef.current) {
+        ctx.fillRect(segment.x * CHARACTER_WIDTH, segment.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+      }
+      if (time - lastMoveTimeRef.current > moveInterval) {
+        moveSnake();
+        lastMoveTimeRef.current = time;
+      }
+      animationFrameRef.current = requestAnimationFrame(loop);
+    };
+
+    if (focused && animationFrameRef.current === null) {
+      animationFrameRef.current = requestAnimationFrame(loop);
+    }
+
+    return () => {
+      if (animationFrameRef.current !== null) {
+        cancelAnimationFrame(animationFrameRef.current);
+        animationFrameRef.current = null;
+      }
+    };
+  }, [focused, reset]);
+
+  React.useEffect(() => {
+    if (!focused) {
+      if (animationFrameRef.current !== null) {
+        cancelAnimationFrame(animationFrameRef.current);
+        animationFrameRef.current = null;
+      }
+
+      return;
+    }
+
+    if (animationFrameRef.current === null && canvasRef.current) {
+      animationFrameRef.current = requestAnimationFrame((time) => {
+        const canvas = canvasRef.current;
+        if (!canvas) return;
+
+        const ctx = canvas.getContext('2d');
+        if (!ctx) return;
+
+        const themeBorderColor = getComputedStyle(document.body).getPropertyValue('--theme-border').trim();
+        const themeTextColor = getComputedStyle(document.body).getPropertyValue('--theme-text').trim();
+
+        ctx.clearRect(0, 0, canvas.width, canvas.height);
+        ctx.fillStyle = themeBorderColor;
+        ctx.fillRect(fruitRef.current.x * CHARACTER_WIDTH, fruitRef.current.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+        ctx.fillStyle = themeTextColor;
+
+        for (const segment of snakeRef.current) {
+          ctx.fillRect(segment.x * CHARACTER_WIDTH, segment.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+        }
+
+        lastMoveTimeRef.current = time;
+        animationFrameRef.current = requestAnimationFrame(loop);
+
+        function loop(time: number) {
+          if (!focused) return;
+          if (!ctx) return;
+          if (!canvas) return;
+
+          ctx.clearRect(0, 0, canvas.width, canvas.height);
+          ctx.fillStyle = themeBorderColor;
+          ctx.fillRect(fruitRef.current.x * CHARACTER_WIDTH, fruitRef.current.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+          ctx.fillStyle = themeTextColor;
+          for (const segment of snakeRef.current) {
+            ctx.fillRect(segment.x * CHARACTER_WIDTH, segment.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+          }
+          if (time - lastMoveTimeRef.current > moveInterval) {
+            moveSnake();
+            lastMoveTimeRef.current = time;
+          }
+          animationFrameRef.current = requestAnimationFrame(loop);
+        }
+
+        const moveSnake = () => {
+          const snake = snakeRef.current;
+          const dir = directionRef.current;
+          const head = snake[snake.length - 1];
+          let newHead: Position = { x: head.x, y: head.y };
+          if (dir === 'LEFT') newHead.x -= 1;
+          if (dir === 'RIGHT') newHead.x += 1;
+          if (dir === 'UP') newHead.y -= 1;
+          if (dir === 'DOWN') newHead.y += 1;
+          if (newHead.x < 0 || newHead.x >= gridWidthRef.current || newHead.y < 0 || newHead.y >= gridHeightRef.current) {
+            reset();
+            return;
+          }
+
+          for (const seg of snake) {
+            if (seg.x === newHead.x && seg.y === newHead.y) {
+              reset();
+              return;
+            }
+          }
+
+          snake.push(newHead);
+          if (newHead.x === fruitRef.current.x && newHead.y === fruitRef.current.y) {
+            placeTarget();
+          } else {
+            snake.shift();
+          }
+        };
+
+        const placeTarget = () => {
+          const snake = snakeRef.current;
+          const gridW = gridWidthRef.current;
+          const gridH = gridHeightRef.current;
+          let fruitPos: Position;
+          while (true) {
+            fruitPos = {
+              x: Math.floor(Math.random() * gridW),
+              y: Math.floor(Math.random() * gridH),
+            };
+            if (!snake.some((s) => s.x === fruitPos.x && s.y === fruitPos.y)) break;
+          }
+          fruitRef.current = fruitPos;
+        };
+      });
+    }
+  }, [focused, reset]);
+
+  const onHandleClickUp = () => {
+    if (directionRef.current !== 'DOWN') directionRef.current = 'UP';
+  };
+  const onHandleClickDown = () => {
+    if (directionRef.current !== 'UP') directionRef.current = 'DOWN';
+  };
+  const onHandleClickLeft = () => {
+    if (directionRef.current !== 'RIGHT') directionRef.current = 'LEFT';
+  };
+  const onHandleClickRight = () => {
+    if (directionRef.current !== 'LEFT') directionRef.current = 'RIGHT';
+  };
+
+  return (
+    <>
+      <ActionButton hotkey="↑" onClick={onHandleClickUp}>
+        Up
+      </ActionButton>
+      <ActionButton hotkey="↓" onClick={onHandleClickDown}>
+        Down
+      </ActionButton>
+      <ActionButton hotkey="←" onClick={onHandleClickLeft}>
+        Left
+      </ActionButton>
+      <ActionButton hotkey="→" onClick={onHandleClickRight}>
+        Right
+      </ActionButton>
+      <div className={styles.container}>
+        <canvas className={styles.root} ref={canvasRef} />
+      </div>
+    </>
+  );
+};
+
+export default CanvasSnake;
+
+================
+File: reference/components/Card.module.scss
+================
+.card {
+  position: relative;
+  display: block;
+  padding-top: 0;
+  padding-left: 0;
+  padding-right: 0;
+  padding-bottom: 0;
+  white-space: prewrap;
+}
+
+.children {
+  box-shadow:
+    inset 2px 0 0 0 var(--theme-text),
+    inset -2px 0 0 0 var(--theme-text),
+    inset 0 -2px 0 0 var(--theme-text);
+  display: block;
+  padding-top: calc(var(--theme-line-height-base) * 0.5rem);
+  padding-left: 2ch;
+  padding-right: 2ch;
+  padding-bottom: calc(var(--theme-line-height-base) * 1rem);
+  overflow-x: auto;
+  overflow-y: hidden;
+
+  &::-webkit-scrollbar {
+    display: none;
+  }
+
+  scrollbar-width: none;
+}
+
+.action {
+  display: flex;
+  align-items: flex-end;
+  justify-content: space-between;
+}
+
+.left {
+  min-width: 10%;
+  width: 100%;
+  box-shadow:
+    inset 2px 0 0 0 var(--theme-text),
+    inset 0 2px 0 0 var(--theme-text);
+  padding: calc((var(--font-size) * 0.5) * var(--theme-line-height-base)) 2ch 0px 1ch;
+}
+
+.leftCorner {
+  flex-shrink: 0;
+  box-shadow:
+    inset 2px 0 0 0 var(--theme-text),
+    inset 0 2px 0 0 var(--theme-text);
+  padding: calc((var(--font-size) * 0.5) * var(--theme-line-height-base)) 1ch 0px 1ch;
+}
+
+.right {
+  min-width: 10%;
+  width: 100%;
+  box-shadow:
+    inset -2px 0 0 0 var(--theme-text),
+    inset 0 2px 0 0 var(--theme-text);
+  padding: calc((var(--font-size) * 0.5) * var(--theme-line-height-base)) 2ch 0px 1ch;
+}
+
+.rightCorner {
+  flex-shrink: 0;
+  box-shadow:
+    inset -2px 0 0 0 var(--theme-text),
+    inset 0 2px 0 0 var(--theme-text);
+  padding: calc((var(--font-size) * 0.5) * var(--theme-line-height-base)) 1ch 0px 1ch;
+}
+
+.title {
+  flex-shrink: 0;
+  padding: 0 1ch 0 1ch;
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+================
+File: reference/components/Card.tsx
+================
+import styles from '@components/Card.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface CardProps extends React.HTMLAttributes<HTMLDivElement> {
+  children?: React.ReactNode;
+  title?: string | any;
+  mode?: string | any;
+}
+
+const Card: React.FC<CardProps> = ({ children, mode, title, style, ...rest }) => {
+  let titleElement = (
+    <header className={styles.action}>
+      <div className={styles.left} aria-hidden="true"></div>
+      {title ? <h2 className={styles.title}>{title}</h2> : null}
+      <div className={styles.right} aria-hidden="true"></div>
+    </header>
+  );
+
+  if (mode === 'left') {
+    titleElement = (
+      <header className={styles.action}>
+        <div className={styles.leftCorner} aria-hidden="true"></div>
+        <h2 className={styles.title}>{title}</h2>
+        <div className={styles.right} aria-hidden="true"></div>
+      </header>
+    );
+  }
+
+  if (mode === 'right') {
+    titleElement = (
+      <header className={styles.action}>
+        <div className={styles.left} aria-hidden="true"></div>
+        <h2 className={styles.title}>{title}</h2>
+        <div className={styles.rightCorner} aria-hidden="true"></div>
+      </header>
+    );
+  }
+
+  return (
+    <article className={styles.card} style={style}>
+      {titleElement}
+      <section className={styles.children}>{children}</section>
+    </article>
+  );
+};
+
+export default Card;
+
+================
+File: reference/components/CardDouble.module.scss
+================
+.card {
+  --card-double-border-width: 6px;
+  --card-double-half-gutter: (var(--font-size) * 0.5);
+  --card-double-top-gutter: 6px;
+
+  position: relative;
+  display: block;
+  padding-top: 0;
+  padding-right: 0;
+  padding-left: 0;
+  padding-bottom: 0;
+}
+
+.children {
+  border-left: var(--card-double-border-width) solid var(--theme-text);
+  border-left-style: double;
+  border-bottom: var(--card-double-border-width) solid var(--theme-text);
+  border-bottom-style: double;
+  border-right: var(--card-double-border-width) solid var(--theme-text);
+  border-right-style: double;
+  display: block;
+  padding-top: calc(var(--theme-line-height-base) * 0.5rem);
+  padding-left: calc(2ch - var(--card-double-border-width));
+  padding-right: calc(2ch - var(--card-double-border-width));
+  padding-bottom: calc(var(--theme-line-height-base) * 1rem - var(--card-double-border-width));
+
+  overflow-x: auto;
+  overflow-y: hidden;
+
+  &::-webkit-scrollbar {
+    display: none;
+  }
+
+  scrollbar-width: none;
+}
+
+.action {
+  display: flex;
+  align-items: flex-end;
+  justify-content: space-between;
+}
+
+.left {
+  min-width: 10%;
+  width: 100%;
+  border-top: var(--card-double-border-width) solid var(--theme-text);
+  border-top-style: double;
+  border-left: var(--card-double-border-width) solid var(--theme-text);
+  border-left-style: double;
+  padding: calc(var(--card-double-top-gutter) * var(--theme-line-height-base)) 2ch 0px 1ch;
+}
+
+.leftCorner {
+  flex-shrink: 0;
+  border-top: var(--card-double-border-width) solid var(--theme-text);
+  border-top-style: double;
+  border-left: var(--card-double-border-width) solid var(--theme-text);
+  border-left-style: double;
+  padding: calc(var(--card-double-top-gutter) * var(--theme-line-height-base)) calc(1ch - 6px) 0px 1ch;
+}
+
+.right {
+  min-width: 10%;
+  width: 100%;
+  border-top: var(--card-double-border-width) solid var(--theme-text);
+  border-top-style: double;
+  border-right: var(--card-double-border-width) solid var(--theme-text);
+  border-right-style: double;
+  padding: calc(var(--card-double-top-gutter) * var(--theme-line-height-base)) 2ch 0px 1ch;
+}
+
+.rightCorner {
+  flex-shrink: 0;
+  border-top: var(--card-double-border-width) solid var(--theme-text);
+  border-top-style: double;
+  border-right: var(--card-double-border-width) solid var(--theme-text);
+  border-right-style: double;
+  padding: calc(var(--card-double-top-gutter) * var(--theme-line-height-base)) 1ch 0px calc(1ch - 6px);
+}
+
+.title {
+  flex-shrink: 0;
+  padding: 0 1ch 0 1ch;
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+================
+File: reference/components/CardDouble.tsx
+================
+import styles from '@components/CardDouble.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface CardProps extends React.HTMLAttributes<HTMLDivElement> {
+  children?: React.ReactNode;
+  title?: string | any;
+  mode?: string | any;
+  style?: any;
+}
+
+const CardDouble: React.FC<CardProps> = ({ children, mode, title, style, ...rest }) => {
+  let titleElement = (
+    <header className={styles.action}>
+      <div className={styles.left} aria-hidden="true"></div>
+      <h2 className={styles.title}>{title}</h2>
+      <div className={styles.right} aria-hidden="true"></div>
+    </header>
+  );
+
+  if (mode === 'left') {
+    titleElement = (
+      <header className={styles.action}>
+        <div className={styles.leftCorner} aria-hidden="true"></div>
+        <h2 className={styles.title}>{title}</h2>
+        <div className={styles.right} aria-hidden="true"></div>
+      </header>
+    );
+  }
+
+  if (mode === 'right') {
+    titleElement = (
+      <header className={styles.action}>
+        <div className={styles.left} aria-hidden="true"></div>
+        <h2 className={styles.title}>{title}</h2>
+        <div className={styles.rightCorner} aria-hidden="true"></div>
+      </header>
+    );
+  }
+
+  return (
+    <article className={styles.card}>
+      {titleElement}
+      <section className={styles.children}>
+        <section className={styles.borderChildren} style={style}>
+          {children}
+        </section>
+      </section>
+    </article>
+  );
+};
+
+export default CardDouble;
+
+================
+File: reference/components/Checkbox.module.scss
+================
+.section {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+
+  .right {
+    padding-bottom: calc(8px * var(--theme-line-height-base));
+    box-shadow: inset 0 1px 0 0 var(--theme-border-subdued);
+  }
+
+  &:last-child {
+    .right {
+      padding-bottom: 0;
+    }
+  }
+}
+
+.checked {
+}
+
+.focused {
+  .figure {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.relative {
+  position: relative;
+  flex-shrink: 0;
+  display: inline-block;
+  vertical-align: baseline;
+}
+
+.figure {
+  width: 100%;
+  height: 100%;
+  cursor: pointer;
+  color: var(--theme-text);
+  background: var(--theme-button-foreground);
+  align-self: stretch;
+  display: inline-block;
+  padding: 0 1ch 0 1ch;
+}
+
+.right {
+  background: var(--theme-button-background);
+  min-width: 10%;
+  width: 100%;
+  align-self: stretch;
+}
+
+.input {
+  top: 0;
+  left: 0;
+  opacity: 0;
+  position: absolute;
+  width: 1px;
+  height: 1px;
+}
+
+================
+File: reference/components/Checkbox.tsx
+================
+'use client';
+
+import styles from '@components/Checkbox.module.scss';
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface CheckboxProps {
+  style?: React.CSSProperties;
+  checkboxStyle?: React.CSSProperties;
+  name: string;
+  defaultChecked?: boolean;
+  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;
+  tabIndex?: number;
+  children?: React.ReactNode;
+}
+
+const Checkbox: React.FC<CheckboxProps> = ({ style, name, defaultChecked = false, onChange, children }) => {
+  const checkboxId = `${name}-checkbox`;
+  const inputRef = React.useRef<HTMLInputElement>(null);
+
+  const [isChecked, setIsChecked] = React.useState(defaultChecked);
+  const [isFocused, setIsFocused] = React.useState(false);
+
+  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
+    switch (event.key) {
+      case 'Enter':
+        event.preventDefault();
+        inputRef.current?.click();
+        break;
+      case 'ArrowUp':
+      case 'ArrowLeft': {
+        event.preventDefault();
+        const previousFocusable = Utilities.findNextFocusable(document.activeElement, 'previous');
+        previousFocusable?.focus();
+        break;
+      }
+      case 'ArrowDown':
+      case 'ArrowRight': {
+        event.preventDefault();
+        const nextFocusable = Utilities.findNextFocusable(document.activeElement, 'next');
+        nextFocusable?.focus();
+        break;
+      }
+      default:
+        break;
+    }
+  };
+
+  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
+    const newCheckedStatus = event.target.checked;
+    setIsChecked(newCheckedStatus);
+    if (onChange) {
+      onChange(event);
+    }
+  };
+
+  const handleFocus = () => setIsFocused(true);
+  const handleBlur = () => setIsFocused(false);
+
+  return (
+    <div
+      className={Utilities.classNames(styles.section, {
+        [styles.checked]: isChecked,
+        [styles.focused]: isFocused,
+      })}
+      style={style}
+    >
+      <div className={styles.relative}>
+        <input className={styles.input} id={checkboxId} type="checkbox" name={name} defaultChecked={defaultChecked} onChange={handleChange} onKeyDown={handleKeyDown} onFocus={handleFocus} onBlur={handleBlur} tabIndex={0} ref={inputRef} />
+        <label className={styles.figure} htmlFor={checkboxId}>
+          {isChecked ? '╳' : '\u00A0'}
+        </label>
+      </div>
+      <div className={styles.right}>&nbsp;&nbsp;{children}</div>
+    </div>
+  );
+};
+
+export default Checkbox;
+
+================
+File: reference/components/Chessboard.module.scss
+================
+.board {
+  display: inline-table;
+  border-collapse: collapse;
+}
+
+.corner {
+  width: 1ch;
+  height: calc(var(--theme-line-height-base) * 1rem);
+}
+
+.cell {
+  width: 1ch;
+  height: calc(var(--theme-line-height-base) * 1rem);
+  background-color: var(--theme-border-subdued);
+  text-align: center;
+  vertical-align: middle;
+}
+
+.square {
+  height: calc(var(--theme-line-height-base) * 2rem);
+  text-align: center;
+  vertical-align: middle;
+  width: 3ch;
+}
+
+.dark {
+  background-color: var(--theme-focused-foreground);
+}
+
+.light {
+  background-color: var(--theme-focused-foreground-subdued);
+}
+
+.symbol {
+  font-size: 40px;
+  line-height: calc(var(--theme-line-height-base) * 2rem);
+}
+
+================
+File: reference/components/Chessboard.tsx
+================
+'use client';
+
+import styles from '@components/Chessboard.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+const FILE = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];
+const RANK = [8, 7, 6, 5, 4, 3, 2, 1];
+
+const getPieceSymbol = (piece: string) => {
+  const mapping: Record<string, string> = {
+    K: '♔',
+    Q: '♕',
+    R: '♖',
+    B: '♗',
+    N: '♘',
+    P: '♙',
+    k: '♚',
+    q: '♛',
+    r: '♜',
+    b: '♝',
+    n: '♞',
+    p: '♟',
+  };
+  return mapping[piece] || '';
+};
+
+interface ChessboardProps {
+  board: string[][];
+}
+
+const Chessboard: React.FC<ChessboardProps> = ({ board }) => {
+  return (
+    <table className={styles.board}>
+      <tbody>
+        <tr>
+          <td className={styles.corner}></td>
+          {FILE.map((file) => (
+            <td key={file} className={styles.cell}>
+              {file}
+            </td>
+          ))}
+        </tr>
+        {RANK.map((rank, rowIndex) => (
+          <tr key={rank}>
+            <td className={styles.cell}>{rank}</td>
+            {FILE.map((_, colIndex) => {
+              const isDark = (rowIndex + colIndex) % 2 === 0;
+              const squareClass = isDark ? styles.dark : styles.light;
+              return (
+                <td key={colIndex} className={Utilities.classNames(styles.square, squareClass)}>
+                  <span className={styles.symbol}>{getPieceSymbol(board[rowIndex][colIndex])}</span>
+                </td>
+              );
+            })}
+          </tr>
+        ))}
+      </tbody>
+    </table>
+  );
+};
+
+export default Chessboard;
+
+================
+File: reference/components/CodeBlock.module.scss
+================
+.root {
+  display: block;
+  font-weight: 400;
+  overflow: auto;
+  font-family: inherit;
+  background: var(--theme-border-subdued);
+
+  &::-webkit-scrollbar {
+    display: none;
+  }
+
+  scrollbar-width: none;
+}
+
+.line {
+  display: flex;
+  justify-content: space-between;
+  align-items: flex-start;
+}
+
+.number {
+  display: inline-flex;
+  width: 3ch;
+  text-align: right;
+  padding-right: 1ch;
+  user-select: none;
+  background: var(--theme-background);
+  opacity: 0.5;
+}
+
+.content {
+  min-width: 10%;
+  width: 100%;
+  white-space: pre;
+  background: var(--theme-border-subdued);
+  padding-left: 2ch;
+}
+
+================
+File: reference/components/CodeBlock.tsx
+================
+'use client';
+
+import styles from '@components/CodeBlock.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface CodeBlockProps extends React.HTMLAttributes<HTMLPreElement> {
+  children?: React.ReactNode;
+}
+
+const CodeBlock = React.forwardRef<HTMLPreElement, CodeBlockProps>(({ children, ...rest }, ref) => {
+  return (
+    <pre className={styles.root} ref={ref} {...rest}>
+      {String(children)
+        .split('\n')
+        .map((line, index) => (
+          <div key={index} className={styles.line}>
+            <span className={styles.number}>{Utilities.leftPad(String(index + 1), 3)}</span>
+            <span className={styles.content}>{line}</span>
+          </div>
+        ))}
+    </pre>
+  );
+});
+
+CodeBlock.displayName = 'CodeBlock';
+
+export default CodeBlock;
+
+================
+File: reference/components/ComboBox.module.scss
+================
+.root {
+  padding: 0;
+}
+
+================
+File: reference/components/ComboBox.tsx
+================
+'use client';
+
+import styles from '@components/ComboBox.module.scss';
+
+import * as React from 'react';
+
+import AlertBanner from '@components/AlertBanner';
+import ButtonGroup from '@components/ButtonGroup';
+import CardDouble from '@components/CardDouble';
+import Input from '@components/Input';
+
+interface ComboBoxProps {
+  data: string[][];
+  label?: string;
+}
+
+function ComboBox({ data, label }: ComboBoxProps) {
+  const [searchTerm, setSearchTerm] = React.useState('');
+
+  const filtered = React.useMemo(() => {
+    const sliced = data.slice(1);
+    if (!searchTerm) return [];
+    return sliced.filter((entry) => entry[0].toLowerCase().includes(searchTerm.toLowerCase()));
+  }, [data, searchTerm]);
+
+  const displayed = React.useMemo(() => {
+    const sliced = data.slice(1);
+    if (filtered.length >= 5) return filtered.slice(0, 5);
+    if (filtered.length === 0 && searchTerm) return sliced.slice(0, 5);
+    if (filtered.length > 0 && filtered.length < 5) {
+      const needed = 5 - filtered.length;
+      const remainder = sliced.filter((entry) => !filtered.includes(entry));
+      return [...filtered, ...remainder.slice(0, needed)];
+    }
+    return sliced.slice(0, 5);
+  }, [filtered, data, searchTerm]);
+
+  const handleChange = React.useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
+    setSearchTerm(e.target.value);
+  }, []);
+
+  return (
+    <>
+      <div className={styles.root}>
+        <Input autoComplete="off" isBlink label={label} name="input_test_blink" value={searchTerm} onChange={handleChange} />
+      </div>
+      {displayed.map((entry) => (
+        <CardDouble key={entry[0]} title={entry[0]}>
+          <AlertBanner>{entry[1]}</AlertBanner>
+          <br />
+          <ButtonGroup isFull items={[{ body: 'FAVORITE' }, { body: 'DONATE' }, { body: 'LEARN MORE' }]} />
+        </CardDouble>
+      ))}
+    </>
+  );
+}
+
+export default ComboBox;
+
+================
+File: reference/components/ContentFluid.module.scss
+================
+.root {
+  display: block;
+  min-width: 10%;
+  width: 100%;
+  align-self: stretch;
+}
+
+================
+File: reference/components/ContentFluid.tsx
+================
+import styles from '@components/ContentFluid.module.scss';
+
+import * as React from 'react';
+
+interface ContentFluidProps extends React.HTMLAttributes<HTMLSpanElement> {
+  children?: React.ReactNode;
+}
+
+const ContentFluid: React.FC<ContentFluidProps> = ({ children, ...rest }) => {
+  return <div className={styles.root}>{children}</div>;
+};
+
+export default ContentFluid;
+
+================
+File: reference/components/DataTable.module.scss
+================
+.root {
+  position: relative;
+  width: 100%;
+  border-spacing: 0px;
+  max-width: 64ch;
+}
+
+.body {
+}
+
+.row {
+  transition: transform 0.5s ease;
+  border-spacing: 0px;
+
+  &:first-child {
+    font-weight: 400;
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    outline: 0;
+  }
+}
+
+.column {
+  border: 0;
+  outline: 0;
+  padding-right: 1ch;
+  transition: background-color 0.5s ease;
+}
+
+.changed {
+  animation: flash 2000ms ease;
+}
+
+@keyframes flash {
+  0% {
+    background-color: var(--theme-focused-foreground-subdued);
+  }
+  100% {
+    background-color: transparent;
+  }
+}
+
+================
+File: reference/components/DataTable.tsx
+================
+'use client';
+
+import styles from '@components/DataTable.module.scss';
+
+import * as React from 'react';
+
+interface TableProps {
+  data: string[][];
+}
+
+interface RGBAColor {
+  r: number;
+  g: number;
+  b: number;
+  a: number;
+}
+
+const BASE_FOREGROUND_RGBA: RGBAColor = { r: 98, g: 98, b: 98, a: 0.5 };
+const BASE_BACKGROUND_RGBA: RGBAColor = { r: 168, g: 168, b: 168, a: 0.5 };
+const ALPHA = 0.45;
+
+function interpolateColor(color1: RGBAColor, color2: RGBAColor, factor: number): RGBAColor {
+  return {
+    r: Math.round(color1.r + factor * (color2.r - color1.r)),
+    g: Math.round(color1.g + factor * (color2.g - color1.g)),
+    b: Math.round(color1.b + factor * (color2.b - color1.b)),
+    a: color1.a + factor * (color2.a - color1.a),
+  };
+}
+
+const DataTable: React.FC<TableProps> = ({ data }) => {
+  const tableRef = React.useRef<HTMLTableElement>(null);
+  const prevDataRef = React.useRef<string[][]>(data);
+
+  React.useEffect(() => {
+    const rows = tableRef.current?.querySelectorAll<HTMLTableRowElement>('tr') || [];
+    for (let i = 1; i < data.length; i++) {
+      const cells = rows[i]?.querySelectorAll<HTMLTableCellElement>('td');
+      if (!cells) continue;
+      for (let j = 0; j < data[i].length; j++) {
+        const cell = cells[j];
+        const changed = prevDataRef.current[i]?.[j] !== data[i][j];
+        if (cell && changed) {
+          cell.classList.remove(styles.changed);
+          void cell.offsetWidth;
+          cell.classList.add(styles.changed);
+        }
+      }
+    }
+    prevDataRef.current = data;
+  }, [data]);
+
+  const handleKeyDown = (event: React.KeyboardEvent<HTMLTableElement>) => {
+    const activeElement = document.activeElement;
+    if (!activeElement) return;
+    switch (event.key) {
+      case 'Enter':
+        event.preventDefault();
+        if (activeElement instanceof HTMLTableCellElement) {
+          activeElement.click();
+        }
+        break;
+      case 'ArrowUp':
+      case 'ArrowDown':
+      case 'ArrowLeft':
+      case 'ArrowRight':
+        event.preventDefault();
+        if (!(activeElement instanceof HTMLTableCellElement)) return;
+        const direction = event.key === 'ArrowUp' || event.key === 'ArrowLeft' ? 'previous' : 'next';
+        const allCells = Array.from(tableRef.current?.querySelectorAll<HTMLTableCellElement>('td') || []);
+        const currentIndex = allCells.indexOf(activeElement);
+        if (currentIndex === -1) return;
+        let nextIndex = direction === 'next' ? currentIndex + 1 : currentIndex - 1;
+        if (direction === 'previous') {
+          if (nextIndex < 0) nextIndex = allCells.length - 1;
+        } else {
+          if (nextIndex >= allCells.length) nextIndex = 0;
+        }
+        allCells[nextIndex].focus();
+        break;
+    }
+  };
+
+  const targetColorHeader: RGBAColor = { r: 255, g: 255, b: 255, a: ALPHA };
+  const targetColorData: RGBAColor = { r: 255, g: 255, b: 255, a: ALPHA };
+
+  return (
+    <table className={styles.root} ref={tableRef} onKeyDown={handleKeyDown}>
+      <tbody className={styles.body}>
+        {data.map((row, rowIndex) => (
+          <tr key={rowIndex} className={styles.row} tabIndex={0} onClick={() => alert('testing')}>
+            {row.map((cellContent, colIndex) => {
+              let backgroundColor: string;
+              if (rowIndex === 0) {
+                const lightnessFactor = row.length > 1 ? colIndex / (row.length - 1) : 0;
+                const newColor = interpolateColor(BASE_FOREGROUND_RGBA, targetColorHeader, lightnessFactor);
+                backgroundColor = `rgba(${newColor.r}, ${newColor.g}, ${newColor.b}, ${newColor.a.toFixed(2)})`;
+              } else {
+                const numRows = data.length - 1;
+                const maxIndexSum = numRows - 1 + (row.length - 1) || 1;
+                const indexSum = rowIndex - 1 + colIndex;
+                const lightnessFactor = indexSum / maxIndexSum;
+                const newColor = interpolateColor(BASE_BACKGROUND_RGBA, targetColorData, lightnessFactor);
+                backgroundColor = `rgba(${newColor.r}, ${newColor.g}, ${newColor.b}, ${newColor.a.toFixed(2)})`;
+              }
+              return (
+                <td key={colIndex} className={styles.column} style={{ backgroundColor }}>
+                  {cellContent}
+                </td>
+              );
+            })}
+          </tr>
+        ))}
+      </tbody>
+    </table>
+  );
+};
+
+export default DataTable;
+
+================
+File: reference/components/DatePicker.module.scss
+================
+.root {
+  display: inline-block;
+  user-select: none;
+}
+
+.controls {
+  align-items: center;
+  background: var(--theme-border);
+  display: flex;
+  justify-content: space-between;
+}
+
+.button {
+  align-self: stretch;
+  background: none;
+  border: none;
+  color: var(--theme-text);
+  cursor: pointer;
+  display: inline-block;
+  line-height: calc(var(--theme-line-height-base) * 1em);
+  margin: 0;
+  outline: 0;
+  padding: 0 1ch 0 1ch;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    outline: 0;
+  }
+}
+
+.date {
+  min-width: 10%;
+  padding: 0 1ch 0 1ch;
+  text-align: left;
+  width: 100%;
+}
+
+.header {
+  background: var(--theme-border);
+  display: grid;
+  grid-template-columns: repeat(7, 1fr);
+  text-align: center;
+}
+
+.days {
+  background: var(--theme-border-subdued);
+  display: grid;
+  grid-template-columns: repeat(7, 1fr);
+  grid-template-rows: repeat(6, min-content);
+  align-items: start;
+  min-height: calc(var(--theme-line-height-base) * 6em);
+}
+
+.cell {
+  outline: none;
+  padding: 0 1ch 0 1ch;
+  text-align: center;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/DatePicker.tsx
+================
+'use client';
+
+import styles from '@components/DatePicker.module.scss';
+
+import * as React from 'react';
+
+interface DatePickerProps {
+  year?: number;
+  month?: number;
+}
+
+const WEEKDAYS = ['SU', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA'];
+
+const MONTH_NAMES = [
+  'January', 'February', 'March', 'April', 'May', 'June',
+  'July', 'August', 'September', 'October', 'November', 'December'
+];
+
+const MAX_CELLS = 42;
+
+const DatePicker: React.FC<DatePickerProps> = ({ year, month }) => {
+  const today = new Date();
+  const [currentYear, setYear] = React.useState(year || today.getFullYear());
+  const [currentMonth, setMonth] = React.useState(month || today.getMonth() + 1);
+
+  const first = new Date(currentYear, currentMonth - 1, 1);
+  const startingWeekday = first.getDay();
+  const daysInMonth = new Date(currentYear, currentMonth, 0).getDate();
+
+  const cells: React.ReactNode[] = [];
+
+  for (let i = 0; i < startingWeekday; i++) {
+    cells.push(<div key={`empty-start-${i}`} className={styles.dayCell} />);
+  }
+
+  for (let day = 1; day <= daysInMonth; day++) {
+    const presentationDay = String(day).padStart(2, '0');
+    cells.push(
+      <div
+        key={day}
+        className={styles.cell}
+        tabIndex={0}
+        aria-label={`${currentYear}-${String(currentMonth).padStart(2, '0')}-${presentationDay}`}
+      >
+        {presentationDay}
+      </div>
+    );
+  }
+
+  while (cells.length < MAX_CELLS) {
+    cells.push(<div key={`empty-end-${cells.length}`} className={styles.dayCell} />);
+  }
+
+  const onSwitchPreviousMonth = () => {
+    let newMonth = currentMonth - 1;
+    let newYear = currentYear;
+    if (newMonth < 1) {
+      newMonth = 12;
+      newYear--;
+    }
+    setMonth(newMonth);
+    setYear(newYear);
+  };
+
+  const onSwitchNextMonth = () => {
+    let newMonth = currentMonth + 1;
+    let newYear = currentYear;
+    if (newMonth > 12) {
+      newMonth = 1;
+      newYear++;
+    }
+    setMonth(newMonth);
+    setYear(newYear);
+  };
+
+  return (
+    <div className={styles.root}>
+      <div className={styles.controls}>
+        <button type="button" className={styles.button} onClick={onSwitchPreviousMonth} aria-label="Previous month">
+          ▲
+        </button>
+        <div className={styles.date}>
+          {currentYear} {MONTH_NAMES[currentMonth - 1].toUpperCase()}
+        </div>
+        <button type="button" className={styles.button} onClick={onSwitchNextMonth} aria-label="Next month">
+          ▼
+        </button>
+      </div>
+      <div className={styles.header}>
+        {WEEKDAYS.map((day) => (
+          <div key={day} className={styles.cell}>
+            {day}
+          </div>
+        ))}
+      </div>
+      <div className={styles.days}>{cells}</div>
+    </div>
+  );
+};
+
+export default DatePicker;
+
+================
+File: reference/components/DebugGrid.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+const DebugGrid: React.FC = () => {
+  React.useEffect(() => {
+    const debugGrid = document.createElement('div');
+    let isVisible = false;
+
+    const setGridHeight = () => {
+      debugGrid.style.height = `${document.documentElement.scrollHeight}px`;
+    };
+
+    Object.assign(debugGrid.style, {
+      position: 'absolute',
+      top: '0',
+      left: '0',
+      right: '0',
+      zIndex: '-1',
+      margin: '0',
+      backgroundImage: `
+        repeating-linear-gradient(var(--theme-border) 0 1px, transparent 1px 100%),
+        repeating-linear-gradient(90deg, var(--theme-border) 0 1px, transparent 1px 100%)
+      `,
+      backgroundSize: '1ch 1.25rem',
+      pointerEvents: 'none',
+      display: 'none',
+    });
+
+    document.body.appendChild(debugGrid);
+    setGridHeight();
+
+    const toggleDebugGrid = () => {
+      isVisible = !isVisible;
+      debugGrid.style.display = isVisible ? 'block' : 'none';
+    };
+
+    const handleDebugGridToggle = () => toggleDebugGrid();
+
+    const observer = new ResizeObserver(() => {
+      setGridHeight();
+    });
+    observer.observe(document.documentElement);
+
+    window.addEventListener('debugGridToggle', handleDebugGridToggle);
+    window.addEventListener('resize', setGridHeight);
+
+    return () => {
+      document.body.removeChild(debugGrid);
+      window.removeEventListener('resize', setGridHeight);
+      window.removeEventListener('debugGridToggle', handleDebugGridToggle);
+      observer.disconnect();
+    };
+  }, []);
+
+  return null;
+};
+
+export const toggleDebugGrid = (): void => {
+  window.dispatchEvent(new CustomEvent('debugGridToggle'));
+};
+
+export default DebugGrid;
+
+================
+File: reference/components/DefaultMetaTags.tsx
+================
+export default function DefaultMetaTags() {
+  return (
+    <>
+      <meta httpEquiv="content-language" content="en-us" />
+      <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0" />
+      <link rel="icon" type="image/png" sizes="32x32" href="/favicon-16x16.png" />
+      <link rel="icon" type="image/png" sizes="16x16" href="/favicon-32x32.png" />
+      <link rel="shortcut icon" href="/favicon.ico" />
+    </>
+  );
+}
+
+================
+File: reference/components/Dialog.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border);
+  box-shadow: 1ch 1ch 0 0 var(--theme-border-subdued);
+  font-weight: 400;
+  max-width: 56ch;
+  min-width: 24ch;
+  margin: 0;
+  padding: 0;
+}
+
+.header {
+  background: var(--theme-text);
+  color: var(--theme-background);
+  text-align: center;
+  margin: 0;
+  padding: 0;
+  display: block;
+}
+
+.message {
+  display: block;
+  margin: 0;
+  text-align: center;
+  padding: 0 2ch 0 2ch;
+}
+
+.actions {
+  display: flex;
+  justify-content: space-between;
+  align-items: center;
+  max-width: 24ch;
+  margin: 0 auto 0 auto;
+  padding: 0 2ch 0 2ch;
+}
+
+================
+File: reference/components/Dialog.tsx
+================
+import styles from '@components/Dialog.module.scss';
+
+import * as React from 'react';
+
+import Block from '@components/Block';
+import Button from '@components/Button';
+
+interface DialogProps {
+  title?: React.ReactNode;
+  children?: React.ReactNode;
+  style?: React.CSSProperties;
+  onConfirm?: () => void;
+  onCancel?: () => void;
+}
+
+const Dialog: React.FC<DialogProps> = ({ title, children, style, onConfirm, onCancel }) => {
+  const titleId = React.useId();
+  const descId = React.useId();
+
+  return (
+    <div className={styles.root} style={style} role="dialog" aria-modal="true" aria-labelledby={titleId} aria-describedby={descId}>
+      <header className={styles.header}>{title}</header>
+      <br />
+      <article className={styles.message} id={descId}>
+        {children}
+      </article>
+      <br />
+      <div className={styles.actions}>
+        <Button theme="SECONDARY" onClick={onConfirm}>
+          OK
+        </Button>
+        <Block style={{ opacity: 0 }} />
+        <Button theme="SECONDARY" onClick={onCancel}>
+          Cancel
+        </Button>
+      </div>
+      <br />
+    </div>
+  );
+};
+
+export default Dialog;
+
+================
+File: reference/components/Divider.module.scss
+================
+.gradient {
+  background: linear-gradient(to right, transparent, var(--theme-border), transparent);
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  width: 100%;
+}
+
+.divider {
+  align-items: center;
+  border: 0;
+  display: flex;
+  flex-direction: column;
+  flex-shrink: 0;
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  justify-content: center;
+  outline: 0;
+  width: 100%;
+}
+
+.line {
+  background: var(--theme-text);
+  display: block;
+  flex-shrink: 0;
+  height: 2px;
+  width: 100%;
+}
+
+================
+File: reference/components/Divider.tsx
+================
+import styles from '@components/Divider.module.scss';
+
+import * as React from 'react';
+
+interface DividerProps extends React.HTMLAttributes<HTMLSpanElement> {
+  children?: React.ReactNode;
+  type?: string | any;
+  style?: any;
+}
+
+const Divider: React.FC<DividerProps> = ({ children, style, type }) => {
+  if (type === 'GRADIENT') {
+    return <div className={styles.gradient} style={style} />;
+  }
+
+  if (type === 'DOUBLE') {
+    return (
+      <div className={styles.divider} style={style}>
+        <div className={styles.line} style={{ marginBottom: `2px` }} />
+        <div className={styles.line} />
+      </div>
+    );
+  }
+
+  return (
+    <div className={styles.divider} style={style}>
+      <div className={styles.line} />
+    </div>
+  );
+};
+
+export default Divider;
+
+================
+File: reference/components/Drawer.module.scss
+================
+@keyframes fadeInLeft {
+  from {
+    opacity: 0;
+  }
+  to {
+    opacity: 1;
+  }
+}
+
+.root {
+  align-self: stretch;
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+}
+
+.side {
+  animation: fadeInLeft 0.2s ease-out;
+  min-width: 10%;
+  width: 100%;
+  align-self: stretch;
+  min-width: 22ch;
+}
+
+.right {
+  flex-shrink: 0;
+  align-self: stretch;
+  background: var(--theme-background-input);
+  display: flex;
+  align-items: center;
+  width: 3ch;
+}
+
+.action {
+  display: inline-flex;
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  font-size: var(--font-size);
+  user-select: none;
+  cursor: pointer;
+  color: var(--theme-text);
+  background: var(--theme-button-foreground);
+  flex-shrink: 0;
+  align-items: center;
+  justify-content: center;
+  border: 0;
+  outline: 0;
+  margin: 0;
+  padding: 0;
+  width: 100%;
+
+  &:focus {
+    border: 0;
+    outline: 0;
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/Drawer.tsx
+================
+'use client';
+
+import styles from '@components/Drawer.module.scss';
+
+import * as React from 'react';
+
+interface DrawerProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'defaultValue'> {
+  children?: React.ReactNode;
+  defaultValue?: boolean;
+}
+
+const Drawer: React.FC<DrawerProps> = ({ children, defaultValue = false, ...rest }) => {
+  const [expand, setExpand] = React.useState<boolean>(defaultValue);
+
+  return (
+    <div className={styles.root} {...rest}>
+      {expand ? <div className={styles.side}>{children}</div> : null}
+      <div className={styles.right}>
+        <button className={styles.action} onClick={() => setExpand(!expand)}>
+          {expand ? '⭠' : '⭢'}
+        </button>
+      </div>
+    </div>
+  );
+};
+
+export default Drawer;
+
+================
+File: reference/components/DropdownMenu.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border);
+  font-weight: 400;
+}
+
+.footer {
+  background: var(--theme-background-modal-footer);
+  padding: calc(var(--font-size) * 0.5 * var(--theme-line-height-base)) 1ch calc(var(--font-size) * 0.5 * var(--theme-line-height-base)) 1ch;
+}
+
+================
+File: reference/components/DropdownMenu.tsx
+================
+import styles from '@components/DropdownMenu.module.scss';
+
+import * as React from 'react';
+
+import ActionButton from '@components/ActionButton';
+import ActionListItem from '@components/ActionListItem';
+import ModalTrigger from '@components/ModalTrigger';
+
+import { useHotkeys } from '@modules/hotkeys';
+
+interface DropdownMenuItemProps {
+  children: React.ReactNode;
+  icon?: React.ReactNode;
+  href?: string;
+  target?: string;
+  onClick?: () => void;
+  modal?: any;
+  modalProps?: Record<string, unknown>;
+}
+
+interface DropdownMenuProps extends React.HTMLAttributes<HTMLDivElement> {
+  onClose?: (event?: MouseEvent | TouchEvent | KeyboardEvent) => void;
+  items?: DropdownMenuItemProps[];
+}
+
+const DropdownMenu = React.forwardRef<HTMLDivElement, DropdownMenuProps>((props, ref) => {
+  const { onClose, items, style, ...rest } = props;
+
+  const handleHotkey = () => {
+    if (onClose) onClose();
+  };
+
+  useHotkeys('space', handleHotkey);
+
+  return (
+    <div ref={ref} className={styles.root} style={style} {...rest}>
+      {items &&
+        items.map((each, index) => {
+          if (each.modal) {
+            return (
+              <ModalTrigger key={`action-items-${index}`} modal={each.modal} modalProps={each.modalProps}>
+                <ActionListItem children={each.children} icon={each.icon} />
+              </ModalTrigger>
+            );
+          }
+
+          return (
+            <ActionListItem
+              key={`action-items-${index}`}
+              children={each.children}
+              icon={each.icon}
+              href={each.href}
+              target={each.target}
+              onClick={() => {
+                if (each.onClick) {
+                  each.onClick();
+                }
+
+                if (onClose) {
+                  onClose();
+                }
+              }}
+            />
+          );
+        })}
+
+      <footer className={styles.footer}>
+        Press space to{' '}
+        <ActionButton
+          hotkey="␣"
+          onClick={() => {
+            if (onClose) onClose();
+          }}
+        >
+          Close
+        </ActionButton>
+      </footer>
+    </div>
+  );
+});
+
+DropdownMenu.displayName = 'DropdownMenu';
+
+export default DropdownMenu;
+
+================
+File: reference/components/DropdownMenuTrigger.module.scss
+================
+.root {
+  display: inline-block;
+  position: relative;
+}
+
+================
+File: reference/components/DropdownMenuTrigger.tsx
+================
+'use client';
+
+import styles from '@components/DropdownMenuTrigger.module.scss';
+
+import * as Position from '@common/position';
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import DropdownMenu from '@components/DropdownMenu';
+import OutsideElementEvent from '@components/detectors/OutsideElementEvent';
+
+import { createPortal } from 'react-dom';
+import { useHotkeys } from '@modules/hotkeys';
+
+interface DropdownMenuTriggerProps {
+  children: React.ReactElement<React.HTMLAttributes<HTMLElement>>;
+  items: any;
+  hotkey?: string;
+}
+
+function DropdownMenuTrigger({ children, items, hotkey }: DropdownMenuTriggerProps) {
+  const [open, setOpen] = React.useState(false);
+  const [focusChildren, setFocusChildren] = React.useState(false);
+  const [willClose, setWillClose] = React.useState(false);
+  const [placement, setPlacement] = React.useState<Position.Placement>('bottom');
+  const [position, setPosition] = React.useState<{ top: number; left: number }>({ top: 0, left: 0 });
+
+  const triggerRef = React.useRef<HTMLElement>(null);
+  const elementRef = React.useRef<HTMLDivElement>(null);
+
+  const onClick = React.useCallback((event: React.MouseEvent) => {
+    event.preventDefault();
+    setOpen(true);
+  }, []);
+
+  const onOutsideEvent = React.useCallback(() => setOpen(false), []);
+  const onClose = React.useCallback(() => setWillClose(true), []);
+
+  if (hotkey) {
+    useHotkeys(hotkey, () => {
+      setOpen(!open);
+    });
+  }
+
+  React.useEffect(() => {
+    if (focusChildren) {
+      const element = elementRef.current;
+      if (element) {
+        const firstFocusable = Utilities.findFocusableDescendant(element);
+        if (firstFocusable) {
+          firstFocusable.focus();
+        } else {
+          element.focus();
+        }
+      }
+      setFocusChildren(false);
+    }
+  }, [focusChildren]);
+
+  React.useEffect(() => {
+    if (willClose) {
+      setOpen(false);
+      setWillClose(false);
+    }
+  }, [willClose]);
+
+  React.useEffect(() => {
+    if (!open || !triggerRef.current || !elementRef.current) return;
+
+    const updatePosition = () => {
+      const { placement, position } = Position.calculate(triggerRef.current!, elementRef.current!);
+      setPlacement(placement);
+      setPosition(position);
+    };
+
+    updatePosition();
+    setFocusChildren(true);
+
+    const handleResizeOrScroll = () => updatePosition();
+    const observer = new MutationObserver(() => updatePosition());
+    observer.observe(document.body, { attributes: true, childList: true, subtree: true });
+
+    window.addEventListener('resize', handleResizeOrScroll);
+    window.addEventListener('scroll', handleResizeOrScroll, true);
+
+    return () => {
+      window.removeEventListener('resize', handleResizeOrScroll);
+      window.removeEventListener('scroll', handleResizeOrScroll, true);
+      observer.disconnect();
+    };
+  }, [open]);
+
+  const element = open
+    ? createPortal(
+        <OutsideElementEvent onOutsideEvent={onOutsideEvent}>
+          <DropdownMenu
+            onClose={onClose}
+            ref={elementRef}
+            items={items}
+            style={{
+              position: 'absolute',
+              top: `${position.top}px`,
+              left: `${position.left}px`,
+              zIndex: `var(--z-index-page-dropdown-menus)`,
+            }}
+            role="dialog"
+            aria-modal="true"
+          />
+        </OutsideElementEvent>,
+        document.body
+      )
+    : null;
+
+  return (
+    <div className={styles.root}>
+      {React.cloneElement(children, {
+        tabIndex: 0,
+        onClick,
+        // @ts-ignore
+        ref: triggerRef,
+      })}
+      {element}
+    </div>
+  );
+}
+
+export default DropdownMenuTrigger;
+
+================
+File: reference/components/Grid.module.scss
+================
+.grid {
+  display: block;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+}
+
+================
+File: reference/components/Grid.tsx
+================
+import styles from '@components/Grid.module.scss';
+
+import * as React from 'react';
+
+interface GridProps extends React.HTMLAttributes<HTMLDivElement> {
+  children?: React.ReactNode;
+}
+
+const Grid: React.FC<GridProps> = ({ children, ...rest }) => {
+  return (
+    <div className={styles.grid} {...rest}>
+      {children}
+    </div>
+  );
+};
+
+export default Grid;
+
+================
+File: reference/components/HoverComponentTrigger.module.scss
+================
+.root {
+  display: inline-block;
+  position: relative;
+}
+
+================
+File: reference/components/HoverComponentTrigger.tsx
+================
+'use client';
+
+import styles from '@components/HoverComponentTrigger.module.scss';
+
+import * as React from 'react';
+import * as Position from '@common/position';
+
+import OutsideElementEvent from '@components/detectors/OutsideElementEvent';
+import Popover from '@components/Popover';
+import Tooltip from '@components/Tooltip';
+
+import { createPortal } from 'react-dom';
+
+interface HoverComponentTriggerProps {
+  children: React.ReactElement<React.HTMLAttributes<HTMLElement>>;
+  text: string;
+  component: 'popover' | 'tooltip';
+}
+
+function HoverComponentTrigger({ children, text, component }: HoverComponentTriggerProps) {
+  const [open, setOpen] = React.useState(false);
+  const [placement, setPlacement] = React.useState<Position.Placement>('bottom');
+  const [position, setPosition] = React.useState<{ top: number; left: number }>({ top: 0, left: 0 });
+
+  const triggerRef = React.useRef<HTMLDivElement>(null);
+  const popoverRef = React.useRef<HTMLDivElement>(null);
+
+  const onMouseEnter = () => setOpen(true);
+  const onClick = () => setOpen(true);
+  const onHandleFocus = () => setOpen(true);
+  const onOutsideEvent = () => setOpen(false);
+
+  React.useEffect(() => {
+    if (!open || !triggerRef.current || !popoverRef.current) return;
+
+    const updatePosition = () => {
+      const { placement, position } = Position.calculate(triggerRef.current!, popoverRef.current!);
+      setPlacement(placement);
+      setPosition(position);
+    };
+
+    updatePosition();
+
+    const handleResizeOrScroll = () => updatePosition();
+
+    const mutationObserver = new MutationObserver(() => updatePosition());
+    mutationObserver.observe(document.body, { attributes: true, childList: true, subtree: true });
+
+    window.addEventListener('resize', handleResizeOrScroll);
+    window.addEventListener('scroll', handleResizeOrScroll, true);
+
+    return () => {
+      window.removeEventListener('resize', handleResizeOrScroll);
+      window.removeEventListener('scroll', handleResizeOrScroll, true);
+      mutationObserver.disconnect();
+    };
+  }, [open]);
+
+  const renderComponent = () => {
+    if (component === 'popover') {
+      return (
+        <Popover
+          ref={popoverRef}
+          style={{
+            position: 'absolute',
+            top: `${position.top}px`,
+            left: `${position.left}px`,
+            zIndex: `var(--z-index-page-popover)`,
+          }}
+          role="dialog"
+          aria-modal="true"
+        >
+          {text}
+        </Popover>
+      );
+    } else if (component === 'tooltip') {
+      return (
+        <Tooltip
+          ref={popoverRef}
+          style={{
+            position: 'absolute',
+            top: `${position.top}px`,
+            left: `${position.left}px`,
+            zIndex: `var(--z-index-page-tooltip)`,
+          }}
+        >
+          {text}
+        </Tooltip>
+      );
+    }
+    return null;
+  };
+
+  const popoverElement = open ? createPortal(<OutsideElementEvent onOutsideEvent={onOutsideEvent}>{renderComponent()}</OutsideElementEvent>, document.body) : null;
+
+  return (
+    <div ref={triggerRef} className={styles.root} data-detector-ignore onMouseEnter={onMouseEnter} onClick={onClick} onFocus={onHandleFocus}>
+      {React.cloneElement(children, {
+        tabIndex: 0,
+      })}
+      {popoverElement}
+    </div>
+  );
+}
+
+export default HoverComponentTrigger;
+
+================
+File: reference/components/Indent.module.scss
+================
+.root {
+  display: block;
+  padding: 0 0 0 1ch;
+}
+
+================
+File: reference/components/Indent.tsx
+================
+import styles from '@components/Indent.module.scss';
+
+import * as React from 'react';
+
+interface IndentProps extends React.HTMLAttributes<HTMLDivElement> {
+  children?: React.ReactNode;
+}
+
+const Indent: React.FC<IndentProps> = ({ children, ...rest }) => {
+  return (
+    <div className={styles.root} {...rest}>
+      {children}
+    </div>
+  );
+};
+
+export default Indent;
+
+================
+File: reference/components/Input.module.scss
+================
+.root {
+  position: relative;
+  display: block;
+}
+
+.label {
+  background: var(--theme-border);
+  display: block;
+}
+
+.placeholder {
+  font-style: italic;
+  color: var(--theme-overlay);
+}
+
+.displayed {
+  overflow: hidden;
+  white-space: nowrap;
+  pointer-events: none;
+  overflow-wrap: anywhere;
+  background: var(--theme-background-input);
+  box-shadow: inset 0 0 0 2px var(--theme-border);
+}
+
+.focused {
+  .block {
+    background: var(--theme-focused-foreground);
+  }
+
+  .placeholder {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+@keyframes blink {
+  50% {
+    opacity: 0;
+  }
+}
+
+.blink {
+  animation: blink 1s step-start 0s infinite;
+}
+
+.block {
+  display: inline-block;
+  min-width: 1ch;
+  background: var(--theme-text);
+  color: var(--theme-background);
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  vertical-align: bottom;
+}
+
+.inputContainer {
+  position: relative;
+  display: block;
+}
+
+.hidden {
+  position: absolute;
+  top: 0;
+  left: 0;
+  width: 100%;
+  color: transparent;
+  background: transparent;
+  caret-color: transparent;
+  border: none;
+  outline: none;
+  overflow: hidden;
+  padding: 0;
+  margin: 0;
+  line-height: var(--theme-line-height-base);
+  font-size: var(--font-size);
+  font-family: inherit;
+
+  &:-webkit-autofill {
+    -webkit-box-shadow: 0 0 0px 1000px var(--theme-focused-foreground) inset;
+  }
+}
+
+================
+File: reference/components/Input.tsx
+================
+'use client';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import styles from '@components/Input.module.scss';
+
+type InputProps = React.InputHTMLAttributes<HTMLInputElement> & {
+  caretChars?: string | any;
+  label?: string | any;
+  isBlink?: boolean;
+};
+
+function Input({ caretChars, isBlink = true, label, placeholder, onChange, type, id, ...rest }: InputProps) {
+  const generatedId = React.useId();
+  const inputId = id || generatedId;
+
+  const inputRef = React.useRef<HTMLInputElement | null>(null);
+  const [text, setText] = React.useState<string>(rest.defaultValue?.toString() || rest.value?.toString() || '');
+  const [isFocused, setIsFocused] = React.useState<boolean>(false);
+  const [selectionStart, setSelectionStart] = React.useState<number>(text.length);
+
+  const lastFocusDirectionRef = React.useRef<'up' | 'down' | null>(null);
+
+  React.useEffect(() => {
+    if (rest.value !== undefined) {
+      const val = rest.value.toString();
+      setText(val);
+      setSelectionStart(val.length);
+    }
+  }, [rest.value]);
+
+  const onHandleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
+    const value = e.target.value;
+    setText(value);
+    if (onChange) {
+      onChange(e);
+    }
+    setSelectionStart(e.target.selectionStart ?? value.length);
+  };
+
+  const onHandleFocus = () => {
+    setIsFocused(true);
+    if (!inputRef.current) return;
+
+    if (lastFocusDirectionRef.current === 'down') {
+      setSelectionStart(text.length);
+      inputRef.current.setSelectionRange(text.length, text.length);
+    } else if (lastFocusDirectionRef.current === 'up') {
+      setSelectionStart(0);
+      inputRef.current.setSelectionRange(0, 0);
+    }
+  };
+
+  const onHandleBlur = () => {
+    setIsFocused(false);
+  };
+
+  const onHandleSelect = (e: React.SyntheticEvent<HTMLInputElement>) => {
+    const inputEl = e.currentTarget as HTMLInputElement;
+    setSelectionStart(inputEl.selectionStart ?? text.length);
+  };
+
+  const onHandleClick = (e: React.MouseEvent<HTMLInputElement>) => {
+    const inputEl = e.currentTarget as HTMLInputElement;
+    inputEl.focus();
+    setSelectionStart(inputEl.selectionStart ?? text.length);
+  };
+
+  const onHandleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
+    if (e.key === 'ArrowUp') {
+      e.preventDefault();
+      lastFocusDirectionRef.current = 'up';
+      const previousFocusable = Utilities.findNextFocusable(document.activeElement, 'previous');
+      previousFocusable?.focus();
+    } else if (e.key === 'ArrowDown') {
+      e.preventDefault();
+      lastFocusDirectionRef.current = 'down';
+      const nextFocusable = Utilities.findNextFocusable(document.activeElement, 'next');
+      nextFocusable?.focus();
+    }
+  };
+
+  const isPlaceholderVisible = !text && placeholder;
+  const containerClasses = Utilities.classNames(styles.root, isFocused && styles.focused);
+
+  const maskText = (t: string) => (type === 'password' ? '•'.repeat(t.length) : t);
+
+  const beforeCaretText = isPlaceholderVisible ? placeholder ?? '' : maskText(text.substring(0, selectionStart));
+  const afterCaretText = isPlaceholderVisible ? '' : maskText(text.substring(selectionStart));
+
+  return (
+    <div className={containerClasses}>
+      {label && (
+        <label htmlFor={inputId} className={styles.label}>
+          {label}
+        </label>
+      )}
+      <div className={styles.inputContainer}>
+        <div className={Utilities.classNames(styles.displayed, isPlaceholderVisible && styles.placeholder)}>
+          {beforeCaretText}
+          {!isPlaceholderVisible && <span className={Utilities.classNames(styles.block, isBlink && styles.blink)}>{caretChars || ''}</span>}
+          {!isPlaceholderVisible && afterCaretText}
+        </div>
+        <input id={inputId} ref={inputRef} className={styles.hidden} value={text} aria-placeholder={placeholder} type={type} onFocus={onHandleFocus} onBlur={onHandleBlur} onChange={onHandleChange} onSelect={onHandleSelect} onClick={onHandleClick} onKeyDown={onHandleKeyDown} {...rest} />
+      </div>
+    </div>
+  );
+}
+
+export default Input;
+
+================
+File: reference/components/ListItem.module.scss
+================
+.root {
+  padding-left: 1ch;
+
+  &:focus {
+    outline: 0;
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/ListItem.tsx
+================
+'use client';
+
+import styles from '@components/ListItem.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+const ListItem = ({ children }) => {
+  const itemRef = React.useRef<HTMLLIElement>(null);
+
+  const handleKeyDown = (event: React.KeyboardEvent<HTMLLIElement>) => {
+    switch (event.key) {
+      case 'Enter':
+        event.preventDefault();
+        itemRef.current?.click();
+        break;
+      case 'ArrowUp':
+      case 'ArrowLeft': {
+        event.preventDefault();
+        const previousFocusable = Utilities.findNextFocusable(document.activeElement, 'previous');
+        previousFocusable?.focus();
+        break;
+      }
+      case 'ArrowDown':
+      case 'ArrowRight': {
+        event.preventDefault();
+        const nextFocusable = Utilities.findNextFocusable(document.activeElement, 'next');
+        nextFocusable?.focus();
+        break;
+      }
+      default:
+        break;
+    }
+  };
+
+  return (
+    <li className={styles.root} tabIndex={0} ref={itemRef} onKeyDown={handleKeyDown}>
+      {children}
+    </li>
+  );
+};
+
+export default ListItem;
+
+================
+File: reference/components/MatrixLoader.module.scss
+================
+.container {
+  width: 100%;
+  height: auto;
+  position: relative;
+}
+
+.root {
+  display: block;
+  width: 100%;
+  background: transparent;
+}
+
+================
+File: reference/components/MatrixLoader.tsx
+================
+'use client';
+
+import styles from '@components/MatrixLoader.module.scss';
+
+import * as React from 'react';
+
+interface MatrixLoaderProps {
+  rows?: number;
+  direction?: undefined | 'top-to-bottom' | 'left-to-right';
+  mode?: undefined | 'greek' | 'katakana';
+}
+
+// TODO(jimmylee)
+// Move these constants into a separate file
+// Dynamically compute these constants since we're going to
+// Support t-shirt sizes for the system.
+const LINE_HEIGHT = 20;
+const CHARACTER_WIDTH = 9.6;
+
+function onTextGeneration({ mode = 'greek' }) {
+  if (mode === 'greek') {
+    const isUppercase = Math.random() < 0.5;
+
+    return String.fromCharCode(isUppercase ? 0x0391 + Math.floor(Math.random() * (0x03a9 - 0x0391 + 1)) : 0x03b1 + Math.floor(Math.random() * (0x03c9 - 0x03b1 + 1)));
+  }
+
+  if (mode === 'katakana') {
+    const japaneseRanges = [{ start: 0x30a0, end: 0x30ff }];
+
+    const allJapaneseCharacters = japaneseRanges.flatMap((range) => Array.from({ length: range.end - range.start + 1 }, (_, i) => range.start + i));
+
+    const randomJapaneseCharacter = allJapaneseCharacters[Math.floor(Math.random() * allJapaneseCharacters.length)];
+    return String.fromCharCode(randomJapaneseCharacter);
+  }
+
+  return '0';
+}
+
+const MatrixLoader: React.FC<MatrixLoaderProps> = ({ rows = 25, direction = 'top-to-bottom', mode = 'greek' }) => {
+  const canvasRef = React.useRef<HTMLCanvasElement>(null);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const parent = canvas.parentElement;
+    if (!parent) return;
+
+    const resizeCanvas = () => {
+      const parentWidth = parent.clientWidth;
+      const parentHeight = rows * LINE_HEIGHT;
+
+      const dpr = window.devicePixelRatio || 1;
+
+      canvas.style.width = parentWidth + 'px';
+      canvas.style.height = parentHeight + 'px';
+      canvas.width = Math.floor(parentWidth * dpr);
+      canvas.height = Math.floor(parentHeight * dpr);
+
+      const ctx = canvas.getContext('2d');
+      if (ctx) {
+        ctx.scale(dpr, dpr);
+      }
+    };
+
+    resizeCanvas();
+
+    window.addEventListener('resize', resizeCanvas);
+
+    return () => {
+      window.removeEventListener('resize', resizeCanvas);
+    };
+  }, [rows]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+    const ctx = canvas.getContext('2d');
+    if (!ctx) return;
+
+    let interval: number;
+
+    const drawMatrix = () => {
+      const w = canvas.width;
+      const h = canvas.height;
+
+      if (direction === 'top-to-bottom') {
+        const cols = Math.floor(w / CHARACTER_WIDTH);
+        const ypos: number[] = Array(cols).fill(0);
+
+        const matrix = () => {
+          const themeTextColor = getComputedStyle(document.body).getPropertyValue('--theme-text').trim();
+          const fontFamily = getComputedStyle(document.body).getPropertyValue('--font-family-mono').trim();
+
+          ctx.globalCompositeOperation = 'destination-out';
+          ctx.fillStyle = 'rgba(255, 255, 255, 0.05)';
+          ctx.fillRect(0, 0, w, h);
+          ctx.textBaseline = 'top';
+          ctx.font = `16px ${fontFamily}`;
+
+          ctx.globalCompositeOperation = 'source-over';
+
+          ypos.forEach((y, ind) => {
+            const text = onTextGeneration({ mode });
+            const x = ind * CHARACTER_WIDTH;
+
+            ctx.fillStyle = themeTextColor;
+            ctx.fillText(text, x, y);
+
+            if (y > h + Math.random() * 10000) {
+              ypos[ind] = 0;
+            } else {
+              ypos[ind] = y + LINE_HEIGHT;
+            }
+          });
+        };
+
+        interval = window.setInterval(matrix, 50);
+      } else if (direction === 'left-to-right') {
+        const totalRows = rows; // Use rows directly for total rows
+        const xpos: number[] = Array(totalRows).fill(0);
+
+        const matrix = () => {
+          const themeTextColor = getComputedStyle(document.body).getPropertyValue('--theme-text').trim();
+          const fontFamily = getComputedStyle(document.body).getPropertyValue('--font-family-mono').trim();
+
+          ctx.globalCompositeOperation = 'destination-out';
+          ctx.fillStyle = 'rgba(255, 255, 255, 0.05)';
+          ctx.fillRect(0, 0, w, h);
+          ctx.textBaseline = 'top';
+          ctx.font = `16px ${fontFamily}`;
+
+          ctx.globalCompositeOperation = 'source-over';
+
+          xpos.forEach((x, ind) => {
+            const text = onTextGeneration({ mode });
+            const y = ind * LINE_HEIGHT;
+
+            ctx.fillStyle = themeTextColor;
+            ctx.fillText(text, x, y);
+
+            if (x > w + Math.random() * 10000) {
+              xpos[ind] = 0;
+            } else {
+              xpos[ind] = x + CHARACTER_WIDTH;
+            }
+          });
+        };
+
+        interval = window.setInterval(matrix, 50);
+      }
+    };
+
+    drawMatrix();
+
+    return () => {
+      window.clearInterval(interval);
+    };
+  }, [rows, direction, mode]);
+
+  return (
+    <div className={styles.container}>
+      <canvas className={styles.root} ref={canvasRef} />
+    </div>
+  );
+};
+
+export default MatrixLoader;
+
+================
+File: reference/components/Message.module.scss
+================
+.message {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+  margin-bottom: calc(var(--font-size) * var(--theme-line-height-base));
+
+  &:last-child {
+    margin-bottom: 0px;
+  }
+}
+
+.left {
+  align-self: stretch;
+  flex-shrink: 0;
+  display: flex;
+  align-items: flex-end;
+  position: relative;
+}
+
+.triangle {
+  display: inline-block;
+  width: 0;
+  height: 0;
+  border-top: calc((var(--font-size) * var(--theme-line-height-base)) / 2) solid transparent;
+  border-bottom: calc((var(--font-size) * var(--theme-line-height-base)) / 2) solid transparent;
+  border-right: 1ch solid var(--theme-border);
+  margin-bottom: calc((var(--font-size) * var(--theme-line-height-base)) / 2);
+}
+
+.right {
+  min-width: 10%;
+  width: 100%;
+  text-align: left;
+}
+
+.bubble {
+  padding: calc(8px * var(--theme-line-height-base)) 1ch calc(8px * var(--theme-line-height-base)) 1ch;
+  background: var(--theme-border);
+  display: inline-block;
+  box-shadow: 1ch 1ch 0 0 var(--theme-border-subdued);
+}
+
+================
+File: reference/components/Message.tsx
+================
+import styles from '@components/Message.module.scss';
+
+export default function Message(props) {
+  return (
+    <div className={styles.message}>
+      <div className={styles.left}>
+        <figure className={styles.triangle} />
+      </div>
+      <div className={styles.right}>
+        <div className={styles.bubble}>{props.children}</div>
+      </div>
+    </div>
+  );
+}
+
+================
+File: reference/components/MessageViewer.module.scss
+================
+.message {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+  margin-bottom: calc(var(--font-size) * var(--theme-line-height-base));
+}
+
+.bubble {
+  display: inline-block;
+  background: var(--theme-focused-foreground);
+  padding: calc(8px * var(--theme-line-height-base)) 1ch calc(8px * var(--theme-line-height-base)) 1ch;
+}
+
+.left {
+  min-width: 10%;
+  width: 100%;
+  text-align: right;
+}
+
+.right {
+  align-self: stretch;
+  flex-shrink: 0;
+  display: flex;
+  align-items: flex-end;
+}
+
+.triangle {
+  display: inline-block;
+  width: 0;
+  height: 0;
+  border-top: calc((var(--font-size) * var(--theme-line-height-base)) / 2) solid transparent;
+  border-bottom: calc((var(--font-size) * var(--theme-line-height-base)) / 2) solid transparent;
+  border-left: 1ch solid var(--theme-focused-foreground);
+  margin-bottom: calc((var(--font-size) * var(--theme-line-height-base)) / 2);
+}
+
+================
+File: reference/components/MessageViewer.tsx
+================
+import styles from '@components/MessageViewer.module.scss';
+
+export default function MessageViewer(props) {
+  return (
+    <div className={styles.message}>
+      <div className={styles.left}>
+        <div className={styles.bubble}>{props.children}</div>
+      </div>
+      <div className={styles.right}>
+        <figure className={styles.triangle} />
+      </div>
+    </div>
+  );
+}
+
+================
+File: reference/components/ModalStack.module.scss
+================
+.root {
+  align-items: center;
+  bottom: 0;
+  display: flex;
+  justify-content: center;
+  left: 0;
+  pointer-events: none;
+  position: fixed;
+  right: 0;
+  top: 0;
+  z-index: var(--z-index-page-modals);
+}
+
+.item {
+  pointer-events: auto;
+  position: absolute;
+  transition:
+    opacity 0.2s ease,
+    transform 0.4s ease;
+}
+
+================
+File: reference/components/ModalStack.tsx
+================
+'use client';
+
+import styles from '@components/ModalStack.module.scss';
+
+import * as React from 'react';
+
+import { useModals } from '@components/page/ModalContext';
+
+interface ModalStackProps {}
+
+const ModalStack: React.FC<ModalStackProps> = () => {
+  const { modalStack } = useModals();
+
+  const totalModals = modalStack.length;
+
+  return (
+    <div className={styles.root}>
+      {modalStack.map((modalState, index) => {
+        const { key, component: ModalComponent, props } = modalState;
+
+        const offsetFromLast = totalModals - 1 - index;
+        const translateY = -offsetFromLast * 40;
+        const blur = offsetFromLast * 1.1;
+
+        return (
+          <div
+            key={key}
+            className={styles.item}
+            style={{
+              zIndex: 10 + index,
+              transform: `translateY(${translateY}px)`,
+              filter: `blur(${blur}px)`,
+            }}
+          >
+            <ModalComponent {...props} />
+          </div>
+        );
+      })}
+    </div>
+  );
+};
+
+export default ModalStack;
+
+================
+File: reference/components/ModalTrigger.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+import { useModals } from '@components/page/ModalContext';
+
+interface ModalTriggerProps {
+  children: React.ReactElement<{ onClick?: React.MouseEventHandler }>;
+  modal: React.ComponentType<any>;
+  modalProps?: Record<string, any>;
+}
+
+function ModalTrigger({ children, modal, modalProps = {} }: ModalTriggerProps) {
+  const { open } = useModals();
+
+  const onHandleOpenModal = () => {
+    open(modal, modalProps);
+  };
+
+  return React.cloneElement(children, {
+    onClick: onHandleOpenModal,
+  });
+}
+
+export default ModalTrigger;
+
+================
+File: reference/components/Navigation.module.scss
+================
+.root {
+  display: flex;
+  align-items: center;
+  justify-content: space-between;
+  background: var(--theme-border);
+}
+
+.logo {
+  flex-shrink: 0;
+  padding: 0 1ch 0 1ch;
+  display: inline-flex;
+  color: var(--theme-text);
+  background: var(--theme-border);
+  text-decoration: none;
+  border: 0;
+  outline: 0;
+  border-radius: 0;
+  margin: 0;
+  font-size: var(--font-size);
+
+  &:visited {
+    color: var(--theme-text);
+  }
+
+  &:hover {
+    color: var(--theme-text);
+    background: var(--theme-focused-foreground);
+  }
+
+  &:focus {
+    outline: 0;
+    border: 0;
+    margin: 0;
+    padding: 0 1ch 0 1ch;
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.left {
+  flex-shrink: 0;
+}
+
+.children {
+  min-width: 10%;
+  width: 100%;
+}
+
+.right {
+  flex-shrink: 0;
+}
+
+================
+File: reference/components/Navigation.tsx
+================
+'use client';
+
+import styles from '@components/Navigation.module.scss';
+
+import * as React from 'react';
+
+interface NavigationProps extends React.HTMLAttributes<HTMLElement> {
+  children?: React.ReactNode;
+  logoHref?: string;
+  logoTarget?: React.HTMLAttributeAnchorTarget;
+  onClickLogo?: React.MouseEventHandler<HTMLButtonElement>;
+  logo?: React.ReactNode;
+  left?: React.ReactNode;
+  right?: React.ReactNode;
+}
+
+const Navigation: React.FC<NavigationProps> = ({ children, logoHref, logoTarget, onClickLogo, logo, left, right }) => {
+  let logoElement = <button className={styles.logo}>{logo}</button>;
+
+  if (onClickLogo) {
+    logoElement = (
+      <button className={styles.logo} onClick={onClickLogo}>
+        {logo}
+      </button>
+    );
+  }
+
+  if (logoHref) {
+    logoElement = (
+      <a href={logoHref} className={styles.logo} target={logoTarget}>
+        {logo}
+      </a>
+    );
+  }
+
+  return (
+    <nav className={styles.root}>
+      {logoElement}
+      <section className={styles.left}>{left}</section>
+      <section className={styles.children}>{children}</section>
+      <section className={styles.right}>{right}</section>
+    </nav>
+  );
+};
+
+export default Navigation;
+
+================
+File: reference/components/NumberRangeSlider.module.scss
+================
+.root {
+  display: flex;
+  align-items: center;
+  justify-content: space-between;
+}
+
+.amount {
+  flex-shrink: 0;
+  background: var(--theme-text);
+  color: var(--theme-background);
+  font-weight: 400;
+  padding: 0 1ch 0 1ch;
+}
+
+.slider {
+  border-radius: 0;
+  display: block;
+  margin: 0;
+  padding: 0;
+  width: 100%;
+  min-width: 10%;
+
+  -webkit-appearance: none;
+  -moz-appearance: none;
+  appearance: none;
+
+  background: var(--theme-border-subdued);
+
+  &:focus {
+    background: linear-gradient(to right, transparent, var(--theme-focused-foreground));
+    outline: none;
+  }
+
+  &:hover {
+    background: linear-gradient(to right, transparent, var(--theme-focused-foreground));
+    cursor: pointer;
+  }
+
+  &::-webkit-slider-thumb {
+    -webkit-appearance: none;
+    appearance: none;
+    font-size: var(--font-size);
+    width: 1ch;
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: var(--theme-button-foreground);
+    vertical-align: bottom;
+    cursor: pointer;
+    border-radius: 0;
+  }
+
+  /* Customizing the track */
+  &::-webkit-slider-runnable-track {
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: var(--theme-border-subdued);
+    border-radius: 0;
+  }
+
+  &::-moz-range-thumb {
+    -moz-appearance: none;
+    appearance: none;
+    font-size: var(--font-size);
+    width: 1ch;
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: var(--theme-button-foreground);
+    vertical-align: bottom;
+    cursor: pointer;
+    border: none;
+    border-radius: 0;
+  }
+
+  &::-moz-range-track {
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: var(--theme-border-subdued);
+    border-radius: 0;
+  }
+
+  &::-ms-thumb {
+    appearance: none;
+    font-size: var(--font-size);
+    width: 1ch;
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: var(--theme-button-foreground);
+    vertical-align: bottom;
+    cursor: pointer;
+    border: none;
+    border-radius: 0;
+  }
+
+  &::-ms-track {
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: transparent;
+    border-color: transparent;
+    color: transparent;
+  }
+
+  &::-ms-fill-lower {
+    background: var(--theme-border-subdued);
+  }
+
+  &::-ms-fill-upper {
+    background: var(--theme-border-subdued);
+  }
+}
+
+================
+File: reference/components/NumberRangeSlider.tsx
+================
+'use client';
+
+import styles from '@components/NumberRangeSlider.module.scss';
+
+import * as React from 'react';
+
+interface RangerProps {
+  defaultValue?: number;
+  max?: number;
+  min?: number;
+  step?: number;
+}
+
+const NumberRangeSlider: React.FC<RangerProps> = ({ defaultValue = 0, max = 5000, min = 0, step = 1 }) => {
+  const sliderRef = React.useRef<HTMLInputElement>(null);
+  const [displayValue, setDisplayValue] = React.useState<number>(defaultValue);
+
+  const maxDigits = max.toString().length;
+
+  const padValue = (value: number): string => {
+    return value.toString().padStart(maxDigits, '0');
+  };
+
+  React.useEffect(() => {
+    if (sliderRef.current) {
+      sliderRef.current.value = String(defaultValue);
+    }
+    setDisplayValue(defaultValue);
+  }, [defaultValue]);
+
+  const scrub = (event: React.ChangeEvent<HTMLInputElement>): void => {
+    const value = parseInt(event.target.value, 10);
+    setDisplayValue(value);
+  };
+
+  return (
+    <div className={styles.root}>
+      <label className={styles.left}>
+        <div className={styles.amount}>{padValue(displayValue)}</div>
+      </label>
+      <input className={styles.slider} defaultValue={defaultValue} max={max} min={min} onChange={scrub} ref={sliderRef} role="slider" step={step} tabIndex={0} type="range" />
+    </div>
+  );
+};
+
+export default NumberRangeSlider;
+
+================
+File: reference/components/Popover.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  font-weight: 400;
+}
+
+================
+File: reference/components/Popover.tsx
+================
+import styles from '@components/Popover.module.scss';
+
+import * as React from 'react';
+
+interface PopoverProps extends React.HTMLAttributes<HTMLDivElement> {}
+
+const Popover = React.forwardRef<HTMLDivElement, PopoverProps>(({ style: propStyle, ...rest }, ref) => {
+  const style: React.CSSProperties = { ...propStyle };
+
+  return <div ref={ref} className={styles.root} {...rest} style={style} />;
+});
+
+Popover.displayName = 'Popover';
+
+export default Popover;
+
+================
+File: reference/components/Providers.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+import { ModalProvider } from '@components/page/ModalContext';
+
+interface ProvidersProps {
+  children: React.ReactNode;
+}
+
+const Providers: React.FC<ProvidersProps> = ({ children }) => {
+  return <ModalProvider>{children}</ModalProvider>;
+};
+
+export default Providers;
+
+================
+File: reference/components/RadioButton.module.scss
+================
+.section {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+  position: relative;
+
+  .right {
+    padding-bottom: calc(8px * var(--theme-line-height-base));
+    box-shadow: inset 0 1px 0 0 var(--theme-border-subdued);
+  }
+
+  &:last-child {
+    .right {
+      padding-bottom: 0;
+    }
+  }
+}
+
+.figure {
+  display: inline-flex;
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  cursor: pointer;
+  color: var(--theme-text);
+  background: var(--theme-button-foreground);
+  width: 3ch;
+  align-items: center;
+  justify-content: center;
+}
+
+.selected {
+  .figure {
+    background: var(--theme-text);
+  }
+}
+
+.dot {
+  display: inline-block;
+  width: 1ch;
+  height: 1ch;
+  background: var(--theme-background);
+  transform: rotate(45deg);
+  vertical-align: middle;
+}
+
+.focused {
+  .figure {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.relative {
+  flex-shrink: 0;
+  display: inline-block;
+  vertical-align: baseline;
+}
+
+.right {
+  background: var(--theme-button-background);
+  min-width: 10%;
+  width: 100%;
+  align-self: stretch;
+}
+
+.input {
+  position: absolute;
+  height: 1px;
+  width: 1px;
+  opacity: 0;
+  background: transparent;
+  border: 0;
+  outline: 0;
+  margin: 0;
+  padding: 0;
+}
+
+================
+File: reference/components/RadioButton.tsx
+================
+import styles from '@components/RadioButton.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface RadioButtonProps {
+  style?: React.CSSProperties;
+  name: string;
+  value: string;
+  selected?: boolean;
+  onSelect?: (value: string) => void;
+  children?: React.ReactNode;
+}
+
+const RadioButton: React.FC<RadioButtonProps> = ({ style, name, value, selected = false, onSelect, children }) => {
+  const radioId = `${name}-${value}-radio`;
+  const [isFocused, setIsFocused] = React.useState(false);
+
+  const handleFocus = () => setIsFocused(true);
+  const handleBlur = () => setIsFocused(false);
+
+  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
+    switch (event.key) {
+      case 'Enter':
+        event.preventDefault();
+        onSelect?.(value);
+        break;
+      case 'ArrowUp':
+      case 'ArrowLeft':
+        event.preventDefault();
+        Utilities.findNextFocusable(document.activeElement, 'previous')?.focus();
+        break;
+      case 'Tab':
+      case 'ArrowDown':
+      case 'ArrowRight':
+        event.preventDefault();
+        Utilities.findNextFocusable(document.activeElement, 'next')?.focus();
+        break;
+      default:
+        break;
+    }
+  };
+
+  const handleChange = () => {
+    onSelect?.(value);
+  };
+
+  return (
+    <div
+      className={Utilities.classNames(styles.section, {
+        [styles.focused]: isFocused,
+        [styles.selected]: selected,
+      })}
+      style={style}
+    >
+      <input className={styles.input} id={radioId} type="radio" name={name} value={value} checked={selected} onFocus={handleFocus} onBlur={handleBlur} onKeyDown={handleKeyDown} onChange={handleChange} />
+      <div className={styles.relative}>
+        <label className={styles.figure} htmlFor={radioId}>
+          {selected ? <span aria-hidden="true" className={styles.dot} /> : null}
+        </label>
+      </div>
+      <div className={styles.right}>&nbsp;&nbsp;{children}</div>
+    </div>
+  );
+};
+
+export default RadioButton;
+
+================
+File: reference/components/RadioButtonGroup.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+import RadioButton from '@components/RadioButton';
+
+interface RadioButtonGroupProps {
+  options: { value: string; label: string }[];
+  defaultValue?: string;
+}
+
+const RadioButtonGroup: React.FC<RadioButtonGroupProps> = ({ options, defaultValue = '' }) => {
+  const [selectedValue, setSelectedValue] = React.useState<string>(defaultValue);
+
+  const handleSelect = (value: string) => {
+    setSelectedValue(value);
+  };
+
+  return (
+    <>
+      {options.map((option) => (
+        <RadioButton key={option.value} name="example" value={option.value} selected={selectedValue === option.value} onSelect={handleSelect}>
+          {option.label}
+        </RadioButton>
+      ))}
+    </>
+  );
+};
+
+export default RadioButtonGroup;
+
+================
+File: reference/components/Row.module.scss
+================
+.row {
+  display: block;
+  outline: 0;
+  border: 0;
+  transition: 200ms ease background;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/Row.tsx
+================
+'use client';
+
+import styles from '@components/Row.module.scss';
+
+import * as React from 'react';
+
+type RowProps = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const Row = React.forwardRef<HTMLElement, RowProps>(({ children, ...rest }, ref) => {
+  return (
+    <section className={styles.row} ref={ref} {...rest}>
+      {children}
+    </section>
+  );
+});
+
+Row.displayName = 'Row';
+
+export default Row;
+
+================
+File: reference/components/RowEllipsis.module.scss
+================
+.row {
+  display: block;
+  outline: 0;
+  border: 0;
+  transition: 200ms ease background;
+  white-space: nowrap;
+  overflow: hidden;
+  text-overflow: ellipsis;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/RowEllipsis.tsx
+================
+'use client';
+
+import styles from '@components/RowEllipsis.module.scss';
+
+import * as React from 'react';
+
+type RowEllipsisProps = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const RowEllipsis = React.forwardRef<HTMLElement, RowEllipsisProps>(({ children, ...rest }, ref) => {
+  return (
+    <section className={styles.row} ref={ref} {...rest}>
+      {children}
+    </section>
+  );
+});
+
+RowEllipsis.displayName = 'RowEllipsis';
+
+export default RowEllipsis;
+
+================
+File: reference/components/RowSpaceBetween.module.scss
+================
+.row {
+  display: flex;
+  justify-content: space-between;
+  outline: 0;
+  border: 0;
+  transition: 200ms ease background;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/RowSpaceBetween.tsx
+================
+'use client';
+
+import styles from '@components/RowSpaceBetween.module.scss';
+
+import * as React from 'react';
+
+type RowSpaceBetweenProps = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const RowSpaceBetween = React.forwardRef<HTMLElement, RowSpaceBetweenProps>(({ children, ...rest }, ref) => {
+  return (
+    <section className={styles.row} ref={ref} {...rest}>
+      {children}
+    </section>
+  );
+});
+
+RowSpaceBetween.displayName = 'RowSpaceBetween';
+
+export default RowSpaceBetween;
+
+================
+File: reference/components/Select.module.scss
+================
+.select {
+  align-items: flex-start;
+  cursor: default;
+  display: flex;
+  justify-content: space-between;
+  outline: none;
+  position: relative;
+  z-index: var(--z-index-page-select);
+}
+
+.control {
+  align-self: stretch;
+  background: var(--theme-button-foreground);
+  cursor: pointer;
+  flex-shrink: 0;
+  padding: 0 1ch 0 1ch;
+
+  &.focused {
+    background: var(--theme-text);
+    color: var(--theme-background);
+  }
+}
+
+.display {
+  background: var(--theme-border);
+  border: 0;
+  color: var(--theme-text);
+  cursor: pointer;
+  font-family: var(--font-family-mono);
+  font-size: var(--font-size);
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+  margin: 0;
+  min-width: 10%;
+  outline: 0;
+  padding: 0;
+  padding-left: 3ch;
+  text-align: left;
+  user-select: none;
+  width: 100%;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    border: 0;
+    outline: 0;
+  }
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.menu {
+  background-color: var(--theme-border-subdued);
+  left: 3ch;
+  list-style-type: none;
+  padding: 0;
+  right: 0;
+  z-index: var(--z-index-page-select);
+}
+
+.item {
+  border: 0;
+  cursor: pointer;
+  outline: 0;
+  padding-left: 6ch;
+  user-select: none;
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    border: 0;
+    outline: 0;
+  }
+}
+
+================
+File: reference/components/Select.tsx
+================
+'use client';
+
+import styles from '@components/Select.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface SelectProps {
+  name: string;
+  options: string[];
+  placeholder?: string;
+  defaultValue?: string;
+  onChange?: (selectedValue: string) => void;
+}
+
+const Select: React.FC<SelectProps> = ({ name, options, placeholder, defaultValue = '', onChange }) => {
+  const [isOpen, setIsOpen] = React.useState(false);
+  const [index, setIndex] = React.useState(-1);
+  const [selectedValue, setSelectedValue] = React.useState(defaultValue);
+
+  const containerRef = React.useRef<HTMLButtonElement | null>(null);
+
+  const handleOpen = () => {
+    setIsOpen(true);
+    const currentIndex = options.indexOf(selectedValue);
+    setIndex(currentIndex >= 0 ? currentIndex : 0);
+  };
+
+  const handleClose = () => {
+    setIsOpen(false);
+    setIndex(-1);
+
+    if (containerRef && containerRef.current) {
+      containerRef.current?.focus();
+    }
+  };
+
+  const handleSelect = (value: string) => {
+    setSelectedValue(value);
+    onChange?.(value);
+    handleClose();
+  };
+
+  return (
+    <>
+      <section className={styles.select}>
+        <figure
+          className={Utilities.classNames(isOpen ? styles.focused : null, styles.control)}
+          onClick={() => {
+            isOpen ? handleClose() : handleOpen();
+          }}
+        >
+          ▼
+        </figure>
+        <button
+          className={styles.display}
+          ref={containerRef}
+          tabIndex={0}
+          onClick={() => {
+            isOpen ? handleClose() : handleOpen();
+          }}
+          aria-haspopup="listbox"
+          aria-expanded={isOpen}
+        >
+          {selectedValue || placeholder}
+        </button>
+      </section>
+
+      {isOpen && (
+        <ul className={styles.menu} role="listbox">
+          {options.map((option, idx) => {
+            return (
+              <li key={option} role="option" tabIndex={0} className={Utilities.classNames(styles.item)} onClick={() => handleSelect(option)}>
+                {option}
+              </li>
+            );
+          })}
+        </ul>
+      )}
+    </>
+  );
+};
+
+export default Select;
+
+================
+File: reference/components/SidebarLayout.module.scss
+================
+.root {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+  white-space: pre-wrap;
+}
+
+.sidebar {
+  align-self: stretch;
+  flex-shrink: 0;
+  width: 20ch;
+}
+
+.handle {
+  align-self: stretch;
+  flex-shrink: 0;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  width: 3ch;
+  outline: 0;
+  border: 0;
+  cursor: col-resize;
+
+  &:hover {
+    .line {
+      background: var(--theme-focused-foreground);
+    }
+  }
+
+  &:focus {
+    outline: 0;
+    border: 0;
+
+    .line {
+      background: var(--theme-focused-foreground);
+    }
+  }
+}
+
+.line {
+  align-self: stretch;
+  width: 2px;
+  background: var(--theme-text);
+
+  &:first-child {
+    margin-left: 1px;
+    margin-right: 2px;
+  }
+}
+
+.content {
+  min-width: 10%;
+  width: 100%;
+}
+
+================
+File: reference/components/SidebarLayout.tsx
+================
+'use client';
+
+import styles from '@components/SidebarLayout.module.scss';
+import * as React from 'react';
+
+interface SidebarLayoutProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'defaultValue'> {
+  children?: React.ReactNode;
+  sidebar?: React.ReactNode;
+  defaultSidebarWidth?: number;
+  isShowingHandle?: boolean;
+  isReversed?: boolean;
+}
+
+const LINE_HEIGHT = 20;
+const CHARACTER_WIDTH = 9.6;
+
+const SidebarLayout: React.FC<SidebarLayoutProps> = ({ defaultSidebarWidth = 20, children, sidebar, isShowingHandle = false, isReversed = false, ...rest }) => {
+  const [sidebarWidth, setSidebarWidth] = React.useState(defaultSidebarWidth);
+  const handleRef = React.useRef<HTMLDivElement>(null);
+
+  const handleMouseDown = (event: React.MouseEvent<HTMLDivElement>) => {
+    const startX = event.clientX;
+    const startWidth = sidebarWidth;
+
+    const onMouseMove = (moveEvent: MouseEvent) => {
+      const deltaX = moveEvent.clientX - startX;
+      const increment = Math.round(deltaX / CHARACTER_WIDTH);
+      setSidebarWidth(Math.max(CHARACTER_WIDTH, startWidth + increment));
+    };
+
+    const onMouseUp = () => {
+      document.removeEventListener('mousemove', onMouseMove);
+      document.removeEventListener('mouseup', onMouseUp);
+    };
+
+    document.addEventListener('mousemove', onMouseMove);
+    document.addEventListener('mouseup', onMouseUp);
+  };
+
+  if (isReversed) {
+    return (
+      <div className={styles.root} {...rest}>
+        <div className={styles.content}>{children}</div>
+        &nbsp;
+        <div
+          className={styles.sidebar}
+          style={{
+            width: `${sidebarWidth}ch`,
+          }}
+        >
+          {sidebar}
+        </div>
+      </div>
+    );
+  }
+
+  return (
+    <div className={styles.root} {...rest}>
+      <div
+        className={styles.sidebar}
+        style={{
+          width: `${sidebarWidth}ch`,
+        }}
+      >
+        {sidebar}
+      </div>
+      {isShowingHandle ? (
+        <div className={styles.handle} ref={handleRef} role="button" tabIndex={0} onMouseDown={handleMouseDown} style={isShowingHandle ? {} : { width: `0.5ch` }}>
+          <>
+            <div className={styles.line} />
+            <div className={styles.line} />
+          </>
+        </div>
+      ) : null}
+      <div className={styles.content}>{children}</div>
+    </div>
+  );
+};
+
+export default SidebarLayout;
+
+================
+File: reference/components/Table.module.scss
+================
+.root {
+  border: 0;
+  outline: 0;
+  margin: 0;
+  padding: 0;
+  position: relative;
+  width: 100%;
+  border-spacing: 0px;
+  -webkit-text-size-adjust: 100%;
+}
+
+.body {
+}
+
+================
+File: reference/components/Table.tsx
+================
+'use client';
+
+import styles from '@components/Table.module.scss';
+
+import * as React from 'react';
+
+type TableProps = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const Table = ({ children, ...rest }) => {
+  return (
+    <table className={styles.root} {...rest}>
+      <tbody className={styles.body}>{children}</tbody>
+    </table>
+  );
+};
+
+Table.displayName = 'Table';
+
+export default Table;
+
+================
+File: reference/components/TableColumn.module.scss
+================
+.root {
+  border: 0;
+  outline: 0;
+  margin: 0;
+  padding: 0;
+  transition: background-color 0.5s ease;
+  padding-left: 1ch;
+  font-size: var(--font-size);
+  flex-shrink: 0;
+  -webkit-text-size-adjust: 100%;
+
+  &:first-child {
+    padding-left: 0px;
+  }
+}
+
+================
+File: reference/components/TableColumn.tsx
+================
+'use client';
+
+import styles from '@components/TableColumn.module.scss';
+
+import * as React from 'react';
+
+type TableColumnProps = React.HTMLAttributes<HTMLTableCellElement> & {
+  children?: React.ReactNode;
+};
+
+const TableColumn: React.FC<TableColumnProps> = ({ children, ...rest }) => {
+  return (
+    <td className={styles.root} {...rest}>
+      {children}
+    </td>
+  );
+};
+
+TableColumn.displayName = 'TableColumn';
+
+export default TableColumn;
+
+================
+File: reference/components/TableRow.module.scss
+================
+.root {
+  border: 0;
+  outline: 0;
+  margin: 0;
+  padding: 0;
+
+  transition: transform 0.5s ease;
+  border-spacing: 0px;
+  -webkit-text-size-adjust: 100%;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    outline: 0;
+  }
+}
+
+================
+File: reference/components/TableRow.tsx
+================
+'use client';
+
+import styles from '@components/TableRow.module.scss';
+
+import * as React from 'react';
+
+type TableRowProps = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const TableRow = ({ children, ...rest }) => {
+  return (
+    <tr className={styles.root} tabIndex={0} {...rest}>
+      {children}
+    </tr>
+  );
+};
+
+TableRow.displayName = 'TableRow';
+
+export default TableRow;
+
+================
+File: reference/components/Text.module.scss
+================
+.text {
+  white-space: pre-wrap;
+  overflow-wrap: break-word;
+}
+
+================
+File: reference/components/Text.tsx
+================
+import styles from '@components/Text.module.scss';
+
+import * as React from 'react';
+
+interface TextProps extends React.HTMLAttributes<HTMLParagraphElement> {
+  children?: React.ReactNode;
+}
+
+const Text: React.FC<TextProps> = ({ children, ...rest }) => {
+  return (
+    <p className={styles.text} {...rest}>
+      {children}
+    </p>
+  );
+};
+
+export default Text;
+
+================
+File: reference/components/TextArea.module.scss
+================
+.root {
+  position: relative;
+}
+
+.placeholder {
+  opacity: 0.7;
+  font-style: italic;
+}
+
+.displayed {
+  white-space: pre-wrap;
+  word-wrap: break-word;
+  pointer-events: none;
+  overflow-wrap: anywhere;
+}
+
+.hidden {
+  white-space: pre-wrap;
+  word-wrap: break-word;
+  pointer-events: none;
+  overflow-wrap: anywhere;
+  position: absolute;
+  visibility: hidden;
+  width: 100%;
+  overflow: auto;
+}
+
+.focused {
+  .block {
+    background: var(--theme-focused-foreground);
+  }
+
+  .placeholder {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+@keyframes blink {
+  50% {
+    opacity: 0;
+  }
+}
+
+.blink {
+  animation: blink 1s step-start 0s infinite;
+}
+
+.block {
+  display: inline-block;
+  min-width: 1ch;
+  background: var(--theme-text);
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  vertical-align: bottom;
+}
+
+.hiddenElement {
+  position: absolute;
+  top: 0;
+  left: 0;
+  width: 100%;
+  height: 100%;
+  color: transparent;
+  background: transparent;
+  caret-color: transparent;
+  border: none;
+  resize: none;
+  outline: none;
+  overflow: hidden;
+  padding: 0;
+  margin: 0;
+  line-height: var(--theme-line-height-base);
+  font-size: var(--font-size);
+  font-family: inherit;
+}
+
+================
+File: reference/components/TextArea.tsx
+================
+'use client';
+
+import styles from '@components/TextArea.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+type TextAreaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement> & {
+  autoPlay?: string;
+  autoPlaySpeedMS?: number;
+  isBlink?: boolean;
+};
+function TextArea({ autoPlay, autoPlaySpeedMS = 40, isBlink, placeholder, onChange, ...rest }: TextAreaProps) {
+  const textAreaRef = React.useRef<HTMLTextAreaElement | null>(null);
+  const measurementRef = React.useRef<HTMLDivElement | null>(null);
+
+  const [text, setText] = React.useState<string>(rest.defaultValue?.toString() || rest.value?.toString() || '');
+  const [isAutoPlaying, setIsAutoPlaying] = React.useState<boolean>(!!autoPlay);
+  const [isFocused, setIsFocused] = React.useState<boolean>(false);
+  const [selectionStart, setSelectionStart] = React.useState<number>(0);
+
+  const autoPlayIntervalRef = React.useRef<NodeJS.Timeout | null>(null);
+  const autoPlayIndexRef = React.useRef<number>(0);
+
+  const [currentLineIndex, setCurrentLineIndex] = React.useState<number>(0);
+  const [totalLines, setTotalLines] = React.useState<number>(0);
+
+  React.useEffect(() => {
+    if (textAreaRef.current && isFocused) {
+      textAreaRef.current.setSelectionRange(selectionStart, selectionStart);
+    }
+  }, [selectionStart, isFocused]);
+
+  React.useEffect(() => {
+    if (rest.value !== undefined) {
+      const val = rest.value.toString();
+      setText(val);
+      setIsAutoPlaying(false);
+      if (autoPlayIntervalRef.current) {
+        clearInterval(autoPlayIntervalRef.current);
+      }
+      setSelectionStart(val.length);
+    }
+  }, [rest.value]);
+
+  React.useEffect(() => {
+    if (autoPlay && !rest.value && !rest.defaultValue) {
+      setIsAutoPlaying(true);
+      autoPlayIndexRef.current = 0;
+      setText('');
+      if (autoPlayIntervalRef.current) clearInterval(autoPlayIntervalRef.current);
+
+      autoPlayIntervalRef.current = setInterval(() => {
+        autoPlayIndexRef.current++;
+        if (!autoPlay) return;
+        if (autoPlayIndexRef.current > autoPlay.length) {
+          setIsAutoPlaying(false);
+          clearInterval(autoPlayIntervalRef.current!);
+          return;
+        }
+        const newText = autoPlay.slice(0, autoPlayIndexRef.current);
+        setText(newText);
+        setSelectionStart(newText.length);
+      }, autoPlaySpeedMS);
+    }
+
+    return () => {
+      if (autoPlayIntervalRef.current) clearInterval(autoPlayIntervalRef.current);
+    };
+  }, [autoPlay, rest.value, rest.defaultValue]);
+
+  const resizeTextArea = React.useCallback(() => {
+    if (!textAreaRef.current) return;
+    textAreaRef.current.style.height = 'auto';
+    textAreaRef.current.style.height = `${textAreaRef.current.scrollHeight}px`;
+  }, []);
+
+  React.useEffect(() => {
+    resizeTextArea();
+    window.addEventListener('resize', resizeTextArea);
+    return () => window.removeEventListener('resize', resizeTextArea);
+  }, [resizeTextArea]);
+
+  const onHandleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
+    const value = e.target.value;
+    setText(value);
+    setIsAutoPlaying(false);
+    if (autoPlayIntervalRef.current) {
+      clearInterval(autoPlayIntervalRef.current);
+    }
+    resizeTextArea();
+    if (onChange) {
+      onChange(e);
+    }
+    setSelectionStart(e.target.selectionStart ?? 0);
+  };
+
+  const onHandleSelect = (e: React.SyntheticEvent<HTMLTextAreaElement>) => {
+    const textarea = e.currentTarget as HTMLTextAreaElement;
+    setSelectionStart(textarea.selectionStart);
+  };
+
+  const onHandleFocus = () => {
+    setIsFocused(true);
+    if (textAreaRef.current) {
+      setSelectionStart(textAreaRef.current.selectionStart);
+    }
+  };
+
+  const onHandleBlur = () => {
+    setIsFocused(false);
+  };
+
+  const onHandleClick = (e: React.MouseEvent<HTMLTextAreaElement>) => {
+    const textarea = e.currentTarget as HTMLTextAreaElement;
+    textarea.focus();
+    setSelectionStart(textarea.selectionStart);
+  };
+
+  React.useLayoutEffect(() => {
+    if (!measurementRef.current) return;
+
+    const measurementEl = measurementRef.current;
+    const computedStyle = window.getComputedStyle(measurementEl);
+    const lineHeightStr = computedStyle.lineHeight;
+    let lineHeight = 20;
+    if (lineHeightStr.endsWith('px')) {
+      lineHeight = parseFloat(lineHeightStr);
+    }
+
+    const countLines = (content: string) => {
+      measurementEl.textContent = content || '\u00A0';
+      const height = measurementEl.offsetHeight;
+      return Math.round(height / lineHeight);
+    };
+
+    const displayString = text || placeholder || '';
+
+    const textBeforeCaret = text.substring(0, selectionStart);
+    const textAfterCaret = text.substring(selectionStart);
+
+    const total = countLines(displayString);
+    setTotalLines(total > 0 ? total - 1 : 0);
+
+    const currentLines = countLines(textBeforeCaret);
+    setCurrentLineIndex(currentLines > 0 ? currentLines - 1 : 0);
+  }, [text, selectionStart, placeholder]);
+
+  const onHandleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
+    if (e.key === 'ArrowUp' && currentLineIndex === 0) {
+      e.preventDefault();
+      const previousFocusable = Utilities.findNextFocusable(document.activeElement, 'previous');
+      previousFocusable?.focus();
+    } else if (e.key === 'ArrowDown' && currentLineIndex === totalLines) {
+      e.preventDefault();
+      const nextFocusable = Utilities.findNextFocusable(document.activeElement, 'next');
+      nextFocusable?.focus();
+    }
+  };
+
+  const isPlaceholderVisible = !text && placeholder;
+
+  const containerClasses = Utilities.classNames(styles.root, isFocused && styles.focused);
+
+  return (
+    <div className={containerClasses}>
+      <div className={Utilities.classNames(styles.displayed, isPlaceholderVisible && styles.placeholder)}>
+        {isPlaceholderVisible ? placeholder : text.substring(0, selectionStart)}
+        {!isPlaceholderVisible && <span className={Utilities.classNames(styles.block, isBlink && styles.blink)}></span>}
+        {!isPlaceholderVisible && text.substring(selectionStart)}
+      </div>
+
+      <div ref={measurementRef} className={styles.hidden}></div>
+
+      <textarea className={styles.hiddenElement} ref={textAreaRef} value={text} aria-placeholder={placeholder} onFocus={onHandleFocus} onBlur={onHandleBlur} onKeyDown={onHandleKeyDown} onChange={onHandleChange} onSelect={onHandleSelect} onClick={onHandleClick} {...rest} />
+    </div>
+  );
+}
+
+export default TextArea;
+
+================
+File: reference/components/Tooltip.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border);
+  box-shadow: 0.5ch 0.5ch 0 0 var(--theme-border-subdued);
+  font-weight: 400;
+  max-width: 24ch;
+}
+
+================
+File: reference/components/Tooltip.tsx
+================
+import styles from '@components/Tooltip.module.scss';
+
+import * as React from 'react';
+
+interface TooltipProps extends React.HTMLAttributes<HTMLDivElement> {}
+
+const Tooltip = React.forwardRef<HTMLDivElement, TooltipProps>(({ style: propStyle, ...rest }, ref) => {
+  const style: React.CSSProperties = { ...propStyle };
+
+  return <div ref={ref} className={styles.root} {...rest} style={style} />;
+});
+
+Tooltip.displayName = 'Tooltip';
+
+export default Tooltip;
+
+================
+File: reference/components/TreeView.module.scss
+================
+.root {
+  white-space: nowrap;
+  -webkit-text-size-adjust: 100%;
+}
+
+.item {
+  cursor: pointer;
+
+  &:focus {
+    outline: 0;
+    border: 0;
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.empty {
+  opacity: 0.5;
+}
+
+================
+File: reference/components/TreeView.tsx
+================
+'use client';
+
+import styles from '@components/TreeView.module.scss';
+
+import * as React from 'react';
+
+interface TreeViewProps {
+  children?: React.ReactNode;
+  defaultValue?: boolean;
+  depth?: number;
+  isFile?: boolean;
+  isLastChild?: boolean;
+  isRoot?: boolean;
+  parentLines?: boolean[];
+  style?: any;
+  title: string;
+}
+
+const TreeView: React.FC<TreeViewProps> = ({ defaultValue = false, title, children, depth = 0, isFile = false, isRoot = false, isLastChild = false, style, parentLines = [] }) => {
+  const [show, setShow] = React.useState<boolean>(defaultValue);
+
+  const onToggleShow = (): void => {
+    if (!isFile) setShow((prevShow) => !prevShow);
+  };
+
+  const hasChildren = React.Children.count(children) > 0;
+  const isEmptyFolder = !isFile && !hasChildren;
+
+  const spacing = parentLines.map((line) => (line ? '│ . ' : '. . ')).join('');
+  const endPrefix = isLastChild ? '└───' : '├───';
+  const prefix = `${spacing}${endPrefix}`;
+  const icon = isFile ? ' ' : show ? '╦ ' : '╤ ';
+
+  const updatedParentLines = [...parentLines, !isLastChild];
+
+  return (
+    <div className={styles.root} style={style}>
+      <div tabIndex={0} role="button" onClick={onToggleShow} className={styles.item} aria-expanded={show}>
+        {prefix}
+        {icon}
+        {title}
+      </div>
+      {show && hasChildren && (
+        <div>
+          {React.Children.map(children, (child, index) =>
+            React.isValidElement(child)
+              ? React.cloneElement(child as React.ReactElement<TreeViewProps>, {
+                  depth: depth + 1,
+                  isLastChild: index === React.Children.count(children) - 1,
+                  parentLines: updatedParentLines,
+                })
+              : child
+          )}
+        </div>
+      )}
+    </div>
+  );
+};
+
+export default TreeView;
+
+================
+File: reference/modules/hotkeys/bound-hotkeys-proxy-provider.tsx
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/BoundHotkeysProxyProvider.tsx
+
+import { createContext, ReactNode, useContext } from 'react'
+import { Hotkey } from '@modules/hotkeys/types'
+
+type BoundHotkeysProxyProviderType = {
+  addHotkey: (hotkey: Hotkey) => void
+  removeHotkey: (hotkey: Hotkey) => void
+}
+
+const BoundHotkeysProxyProvider = createContext<BoundHotkeysProxyProviderType | undefined>(undefined)
+
+export const useBoundHotkeysProxy = () => {
+  return useContext(BoundHotkeysProxyProvider)
+}
+
+interface Props {
+  children: ReactNode
+  addHotkey: (hotkey: Hotkey) => void
+  removeHotkey: (hotkey: Hotkey) => void
+}
+
+export default function BoundHotkeysProxyProviderProvider({ addHotkey, removeHotkey, children }: Props) {
+  return (
+    <BoundHotkeysProxyProvider.Provider value={{ addHotkey, removeHotkey }}>
+      {children}
+    </BoundHotkeysProxyProvider.Provider>
+  )
+}
+
+================
+File: reference/modules/hotkeys/hotkeys-provider.tsx
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/HotkeysProvider.tsx
+import { Hotkey } from '@modules/hotkeys/types'
+import { createContext, ReactNode, useState, useContext, useCallback } from 'react'
+import BoundHotkeysProxyProviderProvider from '@modules/hotkeys/bound-hotkeys-proxy-provider'
+
+import * as Utilities from '@common/utilities';
+
+export type HotkeysContextType = {
+  hotkeys: ReadonlyArray<Hotkey>
+  enabledScopes: string[]
+  toggleScope: (scope: string) => void
+  enableScope: (scope: string) => void
+  disableScope: (scope: string) => void
+}
+
+// The context is only needed for special features like global scoping, so we use a graceful default fallback
+const HotkeysContext = createContext<HotkeysContextType>({
+  hotkeys: [],
+  enabledScopes: [], // This array has to be empty instead of containing '*' as default, to check if the provider is set or not
+  toggleScope: () => {},
+  enableScope: () => {},
+  disableScope: () => {},
+})
+
+export const useHotkeysContext = () => {
+  return useContext(HotkeysContext)
+}
+
+interface Props {
+  initiallyActiveScopes?: string[]
+  children: ReactNode
+}
+
+export const HotkeysProvider = ({ initiallyActiveScopes = ['*'], children }: Props) => {
+  const [internalActiveScopes, setInternalActiveScopes] = useState(
+    initiallyActiveScopes?.length > 0 ? initiallyActiveScopes : ['*']
+  )
+  const [boundHotkeys, setBoundHotkeys] = useState<Hotkey[]>([])
+
+  const enableScope = useCallback((scope: string) => {
+    setInternalActiveScopes((prev) => {
+      if (prev.includes('*')) {
+        return [scope]
+      }
+
+      return Array.from(new Set([...prev, scope]))
+    })
+  }, [])
+
+  const disableScope = useCallback((scope: string) => {
+    setInternalActiveScopes((prev) => {
+      if (prev.filter((s) => s !== scope).length === 0) {
+        return ['*']
+      } else {
+        return prev.filter((s) => s !== scope)
+      }
+    })
+  }, [])
+
+  const toggleScope = useCallback((scope: string) => {
+    setInternalActiveScopes((prev) => {
+      if (prev.includes(scope)) {
+        if (prev.filter((s) => s !== scope).length === 0) {
+          return ['*']
+        } else {
+          return prev.filter((s) => s !== scope)
+        }
+      } else {
+        if (prev.includes('*')) {
+          return [scope]
+        }
+
+        return Array.from(new Set([...prev, scope]))
+      }
+    })
+  }, [])
+
+  const addBoundHotkey = useCallback((hotkey: Hotkey) => {
+    setBoundHotkeys((prev) => [...prev, hotkey])
+  }, [])
+
+  const removeBoundHotkey = useCallback((hotkey: Hotkey) => {
+    setBoundHotkeys((prev) => prev.filter((h) => !Utilities.deepEqual(h, hotkey)))
+  }, [])
+
+  return (
+    <HotkeysContext.Provider
+      value={{ enabledScopes: internalActiveScopes, hotkeys: boundHotkeys, enableScope, disableScope, toggleScope }}
+    >
+      <BoundHotkeysProxyProviderProvider addHotkey={addBoundHotkey} removeHotkey={removeBoundHotkey}>
+        {children}
+      </BoundHotkeysProxyProviderProvider>
+    </HotkeysContext.Provider>
+  )
+}
+
+================
+File: reference/modules/hotkeys/index.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/index.ts
+
+import useHotkeys from '@modules/hotkeys/use-hotkeys'
+import type { Options, Keys, HotkeyCallback } from '@modules/hotkeys/types'
+import { HotkeysProvider, useHotkeysContext } from '@modules/hotkeys/hotkeys-provider'
+import { isHotkeyPressed } from '@modules/hotkeys/is-hotkey-pressed'
+import useRecordHotkeys from '@modules/hotkeys/use-record-hotkeys'
+
+export {
+  useHotkeys,
+  useRecordHotkeys,
+  useHotkeysContext,
+  isHotkeyPressed,
+  HotkeysProvider,
+  Options,
+  Keys,
+  HotkeyCallback,
+}
+
+================
+File: reference/modules/hotkeys/is-hotkey-pressed.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/isHotkeyPressed.ts
+
+import { isHotkeyModifier, mapKey } from '@modules/hotkeys/parse-hotkeys'
+;(() => {
+  if (typeof document !== 'undefined') {
+    document.addEventListener('keydown', (e) => {
+      if (e.key === undefined) {
+        // Synthetic event (e.g., Chrome autofill).  Ignore.
+        return
+      }
+
+      pushToCurrentlyPressedKeys([mapKey(e.key), mapKey(e.code)])
+    })
+
+    document.addEventListener('keyup', (e) => {
+      if (e.key === undefined) {
+        // Synthetic event (e.g., Chrome autofill).  Ignore.
+        return
+      }
+
+      removeFromCurrentlyPressedKeys([mapKey(e.key), mapKey(e.code)])
+    })
+  }
+
+  if (typeof window !== 'undefined') {
+    window.addEventListener('blur', () => {
+      currentlyPressedKeys.clear()
+    })
+  }
+})()
+
+const currentlyPressedKeys: Set<string> = new Set<string>()
+
+// https://github.com/microsoft/TypeScript/issues/17002
+export function isReadonlyArray(value: unknown): value is readonly unknown[] {
+  return Array.isArray(value)
+}
+
+export function isHotkeyPressed(key: string | readonly string[], splitKey = ','): boolean {
+  const hotkeyArray = isReadonlyArray(key) ? key : key.split(splitKey)
+
+  return hotkeyArray.every((hotkey) => currentlyPressedKeys.has(hotkey.trim().toLowerCase()))
+}
+
+export function pushToCurrentlyPressedKeys(key: string | string[]): void {
+  const hotkeyArray = Array.isArray(key) ? key : [key]
+
+  /*
+  Due to a weird behavior on macOS we need to clear the set if the user pressed down the meta key and presses another key.
+  https://stackoverflow.com/questions/11818637/why-does-javascript-drop-keyup-events-when-the-metakey-is-pressed-on-mac-browser
+  Otherwise the set will hold all ever pressed keys while the meta key is down which leads to wrong results.
+   */
+  if (currentlyPressedKeys.has('meta')) {
+    currentlyPressedKeys.forEach((key) => !isHotkeyModifier(key) && currentlyPressedKeys.delete(key.toLowerCase()))
+  }
+
+  hotkeyArray.forEach((hotkey) => currentlyPressedKeys.add(hotkey.toLowerCase()))
+}
+
+export function removeFromCurrentlyPressedKeys(key: string | string[]): void {
+  const hotkeyArray = Array.isArray(key) ? key : [key]
+
+  /*
+  Due to a weird behavior on macOS we need to clear the set if the user pressed down the meta key and presses another key.
+  https://stackoverflow.com/questions/11818637/why-does-javascript-drop-keyup-events-when-the-metakey-is-pressed-on-mac-browser
+  Otherwise the set will hold all ever pressed keys while the meta key is down which leads to wrong results.
+   */
+  if (key === 'meta') {
+    currentlyPressedKeys.clear()
+  } else {
+    hotkeyArray.forEach((hotkey) => currentlyPressedKeys.delete(hotkey.toLowerCase()))
+  }
+}
+
+================
+File: reference/modules/hotkeys/parse-hotkeys.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/parseHotkeys.ts
+
+import { Hotkey, KeyboardModifiers } from '@modules/hotkeys/types'
+
+const reservedModifierKeywords = ['shift', 'alt', 'meta', 'mod', 'ctrl']
+
+const mappedKeys: Record<string, string> = {
+  esc: 'escape',
+  return: 'enter',
+  '.': 'period',
+  ',': 'comma',
+  '-': 'slash',
+  ' ': 'space',
+  '`': 'backquote',
+  '#': 'backslash',
+  '+': 'bracketright',
+  ShiftLeft: 'shift',
+  ShiftRight: 'shift',
+  AltLeft: 'alt',
+  AltRight: 'alt',
+  MetaLeft: 'meta',
+  MetaRight: 'meta',
+  OSLeft: 'meta',
+  OSRight: 'meta',
+  ControlLeft: 'ctrl',
+  ControlRight: 'ctrl',
+}
+
+export function mapKey(key?: string): string {
+  return ((key && mappedKeys[key]) || key || '')
+    .trim()
+    .toLowerCase()
+    .replace(/key|digit|numpad|arrow/, '')
+}
+
+export function isHotkeyModifier(key: string) {
+  return reservedModifierKeywords.includes(key)
+}
+
+export function parseKeysHookInput(keys: string, splitKey = ','): string[] {
+  return keys.split(splitKey)
+}
+
+export function parseHotkey(hotkey: string, combinationKey = '+', description?: string): Hotkey {
+  const keys = hotkey
+    .toLocaleLowerCase()
+    .split(combinationKey)
+    .map((k) => mapKey(k))
+
+  const modifiers: KeyboardModifiers = {
+    alt: keys.includes('alt'),
+    ctrl: keys.includes('ctrl') || keys.includes('control'),
+    shift: keys.includes('shift'),
+    meta: keys.includes('meta'),
+    mod: keys.includes('mod'),
+  }
+
+  const singleCharKeys = keys.filter((k) => !reservedModifierKeywords.includes(k))
+
+  return {
+    ...modifiers,
+    keys: singleCharKeys,
+    description,
+    hotkey,
+  }
+}
+
+================
+File: reference/modules/hotkeys/types.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/types.ts
+import type { DependencyList } from 'react'
+
+export type FormTags = 'input' | 'textarea' | 'select' | 'INPUT' | 'TEXTAREA' | 'SELECT'
+export type Keys = string | readonly string[]
+export type Scopes = string | readonly string[]
+
+export type RefType<T> = T | null
+
+export type KeyboardModifiers = {
+  alt?: boolean
+  ctrl?: boolean
+  meta?: boolean
+  shift?: boolean
+  mod?: boolean
+}
+
+export type Hotkey = KeyboardModifiers & {
+  keys?: readonly string[]
+  scopes?: Scopes
+  description?: string
+  hotkey: string
+}
+
+export type HotkeysEvent = Hotkey
+
+export type HotkeyCallback = (keyboardEvent: KeyboardEvent, hotkeysEvent: HotkeysEvent) => void
+
+export type Trigger = boolean | ((keyboardEvent: KeyboardEvent, hotkeysEvent: HotkeysEvent) => boolean)
+
+export type Options = {
+  enabled?: Trigger // Main setting that determines if the hotkey is enabled or not. (Default: true)
+  enableOnFormTags?: readonly FormTags[] | boolean // Enable hotkeys on a list of tags. (Default: false)
+  enableOnContentEditable?: boolean // Enable hotkeys on tags with contentEditable props. (Default: false)
+  ignoreEventWhen?: (e: KeyboardEvent) => boolean // Ignore evenets based on a condition (Default: undefined)
+  combinationKey?: string // Character to split keys in hotkeys combinations. (Default: +)
+  splitKey?: string // Character to separate different hotkeys. (Default: ,)
+  scopes?: Scopes // Scope
+  keyup?: boolean // Trigger on keyup event? (Default: undefined)
+  keydown?: boolean // Trigger on keydown event? (Default: true)
+  preventDefault?: Trigger // Prevent default browser behavior? (Default: false)
+  description?: string // Use this option to describe what the hotkey does. (Default: undefined)
+  document?: Document // Listen to events on the document instead of the window. (Default: false)
+  ignoreModifiers?: boolean // Ignore modifiers when matching hotkeys. (Default: false)
+}
+
+export type OptionsOrDependencyArray = Options | DependencyList
+
+================
+File: reference/modules/hotkeys/use-deep-equal-memo.ts
+================
+import { useRef } from 'react'
+
+import * as Utilities from '@common/utilities';
+
+export default function useDeepEqualMemo<T>(value: T) {
+  const ref = useRef<T | undefined>(undefined)
+
+  if (!Utilities.deepEqual(ref.current, value)) {
+    ref.current = value
+  }
+
+  return ref.current
+}
+
+================
+File: reference/modules/hotkeys/use-hotkeys.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/useHotkeys.ts
+
+import { HotkeyCallback, Keys, Options, OptionsOrDependencyArray, RefType } from '@modules/hotkeys/types'
+import { DependencyList, RefCallback, useCallback, useEffect, useState, useLayoutEffect, useRef } from 'react'
+import { mapKey, parseHotkey, parseKeysHookInput } from '@modules/hotkeys/parse-hotkeys'
+import {
+  isHotkeyEnabled,
+  isHotkeyEnabledOnTag,
+  isHotkeyMatchingKeyboardEvent,
+  isKeyboardEventTriggeredByInput,
+  isScopeActive,
+  maybePreventDefault,
+} from '@modules/hotkeys/validators'
+import { useHotkeysContext } from '@modules/hotkeys/hotkeys-provider'
+import { useBoundHotkeysProxy } from '@modules/hotkeys/bound-hotkeys-proxy-provider'
+import useDeepEqualMemo from '@modules/hotkeys/use-deep-equal-memo'
+import { isReadonlyArray, pushToCurrentlyPressedKeys, removeFromCurrentlyPressedKeys } from '@modules/hotkeys/is-hotkey-pressed'
+
+const stopPropagation = (e: KeyboardEvent): void => {
+  e.stopPropagation()
+  e.preventDefault()
+  e.stopImmediatePropagation()
+}
+
+const useSafeLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect
+
+export default function useHotkeys<T extends HTMLElement>(
+  keys: Keys,
+  callback: HotkeyCallback,
+  options?: OptionsOrDependencyArray,
+  dependencies?: OptionsOrDependencyArray
+) {
+  const [ref, setRef] = useState<RefType<T>>(null)
+  const hasTriggeredRef = useRef(false)
+
+  const _options: Options | undefined = !(options instanceof Array)
+    ? (options as Options)
+    : !(dependencies instanceof Array)
+    ? (dependencies as Options)
+    : undefined
+  const _keys: string = isReadonlyArray(keys) ? keys.join(_options?.splitKey) : keys
+  const _deps: DependencyList | undefined =
+    options instanceof Array ? options : dependencies instanceof Array ? dependencies : undefined
+
+  const memoisedCB = useCallback(callback, _deps ?? [])
+  const cbRef = useRef<HotkeyCallback>(memoisedCB)
+
+  if (_deps) {
+    cbRef.current = memoisedCB
+  } else {
+    cbRef.current = callback
+  }
+
+  const memoisedOptions = useDeepEqualMemo(_options)
+
+  const { enabledScopes } = useHotkeysContext()
+  const proxy = useBoundHotkeysProxy()
+
+  useSafeLayoutEffect(() => {
+    if (memoisedOptions?.enabled === false || !isScopeActive(enabledScopes, memoisedOptions?.scopes)) {
+      return
+    }
+
+    const listener = (e: KeyboardEvent, isKeyUp = false) => {
+      if (isKeyboardEventTriggeredByInput(e) && !isHotkeyEnabledOnTag(e, memoisedOptions?.enableOnFormTags)) {
+        return
+      }
+
+      // TODO: SINCE THE EVENT IS NOW ATTACHED TO THE REF, THE ACTIVE ELEMENT CAN NEVER BE INSIDE THE REF. THE HOTKEY ONLY TRIGGERS IF THE
+      // REF IS THE ACTIVE ELEMENT. THIS IS A PROBLEM SINCE FOCUSED SUB COMPONENTS WON'T TRIGGER THE HOTKEY.
+      if (ref !== null) {
+        const rootNode = ref.getRootNode()
+        if (
+          (rootNode instanceof Document || rootNode instanceof ShadowRoot) &&
+          rootNode.activeElement !== ref &&
+          !ref.contains(rootNode.activeElement)
+        ) {
+          stopPropagation(e)
+          return
+        }
+      }
+
+      if ((e.target as HTMLElement)?.isContentEditable && !memoisedOptions?.enableOnContentEditable) {
+        return
+      }
+
+      parseKeysHookInput(_keys, memoisedOptions?.splitKey).forEach((key) => {
+        const hotkey = parseHotkey(key, memoisedOptions?.combinationKey)
+
+        if (isHotkeyMatchingKeyboardEvent(e, hotkey, memoisedOptions?.ignoreModifiers) || hotkey.keys?.includes('*')) {
+          if (memoisedOptions?.ignoreEventWhen?.(e)) {
+            return
+          }
+
+          if (isKeyUp && hasTriggeredRef.current) {
+            return
+          }
+
+          maybePreventDefault(e, hotkey, memoisedOptions?.preventDefault)
+
+          if (!isHotkeyEnabled(e, hotkey, memoisedOptions?.enabled)) {
+            stopPropagation(e)
+
+            return
+          }
+
+          // Execute the user callback for that hotkey
+          cbRef.current(e, hotkey)
+
+          if (!isKeyUp) {
+            hasTriggeredRef.current = true
+          }
+        }
+      })
+    }
+
+    const handleKeyDown = (event: KeyboardEvent) => {
+      if (event.key === undefined) {
+        // Synthetic event (e.g., Chrome autofill).  Ignore.
+        return
+      }
+
+      pushToCurrentlyPressedKeys(mapKey(event.code))
+
+      if ((memoisedOptions?.keydown === undefined && memoisedOptions?.keyup !== true) || memoisedOptions?.keydown) {
+        listener(event)
+      }
+    }
+
+    const handleKeyUp = (event: KeyboardEvent) => {
+      if (event.key === undefined) {
+        // Synthetic event (e.g., Chrome autofill).  Ignore.
+        return
+      }
+
+      removeFromCurrentlyPressedKeys(mapKey(event.code))
+
+      hasTriggeredRef.current = false
+
+      if (memoisedOptions?.keyup) {
+        listener(event, true)
+      }
+    }
+
+    const domNode = ref || _options?.document || document
+
+    // @ts-ignore
+    domNode.addEventListener('keyup', handleKeyUp)
+    // @ts-ignore
+    domNode.addEventListener('keydown', handleKeyDown)
+
+    if (proxy) {
+      parseKeysHookInput(_keys, memoisedOptions?.splitKey).forEach((key) =>
+        proxy.addHotkey(parseHotkey(key, memoisedOptions?.combinationKey, memoisedOptions?.description))
+      )
+    }
+
+    return () => {
+      // @ts-ignore
+      domNode.removeEventListener('keyup', handleKeyUp)
+      // @ts-ignore
+      domNode.removeEventListener('keydown', handleKeyDown)
+
+      if (proxy) {
+        parseKeysHookInput(_keys, memoisedOptions?.splitKey).forEach((key) =>
+          proxy.removeHotkey(parseHotkey(key, memoisedOptions?.combinationKey, memoisedOptions?.description))
+        )
+      }
+    }
+  }, [ref, _keys, memoisedOptions, enabledScopes])
+
+  return setRef as RefCallback<T>
+}
+
+================
+File: reference/modules/hotkeys/use-record-hotkeys.ts
+================
+import { useCallback, useState } from 'react'
+import { mapKey } from '@modules/hotkeys/parse-hotkeys'
+
+export default function useRecordHotkeys() {
+  const [keys, setKeys] = useState(new Set<string>())
+  const [isRecording, setIsRecording] = useState(false)
+
+  const handler = useCallback((event: KeyboardEvent) => {
+    if (event.key === undefined) {
+      // Synthetic event (e.g., Chrome autofill).  Ignore.
+      return
+    }
+
+    event.preventDefault()
+    event.stopPropagation()
+
+    setKeys((prev) => {
+      const newKeys = new Set(prev)
+
+      newKeys.add(mapKey(event.code))
+
+      return newKeys
+    })
+  }, [])
+
+  const stop = useCallback(() => {
+    if (typeof document !== 'undefined') {
+      document.removeEventListener('keydown', handler)
+
+      setIsRecording(false)
+    }
+  }, [handler])
+
+  const start = useCallback(() => {
+    setKeys(new Set<string>())
+
+    if (typeof document !== 'undefined') {
+      stop()
+
+      document.addEventListener('keydown', handler)
+
+      setIsRecording(true)
+    }
+  }, [handler, stop])
+
+  const resetKeys = useCallback(() => {
+    setKeys(new Set<string>())
+  }, [])
+
+  return [keys, { start, stop, resetKeys, isRecording }] as const
+}
+
+================
+File: reference/modules/hotkeys/validators.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/validators.ts
+
+import { FormTags, Hotkey, Scopes, Trigger } from '@modules/hotkeys/types'
+import { isHotkeyPressed, isReadonlyArray } from '@modules/hotkeys/is-hotkey-pressed'
+import { mapKey } from '@modules/hotkeys/parse-hotkeys'
+
+export function maybePreventDefault(e: KeyboardEvent, hotkey: Hotkey, preventDefault?: Trigger): void {
+  if ((typeof preventDefault === 'function' && preventDefault(e, hotkey)) || preventDefault === true) {
+    e.preventDefault()
+  }
+}
+
+export function isHotkeyEnabled(e: KeyboardEvent, hotkey: Hotkey, enabled?: Trigger): boolean {
+  if (typeof enabled === 'function') {
+    return enabled(e, hotkey)
+  }
+
+  return enabled === true || enabled === undefined
+}
+
+export function isKeyboardEventTriggeredByInput(ev: KeyboardEvent): boolean {
+  return isHotkeyEnabledOnTag(ev, ['input', 'textarea', 'select'])
+}
+
+export function isHotkeyEnabledOnTag(
+  event: KeyboardEvent,
+  enabledOnTags: readonly FormTags[] | boolean = false
+): boolean {
+  const {target, composed} = event;
+
+  let targetTagName: string | null = null
+
+  if (isCustomElement(target as HTMLElement) && composed) {
+    targetTagName = event.composedPath()[0] && (event.composedPath()[0] as HTMLElement).tagName;
+  } else {
+    targetTagName = target && (target as HTMLElement).tagName;
+  }
+
+  if (isReadonlyArray(enabledOnTags)) {
+    return Boolean(
+      targetTagName && enabledOnTags && enabledOnTags.some((tag) => tag.toLowerCase() === targetTagName?.toLowerCase())
+    )
+  }
+
+  return Boolean(targetTagName && enabledOnTags && enabledOnTags)
+}
+
+export function isCustomElement(element: HTMLElement): boolean {
+  // We just do a basic check w/o any complex RegEx or validation against the list of legacy names containing a hyphen,
+  // as none of them is likely to be an event target, and it won't hurt anyway if we miss.
+  // see: https://html.spec.whatwg.org/multipage/custom-elements.html#prod-potentialcustomelementname
+  return !!element.tagName && !element.tagName.startsWith("-") && element.tagName.includes("-");
+}
+
+export function isScopeActive(activeScopes: string[], scopes?: Scopes): boolean {
+  if (activeScopes.length === 0 && scopes) {
+    console.warn(
+      'A hotkey has the "scopes" option set, however no active scopes were found. If you want to use the global scopes feature, you need to wrap your app in a <HotkeysProvider>'
+    )
+
+    return true
+  }
+
+  if (!scopes) {
+    return true
+  }
+
+  return activeScopes.some((scope) => scopes.includes(scope)) || activeScopes.includes('*')
+}
+
+export const isHotkeyMatchingKeyboardEvent = (e: KeyboardEvent, hotkey: Hotkey, ignoreModifiers = false): boolean => {
+  const { alt, meta, mod, shift, ctrl, keys } = hotkey
+  const { key: pressedKeyUppercase, code, ctrlKey, metaKey, shiftKey, altKey } = e
+
+  const keyCode = mapKey(code)
+  const pressedKey = pressedKeyUppercase.toLowerCase()
+
+  if (
+    !keys?.includes(keyCode) &&
+    !keys?.includes(pressedKey) &&
+    !['ctrl', 'control', 'unknown', 'meta', 'alt', 'shift', 'os'].includes(keyCode)
+  ) {
+    return false
+  }
+
+  if (!ignoreModifiers) {
+    // We check the pressed keys for compatibility with the keyup event. In keyup events the modifier flags are not set.
+    if (alt === !altKey && pressedKey !== 'alt') {
+      return false
+    }
+
+    if (shift === !shiftKey && pressedKey !== 'shift') {
+      return false
+    }
+
+    // Mod is a special key name that is checking for meta on macOS and ctrl on other platforms
+    if (mod) {
+      if (!metaKey && !ctrlKey) {
+        return false
+      }
+    } else {
+      if (meta === !metaKey && pressedKey !== 'meta' && pressedKey !== 'os') {
+        return false
+      }
+
+      if (ctrl === !ctrlKey && pressedKey !== 'ctrl' && pressedKey !== 'control') {
+        return false
+      }
+    }
+  }
+
+  // All modifiers are correct, now check the key
+  // If the key is set, we check for the key
+  if (keys && keys.length === 1 && (keys.includes(pressedKey) || keys.includes(keyCode))) {
+    return true
+  } else if (keys) {
+    // Check if all keys are present in pressedDownKeys set
+    return isHotkeyPressed(keys)
+  } else if (!keys) {
+    // If the key is not set, we only listen for modifiers, that check went alright, so we return true
+    return true
+  }
+
+  // There is nothing that matches.
+  return false
+}
+
+================
+File: reference/modules/cors.ts
+================
+// @ts-nocheck
+
+'use strict';
+
+import assign from '@modules/object-assign';
+import vary from '@modules/vary';
+
+var defaults = {
+  origin: '*',
+  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
+  preflightContinue: false,
+  optionsSuccessStatus: 204,
+};
+
+function isString(s) {
+  return typeof s === 'string' || s instanceof String;
+}
+
+function isOriginAllowed(origin, allowedOrigin) {
+  if (Array.isArray(allowedOrigin)) {
+    for (var i = 0; i < allowedOrigin.length; ++i) {
+      if (isOriginAllowed(origin, allowedOrigin[i])) {
+        return true;
+      }
+    }
+    return false;
+  } else if (isString(allowedOrigin)) {
+    return origin === allowedOrigin;
+  } else if (allowedOrigin instanceof RegExp) {
+    return allowedOrigin.test(origin);
+  } else {
+    return !!allowedOrigin;
+  }
+}
+
+function configureOrigin(options, req) {
+  var requestOrigin = req.headers.origin,
+    headers = [],
+    isAllowed;
+
+  if (!options.origin || options.origin === '*') {
+    // allow any origin
+    headers.push([
+      {
+        key: 'Access-Control-Allow-Origin',
+        value: '*',
+      },
+    ]);
+  } else if (isString(options.origin)) {
+    // fixed origin
+    headers.push([
+      {
+        key: 'Access-Control-Allow-Origin',
+        value: options.origin,
+      },
+    ]);
+    headers.push([
+      {
+        key: 'Vary',
+        value: 'Origin',
+      },
+    ]);
+  } else {
+    isAllowed = isOriginAllowed(requestOrigin, options.origin);
+    // reflect origin
+    headers.push([
+      {
+        key: 'Access-Control-Allow-Origin',
+        value: isAllowed ? requestOrigin : false,
+      },
+    ]);
+    headers.push([
+      {
+        key: 'Vary',
+        value: 'Origin',
+      },
+    ]);
+  }
+
+  return headers;
+}
+
+function configureMethods(options) {
+  var methods = options.methods;
+  if (methods.join) {
+    methods = options.methods.join(','); // .methods is an array, so turn it into a string
+  }
+  return {
+    key: 'Access-Control-Allow-Methods',
+    value: methods,
+  };
+}
+
+function configureCredentials(options) {
+  if (options.credentials === true) {
+    return {
+      key: 'Access-Control-Allow-Credentials',
+      value: 'true',
+    };
+  }
+  return null;
+}
+
+function configureAllowedHeaders(options, req) {
+  var allowedHeaders = options.allowedHeaders || options.headers;
+  var headers = [];
+
+  if (!allowedHeaders) {
+    allowedHeaders = req.headers['access-control-request-headers']; // .headers wasn't specified, so reflect the request headers
+    headers.push([
+      {
+        key: 'Vary',
+        value: 'Access-Control-Request-Headers',
+      },
+    ]);
+  } else if (allowedHeaders.join) {
+    allowedHeaders = allowedHeaders.join(','); // .headers is an array, so turn it into a string
+  }
+  if (allowedHeaders && allowedHeaders.length) {
+    headers.push([
+      {
+        key: 'Access-Control-Allow-Headers',
+        value: allowedHeaders,
+      },
+    ]);
+  }
+
+  return headers;
+}
+
+function configureExposedHeaders(options) {
+  var headers = options.exposedHeaders;
+  if (!headers) {
+    return null;
+  } else if (headers.join) {
+    headers = headers.join(','); // .headers is an array, so turn it into a string
+  }
+  if (headers && headers.length) {
+    return {
+      key: 'Access-Control-Expose-Headers',
+      value: headers,
+    };
+  }
+  return null;
+}
+
+function configureMaxAge(options) {
+  var maxAge = (typeof options.maxAge === 'number' || options.maxAge) && options.maxAge.toString();
+  if (maxAge && maxAge.length) {
+    return {
+      key: 'Access-Control-Max-Age',
+      value: maxAge,
+    };
+  }
+  return null;
+}
+
+function applyHeaders(headers, res) {
+  for (var i = 0, n = headers.length; i < n; i++) {
+    var header = headers[i];
+    if (header) {
+      if (Array.isArray(header)) {
+        applyHeaders(header, res);
+      } else if (header.key === 'Vary' && header.value) {
+        vary(res, header.value);
+      } else if (header.value) {
+        res.setHeader(header.key, header.value);
+      }
+    }
+  }
+}
+
+function cors(options, req, res, next) {
+  var headers = [],
+    method = req.method && req.method.toUpperCase && req.method.toUpperCase();
+
+  if (method === 'OPTIONS') {
+    // preflight
+    headers.push(configureOrigin(options, req));
+    headers.push(configureCredentials(options));
+    headers.push(configureMethods(options));
+    headers.push(configureAllowedHeaders(options, req));
+    headers.push(configureMaxAge(options));
+    headers.push(configureExposedHeaders(options));
+    applyHeaders(headers, res);
+
+    if (options.preflightContinue) {
+      next();
+    } else {
+      // Safari (and potentially other browsers) need content-length 0,
+      //   for 204 or they just hang waiting for a body
+      res.statusCode = options.optionsSuccessStatus;
+      res.setHeader('Content-Length', '0');
+      res.end();
+    }
+  } else {
+    // actual response
+    headers.push(configureOrigin(options, req));
+    headers.push(configureCredentials(options));
+    headers.push(configureExposedHeaders(options));
+    applyHeaders(headers, res);
+    next();
+  }
+}
+
+function middlewareWrapper(o) {
+  // if options are static (either via defaults or custom options passed in), wrap in a function
+  var optionsCallback = null;
+  if (typeof o === 'function') {
+    optionsCallback = o;
+  } else {
+    optionsCallback = function (req, cb) {
+      cb(null, o);
+    };
+  }
+
+  return function corsMiddleware(req, res, next) {
+    optionsCallback(req, function (err, options) {
+      if (err) {
+        next(err);
+      } else {
+        var corsOptions = assign({}, defaults, options);
+        var originCallback = null;
+        if (corsOptions.origin && typeof corsOptions.origin === 'function') {
+          originCallback = corsOptions.origin;
+        } else if (corsOptions.origin) {
+          originCallback = function (origin, cb) {
+            cb(null, corsOptions.origin);
+          };
+        }
+
+        if (originCallback) {
+          originCallback(req.headers.origin, function (err2, origin) {
+            if (err2 || !origin) {
+              next(err2);
+            } else {
+              corsOptions.origin = origin;
+              cors(corsOptions, req, res, next);
+            }
+          });
+        } else {
+          next();
+        }
+      }
+    });
+  };
+}
+
+export default middlewareWrapper;
+
+================
+File: reference/modules/object-assign.ts
+================
+// @ts-nocheck
+
+/*
+object-assign
+(c) Sindre Sorhus
+@license MIT
+*/
+
+'use strict';
+
+/* eslint-disable no-unused-vars */
+var getOwnPropertySymbols = Object.getOwnPropertySymbols;
+var hasOwnProperty = Object.prototype.hasOwnProperty;
+var propIsEnumerable = Object.prototype.propertyIsEnumerable;
+
+function toObject(val) {
+  if (val === null || val === undefined) {
+    throw new TypeError('Object.assign cannot be called with null or undefined');
+  }
+
+  return Object(val);
+}
+
+function shouldUseNative() {
+  try {
+    if (!Object.assign) {
+      return false;
+    }
+
+    // Detect buggy property enumeration order in older V8 versions.
+
+    // https://bugs.chromium.org/p/v8/issues/detail?id=4118
+    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
+    // @ts-ignore
+    test1[5] = 'de';
+    if (Object.getOwnPropertyNames(test1)[0] === '5') {
+      return false;
+    }
+
+    // https://bugs.chromium.org/p/v8/issues/detail?id=3056
+    var test2 = {};
+    for (var i = 0; i < 10; i++) {
+      test2['_' + String.fromCharCode(i)] = i;
+    }
+    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
+      return test2[n];
+    });
+    if (order2.join('') !== '0123456789') {
+      return false;
+    }
+
+    // https://bugs.chromium.org/p/v8/issues/detail?id=3056
+    var test3 = {};
+    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
+      test3[letter] = letter;
+    });
+    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
+      return false;
+    }
+
+    return true;
+  } catch (err) {
+    // We don't expect any of the above to throw, but better to be safe.
+    return false;
+  }
+}
+
+const assign = shouldUseNative()
+  ? Object.assign
+  : function (target, source) {
+      var from;
+      var to = toObject(target);
+      var symbols;
+
+      for (var s = 1; s < arguments.length; s++) {
+        from = Object(arguments[s]);
+
+        for (var key in from) {
+          if (hasOwnProperty.call(from, key)) {
+            to[key] = from[key];
+          }
+        }
+
+        if (getOwnPropertySymbols) {
+          symbols = getOwnPropertySymbols(from);
+          for (var i = 0; i < symbols.length; i++) {
+            if (propIsEnumerable.call(from, symbols[i])) {
+              to[symbols[i]] = from[symbols[i]];
+            }
+          }
+        }
+      }
+
+      return to;
+    };
+
+export default assign;
+
+================
+File: reference/modules/vary.ts
+================
+// @ts-nocheck
+
+/*!
+ * vary
+ * Copyright(c) 2014-2017 Douglas Christopher Wilson
+ * MIT Licensed
+ */
+
+'use strict';
+
+/**
+ * RegExp to match field-name in RFC 7230 sec 3.2
+ *
+ * field-name    = token
+ * token         = 1*tchar
+ * tchar         = "!" / "#" / "$" / "%" / "&" / "'" / "*"
+ *               / "+" / "-" / "." / "^" / "_" / "`" / "|" / "~"
+ *               / DIGIT / ALPHA
+ *               ; any VCHAR, except delimiters
+ */
+
+var FIELD_NAME_REGEXP = /^[!#$%&'*+\-.^_`|~0-9A-Za-z]+$/;
+
+/**
+ * Append a field to a vary header.
+ *
+ * @param {String} header
+ * @param {String|Array} field
+ * @return {String}
+ * @public
+ */
+
+function append(header, field) {
+  if (typeof header !== 'string') {
+    throw new TypeError('header argument is required');
+  }
+
+  if (!field) {
+    throw new TypeError('field argument is required');
+  }
+
+  // get fields array
+  var fields = !Array.isArray(field) ? parse(String(field)) : field;
+
+  // assert on invalid field names
+  for (var j = 0; j < fields.length; j++) {
+    if (!FIELD_NAME_REGEXP.test(fields[j])) {
+      throw new TypeError('field argument contains an invalid header name');
+    }
+  }
+
+  // existing, unspecified vary
+  if (header === '*') {
+    return header;
+  }
+
+  // enumerate current values
+  var val = header;
+  var vals = parse(header.toLowerCase());
+
+  // unspecified vary
+  if (fields.indexOf('*') !== -1 || vals.indexOf('*') !== -1) {
+    return '*';
+  }
+
+  for (var i = 0; i < fields.length; i++) {
+    var fld = fields[i].toLowerCase();
+
+    // append value (case-preserving)
+    if (vals.indexOf(fld) === -1) {
+      vals.push(fld);
+      val = val ? val + ', ' + fields[i] : fields[i];
+    }
+  }
+
+  return val;
+}
+
+/**
+ * Parse a vary header into an array.
+ *
+ * @param {String} header
+ * @return {Array}
+ * @private
+ */
+
+function parse(header) {
+  var end = 0;
+  var list = [];
+  var start = 0;
+
+  // gather tokens
+  for (var i = 0, len = header.length; i < len; i++) {
+    switch (header.charCodeAt(i)) {
+      case 0x20 /*   */:
+        if (start === end) {
+          start = end = i + 1;
+        }
+        break;
+      case 0x2c /* , */:
+        list.push(header.substring(start, end));
+        start = end = i + 1;
+        break;
+      default:
+        end = i + 1;
+        break;
+    }
+  }
+
+  // final token
+  list.push(header.substring(start, end));
+
+  return list;
+}
+
+/**
+ * Mark that a request is varied on a header field.
+ *
+ * @param {Object} res
+ * @param {String|Array} field
+ * @public
+ */
+
+function vary(res, field) {
+  if (!res || !res.getHeader || !res.setHeader) {
+    // quack quack
+    throw new TypeError('res argument is required');
+  }
+
+  // get existing header
+  var val = res.getHeader('Vary') || '';
+  var header = Array.isArray(val) ? val.join(', ') : String(val);
+
+  // set new header
+  if ((val = append(header, field))) {
+    res.setHeader('Vary', val);
+  }
+}
+
+export default vary;
+
+================
+File: reference/pages/api/index.ts
+================
+import * as Server from '@common/server';
+import * as Constants from '@common/constants';
+
+export default async function apiIndex(req, res) {
+  await Server.cors(req, res);
+
+  res.json({
+    success: true,
+    message: 'hey there, friend.',
+  });
+}
+
+================
+File: reference/pages/_app.tsx
+================
+import '@root/global.scss';
+
+import * as React from 'react';
+
+import Providers from '@components/Providers';
+
+function MyApp({ Component, pageProps }) {
+  return (
+    <Providers>
+      <Component {...pageProps} />
+    </Providers>
+  );
+}
+
+export default MyApp;
+
+================
+File: reference/pages/_document.tsx
+================
+import Document, { Html, Head, Main, NextScript } from 'next/document';
+
+export default class MyDocument extends Document {
+  render() {
+    return (
+      <Html>
+        <Head />
+        <body className="theme-light">
+          <Main />
+          <NextScript />
+        </body>
+      </Html>
+    );
+  }
+}
+
+================
+File: reference/.gitignore
+================
+.next
+.nova
+.env
+.env.local
+.env-custom-development
+.env-development
+.env-textile
+.env-production
+.DS_STORE
+DS_STORE
+yarn.lock
+node_modules
+dist
+analytics.txt
+package-lock.json
+
+/**/*/.DS_STORE
+/**/*/node_modules
+/**/*/.next
+/**/*/.data
+
+================
+File: reference/.prettierrc
+================
+{
+  "printWidth": 9999,
+  "tabWidth": 2,
+  "useTabs": false,
+  "semi": true,
+  "singleQuote": true,
+  "trailingComma": "es5",
+  "bracketSpacing": true,
+  "jsxBracketSameLine": false,
+  "arrowParens": "always",
+  "requirePragma": false,
+  "insertPragma": false,
+  "proseWrap": "preserve",
+  "parser": "babel-ts",
+  "overrides": [
+    {
+      "files": "*.js",
+      "options": {
+        "parser": "babel"
+      }
+    }
+  ]
+}
+
+================
+File: reference/global.scss
+================
+@font-face {
+  font-family: 'IosevkaTerm-Regular';
+  src: url('https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/6397be61-3ea4-459d-8a3e-fd95168cb214.woff2') format('woff2');
+}
+
+a,
+abbr,
+acronym,
+address,
+applet,
+article,
+aside,
+audio,
+b,
+big,
+blockquote,
+body,
+canvas,
+caption,
+center,
+cite,
+code,
+dd,
+del,
+details,
+dfn,
+div,
+dl,
+dt,
+embed,
+em,
+figure,
+figcaption,
+fieldset,
+footer,
+form,
+h1,
+h2,
+h3,
+h4,
+h5,
+h6,
+header,
+hgroup,
+html,
+i,
+iframe,
+img,
+ins,
+kbd,
+label,
+legend,
+li,
+mark,
+menu,
+nav,
+object,
+ol,
+output,
+p,
+pre,
+q,
+ruby,
+s,
+samp,
+section,
+small,
+span,
+strike,
+strong,
+sub,
+summary,
+sup,
+table,
+tbody,
+td,
+tfoot,
+th,
+thead,
+time,
+tr,
+tt,
+u,
+ul,
+var,
+video {
+  border: 0;
+  box-sizing: border-box;
+  margin: 0;
+  padding: 0;
+  vertical-align: baseline;
+}
+
+a {
+  background: var(--theme-border-subdued);
+  color: var(--theme-text);
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+    color: var(--theme-text);
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    color: var(--theme-text);
+    outline: 0;
+  }
+}
+
+ul {
+  list-style-position: inside;
+  list-style-type: '▪';
+  text-indent: -1ch;
+}
+
+ol {
+  list-style-type: '';
+  list-style-position: inside;
+  counter-reset: cupcake;
+  text-indent: -1ch;
+}
+
+ul ul,
+ul ol,
+ol ul,
+ol ol {
+  padding-left: 2ch;
+}
+
+ol li {
+  padding-left: 1ch;
+  counter-increment: cupcake;
+}
+
+ul li:before {
+  content: ' ';
+  display: inline-block;
+  width: 1ch;
+  height: 0;
+  visibility: hidden;
+}
+
+ol li:before {
+  content: counters(cupcake, '.') '. ';
+}
+
+article,
+aside,
+details,
+figcaption,
+figure,
+footer,
+header,
+hgroup,
+menu,
+nav,
+section {
+  display: block;
+}
+
+body.theme-blue {
+  --theme-overlay: var(--color-blue-20-5);
+  --theme-background: var(--color-blue-80);
+  --theme-background-modal: var(--color-blue-70);
+  --theme-background-modal-footer: var(--color-blue-90);
+  --theme-background-input: var(--color-blue-60);
+  --theme-border: var(--color-blue-70);
+  --theme-border-subdued: var(--color-blue-60-2);
+  --theme-text: var(--color-blue-10);
+  --theme-button: var(--color-blue-10);
+  --theme-button-text: var(--color-blue-80);
+  --theme-button-foreground: var(--color-blue-60);
+  --theme-button-background: var(--color-blue-70);
+  --theme-focused-foreground: var(--color-blue-50);
+  --theme-focused-foreground-subdued: var(--color-blue-50-5);
+}
+
+body.theme-light {
+  --theme-overlay: var(--color-black-100-4);
+  --theme-background: var(--color-white);
+  --theme-background-modal: var(--color-gray-20);
+  --theme-background-modal-footer: var(--color-gray-40);
+  --theme-background-input: var(--color-gray-10);
+  --theme-border: var(--color-gray-20);
+  --theme-border-subdued: var(--color-gray-40-2);
+  --theme-text: var(--color-black-100);
+  --theme-button: var(--color-black-100);
+  --theme-button-text: var(--color-white);
+  --theme-button-foreground: var(--color-gray-30);
+  --theme-button-background: var(--color-gray-20);
+  --theme-focused-foreground: var(--color-neon-green-50);
+  --theme-focused-foreground-subdued: var(--color-neon-green-50-5);
+}
+
+body.theme-dark {
+  --theme-overlay: var(--color-black-100-4);
+  --theme-background: var(--color-black-100);
+  --theme-background-modal: var(--color-gray-80);
+  --theme-background-modal-footer: var(--color-gray-70);
+  --theme-background-input: var(--color-gray-60);
+  --theme-border: var(--color-gray-80);
+  --theme-border-subdued: var(--color-gray-70-3);
+  --theme-text: var(--color-white);
+  --theme-button: var(--color-white);
+  --theme-button-text: var(--color-black-100);
+  --theme-button-foreground: var(--color-gray-90);
+  --theme-button-background: var(--color-gray-80);
+  --theme-focused-foreground: var(--color-daybreak-10);
+  --theme-focused-foreground-subdued: var(--color-daybreak-10-5);
+}
+
+body.theme-green {
+  --theme-overlay: var(--color-neon-green-100-4);
+  --theme-background: rgba(44, 255, 5);
+  --theme-background-modal: var(--color-neon-green-50);
+  --theme-background-modal-footer: var(--color-neon-green-50-5);
+  --theme-background-input: var(--color-neon-green-30);
+  --theme-border: var(--color-neon-green-60);
+  --theme-border-subdued: var(--color-neon-green-60-3);
+  --theme-text: var(--color-neon-green-100);
+  --theme-button: var(--color-neon-green-100);
+  --theme-button-text: var(--color-neon-green-10);
+  --theme-button-foreground: var(--color-neon-green-80);
+  --theme-button-background: var(--color-neon-green-70);
+  --theme-focused-foreground: rgba(255, 82, 243, 1);
+  --theme-focused-foreground-subdued: rgba(255, 82, 243, 0.5);
+}
+
+body.theme-black-red {
+  --theme-overlay: var(--color-red-100-4);
+  --theme-background: var(--color-black-100);
+  --theme-background-modal: var(--color-red-70);
+  --theme-background-modal-footer: var(--color-red-80);
+  --theme-background-input: var(--color-red-60);
+  --theme-border: var(--color-red-60-7);
+  --theme-border-subdued: var(--color-red-60-3);
+  --theme-text: var(--color-red-30);
+  --theme-button: var(--color-red-100);
+  --theme-button-text: var(--color-red-20);
+  --theme-button-foreground: var(--color-red-80);
+  --theme-button-background: var(--color-red-90);
+  --theme-focused-foreground: var(--color-gray-70);
+  --theme-focused-foreground-subdued: var(--color-red-70-4);
+}
+
+body.theme-black-teal {
+  --theme-overlay: var(--color-teal-100-4);
+  --theme-background: var(--color-black-100);
+  --theme-background-modal: var(--color-teal-70);
+  --theme-background-modal-footer: var(--color-teal-80);
+  --theme-background-input: var(--color-teal-60);
+  --theme-border: var(--color-teal-60-7);
+  --theme-border-subdued: var(--color-teal-60-3);
+  --theme-text: var(--color-teal-30);
+  --theme-button: var(--color-teal-100);
+  --theme-button-text: var(--color-teal-20);
+  --theme-button-foreground: var(--color-teal-80);
+  --theme-button-background: var(--color-teal-90);
+  --theme-focused-foreground: var(--color-gray-70);
+  --theme-focused-foreground-subdued: var(--color-teal-70-4);
+}
+
+body.theme-black-green {
+  --theme-overlay: var(--color-black-100-4);
+  --theme-background: var(--color-black-100);
+  --theme-background-modal: var(--color-gray-90);
+  --theme-background-modal-footer: var(--color-gray-80);
+  --theme-background-input: var(--color-gray-70);
+  --theme-border: var(--color-gray-80);
+  --theme-border-subdued: var(--color-gray-70-3);
+  --theme-text: var(--color-green-50);
+  --theme-button: var(--color-green-50);
+  --theme-button-text: var(--color-green-80);
+  --theme-button-foreground: var(--color-green-80);
+  --theme-button-background: var(--color-green-90);
+  --theme-focused-foreground: var(--color-gray-30);
+  --theme-focused-foreground-subdued: var(--color-gray-40);
+}
+
+body.font-use-berkeley-mono {
+  --font-family-mono: 'TX02Mono-Regular', sans-serif;
+}
+
+body.font-use-commit-mono {
+  --font-family-mono: 'CommitMono-Regular', sans-serif;
+}
+
+body.font-use-departure-mono {
+  --font-family-mono: 'DepartureMono-Regular', sans-serif;
+}
+
+body.font-use-fira-code {
+  --font-family-mono: 'FiraCode-Regular', sans-serif;
+}
+
+body.font-use-fragment-mono {
+  --font-family-mono: 'FragmentMono-Regular', sans-serif;
+}
+
+body.font-use-iosevka-term {
+  --font-family-mono: 'IosevkaTerm-Regular', sans-serif;
+}
+
+body.font-use-jet-brains-mono {
+  --font-family-mono: 'JetBrainsMono-Regular', sans-serif;
+}
+
+body.font-use-server-mono {
+  --font-family-mono: 'ServerMono-Regular', sans-serif;
+}
+
+body.font-use-sfmono-square {
+  --font-family-mono: 'SFMonoSquare-Regular', sans-serif;
+}
+
+#__next {
+}
+
+html,
+body {
+  --color-black-100: rgba(0, 0, 0, 1);
+  --color-black-100-1: rgba(0, 0, 0, 0.1);
+  --color-black-100-2: rgba(0, 0, 0, 0.2);
+  --color-black-100-4: rgba(0, 0, 0, 0.4);
+  --color-black-daybreak-100: rgba(4, 2, 0, 1);
+  --color-black-daybreak-100-4: rgba(4, 2, 0, 0.4);
+
+  --color-blue-10: rgba(237, 245, 255, 1);
+  --color-blue-100: rgba(0, 17, 65, 1);
+  --color-blue-20: rgba(208, 226, 255, 1);
+  --color-blue-20-1: rgba(208, 226, 255, 0.1);
+  --color-blue-20-2: rgba(208, 226, 255, 0.2);
+  --color-blue-20-5: rgba(208, 226, 255, 0.5);
+  --color-blue-30: rgba(166, 200, 255, 1);
+  --color-blue-40: rgba(120, 169, 255, 1);
+  --color-blue-50: rgba(69, 137, 255, 1);
+  --color-blue-50-5: rgba(69, 137, 255, 0.5);
+  --color-blue-60: rgba(15, 98, 254, 1);
+  --color-blue-60-2: rgba(15, 98, 254, 0.2);
+  --color-blue-70: rgba(0, 67, 206, 1);
+  --color-blue-80: rgba(0, 45, 156, 1);
+  --color-blue-80-4: rgba(0, 45, 156, 0.4);
+  --color-blue-80-6: rgba(0, 45, 156, 0.6);
+  --color-blue-90: rgba(0, 29, 108, 1);
+  --color-blue-90-6: rgba(0, 29, 108, 0.6);
+
+  --color-daybreak: rgba(255, 108, 4, 1);
+  --color-daybreak-1: rgba(255, 108, 4, 0.1);
+  --color-daybreak-10: rgba(239, 99, 0, 1);
+  --color-daybreak-10-5: rgba(239, 99, 0, 0.5);
+  --color-daybreak-2: rgba(255, 108, 4, 0.2);
+  --color-daybreak-20: rgba(220, 91, 0, 1);
+  --color-daybreak-30: rgba(200, 83, 0, 1);
+  --color-daybreak-4: rgba(255, 108, 4, 0.4);
+  --color-daybreak-40: rgba(180, 75, 0, 1);
+  --color-daybreak-40-2: rgba(180, 75, 0, 0.2);
+  --color-daybreak-50: rgba(161, 67, 0, 1);
+  --color-daybreak-60: rgba(141, 59, 0, 1);
+  --color-daybreak-70: rgba(121, 50, 0, 1);
+  --color-daybreak-70-3: rgba(121, 50, 0, 0.3);
+  --color-daybreak-80: rgba(102, 42, 0, 1);
+  --color-daybreak-90: rgba(82, 34, 0, 1);
+
+  --color-gold-30: rgba(241, 194, 27, 1);
+
+  --color-gray-10: rgba(244, 244, 244, 1);
+  --color-gray-100: rgba(22, 22, 22, 1);
+  --color-gray-20: rgba(224, 224, 224, 1);
+  --color-gray-20-7: rgba(224, 224, 224, 0.7);
+  --color-gray-30: rgba(198, 198, 198, 1);
+  --color-gray-30-7: rgba(224, 224, 224, 0.7);
+  --color-gray-40: rgba(168, 168, 168, 1);
+  --color-gray-40-2: rgba(168, 168, 168, 0.2);
+  --color-gray-50: rgba(141, 141, 141, 1);
+  --color-gray-60: rgba(111, 111, 111, 1);
+  --color-gray-70: rgba(82, 82, 82, 1);
+  --color-gray-70-3: rgba(82, 82, 82, 0.3);
+  --color-gray-70-4: rgba(82, 82, 82, 0.4);
+  --color-gray-80: rgba(57, 57, 57, 1);
+  --color-gray-80-6: rgba(57, 57, 57, 0.6);
+  --color-gray-90: rgba(38, 38, 38, 1);
+  --color-gray-90-6: rgba(38, 38, 38, 0.6);
+
+  --color-green-100: rgba(7, 25, 8, 1);
+  --color-green-100: rgba(7, 25, 8, 1);
+  --color-green-90: rgba(2, 45, 13, 1);
+  --color-green-80: rgba(4, 67, 23, 1);
+  --color-green-70: rgba(14, 96, 39, 1);
+  --color-green-60: rgba(25, 128, 56, 1);
+  --color-green-60-3: rgba(25, 128, 56, 0.3);
+  --color-green-50: rgba(36, 161, 72, 1);
+  --color-green-40: rgba(66, 190, 101, 1);
+  --color-green-30: rgba(111, 220, 140, 1);
+  --color-green-20: rgba(167, 240, 186, 1);
+  --color-green-10: rgba(222, 251, 230, 1);
+
+  --color-neon-green-10: rgba(242, 255, 233, 1);
+  --color-neon-green-100: rgba(10, 44, 2, 1);
+  --color-neon-green-100-1: rgba(10, 44, 2, 0.1);
+  --color-neon-green-100-2: rgba(10, 44, 2, 0.2);
+  --color-neon-green-100-4: rgba(10, 44, 2, 0.4);
+  --color-neon-green-20: rgba(213, 255, 191, 1);
+  --color-neon-green-30: rgba(178, 255, 148, 1);
+  --color-neon-green-40: rgba(138, 255, 104, 1);
+  --color-neon-green-50: rgba(92, 255, 59, 1);
+  --color-neon-green-50-5: rgba(92, 255, 59, 0.5);
+  --color-neon-green-60: rgba(46, 231, 29, 1);
+  --color-neon-green-60-3: rgba(46, 231, 29, 0.3);
+  --color-neon-green-70: rgba(0, 207, 0, 1);
+  --color-neon-green-70-3: rgba(0, 207, 0, 0.3);
+  --color-neon-green-70-7: rgba(0, 207, 0, 0.7);
+  --color-neon-green-80: rgba(0, 159, 0, 1);
+  --color-neon-green-80-1: rgba(0, 159, 0, 0.1);
+  --color-neon-green-80-2: rgba(0, 159, 0, 0.2);
+  --color-neon-green-80-4: rgba(0, 159, 0, 0.4);
+  --color-neon-green-90: rgba(16, 107, 2, 1);
+
+  --color-red-100: rgba(45, 7, 9, 1);
+  --color-red-100-4: rgba(45, 7, 9, 0.4);
+  --color-red-90: rgba(82, 4, 8, 1);
+  --color-red-80: rgba(117, 14, 19, 1);
+  --color-red-70: rgba(162, 25, 31, 1);
+  --color-red-60: rgba(218, 30, 40, 1);
+  --color-red-60-7: rgba(218, 30, 40, 0.7);
+  --color-red-60-3: rgba(218, 30, 40, 0.3);
+  --color-red-50: rgba(250, 77, 86, 1);
+  --color-red-40: rgba(255, 131, 137, 1);
+  --color-red-30: rgba(255, 179, 184, 1);
+  --color-red-20: rgba(255, 215, 217, 1);
+  --color-red-10: rgba(255, 241, 241, 1);
+
+  --color-teal-100: rgba(8, 26, 28, 1);
+  --color-teal-100-4: rgba(8, 26, 28, 0.4);
+  --color-teal-90: rgba(2, 43, 48, 1);
+  --color-teal-80: rgba(0, 65, 68, 1);
+  --color-teal-70: rgba(0, 93, 93, 1);
+  --color-teal-70-4: rgba(0, 93, 93, 0.4);
+  --color-teal-70-3: rgba(0, 93, 93, 0.3);
+  --color-teal-60: rgba(0, 125, 121, 1);
+  --color-teal-60-7: rgba(0, 125, 121, 0.7);
+  --color-teal-60-3: rgba(0, 125, 121, 0.3);
+  --color-teal-50: rgba(0, 157, 154, 1);
+  --color-teal-40: rgba(8, 189, 186, 1);
+  --color-teal-30: rgba(61, 219, 217, 1);
+  --color-teal-20: rgba(158, 240, 240, 1);
+  --color-teal-10: rgba(217, 251, 251, 1);
+
+  --color-white: rgba(255, 255, 255, 1);
+  --color-white-1: rgba(255, 255, 255, 0.1);
+  --color-white-2: rgba(255, 255, 255, 0.2);
+  --color-white-4: rgba(255, 255, 255, 0.4);
+
+  --font-family: -apple-system, BlinkMacSystemFont, helvetica neue, helvetica, sans-serif;
+  --font-family-mono: 'IosevkaTerm-Regular', Consolas, monaco, monospace;
+  --font-family-serif: Georgia, Times New Roman, serif;
+
+  --theme-text: var(--color-black-100);
+  --theme-line-height-base: 1.25;
+  --font-size: 20px;
+
+  --z-index-page: 1;
+  --z-index-page-select: 3;
+  --z-index-page-tooltips: 4;
+  --z-index-page-popover: 5;
+  --z-index-page-dropdown-menus: 6;
+  --z-index-page-modals: 10;
+
+  background: var(--theme-background);
+  color: var(--theme-text);
+  font-family: var(--font-family-mono);
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+
+  font-size: var(--font-size);
+  font-optical-sizing: auto;
+  font-weight: 400;
+  font-variant-numeric: tabular-nums lining-nums;
+
+  &::-webkit-scrollbar {
+    background: transparent;
+    height: calc(var(--theme-line-height-base) * 1rem);
+    width: 1ch;
+  }
+
+  &::-webkit-scrollbar-track {
+    background: var(--theme-background);
+  }
+
+  &::-webkit-scrollbar-thumb {
+    background: var(--theme-border);
+  }
+
+  &::-webkit-scrollbar-thumb:hover {
+    background: var(--theme-border);
+  }
+
+  @media (max-width: 568px) {
+    --font-size: 16px;
+  }
+}
+
+================
+File: reference/LICENSE.md
+================
+Copyright (c) 2024 INTERNET DEVELOPMENT STUDIO COMPANY
+
+Permission is hereby granted, free of charge, to any person obtaining
+a copy of this software and associated documentation files (the
+"Software"), to deal in the Software without restriction, including
+without limitation the rights to use, copy, modify, merge, publish,
+distribute, sublicense, and/or sell copies of the Software, and to
+permit persons to whom the Software is furnished to do so, subject to
+the following conditions:
+
+The above copyright notice and this permission notice shall be
+included in all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+
+================
+File: reference/package.json
+================
+{
+  "name": "INTDEV",
+  "description": "A vocation guild and great hall for webmasters. We practice the craft of designing, building, shipping, and maintaining websites, platforms, brands, and applications—end to end.",
+  "engines": {
+    "node": ">=18"
+  },
+  "license": "MIT",
+  "version": "0.0.1",
+  "scripts": {
+    "dev": "next -p 10000",
+    "build": "next build",
+    "start": "PORT=10000 next start",
+    "lint": "next lint"
+  },
+  "dependencies": {
+    "next": "^15.1.3",
+    "react": "^19.0.0",
+    "react-dom": "^19.0.0",
+    "sass": "1.83.0"
+  },
+  "devDependencies": {
+    "@types/node": "^22.10.2",
+    "@types/react": "^19.0.2",
+    "ts-node": "^10.9.2",
+    "typescript": "^5.7.2"
+  }
+}
+
+================
+File: reference/README.md
+================
+# www-internet-v2
+
+TODO
+
+```sh
+npm install
+npm run dev
+```
+
+Go to `http://localhost:10000` in your browser of choice.
+
+### Contact
+
+If you have questions ping me on Twitter, [@wwwjim](https://www.twitter.com/wwwjim). Or you can ping [@internetxstudio](https://x.com/internetxstudio).
+
+================
+File: reference/tsconfig.json
+================
+{
+  "compilerOptions": {
+    "baseUrl": ".",
+    "paths": {
+      "@root/*": [
+        "./*"
+      ],
+      "@system/*": [
+        "./system/*"
+      ],
+      "@demos/*": [
+        "./demos/*"
+      ],
+      "@common/*": [
+        "./common/*"
+      ],
+      "@data/*": [
+        "./data/*"
+      ],
+      "@components/*": [
+        "./components/*"
+      ],
+      "@pages/*": [
+        "./pages/*"
+      ],
+      "@modules/*": [
+        "./modules/*"
+      ]
+    },
+    "target": "es5",
+    "lib": [
+      "dom",
+      "dom.iterable",
+      "esnext"
+    ],
+    "allowJs": true,
+    "skipLibCheck": true,
+    "strict": false,
+    "forceConsistentCasingInFileNames": true,
+    "noEmit": true,
+    "esModuleInterop": true,
+    "module": "esnext",
+    "moduleResolution": "node",
+    "resolveJsonModule": true,
+    "isolatedModules": true,
+    "jsx": "preserve",
+    "incremental": true,
+    "plugins": [
+      {
+        "name": "next"
+      }
+    ],
+    "strictNullChecks": true
+  },
+  "exclude": [
+    "node_modules",
+    "**/*.spec.ts"
+  ],
+  "include": [
+    "next-env.d.ts",
+    "**/*.ts",
+    "**/*.tsx",
+    ".next/types/**/*.ts"
+  ]
+}
+
+================
+File: src/app/globals.css
+================
+@tailwind base;
+@tailwind components;
+@tailwind utilities;
+
+:root {
+  --background: #ffffff;
+  --foreground: #171717;
+}
+
+@media (prefers-color-scheme: dark) {
+  :root {
+    --background: #0a0a0a;
+    --foreground: #ededed;
+  }
+}
+
+body {
+  color: var(--foreground);
+  background: var(--background);
+  font-family: Arial, Helvetica, sans-serif;
+}
+
+================
+File: src/app/layout.tsx
+================
+import type { Metadata } from "next";
+import { Geist, Geist_Mono } from "next/font/google";
+import "./globals.css";
+
+const geistSans = Geist({
+  variable: "--font-geist-sans",
+  subsets: ["latin"],
+});
+
+const geistMono = Geist_Mono({
+  variable: "--font-geist-mono",
+  subsets: ["latin"],
+});
+
+export const metadata: Metadata = {
+  title: "Create Next App",
+  description: "Generated by create next app",
+};
+
+export default function RootLayout({
+  children,
+}: Readonly<{
+  children: React.ReactNode;
+}>) {
+  return (
+    <html lang="en">
+      <body
+        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
+      >
+        {children}
+      </body>
+    </html>
+  );
+}
+
+================
+File: src/app/page.tsx
+================
+import Image from "next/image";
+
+export default function Home() {
+  return (
+    <div className="grid grid-rows-[20px_1fr_20px] items-center justify-items-center min-h-screen p-8 pb-20 gap-16 sm:p-20 font-[family-name:var(--font-geist-sans)]">
+      <main className="flex flex-col gap-8 row-start-2 items-center sm:items-start">
+        <Image
+          className="dark:invert"
+          src="/next.svg"
+          alt="Next.js logo"
+          width={180}
+          height={38}
+          priority
+        />
+        <ol className="list-inside list-decimal text-sm text-center sm:text-left font-[family-name:var(--font-geist-mono)]">
+          <li className="mb-2">
+            Get started by editing{" "}
+            <code className="bg-black/[.05] dark:bg-white/[.06] px-1 py-0.5 rounded font-semibold">
+              src/app/page.tsx
+            </code>
+            .
+          </li>
+          <li>Save and see your changes instantly.</li>
+        </ol>
+
+        <div className="flex gap-4 items-center flex-col sm:flex-row">
+          <a
+            className="rounded-full border border-solid border-transparent transition-colors flex items-center justify-center bg-foreground text-background gap-2 hover:bg-[#383838] dark:hover:bg-[#ccc] text-sm sm:text-base h-10 sm:h-12 px-4 sm:px-5"
+            href="https://vercel.com/new?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
+            target="_blank"
+            rel="noopener noreferrer"
+          >
+            <Image
+              className="dark:invert"
+              src="/vercel.svg"
+              alt="Vercel logomark"
+              width={20}
+              height={20}
+            />
+            Deploy now
+          </a>
+          <a
+            className="rounded-full border border-solid border-black/[.08] dark:border-white/[.145] transition-colors flex items-center justify-center hover:bg-[#f2f2f2] dark:hover:bg-[#1a1a1a] hover:border-transparent text-sm sm:text-base h-10 sm:h-12 px-4 sm:px-5 sm:min-w-44"
+            href="https://nextjs.org/docs?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
+            target="_blank"
+            rel="noopener noreferrer"
+          >
+            Read our docs
+          </a>
+        </div>
+      </main>
+      <footer className="row-start-3 flex gap-6 flex-wrap items-center justify-center">
+        <a
+          className="flex items-center gap-2 hover:underline hover:underline-offset-4"
+          href="https://nextjs.org/learn?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
+          target="_blank"
+          rel="noopener noreferrer"
+        >
+          <Image
+            aria-hidden
+            src="/file.svg"
+            alt="File icon"
+            width={16}
+            height={16}
+          />
+          Learn
+        </a>
+        <a
+          className="flex items-center gap-2 hover:underline hover:underline-offset-4"
+          href="https://vercel.com/templates?framework=next.js&utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
+          target="_blank"
+          rel="noopener noreferrer"
+        >
+          <Image
+            aria-hidden
+            src="/window.svg"
+            alt="Window icon"
+            width={16}
+            height={16}
+          />
+          Examples
+        </a>
+        <a
+          className="flex items-center gap-2 hover:underline hover:underline-offset-4"
+          href="https://nextjs.org?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
+          target="_blank"
+          rel="noopener noreferrer"
+        >
+          <Image
+            aria-hidden
+            src="/globe.svg"
+            alt="Globe icon"
+            width={16}
+            height={16}
+          />
+          Go to nextjs.org →
+        </a>
+      </footer>
+    </div>
+  );
+}
+
+================
+File: .gitignore
+================
+# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
+
+# dependencies
+/node_modules
+/.pnp
+.pnp.*
+.yarn/*
+!.yarn/patches
+!.yarn/plugins
+!.yarn/releases
+!.yarn/versions
+
+# testing
+/coverage
+
+# next.js
+/.next/
+/out/
+
+# production
+/build
+
+# misc
+.DS_Store
+*.pem
+
+# debug
+npm-debug.log*
+yarn-debug.log*
+yarn-error.log*
+.pnpm-debug.log*
+
+# env files (can opt-in for committing if needed)
+.env*
+
+# vercel
+.vercel
+
+# typescript
+*.tsbuildinfo
+next-env.d.ts
+
+================
+File: eslint.config.mjs
+================
+import { dirname } from "path";
+import { fileURLToPath } from "url";
+import { FlatCompat } from "@eslint/eslintrc";
+
+const __filename = fileURLToPath(import.meta.url);
+const __dirname = dirname(__filename);
+
+const compat = new FlatCompat({
+  baseDirectory: __dirname,
+});
+
+const eslintConfig = [
+  ...compat.extends("next/core-web-vitals", "next/typescript"),
+];
+
+export default eslintConfig;
+
+================
+File: next.config.ts
+================
+import type { NextConfig } from "next";
+
+const nextConfig: NextConfig = {
+  /* config options here */
+};
+
+export default nextConfig;
+
+================
+File: package.json
+================
+{
+  "name": "adam-web",
+  "version": "0.1.0",
+  "private": true,
+  "scripts": {
+    "dev": "next dev --turbopack",
+    "build": "next build",
+    "start": "next start",
+    "lint": "next lint"
+  },
+  "dependencies": {
+    "react": "^19.0.0",
+    "react-dom": "^19.0.0",
+    "next": "15.1.6"
+  },
+  "devDependencies": {
+    "typescript": "^5",
+    "@types/node": "^20",
+    "@types/react": "^19",
+    "@types/react-dom": "^19",
+    "postcss": "^8",
+    "tailwindcss": "^3.4.1",
+    "eslint": "^9",
+    "eslint-config-next": "15.1.6",
+    "@eslint/eslintrc": "^3"
+  }
+}
+
+================
+File: postcss.config.mjs
+================
+/** @type {import('postcss-load-config').Config} */
+const config = {
+  plugins: {
+    tailwindcss: {},
+  },
+};
+
+export default config;
+
+================
+File: README.md
+================
+This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).
+
+## Getting Started
+
+First, run the development server:
+
+```bash
+npm run dev
+# or
+yarn dev
+# or
+pnpm dev
+# or
+bun dev
+```
+
+Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.
+
+You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.
+
+This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.
+
+## Learn More
+
+To learn more about Next.js, take a look at the following resources:
+
+- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
+- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.
+
+You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!
+
+## Deploy on Vercel
+
+The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.
+
+Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
+
+================
+File: tailwind.config.ts
+================
+import type { Config } from "tailwindcss";
+
+export default {
+  content: [
+    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
+    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
+    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
+  ],
+  theme: {
+    extend: {
+      colors: {
+        background: "var(--background)",
+        foreground: "var(--foreground)",
+      },
+    },
+  },
+  plugins: [],
+} satisfies Config;
+
+================
+File: tsconfig.json
+================
+{
+  "compilerOptions": {
+    "target": "ES2017",
+    "lib": ["dom", "dom.iterable", "esnext"],
+    "allowJs": true,
+    "skipLibCheck": true,
+    "strict": true,
+    "noEmit": true,
+    "esModuleInterop": true,
+    "module": "esnext",
+    "moduleResolution": "bundler",
+    "resolveJsonModule": true,
+    "isolatedModules": true,
+    "jsx": "preserve",
+    "incremental": true,
+    "plugins": [
+      {
+        "name": "next"
+      }
+    ],
+    "paths": {
+      "@/*": ["./src/*"]
+    }
+  },
+  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
+  "exclude": ["node_modules"]
+}
+ // make a new git repo adam-web, it's a personal site for my friend
+
+use this for all text: https://www.reactbits.dev/text-animations/ascii-text
+
+with a nice emoji ascii skateboard hero, and a nice floating header like raycast with 'adam delaney' in the left, and in the right some nav buttons to go to bio, projects pages 
+
+next15/react19/tailwind v4  //  please just use the react-bits ascii for the emoji hero? i have added a reference webapp in reference/www-internet-v2 - i want you to copy over the components wholesale from that reference directory into the adam-web src/ directory, along with any other modules, maybe the entire reference src/ dir, along with any needed config to get things working in adam-web? we'll need the scss set up to work exactly like in the reference repo

# 2025-02-07 23:34:17.482215
+a

# 2025-02-07 23:36:42.087519
+This file is a merged representation of the entire codebase, combining all repository files into a single document.
+Generated by Repomix on: 2025-02-08T07:31:27.472Z
+
+================================================================
+File Summary
+================================================================
+
+Purpose:
+--------
+This file contains a packed representation of the entire repository's contents.
+It is designed to be easily consumable by AI systems for analysis, code review,
+or other automated processes.
+
+File Format:
+------------
+The content is organized as follows:
+1. This summary section
+2. Repository information
+3. Directory structure
+4. Multiple file entries, each consisting of:
+  a. A separator line (================)
+  b. The file path (File: path/to/file)
+  c. Another separator line
+  d. The full contents of the file
+  e. A blank line
+
+Usage Guidelines:
+-----------------
+- This file should be treated as read-only. Any changes should be made to the
+  original repository files, not this packed version.
+- When processing this file, use the file path to distinguish
+  between different files in the repository.
+- Be aware that this file may contain sensitive information. Handle it with
+  the same level of security as you would the original repository.
+
+Notes:
+------
+- Some files may have been excluded based on .gitignore rules and Repomix's
+  configuration.
+- Binary files are not included in this packed representation. Please refer to
+  the Repository Structure section for a complete list of file paths, including
+  binary files.
+
+Additional Info:
+----------------
+
+================================================================
+Directory Structure
+================================================================
+public/
+  file.svg
+  globe.svg
+  next.svg
+  vercel.svg
+  window.svg
+reference/
+  .git/
+    hooks/
+      applypatch-msg.sample
+      commit-msg.sample
+      fsmonitor-watchman.sample
+      post-update.sample
+      pre-applypatch.sample
+      pre-commit.sample
+      pre-merge-commit.sample
+      pre-push.sample
+      pre-rebase.sample
+      pre-receive.sample
+      prepare-commit-msg.sample
+      push-to-checkout.sample
+      update.sample
+    info/
+      exclude
+    logs/
+      refs/
+        heads/
+          main
+        remotes/
+          origin/
+            HEAD
+      HEAD
+    refs/
+      heads/
+        main
+      remotes/
+        origin/
+          HEAD
+    config
+    description
+    FETCH_HEAD
+    HEAD
+    packed-refs
+  app/
+    office/
+      head.tsx
+      layout.tsx
+      page.tsx
+    head.tsx
+    layout.tsx
+    manifest.ts
+    page.tsx
+    robots.ts
+    sitemap.ts
+  common/
+    constants.ts
+    hooks.ts
+    position.ts
+    queries.ts
+    server.ts
+    utilities.ts
+  components/
+    detectors/
+      OutsideElementEvent.tsx
+    examples/
+      AS400.module.scss
+      AS400.tsx
+      DashboardRadar.module.scss
+      DashboardRadar.tsx
+      Denabase.module.scss
+      Denabase.tsx
+      MessagesInterface.tsx
+      UpdatingDataTable.tsx
+    modals/
+      ModalAlert.module.scss
+      ModalAlert.tsx
+      ModalCanvasPlatformer.module.scss
+      ModalCanvasPlatformer.tsx
+      ModalCanvasSnake.module.scss
+      ModalCanvasSnake.tsx
+      ModalChess.module.scss
+      ModalChess.tsx
+      ModalCreateAccount.module.scss
+      ModalCreateAccount.tsx
+      ModalError.module.scss
+      ModalError.tsx
+      ModalMatrixModes.module.scss
+      ModalMatrixModes.tsx
+    page/
+      DefaultActionBar.module.scss
+      DefaultActionBar.tsx
+      DefaultLayout.module.scss
+      DefaultLayout.tsx
+      ModalContext.tsx
+      root.module.scss
+    svg/
+      InternetDevelopmentLogo.tsx
+      InternetDevelopmentLogoMark.tsx
+      Sphere.tsx
+    Accordion.module.scss
+    Accordion.tsx
+    ActionBar.module.scss
+    ActionBar.tsx
+    ActionButton.module.scss
+    ActionButton.tsx
+    ActionListItem.module.scss
+    ActionListItem.tsx
+    AlertBanner.module.scss
+    AlertBanner.tsx
+    Avatar.module.scss
+    Avatar.tsx
+    Badge.module.scss
+    Badge.tsx
+    BarLoader.module.scss
+    BarLoader.tsx
+    BarProgress.module.scss
+    BarProgress.tsx
+    Block.module.scss
+    Block.tsx
+    BlockLoader.module.scss
+    BlockLoader.tsx
+    BreadCrumbs.module.scss
+    BreadCrumbs.tsx
+    Button.module.scss
+    Button.tsx
+    ButtonGroup.module.scss
+    ButtonGroup.tsx
+    Canvas.module.scss
+    Canvas.tsx
+    CanvasPlatformer.module.scss
+    CanvasPlatformer.tsx
+    CanvasSnake.module.scss
+    CanvasSnake.tsx
+    Card.module.scss
+    Card.tsx
+    CardDouble.module.scss
+    CardDouble.tsx
+    Checkbox.module.scss
+    Checkbox.tsx
+    Chessboard.module.scss
+    Chessboard.tsx
+    CodeBlock.module.scss
+    CodeBlock.tsx
+    ComboBox.module.scss
+    ComboBox.tsx
+    ContentFluid.module.scss
+    ContentFluid.tsx
+    DataTable.module.scss
+    DataTable.tsx
+    DatePicker.module.scss
+    DatePicker.tsx
+    DebugGrid.tsx
+    DefaultMetaTags.tsx
+    Dialog.module.scss
+    Dialog.tsx
+    Divider.module.scss
+    Divider.tsx
+    Drawer.module.scss
+    Drawer.tsx
+    DropdownMenu.module.scss
+    DropdownMenu.tsx
+    DropdownMenuTrigger.module.scss
+    DropdownMenuTrigger.tsx
+    Grid.module.scss
+    Grid.tsx
+    HoverComponentTrigger.module.scss
+    HoverComponentTrigger.tsx
+    Indent.module.scss
+    Indent.tsx
+    Input.module.scss
+    Input.tsx
+    ListItem.module.scss
+    ListItem.tsx
+    MatrixLoader.module.scss
+    MatrixLoader.tsx
+    Message.module.scss
+    Message.tsx
+    MessageViewer.module.scss
+    MessageViewer.tsx
+    ModalStack.module.scss
+    ModalStack.tsx
+    ModalTrigger.tsx
+    Navigation.module.scss
+    Navigation.tsx
+    NumberRangeSlider.module.scss
+    NumberRangeSlider.tsx
+    Popover.module.scss
+    Popover.tsx
+    Providers.tsx
+    RadioButton.module.scss
+    RadioButton.tsx
+    RadioButtonGroup.tsx
+    Row.module.scss
+    Row.tsx
+    RowEllipsis.module.scss
+    RowEllipsis.tsx
+    RowSpaceBetween.module.scss
+    RowSpaceBetween.tsx
+    Select.module.scss
+    Select.tsx
+    SidebarLayout.module.scss
+    SidebarLayout.tsx
+    Table.module.scss
+    Table.tsx
+    TableColumn.module.scss
+    TableColumn.tsx
+    TableRow.module.scss
+    TableRow.tsx
+    Text.module.scss
+    Text.tsx
+    TextArea.module.scss
+    TextArea.tsx
+    Tooltip.module.scss
+    Tooltip.tsx
+    TreeView.module.scss
+    TreeView.tsx
+  modules/
+    hotkeys/
+      bound-hotkeys-proxy-provider.tsx
+      hotkeys-provider.tsx
+      index.ts
+      is-hotkey-pressed.ts
+      parse-hotkeys.ts
+      types.ts
+      use-deep-equal-memo.ts
+      use-hotkeys.ts
+      use-record-hotkeys.ts
+      validators.ts
+    cors.ts
+    object-assign.ts
+    vary.ts
+  pages/
+    api/
+      index.ts
+    _app.tsx
+    _document.tsx
+  .gitignore
+  .prettierrc
+  global.scss
+  LICENSE.md
+  package.json
+  README.md
+  tsconfig.json
+src/
+  app/
+    globals.css
+    layout.tsx
+    page.tsx
+.gitignore
+eslint.config.mjs
+next.config.ts
+package.json
+postcss.config.mjs
+README.md
+tailwind.config.ts
+tsconfig.json
+
+================================================================
+Files
+================================================================
+
+================
+File: public/file.svg
+================
+<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
+
+================
+File: public/globe.svg
+================
+<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
+
+================
+File: public/next.svg
+================
+<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
+
+================
+File: public/vercel.svg
+================
+<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
+
+================
+File: public/window.svg
+================
+<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
+
+================
+File: reference/.git/hooks/applypatch-msg.sample
+================
+#!/bin/sh
+#
+# An example hook script to check the commit log message taken by
+# applypatch from an e-mail message.
+#
+# The hook should exit with non-zero status after issuing an
+# appropriate message if it wants to stop the commit.  The hook is
+# allowed to edit the commit message file.
+#
+# To enable this hook, rename this file to "applypatch-msg".
+
+. git-sh-setup
+commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
+test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
+:
+
+================
+File: reference/.git/hooks/commit-msg.sample
+================
+#!/bin/sh
+#
+# An example hook script to check the commit log message.
+# Called by "git commit" with one argument, the name of the file
+# that has the commit message.  The hook should exit with non-zero
+# status after issuing an appropriate message if it wants to stop the
+# commit.  The hook is allowed to edit the commit message file.
+#
+# To enable this hook, rename this file to "commit-msg".
+
+# Uncomment the below to add a Signed-off-by line to the message.
+# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
+# hook is more suited to it.
+#
+# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
+# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"
+
+# This example catches duplicate Signed-off-by lines.
+
+test "" = "$(grep '^Signed-off-by: ' "$1" |
+	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
+	echo >&2 Duplicate Signed-off-by lines.
+	exit 1
+}
+
+================
+File: reference/.git/hooks/fsmonitor-watchman.sample
+================
+#!/usr/bin/perl
+
+use strict;
+use warnings;
+use IPC::Open2;
+
+# An example hook script to integrate Watchman
+# (https://facebook.github.io/watchman/) with git to speed up detecting
+# new and modified files.
+#
+# The hook is passed a version (currently 2) and last update token
+# formatted as a string and outputs to stdout a new update token and
+# all files that have been modified since the update token. Paths must
+# be relative to the root of the working tree and separated by a single NUL.
+#
+# To enable this hook, rename this file to "query-watchman" and set
+# 'git config core.fsmonitor .git/hooks/query-watchman'
+#
+my ($version, $last_update_token) = @ARGV;
+
+# Uncomment for debugging
+# print STDERR "$0 $version $last_update_token\n";
+
+# Check the hook interface version
+if ($version ne 2) {
+	die "Unsupported query-fsmonitor hook version '$version'.\n" .
+	    "Falling back to scanning...\n";
+}
+
+my $git_work_tree = get_working_dir();
+
+my $retry = 1;
+
+my $json_pkg;
+eval {
+	require JSON::XS;
+	$json_pkg = "JSON::XS";
+	1;
+} or do {
+	require JSON::PP;
+	$json_pkg = "JSON::PP";
+};
+
+launch_watchman();
+
+sub launch_watchman {
+	my $o = watchman_query();
+	if (is_work_tree_watched($o)) {
+		output_result($o->{clock}, @{$o->{files}});
+	}
+}
+
+sub output_result {
+	my ($clockid, @files) = @_;
+
+	# Uncomment for debugging watchman output
+	# open (my $fh, ">", ".git/watchman-output.out");
+	# binmode $fh, ":utf8";
+	# print $fh "$clockid\n@files\n";
+	# close $fh;
+
+	binmode STDOUT, ":utf8";
+	print $clockid;
+	print "\0";
+	local $, = "\0";
+	print @files;
+}
+
+sub watchman_clock {
+	my $response = qx/watchman clock "$git_work_tree"/;
+	die "Failed to get clock id on '$git_work_tree'.\n" .
+		"Falling back to scanning...\n" if $? != 0;
+
+	return $json_pkg->new->utf8->decode($response);
+}
+
+sub watchman_query {
+	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
+	or die "open2() failed: $!\n" .
+	"Falling back to scanning...\n";
+
+	# In the query expression below we're asking for names of files that
+	# changed since $last_update_token but not from the .git folder.
+	#
+	# To accomplish this, we're using the "since" generator to use the
+	# recency index to select candidate nodes and "fields" to limit the
+	# output to file names only. Then we're using the "expression" term to
+	# further constrain the results.
+	my $last_update_line = "";
+	if (substr($last_update_token, 0, 1) eq "c") {
+		$last_update_token = "\"$last_update_token\"";
+		$last_update_line = qq[\n"since": $last_update_token,];
+	}
+	my $query = <<"	END";
+		["query", "$git_work_tree", {$last_update_line
+			"fields": ["name"],
+			"expression": ["not", ["dirname", ".git"]]
+		}]
+	END
+
+	# Uncomment for debugging the watchman query
+	# open (my $fh, ">", ".git/watchman-query.json");
+	# print $fh $query;
+	# close $fh;
+
+	print CHLD_IN $query;
+	close CHLD_IN;
+	my $response = do {local $/; <CHLD_OUT>};
+
+	# Uncomment for debugging the watch response
+	# open ($fh, ">", ".git/watchman-response.json");
+	# print $fh $response;
+	# close $fh;
+
+	die "Watchman: command returned no output.\n" .
+	"Falling back to scanning...\n" if $response eq "";
+	die "Watchman: command returned invalid output: $response\n" .
+	"Falling back to scanning...\n" unless $response =~ /^\{/;
+
+	return $json_pkg->new->utf8->decode($response);
+}
+
+sub is_work_tree_watched {
+	my ($output) = @_;
+	my $error = $output->{error};
+	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
+		$retry--;
+		my $response = qx/watchman watch "$git_work_tree"/;
+		die "Failed to make watchman watch '$git_work_tree'.\n" .
+		    "Falling back to scanning...\n" if $? != 0;
+		$output = $json_pkg->new->utf8->decode($response);
+		$error = $output->{error};
+		die "Watchman: $error.\n" .
+		"Falling back to scanning...\n" if $error;
+
+		# Uncomment for debugging watchman output
+		# open (my $fh, ">", ".git/watchman-output.out");
+		# close $fh;
+
+		# Watchman will always return all files on the first query so
+		# return the fast "everything is dirty" flag to git and do the
+		# Watchman query just to get it over with now so we won't pay
+		# the cost in git to look up each individual file.
+		my $o = watchman_clock();
+		$error = $output->{error};
+
+		die "Watchman: $error.\n" .
+		"Falling back to scanning...\n" if $error;
+
+		output_result($o->{clock}, ("/"));
+		$last_update_token = $o->{clock};
+
+		eval { launch_watchman() };
+		return 0;
+	}
+
+	die "Watchman: $error.\n" .
+	"Falling back to scanning...\n" if $error;
+
+	return 1;
+}
+
+sub get_working_dir {
+	my $working_dir;
+	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
+		$working_dir = Win32::GetCwd();
+		$working_dir =~ tr/\\/\//;
+	} else {
+		require Cwd;
+		$working_dir = Cwd::cwd();
+	}
+
+	return $working_dir;
+}
+
+================
+File: reference/.git/hooks/post-update.sample
+================
+#!/bin/sh
+#
+# An example hook script to prepare a packed repository for use over
+# dumb transports.
+#
+# To enable this hook, rename this file to "post-update".
+
+exec git update-server-info
+
+================
+File: reference/.git/hooks/pre-applypatch.sample
+================
+#!/bin/sh
+#
+# An example hook script to verify what is about to be committed
+# by applypatch from an e-mail message.
+#
+# The hook should exit with non-zero status after issuing an
+# appropriate message if it wants to stop the commit.
+#
+# To enable this hook, rename this file to "pre-applypatch".
+
+. git-sh-setup
+precommit="$(git rev-parse --git-path hooks/pre-commit)"
+test -x "$precommit" && exec "$precommit" ${1+"$@"}
+:
+
+================
+File: reference/.git/hooks/pre-commit.sample
+================
+#!/bin/sh
+#
+# An example hook script to verify what is about to be committed.
+# Called by "git commit" with no arguments.  The hook should
+# exit with non-zero status after issuing an appropriate message if
+# it wants to stop the commit.
+#
+# To enable this hook, rename this file to "pre-commit".
+
+if git rev-parse --verify HEAD >/dev/null 2>&1
+then
+	against=HEAD
+else
+	# Initial commit: diff against an empty tree object
+	against=$(git hash-object -t tree /dev/null)
+fi
+
+# If you want to allow non-ASCII filenames set this variable to true.
+allownonascii=$(git config --type=bool hooks.allownonascii)
+
+# Redirect output to stderr.
+exec 1>&2
+
+# Cross platform projects tend to avoid non-ASCII filenames; prevent
+# them from being added to the repository. We exploit the fact that the
+# printable range starts at the space character and ends with tilde.
+if [ "$allownonascii" != "true" ] &&
+	# Note that the use of brackets around a tr range is ok here, (it's
+	# even required, for portability to Solaris 10's /usr/bin/tr), since
+	# the square bracket bytes happen to fall in the designated range.
+	test $(git diff --cached --name-only --diff-filter=A -z $against |
+	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
+then
+	cat <<\EOF
+Error: Attempt to add a non-ASCII file name.
+
+This can cause problems if you want to work with people on other platforms.
+
+To be portable it is advisable to rename the file.
+
+If you know what you are doing you can disable this check using:
+
+  git config hooks.allownonascii true
+EOF
+	exit 1
+fi
+
+# If there are whitespace errors, print the offending file names and fail.
+exec git diff-index --check --cached $against --
+
+================
+File: reference/.git/hooks/pre-merge-commit.sample
+================
+#!/bin/sh
+#
+# An example hook script to verify what is about to be committed.
+# Called by "git merge" with no arguments.  The hook should
+# exit with non-zero status after issuing an appropriate message to
+# stderr if it wants to stop the merge commit.
+#
+# To enable this hook, rename this file to "pre-merge-commit".
+
+. git-sh-setup
+test -x "$GIT_DIR/hooks/pre-commit" &&
+        exec "$GIT_DIR/hooks/pre-commit"
+:
+
+================
+File: reference/.git/hooks/pre-push.sample
+================
+#!/bin/sh
+
+# An example hook script to verify what is about to be pushed.  Called by "git
+# push" after it has checked the remote status, but before anything has been
+# pushed.  If this script exits with a non-zero status nothing will be pushed.
+#
+# This hook is called with the following parameters:
+#
+# $1 -- Name of the remote to which the push is being done
+# $2 -- URL to which the push is being done
+#
+# If pushing without using a named remote those arguments will be equal.
+#
+# Information about the commits which are being pushed is supplied as lines to
+# the standard input in the form:
+#
+#   <local ref> <local oid> <remote ref> <remote oid>
+#
+# This sample shows how to prevent push of commits where the log message starts
+# with "WIP" (work in progress).
+
+remote="$1"
+url="$2"
+
+zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
+
+while read local_ref local_oid remote_ref remote_oid
+do
+	if test "$local_oid" = "$zero"
+	then
+		# Handle delete
+		:
+	else
+		if test "$remote_oid" = "$zero"
+		then
+			# New branch, examine all commits
+			range="$local_oid"
+		else
+			# Update to existing branch, examine new commits
+			range="$remote_oid..$local_oid"
+		fi
+
+		# Check for WIP commit
+		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
+		if test -n "$commit"
+		then
+			echo >&2 "Found WIP commit in $local_ref, not pushing"
+			exit 1
+		fi
+	fi
+done
+
+exit 0
+
+================
+File: reference/.git/hooks/pre-rebase.sample
+================
+#!/bin/sh
+#
+# Copyright (c) 2006, 2008 Junio C Hamano
+#
+# The "pre-rebase" hook is run just before "git rebase" starts doing
+# its job, and can prevent the command from running by exiting with
+# non-zero status.
+#
+# The hook is called with the following parameters:
+#
+# $1 -- the upstream the series was forked from.
+# $2 -- the branch being rebased (or empty when rebasing the current branch).
+#
+# This sample shows how to prevent topic branches that are already
+# merged to 'next' branch from getting rebased, because allowing it
+# would result in rebasing already published history.
+
+publish=next
+basebranch="$1"
+if test "$#" = 2
+then
+	topic="refs/heads/$2"
+else
+	topic=`git symbolic-ref HEAD` ||
+	exit 0 ;# we do not interrupt rebasing detached HEAD
+fi
+
+case "$topic" in
+refs/heads/??/*)
+	;;
+*)
+	exit 0 ;# we do not interrupt others.
+	;;
+esac
+
+# Now we are dealing with a topic branch being rebased
+# on top of master.  Is it OK to rebase it?
+
+# Does the topic really exist?
+git show-ref -q "$topic" || {
+	echo >&2 "No such branch $topic"
+	exit 1
+}
+
+# Is topic fully merged to master?
+not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
+if test -z "$not_in_master"
+then
+	echo >&2 "$topic is fully merged to master; better remove it."
+	exit 1 ;# we could allow it, but there is no point.
+fi
+
+# Is topic ever merged to next?  If so you should not be rebasing it.
+only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
+only_next_2=`git rev-list ^master           ${publish} | sort`
+if test "$only_next_1" = "$only_next_2"
+then
+	not_in_topic=`git rev-list "^$topic" master`
+	if test -z "$not_in_topic"
+	then
+		echo >&2 "$topic is already up to date with master"
+		exit 1 ;# we could allow it, but there is no point.
+	else
+		exit 0
+	fi
+else
+	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
+	/usr/bin/perl -e '
+		my $topic = $ARGV[0];
+		my $msg = "* $topic has commits already merged to public branch:\n";
+		my (%not_in_next) = map {
+			/^([0-9a-f]+) /;
+			($1 => 1);
+		} split(/\n/, $ARGV[1]);
+		for my $elem (map {
+				/^([0-9a-f]+) (.*)$/;
+				[$1 => $2];
+			} split(/\n/, $ARGV[2])) {
+			if (!exists $not_in_next{$elem->[0]}) {
+				if ($msg) {
+					print STDERR $msg;
+					undef $msg;
+				}
+				print STDERR " $elem->[1]\n";
+			}
+		}
+	' "$topic" "$not_in_next" "$not_in_master"
+	exit 1
+fi
+
+<<\DOC_END
+
+This sample hook safeguards topic branches that have been
+published from being rewound.
+
+The workflow assumed here is:
+
+ * Once a topic branch forks from "master", "master" is never
+   merged into it again (either directly or indirectly).
+
+ * Once a topic branch is fully cooked and merged into "master",
+   it is deleted.  If you need to build on top of it to correct
+   earlier mistakes, a new topic branch is created by forking at
+   the tip of the "master".  This is not strictly necessary, but
+   it makes it easier to keep your history simple.
+
+ * Whenever you need to test or publish your changes to topic
+   branches, merge them into "next" branch.
+
+The script, being an example, hardcodes the publish branch name
+to be "next", but it is trivial to make it configurable via
+$GIT_DIR/config mechanism.
+
+With this workflow, you would want to know:
+
+(1) ... if a topic branch has ever been merged to "next".  Young
+    topic branches can have stupid mistakes you would rather
+    clean up before publishing, and things that have not been
+    merged into other branches can be easily rebased without
+    affecting other people.  But once it is published, you would
+    not want to rewind it.
+
+(2) ... if a topic branch has been fully merged to "master".
+    Then you can delete it.  More importantly, you should not
+    build on top of it -- other people may already want to
+    change things related to the topic as patches against your
+    "master", so if you need further changes, it is better to
+    fork the topic (perhaps with the same name) afresh from the
+    tip of "master".
+
+Let's look at this example:
+
+		   o---o---o---o---o---o---o---o---o---o "next"
+		  /       /           /           /
+		 /   a---a---b A     /           /
+		/   /               /           /
+	       /   /   c---c---c---c B         /
+	      /   /   /             \         /
+	     /   /   /   b---b C     \       /
+	    /   /   /   /             \     /
+    ---o---o---o---o---o---o---o---o---o---o---o "master"
+
+
+A, B and C are topic branches.
+
+ * A has one fix since it was merged up to "next".
+
+ * B has finished.  It has been fully merged up to "master" and "next",
+   and is ready to be deleted.
+
+ * C has not merged to "next" at all.
+
+We would want to allow C to be rebased, refuse A, and encourage
+B to be deleted.
+
+To compute (1):
+
+	git rev-list ^master ^topic next
+	git rev-list ^master        next
+
+	if these match, topic has not merged in next at all.
+
+To compute (2):
+
+	git rev-list master..topic
+
+	if this is empty, it is fully merged to "master".
+
+DOC_END
+
+================
+File: reference/.git/hooks/pre-receive.sample
+================
+#!/bin/sh
+#
+# An example hook script to make use of push options.
+# The example simply echoes all push options that start with 'echoback='
+# and rejects all pushes when the "reject" push option is used.
+#
+# To enable this hook, rename this file to "pre-receive".
+
+if test -n "$GIT_PUSH_OPTION_COUNT"
+then
+	i=0
+	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
+	do
+		eval "value=\$GIT_PUSH_OPTION_$i"
+		case "$value" in
+		echoback=*)
+			echo "echo from the pre-receive-hook: ${value#*=}" >&2
+			;;
+		reject)
+			exit 1
+		esac
+		i=$((i + 1))
+	done
+fi
+
+================
+File: reference/.git/hooks/prepare-commit-msg.sample
+================
+#!/bin/sh
+#
+# An example hook script to prepare the commit log message.
+# Called by "git commit" with the name of the file that has the
+# commit message, followed by the description of the commit
+# message's source.  The hook's purpose is to edit the commit
+# message file.  If the hook fails with a non-zero status,
+# the commit is aborted.
+#
+# To enable this hook, rename this file to "prepare-commit-msg".
+
+# This hook includes three examples. The first one removes the
+# "# Please enter the commit message..." help message.
+#
+# The second includes the output of "git diff --name-status -r"
+# into the message, just before the "git status" output.  It is
+# commented because it doesn't cope with --amend or with squashed
+# commits.
+#
+# The third example adds a Signed-off-by line to the message, that can
+# still be edited.  This is rarely a good idea.
+
+COMMIT_MSG_FILE=$1
+COMMIT_SOURCE=$2
+SHA1=$3
+
+/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"
+
+# case "$COMMIT_SOURCE,$SHA1" in
+#  ,|template,)
+#    /usr/bin/perl -i.bak -pe '
+#       print "\n" . `git diff --cached --name-status -r`
+# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
+#  *) ;;
+# esac
+
+# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
+# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
+# if test -z "$COMMIT_SOURCE"
+# then
+#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
+# fi
+
+================
+File: reference/.git/hooks/push-to-checkout.sample
+================
+#!/bin/sh
+
+# An example hook script to update a checked-out tree on a git push.
+#
+# This hook is invoked by git-receive-pack(1) when it reacts to git
+# push and updates reference(s) in its repository, and when the push
+# tries to update the branch that is currently checked out and the
+# receive.denyCurrentBranch configuration variable is set to
+# updateInstead.
+#
+# By default, such a push is refused if the working tree and the index
+# of the remote repository has any difference from the currently
+# checked out commit; when both the working tree and the index match
+# the current commit, they are updated to match the newly pushed tip
+# of the branch. This hook is to be used to override the default
+# behaviour; however the code below reimplements the default behaviour
+# as a starting point for convenient modification.
+#
+# The hook receives the commit with which the tip of the current
+# branch is going to be updated:
+commit=$1
+
+# It can exit with a non-zero status to refuse the push (when it does
+# so, it must not modify the index or the working tree).
+die () {
+	echo >&2 "$*"
+	exit 1
+}
+
+# Or it can make any necessary changes to the working tree and to the
+# index to bring them to the desired state when the tip of the current
+# branch is updated to the new commit, and exit with a zero status.
+#
+# For example, the hook can simply run git read-tree -u -m HEAD "$1"
+# in order to emulate git fetch that is run in the reverse direction
+# with git push, as the two-tree form of git read-tree -u -m is
+# essentially the same as git switch or git checkout that switches
+# branches while keeping the local changes in the working tree that do
+# not interfere with the difference between the branches.
+
+# The below is a more-or-less exact translation to shell of the C code
+# for the default behaviour for git's push-to-checkout hook defined in
+# the push_to_deploy() function in builtin/receive-pack.c.
+#
+# Note that the hook will be executed from the repository directory,
+# not from the working tree, so if you want to perform operations on
+# the working tree, you will have to adapt your code accordingly, e.g.
+# by adding "cd .." or using relative paths.
+
+if ! git update-index -q --ignore-submodules --refresh
+then
+	die "Up-to-date check failed"
+fi
+
+if ! git diff-files --quiet --ignore-submodules --
+then
+	die "Working directory has unstaged changes"
+fi
+
+# This is a rough translation of:
+#
+#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
+if git cat-file -e HEAD 2>/dev/null
+then
+	head=HEAD
+else
+	head=$(git hash-object -t tree --stdin </dev/null)
+fi
+
+if ! git diff-index --quiet --cached --ignore-submodules $head --
+then
+	die "Working directory has staged changes"
+fi
+
+if ! git read-tree -u -m "$commit"
+then
+	die "Could not update working tree to new HEAD"
+fi
+
+================
+File: reference/.git/hooks/update.sample
+================
+#!/bin/sh
+#
+# An example hook script to block unannotated tags from entering.
+# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
+#
+# To enable this hook, rename this file to "update".
+#
+# Config
+# ------
+# hooks.allowunannotated
+#   This boolean sets whether unannotated tags will be allowed into the
+#   repository.  By default they won't be.
+# hooks.allowdeletetag
+#   This boolean sets whether deleting tags will be allowed in the
+#   repository.  By default they won't be.
+# hooks.allowmodifytag
+#   This boolean sets whether a tag may be modified after creation. By default
+#   it won't be.
+# hooks.allowdeletebranch
+#   This boolean sets whether deleting branches will be allowed in the
+#   repository.  By default they won't be.
+# hooks.denycreatebranch
+#   This boolean sets whether remotely creating branches will be denied
+#   in the repository.  By default this is allowed.
+#
+
+# --- Command line
+refname="$1"
+oldrev="$2"
+newrev="$3"
+
+# --- Safety check
+if [ -z "$GIT_DIR" ]; then
+	echo "Don't run this script from the command line." >&2
+	echo " (if you want, you could supply GIT_DIR then run" >&2
+	echo "  $0 <ref> <oldrev> <newrev>)" >&2
+	exit 1
+fi
+
+if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
+	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
+	exit 1
+fi
+
+# --- Config
+allowunannotated=$(git config --type=bool hooks.allowunannotated)
+allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
+denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
+allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
+allowmodifytag=$(git config --type=bool hooks.allowmodifytag)
+
+# check for no description
+projectdesc=$(sed -e '1q' "$GIT_DIR/description")
+case "$projectdesc" in
+"Unnamed repository"* | "")
+	echo "*** Project description file hasn't been set" >&2
+	exit 1
+	;;
+esac
+
+# --- Check types
+# if $newrev is 0000...0000, it's a commit to delete a ref.
+zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
+if [ "$newrev" = "$zero" ]; then
+	newrev_type=delete
+else
+	newrev_type=$(git cat-file -t $newrev)
+fi
+
+case "$refname","$newrev_type" in
+	refs/tags/*,commit)
+		# un-annotated tag
+		short_refname=${refname##refs/tags/}
+		if [ "$allowunannotated" != "true" ]; then
+			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
+			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
+			exit 1
+		fi
+		;;
+	refs/tags/*,delete)
+		# delete tag
+		if [ "$allowdeletetag" != "true" ]; then
+			echo "*** Deleting a tag is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	refs/tags/*,tag)
+		# annotated tag
+		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
+		then
+			echo "*** Tag '$refname' already exists." >&2
+			echo "*** Modifying a tag is not allowed in this repository." >&2
+			exit 1
+		fi
+		;;
+	refs/heads/*,commit)
+		# branch
+		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
+			echo "*** Creating a branch is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	refs/heads/*,delete)
+		# delete branch
+		if [ "$allowdeletebranch" != "true" ]; then
+			echo "*** Deleting a branch is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	refs/remotes/*,commit)
+		# tracking branch
+		;;
+	refs/remotes/*,delete)
+		# delete tracking branch
+		if [ "$allowdeletebranch" != "true" ]; then
+			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	*)
+		# Anything else (is there anything else?)
+		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
+		exit 1
+		;;
+esac
+
+# --- Finished
+exit 0
+
+================
+File: reference/.git/info/exclude
+================
+# git ls-files --others --exclude-from=.git/info/exclude
+# Lines that start with '#' are comments.
+# For a project mostly in C, the following would be a good set of
+# exclude patterns (uncomment them if you want to use them):
+# *.[oa]
+# *~
+
+================
+File: reference/.git/logs/refs/heads/main
+================
+0000000000000000000000000000000000000000 0c32f7764e928daf9473961c488e6e9a855339d2 Luke Nittmann <luke.nittmann@gmail.com> 1738221446 -0800	clone: from https://github.com/internet-development/www-internet-v2.git
+
+================
+File: reference/.git/logs/refs/remotes/origin/HEAD
+================
+0000000000000000000000000000000000000000 0c32f7764e928daf9473961c488e6e9a855339d2 Luke Nittmann <luke.nittmann@gmail.com> 1738221446 -0800	clone: from https://github.com/internet-development/www-internet-v2.git
+
+================
+File: reference/.git/logs/HEAD
+================
+0000000000000000000000000000000000000000 0c32f7764e928daf9473961c488e6e9a855339d2 Luke Nittmann <luke.nittmann@gmail.com> 1738221446 -0800	clone: from https://github.com/internet-development/www-internet-v2.git
+
+================
+File: reference/.git/refs/heads/main
+================
+0c32f7764e928daf9473961c488e6e9a855339d2
+
+================
+File: reference/.git/refs/remotes/origin/HEAD
+================
+ref: refs/remotes/origin/main
+
+================
+File: reference/.git/config
+================
+[core]
+	repositoryformatversion = 0
+	filemode = true
+	bare = false
+	logallrefupdates = true
+	ignorecase = true
+	precomposeunicode = true
+[remote "origin"]
+	url = https://github.com/internet-development/www-internet-v2.git
+	fetch = +refs/heads/*:refs/remotes/origin/*
+[branch "main"]
+	remote = origin
+	merge = refs/heads/main
+	vscode-merge-base = origin/main
+
+================
+File: reference/.git/description
+================
+Unnamed repository; edit this file 'description' to name the repository.
+
+================
+File: reference/.git/FETCH_HEAD
+================
+0c32f7764e928daf9473961c488e6e9a855339d2		branch 'main' of https://github.com/internet-development/www-internet-v2
+
+================
+File: reference/.git/HEAD
+================
+ref: refs/heads/main
+
+================
+File: reference/.git/packed-refs
+================
+# pack-refs with: peeled fully-peeled sorted 
+0c32f7764e928daf9473961c488e6e9a855339d2 refs/remotes/origin/main
+
+================
+File: reference/app/office/head.tsx
+================
+import DefaultMetaTags from '@components/DefaultMetaTags';
+
+export default async function Head({ params }) {
+  return (
+    <>
+      <DefaultMetaTags />
+    </>
+  );
+}
+
+================
+File: reference/app/office/layout.tsx
+================
+import Providers from '@components/Providers';
+
+export default function RootLayout({ children }: { children: React.ReactNode }) {
+  return (
+    <html lang="en-us">
+      <body className="theme-light">
+        <Providers>{children}</Providers>
+      </body>
+    </html>
+  );
+}
+
+================
+File: reference/app/office/page.tsx
+================
+import '@root/global.scss';
+
+import * as Constants from '@common/constants';
+import * as Utilities from '@common/utilities';
+
+import Accordion from '@components/Accordion';
+import ActionListItem from '@components/ActionListItem';
+import Canvas from '@components/Canvas';
+import DefaultLayout from '@components/page/DefaultLayout';
+import InternetDevelopmentLogo from '@components/svg/InternetDevelopmentLogo';
+import InternetDevelopmentLogoMark from '@components/svg/InternetDevelopmentLogoMark';
+import Table from '@components/Table';
+import TableRow from '@components/TableRow';
+import TableColumn from '@components/TableColumn';
+import Package from '@root/package.json';
+import styles from '@components/page/root.module.scss';
+
+export const dynamic = 'force-static';
+
+const VIDEO_URL = 'https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/03025ac3-aa78-4a21-ac3c-a465cb792d39.mp4';
+
+export async function generateMetadata({ params, searchParams }) {
+  const title = `${Package.name} - OFFICE`;
+  const description = `Learn more about our Office in Pike Place, Seattle`;
+  const url = 'https://internet.dev';
+  const handle = '@internetxstudio';
+
+  return {
+    description,
+    icons: {
+      icon: '/favicon-32x32.png',
+      shortcut: '/favicon-16x16.png',
+    },
+    metadataBase: new URL('https://internet.dev/office'),
+    openGraph: {
+      description,
+      images: [
+        {
+          url: 'https://next-s3-public.s3.us-west-2.amazonaws.com/internet-dev/intdev.png',
+          width: 1500,
+          height: 785,
+        },
+      ],
+      title,
+      type: 'website',
+      url,
+    },
+    title,
+    twitter: {
+      card: 'summary_large_image',
+      description,
+      handle,
+      images: ['https://next-s3-public.s3.us-west-2.amazonaws.com/internet-dev/intdev.png'],
+      title,
+      url,
+    },
+    url,
+  };
+}
+
+export default async function Page(props) {
+  return (
+    <DefaultLayout previewPixelSRC="https://intdev-global.s3.us-west-2.amazonaws.com/template-app-icon.png">
+      <div className={styles.row}>
+        <div className={styles.column} style={{ height: '176px', padding: 0 }}>
+          <Canvas />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <InternetDevelopmentLogo height="24px" />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <img className={styles.image} src="https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/7e6088bb-4ce2-47d9-9dfd-d658faed484d.png" />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <aside className={styles.aside}>
+            Champion Building, Pike Place
+            <br />
+            Seattle, Washington
+            <br />
+            United States of America, Earth
+          </aside>
+          <br />
+          <p className={styles.p}>We invite builders who love trying new things and learning to collaborate with us, guided by our values: everything matters, support your friends, and doing your best is more than enough.</p>
+          <br />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <img className={styles.image} src="https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/0bc8d758-d4a9-412e-aa28-1fa6e6481a9a.jpg" />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`What does the INTDEV office offer?`}>
+            <br />
+            Our space offers hardwood floors, symmetrical fiber internet, a local area network, two full kitchens, three meeting booths, a server room, lunch tables, and dedicated workstations. With 24/7 access and amenities like a color printer, shredder, scanner, gallery lounge, and triple-filtered water, we foster a collaborative environment where you can build your vision alongside like-minded peers.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Apply on Users Garden
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Manage your account
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+              Read our Office Use Agreement
+            </ActionListItem>
+            <br />
+            <br /> <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <img className={styles.image} src="https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/6dcedf7d-82d1-45db-a53e-31de509a7759.jpg" />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How do I work with INTDEV at their office?`}>
+            <br />
+            You can find an application link below or by reaching out through social. Please note that the INTDEV reserved desks are invite-only and intended for those with a genuine interest in building things together.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Apply on Users Garden
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Manage your account
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+              Read our Office Use Agreement
+            </ActionListItem>
+            <br />
+            <br /> <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <img className={styles.image} src="https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/9c524b6a-855e-4329-88cd-7bb81796fcc2.jpg" />
+          <br />
+        </div>
+      </div>
+
+      <footer className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <ActionListItem icon={`⊹`} href="https://wireframes.internet.dev/" target="_blank">
+            Explore INTDEV's open source work
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://github.com/orgs/internet-development/repositories" target="_blank">
+            Follow us on GitHub
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://www.linkedin.com/company/internet-dev" target="_blank">
+            Follow us on LinkedIn
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://www.instagram.com/internetdevelopmentstudio/" target="_blank">
+            Follow us on Instagram
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://read.cv/teams/intdev" target="_blank">
+            Follow us on Read.cv
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://x.com/internetxstudio" target="_blank">
+            Follow us on X
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+            Get our attention on Telegram
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="/">
+            Go home
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+            Manage your account
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-acceptable-use" target="_blank">
+            Read our Acceptable Use Policy
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+            Read our Office Use Agreement
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-privacy-policy" target="_blank">
+            Read our Privacy Policy
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-terms-of-service" target="_blank">
+            Read our Terms of Use
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://github.com/internet-development/www-internet-v2" target="_blank">
+            View source
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev" target="_blank">
+            Write a post
+          </ActionListItem>
+          <br />
+          Copyright © 2025. All rights reserved.
+          <br />
+          <br />
+          <br />
+        </div>
+      </footer>
+    </DefaultLayout>
+  );
+}
+
+================
+File: reference/app/head.tsx
+================
+import DefaultMetaTags from '@components/DefaultMetaTags';
+
+export default async function Head({ params }) {
+  return (
+    <>
+      <DefaultMetaTags />
+    </>
+  );
+}
+
+================
+File: reference/app/layout.tsx
+================
+import Providers from '@components/Providers';
+
+export default function RootLayout({ children }: { children: React.ReactNode }) {
+  return (
+    <html lang="en-us">
+      <body className="theme-light">
+        <Providers>{children}</Providers>
+      </body>
+    </html>
+  );
+}
+
+================
+File: reference/app/manifest.ts
+================
+import Package from '@root/package.json';
+
+import { MetadataRoute } from 'next';
+
+export default function manifest(): MetadataRoute.Manifest {
+  return {
+    background_color: '#ffffff',
+    description: Package.description,
+    display: 'standalone',
+    icons: [
+      {
+        src: '/favicon.ico',
+        sizes: 'any',
+        type: 'image/x-icon',
+      },
+    ],
+    name: Package.name,
+    short_name: Package.name,
+    start_url: '/',
+    theme_color: '#ffffff',
+  };
+}
+
+================
+File: reference/app/page.tsx
+================
+import '@root/global.scss';
+
+import * as Constants from '@common/constants';
+import * as Utilities from '@common/utilities';
+
+import Accordion from '@components/Accordion';
+import ActionListItem from '@components/ActionListItem';
+import Canvas from '@components/Canvas';
+import DefaultLayout from '@components/page/DefaultLayout';
+import InternetDevelopmentLogo from '@components/svg/InternetDevelopmentLogo';
+import InternetDevelopmentLogoMark from '@components/svg/InternetDevelopmentLogoMark';
+import Table from '@components/Table';
+import TableRow from '@components/TableRow';
+import TableColumn from '@components/TableColumn';
+import Package from '@root/package.json';
+import styles from '@components/page/root.module.scss';
+
+export const dynamic = 'force-static';
+
+const VIDEO_URL = 'https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/03025ac3-aa78-4a21-ac3c-a465cb792d39.mp4';
+
+export async function generateMetadata({ params, searchParams }) {
+  const title = Package.name;
+  const description = Package.description;
+  const url = 'https://internet.dev';
+  const handle = '@internetxstudio';
+
+  return {
+    description,
+    icons: {
+      icon: '/favicon-32x32.png',
+      shortcut: '/favicon-16x16.png',
+    },
+    metadataBase: new URL('https://internet.dev'),
+    openGraph: {
+      description,
+      images: [
+        {
+          url: 'https://next-s3-public.s3.us-west-2.amazonaws.com/internet-dev/intdev.png',
+          width: 1500,
+          height: 785,
+        },
+      ],
+      title,
+      type: 'website',
+      url,
+    },
+    title,
+    twitter: {
+      card: 'summary_large_image',
+      description,
+      handle,
+      images: ['https://next-s3-public.s3.us-west-2.amazonaws.com/internet-dev/intdev.png'],
+      title,
+      url,
+    },
+    url,
+  };
+}
+
+export default async function Page(props) {
+  return (
+    <DefaultLayout previewPixelSRC="https://intdev-global.s3.us-west-2.amazonaws.com/template-app-icon.png">
+      <div className={styles.row}>
+        <div className={styles.column} style={{ height: '176px', padding: 0 }}>
+          <Canvas />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <video className={styles.video} src={VIDEO_URL} autoPlay muted loop playsInline preload="auto">
+            Your browser does not support the video tag.
+          </video>
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <h1 className={styles.h1}>Internet Development Studio Company ("INTDEV")</h1>
+          <aside className={styles.aside}>
+            Champion Building, Pike Place
+            <br />
+            Seattle, Washington
+            <br />
+            United States of America, Earth
+          </aside>
+          <br />
+          <p className={styles.p}>An american vocation guild and great hall for webmasters. Every day we practice the craft of designing, building, shipping, and maintaining websites, platforms, brands, and applications—end to end.</p>
+          <br />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <ActionListItem icon={`⊹`} href="https://wireframes.internet.dev/" target="_blank">
+            Explore INTDEV's open source work
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+            Get our attention on Telegram
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://sacred.computer" target="_blank">
+            Go explore SRCL
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="/office">
+            Learn more about the Pike Place office
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://www.beautifulthings.xyz/" target="_blank">
+            Look at beautiful things
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+            Manage your account
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev" target="_blank">
+            Write a post
+          </ActionListItem>
+
+          <br />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`What does the Internet Development Studio Company ("INTDEV") actually do?`}>
+            <br />
+            We provide a team you can hire to get things done.
+            <br />
+            <br />
+            That team is a 6 person dedicated tiger team specializing in delivering high-performance web applications, internal tools, branding assets, presentations, static websites, LLM interfaces, illustrations, productivity applications, technical writing, and general web development services. By embedding with up to four companies at a time, we allocate a shared bandwidth of 360 hours per week to drive productivity and deliver results. It’s a process we genuinely enjoy, and every major milestone we knock out helps us grow and learn.
+            <br />
+            <br />
+            We also provide an invite-only space in Seattle for people to work alongside us, offering a collaborative environment that also serves the portfolio venture companies of{' '}
+            <a href="https://mana.inc" target="_blank">
+              Mana Industries Fund 1 LP
+            </a>{' '}
+            and contributors.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://wireframes.internet.dev/" target="_blank">
+              Explore INTDEV's open source work
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`Who did INTDEV work for in 2024?`}>
+            <br />
+            Aliaksandr Hudzilin, Bakken & Bæck, Beautiful Things, El Cap Capital, Google, Mana Industries, Microsoft, Protocol Labs and various startups.
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`Who is INTDEV working for in 2025?`}>
+            <br />
+            Microsoft
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How does an engagement with INTDEV typically feel?`}>
+            <br />
+            Imagine hiring your own team, and one that already has a well-established design and engineering culture.
+            <br />
+            <br />
+            By hiring us, you gain a team that works seamlessly in person, is highly productive, and has a proven track record. This is all made possible by the extensive successful startup experience shared across our team.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How much does it cost to hire this team?`}>
+            <br />
+            <Table>
+              <TableRow>
+                <TableColumn>ONE MONTH</TableColumn>
+                <TableColumn>$70,000 USD</TableColumn>
+              </TableRow>
+
+              <TableRow>
+                <TableColumn>THREE MONTHS</TableColumn>
+                <TableColumn>$195,000 USD</TableColumn>
+              </TableRow>
+
+              <TableRow>
+                <TableColumn>SIX MONTHS</TableColumn>
+                <TableColumn>$360,000 USD</TableColumn>
+              </TableRow>
+
+              <TableRow>
+                <TableColumn>NINE MONTHS</TableColumn>
+                <TableColumn>$495,000 USD</TableColumn>
+              </TableRow>
+
+              <TableRow>
+                <TableColumn>TWELVE MONTHS</TableColumn>
+                <TableColumn>$600,000 USD</TableColumn>
+              </TableRow>
+            </Table>
+            <br />
+            From the start, it will feel like you built this team yourself.
+            <br />
+            <br />
+            We don’t do change orders—instead, we aim to complete as much work as possible within our estimates while you have us on retainer. This approach is ideal for situations where you want to accomplish a lot efficiently.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`Why do I have to hire the full six-person team?`}>
+            <br />
+            Our studio fosters deep in-person collaboration, where we openly discuss challenges and make a concerted effort to learn and improve our skills through shared experiences.
+            <br />
+            <br />
+            This approach strengthens our team and enables us to support venture-backed companies with tight deadlines and ambitious goals. By learning from each other’s mistakes, we continually refine our work and strive to hit the mark every time.
+            <br />
+            <br />
+            Also, it should be known that, based on our prices, you're only paying the cost of a full-time employee for a much larger headcount. A lot of clients find this to be high value.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`Is there a discount if we want to work with less people from the INTDEV?`}>
+            <br />
+            No, but as a client, you are welcome to work with fewer team members if that is your preference.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How does working with the INTDEV work day to day?`}>
+            <br />
+            Here’s a glimpse of what it’s like to collaborate with our six-person team.
+            <br />
+            <br />
+            <Accordion defaultValue={true} title={`Discovery Video Call`}>
+              <br />
+              We begin with a video call to understand your goals and explore how our team can deliver results. We’re flexible with your preferred video chat platform.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`[OPTIONAL] First Meeting in Seattle, WA`}>
+              <br />
+              Join us at our Pike Place office to work alongside our team as we dive into your goals. You’re welcome to use our meeting rooms and open desks, meet other companies, and enjoy engaging conversations. We always have filtered water and are here on weekends, too.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Onboarding`}>
+              <br />
+              From day one, we integrate seamlessly into your team, bringing years of experience and familiarity with compliance requirements like NDAs. Comfortable across Linux, MacOS, and Windows, we’re happy to train your employees when needed and adapt to your existing tools and processes.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Embedding`}>
+              <br />
+              We adapt to the roles you need, whether following your direction or advocating for key features, integrating into your daily routine at whatever level you require. Comfortable with agile, waterfall, or even a “move fast and break things” approach, we’re always ready to embrace challenges.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Working in the Office`}>
+              <br />
+              We can host stand-ups and any meetings you need in our office, with meeting rooms perfect for bringing in your own customers. Sharing the space often leads to team-building, and we’re happy to host and cook for large groups with a little notice. <br />
+              <br />
+              Pike Place offers great restaurants and scenic spots for breaks, though guest parking isn’t available, so please plan accordingly. Our office features symmetrical fiber internet and quiet workspaces, and we keep our client list small to stay flexible and accommodating.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Technical Program Management`}>
+              <br />
+              We help identify your Technical Program Management needs, aligning your team around a shared goal with fresh perspectives. We guide long-term strategic decisions, define “done” from the start, and set expectations upfront. We bring experience from high-profile projects while focusing on supporting your vision and helping you achieve it.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Zero to One`}>
+              <br />
+              With over a decade of startup experience, our design partners help bring your product to market for the first time and support future launches, treating each launch as a personal milestone. We love exploring logos, drawing inspiration from our collection of books, and rely on tools like Figma, Sketch, Photoshop, and Illustrator. <br />
+              <br />
+              Our network also includes some of Seattle’s top photographers and videographers, many of whom work directly in our space.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Get in Quick`}>
+              <br />
+              When you need quick results without extra discussion, we’re ready to jump in, whether it’s tackling long-standing backlogs, handling one-off tasks, or adding missing design system components. We can deliver results without delay. <br />
+              <br />
+              We’re unfazed by technical debt, comfortable managing tricky repository forks, and always ready to take on backlog tasks—just let us know how we can help.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Tooling Investment`}>
+              <br />
+              We know a team’s identity is often shaped by the tools they use. Whether you’re looking to strengthen your current toolkit or start fresh, we can help. Our expertise spans tools like Next.js, Postgres, Figma, GSAP, and Tailwind, along with CSS dialects like CSS-in-JS and email-compliant inline styles. <br />
+              <br />
+              With one of our partners contributing to Expo (React Native), we deeply value tooling. We respect your existing tools while embracing fresh starts that energize teams and foster growth. Involve us in consulting meetings for fresh perspectives—we’re always ready to explore new technologies, including LLMs.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Launch, Maintain, and Survive`}>
+              <br />
+              Your uptime is critical, and while we can’t promise 99.9999999% uptime at scale, we specialize in keeping websites running with low effort on your part. This allows you to focus on growing your product and engaging your customers without unnecessary distractions.
+              <br />
+              <br />
+              Whether you need help with IPFS, managing VPS, consulting on on-premise solutions, or working with tools like Fly, Vercel, and Render, we’ve got you covered. With experience in GCE, GCS, AWS EC2, S3, and database backups, we’re here to ensure your systems work.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Supporting Volatility`}>
+              <br />
+              If you’re navigating changes in priorities, we offer the flexibility to help you adapt. We understand that leadership shifts happen, and we’re here to support you while keeping your team focused on what matters most. Whether starting fresh or removing what’s not working, our flexible deal structure evolves with your needs, always aligned with your goal of driving success and growth for your business.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Libraries and Documentation`}>
+              <br />
+              We value great documentation and design systems, even if they’re not always a priority for everyone. We can create clear, user-friendly documentation and develop intuitive design systems for your web products, building tools to make these processes more efficient. <br />
+              <br />
+              Whether working with tools like Scalar, GitBook, and Notion or contributing to publications, blog posts, and video tutorials, we’re happy to provide custom solutions to meet your needs.
+              <br />
+              <br />
+            </Accordion>
+            <br />
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`What is INTDEV's relationship with the University of Washington?`}>
+            <br />
+            If your department requires a website that complies with the latest legal standards, is powered by modern web tooling, and boasts a functional design, partner with us. We read 313 pages of documentation for you.
+            <br />
+            <br />
+            We admire the{' '}
+            <a href="https://www.washington.edu/" target="_blank">
+              University of Washington
+            </a>
+            ’s dedication to innovation and inclusivity, and the alumni who work in our office proudly align our mission with these values. As designers, we are committed to ensuring that every website we create is not only modern but also accessible.
+            <br />
+            <br />
+            <a href="https://www.federalregister.gov/documents/2024/04/24/2024-07758/nondiscrimination-on-the-basis-of-disability-accessibility-of-web-information-and-services-of-state" target="_blank">
+              The guidelines
+            </a>{' '}
+            released by the Department of Justice under Title II of the Americans with Disabilities Act (ADA) have set a new bar for digital accessibility, which we embrace. Effective April 24, 2024, these standards require all web content to achieve compliance by April 24, 2026.
+            <br />
+            <br />
+            <Accordion defaultValue={true} title={`Ensuring all web content and mobile applications meet the Web Content Accessibility Guidelines (WCAG) 2.1, Level AA standards.`}>
+              <br />
+              This is a cornerstone of our approach to accessibility. We achieve this through rigorous processes and meticulous attention to detail. Our team follows best practices to make sure every user has a seamless and inclusive experience.
+              <br />
+              <br />
+              <Table>
+                <TableRow>
+                  <TableColumn>Semantic HTML</TableColumn>
+                  <TableColumn>We use semantic HTML to define the structure and meaning of web content, ensuring assistive technologies can interpret and navigate the site effectively.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Keyboard Accessibility</TableColumn>
+                  <TableColumn>We ensure all features are accessible via keyboard for users who cannot use a mouse.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Color Contrast</TableColumn>
+                  <TableColumn>We employ high-contrast color schemes to ensure text is readable by users with visual impairments while adhering to UW’s brand guidelines.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Alternative Text</TableColumn>
+                  <TableColumn>We provide descriptive text for images and multimedia content, helping screen readers convey information accurately to visually impaired users.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Resizable Text</TableColumn>
+                  <TableColumn>Our designs allow for text resizing without loss of content or functionality, catering to users who need larger fonts.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Error Identification and Suggestion</TableColumn>
+                  <TableColumn>Our forms are designed to identify errors and provide suggestions for correction, improving usability for those with cognitive disabilities.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Consistent Navigation</TableColumn>
+                  <TableColumn>Our predictable navigation and layouts help users with cognitive and learning disabilities.</TableColumn>
+                </TableRow>
+              </Table>
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Providing alternative text for all visual media, including images, videos, and interactive elements.`}>
+              <br />
+              Alternative text ensures that all users, including those with visual impairments, can fully understand and engage with all content on the website.
+              <br />
+              <br />
+              <Table>
+                <TableRow>
+                  <TableColumn>Descriptive Alt Text for Images</TableColumn>
+                  <TableColumn>We provide concise and descriptive alternative text for all images, enabling screen reader users to understand the context and content of visual elements.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Detailed Descriptions for Complex Images</TableColumn>
+                  <TableColumn>For complex images such as charts, infographics, or detailed diagrams, we offer extended descriptions to convey all critical information effectively.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Captions for Videos</TableColumn>
+                  <TableColumn>All video content includes synchronized captions, ensuring that users with hearing impairments can access the information being presented.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Transcripts for Audio Content</TableColumn>
+                  <TableColumn>We provide textual transcripts for all audio content, making it accessible to users with hearing impairments and allowing for easier comprehension during listening.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Text Alternatives for Interactive Elements</TableColumn>
+                  <TableColumn>Interactive elements, such as buttons, forms, and dynamic content, come with clear text alternatives or labels that describe their function and purpose.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Accessible Icons</TableColumn>
+                  <TableColumn>We use ARIA labels or alternative text for icons and other graphical elements to ensure they communicate their meaning to assistive technologies.</TableColumn>
+                </TableRow>
+              </Table>
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Making complex navigational structures accessible with clear and user-friendly interfaces.`}>
+              <br />
+              This is a fundamental aspect of our design philosophy. We believe that every user deserves an accessible browsing experience, regardless of the complexity of the content.
+              <br />
+              <br />
+              <Table>
+                <TableRow>
+                  <TableColumn>Logical Menu Hierarchies</TableColumn>
+                  <TableColumn>We design navigation menus with logical hierarchies, ensuring that users can easily find the information they need with minimal clicks.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Descriptive Links</TableColumn>
+                  <TableColumn>All links are clearly labeled with descriptive text, so users understand where each link will take them, aiding both screen readers and visual users.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Accessible Dropdown Menus</TableColumn>
+                  <TableColumn>Our dropdown menus are designed to be keyboard-accessible and screen reader-friendly, ensuring inclusivity for all users.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Breadcrumb Navigation</TableColumn>
+                  <TableColumn>We employ breadcrumb navigation to help users understand their current location within the website and easily backtrack if necessary.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Search Functionality</TableColumn>
+                  <TableColumn>We integrate advanced search functionalities, allowing users to quickly locate specific content without navigating through multiple menus.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Consistent Layouts</TableColumn>
+                  <TableColumn>We maintain consistency in layouts and navigation across all pages, so users can predict and understand where to find information.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Skip Navigation Links</TableColumn>
+                  <TableColumn>Our skip links allow users to bypass repetitive content and navigate directly to the main content, which is particularly helpful for screen reader users.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Visual Indicators</TableColumn>
+                  <TableColumn>Clear visual indicators highlight the current page or section, helping users keep track of their navigation path.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>ARIA Landmarks</TableColumn>
+                  <TableColumn>We implement ARIA (Accessible Rich Internet Applications) landmarks to define regions of a page, making it easier for screen reader users to navigate and skip to different sections.</TableColumn>
+                </TableRow>
+              </Table>
+              <br />
+              <br />
+            </Accordion>
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How do I join INTDEV as a Webmaster?`}>
+            <br />
+            In 2025, we plan to grow our team from six to eight members. If you’re passionate about the vocation of being a Webmaster, let’s talk.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://wireframes.internet.dev/examples/features/job-posting" target="_blank">
+              View the job
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`What does the INTDEV office offer?`}>
+            <br />
+            Our space offers hardwood floors, symmetrical fiber internet, a local area network, two full kitchens, three meeting booths, a server room, lunch tables, and dedicated workstations. With 24/7 access and amenities like a color printer, shredder, scanner, gallery lounge, and triple-filtered water, we foster a collaborative environment where you can build your vision alongside like-minded peers.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Apply on Users Garden
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Manage your account
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+              Read our Office Use Agreement
+            </ActionListItem>
+            <br />
+            <br /> <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How do I work with INTDEV at their office?`}>
+            <br />
+            You can find an application link below or by reaching out through social. Please note that the INTDEV reserved desks are invite-only and intended for those with a genuine interest in building things together.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Apply on Users Garden
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Manage your account
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+              Read our Office Use Agreement
+            </ActionListItem>
+            <br />
+            <br /> <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          Use this SVG for a logo without the word “INTDEV.”
+          <br />
+          <br />
+          <InternetDevelopmentLogoMark height="48px" />
+          <br />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          Use this SVG for a logo that includes our brand name.
+          <br />
+          <br />
+          <InternetDevelopmentLogo height="48px" />
+          <br />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <footer className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <img className={styles.image} src="https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/2fb7e012-4fa9-4446-9bf4-e2c5c7e4992a.jpg" />
+          <ActionListItem icon={`⊹`} href="https://wireframes.internet.dev/" target="_blank">
+            Explore INTDEV's open source work
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://bsky.app/profile/internetstudio.bsky.social" target="_blank">
+            Follow us on Bluesky
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://github.com/orgs/internet-development/repositories" target="_blank">
+            Follow us on GitHub
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://www.linkedin.com/company/internet-dev" target="_blank">
+            Follow us on LinkedIn
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://www.instagram.com/internetdevelopmentstudio/" target="_blank">
+            Follow us on Instagram
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://read.cv/teams/intdev" target="_blank">
+            Follow us on Read.cv
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://x.com/internetxstudio" target="_blank">
+            Follow us on X
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+            Get our attention on Telegram
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://sacred.computer" target="_blank">
+            Go explore SRCL
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="/office">
+            Learn more about the Pike Place office
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+            Manage your account
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-acceptable-use" target="_blank">
+            Read our Acceptable Use Policy
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+            Read our Office Use Agreement
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-privacy-policy" target="_blank">
+            Read our Privacy Policy
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-terms-of-service" target="_blank">
+            Read our Terms of Use
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://github.com/internet-development/www-internet-v2" target="_blank">
+            View source
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev" target="_blank">
+            Write a post
+          </ActionListItem>
+          <br />
+          Copyright © 2025. All rights reserved.
+          <br />
+          <br />
+          <br />
+        </div>
+      </footer>
+    </DefaultLayout>
+  );
+}
+
+================
+File: reference/app/robots.ts
+================
+import { MetadataRoute } from 'next';
+
+export default function robots(): MetadataRoute.Robots {
+  return {
+    rules: {
+      userAgent: '*',
+      allow: '/',
+      disallow: '/api/',
+    },
+    sitemap: 'https://internet.dev/sitemap.xml',
+  };
+}
+
+================
+File: reference/app/sitemap.ts
+================
+import { MetadataRoute } from 'next';
+
+export default function sitemap(): MetadataRoute.Sitemap {
+  return [
+    {
+      url: 'https://internet.dev',
+      lastModified: new Date(),
+    },
+  ];
+}
+
+================
+File: reference/common/constants.ts
+================
+export const MAX_SIZE_BYTES = 15728640;
+
+// NOTE(jimmylee):
+// https://github.com/internet-development/apis
+// export const API = `http://localhost:10001/api`;
+export const API = `https://api.internet.dev/api`;
+
+export const Users = {
+  tiers: {
+    UNVERIFIED: 0,
+    VERIFIED: 10,
+    PAYING: 20,
+    GENERAL_CO_WORKING: 30,
+    PARTNER: 40,
+    ADMIN: 100,
+  },
+};
+
+export const Tiers = {
+  PAYING: 899,
+  GENERAL_CO_WORKING: 32900,
+  PARTNER: 279000,
+};
+
+export const Payments = {
+  899: 'PAYING',
+  32900: 'GENERAL_CO_WORKING',
+  279000: 'PARTNER',
+};
+
+export const Payouts = {
+  PAYING: 1500,
+  GENERAL_CO_WORKING: 45000,
+  PARTNER: 45000,
+};
+
+export const LANDSCAPES = [
+  ['Sahara Desert', 'The Sahara stretches across North Africa with shifting dunes that tower above the horizon. Even in its harsh sunlight and cold nights, resilient life finds a way to endure.'],
+  ['Grand Canyon', 'Carved by the Colorado River, the Grand Canyon reveals layers of ancient rock. Its chasms echo with wind and the distant calls of raptors gliding through the afternoon sky.'],
+  ['Amazon Rainforest', 'The Amazon Rainforest teems with biodiversity under a dense green canopy. Rivers and flooded plains sustain countless species, while humid air hangs heavy with the promise of storms.'],
+  ['Rocky Mountains', 'The Rockies rise like rugged spines across the continent. Snowpack feeds rivers that carve valleys where elk graze, and fir trees cling to the slopes.'],
+  ['Gobi Desert', 'The Gobi Desert rolls out in arid sweeps across northern China and southern Mongolia. Sparse grasses and hardy camels testify to its unforgiving climate.'],
+  ['Andes Mountains', 'The Andes dominate western South America with ragged peaks and hidden valleys. Llamas graze on high plateaus, and glaciers feed the rivers far below.'],
+  ['Serengeti Plains', 'The Serengeti spreads under the African sun in rolling grasslands. Wildebeests and zebras migrate in vast herds, guided by the promise of water and fresh pasture.'],
+  ['Yosemite Valley', 'Glacial forces shaped this granite cradle in California. Towering waterfalls cascade from sheer cliffs, while giant sequoias stand in quiet strength.'],
+  ['Namib Desert', 'The Namib Desert clings to the Atlantic coast of southern Africa. Rust-red dunes shift above hidden water tables where desert elephants roam.'],
+  ['Patagonia', 'Patagonia’s windswept plains and jagged peaks stretch across Argentina and Chile. Glaciers calve into turquoise lakes, and guanacos graze on hardy grasses.'],
+  ['Swiss Alps', 'The Swiss Alps rise with sharp spires of snow and ice. Mountain chalets cling to slopes where wildflowers bloom each summer in vibrant displays.'],
+  ['Himalayas', 'The Himalayas hold the world’s highest summits beneath a freezing sky. From lush foothills to lofty glaciers, this range tests life’s resilience.'],
+  ['Icelandic Highlands', 'Iceland’s interior stands stark and raw with volcanic plains, steaming vents, and glacier-fed rivers. The wind sweeps across moss-coated lava fields in lonely gusts.'],
+  ['Atacama Desert', 'The Atacama is among the driest places on Earth. Its scorched soil and salt flats see rare blooms that burst into color after elusive rains.'],
+  ['Redwood Forest', 'Coastal redwoods tower in perpetual mist along the Pacific. Their trunks, thick and ancient, cradle a hidden world of fern and moss.'],
+  ['Scottish Highlands', 'The Highlands roll in rugged hills capped by heather and stone. Lochs reflect ever-shifting skies, and the wind carries the distant clang of sheep bells.'],
+  ['Great Rift Valley', 'This massive geological trench cleaves eastern Africa, where lakes shimmer at the bottom of steep escarpments. Flamingos gather in vast flocks to feed on algae.'],
+  ['Okavango Delta', 'The Okavango spreads like a bright labyrinth of channels and wetlands in Botswana. Seasonal floods create a green haven for elephants, lions, and hippos.'],
+  ['Appalachian Mountains', 'Old and eroded, the Appalachians meander through eastern North America. Their forests host black bears, rhododendrons, and the misty quiet of forest hollows.'],
+  ['Death Valley', 'Death Valley bakes under a relentless sun, reaching some of the hottest temperatures on record. Cracked salt flats testify to evaporated lakes and lost water.'],
+  ['Dolomites', 'Jagged limestone peaks define northern Italy’s Dolomites. Alpine meadows lie below sheer cliffs, where climbers test themselves against silent stone.'],
+  ['Torres del Paine', 'Chile’s Torres del Paine juts into the southern sky with glacier-fed lakes at its base. Guanacos roam windblown plains as ice cracks overhead.'],
+  ['Lofoten Islands', 'Lofoten’s dramatic peaks rise straight from Norway’s cold seas. Fishing villages huddle along rocky shores, while gulls circle overhead in crisp air.'],
+  ['Siberian Tundra', 'The Siberian tundra spans a realm of permafrost and low shrubs. Winters stretch long and bleak, yet migratory birds still find respite here each summer.'],
+  ['Norwegian Fjords', 'Deep fjords carve into Norway’s coast where dark waters mirror towering cliffs. Small farms cling to green patches between rock and sea.'],
+  ['Bungle Bungle Range', 'These striped sandstone domes rise from the Australian outback. Gorges cut deep under a harsh sun, hiding pockets of lush vegetation.'],
+  ['Zion Canyon', 'Zion Canyon glows red and orange under the Utah sky. The Virgin River sculpts sheer walls that watch over narrow trails and hidden pools.'],
+  ['Lake Baikal', 'Lake Baikal in Siberia is the world’s deepest lake. Its waters shimmer with unmatched clarity, home to species found nowhere else on Earth.'],
+  ['Banff National Park', 'Banff crowns the Canadian Rockies with turquoise lakes and towering peaks. Grizzlies roam pine forests while glacier-fed rivers reflect untouched wilderness.'],
+  ['Wadi Rum', 'Wadi Rum’s sandstone cliffs loom in Jordan’s desert, carved by millennia of wind and time. Nomadic tribes wander under a silent, star-filled sky.'],
+  ['Cappadocia', 'Cappadocia’s whimsical rock formations rise over central Turkey’s plains. Soft stone spires hold hidden chapels and the ghosts of ancient dwellers.'],
+];
+
+export const SAMPLE_TABLE_DATA_CHANGE_ME = [
+  ['NAME', 'SYMBOL', 'PRICE', 'HOLDINGS'],
+  ['Bat', 'BAT', '$9.01', '400'],
+  ['Bear', 'BR', '$56.78', '200'],
+  ['Camel', 'CML', '$55.67', '70'],
+  ['Cheetah', 'CHT', '$13.45', '150'],
+  ['Crab', 'CRB', '$15.67', '250'],
+  ['Deer', 'DER', '$29.99', '110'],
+  ['Dolphin', 'DLP', '$77.89', '50'],
+  ['Eagle', 'EGL', '$45.67', '90'],
+  ['Falcon', 'FLC', '$40.22', '85'],
+  ['Fox', 'FOX', '$12.34', '100'],
+  ['Frog', 'FRG', '$7.89', '400'],
+  ['Giraffe', 'GRF', '$44.56', '80'],
+  ['Hedgehog', 'HDG', '$11.23', '200'],
+  ['Horse', 'HRS', '$54.32', '70'],
+  ['Kangaroo', 'KNG', '$15.67', '120'],
+  ['Koala', 'KLA', '$22.34', '150'],
+  ['Leopard', 'LPR', '$14.56', '110'],
+  ['Lemur', 'LMR', '$11.12', '320'],
+  ['Lion', 'LION', '$67.89', '80'],
+  ['Lynx', 'LNX', '$16.78', '130'],
+  ['Mouse', 'MSE', '$5.12', '500'],
+  ['Octopus', 'OCT', '$88.90', '40'],
+  ['Otter', 'OTR', '$20.21', '180'],
+  ['Owl', 'OWL', '$19.01', '160'],
+  ['Panda', 'PND', '$78.90', '55'],
+  ['Peacock', 'PCK', '$12.34', '100'],
+  ['Penguin', 'PNG', '$33.45', '90'],
+  ['Porcupine', 'PRC', '$17.89', '140'],
+  ['Rabbit', 'RBT', '$9.10', '350'],
+  ['Raccoon', 'RCC', '$18.90', '150'],
+  ['Shark', 'SHK', '$89.01', '50'],
+  ['Snake', 'SNK', '$10.11', '300'],
+  ['Squirrel', 'SQL', '$10.12', '250'],
+  ['Tiger', 'TGR', '$34.56', '120'],
+  ['Turtle', 'TRL', '$66.78', '60'],
+  ['Whale', 'WHL', '$123.45', '30'],
+  ['Wolf', 'WLF', '$23.45', '150'],
+  ['Zebra', 'ZBR', '$65.43', '60'],
+];
+
+export const CHESSBOARD_DEFAULT_POSITIONS: string[][] = [
+  ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'],
+  ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],
+  ['', '', '', '', '', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],
+  ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R'],
+];
+
+export const CHESSBOARD_BAD_BISHOP: string[][] = [
+  ['r', ' ', ' ', 'q', ' ', 'r', 'k', ''],
+  [' ', 'b', ' ', ' ', ' ', 'p', 'p', 'p'],
+  ['p', '', 'p', 'b', 'p', 'n', '', ''],
+  ['', '', 'p', 'p', '', '', '', ''],
+  ['Q', '', '', 'P', '', '', '', ''],
+  ['', '', 'P', '', 'P', 'N', 'B', ''],
+  ['P', 'P', ' ', 'N', '', 'P', 'P', 'P'],
+  ['R', ' ', ' ', ' ', 'K', ' ', ' ', 'R'],
+];
+
+export const CHESSBOARD_CHECKMATE_STEP_ONE: string[][] = [
+  [' ', ' ', ' ', '', ' ', 'r', ' ', 'r'],
+  ['p', 'b', ' ', 'n', ' ', 'p', ' ', 'k'],
+  ['', 'q', '', 'N', 'p', '', '', ''],
+  ['', 'p', 'p', 'n', 'P', '', 'Q', ''],
+  ['', 'b', 'p', 'P', 'B', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['P', 'P', ' ', ' ', ' ', 'P', 'P', 'P'],
+  ['R', ' ', ' ', ' ', ' ', 'R', 'K', ''],
+];
+
+export const CHESSBOARD_CHECKMATE_STEP_TWO: string[][] = [
+  [' ', ' ', ' ', '', ' ', 'r', ' ', 'r'],
+  ['p', 'b', ' ', 'n', ' ', ' ', ' ', 'k'],
+  ['', 'q', '', 'N', 'p', '', '', ''],
+  ['', 'p', 'p', 'n', 'P', 'p', 'Q', ''],
+  ['', 'b', 'p', 'P', 'B', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['P', 'P', ' ', ' ', ' ', 'P', 'P', 'P'],
+  ['R', ' ', ' ', ' ', ' ', 'R', 'K', ''],
+];
+
+export const CHESSBOARD_CHECKMATE_STEP_THREE: string[][] = [
+  [' ', ' ', ' ', '', ' ', 'r', ' ', 'r'],
+  ['p', 'b', ' ', 'n', ' ', ' ', ' ', 'k'],
+  ['', 'q', '', 'N', 'p', 'P', '', ''],
+  ['', 'p', 'p', 'n', '', '', 'Q', ''],
+  ['', 'b', 'p', 'P', 'B', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['P', 'P', ' ', ' ', ' ', 'P', 'P', 'P'],
+  ['R', ' ', ' ', ' ', ' ', 'R', 'K', ''],
+];
+
+================
+File: reference/common/hooks.ts
+================
+import * as React from 'react';
+
+export function useDebouncedCallback<T>(ms: number, f: (...args: T[]) => void, deps: any[]): (...args: T[]) => void {
+  let throttled = false;
+  let latestArgs: T | null = null;
+
+  const clearThrottle = () => {
+    throttled = false;
+
+    if (latestArgs !== null) {
+      f(latestArgs);
+      latestArgs = null;
+    }
+  };
+
+  return React.useCallback(
+    (args) => {
+      if (throttled) {
+        latestArgs = args;
+      } else {
+        f(args);
+
+        throttled = true;
+
+        setTimeout(clearThrottle, ms);
+      }
+    },
+    [...deps, ms]
+  );
+}
+
+================
+File: reference/common/position.ts
+================
+export type Placement = 'top' | 'bottom' | 'left' | 'right';
+
+export function calculate(triggerElement: HTMLElement, popoverElement: HTMLElement, scrollX: number = window.scrollX, scrollY: number = window.scrollY): { placement: Placement; position: { top: number; left: number } } {
+  let triggerRect;
+  let popoverRect;
+
+  if (triggerElement) {
+    triggerRect = triggerElement.getBoundingClientRect();
+  }
+
+  if (popoverElement) {
+    popoverRect = popoverElement.getBoundingClientRect();
+  }
+
+  const spaceAbove = triggerRect.top;
+  const spaceBelow = window.innerHeight - triggerRect.bottom;
+  const spaceLeft = triggerRect.left;
+  const spaceRight = window.innerWidth - triggerRect.right;
+
+  const viewportHeightThreshold = window.innerHeight * 0.4;
+  const viewportWidthThreshold = window.innerWidth * 0.4;
+
+  let placement: Placement = 'bottom';
+  let top = 0;
+  let left = 0;
+  if (!popoverRect) {
+    return { placement, position: { top: 0, left: 0 } };
+  }
+
+  if (spaceAbove >= viewportHeightThreshold && spaceAbove >= popoverRect.height) {
+    placement = 'top';
+    top = triggerRect.top + scrollY - popoverRect.height;
+    left = triggerRect.left + scrollX + (triggerRect.width - popoverRect.width) / 2;
+  } else if (spaceBelow >= viewportHeightThreshold && spaceBelow >= popoverRect.height) {
+    placement = 'bottom';
+    top = triggerRect.bottom + scrollY;
+    left = triggerRect.left + scrollX + (triggerRect.width - popoverRect.width) / 2;
+  } else if (spaceRight >= viewportWidthThreshold && spaceRight >= popoverRect.width) {
+    placement = 'right';
+    top = triggerRect.top + scrollY + (triggerRect.height - popoverRect.height) / 2;
+    left = triggerRect.right + scrollX;
+  } else if (spaceLeft >= viewportWidthThreshold && spaceLeft >= popoverRect.width) {
+    placement = 'left';
+    top = triggerRect.top + scrollY + (triggerRect.height - popoverRect.height) / 2;
+    left = triggerRect.left + scrollX - popoverRect.width;
+  } else {
+    placement = 'bottom';
+    top = triggerRect.bottom + scrollY;
+    left = triggerRect.left + scrollX + (triggerRect.width - popoverRect.width) / 2;
+  }
+
+  if (left < 0) left = 0;
+  else if (left + popoverRect.width > window.innerWidth) left = window.innerWidth - popoverRect.width;
+
+  if (top < 0) top = 0;
+  else if (top + popoverRect.height > window.innerHeight + scrollY) top = window.innerHeight + scrollY - popoverRect.height;
+
+  return { placement, position: { top, left } };
+}
+
+================
+File: reference/common/queries.ts
+================
+import * as Constants from '@common/constants';
+import * as Utilities from '@common/utilities';
+
+export async function getData({ route, key, body }, qualifier = 'data') {
+  let result;
+  try {
+    const response = await fetch(route, {
+      method: 'POST',
+      headers: { 'X-API-KEY': key, 'Content-Type': 'application/json' },
+      body: JSON.stringify(body),
+    });
+    result = await response.json();
+  } catch (e) {
+    return null;
+  }
+
+  if (!result) {
+    return null;
+  }
+
+  if (result.error) {
+    return null;
+  }
+
+  if (!result[qualifier]) {
+    return null;
+  }
+
+  return result;
+}
+
+export async function onUserListData({ key }) {
+  const route = `${Constants.API}/data`;
+  const body = {};
+  return await getData({ route, key, body });
+}
+
+export async function onUserDeleteData({ id, key }) {
+  const route = `${Constants.API}/data/delete`;
+  const body = { id };
+  return await getData({ route, key, body });
+}
+
+export async function onRefreshDocuments({ key, type, domain }) {
+  const route = `${Constants.API}/documents`;
+  const body = { type, domain };
+  return await getData({ route, key, body });
+}
+
+export async function onGetDocumentById({ id }) {
+  const route = `${Constants.API}/documents/${id}`;
+  const body = {};
+  return await getData({ route, key: null, body });
+}
+
+export async function onUserCreateDocument({ key, type, domain }) {
+  const route = `${Constants.API}/documents/create`;
+  const body = { type, domain };
+  return await getData({ route, key, body });
+}
+
+export async function onDeleteDocumentById({ id, key }) {
+  const route = `${Constants.API}/documents/delete`;
+  const body = { id };
+  return await getData({ route, key, body });
+}
+
+export async function onUpdateDocumentById({ id, key, data }) {
+  const route = `${Constants.API}/documents/update`;
+  const body = { id, data };
+  return await getData({ route, key, body });
+}
+
+export async function onPublicUserAuthenticate({ email, password }) {
+  const route = `${Constants.API}/users/authenticate`;
+  const body = { email, password };
+  return getData({ route, key: null, body }, 'user');
+}
+
+export async function onPublicUserForgotPassword({ email }) {
+  const route = `${Constants.API}/users/reset-password`;
+  const body = { email, source: 'wireframes.internet.dev' };
+  return getData({ route, key: null, body }, 'success');
+}
+
+export async function onUserChangePassword({ key, password }) {
+  const route = `${Constants.API}/users/update-viewer-password`;
+  const body = { password };
+  return getData({ route, key, body });
+}
+
+export async function onUserRegenerateAPIKey({ email, password }) {
+  const route = `${Constants.API}/users/regenerate-key`;
+  const body = { email, password };
+  return getData({ route, key: null, body }, 'user');
+}
+
+export async function onUserUnsubscribeServices({ key }) {
+  const route = `${Constants.API}/users/subscriptions/unsubscribe`;
+  const body = null;
+  return getData({ route, key, body }, 'user');
+}
+
+export async function onRefreshPosts({ key, type, user_id }) {
+  const route = `${Constants.API}/posts`;
+  const body = { type, user_id };
+  return await getData({ route, key, body });
+}
+
+export async function onUserCreatePost({ id, key, src, type }) {
+  const route = `${Constants.API}/posts/create`;
+  const body = { type, fields: { fileId: id, public: true }, src };
+  return getData({ route, key, body });
+}
+
+export async function onUserCreateThread({ fields, key, src, type }) {
+  const route = `${Constants.API}/posts/create`;
+  const body = { fields, src, type };
+  return getData({ route, key, body });
+}
+
+export async function onUserDeletePost({ id, key }) {
+  const route = `${Constants.API}/posts/delete`;
+  const body = { id };
+  return getData({ route, key, body });
+}
+
+export async function onUserListThreadReplies({ id, key, orderBy }) {
+  const route = `${Constants.API}/posts/all-thread-replies`;
+  const body = { id, orderBy };
+  return getData({ route, key, body });
+}
+
+export async function onUserListThreads({ key, orderBy }) {
+  const route = `${Constants.API}/posts/all-threads`;
+  const body = { orderBy };
+  return getData({ route, key, body });
+}
+
+export async function onUserUploadDataGCS({ domain, file, key }) {
+  let signedResult;
+  const name = file.name;
+  const type = file.type;
+  const size = file.size;
+
+  if (size > Constants.MAX_SIZE_BYTES) {
+    return { error: 'File size exceeds 15mb limit' };
+  }
+
+  try {
+    const route = `${Constants.API}/data/generate-presigned-url-gcs`;
+    const body = { domain, type, file: name, size };
+    signedResult = await getData({ route, key, body }, 'uploadURL');
+  } catch (e) {
+    return null;
+  }
+
+  try {
+    fetch(signedResult.uploadURL, {
+      method: 'PUT',
+      headers: {
+        'Content-Type': 'application/octet-stream',
+      },
+      body: file,
+    });
+  } catch (e) {
+    return null;
+  }
+
+  return signedResult;
+}
+
+export async function onUserUploadDataS3({ domain, file, key }) {
+  let signedResult;
+  const name = file.name;
+  const type = file.type;
+  const size = file.size;
+
+  if (size > Constants.MAX_SIZE_BYTES) {
+    return { error: 'File size exceeds 15mb limit' };
+  }
+
+  try {
+    const route = `${Constants.API}/data/generate-presigned-url`;
+    const body = { domain, type, file: name, size };
+    signedResult = await getData({ route, key, body }, 'uploadURL');
+  } catch (e) {
+    return null;
+  }
+
+  try {
+    fetch(signedResult.uploadURL, {
+      method: 'PUT',
+      body: file,
+    });
+  } catch (e) {
+    return null;
+  }
+
+  return signedResult;
+}
+
+================
+File: reference/common/server.ts
+================
+import * as Utilities from '@common/utilities';
+
+import Cors from '@modules/cors';
+
+// NOTE(jimmylee)
+// import aesjs from 'aes-js';
+/*
+Some endpoints on https://api.internet.dev require server-side decryption. Without it, you won’t be able to perform actions like password recovery or Google authentication. To enable these features, you’ll need to set two environment variables with the correct values, and have an active partnership with us.
+
+When we built this open-source template for learning purposes, we aimed to make it fully open and accessible. However, since we are also running a service, certain restrictions are necessary. We appreciate your understanding.
+
+API_AES_KEY=
+API_IV_KEY=
+*/
+
+/*
+export function decrypt(hex) {
+  if (Utilities.isEmpty(process.env.API_AES_KEY)) {
+    throw new Error('process.env.API_AES_KEY');
+    return;
+  }
+
+  if (Utilities.isEmpty(process.env.API_IV_KEY)) {
+    throw new Error('process.env.API_IV_KEY');
+    return;
+  }
+
+  const aesKey = aesjs.utils.utf8.toBytes(process.env.API_AES_KEY);
+  const base64IV = process.env.API_IV_KEY;
+
+  if (!base64IV) {
+    throw new Error('process.env.API_IV_KEY is undefined. Please set the environment variable.');
+  }
+
+  const ivBytes = aesjs.utils.hex.toBytes(Buffer.from(base64IV, 'base64').toString('hex'));
+  const aesCtr = new aesjs.ModeOfOperation.ctr(aesKey, new aesjs.Counter(ivBytes));
+  const encryptedBytes = aesjs.utils.hex.toBytes(hex);
+  const decryptedBytes = aesCtr.decrypt(encryptedBytes);
+  const decrypted = aesjs.utils.utf8.fromBytes(decryptedBytes);
+
+  return decrypted;
+}
+*/
+
+export function initMiddleware(middleware) {
+  return (req, res) =>
+    new Promise((resolve, reject) => {
+      middleware(req, res, (result) => {
+        if (result instanceof Error) {
+          return reject(result);
+        }
+        return resolve(result);
+      });
+    });
+}
+
+export const cors = initMiddleware(
+  Cors({
+    methods: ['GET', 'POST', 'DELETE', 'OPTIONS'],
+  })
+);
+
+export async function setup(context): Promise<{ sessionKey?: any; viewer?: Record<string, any> | null }> {
+  let viewer = null;
+  let sessionKey = context.req.cookies['sitekey'] || '';
+
+  if (!Utilities.isEmpty(sessionKey)) {
+    try {
+      const response = await fetch('https://api.internet.dev/api/users/viewer', {
+        method: 'PUT',
+        headers: { 'X-API-KEY': sessionKey, 'Content-Type': 'application/json' },
+      });
+      const result = await response.json();
+      if (result && result.viewer) {
+        viewer = result.viewer;
+      }
+    } catch (e) {}
+  }
+
+  return { sessionKey, viewer };
+}
+
+export async function tryKeyWithoutCookie(key): Promise<{ sessionKey?: any; viewer?: Record<string, any> | null }> {
+  let viewer = null;
+
+  if (!Utilities.isEmpty(key)) {
+    try {
+      const response = await fetch('https://api.internet.dev/api/users/viewer', {
+        method: 'PUT',
+        headers: { 'X-API-KEY': key, 'Content-Type': 'application/json' },
+      });
+      const result = await response.json();
+      if (result && result.viewer) {
+        viewer = result.viewer;
+      }
+    } catch (e) {}
+  }
+
+  return { sessionKey: key, viewer };
+}
+
+================
+File: reference/common/utilities.ts
+================
+const hasOwn = {}.hasOwnProperty;
+const localhostDomainRE = /^localhost[\:?\d]*(?:[^\:?\d]\S*)?$/;
+const nonLocalhostDomainRE = /^[^\s\.]+\.\S{2,}$/;
+const protocolAndDomainRE = /^(?:\w+:)?\/\/(\S+)$/;
+
+export function noop() {
+  return null;
+}
+
+export function pluralize(text: string, count: number) {
+  return count > 1 || count === 0 ? `${text}s` : text;
+}
+
+export function getOrdinalNumber(n) {
+  return n + (n > 0 ? ['th', 'st', 'nd', 'rd'][(n > 3 && n < 21) || n % 10 > 3 ? 0 : n % 10] : '');
+}
+
+// NOTE(jimmylee)
+// Stolen from: https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/deepEqual.ts
+export function deepEqual(x: any, y: any): boolean {
+  //@ts-ignore
+  return x && y && typeof x === 'object' && typeof y === 'object'
+    ? Object.keys(x).length === Object.keys(y).length &&
+        //@ts-ignore
+        Object.keys(x).reduce((isEqual, key) => isEqual && deepEqual(x[key], y[key]), true)
+    : x === y;
+}
+
+export function getDomainFromEmailWithoutAnySubdomain(email: string): string {
+  const atIndex = email.lastIndexOf('@');
+  if (atIndex === -1) {
+    return '';
+  }
+
+  const domain = email.slice(atIndex + 1);
+  const domainParts = domain.split('.');
+
+  if (domainParts.length < 2) {
+    return '';
+  }
+
+  const mainDomain = domainParts.slice(-2).join('.');
+  return mainDomain;
+}
+
+export function onHandleThemeChange(className?: string) {
+  const body = document.body;
+
+  body.classList.forEach((existingClass) => {
+    if (existingClass.startsWith('theme-')) {
+      body.classList.remove(existingClass);
+    }
+  });
+
+  if (className) {
+    body.classList.add(className);
+  } else {
+    body.classList.add('theme-light');
+  }
+}
+
+export function onHandleFontChange(className?: string) {
+  const body = document.body;
+
+  if (className) {
+    body.classList.forEach((existingClass) => {
+      if (existingClass.startsWith('font-')) {
+        body.classList.remove(existingClass);
+      }
+    });
+
+    body.classList.add(className);
+    return;
+  }
+
+  body.classList.forEach((existingClass) => {
+    if (existingClass.startsWith('font-')) {
+      body.classList.remove(existingClass);
+    }
+  });
+}
+
+export function formatDollars(value: number): string {
+  return new Intl.NumberFormat('en-US', {
+    style: 'currency',
+    currency: 'USD',
+  }).format(value);
+}
+
+export function calculatePositionWithGutter(rect, objectWidth, viewportWidth, gutter = 24) {
+  const right = viewportWidth - rect.right;
+  const top = rect.top + rect.height + gutter;
+  const side = right + objectWidth >= viewportWidth ? 'left' : 'right';
+  const adjustedRight = side === 'left' ? viewportWidth - objectWidth - gutter : right;
+  return { top, right: adjustedRight, side };
+}
+
+export function calculatePositionWithGutterById(id, objectWidth, viewportWidth, gutter?) {
+  let rect;
+  if (id) {
+    const el = document.getElementById(id);
+    if (el) {
+      rect = el.getBoundingClientRect();
+    }
+  }
+  return calculatePositionWithGutter(rect, objectWidth, viewportWidth, gutter);
+}
+
+export function leftPad(input, length) {
+  const zerosNeeded = length - input.length;
+  if (zerosNeeded <= 0) {
+    return input;
+  }
+
+  const zeros = '0'.repeat(zerosNeeded);
+
+  return zeros + input;
+}
+
+export function toDateISOString(data: string) {
+  const date = new Date(data);
+  const dayOfWeek = date.toLocaleDateString('en-US', {
+    weekday: 'long',
+  });
+  const month = date.toLocaleDateString('en-US', {
+    month: 'long',
+  });
+  const dayOfMonth = getOrdinalNumber(date.getDate());
+  const year = date.getFullYear();
+
+  const formattedDate = `${dayOfWeek}, ${month} ${dayOfMonth}, ${year}`;
+
+  return formattedDate;
+}
+
+export function elide(string, length = 140, emptyState = '...') {
+  if (isEmpty(string)) {
+    return emptyState;
+  }
+
+  if (string.length < length) {
+    return string.trim();
+  }
+
+  return `${string.substring(0, length)}...`;
+}
+
+export function bytesToSize(bytes: number, decimals: number = 2) {
+  if (bytes === 0) return '0 Bytes';
+
+  const k = 1000;
+  const dm = decimals < 0 ? 0 : decimals;
+  const sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
+
+  const i = Math.floor(Math.log(bytes) / Math.log(k));
+
+  return `${(bytes / Math.pow(k, i)).toFixed(dm)} ${sizes[i]}`;
+}
+
+export function isEmpty(text: any) {
+  // NOTE(jimmylee):
+  // If a number gets passed in, it isn't considered empty for zero.
+  if (text === 0) {
+    return false;
+  }
+
+  if (!text) {
+    return true;
+  }
+
+  if (typeof text === 'object') {
+    return true;
+  }
+
+  if (text.length === 0) {
+    return true;
+  }
+
+  text = text.toString();
+
+  return Boolean(!text.trim());
+}
+
+export function createSlug(text: any) {
+  if (isEmpty(text)) {
+    return 'untitled';
+  }
+
+  const a = 'æøåàáäâèéëêìíïîòóöôùúüûñçßÿœæŕśńṕẃǵǹḿǘẍźḧ·/_,:;';
+  const b = 'aoaaaaaeeeeiiiioooouuuuncsyoarsnpwgnmuxzh------';
+  const p = new RegExp(a.split('').join('|'), 'g');
+
+  return text
+    .toString()
+    .toLowerCase()
+    .replace(/\s+/g, '-') // Replace spaces with -
+    .replace(p, (c) => b.charAt(a.indexOf(c))) // Replace special chars
+    .replace(/&/g, '-and-') // Replace & with 'and'
+    .replace(/[^\w\-]+/g, '') // Remove all non-word chars
+    .replace(/\-\-+/g, '-') // Replace multiple - with single -
+    .replace(/^-+/, '') // Trim - from start of text
+    .replace(/-+$/, ''); // Trim - from end of text
+}
+
+export function isUrl(string: any) {
+  if (typeof string !== 'string') {
+    return false;
+  }
+
+  let match = string.match(protocolAndDomainRE);
+  if (!match) {
+    return false;
+  }
+
+  let everythingAfterProtocol = match[1];
+  if (!everythingAfterProtocol) {
+    return false;
+  }
+
+  if (localhostDomainRE.test(everythingAfterProtocol) || nonLocalhostDomainRE.test(everythingAfterProtocol)) {
+    return true;
+  }
+
+  return false;
+}
+
+export function debounce<Args extends unknown[]>(fn: (...args: Args) => void, delay: number) {
+  let timeoutID: number | undefined;
+  let lastArgs: Args | undefined;
+
+  const run = () => {
+    if (lastArgs) {
+      fn(...lastArgs);
+      lastArgs = undefined;
+    }
+  };
+
+  const debounced = (...args: Args) => {
+    clearTimeout(timeoutID);
+    lastArgs = args;
+    timeoutID = window.setTimeout(run, delay);
+  };
+
+  debounced.flush = () => {
+    clearTimeout(timeoutID);
+  };
+
+  return debounced;
+}
+
+export function timeAgo(dateInput: Date | string | number): string {
+  const date = new Date(dateInput);
+  const now = new Date();
+  const secondsPast = (now.getTime() - date.getTime()) / 1000;
+
+  if (secondsPast < 0 || isNaN(secondsPast)) {
+    return '[INVALID]';
+  }
+
+  if (secondsPast < 60) {
+    return 'Just now';
+  } else if (secondsPast < 3600) {
+    const minutes = Math.floor(secondsPast / 60);
+    return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;
+  } else if (secondsPast < 86400) {
+    const hours = Math.floor(secondsPast / 3600);
+    return `${hours} hour${hours > 1 ? 's' : ''} ago`;
+  } else if (secondsPast < 604800) {
+    const days = Math.floor(secondsPast / 86400);
+    return `${days} day${days > 1 ? 's' : ''} ago`;
+  }
+
+  const formattedDate = date.toLocaleDateString('en-US', {
+    month: '2-digit',
+    day: '2-digit',
+    year: 'numeric',
+  });
+
+  return formattedDate;
+}
+
+export function classNames(...args: any[]): string {
+  let classes: string[] = [];
+
+  for (let i = 0; i < arguments.length; i++) {
+    let arg = arguments[i];
+    if (!arg) continue;
+
+    let argType = typeof arg;
+
+    if (argType === 'string' || argType === 'number') {
+      classes.push(arg);
+    } else if (Array.isArray(arg)) {
+      if (arg.length) {
+        let inner = classNames.apply(null, arg);
+        if (inner) {
+          classes.push(inner);
+        }
+      }
+    } else if (argType === 'object') {
+      if (arg.toString !== Object.prototype.toString) {
+        classes.push(arg.toString());
+      } else {
+        for (let key in arg) {
+          if (hasOwn.call(arg, key) && arg[key]) {
+            classes.push(key);
+          }
+        }
+      }
+    }
+  }
+
+  return classes.join(' ');
+}
+
+export async function generateNonce() {
+  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
+  let result = '';
+  const charactersLength = characters.length;
+  for (let i = 0; i < 8; i++) {
+    result += characters.charAt(Math.floor(Math.random() * charactersLength));
+  }
+  return result;
+}
+
+export function filterUndefined(obj) {
+  const res = {};
+  Object.keys(obj)
+    .filter((k) => obj[k] !== undefined)
+    .forEach((k) => (res[k] = obj[k]));
+  return res;
+}
+
+export const isFocusableElement = (element: EventTarget | null): element is HTMLElement => {
+  if (!element || !(element instanceof HTMLElement)) {
+    return false;
+  }
+
+  const focusableSelectors = ['a[href]', 'button', 'input', 'select', 'textarea', '[tabindex]:not([tabindex="-1"])', '[contenteditable="true"]'];
+
+  return element.matches(focusableSelectors.join(', '));
+};
+
+export const findNextFocusable = (element: Element | null, direction: 'next' | 'previous' = 'next'): HTMLElement | null => {
+  if (!element) return null;
+
+  const focusableSelectors = ['a[href]', 'button', 'input', 'select', 'textarea', '[tabindex]:not([tabindex="-1"])', '[contenteditable="true"]'];
+
+  const focusableElements = Array.from(document.querySelectorAll<HTMLElement>(focusableSelectors.join(', ')));
+
+  const currentIndex = focusableElements.indexOf(element as HTMLElement);
+
+  if (currentIndex !== -1) {
+    const nextIndex = direction === 'next' ? (currentIndex + 1) % focusableElements.length : (currentIndex - 1 + focusableElements.length) % focusableElements.length;
+
+    return focusableElements[nextIndex];
+  }
+
+  return null;
+};
+
+export const findFocusableDescendant = (container: Element | null, currentFocused: Element | null = null, direction: 'next' | 'previous' = 'next'): HTMLElement | null => {
+  if (!container) return null;
+
+  const focusableElements = Array.from(container.querySelectorAll<HTMLElement>('a[href], button, input, select, textarea, [tabindex]:not([tabindex="-1"]), [contenteditable="true"]'));
+
+  if (focusableElements.length === 0) return null;
+
+  let index = 0;
+  if (currentFocused) {
+    const currentIndex = focusableElements.indexOf(currentFocused as HTMLElement);
+    if (currentIndex !== -1) {
+      index = direction === 'next' ? currentIndex + 1 : currentIndex - 1;
+    }
+  }
+
+  if (index >= 0 && index < focusableElements.length) {
+    return focusableElements[index];
+  }
+
+  return null;
+};
+
+================
+File: reference/components/detectors/OutsideElementEvent.tsx
+================
+import * as React from 'react';
+
+interface OutsideElementEventProps {
+  className?: string;
+  children: React.ReactNode;
+  onOutsideEvent: (event: MouseEvent | TouchEvent) => void;
+  style?: React.CSSProperties;
+}
+
+const OutsideElementEvent: React.FC<OutsideElementEventProps> = ({ className, children, onOutsideEvent, style }) => {
+  const ref = React.useRef<HTMLDivElement>(null);
+
+  const handleOutsideEvent = React.useCallback(
+    (event: MouseEvent | TouchEvent) => {
+      if (!(event.target instanceof Element)) return;
+
+      if (event.target.hasAttribute('data-detector-ignore')) {
+        return;
+      }
+
+      if (ref.current && !ref.current.contains(event.target as Node)) {
+        onOutsideEvent(event);
+      }
+    },
+    [onOutsideEvent]
+  );
+
+  React.useEffect(() => {
+    document.addEventListener('mousedown', handleOutsideEvent);
+    document.addEventListener('touchstart', handleOutsideEvent);
+
+    return () => {
+      document.removeEventListener('mousedown', handleOutsideEvent);
+      document.removeEventListener('touchstart', handleOutsideEvent);
+    };
+  }, [handleOutsideEvent]);
+
+  return (
+    <div ref={ref} className={className} style={style}>
+      {children}
+    </div>
+  );
+};
+
+export default OutsideElementEvent;
+
+================
+File: reference/components/examples/AS400.module.scss
+================
+.root {
+}
+
+================
+File: reference/components/examples/AS400.tsx
+================
+'use client';
+
+import styles from '@components/AS400.module.scss';
+
+import * as React from 'react';
+
+import Card from '@components/Card';
+import Row from '@components/Row';
+import RowSpaceBetween from '@components/RowSpaceBetween';
+import Table from '@components/Table';
+import TableRow from '@components/TableRow';
+import TableColumn from '@components/TableColumn';
+import TextArea from '@components/TextArea';
+
+type AS400Props = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const AS400 = () => {
+  return (
+    <>
+      <Card>
+        <RowSpaceBetween>
+          <span style={{ minWidth: `10ch` }}>COMMAND</span>
+          <span style={{ minWidth: `10ch` }}>Menu : ⌃+T</span>
+          <span style={{ minWidth: `10ch`, textAlign: 'right' }}>IND333</span>
+        </RowSpaceBetween>
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow style={{ textAlign: 'center' }}>
+            <TableColumn>F O O D&nbsp;&nbsp;D I S T R I B U T I O N</TableColumn>
+          </TableRow>
+          <TableRow style={{ textAlign: 'center' }}>
+            <TableColumn>- - Advance Sales Menu - -</TableColumn>
+          </TableRow>
+        </Table>
+        <br />
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow>
+            <TableColumn>1. Order Entry</TableColumn>
+            <TableColumn>13. Create Texlon/MSI Orders</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>2. Route Recap</TableColumn>
+            <TableColumn>14. Create Posting w/Scanner</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>3. Staging Ticket</TableColumn>
+            <TableColumn></TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>4. Picking Ticket</TableColumn>
+            <TableColumn>15. Order List</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>5. Order Posting</TableColumn>
+            <TableColumn>16. Order Maintenance</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>6. Bill of Lading</TableColumn>
+            <TableColumn>16. Order Hold</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>7. Load Sheets</TableColumn>
+            <TableColumn>18. Order Release</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>8. Order Entry Invoicing</TableColumn>
+            <TableColumn>19. Order Cancellation</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>9. Order Entry Confirmation</TableColumn>
+            <TableColumn>20. Order Change</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>10. Order Entry Processing</TableColumn>
+            <TableColumn>21. Unsettled Invoice Report</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>&nbsp;</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>11. Credit Memo Entry</TableColumn>
+            <TableColumn>- - Transaction Processing Menu - -</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>12. Credit Memo Processing</TableColumn>
+            <TableColumn>- - Main Menu - -</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn></TableColumn>
+            <TableColumn>24. Sign Off</TableColumn>
+          </TableRow>
+        </Table>
+        <br />
+        <br />
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow>
+            <TableColumn>Ready for option number or command</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>
+              <TextArea isBlink />
+            </TableColumn>
+          </TableRow>
+        </Table>
+      </Card>
+      <br />
+      <Card>
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;Option: 1337...&nbsp;&nbsp; Copy: US&nbsp;&nbsp;&nbsp;&nbsp;ITEM ACTIVITY INQUIRY</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>IND333</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Regn: NW</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}></TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;Item #: 6666666</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}></TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GMO HONEYDEW MELON USDA PRIME 72 OZ</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}></TableColumn>
+          </TableRow>
+        </Table>
+        <br />
+        <br />
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow>
+            <TableColumn>Warehouse</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>On Hand</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>On Order</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>In Transit</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>Total</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>W/S</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>Sell</TableColumn>
+          </TableRow>
+
+          <TableRow>
+            <TableColumn>&nbsp;</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;01 SEATTLE</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;02 PORTLAND</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;06 TUKWILA</TableColumn>
+            <TableColumn>89</TableColumn>
+            <TableColumn>162</TableColumn>
+            <TableColumn>162</TableColumn>
+            <TableColumn>413</TableColumn>
+            <TableColumn>7.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;08 KIRKLAND</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;09 ALOHA</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;10 ANCHORAGE</TableColumn>
+            <TableColumn>107</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>324</TableColumn>
+            <TableColumn>511</TableColumn>
+            <TableColumn>5.5</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;13 SILVERDALE</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;17 EUGENE</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;61 FEDERAL WAY</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;63 NE ANCHORAGE</TableColumn>
+            <TableColumn>229</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>162</TableColumn>
+            <TableColumn>391</TableColumn>
+            <TableColumn>4.5</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;64 TUMWATER</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;67 MISSOULA</TableColumn>
+            <TableColumn>201</TableColumn>
+            <TableColumn>648</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>849</TableColumn>
+            <TableColumn>5.2</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;95 TACOMA</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+        </Table>
+        <br />
+        <br />
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow>
+            <TableColumn>CF-3 Exit&nbsp;&nbsp;&nbsp;&nbsp;CF7-Next Item&nbsp;&nbsp;&nbsp;&nbsp;CF21-Print Report</TableColumn>
+          </TableRow>
+        </Table>
+      </Card>
+    </>
+  );
+};
+
+AS400.displayName = 'AS400';
+
+export default AS400;
+
+================
+File: reference/components/examples/DashboardRadar.module.scss
+================
+.customSidebar {
+  display: flex;
+  align-items: center;
+  justify-content: space-between;
+  width: 100%;
+  flex-direction: column;
+  height: calc(var(--theme-line-height-base) * (var(--font-size) * 29.5));
+}
+
+.customTop {
+  min-height: 10%;
+  height: 100%;
+}
+
+.customBottom {
+  flex-shrink: 0;
+  width: 100%;
+}
+
+.root {
+  min-width: 56ch;
+}
+
+.cross {
+  width: 9ch;
+  height: calc(var(--theme-line-height-base) * (var(--font-size) * 7));
+  margin: calc(var(--theme-line-height-base) * (var(--font-size) * 0.5)) 0 calc(var(--theme-line-height-base) * (var(--font-size) * 0.5)) 0;
+  display: flex;
+  justify-content: space-between;
+  flex-direction: column;
+}
+
+.square {
+  width: 4.3ch;
+  height: calc(var(--theme-line-height-base) * (var(--font-size) * 3.4));
+}
+
+.nw {
+  border-right: 2px solid var(--theme-text);
+  border-bottom: 2px solid var(--theme-text);
+}
+
+.ne {
+  border-left: 2px solid var(--theme-text);
+  border-bottom: 2px solid var(--theme-text);
+}
+
+.sw {
+  border-top: 2px solid var(--theme-text);
+  border-right: 2px solid var(--theme-text);
+}
+
+.se {
+  border-top: 2px solid var(--theme-text);
+  border-left: 2px solid var(--theme-text);
+}
+
+.customContent {
+  width: 100%;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  height: calc(var(--theme-line-height-base) * (var(--font-size) * 24.5));
+}
+
+================
+File: reference/components/examples/DashboardRadar.tsx
+================
+import styles from '@components/examples/DashboardRadar.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import ActionButton from '@components/ActionButton';
+import ButtonGroup from '@components/ButtonGroup';
+import Card from '@components/Card';
+import RowSpaceBetween from '@components/RowSpaceBetween';
+import SidebarLayout from '@components/SidebarLayout';
+import Sphere from '@components/svg/Sphere';
+
+const RadarMarker = (props) => {
+  return (
+    <div className={styles.cross}>
+      <RowSpaceBetween>
+        <div className={Utilities.classNames(styles.square, styles.nw)} />
+        <div className={Utilities.classNames(styles.square, styles.ne)} />
+      </RowSpaceBetween>
+      <RowSpaceBetween>
+        <div className={Utilities.classNames(styles.square, styles.sw)} />
+        <div className={Utilities.classNames(styles.square, styles.se)} />
+      </RowSpaceBetween>
+    </div>
+  );
+};
+
+const DashboardRadar = (props) => {
+  return (
+    <div className={styles.root}>
+      <SidebarLayout
+        isReversed
+        sidebar={
+          <Card>
+            <div className={styles.customSidebar}>
+              <div className={styles.customTop}>
+                TIME FROM
+                <ActionButton style={{ width: '100%' }}>11:11:11:11</ActionButton>
+                <br />
+                <br />
+                PRESENT
+                <br />
+                P.O.R.
+                <br />
+                NOSTROMO
+                <br />
+              </div>
+              <div className={styles.customBottom}>
+                HEADING
+                <br />
+                <ButtonGroup isFull items={[{ body: 'N .36' }, { body: 'E .18' }]} />
+                <br />
+                GROUND
+                <br />
+                <ActionButton rootStyle={{ width: '100%' }}>SPEED 78.26</ActionButton>
+                <br />
+                CONDITION
+                <br />
+                CODE
+                <br />
+                <ActionButton style={{ width: '100%' }}>16 S=C75C</ActionButton>
+                <ActionButton>PAST=8</ActionButton>
+                <br />
+                <br />
+                <ActionButton rootStyle={{ width: '100%' }}>System #4</ActionButton>
+                <br />
+                <br />
+                AUTODECOUNT
+                <br />
+                <br />
+                <ActionButton rootStyle={{ width: '100%', textAlign: 'right' }}>3454.94#</ActionButton>
+              </div>
+            </div>
+          </Card>
+        }
+        defaultSidebarWidth={19}
+      >
+        <Card>
+          <RowSpaceBetween>
+            <span style={{ flexShrink: 0 }}>DEORBITAL DESCENT</span>
+            <span style={{ minWidth: '10%', width: '100%', display: 'flex', justifyContent: 'flex-end' }}>
+              <span>
+                <ActionButton>COMMENCE FINAL</ActionButton>
+                <br />
+                <ActionButton>SYSTEM :0L: 76.75 :08:</ActionButton>
+              </span>
+            </span>
+          </RowSpaceBetween>
+        </Card>
+        <br />
+        <Card>
+          <RowSpaceBetween style={{ position: 'absolute', top: 0, left: `6ch`, right: `6ch` }}>
+            <RadarMarker />
+            <RadarMarker />
+          </RowSpaceBetween>
+          <div className={styles.customContent}>
+            <Sphere style={{ transform: 'translateX(24ch) rotateZ(40deg)' }} />
+          </div>
+          <RowSpaceBetween style={{ position: 'absolute', bottom: `calc(var(--theme-line-height-base) * (var(--font-size) * 0.5))`, left: `6ch`, right: `6ch` }}>
+            <RadarMarker />
+            <RadarMarker />
+          </RowSpaceBetween>
+        </Card>
+      </SidebarLayout>
+    </div>
+  );
+};
+
+export default DashboardRadar;
+
+================
+File: reference/components/examples/Denabase.module.scss
+================
+.root {
+  min-width: 68ch;
+  margin-top: calc(var(--theme-line-height-base) * 1rem);
+}
+
+.dna {
+  min-width: 71ch;
+  -webkit-text-size-adjust: 100%;
+}
+
+.tag {
+  width: 3ch;
+  height: calc(var(--theme-line-height-base) * 0.5rem);
+  flex-shrink: 0;
+  box-shadow:
+    inset 2px 0 0 var(--theme-text),
+    inset -2px 0 0 var(--theme-text),
+    inset 0 2px 0 var(--theme-text);
+}
+
+.secondaryTag {
+  width: 3ch;
+  align-self: stretch;
+  flex-shrink: 0;
+  box-shadow:
+    inset 2px 0 0 var(--theme-text),
+    inset -2px 0 0 var(--theme-text),
+    inset 0 2px 0 var(--theme-text);
+}
+
+.small {
+  width: 13ch;
+  flex-shrink: 0;
+  text-align: right;
+}
+
+.smallWithBorder {
+  width: 13ch;
+  flex-shrink: 0;
+  text-align: right;
+  box-shadow: inset 0 2px 0 var(--theme-text);
+}
+
+.smallSection {
+  width: 13ch;
+  flex-shrink: 0;
+  min-width: 10%;
+  text-align: right;
+  box-shadow: inset 0 2px 0 var(--theme-text);
+}
+
+.large {
+  width: 80%;
+  min-width: 10%;
+  text-align: right;
+}
+
+.largeWithBorder {
+  width: 80%;
+  min-width: 10%;
+  text-align: right;
+  box-shadow:
+    inset 0 2px 0 var(--theme-text),
+    inset -2px 0 0 var(--theme-text);
+}
+
+.largeSection {
+  width: 80%;
+  min-width: 10%;
+  text-align: right;
+  box-shadow:
+    inset 0 2px 0 var(--theme-text),
+    inset -2px 0 0 var(--theme-text);
+}
+
+.absoluteTag {
+  top: calc(var(--theme-line-height-base) * -0.5rem);
+  left: 0;
+  height: calc(var(--theme-line-height-base) * 0.5rem);
+  width: 14.2ch;
+  background: var(--theme-background);
+  position: absolute;
+  box-shadow:
+    inset 2px 0 0 var(--theme-text),
+    inset -2px 0 0 var(--theme-text),
+    inset 0 2px 0 var(--theme-text);
+}
+
+.box {
+  width: 7.1ch;
+  flex-shrink: 0;
+  height: calc(var(--theme-line-height-base) * 3rem);
+  display: inline-flex;
+  align-items: center;
+  justify-content: center;
+  box-shadow:
+    inset -2px 0 0 var(--theme-text),
+    inset 0 2px 0 var(--theme-text),
+    inset 0 -2px 0 var(--theme-text);
+
+  &:first-child {
+    box-shadow:
+      inset 2px 0 0 var(--theme-text),
+      inset -2px 0 0 var(--theme-text),
+      inset 0 2px 0 var(--theme-text),
+      inset 0 -2px 0 var(--theme-text);
+  }
+}
+
+================
+File: reference/components/examples/Denabase.tsx
+================
+'use client';
+
+import styles from '@components/examples/Denabase.module.scss';
+
+import * as React from 'react';
+
+import ActionButton from '@components/ActionButton';
+import Card from '@components/Card';
+import Divider from '@components/Divider';
+import Row from '@components/Row';
+import RowSpaceBetween from '@components/RowSpaceBetween';
+import SidebarLayout from '@components/SidebarLayout';
+
+const Denabase = (props) => {
+  return (
+    <>
+      <Card style={{ overflowWrap: 'break-word' }}>
+        <Row>
+          <RowSpaceBetween>
+            <ActionButton>TR5342120027455925897981</ActionButton>
+            <ActionButton>02.14.2021</ActionButton>
+          </RowSpaceBetween>
+          <Divider type="GRADIENT" />
+          <div className={styles.dna}>
+            T-CA-AA-AA-TA-TC-GG-GC-AC-AT-TA-TT-TA-TT-TG-CC-GC-TC-GG-GA-AG-TA-GA-A
+            <br />
+            A-TG-GT-AC-AT-GT-GT-TT-TA-TG-AT-TT-CT-CG-CA-GT-GA-AA-AA-GC-AA-CG-AA-C
+            <br />
+            C-TC-GC-CC-TT-AG-AT-TC-TA-TA-GC-TG-CT-CT-GA-GA-CC-GC-AC-TG-GC-AA-GC-A
+            <br />
+            G-AA-AC-TC-CG-CA-TT-CA-GG-CA-GT-CC-TC-CA-TG-CA-CT-TC-CT-GC-CT-GT-CT-G
+            <br />
+            C-TG-AA-CC-TA-TT-AT-TA-GA-GA-TG-GA-CT-GC-AG-TT-CT-CA-AT-CA-CA-CG-GA-T
+            <br />
+            C-TG-AT-AC-CT-GC-TG-GT-AT-GT-TC-CT-GA-TA-CC-CA-CA-GA-CA-GC-GC-CC-GA-A
+            <br />
+            T-TT-TG-GC-AA-CC-GA-AC-TT-CT-CA-AC-AA-AA-CC-GC-CT-AG-TT-GC-TA-AT-TT-G
+            <br />
+            G-TG-AC-CT-GA-CT-GA-AT-TG-TC-AT-TA-AA-CA-CT-CC-TG-CT-AA-GA-TG-CG-AA-G
+            <br />
+            C-TA-TT-AT-AG-TG-TT-TT-GT-AC-AG-GC-TA-TT-TT-GC-GT-GA-AA-CG-CA-AA-CG-C
+            <br />
+            G-TT-GC-AT-TT-CA-GA-AT-TC-CG-TG-CA-TA-GT-TA-TC-TC-AT-GC-CG-TG-CT-CT-T
+            <br />
+            G-AT-TA-TT-GA-CA-TA-TG-CA-GT-TC-GT-CC-TA-AT-CC-GC-GC-CT-GG-TC-TT-TA-G
+            <br />
+            T-CA-CT-AA-CC-GA-CC-CT-TA-GT-AT-TG-TT-CT-CT-CA-AC-AA-AA-TG-TG-TT-AA-A
+            <br />
+            C-CG-GC-AT-AA-TC-TG-GT-GA-TC-GG-GA-GA-TC-CA-GA-GA-AA-CA-CA-CC-TT-GG-G
+            <br />
+            C-TA-GA-TG-CC-CT-AC-AT-TA-GA-TA-AG-GG-GT-CT-AT-AC-GG-GC-GG-GG-TT-AG-T
+            <br />
+            A-CA-CC-TT-GA-GC-GT-AT-AG-GA-GA-GT-AA-CG-AG-GT-GG-TT-GT-CG-TG-GG-AG-G
+            <br />
+            A-GG-AG-TA-TG-TT-CT-CC-CT-TA-CT-AG-TT-GC-CG-AT-AA-CA-GA-TA-CT-GA-TG-T
+            <br />
+            C-TG-GT-AA-TT-GC-CA-GT-CA-TG-GT-TG-TA-GT-AG-CC-GG-GA-CC-CG-CA-GT-CT-G
+            <br />
+            G-GT-AG-CG-CC-TA-AC-AG-AT-AA-GG-GG-GC-CT-AC-TC-CC-GC-CC-TG-GT-CG-GC-C
+            <br />
+            T-GA-TC-AT-AA-AC-CT-CT-GT-AA-TA-CC-AT-GG-GC-CA-CG-TT-AG-GC-GT-CG-AT-G
+            <br />
+            C-CG-GA-CC-CA-TA-TC-TT-TA-CA-TC-AT-CT-CT-TT-CA-TA-GA-AG-TA-CC-CA-CT-T
+            <br />
+          </div>
+          <Divider type="GRADIENT" />
+        </Row>
+      </Card>
+      <br />
+      <Card>
+        <SidebarLayout
+          sidebar={
+            <Card style={{ padding: `0 0 0 0` }}>
+              <br />
+              <br />
+              <Row style={{ textAlign: 'center' }}>╳</Row>
+              <br />
+              <br />
+            </Card>
+          }
+          defaultSidebarWidth={19}
+        >
+          <Card style={{ padding: 0, marginLeft: `1ch`, minWidth: `30ch` }}>
+            <br />
+            <br />
+            <br />
+            <br />
+            <Row style={{ textAlign: 'right' }}>NO DATA</Row>
+          </Card>
+        </SidebarLayout>
+        <div className={styles.root}>
+          <RowSpaceBetween>
+            <div className={styles.tag}></div>
+            <div className={styles.small}></div>
+            <div className={styles.tag}></div>
+            <div className={styles.large}></div>
+          </RowSpaceBetween>
+          <RowSpaceBetween>
+            <div className={styles.secondaryTag}>
+              <br />
+              <br />
+            </div>
+            <div className={styles.smallSection}>
+              <br />
+              2181&nbsp;
+              <br />
+              <br />
+            </div>
+            <div className={styles.secondaryTag}></div>
+            <div className={styles.largeSection}>
+              <br />
+              UNKNOWN&nbsp;&nbsp;
+              <br />
+              <br />
+            </div>
+          </RowSpaceBetween>
+          <RowSpaceBetween>
+            <div className={styles.tag}></div>
+            <div className={styles.smallWithBorder}></div>
+            <div className={styles.tag}></div>
+            <div className={styles.largeWithBorder}></div>
+          </RowSpaceBetween>
+          <RowSpaceBetween>
+            <div className={styles.secondaryTag}>
+              <br />
+              <br />
+            </div>
+            <div className={styles.smallSection}>
+              <br />
+              DECEASED&nbsp;
+              <br />
+              <br />
+            </div>
+            <div className={styles.secondaryTag}></div>
+            <div className={styles.largeSection}>
+              <br />
+              MORRILLCOLE&nbsp;&nbsp;
+              <br />
+              <br />
+            </div>
+          </RowSpaceBetween>
+          <RowSpaceBetween style={{ position: 'relative' }}>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.absoluteTag}></div>
+          </RowSpaceBetween>
+        </div>
+      </Card>
+    </>
+  );
+};
+
+export default Denabase;
+
+================
+File: reference/components/examples/MessagesInterface.tsx
+================
+import Avatar from '@components/Avatar';
+import ActionButton from '@components/ActionButton';
+import Divider from '@components/Divider';
+import DropdownMenuTrigger from '@components/DropdownMenuTrigger';
+import Indent from '@components/Indent';
+import Input from '@components/Input';
+import Message from '@components/Message';
+import MessageViewer from '@components/MessageViewer';
+import ModalError from '@components/modals/ModalError';
+import Navigation from '@components/Navigation';
+import RowEllipsis from '@components/RowEllipsis';
+import SidebarLayout from '@components/SidebarLayout';
+
+import * as React from 'react';
+
+interface MessagesInterfaceProps extends React.HTMLAttributes<HTMLSpanElement> {}
+
+const ChatPreviewInline = (props) => {
+  return <RowEllipsis style={{ opacity: 0.5, marginBottom: `10px` }}>{props.children}</RowEllipsis>;
+};
+
+const MessagesInterface: React.FC<MessagesInterfaceProps> = () => {
+  return (
+    <div style={{ minWidth: '28ch' }}>
+      <Navigation
+        logo="✶"
+        left={
+          <>
+            <DropdownMenuTrigger
+              items={[
+                {
+                  icon: '⊹',
+                  children: 'Open',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'New Message',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Quick Look',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Close Messages',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Open Conversation in New Window',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Print...',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+              ]}
+            >
+              <ActionButton>FILE</ActionButton>
+            </DropdownMenuTrigger>
+
+            <DropdownMenuTrigger
+              items={[
+                {
+                  icon: '⊹',
+                  children: 'Undo',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Redo',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Cut',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Copy',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Paste',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Paste and Match Style',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Delete',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Select All',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Find...',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Find Next',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Find Previous',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Spelling and Grammar',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Substitutions',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Speech',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Send Message',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Reply to Last Message',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Tapback Last Message',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Edit Last Message',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Autofill',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Start Dictation',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Emoji & Symbols',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+              ]}
+            >
+              <ActionButton>EDIT</ActionButton>
+            </DropdownMenuTrigger>
+            <DropdownMenuTrigger
+              items={[
+                {
+                  icon: '⊹',
+                  children: 'Show Tab Bar',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Show All Tabs',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Make Text Bigger',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Make Text Normal Size',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Make Text Smaller',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'All Messages',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Known Senders',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Unknown Senders',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Unread Messages',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Recently Delete',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Show Sidebar',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Enter Full Screen',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+              ]}
+            >
+              <ActionButton>VIEW</ActionButton>
+            </DropdownMenuTrigger>
+          </>
+        }
+        right={
+          <>
+            <DropdownMenuTrigger
+              items={[
+                {
+                  icon: '⊹',
+                  children: 'Search',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Messages Help',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+              ]}
+            >
+              <ActionButton>HELP</ActionButton>
+            </DropdownMenuTrigger>
+          </>
+        }
+      ></Navigation>
+      <Divider type="DOUBLE" />
+      <SidebarLayout
+        defaultSidebarWidth={12}
+        isShowingHandle={true}
+        sidebar={
+          <>
+            <Avatar>
+              <Indent>
+                Arthur
+                <br />
+                <ChatPreviewInline>No, it has to be more unique</ChatPreviewInline>
+              </Indent>
+            </Avatar>
+            <Avatar>
+              <Indent>
+                Ariadne
+                <br />
+                <ChatPreviewInline>No. Just you.</ChatPreviewInline>
+              </Indent>
+            </Avatar>
+            <Avatar>
+              <Indent>
+                Eames
+                <br />
+                <ChatPreviewInline>dream a little bigger</ChatPreviewInline>
+              </Indent>
+            </Avatar>
+            <Avatar>
+              <Indent>
+                Yusef
+                <br />
+                <ChatPreviewInline>Depends on the dream.</ChatPreviewInline>
+              </Indent>
+            </Avatar>
+            <Avatar>
+              <Indent>
+                Saito
+                <br />
+                <ChatPreviewInline>I bought the airline.</ChatPreviewInline>
+              </Indent>
+            </Avatar>
+          </>
+        }
+      >
+        <Message>Why are they all looking at me?</Message>
+        <MessageViewer>Because my subconscious feels that someone else is creating this world. The more you change things, the quicker the projections start to converge on you.</MessageViewer>
+        <Message>Converge?</Message>
+        <MessageViewer>It's the foreign nature of the dreamer. They attack like white blood cells fighting an infection.</MessageViewer>
+        <Message>They're going to attack us?</Message>
+        <MessageViewer>No. Just you.</MessageViewer>
+        <br />
+        <br />
+        <Input autoComplete="off" isBlink={true} label="Message" name="test_message_interface" />
+      </SidebarLayout>
+    </div>
+  );
+};
+
+export default MessagesInterface;
+
+================
+File: reference/components/examples/UpdatingDataTable.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+import DataTable from '@components/DataTable';
+
+const UpdatingDataTable = (props) => {
+  const [tableData, setTableData] = React.useState(props.data);
+
+  React.useEffect(() => {
+    const interval = setInterval(() => {
+      setTableData((prevData) => {
+        const header = prevData[0];
+        const rows = prevData.slice(1);
+
+        const updatedRows = rows.map((row) => {
+          const currentPrice = parseFloat(row[2].replace('$', ''));
+          const currentHoldings = parseInt(row[3], 10);
+          const priceChangeFactor = 1 + (Math.random() - 0.5) * 0.1;
+          const newPrice = currentPrice * priceChangeFactor;
+          const holdingsChange = Math.floor((Math.random() - 0.5) * 20);
+          const newHoldings = Math.max(1, currentHoldings + holdingsChange);
+
+          return [row[0], row[1], `$${newPrice.toFixed(2)}`, newHoldings.toString()];
+        });
+
+        updatedRows.sort((a, b) => {
+          const priceA = parseFloat(a[2].replace('$', ''));
+          const priceB = parseFloat(b[2].replace('$', ''));
+          return priceB - priceA;
+        });
+
+        return [header, ...updatedRows];
+      });
+    }, 1000);
+
+    return () => clearInterval(interval);
+  }, []);
+
+  return (
+    <>
+      <DataTable data={tableData} />
+    </>
+  );
+};
+
+export default UpdatingDataTable;
+
+================
+File: reference/components/modals/ModalAlert.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalAlert.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalAlert.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import Card from '@components/Card';
+
+interface ModalAlertProps {
+  buttonText?: string | any;
+  message: string;
+}
+
+function ModalAlert({ message, buttonText }: ModalAlertProps) {
+  const { close } = useModals();
+
+  return (
+    <div className={styles.root}>
+      <Card title="ALERT">
+        {message}
+        <br />
+        <br />
+        <Button onClick={() => close()}>{Utilities.isEmpty(buttonText) ? 'Close' : buttonText}</Button>
+      </Card>
+    </div>
+  );
+}
+
+export default ModalAlert;
+
+================
+File: reference/components/modals/ModalCanvasPlatformer.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalCanvasPlatformer.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalCanvasPlatformer.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import CanvasPlatformer from '@components/CanvasPlatformer';
+import Card from '@components/Card';
+
+interface ModalCanvasPlatformerProps {
+  buttonText?: string | any;
+}
+
+function ModalCanvasPlatformer({ buttonText }: ModalCanvasPlatformerProps) {
+  const { close } = useModals();
+
+  return (
+    <div className={styles.root}>
+      <Card title="ALERT">
+        <CanvasPlatformer rows={12} />
+        <br />
+        <br />
+        <Button onClick={() => close()}>{Utilities.isEmpty(buttonText) ? 'Close' : buttonText}</Button>
+      </Card>
+    </div>
+  );
+}
+
+export default ModalCanvasPlatformer;
+
+================
+File: reference/components/modals/ModalCanvasSnake.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalCanvasSnake.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalCanvasSnake.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import CanvasSnake from '@components/CanvasSnake';
+import Card from '@components/Card';
+
+interface ModalCanvasSnakeProps {
+  buttonText?: string | any;
+}
+
+function ModalCanvasSnake({ buttonText }: ModalCanvasSnakeProps) {
+  const { close } = useModals();
+
+  return (
+    <div className={styles.root}>
+      <Card title="CANVAS PLATFORMER">
+        <CanvasSnake rows={12} />
+        <br />
+        <br />
+        <Button onClick={() => close()}>{Utilities.isEmpty(buttonText) ? 'Close' : buttonText}</Button>
+      </Card>
+    </div>
+  );
+}
+
+export default ModalCanvasSnake;
+
+================
+File: reference/components/modals/ModalChess.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalChess.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalChess.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useHotkeys } from '@modules/hotkeys';
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import CardDouble from '@components/CardDouble';
+import Chessboard from '@components/Chessboard';
+
+interface ModalErrorProps {
+  buttonText?: string | any;
+  board: string[][];
+  title?: string;
+}
+
+function ModalChess({ board, buttonText, title }: ModalErrorProps) {
+  const { close } = useModals();
+
+  useHotkeys('enter', () => close());
+
+  return (
+    <div className={styles.root}>
+      <CardDouble title={title} style={{ textAlign: 'center' }}>
+        <Chessboard board={board} />
+        <br />
+        <br />
+        <Button onClick={() => close()}>{Utilities.isEmpty(buttonText) ? 'CLOSE' : buttonText}</Button>
+      </CardDouble>
+    </div>
+  );
+}
+
+export default ModalChess;
+
+================
+File: reference/components/modals/ModalCreateAccount.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalCreateAccount.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalAlert.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import CardDouble from '@components/CardDouble';
+import Checkbox from '@components/Checkbox';
+import Input from '@components/Input';
+import RadioButtonGroup from '@components/RadioButtonGroup';
+
+function ModalCreateAccount() {
+  const { close } = useModals();
+
+  return (
+    <div className={styles.root}>
+      <CardDouble title="NEW ACCOUNT">
+        Create a new MakeBelieve™ account, where anything is possible at your command line in the browser.
+        <br />
+        <br />
+        <RadioButtonGroup
+          defaultValue="modal_developer"
+          options={[
+            { value: 'modal_individual', label: 'I’m using this for personal use.' },
+            { value: 'modal_developer', label: 'I’m building or creating something for work.' },
+            { value: 'modal_company', label: 'We’re using this as a team or organization.' },
+          ]}
+        />
+        <br />
+        <Input autoComplete="off" label="USERNAME" placeholder="Choose a username (e.g., SurfGirl29)" name="modal_username" />
+        <Input autoComplete="off" label="PASSWORD" placeholder="Create a password (8+ characters)" type="password" name="modal_password" />
+        <Input autoComplete="off" label="CONFIRM" placeholder="Type it again" type="password" name="modal_confirm" />
+        <br />
+        <Checkbox name="modal_terms">I agree to the Terms of Service, Data Privacy Policy, and Acceptable Use Guidelines.</Checkbox>
+        <Checkbox name="modal_goodwill">I agree not to use this service for unlawful purposes.</Checkbox>
+        <br />
+        <Button onClick={() => close()}>Create an account</Button>
+      </CardDouble>
+    </div>
+  );
+}
+
+export default ModalCreateAccount;
+
+================
+File: reference/components/modals/ModalError.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalError.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalError.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useHotkeys } from '@modules/hotkeys';
+import { useModals } from '@components/page/ModalContext';
+
+import ActionButton from '@components/ActionButton';
+import Button from '@components/Button';
+import CardDouble from '@components/CardDouble';
+import Grid from '@components/Grid';
+
+interface ModalErrorProps {
+  buttonText?: string | any;
+  message: string | any;
+  title?: string;
+}
+
+// TODO(jimmylee)
+// Enter doesn't always work for some reason.
+function ModalError({ message, buttonText, title }: ModalErrorProps) {
+  const { close } = useModals();
+
+  useHotkeys('enter', () => close());
+
+  return (
+    <div className={styles.root}>
+      <CardDouble title={title}>
+        <br />
+        {message}
+        <Grid>
+          <ul>
+            <li>
+              Press{' '}
+              <ActionButton hotkey="⏎" onClick={() => close()}>
+                ENTER
+              </ActionButton>{' '}
+              to continue.
+            </li>
+          </ul>
+        </Grid>
+      </CardDouble>
+    </div>
+  );
+}
+
+export default ModalError;
+
+================
+File: reference/components/modals/ModalMatrixModes.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalMatrixModes.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalMatrixModes.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import Card from '@components/Card';
+import MatrixLoader from '@components/MatrixLoader';
+
+interface ModalMatrixModesProps {
+  buttonText?: string | any;
+}
+
+function ModalMatrixModes({ buttonText }: ModalMatrixModesProps) {
+  const { close } = useModals();
+
+  return (
+    <div className={styles.root}>
+      <Card title="MATRIX MODES">
+        <Card title="KATAKANA DEFAULT">
+          <MatrixLoader rows={32} mode="katakana" />
+        </Card>
+        <Card title="GREEK LTR">
+          <MatrixLoader direction="left-to-right" rows={8} mode="greek" />
+        </Card>
+        <br />
+        <br />
+        <Button onClick={() => close()}>{Utilities.isEmpty(buttonText) ? 'Close' : buttonText}</Button>
+      </Card>
+    </div>
+  );
+}
+
+export default ModalMatrixModes;
+
+================
+File: reference/components/page/DefaultActionBar.module.scss
+================
+.root {
+  position: fixed;
+  top: 0;
+  left: 2ch;
+  z-index: 1;
+}
+
+================
+File: reference/components/page/DefaultActionBar.tsx
+================
+'use client';
+
+import styles from '@components/page/DefaultActionBar.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { toggleDebugGrid } from '@components/DebugGrid';
+import { useHotkeys } from '@modules/hotkeys';
+
+import ActionBar from '@components/ActionBar';
+import ButtonGroup from '@components/ButtonGroup';
+
+function isElement(target: EventTarget | null): target is Element {
+  return target instanceof Element;
+}
+
+function isHTMLElement(target: EventTarget | null): target is HTMLElement {
+  return target instanceof HTMLElement;
+}
+
+const findFocusableParent = (element: Element | null): Element | null => {
+  while (element) {
+    element = element.parentElement;
+    if (element && Utilities.isFocusableElement(element)) {
+      return element;
+    }
+  }
+  return null;
+};
+
+const findNextFocusableSibling = (element: Element, direction: 'next' | 'previous'): HTMLElement | null => {
+  let sibling = direction === 'next' ? element.nextElementSibling : element.previousElementSibling;
+
+  while (sibling) {
+    if (Utilities.isFocusableElement(sibling)) {
+      return sibling as HTMLElement;
+    }
+
+    const focusableDescendant = Utilities.findFocusableDescendant(sibling, null, direction);
+    if (focusableDescendant) {
+      return focusableDescendant;
+    }
+
+    sibling = direction === 'next' ? sibling.nextElementSibling : sibling.previousElementSibling;
+  }
+
+  return null;
+};
+
+const findNextFocusableAncestor = (element: Element, direction: 'next' | 'previous'): HTMLElement | null => {
+  let ancestor = element.parentElement;
+
+  while (ancestor) {
+    const nextFocusable = findNextFocusableSibling(ancestor, direction);
+    if (nextFocusable) {
+      return nextFocusable;
+    }
+    ancestor = ancestor.parentElement;
+  }
+
+  return null;
+};
+
+const useGlobalNavigationHotkeys = () => {
+  const onHandleSubmit = (event: KeyboardEvent) => {
+    const target = event.target;
+    if (Utilities.isFocusableElement(target)) {
+      event.preventDefault();
+      (target as HTMLElement).click();
+    }
+  };
+
+  const onHandleNextFocus = (event: KeyboardEvent) => {
+    const target = event.target;
+
+    if (Utilities.isFocusableElement(target)) {
+      event.preventDefault();
+
+      const nextFocusable = Utilities.findNextFocusable(target as Element, 'next');
+      if (nextFocusable) {
+        nextFocusable.focus();
+      }
+    }
+  };
+
+  const onHandlePreviousFocus = (event: KeyboardEvent) => {
+    const target = event.target;
+
+    if (Utilities.isFocusableElement(target)) {
+      event.preventDefault();
+
+      const previousFocusable = Utilities.findNextFocusable(target as Element, 'previous');
+      if (previousFocusable) {
+        previousFocusable.focus();
+      }
+    }
+  };
+
+  useHotkeys('ArrowDown', onHandleNextFocus);
+  useHotkeys('ArrowUp', onHandlePreviousFocus);
+  useHotkeys('ArrowRight', onHandleNextFocus);
+  useHotkeys('ArrowLeft', onHandlePreviousFocus);
+  useHotkeys('Enter', onHandleSubmit);
+  useHotkeys(' ', onHandleSubmit);
+};
+
+interface DefaultActionBarProps {
+  items?: {
+    hotkey: string;
+    onClick: () => void;
+    body: React.ReactNode;
+    items?: any;
+  }[];
+}
+
+const DefaultActionBar: React.FC<DefaultActionBarProps> = ({ items = [] }) => {
+  const [isGrid, setGrid] = React.useState(false);
+  useHotkeys('ctrl+g', () => toggleDebugGrid());
+
+  useGlobalNavigationHotkeys();
+
+  return (
+    <div className={styles.root}>
+      <ActionBar
+        items={[
+          {
+            hotkey: '⌃+O',
+            body: 'Fonts',
+            openHotkey: 'ctrl+o',
+            items: [
+              {
+                icon: '⊹',
+                children: 'Commit Mono V143 [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-commit-mono'),
+              },
+              {
+                icon: '⊹',
+                children: 'Departure Mono [MIT]',
+                onClick: () => Utilities.onHandleFontChange('font-use-departure-mono'),
+              },
+              {
+                icon: '⊹',
+                children: 'Fira Code [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-fira-code'),
+              },
+              {
+                icon: '⊹',
+                children: 'Fragment Mono [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-fragment-mono'),
+              },
+              {
+                icon: '⊹',
+                children: 'Geist Mono [OFL] [DEFAULT]',
+                onClick: () => Utilities.onHandleFontChange(''),
+              },
+              {
+                icon: '⊹',
+                children: 'Iosevka Term [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-iosevka-term'),
+              },
+              {
+                icon: '⊹',
+                children: 'JetBrains Mono [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-jet-brains-mono'),
+              },
+              {
+                icon: '⊹',
+                children: 'SFMono Square [FOSS]',
+                onClick: () => Utilities.onHandleFontChange('font-use-sfmono-square'),
+              },
+              {
+                icon: '⊹',
+                children: 'Server Mono 0.0.6 [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-server-mono'),
+              },
+              {
+                icon: '⊹',
+                children: 'TX-02 Berkeley Mono™',
+                onClick: () => Utilities.onHandleFontChange('font-use-berkeley-mono'),
+              },
+            ],
+          },
+          {
+            hotkey: '⌃+T',
+            body: 'Theme',
+            openHotkey: 'ctrl+t',
+            items: [
+              {
+                icon: '⊹',
+                children: 'Refined White [DEFAULT]',
+                onClick: () => Utilities.onHandleThemeChange(''),
+              },
+              {
+                icon: '⊹',
+                children: 'Black Midnight Vapor',
+                onClick: () => Utilities.onHandleThemeChange('theme-dark'),
+              },
+              {
+                icon: '⊹',
+                children: 'U-571 Code Red',
+                onClick: () => Utilities.onHandleThemeChange('theme-black-red'),
+              },
+              {
+                icon: '⊹',
+                children: 'Digital Bioluminescence',
+                onClick: () => Utilities.onHandleThemeChange('theme-black-teal'),
+              },
+              {
+                icon: '⊹',
+                children: 'Operation Safe Blue',
+                onClick: () => Utilities.onHandleThemeChange('theme-blue'),
+              },
+              {
+                icon: '⊹',
+                children: 'Neon Green Garden',
+                onClick: () => Utilities.onHandleThemeChange('theme-green'),
+              },
+              {
+                icon: '⊹',
+                children: 'Kirkland Signature AS/400',
+                onClick: () => Utilities.onHandleThemeChange('theme-black-green'),
+              },
+            ],
+          },
+          {
+            hotkey: '⌃+G',
+            onClick: () => {
+              toggleDebugGrid();
+            },
+            body: 'Grid',
+            selected: false,
+          },
+          ...items,
+        ]}
+      />
+    </div>
+  );
+};
+
+export default DefaultActionBar;
+
+================
+File: reference/components/page/DefaultLayout.module.scss
+================
+.body {
+  width: 100%;
+}
+
+.pixel {
+  height: 1px;
+  left: 0;
+  position: absolute;
+  top: 0;
+  width: 1px;
+}
+
+================
+File: reference/components/page/DefaultLayout.tsx
+================
+import styles from '@components/page/DefaultLayout.module.scss';
+
+import * as React from 'react';
+
+interface DefaultLayoutProps {
+  previewPixelSRC: string;
+  children?: React.ReactNode;
+}
+
+const DefaultLayout: React.FC<DefaultLayoutProps> = ({ previewPixelSRC, children }) => {
+  return (
+    <div className={styles.body}>
+      <img className={styles.pixel} src={previewPixelSRC} alt="" />
+      {children}
+    </div>
+  );
+};
+
+export default DefaultLayout;
+
+================
+File: reference/components/page/ModalContext.tsx
+================
+import * as React from 'react';
+
+export type ModalComponent<P = {}> = React.ComponentType<React.PropsWithoutRef<P>>;
+
+export interface ModalState<P = any> {
+  key: string;
+  component: ModalComponent<P>;
+  props: P;
+}
+
+interface ModalContextType {
+  modalStack: ModalState[];
+  open: <P>(component: ModalComponent<P>, props: P) => string;
+  close: (key?: string) => void;
+}
+
+const ModalContext = React.createContext<ModalContextType | null>(null);
+
+export const ModalProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
+  const [modalStack, setModalStack] = React.useState<ModalState<any>[]>([]);
+
+  const open = <P,>(component: ModalComponent<P>, props: P): string => {
+    const key = `modal-${Date.now()}-${Math.random()}`;
+
+    const newModal: ModalState<P> = { key, component, props };
+
+    setModalStack((prev) => [...prev, newModal as ModalState<any>]);
+
+    return key;
+  };
+
+  const close = (key?: string): void => {
+    setModalStack((prev) =>
+      key ? prev.filter((modal) => modal.key !== key) : prev.slice(0, -1)
+    );
+  };
+
+  return (
+    <ModalContext.Provider value={{ modalStack, open, close }}>
+      {children}
+    </ModalContext.Provider>
+  );
+};
+
+export const useModals = (): ModalContextType => {
+  const context = React.useContext(ModalContext);
+  if (!context) {
+    throw new Error('useModals must be used within a ModalProvider and use client');
+  }
+  return context;
+};
+
+================
+File: reference/components/page/root.module.scss
+================
+.row {
+  border-bottom: 1px solid var(--theme-border);
+}
+
+.column {
+  max-width: 768px;
+  padding: 0 24px 0 24px;
+  margin: 0 auto 0 auto;
+  display: block;
+  border-left: 1px solid var(--theme-border);
+  border-right: 1px solid var(--theme-border);
+}
+
+.video {
+  display: block;
+  width: 100%;
+}
+
+.h1 {
+  display: block;
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+.p {
+  display: block;
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+.aside {
+  display: block;
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+.h2 {
+  display: block;
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+.image {
+  display: block;
+  width: 100%;
+}
+
+================
+File: reference/components/svg/InternetDevelopmentLogo.tsx
+================
+export default function IntDevLogo(props) {
+  return (
+    <svg viewBox="0 0 494.25 80.29" fill="currentColor" aria-hidden {...props}>
+      <path d="m57.8,29.75h0c0,5.34,4.33,9.67,9.67,9.67h38.11c5.34,0,9.67,4.33,9.67,9.67v.54c0,5.34-4.33,9.67-9.67,9.67h-38.11c-5.34,0-9.67,4.33-9.67,9.67v.29c0,5.34-4.33,9.67-9.67,9.67H9.67c-5.34,0-9.67-4.33-9.67-9.67v-.54c0-5.34,4.33-9.67,9.67-9.67h38.11c5.34,0,9.67-4.33,9.67-9.67v-.02c0-5.34-4.33-9.67-9.67-9.67H9.67c-5.34,0-9.67-4.33-9.67-9.67v-.54c0-5.34,4.33-9.67,9.67-9.67h38.11c5.34,0,9.67-4.33,9.67-9.67v-.27c0-5.34,4.33-9.67,9.67-9.67h38.45c5.34,0,9.67,4.33,9.67,9.67v.55c0,5.34-4.33,9.67-9.67,9.67h-38.11c-5.34,0-9.67,4.33-9.67,9.67Z" />
+      <g>
+        <path d="m136.93,75.57l7.21-2.12V5.34l-7.21-2.02V0h26.69v3.32l-7,2.02v68.11l7,2.12v3.37h-26.69v-3.37Z" />
+        <path d="m182.75,14.67v58.88l7.26,2.02v3.37h-19.54v-3.37l7.31-2.02V5.24l-7.31-1.92V0h20.63l31.88,51.37V5.24l-7.31-1.92V0h19.59v3.32l-7.36,1.92v75.06h-4.72L182.75,14.67Z" />
+        <path d="m253.86,75.57l9.59-2.18V5.13h-14.25c-3.52,5.7-5.96,12.44-7.57,18.09h-2.8l2.95-23.22h55.57l3.01,23.22h-2.8c-1.66-5.65-3.89-12.39-7.41-18.09h-14.2v68.27l9.54,2.18v3.37h-31.62v-3.37Z" />
+        <path d="m304.76,75.47l7.1-1.97V5.24l-7.1-1.92V0h21.87c13.94,0,21.98,1.92,28.35,7.46,7.77,6.74,12.7,18.14,12.7,31.98s-5.23,26.75-13.32,33.43c-5.29,4.35-11.04,6.06-20.01,6.06h-29.6v-3.47Zm42.97-8.92c3.89-5.8,5.75-15.08,5.75-27.47s-1.87-20.73-5.81-26.49c-3.52-5.13-8.6-7.41-16.22-7.41h-7.1v62.51c0,4.46,2.23,6.17,8.4,6.17,6.89,0,11.56-2.23,14.98-7.31Z" />
+        <path d="m374.05,75.57l7.05-2.02V5.24l-7.05-1.92V0h48.93l1.5,22.55h-3.01c-1.4-5.55-3.42-11.77-6.22-17.31h-21.67v29.44h11.61c1.76-3.94,2.75-7.98,3.42-11.82h3.01v28.72h-3.01c-.62-3.89-1.76-7.93-3.42-11.77h-11.61v33.8h21.2c3.47-6.22,5.39-12.44,7.36-18.66h3.78l-3.37,24h-48.52v-3.37Z" />
+        <path d="m436.92,9.59c-1.5-4.61-2.9-5.75-8.66-6.27V0h31.72v3.32c-8.03.73-9.12,1.71-7.67,6.79l12.75,44.89.78.05,11.77-40.48c2.07-7.36.36-9.8-8.09-11.25V0h24.73v3.32c-7.77,1.55-9.17,3.32-11.61,11.4l-19.85,65.31h-3.21l-22.65-70.44Z" />
+      </g>
+    </svg>
+  );
+}
+
+================
+File: reference/components/svg/InternetDevelopmentLogoMark.tsx
+================
+export default function LogoMark(props) {
+  return (
+    <svg viewBox="0 0 116.29 80.29" fill="currentColor" aria-hidden {...props}>
+      <path d="m57.8,29.75h0c0,5.34,4.33,9.67,9.67,9.67h38.11c5.34,0,9.67,4.33,9.67,9.67v.54c0,5.34-4.33,9.67-9.67,9.67h-38.11c-5.34,0-9.67,4.33-9.67,9.67v.29c0,5.34-4.33,9.67-9.67,9.67H9.67c-5.34,0-9.67-4.33-9.67-9.67v-.54c0-5.34,4.33-9.67,9.67-9.67h38.11c5.34,0,9.67-4.33,9.67-9.67v-.02c0-5.34-4.33-9.67-9.67-9.67H9.67c-5.34,0-9.67-4.33-9.67-9.67v-.54c0-5.34,4.33-9.67,9.67-9.67h38.11c5.34,0,9.67-4.33,9.67-9.67v-.27c0-5.34,4.33-9.67,9.67-9.67h38.45c5.34,0,9.67,4.33,9.67,9.67v.55c0,5.34-4.33,9.67-9.67,9.67h-38.11c-5.34,0-9.67,4.33-9.67,9.67Z" />
+    </svg>
+  );
+}
+
+================
+File: reference/components/svg/Sphere.tsx
+================
+import * as React from 'react';
+
+export default function Sphere(props: { size?: number; segments?: number; style?: React.CSSProperties }) {
+  const size = props.size || 500;
+  const segments = props.segments || 6;
+  const radius = size * 0.4;
+
+  const generateSpherePoints = () => {
+    const points: { x: number; y: number }[][] = [];
+    for (let lat = 0; lat <= segments; lat++) {
+      const row: { x: number; y: number }[] = [];
+      const phi = (lat * Math.PI) / segments;
+      for (let lon = 0; lon <= segments; lon++) {
+        const theta = (lon * 2 * Math.PI) / segments;
+        const x = radius * Math.sin(phi) * Math.cos(theta);
+        const y = radius * Math.cos(phi);
+        const z = radius * Math.sin(phi) * Math.sin(theta);
+        const scale = 1 + z / (radius * 4);
+        row.push({
+          x: size / 2 + x * scale,
+          y: size / 2 + y * scale,
+        });
+      }
+      points.push(row);
+    }
+    return points;
+  };
+
+  const createPaths = () => {
+    const spherePoints = generateSpherePoints();
+    const paths: string[] = [];
+    for (let lat = 0; lat <= segments; lat++) {
+      let pathString = `M ${spherePoints[lat][0].x},${spherePoints[lat][0].y}`;
+      for (let lon = 1; lon <= segments; lon++) {
+        pathString += ` L ${spherePoints[lat][lon].x},${spherePoints[lat][lon].y}`;
+      }
+      paths.push(pathString);
+    }
+    for (let lon = 0; lon <= segments; lon++) {
+      let pathString = `M ${spherePoints[0][lon].x},${spherePoints[0][lon].y}`;
+      for (let lat = 1; lat <= segments; lat++) {
+        pathString += ` L ${spherePoints[lat][lon].x},${spherePoints[lat][lon].y}`;
+      }
+      paths.push(pathString);
+    }
+    return paths;
+  };
+
+  return (
+    <svg viewBox={`0 0 ${size} ${size}`} xmlns="http://www.w3.org/2000/svg" style={props.style}>
+      <g fill="none" stroke="currentColor" strokeWidth="1">
+        {createPaths().map((path, index) => (
+          <path key={index} d={path} vectorEffect="non-scaling-stroke" />
+        ))}
+      </g>
+    </svg>
+  );
+}
+
+================
+File: reference/components/Accordion.module.scss
+================
+.flex {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+  padding: calc(var(--theme-line-height-base) * 1rem) 0 calc(var(--theme-line-height-base) * 1rem) 0;
+
+  background: var(--theme-border-subdued);
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.icon {
+  flex-shrink: 0;
+  user-select: none;
+  cursor: pointer;
+  font-size: var(--font-size);
+  align-self: stretch;
+}
+
+.content {
+  min-width: 10%;
+  width: 100%;
+  user-select: none;
+  cursor: pointer;
+  transition: 200ms ease all;
+  transition-property: padding;
+  padding-left: 0ch;
+}
+
+.active {
+  .content {
+    padding-left: 1ch;
+  }
+
+  .icon {
+  }
+}
+
+================
+File: reference/components/Accordion.tsx
+================
+'use client';
+
+import styles from '@components/Accordion.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import Row from '@components/Row';
+
+interface AccordionProps {
+  defaultValue?: boolean;
+  title: string;
+  children?: React.ReactNode;
+}
+
+const Accordion: React.FC<AccordionProps> = ({ defaultValue = false, title, children }) => {
+  const [show, setShow] = React.useState<boolean>(defaultValue);
+  const accordionRef = React.useRef<HTMLDivElement | null>(null);
+
+  const toggleShow = (): void => {
+    setShow((prevShow) => !prevShow);
+  };
+
+  return (
+    <>
+      <Row ref={accordionRef} tabIndex={0} role="button" onClick={toggleShow} aria-expanded={show}>
+        <div className={Utilities.classNames(styles.flex, show ? styles.active : undefined)}>
+          <span className={styles.icon}>{show ? '▾' : '▸'}</span>
+          <span className={styles.content}>{title}</span>
+        </div>
+      </Row>
+      {show && <Row style={{ paddingLeft: '2ch' }}>{children}</Row>}
+    </>
+  );
+};
+
+export default Accordion;
+
+================
+File: reference/components/ActionBar.module.scss
+================
+.root {
+  background: var(--theme-background);
+  box-shadow: inset 0 0 0 1px var(--theme-border);
+}
+
+================
+File: reference/components/ActionBar.tsx
+================
+import styles from '@components/ActionBar.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import ButtonGroup from '@components/ButtonGroup';
+
+interface ActionBarItem {
+  hotkey?: string;
+  onClick?: () => void;
+  openHotkey?: string;
+  selected?: boolean;
+  body: React.ReactNode;
+  items?: any;
+}
+
+interface ActionBarProps {
+  items: ActionBarItem[];
+}
+
+const ActionBar: React.FC<ActionBarProps> = ({ items }) => {
+  return (
+    <div className={styles.root}>
+      <ButtonGroup items={items} />
+    </div>
+  );
+};
+
+export default ActionBar;
+
+================
+File: reference/components/ActionButton.module.scss
+================
+.hotkey {
+  background: var(--theme-button-foreground);
+  color: var(--theme-text);
+  cursor: pointer;
+  flex-shrink: 0;
+  font-weight: 400;
+  padding: 0 1ch 0 1ch;
+  text-indent: 0ch;
+  user-select: none;
+}
+
+.content {
+  background: var(--theme-button-background);
+  box-shadow: inset 0 0 0 2px var(--theme-button-foreground);
+  cursor: pointer;
+  flex-shrink: 0;
+  font-weight: 400;
+  padding: 0 1ch 0 1ch;
+  text-indent: 0ch;
+  text-transform: uppercase;
+  user-select: none;
+}
+
+.root {
+  display: inline-flex;
+  align-items: center;
+  justify-content: space-between;
+  cursor: pointer;
+  outline: 0;
+  border: 0;
+  margin: 0;
+  padding: 0;
+  box-sizing: border-box;
+  font-family: var(--font-family-mono);
+  font-size: var(--font-size);
+  flex-shrink: 0;
+
+  &:hover .hotkey {
+    background: var(--theme-focused-foreground);
+  }
+
+  &:hover .content {
+    box-shadow: inset 0 0 0 2px var(--theme-focused-foreground);
+  }
+
+  &:focus .hotkey {
+    background: var(--theme-focused-foreground);
+  }
+
+  &:focus .content {
+    box-shadow: inset 0 0 0 2px var(--theme-focused-foreground);
+  }
+}
+
+.selected {
+  .content {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/ActionButton.tsx
+================
+import styles from '@components/ActionButton.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface ActionButtonProps {
+  onClick?: () => void;
+  hotkey?: any;
+  children?: React.ReactNode;
+  style?: any;
+  rootStyle?: any;
+  isSelected?: boolean;
+}
+
+const ActionButton = React.forwardRef<HTMLDivElement, ActionButtonProps>(({ onClick, hotkey, children, style, rootStyle, isSelected }, ref) => {
+  return (
+    <div className={Utilities.classNames(styles.root, isSelected ? styles.selected : null)} style={rootStyle} onClick={onClick} tabIndex={0} ref={ref} role="button">
+      {Utilities.isEmpty(hotkey) ? null : <span className={styles.hotkey}>{hotkey}</span>}
+      <span className={styles.content} style={style}>
+        {children}
+      </span>
+    </div>
+  );
+});
+
+ActionButton.displayName = 'ActionButton';
+
+export default ActionButton;
+
+================
+File: reference/components/ActionListItem.module.scss
+================
+.item {
+  align-items: flex-start;
+  background: transparent;
+  color: var(--theme-text);
+  cursor: pointer;
+  display: flex;
+  justify-content: space-between;
+  outline: 0;
+  border: 0;
+  text-decoration: none;
+
+  &:visited {
+    background: transparent;
+    color: var(--theme-text);
+  }
+
+  &:hover {
+    background: transparent;
+    color: var(--theme-text);
+  }
+
+  &:hover .icon {
+    background: var(--theme-focused-foreground);
+  }
+
+  &:focus .icon {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.icon {
+  align-items: center;
+  background: var(--theme-button-foreground);
+  display: inline-flex;
+  flex-shrink: 0;
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  justify-content: center;
+  width: 3ch;
+  user-select: none;
+}
+
+.text {
+  align-items: center;
+  align-self: stretch;
+  background: var(--theme-button-background);
+  display: inline-flex;
+  justify-content: flex-start;
+  min-width: 10%;
+  padding: 0 1ch 0 1ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/ActionListItem.tsx
+================
+import styles from '@components/ActionListItem.module.scss';
+
+import * as React from 'react';
+
+interface ActionListItemProps {
+  style?: React.CSSProperties;
+  icon?: React.ReactNode;
+  children?: React.ReactNode;
+  href?: string;
+  target?: string;
+  onClick?: React.MouseEventHandler<HTMLDivElement | HTMLAnchorElement>;
+}
+
+const ActionListItem: React.FC<ActionListItemProps> = (props) => {
+  const { href, target, onClick, children, icon, style } = props;
+
+  if (href) {
+    return (
+      <a className={styles.item} href={href} target={target} style={style} tabIndex={0} role="link">
+        <figure className={styles.icon}>{icon}</figure>
+        <span className={styles.text}>{children}</span>
+      </a>
+    );
+  }
+
+  return (
+    <div className={styles.item} onClick={onClick} style={style} tabIndex={0} role="button">
+      <figure className={styles.icon}>{icon}</figure>
+      <span className={styles.text}>{children}</span>
+    </div>
+  );
+};
+
+export default ActionListItem;
+
+================
+File: reference/components/AlertBanner.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border);
+  box-shadow: 1ch 1ch 0 0 var(--theme-border-subdued);
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  font-weight: 400;
+}
+
+================
+File: reference/components/AlertBanner.tsx
+================
+import styles from '@components/AlertBanner.module.scss';
+
+import * as React from 'react';
+
+interface AlertBannerProps {
+  style?: any;
+  children?: any;
+}
+
+const AlertBanner: React.FC<AlertBannerProps> = ({ style: propStyle, ...rest }) => {
+  let style: React.CSSProperties = { ...propStyle };
+
+  return <div className={styles.root} {...rest} style={style} />;
+};
+
+export default AlertBanner;
+
+================
+File: reference/components/Avatar.module.scss
+================
+.parent {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+}
+
+.placeholder {
+  background: var(--theme-border);
+  display: inline-block;
+  width: 4ch;
+  height: calc(var(--font-size) * var(--theme-line-height-base) * 2);
+  vertical-align: bottom;
+  flex-shrink: 0;
+  position: relative;
+
+  &:hover {
+    &::before {
+      content: '';
+      top: 0;
+      left: 0;
+      right: 0;
+      bottom: 0;
+      position: absolute;
+      pointer-events: none;
+      opacity: 0.5;
+      background: var(--theme-focused-foreground);
+    }
+  }
+}
+
+.root {
+  background: unset;
+  background-size: cover;
+  background-position: 50% 50%;
+  background-repeat: no-repeat;
+  display: inline-block;
+  width: 4ch;
+  height: calc(var(--font-size) * var(--theme-line-height-base) * 2);
+  vertical-align: bottom;
+  flex-shrink: 0;
+  position: relative;
+
+  &:hover {
+    background: unset;
+    background-size: cover;
+    background-position: 50% 50%;
+    background-repeat: no-repeat;
+    &::before {
+      content: '';
+      top: 0;
+      left: 0;
+      right: 0;
+      bottom: 0;
+      position: absolute;
+      pointer-events: none;
+      opacity: 0.5;
+      background: var(--theme-focused-foreground);
+    }
+  }
+}
+
+a {
+  &.root {
+    background: unset;
+    background-size: cover;
+    background-position: 50% 50%;
+    background-repeat: no-repeat;
+    display: inline-block;
+    width: 4ch;
+    height: calc(var(--font-size) * var(--theme-line-height-base) * 2);
+    vertical-align: bottom;
+    flex-shrink: 0;
+    position: relative;
+
+    &:hover {
+      background: unset;
+      background-size: cover;
+      background-position: 50% 50%;
+      background-repeat: no-repeat;
+      &::before {
+        content: '';
+        top: 0;
+        left: 0;
+        right: 0;
+        bottom: 0;
+        position: absolute;
+        pointer-events: none;
+        opacity: 0.5;
+        background: var(--theme-focused-foreground);
+      }
+    }
+
+    &:focus {
+      background: unset;
+      background-size: cover;
+      background-position: 50% 50%;
+      background-repeat: no-repeat;
+      outline: 0;
+
+      &::before {
+        content: '';
+        top: 0;
+        left: 0;
+        right: 0;
+        bottom: 0;
+        position: absolute;
+        pointer-events: none;
+        opacity: 0.5;
+        background: var(--theme-focused-foreground);
+      }
+    }
+  }
+}
+
+.right {
+  min-width: 10%;
+  width: 100%;
+  background: var(--theme-foreground);
+}
+
+================
+File: reference/components/Avatar.tsx
+================
+import styles from '@components/Avatar.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface AvatarProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'style' | 'className' | 'children'> {
+  src?: string;
+  href?: string;
+  target?: string;
+  style?: React.CSSProperties;
+  children?: React.ReactNode;
+}
+
+const Avatar: React.FC<AvatarProps> = (props) => {
+  const { src, style: propStyle, href, target, children, ...rest } = props;
+
+  const backgroundStyle = src ? { backgroundImage: `url(${src})` } : {};
+
+  const combinedStyle = { ...propStyle, ...backgroundStyle };
+
+  let avatarElement: React.ReactElement;
+
+  if (href) {
+    avatarElement = <a className={Utilities.classNames(src ? styles.root : styles.placeholder)} style={combinedStyle} href={href} target={target} tabIndex={0} role="link" />;
+  } else {
+    avatarElement = <figure className={Utilities.classNames(src ? styles.root : styles.placeholder)} style={combinedStyle} />;
+  }
+
+  if (!children) {
+    return avatarElement;
+  }
+
+  return (
+    <div className={styles.parent} {...rest}>
+      {avatarElement}
+      <span className={styles.right}>{children}</span>
+    </div>
+  );
+};
+
+export default Avatar;
+
+================
+File: reference/components/Badge.module.scss
+================
+.root {
+  display: inline-block;
+  vertical-align: top;
+  text-align: center;
+  font-weight: 400;
+  margin: 0;
+  outline: 0;
+  border: 0;
+  font-family: var(--font-family-mono);
+  min-height: calc(var(--theme-line-height-base) * var(--font-size));
+  text-transform: uppercase;
+  transition: 200ms ease all;
+  background: var(--theme-border);
+  padding: 0 1ch 0 1ch;
+}
+
+================
+File: reference/components/Badge.tsx
+================
+'use client';
+
+import styles from '@components/Badge.module.scss';
+
+import * as React from 'react';
+
+interface BadgeProps extends React.HTMLAttributes<HTMLSpanElement> {
+  children?: React.ReactNode;
+}
+
+const Badge: React.FC<BadgeProps> = ({ children, ...rest }) => {
+  return (
+    <span className={styles.root} {...rest}>
+      {children}
+    </span>
+  );
+};
+
+export default Badge;
+
+================
+File: reference/components/BarLoader.module.scss
+================
+.root {
+  background: var(--theme-border);
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  white-space: nowrap;
+  text-align: left;
+  vertical-align: bottom;
+  display: block;
+}
+
+.bar {
+  background: linear-gradient(to right, transparent, var(--theme-text));
+  height: 100%;
+  width: 0%;
+  transition: width 0.1s linear;
+}
+
+================
+File: reference/components/BarLoader.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+import styles from '@components/BarLoader.module.scss';
+
+interface BarLoaderProps {
+  intervalRate?: number;
+  progress?: number;
+}
+
+const BarLoader: React.FC<BarLoaderProps> = ({ intervalRate, progress }) => {
+  const [currentProgress, setCurrentProgress] = React.useState<number>(progress || 0);
+
+  React.useEffect(() => {
+    if (progress !== undefined) {
+      setCurrentProgress(progress);
+      return;
+    }
+
+    if (!intervalRate) return;
+
+    const interval = setInterval(() => {
+      setCurrentProgress((prev) => (prev + 10) % 110);
+    }, intervalRate);
+
+    return () => clearInterval(interval);
+  }, [intervalRate, progress]);
+
+  return (
+    <div className={styles.root}>
+      <div
+        className={styles.bar}
+        style={{
+          width: `${Math.min(currentProgress, 100)}%`,
+        }}
+      ></div>
+    </div>
+  );
+};
+
+export default BarLoader;
+
+================
+File: reference/components/BarProgress.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border-subdued);
+  white-space: nowrap;
+  text-align: left;
+  vertical-align: bottom;
+  overflow: hidden;
+  position: relative;
+}
+
+.measure {
+  visibility: hidden;
+  position: absolute;
+  pointer-events: none;
+}
+
+================
+File: reference/components/BarProgress.tsx
+================
+'use client';
+
+import styles from '@components/BarProgress.module.scss';
+
+import * as React from 'react';
+
+interface BarProgressProps {
+  intervalRate?: number;
+  progress?: number;
+  fillChar?: string;
+}
+
+const BarProgress: React.FC<BarProgressProps> = ({ intervalRate, progress, fillChar = '░' }) => {
+  const [currentProgress, setCurrentProgress] = React.useState(progress ?? 0);
+  const [containerWidth, setContainerWidth] = React.useState(0);
+  const [charWidth, setCharWidth] = React.useState(0);
+
+  const containerRef = React.useRef<HTMLDivElement>(null);
+  const measureRef = React.useRef<HTMLSpanElement>(null);
+
+  React.useEffect(() => {
+    if (typeof progress === 'number') {
+      setCurrentProgress(progress);
+      return;
+    }
+    if (!intervalRate) return;
+    const interval = setInterval(() => {
+      setCurrentProgress((prev) => (prev + 10) % 110);
+    }, intervalRate);
+    return () => clearInterval(interval);
+  }, [intervalRate, progress]);
+
+  React.useLayoutEffect(() => {
+    if (!measureRef.current) return;
+    const rect = measureRef.current.getBoundingClientRect();
+    if (rect.width > 0) {
+      setCharWidth(rect.width);
+    } else {
+      requestAnimationFrame(() => {
+        const retryRect = measureRef.current?.getBoundingClientRect();
+        if (retryRect && retryRect.width > 0) {
+          setCharWidth(retryRect.width);
+        }
+      });
+    }
+  }, [fillChar]);
+
+  React.useEffect(() => {
+    if (!containerRef.current) return;
+    const observer = new ResizeObserver((entries) => {
+      for (const entry of entries) {
+        const { width } = entry.contentRect;
+        setContainerWidth(width);
+      }
+    });
+    observer.observe(containerRef.current);
+    return () => observer.disconnect();
+  }, []);
+
+  const cappedProgress = Math.min(currentProgress, 100);
+
+  let maxChars = 10;
+  if (charWidth > 0 && containerWidth > 0) {
+    maxChars = Math.max(1, Math.floor(containerWidth / charWidth));
+  }
+
+  const filledChars = Math.round((cappedProgress / 100) * maxChars);
+  const barStr = fillChar.repeat(filledChars);
+
+  return (
+    <div className={styles.root} ref={containerRef} aria-valuenow={cappedProgress} aria-valuemin={0} aria-valuemax={100} role="progressbar">
+      <span ref={measureRef} className={styles.measure}>
+        {fillChar}
+      </span>
+      {barStr}
+    </div>
+  );
+};
+
+export default BarProgress;
+
+================
+File: reference/components/Block.module.scss
+================
+.block {
+  display: inline-block;
+  width: 1ch;
+  background: var(--theme-text);
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  vertical-align: bottom;
+  flex-shrink: 0;
+}
+
+================
+File: reference/components/Block.tsx
+================
+import styles from '@components/Block.module.scss';
+
+import * as React from 'react';
+
+interface BlockProps extends React.HTMLAttributes<HTMLSpanElement> {
+  children?: React.ReactNode;
+}
+
+const Block: React.FC<BlockProps> = ({ children, ...rest }) => {
+  return (
+    <span className={styles.block} {...rest}>
+      {children}
+    </span>
+  );
+};
+
+export default Block;
+
+================
+File: reference/components/BlockLoader.module.scss
+================
+.root {
+  display: inline-block;
+  width: 1ch;
+  color: inherit;
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  vertical-align: bottom;
+}
+
+================
+File: reference/components/BlockLoader.tsx
+================
+'use client';
+
+import styles from '@components/BlockLoader.module.scss';
+
+import * as React from 'react';
+
+const SEQUENCES = [
+  ['⠁', '⠂', '⠄', '⡀', '⢀', '⠠', '⠐', '⠈'],
+  ['⣾', '⣽', '⣻', '⢿', '⡿', '⣟', '⣯', '⣷'],
+  ['▖', '▘', '▝', '▗'],
+  ['▁', '▂', '▃', '▄', '▅', '▆', '▇', '█', '▇', '▆', '▅', '▄', '▃', '▁'],
+  ['▉', '▊', '▋', '▌', '▍', '▎', '▏', '▎', '▍', '▌', '▋', '▊', '▉'],
+  ['←', '↖', '↑', '↗', '→', '↘', '↓', '↙'],
+  ['┤', '┘', '┴', '└', '├', '┌', '┬', '┐'],
+  ['◢', '◣', '◤', '◥'],
+  ['◰', '◳', '◲', '◱'],
+  ['◴', '◷', '◶', '◵'],
+  ['◐', '◓', '◑', '◒'],
+];
+
+interface BlockLoaderProps extends Omit<React.HTMLAttributes<HTMLSpanElement>, 'children'> {
+  mode?: number;
+}
+
+const BlockLoader: React.FC<BlockLoaderProps> = ({ mode = 0 }) => {
+  if (!SEQUENCES[mode]) {
+    return <span className={styles.block}>�</span>;
+  }
+
+  const [index, setIndex] = React.useState(0);
+  const intervalRef = React.useRef<number | null>(null);
+  const indexLength = SEQUENCES[mode].length;
+
+  React.useEffect(() => {
+    if (intervalRef.current) {
+      clearInterval(intervalRef.current);
+    }
+
+    intervalRef.current = window.setInterval(() => {
+      setIndex((prevIndex) => (prevIndex + 1) % indexLength);
+    }, 100);
+
+    return () => {
+      if (intervalRef.current) {
+        clearInterval(intervalRef.current);
+      }
+    };
+  }, [indexLength]);
+
+  return <span className={styles.root}>{SEQUENCES[mode][index]}</span>;
+};
+
+export default BlockLoader;
+
+================
+File: reference/components/BreadCrumbs.module.scss
+================
+.root {
+  display: inline-block;
+}
+
+.line {
+  display: inline-block;
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+}
+
+.link {
+  display: inline-block;
+  color: var(--theme-text);
+  outline: 0;
+  border: 0;
+  text-decoration: none;
+  background: var(--theme-border);
+
+  &:hover {
+    color: var(--theme-text);
+    background: var(--theme-focused-foreground);
+  }
+  
+  &:visited {
+    color: var(--theme-text);
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.symbol {
+  min-width: 1ch;
+  display: inline-block;
+  margin: 0 1ch 0 1ch;
+}
+
+================
+File: reference/components/BreadCrumbs.tsx
+================
+import styles from '@components/BreadCrumbs.module.scss';
+
+import * as React from 'react';
+
+interface BreadCrumbsItem {
+  url?: string;
+  name: string;
+}
+
+interface BreadCrumbsProps {
+  items: BreadCrumbsItem[];
+}
+
+const BreadCrumbs: React.FC<BreadCrumbsProps> = ({ items }) => {
+  return (
+    <nav aria-label="breadcrumb" className={styles.root}>
+      {items.map((item, index) => {
+        const linkElement = (
+          <a className={styles.link} href={item.url} target="_blank" tabIndex={0} role="link">
+            {item.name}
+          </a>
+        );
+
+        return (
+          <span className={styles.line} key={index}>
+            {index === items.length - 1 ? <span>{linkElement}</span> : linkElement}
+            {index < items.length - 1 && <span className={styles.symbol}> ❯ </span>}
+          </span>
+        );
+      })}
+    </nav>
+  );
+};
+
+export default BreadCrumbs;
+
+================
+File: reference/components/Button.module.scss
+================
+.root {
+  vertical-align: top;
+  display: inline-block;
+  font-weight: 400;
+  text-align: center;
+  margin: 0;
+  outline: 0;
+  border: 0;
+  font-family: var(--font-family-mono);
+  width: 100%;
+  font-size: var(--font-size);
+  line-height: calc(var(--theme-line-height-base) * 2em);
+  min-height: calc(var(--theme-line-height-base) * (var(--font-size) * 2));
+  padding: 0 2ch 0 2ch;
+  text-transform: uppercase;
+  letter-spacing: 1px;
+  transition: 200ms ease all;
+}
+
+.primary {
+  background: var(--theme-button);
+  color: var(--theme-button-text);
+  cursor: pointer;
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.secondary {
+  background: var(--theme-background);
+  color: var(--theme-text);
+  box-shadow: inset 0 0 0 1px var(--theme-border);
+  cursor: pointer;
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+    box-shadow: inset 0 0 0 1px transparent;
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    box-shadow: inset 0 0 0 1px transparent;
+  }
+}
+
+.disabled {
+  background: var(--theme-button-background);
+  color: var(--theme-button-foreground);
+  cursor: not-allowed;
+}
+
+================
+File: reference/components/Button.tsx
+================
+'use client';
+
+import styles from '@components/Button.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
+  theme?: 'PRIMARY' | 'SECONDARY';
+  isDisabled?: boolean;
+  children?: React.ReactNode;
+}
+
+const Button: React.FC<ButtonProps> = ({ theme = 'PRIMARY', isDisabled, children, ...rest }) => {
+  let classNames = Utilities.classNames(styles.root, styles.primary);
+
+  if (theme === 'SECONDARY') {
+    classNames = Utilities.classNames(styles.root, styles.secondary);
+  }
+
+  if (isDisabled) {
+    classNames = Utilities.classNames(styles.root, styles.disabled);
+
+    return <div className={classNames}>{children}</div>;
+  }
+
+  return (
+    <button className={classNames} role="button" tabIndex={0} disabled={isDisabled} {...rest}>
+      {children}
+    </button>
+  );
+};
+
+export default Button;
+
+================
+File: reference/components/ButtonGroup.module.scss
+================
+.root {
+}
+
+.full {
+  display: grid;
+  grid-template-columns: repeat(auto-fit, minmax(60px, 1fr));
+  white-space: nowrap;
+}
+
+================
+File: reference/components/ButtonGroup.tsx
+================
+'use client';
+
+import styles from '@components/ButtonGroup.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import ActionButton from '@components/ActionButton';
+import DropdownMenuTrigger from '@components/DropdownMenuTrigger';
+
+const ButtonGroup = (props) => {
+  if (!props.items) {
+    return null;
+  }
+
+  return (
+    <div className={Utilities.classNames(styles.root, props.isFull ? styles.full : null)}>
+      {props.items.map((each) => {
+        if (each.items) {
+          return (
+            <DropdownMenuTrigger key={each.body} items={each.items} hotkey={each.openHotkey}>
+              <ActionButton hotkey={each.hotkey} isSelected={each.selected}>
+                {each.body}
+              </ActionButton>
+            </DropdownMenuTrigger>
+          );
+        }
+
+        return (
+          <ActionButton key={each.body} onClick={each.onClick} hotkey={each.hotkey} isSelected={each.selected}>
+            {each.body}
+          </ActionButton>
+        );
+      })}
+    </div>
+  );
+};
+
+export default ButtonGroup;
+
+================
+File: reference/components/Canvas.module.scss
+================
+.canvas {
+  grid-row-start: 1;
+  grid-column-start: 1;
+  margin: 0;
+  padding: 0;
+  width: 100%;
+  min-height: 100%;
+  max-height: 288px;
+}
+
+================
+File: reference/components/Canvas.tsx
+================
+'use client';
+
+import styles from '@components/Canvas.module.scss';
+
+import * as React from 'react';
+
+type WebGLContextResult = {
+  gl: WebGLRenderingContext | WebGL2RenderingContext;
+  ext: {
+    internalFormat: number;
+    internalFormatRG: number;
+    formatRG: number;
+    texType: number;
+  };
+  support_linear_float: boolean | null;
+};
+
+var config = {
+  TEXTURE_DOWNSAMPLE: 1,
+  DENSITY_DISSIPATION: 0.991,
+  VELOCITY_DISSIPATION: 0.9992,
+  PRESSURE_DISSIPATION: 0.8,
+  PRESSURE_ITERATIONS: 16,
+  CURL: 12,
+  SPLAT_RADIUS: 0.12,
+  SPEED: 0.01,
+};
+
+export default function BlueCanvasComponent(props) {
+  const canvasRef = React.useRef<HTMLCanvasElement>(null);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    canvas.width = canvas.clientWidth;
+    canvas.height = canvas.clientHeight;
+
+    let splatStack: any[] = [];
+
+    const { gl, ext, support_linear_float } = getWebGLContext(canvas);
+
+    function getWebGLContext(canvas: HTMLCanvasElement): WebGLContextResult {
+      const params = {
+        alpha: false,
+        depth: false,
+        stencil: false,
+        antialias: true,
+      };
+
+      let gl: WebGLRenderingContext | WebGL2RenderingContext | null = canvas.getContext('webgl2', params) as WebGL2RenderingContext | null;
+
+      const isWebGL2 = !!gl;
+
+      if (!isWebGL2) {
+        gl = (canvas.getContext('webgl', params) || canvas.getContext('experimental-webgl', params)) as WebGLRenderingContext | null;
+      }
+
+      if (!gl) throw new Error('WebGL not supported');
+
+      const halfFloat = gl.getExtension('OES_texture_half_float');
+      let support_linear_float = gl.getExtension('OES_texture_half_float_linear');
+
+      if (isWebGL2) {
+        gl.getExtension('EXT_color_buffer_float');
+        support_linear_float = gl.getExtension('OES_texture_float_linear');
+      }
+
+      const internalFormat = isWebGL2 ? (gl as WebGL2RenderingContext).RGBA16F : gl.RGBA;
+      const internalFormatRG = isWebGL2 ? (gl as WebGL2RenderingContext).RG16F : gl.RGBA;
+      const formatRG = isWebGL2 ? (gl as WebGL2RenderingContext).RG : gl.RGBA;
+      const texType = isWebGL2 ? (gl as WebGL2RenderingContext).HALF_FLOAT : halfFloat?.HALF_FLOAT_OES || gl.UNSIGNED_BYTE;
+
+      return {
+        gl: gl as WebGLRenderingContext,
+        ext: {
+          internalFormat,
+          internalFormatRG,
+          formatRG,
+          texType,
+        },
+        support_linear_float: !!support_linear_float,
+      };
+    }
+
+    class GLProgram {
+      program: WebGLProgram;
+      uniforms: { [key: string]: WebGLUniformLocation | null };
+
+      constructor(vertexShader: WebGLShader, fragmentShader: WebGLShader) {
+        this.uniforms = {};
+        this.program = gl.createProgram()!;
+
+        gl.attachShader(this.program, vertexShader);
+        gl.attachShader(this.program, fragmentShader);
+        gl.linkProgram(this.program);
+
+        if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {
+          throw new Error(gl.getProgramInfoLog(this.program) || 'Program failed to link');
+        }
+
+        const uniformCount = gl.getProgramParameter(this.program, gl.ACTIVE_UNIFORMS);
+        for (let i = 0; i < uniformCount; i++) {
+          const uniformName = gl.getActiveUniform(this.program, i)!.name;
+          this.uniforms[uniformName] = gl.getUniformLocation(this.program, uniformName);
+        }
+      }
+
+      bind() {
+        gl.useProgram(this.program);
+      }
+    }
+
+    function compileShader(type: number, source: string): WebGLShader {
+      const shader = gl.createShader(type)!;
+      gl.shaderSource(shader, source);
+      gl.compileShader(shader);
+
+      if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
+        throw new Error(gl.getShaderInfoLog(shader) || 'Shader compilation failed');
+      }
+
+      return shader;
+    }
+
+    var baseVertexShader = compileShader(gl.VERTEX_SHADER, 'precision highp float; precision mediump sampler2D; attribute vec2 aPosition; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform vec2 texelSize; void main () {     vUv = aPosition * 0.5 + 0.5;     vL = vUv - vec2(texelSize.x, 0.0);     vR = vUv + vec2(texelSize.x, 0.0);     vT = vUv + vec2(0.0, texelSize.y);     vB = vUv - vec2(0.0, texelSize.y);     gl_Position = vec4(aPosition, 0.0, 1.0); }');
+    var clearShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; uniform sampler2D uTexture; uniform float value; void main () {     gl_FragColor = value * texture2D(uTexture, vUv); }');
+    var displayShader = compileShader(
+      gl.FRAGMENT_SHADER,
+      `
+  precision highp float;
+  precision mediump sampler2D;
+  varying vec2 vUv;
+  uniform sampler2D uTexture;
+  void main () {
+    float density = texture2D(uTexture, vUv).r;
+    vec3 splatColor = vec3(1.0, 1.0, 1.0);
+    vec3 backgroundColor = vec3(0.8, 0.8, 0.8);
+    vec3 color = mix(backgroundColor, splatColor, density);
+    gl_FragColor = vec4(color, 1.0);
+  }
+  `
+    );
+    var splatShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; uniform sampler2D uTarget; uniform float aspectRatio; uniform vec3 color; uniform vec2 point; uniform float radius; void main () {     vec2 p = vUv - point.xy;     p.x *= aspectRatio;     vec3 splat = exp(-dot(p, p) / radius) * color;     vec3 base = texture2D(uTarget, vUv).xyz;     gl_FragColor = vec4(base + splat, 1.0); }');
+    var advectionManualFilteringShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; uniform sampler2D uVelocity; uniform sampler2D uSource; uniform vec2 texelSize; uniform float dt; uniform float dissipation; vec4 bilerp (in sampler2D sam, in vec2 p) {     vec4 st;     st.xy = floor(p - 0.5) + 0.5;     st.zw = st.xy + 1.0;     vec4 uv = st * texelSize.xyxy;     vec4 a = texture2D(sam, uv.xy);     vec4 b = texture2D(sam, uv.zy);     vec4 c = texture2D(sam, uv.xw);     vec4 d = texture2D(sam, uv.zw);     vec2 f = p - st.xy;     return mix(mix(a, b, f.x), mix(c, d, f.x), f.y); } void main () {     vec2 coord = gl_FragCoord.xy - dt * texture2D(uVelocity, vUv).xy;     gl_FragColor = dissipation * bilerp(uSource, coord);     gl_FragColor.a = 1.0; }');
+    var advectionShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; uniform sampler2D uVelocity; uniform sampler2D uSource; uniform vec2 texelSize; uniform float dt; uniform float dissipation; void main () {     vec2 coord = vUv - dt * texture2D(uVelocity, vUv).xy * texelSize;     gl_FragColor = dissipation * texture2D(uSource, coord); }');
+    var divergenceShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform sampler2D uVelocity; vec2 sampleVelocity (in vec2 uv) {     vec2 multiplier = vec2(1.0, 1.0);     if (uv.x < 0.0) { uv.x = 0.0; multiplier.x = -1.0; }     if (uv.x > 1.0) { uv.x = 1.0; multiplier.x = -1.0; }     if (uv.y < 0.0) { uv.y = 0.0; multiplier.y = -1.0; }     if (uv.y > 1.0) { uv.y = 1.0; multiplier.y = -1.0; }     return multiplier * texture2D(uVelocity, uv).xy; } void main () {     float L = sampleVelocity(vL).x;     float R = sampleVelocity(vR).x;     float T = sampleVelocity(vT).y;     float B = sampleVelocity(vB).y;     float div = 0.5 * (R - L + T - B);     gl_FragColor = vec4(div, 0.0, 0.0, 1.0); }');
+    var curlShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform sampler2D uVelocity; void main () {     float L = texture2D(uVelocity, vL).y;     float R = texture2D(uVelocity, vR).y;     float T = texture2D(uVelocity, vT).x;     float B = texture2D(uVelocity, vB).x;     float vorticity = R - L - T + B;     gl_FragColor = vec4(vorticity, 0.0, 0.0, 1.0); }');
+    var vorticityShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform sampler2D uVelocity; uniform sampler2D uCurl; uniform float curl; uniform float dt; void main () {     float L = texture2D(uCurl, vL).y;     float R = texture2D(uCurl, vR).y;     float T = texture2D(uCurl, vT).x;     float B = texture2D(uCurl, vB).x;     float C = texture2D(uCurl, vUv).x;     vec2 force = vec2(abs(T) - abs(B), abs(R) - abs(L));     force *= 1.0 / length(force + 0.00001) * curl * C;     vec2 vel = texture2D(uVelocity, vUv).xy;     gl_FragColor = vec4(vel + force * dt, 0.0, 1.0); }');
+    var pressureShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform sampler2D uPressure; uniform sampler2D uDivergence; vec2 boundary (in vec2 uv) {     uv = min(max(uv, 0.0), 1.0);     return uv; } void main () {     float L = texture2D(uPressure, boundary(vL)).x;     float R = texture2D(uPressure, boundary(vR)).x;     float T = texture2D(uPressure, boundary(vT)).x;     float B = texture2D(uPressure, boundary(vB)).x;     float C = texture2D(uPressure, vUv).x;     float divergence = texture2D(uDivergence, vUv).x;     float pressure = (L + R + B + T - divergence) * 0.25;     gl_FragColor = vec4(pressure, 0.0, 0.0, 1.0); }');
+    var gradientSubtractShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform sampler2D uPressure; uniform sampler2D uVelocity; vec2 boundary (in vec2 uv) {     uv = min(max(uv, 0.0), 1.0);     return uv; } void main () {     float L = texture2D(uPressure, boundary(vL)).x;     float R = texture2D(uPressure, boundary(vR)).x;     float T = texture2D(uPressure, boundary(vT)).x;     float B = texture2D(uPressure, boundary(vB)).x;     vec2 velocity = texture2D(uVelocity, vUv).xy;     velocity.xy -= vec2(R - L, T - B);     gl_FragColor = vec4(velocity, 0.0, 1.0); }');
+
+    let textureWidth: number = 0;
+    let textureHeight: number = 0;
+
+    let density: { first: any[]; second: any[]; swap: () => void } | undefined;
+    let velocity: { first: any[]; second: any[]; swap: () => void } | undefined;
+    let divergence: any[] | undefined;
+    let curl: any[] | undefined;
+    let pressure: { first: any[]; second: any[]; swap: () => void } | undefined;
+
+    initFramebuffers();
+
+    var clearProgram = new GLProgram(baseVertexShader, clearShader);
+    var displayProgram = new GLProgram(baseVertexShader, displayShader);
+    var splatProgram = new GLProgram(baseVertexShader, splatShader);
+    var advectionProgram = new GLProgram(baseVertexShader, support_linear_float ? advectionShader : advectionManualFilteringShader);
+    var divergenceProgram = new GLProgram(baseVertexShader, divergenceShader);
+    var curlProgram = new GLProgram(baseVertexShader, curlShader);
+    var vorticityProgram = new GLProgram(baseVertexShader, vorticityShader);
+    var pressureProgram = new GLProgram(baseVertexShader, pressureShader);
+    var gradienSubtractProgram = new GLProgram(baseVertexShader, gradientSubtractShader);
+
+    function initFramebuffers() {
+      textureWidth = gl.drawingBufferWidth >> config.TEXTURE_DOWNSAMPLE;
+      textureHeight = gl.drawingBufferHeight >> config.TEXTURE_DOWNSAMPLE;
+
+      var iFormat = ext.internalFormat;
+      var iFormatRG = ext.internalFormatRG;
+      var formatRG = ext.formatRG;
+      var texType = ext.texType;
+
+      density = createDoubleFBO(0, textureWidth, textureHeight, iFormat, gl.RGBA, texType, support_linear_float ? gl.LINEAR : gl.NEAREST);
+      velocity = createDoubleFBO(2, textureWidth, textureHeight, iFormatRG, formatRG, texType, support_linear_float ? gl.LINEAR : gl.NEAREST);
+      divergence = createFBO(4, textureWidth, textureHeight, iFormatRG, formatRG, texType, gl.NEAREST);
+      curl = createFBO(5, textureWidth, textureHeight, iFormatRG, formatRG, texType, gl.NEAREST);
+      pressure = createDoubleFBO(6, textureWidth, textureHeight, iFormatRG, formatRG, texType, gl.NEAREST);
+    }
+
+    function createFBO(texId, w, h, internalFormat, format, type, param) {
+      gl.activeTexture(gl.TEXTURE0 + texId);
+
+      var texture = gl.createTexture();
+
+      gl.bindTexture(gl.TEXTURE_2D, texture);
+      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, param);
+      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, param);
+      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
+      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
+      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, w, h, 0, format, type, null);
+
+      var fbo = gl.createFramebuffer();
+
+      gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
+      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
+      gl.viewport(0, 0, w, h);
+      gl.clear(gl.COLOR_BUFFER_BIT);
+
+      return [texture, fbo, texId];
+    }
+
+    function createDoubleFBO(texId, w, h, internalFormat, format, type, param) {
+      var fbo1 = createFBO(texId, w, h, internalFormat, format, type, param);
+      var fbo2 = createFBO(texId + 1, w, h, internalFormat, format, type, param);
+
+      return {
+        get first() {
+          return fbo1;
+        },
+        get second() {
+          return fbo2;
+        },
+        swap: function swap() {
+          var temp = fbo1;
+
+          fbo1 = fbo2;
+          fbo2 = temp;
+        },
+      };
+    }
+
+    const blit = (() => {
+      const vertexData = new Float32Array([-1, -1, -1, 1, 1, 1, 1, -1]);
+      const elementData = new Uint16Array([0, 1, 2, 0, 2, 3]);
+
+      gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());
+      gl.bufferData(gl.ARRAY_BUFFER, vertexData, gl.STATIC_DRAW);
+      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer());
+      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, elementData, gl.STATIC_DRAW);
+      gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);
+      gl.enableVertexAttribArray(0);
+
+      return (destination: WebGLFramebuffer | null) => {
+        gl.bindFramebuffer(gl.FRAMEBUFFER, destination);
+        gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);
+      };
+    })();
+
+    var lastTime = Date.now();
+    let timeAccumulator = 0;
+
+    update();
+
+    function splat(x: number, y: number, dx: number, dy: number) {
+      if (!velocity) return;
+      if (!canvas) return;
+      if (!density) return;
+
+      splatProgram.bind();
+      gl.uniform1i(splatProgram.uniforms.uTarget, velocity.first[2]);
+      gl.uniform1f(splatProgram.uniforms.aspectRatio, canvas.width / canvas.height);
+      gl.uniform2f(splatProgram.uniforms.point, x / canvas.width, 1.0 - y / canvas.height);
+      gl.uniform3f(splatProgram.uniforms.color, dx, -dy, 1.0);
+      gl.uniform1f(splatProgram.uniforms.radius, config.SPLAT_RADIUS);
+      blit(velocity.second[1]);
+      velocity.swap();
+
+      gl.uniform1i(splatProgram.uniforms.uTarget, density.first[2]);
+
+      gl.uniform3f(splatProgram.uniforms.color, 0.9, 0.9, 0.9);
+      blit(density.second[1]);
+      density.swap();
+    }
+
+    function update() {
+      resizeCanvas();
+
+      const dt = Math.min((Date.now() - lastTime) / 1000, 0.016);
+      lastTime = Date.now();
+
+      gl.viewport(0, 0, textureWidth, textureHeight);
+
+      timeAccumulator += dt;
+
+      if (canvas) {
+        if (timeAccumulator >= config.SPEED) {
+          timeAccumulator = 0;
+          // splat(canvas.width * 0.5, canvas.height, 0, 48 * 8);
+          splat(0, canvas.height, canvas.width * 0.3, 8);
+        }
+      }
+
+      advectionProgram.bind();
+
+      if (!velocity) return;
+      if (!density) return;
+      if (!curl) return;
+      if (!divergence) return;
+      if (!pressure) return;
+
+      gl.uniform2f(advectionProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(advectionProgram.uniforms.uVelocity, velocity.first[2]);
+      gl.uniform1i(advectionProgram.uniforms.uSource, velocity.first[2]);
+      gl.uniform1f(advectionProgram.uniforms.dt, dt);
+      gl.uniform1f(advectionProgram.uniforms.dissipation, config.VELOCITY_DISSIPATION);
+      blit(velocity.second[1]);
+      velocity.swap();
+
+      gl.uniform1i(advectionProgram.uniforms.uVelocity, velocity.first[2]);
+
+      gl.uniform1i(advectionProgram.uniforms.uSource, density.first[2]);
+      gl.uniform1f(advectionProgram.uniforms.dissipation, config.DENSITY_DISSIPATION);
+      blit(density.second[1]);
+      density.swap();
+
+      curlProgram.bind();
+      gl.uniform2f(curlProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(curlProgram.uniforms.uVelocity, velocity.first[2]);
+      blit(curl[1]);
+
+      vorticityProgram.bind();
+      gl.uniform2f(vorticityProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(vorticityProgram.uniforms.uVelocity, velocity.first[2]);
+      gl.uniform1i(vorticityProgram.uniforms.uCurl, curl[2]);
+      gl.uniform1f(vorticityProgram.uniforms.curl, config.CURL);
+      gl.uniform1f(vorticityProgram.uniforms.dt, dt);
+      blit(velocity.second[1]);
+      velocity.swap();
+
+      divergenceProgram.bind();
+      gl.uniform2f(divergenceProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(divergenceProgram.uniforms.uVelocity, velocity.first[2]);
+      blit(divergence[1]);
+
+      clearProgram.bind();
+
+      var pressureTexId = pressure.first[2];
+
+      gl.activeTexture(gl.TEXTURE0 + pressureTexId);
+      gl.bindTexture(gl.TEXTURE_2D, pressure.first[0]);
+      gl.uniform1i(clearProgram.uniforms.uTexture, pressureTexId);
+      gl.uniform1f(clearProgram.uniforms.value, config.PRESSURE_DISSIPATION);
+      blit(pressure.second[1]);
+      pressure.swap();
+
+      pressureProgram.bind();
+      gl.uniform2f(pressureProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(pressureProgram.uniforms.uDivergence, divergence[2]);
+      pressureTexId = pressure.first[2];
+      gl.activeTexture(gl.TEXTURE0 + pressureTexId);
+
+      for (var _i = 0; _i < config.PRESSURE_ITERATIONS; _i++) {
+        gl.bindTexture(gl.TEXTURE_2D, pressure.first[0]);
+        gl.uniform1i(pressureProgram.uniforms.uPressure, pressureTexId);
+        blit(pressure.second[1]);
+        pressure.swap();
+      }
+
+      gradienSubtractProgram.bind();
+      gl.uniform2f(gradienSubtractProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(gradienSubtractProgram.uniforms.uPressure, pressure.first[2]);
+      gl.uniform1i(gradienSubtractProgram.uniforms.uVelocity, velocity.first[2]);
+      blit(velocity.second[1]);
+      velocity.swap();
+
+      gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
+      displayProgram.bind();
+      gl.uniform1i(displayProgram.uniforms.uTexture, density.first[2]);
+      blit(null);
+
+      requestAnimationFrame(update);
+    }
+
+    function resizeCanvas() {
+      if (!canvas) return;
+
+      (canvas.width !== canvas.clientWidth || canvas.height !== canvas.clientHeight) && ((canvas.width = canvas.clientWidth), (canvas.height = canvas.clientHeight), initFramebuffers());
+    }
+  }, []);
+
+  return <canvas className={styles.canvas} ref={canvasRef} style={props.style} />;
+}
+
+================
+File: reference/components/CanvasPlatformer.module.scss
+================
+.container {
+  width: 100%;
+  height: auto;
+  position: relative;
+}
+
+.root {
+  display: block;
+  width: 100%;
+  background: transparent;
+
+  &:focus {
+    outline: 0;
+    box-shadow: inset 0 0 0 1px var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/CanvasPlatformer.tsx
+================
+'use client';
+
+import styles from '@components/CanvasPlatformer.module.scss';
+
+import * as React from 'react';
+
+import ActionButton from '@components/ActionButton';
+
+interface PlatformerProps {
+  rows?: number;
+}
+
+// TODO(jimmylee)
+// Move these constants into a separate file
+// Dynamically compute these constants since we're going to
+// Support t-shirt sizes for the system.
+const LINE_HEIGHT = 20;
+const CHARACTER_WIDTH = 9.6;
+const GRAVITY = 0.3;
+const MOVE_SPEED = 2;
+const JUMP_SPEED = -6;
+const FRICTION = 0.85;
+
+interface Position {
+  x: number;
+  y: number;
+}
+
+interface Keys {
+  left: boolean;
+  right: boolean;
+  jump: boolean;
+}
+
+interface Block {
+  x: number;
+  y: number;
+}
+
+const CanvasPlatformer: React.FC<PlatformerProps> = ({ rows = 25 }) => {
+  const canvasRef = React.useRef<HTMLCanvasElement>(null);
+  const [focused, setFocused] = React.useState(false);
+
+  const positionRef = React.useRef<Position>({ x: 50, y: 0 });
+  const velocityRef = React.useRef<Position>({ x: 0, y: 0 });
+  const keysRef = React.useRef<Keys>({ left: false, right: false, jump: false });
+  const platformBlocksRef = React.useRef<Block[]>([]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+    const parent = canvas.parentElement;
+    if (!parent) return;
+
+    const resizeCanvas = () => {
+      const parentWidth = parent.clientWidth;
+      const canvasHeight = rows * LINE_HEIGHT;
+      canvas.width = parentWidth;
+      canvas.height = canvasHeight;
+      const platformY = canvas.height - LINE_HEIGHT * 2;
+      positionRef.current.y = platformY - LINE_HEIGHT;
+      platformBlocksRef.current = [];
+      const numBlocks = Math.floor(parentWidth / CHARACTER_WIDTH);
+      for (let i = 0; i < numBlocks; i++) {
+        platformBlocksRef.current.push({ x: i * CHARACTER_WIDTH, y: platformY });
+      }
+    };
+
+    resizeCanvas();
+    window.addEventListener('resize', resizeCanvas);
+    return () => {
+      window.removeEventListener('resize', resizeCanvas);
+    };
+  }, [rows]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const handleFocus = () => setFocused(true);
+    const handleBlur = () => {
+      setFocused(false);
+      keysRef.current = { left: false, right: false, jump: false };
+    };
+
+    canvas.tabIndex = 0;
+    canvas.addEventListener('focus', handleFocus);
+    canvas.addEventListener('blur', handleBlur);
+
+    const handleClick = (e: MouseEvent) => {
+      const rect = canvas.getBoundingClientRect();
+      const x = Math.floor((e.clientX - rect.left) / CHARACTER_WIDTH) * CHARACTER_WIDTH;
+      const y = Math.floor((e.clientY - rect.top) / LINE_HEIGHT) * LINE_HEIGHT;
+      const blocks = platformBlocksRef.current;
+      const existingIndex = blocks.findIndex((b) => b.x === x && b.y === y);
+      if (existingIndex !== -1) {
+        blocks.splice(existingIndex, 1);
+      } else {
+        blocks.push({ x, y });
+      }
+    };
+
+    canvas.addEventListener('click', handleClick);
+
+    return () => {
+      canvas.removeEventListener('focus', handleFocus);
+      canvas.removeEventListener('blur', handleBlur);
+      canvas.removeEventListener('click', handleClick);
+    };
+  }, []);
+
+  React.useEffect(() => {
+    const handleKeyDown = (e: KeyboardEvent) => {
+      if (!focused) return;
+      if (e.key === 'ArrowLeft' || e.key === 'ArrowRight' || e.code === 'Space') {
+        e.preventDefault();
+        e.stopPropagation();
+      }
+      if (e.key === 'ArrowLeft') keysRef.current.left = true;
+      if (e.key === 'ArrowRight') keysRef.current.right = true;
+      if (e.code === 'Space') keysRef.current.jump = true;
+    };
+
+    const handleKeyUp = (e: KeyboardEvent) => {
+      if (!focused) return;
+      if (e.key === 'ArrowLeft' || e.key === 'ArrowRight' || e.code === 'Space') {
+        e.preventDefault();
+        e.stopPropagation();
+      }
+      if (e.key === 'ArrowLeft') keysRef.current.left = false;
+      if (e.key === 'ArrowRight') keysRef.current.right = false;
+      if (e.code === 'Space') keysRef.current.jump = false;
+    };
+
+    window.addEventListener('keydown', handleKeyDown, { capture: true });
+    window.addEventListener('keyup', handleKeyUp, { capture: true });
+
+    return () => {
+      window.removeEventListener('keydown', handleKeyDown, { capture: true });
+      window.removeEventListener('keyup', handleKeyUp, { capture: true });
+    };
+  }, [focused]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+    const ctx = canvas.getContext('2d');
+    if (!ctx) return;
+
+    const loop = () => {
+      const w = canvas.width;
+      const h = canvas.height;
+      ctx.clearRect(0, 0, w, h);
+
+      const pos = positionRef.current;
+      const vel = velocityRef.current;
+      const keys = keysRef.current;
+      const blocks = platformBlocksRef.current;
+
+      const themeBorderColor = getComputedStyle(document.body).getPropertyValue('--theme-border').trim();
+      const themeTextColor = getComputedStyle(document.body).getPropertyValue('--theme-text').trim();
+
+      ctx.fillStyle = themeBorderColor;
+      for (const b of blocks) {
+        ctx.fillRect(b.x, b.y, CHARACTER_WIDTH, LINE_HEIGHT);
+      }
+
+      if (keys.left) vel.x = -MOVE_SPEED;
+      else if (keys.right) vel.x = MOVE_SPEED;
+      else {
+        vel.x *= FRICTION;
+        if (Math.abs(vel.x) < 0.1) vel.x = 0;
+      }
+
+      const oldY = pos.y;
+      vel.y += GRAVITY;
+      pos.x += vel.x;
+      pos.y += vel.y;
+
+      if (pos.x < 0) pos.x = 0;
+      if (pos.x > w - CHARACTER_WIDTH) pos.x = w - CHARACTER_WIDTH;
+
+      let groundY = h;
+      for (const b of blocks) {
+        const horizontallyOverlapping = pos.x + CHARACTER_WIDTH > b.x && pos.x < b.x + CHARACTER_WIDTH;
+        if (horizontallyOverlapping && oldY + LINE_HEIGHT <= b.y && pos.y + LINE_HEIGHT >= b.y) {
+          if (b.y < groundY) groundY = b.y;
+        }
+      }
+
+      if (pos.y + LINE_HEIGHT > groundY) {
+        pos.y = groundY - LINE_HEIGHT;
+        vel.y = 0;
+        if (keys.jump) vel.y = JUMP_SPEED;
+      }
+
+      ctx.fillStyle = themeTextColor;
+      ctx.fillRect(pos.x, pos.y, CHARACTER_WIDTH, LINE_HEIGHT);
+
+      requestAnimationFrame(loop);
+    };
+
+    requestAnimationFrame(loop);
+  }, []);
+
+  const handleJumpClick = () => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+    const pos = positionRef.current;
+    const vel = velocityRef.current;
+    let w = canvas.width;
+    let h = canvas.height;
+    let groundY = h;
+    for (const b of platformBlocksRef.current) {
+      const horizontallyOverlapping = pos.x + CHARACTER_WIDTH > b.x && pos.x < b.x + CHARACTER_WIDTH;
+      if (horizontallyOverlapping && pos.y + LINE_HEIGHT <= b.y) {
+        if (b.y < groundY) groundY = b.y;
+      }
+    }
+    if (pos.y + LINE_HEIGHT >= groundY) vel.y = JUMP_SPEED;
+  };
+
+  const handleLeftClick = () => {
+    const pos = positionRef.current;
+    pos.x -= CHARACTER_WIDTH;
+    if (pos.x < 0) pos.x = 0;
+  };
+
+  const handleRightClick = () => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+    const pos = positionRef.current;
+    pos.x += CHARACTER_WIDTH;
+    if (pos.x > canvas.width - CHARACTER_WIDTH) pos.x = canvas.width - CHARACTER_WIDTH;
+  };
+
+  return (
+    <>
+      <ActionButton hotkey="␣" onClick={handleJumpClick}>
+        Jump
+      </ActionButton>
+      <ActionButton hotkey="←" onClick={handleLeftClick}>
+        Left
+      </ActionButton>
+      <ActionButton hotkey="→" onClick={handleRightClick}>
+        Right
+      </ActionButton>
+      <div className={styles.container}>
+        <canvas className={styles.root} ref={canvasRef} />
+      </div>
+    </>
+  );
+};
+
+export default CanvasPlatformer;
+
+================
+File: reference/components/CanvasSnake.module.scss
+================
+.container {
+  width: 100%;
+  height: auto;
+  position: relative;
+}
+
+.root {
+  display: block;
+  width: 100%;
+  background: transparent;
+
+  &:focus {
+    outline: 0;
+    box-shadow: inset 0 0 0 1px var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/CanvasSnake.tsx
+================
+'use client';
+
+import styles from '@components/CanvasSnake.module.scss';
+
+import * as React from 'react';
+
+import ActionButton from '@components/ActionButton';
+
+interface SnakeProps {
+  rows?: number;
+}
+
+// TODO(jimmylee)
+// Move these constants into a separate file
+// Dynamically compute these constants since we're going to
+// Support t-shirt sizes for the system.
+const LINE_HEIGHT = 20;
+const CHARACTER_WIDTH = 9.6;
+
+interface Position {
+  x: number;
+  y: number;
+}
+
+type Direction = 'UP' | 'DOWN' | 'LEFT' | 'RIGHT';
+
+const CanvasSnake = ({ rows = 25 }: SnakeProps) => {
+  const canvasRef = React.useRef<HTMLCanvasElement>(null);
+  const [focused, setFocused] = React.useState(false);
+  const directionRef = React.useRef<Direction>('RIGHT');
+  const snakeRef = React.useRef<Position[]>([]);
+  const fruitRef = React.useRef<Position>({ x: 0, y: 0 });
+  const gridWidthRef = React.useRef<number>(0);
+  const gridHeightRef = React.useRef<number>(0);
+  const lastMoveTimeRef = React.useRef<number>(0);
+  const moveInterval = 150;
+  const animationFrameRef = React.useRef<number | null>(null);
+
+  const reset = React.useCallback(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const w = canvas.width;
+    const h = canvas.height;
+    const gridWidth = Math.floor(w / CHARACTER_WIDTH);
+    const gridHeight = Math.floor(h / LINE_HEIGHT);
+
+    gridWidthRef.current = gridWidth;
+    gridHeightRef.current = gridHeight;
+
+    const startX = Math.floor(gridWidth / 2);
+    const startY = Math.floor(gridHeight / 2);
+
+    snakeRef.current = [
+      { x: startX - 13, y: startY },
+      { x: startX - 12, y: startY },
+      { x: startX - 11, y: startY },
+      { x: startX - 10, y: startY },
+      { x: startX - 9, y: startY },
+      { x: startX - 8, y: startY },
+      { x: startX - 7, y: startY },
+      { x: startX - 6, y: startY },
+      { x: startX - 5, y: startY },
+      { x: startX - 4, y: startY },
+      { x: startX - 3, y: startY },
+      { x: startX - 2, y: startY },
+      { x: startX - 1, y: startY },
+      { x: startX, y: startY },
+    ];
+
+    directionRef.current = 'RIGHT';
+
+    fruitRef.current = {
+      x: Math.floor(Math.random() * gridWidth),
+      y: Math.floor(Math.random() * gridHeight),
+    };
+
+    lastMoveTimeRef.current = performance.now();
+  }, []);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const parent = canvas.parentElement;
+    if (!parent) return;
+
+    const onHandleResizeCanvas = () => {
+      const parentWidth = parent.clientWidth;
+      const canvasHeight = rows * LINE_HEIGHT;
+      canvas.width = parentWidth;
+      canvas.height = canvasHeight;
+      reset();
+    };
+
+    onHandleResizeCanvas();
+    window.addEventListener('resize', onHandleResizeCanvas);
+    return () => {
+      window.removeEventListener('resize', onHandleResizeCanvas);
+    };
+  }, [rows, reset]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const onHandleFocus = () => {
+      setFocused(true);
+    };
+    const onHandleBlur = () => {
+      setFocused(false);
+    };
+
+    canvas.tabIndex = 0;
+    canvas.addEventListener('focus', onHandleFocus);
+    canvas.addEventListener('blur', onHandleBlur);
+
+    return () => {
+      canvas.removeEventListener('focus', onHandleFocus);
+      canvas.removeEventListener('blur', onHandleBlur);
+    };
+  }, []);
+
+  React.useEffect(() => {
+    const handleKeyDown = (e: KeyboardEvent) => {
+      if (!focused) return;
+      if (e.key === 'ArrowLeft' || e.key === 'ArrowRight' || e.key === 'ArrowUp' || e.key === 'ArrowDown') {
+        e.preventDefault();
+        e.stopPropagation();
+      }
+      const currentDir = directionRef.current;
+      if (e.key === 'ArrowLeft' && currentDir !== 'RIGHT') directionRef.current = 'LEFT';
+      if (e.key === 'ArrowRight' && currentDir !== 'LEFT') directionRef.current = 'RIGHT';
+      if (e.key === 'ArrowUp' && currentDir !== 'DOWN') directionRef.current = 'UP';
+      if (e.key === 'ArrowDown' && currentDir !== 'UP') directionRef.current = 'DOWN';
+    };
+
+    window.addEventListener('keydown', handleKeyDown, { capture: true });
+    return () => {
+      window.removeEventListener('keydown', handleKeyDown, { capture: true });
+    };
+  }, [focused]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const ctx = canvas.getContext('2d');
+    if (!ctx) return;
+
+    const themeBorderColor = getComputedStyle(document.body).getPropertyValue('--theme-text').trim();
+    const themeTextColor = getComputedStyle(document.body).getPropertyValue('--theme-focused-foreground').trim();
+
+    const moveSnake = () => {
+      const snake = snakeRef.current;
+      const dir = directionRef.current;
+      const head = snake[snake.length - 1];
+      let newHead: Position = { x: head.x, y: head.y };
+      if (dir === 'LEFT') newHead.x -= 1;
+      if (dir === 'RIGHT') newHead.x += 1;
+      if (dir === 'UP') newHead.y -= 1;
+      if (dir === 'DOWN') newHead.y += 1;
+      if (newHead.x < 0 || newHead.x >= gridWidthRef.current || newHead.y < 0 || newHead.y >= gridHeightRef.current) {
+        reset();
+        return;
+      }
+      for (const seg of snake) {
+        if (seg.x === newHead.x && seg.y === newHead.y) {
+          reset();
+          return;
+        }
+      }
+      snake.push(newHead);
+      if (newHead.x === fruitRef.current.x && newHead.y === fruitRef.current.y) {
+        placeTarget();
+      } else {
+        snake.shift();
+      }
+    };
+
+    const placeTarget = () => {
+      const snake = snakeRef.current;
+      const gridW = gridWidthRef.current;
+      const gridH = gridHeightRef.current;
+      let fruitPos: Position;
+      while (true) {
+        fruitPos = {
+          x: Math.floor(Math.random() * gridW),
+          y: Math.floor(Math.random() * gridH),
+        };
+        if (!snake.some((s) => s.x === fruitPos.x && s.y === fruitPos.y)) break;
+      }
+      fruitRef.current = fruitPos;
+    };
+
+    const loop = (time: number) => {
+      if (!ctx) return;
+      if (!focused) return;
+
+      const w = canvas.width;
+      const h = canvas.height;
+
+      ctx.clearRect(0, 0, w, h);
+      ctx.fillStyle = themeTextColor;
+      ctx.fillRect(fruitRef.current.x * CHARACTER_WIDTH, fruitRef.current.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+      ctx.fillStyle = themeBorderColor;
+      for (const segment of snakeRef.current) {
+        ctx.fillRect(segment.x * CHARACTER_WIDTH, segment.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+      }
+      if (time - lastMoveTimeRef.current > moveInterval) {
+        moveSnake();
+        lastMoveTimeRef.current = time;
+      }
+      animationFrameRef.current = requestAnimationFrame(loop);
+    };
+
+    if (focused && animationFrameRef.current === null) {
+      animationFrameRef.current = requestAnimationFrame(loop);
+    }
+
+    return () => {
+      if (animationFrameRef.current !== null) {
+        cancelAnimationFrame(animationFrameRef.current);
+        animationFrameRef.current = null;
+      }
+    };
+  }, [focused, reset]);
+
+  React.useEffect(() => {
+    if (!focused) {
+      if (animationFrameRef.current !== null) {
+        cancelAnimationFrame(animationFrameRef.current);
+        animationFrameRef.current = null;
+      }
+
+      return;
+    }
+
+    if (animationFrameRef.current === null && canvasRef.current) {
+      animationFrameRef.current = requestAnimationFrame((time) => {
+        const canvas = canvasRef.current;
+        if (!canvas) return;
+
+        const ctx = canvas.getContext('2d');
+        if (!ctx) return;
+
+        const themeBorderColor = getComputedStyle(document.body).getPropertyValue('--theme-border').trim();
+        const themeTextColor = getComputedStyle(document.body).getPropertyValue('--theme-text').trim();
+
+        ctx.clearRect(0, 0, canvas.width, canvas.height);
+        ctx.fillStyle = themeBorderColor;
+        ctx.fillRect(fruitRef.current.x * CHARACTER_WIDTH, fruitRef.current.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+        ctx.fillStyle = themeTextColor;
+
+        for (const segment of snakeRef.current) {
+          ctx.fillRect(segment.x * CHARACTER_WIDTH, segment.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+        }
+
+        lastMoveTimeRef.current = time;
+        animationFrameRef.current = requestAnimationFrame(loop);
+
+        function loop(time: number) {
+          if (!focused) return;
+          if (!ctx) return;
+          if (!canvas) return;
+
+          ctx.clearRect(0, 0, canvas.width, canvas.height);
+          ctx.fillStyle = themeBorderColor;
+          ctx.fillRect(fruitRef.current.x * CHARACTER_WIDTH, fruitRef.current.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+          ctx.fillStyle = themeTextColor;
+          for (const segment of snakeRef.current) {
+            ctx.fillRect(segment.x * CHARACTER_WIDTH, segment.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+          }
+          if (time - lastMoveTimeRef.current > moveInterval) {
+            moveSnake();
+            lastMoveTimeRef.current = time;
+          }
+          animationFrameRef.current = requestAnimationFrame(loop);
+        }
+
+        const moveSnake = () => {
+          const snake = snakeRef.current;
+          const dir = directionRef.current;
+          const head = snake[snake.length - 1];
+          let newHead: Position = { x: head.x, y: head.y };
+          if (dir === 'LEFT') newHead.x -= 1;
+          if (dir === 'RIGHT') newHead.x += 1;
+          if (dir === 'UP') newHead.y -= 1;
+          if (dir === 'DOWN') newHead.y += 1;
+          if (newHead.x < 0 || newHead.x >= gridWidthRef.current || newHead.y < 0 || newHead.y >= gridHeightRef.current) {
+            reset();
+            return;
+          }
+
+          for (const seg of snake) {
+            if (seg.x === newHead.x && seg.y === newHead.y) {
+              reset();
+              return;
+            }
+          }
+
+          snake.push(newHead);
+          if (newHead.x === fruitRef.current.x && newHead.y === fruitRef.current.y) {
+            placeTarget();
+          } else {
+            snake.shift();
+          }
+        };
+
+        const placeTarget = () => {
+          const snake = snakeRef.current;
+          const gridW = gridWidthRef.current;
+          const gridH = gridHeightRef.current;
+          let fruitPos: Position;
+          while (true) {
+            fruitPos = {
+              x: Math.floor(Math.random() * gridW),
+              y: Math.floor(Math.random() * gridH),
+            };
+            if (!snake.some((s) => s.x === fruitPos.x && s.y === fruitPos.y)) break;
+          }
+          fruitRef.current = fruitPos;
+        };
+      });
+    }
+  }, [focused, reset]);
+
+  const onHandleClickUp = () => {
+    if (directionRef.current !== 'DOWN') directionRef.current = 'UP';
+  };
+  const onHandleClickDown = () => {
+    if (directionRef.current !== 'UP') directionRef.current = 'DOWN';
+  };
+  const onHandleClickLeft = () => {
+    if (directionRef.current !== 'RIGHT') directionRef.current = 'LEFT';
+  };
+  const onHandleClickRight = () => {
+    if (directionRef.current !== 'LEFT') directionRef.current = 'RIGHT';
+  };
+
+  return (
+    <>
+      <ActionButton hotkey="↑" onClick={onHandleClickUp}>
+        Up
+      </ActionButton>
+      <ActionButton hotkey="↓" onClick={onHandleClickDown}>
+        Down
+      </ActionButton>
+      <ActionButton hotkey="←" onClick={onHandleClickLeft}>
+        Left
+      </ActionButton>
+      <ActionButton hotkey="→" onClick={onHandleClickRight}>
+        Right
+      </ActionButton>
+      <div className={styles.container}>
+        <canvas className={styles.root} ref={canvasRef} />
+      </div>
+    </>
+  );
+};
+
+export default CanvasSnake;
+
+================
+File: reference/components/Card.module.scss
+================
+.card {
+  position: relative;
+  display: block;
+  padding-top: 0;
+  padding-left: 0;
+  padding-right: 0;
+  padding-bottom: 0;
+  white-space: prewrap;
+}
+
+.children {
+  box-shadow:
+    inset 2px 0 0 0 var(--theme-text),
+    inset -2px 0 0 0 var(--theme-text),
+    inset 0 -2px 0 0 var(--theme-text);
+  display: block;
+  padding-top: calc(var(--theme-line-height-base) * 0.5rem);
+  padding-left: 2ch;
+  padding-right: 2ch;
+  padding-bottom: calc(var(--theme-line-height-base) * 1rem);
+  overflow-x: auto;
+  overflow-y: hidden;
+
+  &::-webkit-scrollbar {
+    display: none;
+  }
+
+  scrollbar-width: none;
+}
+
+.action {
+  display: flex;
+  align-items: flex-end;
+  justify-content: space-between;
+}
+
+.left {
+  min-width: 10%;
+  width: 100%;
+  box-shadow:
+    inset 2px 0 0 0 var(--theme-text),
+    inset 0 2px 0 0 var(--theme-text);
+  padding: calc((var(--font-size) * 0.5) * var(--theme-line-height-base)) 2ch 0px 1ch;
+}
+
+.leftCorner {
+  flex-shrink: 0;
+  box-shadow:
+    inset 2px 0 0 0 var(--theme-text),
+    inset 0 2px 0 0 var(--theme-text);
+  padding: calc((var(--font-size) * 0.5) * var(--theme-line-height-base)) 1ch 0px 1ch;
+}
+
+.right {
+  min-width: 10%;
+  width: 100%;
+  box-shadow:
+    inset -2px 0 0 0 var(--theme-text),
+    inset 0 2px 0 0 var(--theme-text);
+  padding: calc((var(--font-size) * 0.5) * var(--theme-line-height-base)) 2ch 0px 1ch;
+}
+
+.rightCorner {
+  flex-shrink: 0;
+  box-shadow:
+    inset -2px 0 0 0 var(--theme-text),
+    inset 0 2px 0 0 var(--theme-text);
+  padding: calc((var(--font-size) * 0.5) * var(--theme-line-height-base)) 1ch 0px 1ch;
+}
+
+.title {
+  flex-shrink: 0;
+  padding: 0 1ch 0 1ch;
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+================
+File: reference/components/Card.tsx
+================
+import styles from '@components/Card.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface CardProps extends React.HTMLAttributes<HTMLDivElement> {
+  children?: React.ReactNode;
+  title?: string | any;
+  mode?: string | any;
+}
+
+const Card: React.FC<CardProps> = ({ children, mode, title, style, ...rest }) => {
+  let titleElement = (
+    <header className={styles.action}>
+      <div className={styles.left} aria-hidden="true"></div>
+      {title ? <h2 className={styles.title}>{title}</h2> : null}
+      <div className={styles.right} aria-hidden="true"></div>
+    </header>
+  );
+
+  if (mode === 'left') {
+    titleElement = (
+      <header className={styles.action}>
+        <div className={styles.leftCorner} aria-hidden="true"></div>
+        <h2 className={styles.title}>{title}</h2>
+        <div className={styles.right} aria-hidden="true"></div>
+      </header>
+    );
+  }
+
+  if (mode === 'right') {
+    titleElement = (
+      <header className={styles.action}>
+        <div className={styles.left} aria-hidden="true"></div>
+        <h2 className={styles.title}>{title}</h2>
+        <div className={styles.rightCorner} aria-hidden="true"></div>
+      </header>
+    );
+  }
+
+  return (
+    <article className={styles.card} style={style}>
+      {titleElement}
+      <section className={styles.children}>{children}</section>
+    </article>
+  );
+};
+
+export default Card;
+
+================
+File: reference/components/CardDouble.module.scss
+================
+.card {
+  --card-double-border-width: 6px;
+  --card-double-half-gutter: (var(--font-size) * 0.5);
+  --card-double-top-gutter: 6px;
+
+  position: relative;
+  display: block;
+  padding-top: 0;
+  padding-right: 0;
+  padding-left: 0;
+  padding-bottom: 0;
+}
+
+.children {
+  border-left: var(--card-double-border-width) solid var(--theme-text);
+  border-left-style: double;
+  border-bottom: var(--card-double-border-width) solid var(--theme-text);
+  border-bottom-style: double;
+  border-right: var(--card-double-border-width) solid var(--theme-text);
+  border-right-style: double;
+  display: block;
+  padding-top: calc(var(--theme-line-height-base) * 0.5rem);
+  padding-left: calc(2ch - var(--card-double-border-width));
+  padding-right: calc(2ch - var(--card-double-border-width));
+  padding-bottom: calc(var(--theme-line-height-base) * 1rem - var(--card-double-border-width));
+
+  overflow-x: auto;
+  overflow-y: hidden;
+
+  &::-webkit-scrollbar {
+    display: none;
+  }
+
+  scrollbar-width: none;
+}
+
+.action {
+  display: flex;
+  align-items: flex-end;
+  justify-content: space-between;
+}
+
+.left {
+  min-width: 10%;
+  width: 100%;
+  border-top: var(--card-double-border-width) solid var(--theme-text);
+  border-top-style: double;
+  border-left: var(--card-double-border-width) solid var(--theme-text);
+  border-left-style: double;
+  padding: calc(var(--card-double-top-gutter) * var(--theme-line-height-base)) 2ch 0px 1ch;
+}
+
+.leftCorner {
+  flex-shrink: 0;
+  border-top: var(--card-double-border-width) solid var(--theme-text);
+  border-top-style: double;
+  border-left: var(--card-double-border-width) solid var(--theme-text);
+  border-left-style: double;
+  padding: calc(var(--card-double-top-gutter) * var(--theme-line-height-base)) calc(1ch - 6px) 0px 1ch;
+}
+
+.right {
+  min-width: 10%;
+  width: 100%;
+  border-top: var(--card-double-border-width) solid var(--theme-text);
+  border-top-style: double;
+  border-right: var(--card-double-border-width) solid var(--theme-text);
+  border-right-style: double;
+  padding: calc(var(--card-double-top-gutter) * var(--theme-line-height-base)) 2ch 0px 1ch;
+}
+
+.rightCorner {
+  flex-shrink: 0;
+  border-top: var(--card-double-border-width) solid var(--theme-text);
+  border-top-style: double;
+  border-right: var(--card-double-border-width) solid var(--theme-text);
+  border-right-style: double;
+  padding: calc(var(--card-double-top-gutter) * var(--theme-line-height-base)) 1ch 0px calc(1ch - 6px);
+}
+
+.title {
+  flex-shrink: 0;
+  padding: 0 1ch 0 1ch;
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+================
+File: reference/components/CardDouble.tsx
+================
+import styles from '@components/CardDouble.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface CardProps extends React.HTMLAttributes<HTMLDivElement> {
+  children?: React.ReactNode;
+  title?: string | any;
+  mode?: string | any;
+  style?: any;
+}
+
+const CardDouble: React.FC<CardProps> = ({ children, mode, title, style, ...rest }) => {
+  let titleElement = (
+    <header className={styles.action}>
+      <div className={styles.left} aria-hidden="true"></div>
+      <h2 className={styles.title}>{title}</h2>
+      <div className={styles.right} aria-hidden="true"></div>
+    </header>
+  );
+
+  if (mode === 'left') {
+    titleElement = (
+      <header className={styles.action}>
+        <div className={styles.leftCorner} aria-hidden="true"></div>
+        <h2 className={styles.title}>{title}</h2>
+        <div className={styles.right} aria-hidden="true"></div>
+      </header>
+    );
+  }
+
+  if (mode === 'right') {
+    titleElement = (
+      <header className={styles.action}>
+        <div className={styles.left} aria-hidden="true"></div>
+        <h2 className={styles.title}>{title}</h2>
+        <div className={styles.rightCorner} aria-hidden="true"></div>
+      </header>
+    );
+  }
+
+  return (
+    <article className={styles.card}>
+      {titleElement}
+      <section className={styles.children}>
+        <section className={styles.borderChildren} style={style}>
+          {children}
+        </section>
+      </section>
+    </article>
+  );
+};
+
+export default CardDouble;
+
+================
+File: reference/components/Checkbox.module.scss
+================
+.section {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+
+  .right {
+    padding-bottom: calc(8px * var(--theme-line-height-base));
+    box-shadow: inset 0 1px 0 0 var(--theme-border-subdued);
+  }
+
+  &:last-child {
+    .right {
+      padding-bottom: 0;
+    }
+  }
+}
+
+.checked {
+}
+
+.focused {
+  .figure {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.relative {
+  position: relative;
+  flex-shrink: 0;
+  display: inline-block;
+  vertical-align: baseline;
+}
+
+.figure {
+  width: 100%;
+  height: 100%;
+  cursor: pointer;
+  color: var(--theme-text);
+  background: var(--theme-button-foreground);
+  align-self: stretch;
+  display: inline-block;
+  padding: 0 1ch 0 1ch;
+}
+
+.right {
+  background: var(--theme-button-background);
+  min-width: 10%;
+  width: 100%;
+  align-self: stretch;
+}
+
+.input {
+  top: 0;
+  left: 0;
+  opacity: 0;
+  position: absolute;
+  width: 1px;
+  height: 1px;
+}
+
+================
+File: reference/components/Checkbox.tsx
+================
+'use client';
+
+import styles from '@components/Checkbox.module.scss';
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface CheckboxProps {
+  style?: React.CSSProperties;
+  checkboxStyle?: React.CSSProperties;
+  name: string;
+  defaultChecked?: boolean;
+  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;
+  tabIndex?: number;
+  children?: React.ReactNode;
+}
+
+const Checkbox: React.FC<CheckboxProps> = ({ style, name, defaultChecked = false, onChange, children }) => {
+  const checkboxId = `${name}-checkbox`;
+  const inputRef = React.useRef<HTMLInputElement>(null);
+
+  const [isChecked, setIsChecked] = React.useState(defaultChecked);
+  const [isFocused, setIsFocused] = React.useState(false);
+
+  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
+    switch (event.key) {
+      case 'Enter':
+        event.preventDefault();
+        inputRef.current?.click();
+        break;
+      case 'ArrowUp':
+      case 'ArrowLeft': {
+        event.preventDefault();
+        const previousFocusable = Utilities.findNextFocusable(document.activeElement, 'previous');
+        previousFocusable?.focus();
+        break;
+      }
+      case 'ArrowDown':
+      case 'ArrowRight': {
+        event.preventDefault();
+        const nextFocusable = Utilities.findNextFocusable(document.activeElement, 'next');
+        nextFocusable?.focus();
+        break;
+      }
+      default:
+        break;
+    }
+  };
+
+  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
+    const newCheckedStatus = event.target.checked;
+    setIsChecked(newCheckedStatus);
+    if (onChange) {
+      onChange(event);
+    }
+  };
+
+  const handleFocus = () => setIsFocused(true);
+  const handleBlur = () => setIsFocused(false);
+
+  return (
+    <div
+      className={Utilities.classNames(styles.section, {
+        [styles.checked]: isChecked,
+        [styles.focused]: isFocused,
+      })}
+      style={style}
+    >
+      <div className={styles.relative}>
+        <input className={styles.input} id={checkboxId} type="checkbox" name={name} defaultChecked={defaultChecked} onChange={handleChange} onKeyDown={handleKeyDown} onFocus={handleFocus} onBlur={handleBlur} tabIndex={0} ref={inputRef} />
+        <label className={styles.figure} htmlFor={checkboxId}>
+          {isChecked ? '╳' : '\u00A0'}
+        </label>
+      </div>
+      <div className={styles.right}>&nbsp;&nbsp;{children}</div>
+    </div>
+  );
+};
+
+export default Checkbox;
+
+================
+File: reference/components/Chessboard.module.scss
+================
+.board {
+  display: inline-table;
+  border-collapse: collapse;
+}
+
+.corner {
+  width: 1ch;
+  height: calc(var(--theme-line-height-base) * 1rem);
+}
+
+.cell {
+  width: 1ch;
+  height: calc(var(--theme-line-height-base) * 1rem);
+  background-color: var(--theme-border-subdued);
+  text-align: center;
+  vertical-align: middle;
+}
+
+.square {
+  height: calc(var(--theme-line-height-base) * 2rem);
+  text-align: center;
+  vertical-align: middle;
+  width: 3ch;
+}
+
+.dark {
+  background-color: var(--theme-focused-foreground);
+}
+
+.light {
+  background-color: var(--theme-focused-foreground-subdued);
+}
+
+.symbol {
+  font-size: 40px;
+  line-height: calc(var(--theme-line-height-base) * 2rem);
+}
+
+================
+File: reference/components/Chessboard.tsx
+================
+'use client';
+
+import styles from '@components/Chessboard.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+const FILE = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];
+const RANK = [8, 7, 6, 5, 4, 3, 2, 1];
+
+const getPieceSymbol = (piece: string) => {
+  const mapping: Record<string, string> = {
+    K: '♔',
+    Q: '♕',
+    R: '♖',
+    B: '♗',
+    N: '♘',
+    P: '♙',
+    k: '♚',
+    q: '♛',
+    r: '♜',
+    b: '♝',
+    n: '♞',
+    p: '♟',
+  };
+  return mapping[piece] || '';
+};
+
+interface ChessboardProps {
+  board: string[][];
+}
+
+const Chessboard: React.FC<ChessboardProps> = ({ board }) => {
+  return (
+    <table className={styles.board}>
+      <tbody>
+        <tr>
+          <td className={styles.corner}></td>
+          {FILE.map((file) => (
+            <td key={file} className={styles.cell}>
+              {file}
+            </td>
+          ))}
+        </tr>
+        {RANK.map((rank, rowIndex) => (
+          <tr key={rank}>
+            <td className={styles.cell}>{rank}</td>
+            {FILE.map((_, colIndex) => {
+              const isDark = (rowIndex + colIndex) % 2 === 0;
+              const squareClass = isDark ? styles.dark : styles.light;
+              return (
+                <td key={colIndex} className={Utilities.classNames(styles.square, squareClass)}>
+                  <span className={styles.symbol}>{getPieceSymbol(board[rowIndex][colIndex])}</span>
+                </td>
+              );
+            })}
+          </tr>
+        ))}
+      </tbody>
+    </table>
+  );
+};
+
+export default Chessboard;
+
+================
+File: reference/components/CodeBlock.module.scss
+================
+.root {
+  display: block;
+  font-weight: 400;
+  overflow: auto;
+  font-family: inherit;
+  background: var(--theme-border-subdued);
+
+  &::-webkit-scrollbar {
+    display: none;
+  }
+
+  scrollbar-width: none;
+}
+
+.line {
+  display: flex;
+  justify-content: space-between;
+  align-items: flex-start;
+}
+
+.number {
+  display: inline-flex;
+  width: 3ch;
+  text-align: right;
+  padding-right: 1ch;
+  user-select: none;
+  background: var(--theme-background);
+  opacity: 0.5;
+}
+
+.content {
+  min-width: 10%;
+  width: 100%;
+  white-space: pre;
+  background: var(--theme-border-subdued);
+  padding-left: 2ch;
+}
+
+================
+File: reference/components/CodeBlock.tsx
+================
+'use client';
+
+import styles from '@components/CodeBlock.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface CodeBlockProps extends React.HTMLAttributes<HTMLPreElement> {
+  children?: React.ReactNode;
+}
+
+const CodeBlock = React.forwardRef<HTMLPreElement, CodeBlockProps>(({ children, ...rest }, ref) => {
+  return (
+    <pre className={styles.root} ref={ref} {...rest}>
+      {String(children)
+        .split('\n')
+        .map((line, index) => (
+          <div key={index} className={styles.line}>
+            <span className={styles.number}>{Utilities.leftPad(String(index + 1), 3)}</span>
+            <span className={styles.content}>{line}</span>
+          </div>
+        ))}
+    </pre>
+  );
+});
+
+CodeBlock.displayName = 'CodeBlock';
+
+export default CodeBlock;
+
+================
+File: reference/components/ComboBox.module.scss
+================
+.root {
+  padding: 0;
+}
+
+================
+File: reference/components/ComboBox.tsx
+================
+'use client';
+
+import styles from '@components/ComboBox.module.scss';
+
+import * as React from 'react';
+
+import AlertBanner from '@components/AlertBanner';
+import ButtonGroup from '@components/ButtonGroup';
+import CardDouble from '@components/CardDouble';
+import Input from '@components/Input';
+
+interface ComboBoxProps {
+  data: string[][];
+  label?: string;
+}
+
+function ComboBox({ data, label }: ComboBoxProps) {
+  const [searchTerm, setSearchTerm] = React.useState('');
+
+  const filtered = React.useMemo(() => {
+    const sliced = data.slice(1);
+    if (!searchTerm) return [];
+    return sliced.filter((entry) => entry[0].toLowerCase().includes(searchTerm.toLowerCase()));
+  }, [data, searchTerm]);
+
+  const displayed = React.useMemo(() => {
+    const sliced = data.slice(1);
+    if (filtered.length >= 5) return filtered.slice(0, 5);
+    if (filtered.length === 0 && searchTerm) return sliced.slice(0, 5);
+    if (filtered.length > 0 && filtered.length < 5) {
+      const needed = 5 - filtered.length;
+      const remainder = sliced.filter((entry) => !filtered.includes(entry));
+      return [...filtered, ...remainder.slice(0, needed)];
+    }
+    return sliced.slice(0, 5);
+  }, [filtered, data, searchTerm]);
+
+  const handleChange = React.useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
+    setSearchTerm(e.target.value);
+  }, []);
+
+  return (
+    <>
+      <div className={styles.root}>
+        <Input autoComplete="off" isBlink label={label} name="input_test_blink" value={searchTerm} onChange={handleChange} />
+      </div>
+      {displayed.map((entry) => (
+        <CardDouble key={entry[0]} title={entry[0]}>
+          <AlertBanner>{entry[1]}</AlertBanner>
+          <br />
+          <ButtonGroup isFull items={[{ body: 'FAVORITE' }, { body: 'DONATE' }, { body: 'LEARN MORE' }]} />
+        </CardDouble>
+      ))}
+    </>
+  );
+}
+
+export default ComboBox;
+
+================
+File: reference/components/ContentFluid.module.scss
+================
+.root {
+  display: block;
+  min-width: 10%;
+  width: 100%;
+  align-self: stretch;
+}
+
+================
+File: reference/components/ContentFluid.tsx
+================
+import styles from '@components/ContentFluid.module.scss';
+
+import * as React from 'react';
+
+interface ContentFluidProps extends React.HTMLAttributes<HTMLSpanElement> {
+  children?: React.ReactNode;
+}
+
+const ContentFluid: React.FC<ContentFluidProps> = ({ children, ...rest }) => {
+  return <div className={styles.root}>{children}</div>;
+};
+
+export default ContentFluid;
+
+================
+File: reference/components/DataTable.module.scss
+================
+.root {
+  position: relative;
+  width: 100%;
+  border-spacing: 0px;
+  max-width: 64ch;
+}
+
+.body {
+}
+
+.row {
+  transition: transform 0.5s ease;
+  border-spacing: 0px;
+
+  &:first-child {
+    font-weight: 400;
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    outline: 0;
+  }
+}
+
+.column {
+  border: 0;
+  outline: 0;
+  padding-right: 1ch;
+  transition: background-color 0.5s ease;
+}
+
+.changed {
+  animation: flash 2000ms ease;
+}
+
+@keyframes flash {
+  0% {
+    background-color: var(--theme-focused-foreground-subdued);
+  }
+  100% {
+    background-color: transparent;
+  }
+}
+
+================
+File: reference/components/DataTable.tsx
+================
+'use client';
+
+import styles from '@components/DataTable.module.scss';
+
+import * as React from 'react';
+
+interface TableProps {
+  data: string[][];
+}
+
+interface RGBAColor {
+  r: number;
+  g: number;
+  b: number;
+  a: number;
+}
+
+const BASE_FOREGROUND_RGBA: RGBAColor = { r: 98, g: 98, b: 98, a: 0.5 };
+const BASE_BACKGROUND_RGBA: RGBAColor = { r: 168, g: 168, b: 168, a: 0.5 };
+const ALPHA = 0.45;
+
+function interpolateColor(color1: RGBAColor, color2: RGBAColor, factor: number): RGBAColor {
+  return {
+    r: Math.round(color1.r + factor * (color2.r - color1.r)),
+    g: Math.round(color1.g + factor * (color2.g - color1.g)),
+    b: Math.round(color1.b + factor * (color2.b - color1.b)),
+    a: color1.a + factor * (color2.a - color1.a),
+  };
+}
+
+const DataTable: React.FC<TableProps> = ({ data }) => {
+  const tableRef = React.useRef<HTMLTableElement>(null);
+  const prevDataRef = React.useRef<string[][]>(data);
+
+  React.useEffect(() => {
+    const rows = tableRef.current?.querySelectorAll<HTMLTableRowElement>('tr') || [];
+    for (let i = 1; i < data.length; i++) {
+      const cells = rows[i]?.querySelectorAll<HTMLTableCellElement>('td');
+      if (!cells) continue;
+      for (let j = 0; j < data[i].length; j++) {
+        const cell = cells[j];
+        const changed = prevDataRef.current[i]?.[j] !== data[i][j];
+        if (cell && changed) {
+          cell.classList.remove(styles.changed);
+          void cell.offsetWidth;
+          cell.classList.add(styles.changed);
+        }
+      }
+    }
+    prevDataRef.current = data;
+  }, [data]);
+
+  const handleKeyDown = (event: React.KeyboardEvent<HTMLTableElement>) => {
+    const activeElement = document.activeElement;
+    if (!activeElement) return;
+    switch (event.key) {
+      case 'Enter':
+        event.preventDefault();
+        if (activeElement instanceof HTMLTableCellElement) {
+          activeElement.click();
+        }
+        break;
+      case 'ArrowUp':
+      case 'ArrowDown':
+      case 'ArrowLeft':
+      case 'ArrowRight':
+        event.preventDefault();
+        if (!(activeElement instanceof HTMLTableCellElement)) return;
+        const direction = event.key === 'ArrowUp' || event.key === 'ArrowLeft' ? 'previous' : 'next';
+        const allCells = Array.from(tableRef.current?.querySelectorAll<HTMLTableCellElement>('td') || []);
+        const currentIndex = allCells.indexOf(activeElement);
+        if (currentIndex === -1) return;
+        let nextIndex = direction === 'next' ? currentIndex + 1 : currentIndex - 1;
+        if (direction === 'previous') {
+          if (nextIndex < 0) nextIndex = allCells.length - 1;
+        } else {
+          if (nextIndex >= allCells.length) nextIndex = 0;
+        }
+        allCells[nextIndex].focus();
+        break;
+    }
+  };
+
+  const targetColorHeader: RGBAColor = { r: 255, g: 255, b: 255, a: ALPHA };
+  const targetColorData: RGBAColor = { r: 255, g: 255, b: 255, a: ALPHA };
+
+  return (
+    <table className={styles.root} ref={tableRef} onKeyDown={handleKeyDown}>
+      <tbody className={styles.body}>
+        {data.map((row, rowIndex) => (
+          <tr key={rowIndex} className={styles.row} tabIndex={0} onClick={() => alert('testing')}>
+            {row.map((cellContent, colIndex) => {
+              let backgroundColor: string;
+              if (rowIndex === 0) {
+                const lightnessFactor = row.length > 1 ? colIndex / (row.length - 1) : 0;
+                const newColor = interpolateColor(BASE_FOREGROUND_RGBA, targetColorHeader, lightnessFactor);
+                backgroundColor = `rgba(${newColor.r}, ${newColor.g}, ${newColor.b}, ${newColor.a.toFixed(2)})`;
+              } else {
+                const numRows = data.length - 1;
+                const maxIndexSum = numRows - 1 + (row.length - 1) || 1;
+                const indexSum = rowIndex - 1 + colIndex;
+                const lightnessFactor = indexSum / maxIndexSum;
+                const newColor = interpolateColor(BASE_BACKGROUND_RGBA, targetColorData, lightnessFactor);
+                backgroundColor = `rgba(${newColor.r}, ${newColor.g}, ${newColor.b}, ${newColor.a.toFixed(2)})`;
+              }
+              return (
+                <td key={colIndex} className={styles.column} style={{ backgroundColor }}>
+                  {cellContent}
+                </td>
+              );
+            })}
+          </tr>
+        ))}
+      </tbody>
+    </table>
+  );
+};
+
+export default DataTable;
+
+================
+File: reference/components/DatePicker.module.scss
+================
+.root {
+  display: inline-block;
+  user-select: none;
+}
+
+.controls {
+  align-items: center;
+  background: var(--theme-border);
+  display: flex;
+  justify-content: space-between;
+}
+
+.button {
+  align-self: stretch;
+  background: none;
+  border: none;
+  color: var(--theme-text);
+  cursor: pointer;
+  display: inline-block;
+  line-height: calc(var(--theme-line-height-base) * 1em);
+  margin: 0;
+  outline: 0;
+  padding: 0 1ch 0 1ch;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    outline: 0;
+  }
+}
+
+.date {
+  min-width: 10%;
+  padding: 0 1ch 0 1ch;
+  text-align: left;
+  width: 100%;
+}
+
+.header {
+  background: var(--theme-border);
+  display: grid;
+  grid-template-columns: repeat(7, 1fr);
+  text-align: center;
+}
+
+.days {
+  background: var(--theme-border-subdued);
+  display: grid;
+  grid-template-columns: repeat(7, 1fr);
+  grid-template-rows: repeat(6, min-content);
+  align-items: start;
+  min-height: calc(var(--theme-line-height-base) * 6em);
+}
+
+.cell {
+  outline: none;
+  padding: 0 1ch 0 1ch;
+  text-align: center;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/DatePicker.tsx
+================
+'use client';
+
+import styles from '@components/DatePicker.module.scss';
+
+import * as React from 'react';
+
+interface DatePickerProps {
+  year?: number;
+  month?: number;
+}
+
+const WEEKDAYS = ['SU', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA'];
+
+const MONTH_NAMES = [
+  'January', 'February', 'March', 'April', 'May', 'June',
+  'July', 'August', 'September', 'October', 'November', 'December'
+];
+
+const MAX_CELLS = 42;
+
+const DatePicker: React.FC<DatePickerProps> = ({ year, month }) => {
+  const today = new Date();
+  const [currentYear, setYear] = React.useState(year || today.getFullYear());
+  const [currentMonth, setMonth] = React.useState(month || today.getMonth() + 1);
+
+  const first = new Date(currentYear, currentMonth - 1, 1);
+  const startingWeekday = first.getDay();
+  const daysInMonth = new Date(currentYear, currentMonth, 0).getDate();
+
+  const cells: React.ReactNode[] = [];
+
+  for (let i = 0; i < startingWeekday; i++) {
+    cells.push(<div key={`empty-start-${i}`} className={styles.dayCell} />);
+  }
+
+  for (let day = 1; day <= daysInMonth; day++) {
+    const presentationDay = String(day).padStart(2, '0');
+    cells.push(
+      <div
+        key={day}
+        className={styles.cell}
+        tabIndex={0}
+        aria-label={`${currentYear}-${String(currentMonth).padStart(2, '0')}-${presentationDay}`}
+      >
+        {presentationDay}
+      </div>
+    );
+  }
+
+  while (cells.length < MAX_CELLS) {
+    cells.push(<div key={`empty-end-${cells.length}`} className={styles.dayCell} />);
+  }
+
+  const onSwitchPreviousMonth = () => {
+    let newMonth = currentMonth - 1;
+    let newYear = currentYear;
+    if (newMonth < 1) {
+      newMonth = 12;
+      newYear--;
+    }
+    setMonth(newMonth);
+    setYear(newYear);
+  };
+
+  const onSwitchNextMonth = () => {
+    let newMonth = currentMonth + 1;
+    let newYear = currentYear;
+    if (newMonth > 12) {
+      newMonth = 1;
+      newYear++;
+    }
+    setMonth(newMonth);
+    setYear(newYear);
+  };
+
+  return (
+    <div className={styles.root}>
+      <div className={styles.controls}>
+        <button type="button" className={styles.button} onClick={onSwitchPreviousMonth} aria-label="Previous month">
+          ▲
+        </button>
+        <div className={styles.date}>
+          {currentYear} {MONTH_NAMES[currentMonth - 1].toUpperCase()}
+        </div>
+        <button type="button" className={styles.button} onClick={onSwitchNextMonth} aria-label="Next month">
+          ▼
+        </button>
+      </div>
+      <div className={styles.header}>
+        {WEEKDAYS.map((day) => (
+          <div key={day} className={styles.cell}>
+            {day}
+          </div>
+        ))}
+      </div>
+      <div className={styles.days}>{cells}</div>
+    </div>
+  );
+};
+
+export default DatePicker;
+
+================
+File: reference/components/DebugGrid.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+const DebugGrid: React.FC = () => {
+  React.useEffect(() => {
+    const debugGrid = document.createElement('div');
+    let isVisible = false;
+
+    const setGridHeight = () => {
+      debugGrid.style.height = `${document.documentElement.scrollHeight}px`;
+    };
+
+    Object.assign(debugGrid.style, {
+      position: 'absolute',
+      top: '0',
+      left: '0',
+      right: '0',
+      zIndex: '-1',
+      margin: '0',
+      backgroundImage: `
+        repeating-linear-gradient(var(--theme-border) 0 1px, transparent 1px 100%),
+        repeating-linear-gradient(90deg, var(--theme-border) 0 1px, transparent 1px 100%)
+      `,
+      backgroundSize: '1ch 1.25rem',
+      pointerEvents: 'none',
+      display: 'none',
+    });
+
+    document.body.appendChild(debugGrid);
+    setGridHeight();
+
+    const toggleDebugGrid = () => {
+      isVisible = !isVisible;
+      debugGrid.style.display = isVisible ? 'block' : 'none';
+    };
+
+    const handleDebugGridToggle = () => toggleDebugGrid();
+
+    const observer = new ResizeObserver(() => {
+      setGridHeight();
+    });
+    observer.observe(document.documentElement);
+
+    window.addEventListener('debugGridToggle', handleDebugGridToggle);
+    window.addEventListener('resize', setGridHeight);
+
+    return () => {
+      document.body.removeChild(debugGrid);
+      window.removeEventListener('resize', setGridHeight);
+      window.removeEventListener('debugGridToggle', handleDebugGridToggle);
+      observer.disconnect();
+    };
+  }, []);
+
+  return null;
+};
+
+export const toggleDebugGrid = (): void => {
+  window.dispatchEvent(new CustomEvent('debugGridToggle'));
+};
+
+export default DebugGrid;
+
+================
+File: reference/components/DefaultMetaTags.tsx
+================
+export default function DefaultMetaTags() {
+  return (
+    <>
+      <meta httpEquiv="content-language" content="en-us" />
+      <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0" />
+      <link rel="icon" type="image/png" sizes="32x32" href="/favicon-16x16.png" />
+      <link rel="icon" type="image/png" sizes="16x16" href="/favicon-32x32.png" />
+      <link rel="shortcut icon" href="/favicon.ico" />
+    </>
+  );
+}
+
+================
+File: reference/components/Dialog.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border);
+  box-shadow: 1ch 1ch 0 0 var(--theme-border-subdued);
+  font-weight: 400;
+  max-width: 56ch;
+  min-width: 24ch;
+  margin: 0;
+  padding: 0;
+}
+
+.header {
+  background: var(--theme-text);
+  color: var(--theme-background);
+  text-align: center;
+  margin: 0;
+  padding: 0;
+  display: block;
+}
+
+.message {
+  display: block;
+  margin: 0;
+  text-align: center;
+  padding: 0 2ch 0 2ch;
+}
+
+.actions {
+  display: flex;
+  justify-content: space-between;
+  align-items: center;
+  max-width: 24ch;
+  margin: 0 auto 0 auto;
+  padding: 0 2ch 0 2ch;
+}
+
+================
+File: reference/components/Dialog.tsx
+================
+import styles from '@components/Dialog.module.scss';
+
+import * as React from 'react';
+
+import Block from '@components/Block';
+import Button from '@components/Button';
+
+interface DialogProps {
+  title?: React.ReactNode;
+  children?: React.ReactNode;
+  style?: React.CSSProperties;
+  onConfirm?: () => void;
+  onCancel?: () => void;
+}
+
+const Dialog: React.FC<DialogProps> = ({ title, children, style, onConfirm, onCancel }) => {
+  const titleId = React.useId();
+  const descId = React.useId();
+
+  return (
+    <div className={styles.root} style={style} role="dialog" aria-modal="true" aria-labelledby={titleId} aria-describedby={descId}>
+      <header className={styles.header}>{title}</header>
+      <br />
+      <article className={styles.message} id={descId}>
+        {children}
+      </article>
+      <br />
+      <div className={styles.actions}>
+        <Button theme="SECONDARY" onClick={onConfirm}>
+          OK
+        </Button>
+        <Block style={{ opacity: 0 }} />
+        <Button theme="SECONDARY" onClick={onCancel}>
+          Cancel
+        </Button>
+      </div>
+      <br />
+    </div>
+  );
+};
+
+export default Dialog;
+
+================
+File: reference/components/Divider.module.scss
+================
+.gradient {
+  background: linear-gradient(to right, transparent, var(--theme-border), transparent);
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  width: 100%;
+}
+
+.divider {
+  align-items: center;
+  border: 0;
+  display: flex;
+  flex-direction: column;
+  flex-shrink: 0;
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  justify-content: center;
+  outline: 0;
+  width: 100%;
+}
+
+.line {
+  background: var(--theme-text);
+  display: block;
+  flex-shrink: 0;
+  height: 2px;
+  width: 100%;
+}
+
+================
+File: reference/components/Divider.tsx
+================
+import styles from '@components/Divider.module.scss';
+
+import * as React from 'react';
+
+interface DividerProps extends React.HTMLAttributes<HTMLSpanElement> {
+  children?: React.ReactNode;
+  type?: string | any;
+  style?: any;
+}
+
+const Divider: React.FC<DividerProps> = ({ children, style, type }) => {
+  if (type === 'GRADIENT') {
+    return <div className={styles.gradient} style={style} />;
+  }
+
+  if (type === 'DOUBLE') {
+    return (
+      <div className={styles.divider} style={style}>
+        <div className={styles.line} style={{ marginBottom: `2px` }} />
+        <div className={styles.line} />
+      </div>
+    );
+  }
+
+  return (
+    <div className={styles.divider} style={style}>
+      <div className={styles.line} />
+    </div>
+  );
+};
+
+export default Divider;
+
+================
+File: reference/components/Drawer.module.scss
+================
+@keyframes fadeInLeft {
+  from {
+    opacity: 0;
+  }
+  to {
+    opacity: 1;
+  }
+}
+
+.root {
+  align-self: stretch;
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+}
+
+.side {
+  animation: fadeInLeft 0.2s ease-out;
+  min-width: 10%;
+  width: 100%;
+  align-self: stretch;
+  min-width: 22ch;
+}
+
+.right {
+  flex-shrink: 0;
+  align-self: stretch;
+  background: var(--theme-background-input);
+  display: flex;
+  align-items: center;
+  width: 3ch;
+}
+
+.action {
+  display: inline-flex;
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  font-size: var(--font-size);
+  user-select: none;
+  cursor: pointer;
+  color: var(--theme-text);
+  background: var(--theme-button-foreground);
+  flex-shrink: 0;
+  align-items: center;
+  justify-content: center;
+  border: 0;
+  outline: 0;
+  margin: 0;
+  padding: 0;
+  width: 100%;
+
+  &:focus {
+    border: 0;
+    outline: 0;
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/Drawer.tsx
+================
+'use client';
+
+import styles from '@components/Drawer.module.scss';
+
+import * as React from 'react';
+
+interface DrawerProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'defaultValue'> {
+  children?: React.ReactNode;
+  defaultValue?: boolean;
+}
+
+const Drawer: React.FC<DrawerProps> = ({ children, defaultValue = false, ...rest }) => {
+  const [expand, setExpand] = React.useState<boolean>(defaultValue);
+
+  return (
+    <div className={styles.root} {...rest}>
+      {expand ? <div className={styles.side}>{children}</div> : null}
+      <div className={styles.right}>
+        <button className={styles.action} onClick={() => setExpand(!expand)}>
+          {expand ? '⭠' : '⭢'}
+        </button>
+      </div>
+    </div>
+  );
+};
+
+export default Drawer;
+
+================
+File: reference/components/DropdownMenu.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border);
+  font-weight: 400;
+}
+
+.footer {
+  background: var(--theme-background-modal-footer);
+  padding: calc(var(--font-size) * 0.5 * var(--theme-line-height-base)) 1ch calc(var(--font-size) * 0.5 * var(--theme-line-height-base)) 1ch;
+}
+
+================
+File: reference/components/DropdownMenu.tsx
+================
+import styles from '@components/DropdownMenu.module.scss';
+
+import * as React from 'react';
+
+import ActionButton from '@components/ActionButton';
+import ActionListItem from '@components/ActionListItem';
+import ModalTrigger from '@components/ModalTrigger';
+
+import { useHotkeys } from '@modules/hotkeys';
+
+interface DropdownMenuItemProps {
+  children: React.ReactNode;
+  icon?: React.ReactNode;
+  href?: string;
+  target?: string;
+  onClick?: () => void;
+  modal?: any;
+  modalProps?: Record<string, unknown>;
+}
+
+interface DropdownMenuProps extends React.HTMLAttributes<HTMLDivElement> {
+  onClose?: (event?: MouseEvent | TouchEvent | KeyboardEvent) => void;
+  items?: DropdownMenuItemProps[];
+}
+
+const DropdownMenu = React.forwardRef<HTMLDivElement, DropdownMenuProps>((props, ref) => {
+  const { onClose, items, style, ...rest } = props;
+
+  const handleHotkey = () => {
+    if (onClose) onClose();
+  };
+
+  useHotkeys('space', handleHotkey);
+
+  return (
+    <div ref={ref} className={styles.root} style={style} {...rest}>
+      {items &&
+        items.map((each, index) => {
+          if (each.modal) {
+            return (
+              <ModalTrigger key={`action-items-${index}`} modal={each.modal} modalProps={each.modalProps}>
+                <ActionListItem children={each.children} icon={each.icon} />
+              </ModalTrigger>
+            );
+          }
+
+          return (
+            <ActionListItem
+              key={`action-items-${index}`}
+              children={each.children}
+              icon={each.icon}
+              href={each.href}
+              target={each.target}
+              onClick={() => {
+                if (each.onClick) {
+                  each.onClick();
+                }
+
+                if (onClose) {
+                  onClose();
+                }
+              }}
+            />
+          );
+        })}
+
+      <footer className={styles.footer}>
+        Press space to{' '}
+        <ActionButton
+          hotkey="␣"
+          onClick={() => {
+            if (onClose) onClose();
+          }}
+        >
+          Close
+        </ActionButton>
+      </footer>
+    </div>
+  );
+});
+
+DropdownMenu.displayName = 'DropdownMenu';
+
+export default DropdownMenu;
+
+================
+File: reference/components/DropdownMenuTrigger.module.scss
+================
+.root {
+  display: inline-block;
+  position: relative;
+}
+
+================
+File: reference/components/DropdownMenuTrigger.tsx
+================
+'use client';
+
+import styles from '@components/DropdownMenuTrigger.module.scss';
+
+import * as Position from '@common/position';
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import DropdownMenu from '@components/DropdownMenu';
+import OutsideElementEvent from '@components/detectors/OutsideElementEvent';
+
+import { createPortal } from 'react-dom';
+import { useHotkeys } from '@modules/hotkeys';
+
+interface DropdownMenuTriggerProps {
+  children: React.ReactElement<React.HTMLAttributes<HTMLElement>>;
+  items: any;
+  hotkey?: string;
+}
+
+function DropdownMenuTrigger({ children, items, hotkey }: DropdownMenuTriggerProps) {
+  const [open, setOpen] = React.useState(false);
+  const [focusChildren, setFocusChildren] = React.useState(false);
+  const [willClose, setWillClose] = React.useState(false);
+  const [placement, setPlacement] = React.useState<Position.Placement>('bottom');
+  const [position, setPosition] = React.useState<{ top: number; left: number }>({ top: 0, left: 0 });
+
+  const triggerRef = React.useRef<HTMLElement>(null);
+  const elementRef = React.useRef<HTMLDivElement>(null);
+
+  const onClick = React.useCallback((event: React.MouseEvent) => {
+    event.preventDefault();
+    setOpen(true);
+  }, []);
+
+  const onOutsideEvent = React.useCallback(() => setOpen(false), []);
+  const onClose = React.useCallback(() => setWillClose(true), []);
+
+  if (hotkey) {
+    useHotkeys(hotkey, () => {
+      setOpen(!open);
+    });
+  }
+
+  React.useEffect(() => {
+    if (focusChildren) {
+      const element = elementRef.current;
+      if (element) {
+        const firstFocusable = Utilities.findFocusableDescendant(element);
+        if (firstFocusable) {
+          firstFocusable.focus();
+        } else {
+          element.focus();
+        }
+      }
+      setFocusChildren(false);
+    }
+  }, [focusChildren]);
+
+  React.useEffect(() => {
+    if (willClose) {
+      setOpen(false);
+      setWillClose(false);
+    }
+  }, [willClose]);
+
+  React.useEffect(() => {
+    if (!open || !triggerRef.current || !elementRef.current) return;
+
+    const updatePosition = () => {
+      const { placement, position } = Position.calculate(triggerRef.current!, elementRef.current!);
+      setPlacement(placement);
+      setPosition(position);
+    };
+
+    updatePosition();
+    setFocusChildren(true);
+
+    const handleResizeOrScroll = () => updatePosition();
+    const observer = new MutationObserver(() => updatePosition());
+    observer.observe(document.body, { attributes: true, childList: true, subtree: true });
+
+    window.addEventListener('resize', handleResizeOrScroll);
+    window.addEventListener('scroll', handleResizeOrScroll, true);
+
+    return () => {
+      window.removeEventListener('resize', handleResizeOrScroll);
+      window.removeEventListener('scroll', handleResizeOrScroll, true);
+      observer.disconnect();
+    };
+  }, [open]);
+
+  const element = open
+    ? createPortal(
+        <OutsideElementEvent onOutsideEvent={onOutsideEvent}>
+          <DropdownMenu
+            onClose={onClose}
+            ref={elementRef}
+            items={items}
+            style={{
+              position: 'absolute',
+              top: `${position.top}px`,
+              left: `${position.left}px`,
+              zIndex: `var(--z-index-page-dropdown-menus)`,
+            }}
+            role="dialog"
+            aria-modal="true"
+          />
+        </OutsideElementEvent>,
+        document.body
+      )
+    : null;
+
+  return (
+    <div className={styles.root}>
+      {React.cloneElement(children, {
+        tabIndex: 0,
+        onClick,
+        // @ts-ignore
+        ref: triggerRef,
+      })}
+      {element}
+    </div>
+  );
+}
+
+export default DropdownMenuTrigger;
+
+================
+File: reference/components/Grid.module.scss
+================
+.grid {
+  display: block;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+}
+
+================
+File: reference/components/Grid.tsx
+================
+import styles from '@components/Grid.module.scss';
+
+import * as React from 'react';
+
+interface GridProps extends React.HTMLAttributes<HTMLDivElement> {
+  children?: React.ReactNode;
+}
+
+const Grid: React.FC<GridProps> = ({ children, ...rest }) => {
+  return (
+    <div className={styles.grid} {...rest}>
+      {children}
+    </div>
+  );
+};
+
+export default Grid;
+
+================
+File: reference/components/HoverComponentTrigger.module.scss
+================
+.root {
+  display: inline-block;
+  position: relative;
+}
+
+================
+File: reference/components/HoverComponentTrigger.tsx
+================
+'use client';
+
+import styles from '@components/HoverComponentTrigger.module.scss';
+
+import * as React from 'react';
+import * as Position from '@common/position';
+
+import OutsideElementEvent from '@components/detectors/OutsideElementEvent';
+import Popover from '@components/Popover';
+import Tooltip from '@components/Tooltip';
+
+import { createPortal } from 'react-dom';
+
+interface HoverComponentTriggerProps {
+  children: React.ReactElement<React.HTMLAttributes<HTMLElement>>;
+  text: string;
+  component: 'popover' | 'tooltip';
+}
+
+function HoverComponentTrigger({ children, text, component }: HoverComponentTriggerProps) {
+  const [open, setOpen] = React.useState(false);
+  const [placement, setPlacement] = React.useState<Position.Placement>('bottom');
+  const [position, setPosition] = React.useState<{ top: number; left: number }>({ top: 0, left: 0 });
+
+  const triggerRef = React.useRef<HTMLDivElement>(null);
+  const popoverRef = React.useRef<HTMLDivElement>(null);
+
+  const onMouseEnter = () => setOpen(true);
+  const onClick = () => setOpen(true);
+  const onHandleFocus = () => setOpen(true);
+  const onOutsideEvent = () => setOpen(false);
+
+  React.useEffect(() => {
+    if (!open || !triggerRef.current || !popoverRef.current) return;
+
+    const updatePosition = () => {
+      const { placement, position } = Position.calculate(triggerRef.current!, popoverRef.current!);
+      setPlacement(placement);
+      setPosition(position);
+    };
+
+    updatePosition();
+
+    const handleResizeOrScroll = () => updatePosition();
+
+    const mutationObserver = new MutationObserver(() => updatePosition());
+    mutationObserver.observe(document.body, { attributes: true, childList: true, subtree: true });
+
+    window.addEventListener('resize', handleResizeOrScroll);
+    window.addEventListener('scroll', handleResizeOrScroll, true);
+
+    return () => {
+      window.removeEventListener('resize', handleResizeOrScroll);
+      window.removeEventListener('scroll', handleResizeOrScroll, true);
+      mutationObserver.disconnect();
+    };
+  }, [open]);
+
+  const renderComponent = () => {
+    if (component === 'popover') {
+      return (
+        <Popover
+          ref={popoverRef}
+          style={{
+            position: 'absolute',
+            top: `${position.top}px`,
+            left: `${position.left}px`,
+            zIndex: `var(--z-index-page-popover)`,
+          }}
+          role="dialog"
+          aria-modal="true"
+        >
+          {text}
+        </Popover>
+      );
+    } else if (component === 'tooltip') {
+      return (
+        <Tooltip
+          ref={popoverRef}
+          style={{
+            position: 'absolute',
+            top: `${position.top}px`,
+            left: `${position.left}px`,
+            zIndex: `var(--z-index-page-tooltip)`,
+          }}
+        >
+          {text}
+        </Tooltip>
+      );
+    }
+    return null;
+  };
+
+  const popoverElement = open ? createPortal(<OutsideElementEvent onOutsideEvent={onOutsideEvent}>{renderComponent()}</OutsideElementEvent>, document.body) : null;
+
+  return (
+    <div ref={triggerRef} className={styles.root} data-detector-ignore onMouseEnter={onMouseEnter} onClick={onClick} onFocus={onHandleFocus}>
+      {React.cloneElement(children, {
+        tabIndex: 0,
+      })}
+      {popoverElement}
+    </div>
+  );
+}
+
+export default HoverComponentTrigger;
+
+================
+File: reference/components/Indent.module.scss
+================
+.root {
+  display: block;
+  padding: 0 0 0 1ch;
+}
+
+================
+File: reference/components/Indent.tsx
+================
+import styles from '@components/Indent.module.scss';
+
+import * as React from 'react';
+
+interface IndentProps extends React.HTMLAttributes<HTMLDivElement> {
+  children?: React.ReactNode;
+}
+
+const Indent: React.FC<IndentProps> = ({ children, ...rest }) => {
+  return (
+    <div className={styles.root} {...rest}>
+      {children}
+    </div>
+  );
+};
+
+export default Indent;
+
+================
+File: reference/components/Input.module.scss
+================
+.root {
+  position: relative;
+  display: block;
+}
+
+.label {
+  background: var(--theme-border);
+  display: block;
+}
+
+.placeholder {
+  font-style: italic;
+  color: var(--theme-overlay);
+}
+
+.displayed {
+  overflow: hidden;
+  white-space: nowrap;
+  pointer-events: none;
+  overflow-wrap: anywhere;
+  background: var(--theme-background-input);
+  box-shadow: inset 0 0 0 2px var(--theme-border);
+}
+
+.focused {
+  .block {
+    background: var(--theme-focused-foreground);
+  }
+
+  .placeholder {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+@keyframes blink {
+  50% {
+    opacity: 0;
+  }
+}
+
+.blink {
+  animation: blink 1s step-start 0s infinite;
+}
+
+.block {
+  display: inline-block;
+  min-width: 1ch;
+  background: var(--theme-text);
+  color: var(--theme-background);
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  vertical-align: bottom;
+}
+
+.inputContainer {
+  position: relative;
+  display: block;
+}
+
+.hidden {
+  position: absolute;
+  top: 0;
+  left: 0;
+  width: 100%;
+  color: transparent;
+  background: transparent;
+  caret-color: transparent;
+  border: none;
+  outline: none;
+  overflow: hidden;
+  padding: 0;
+  margin: 0;
+  line-height: var(--theme-line-height-base);
+  font-size: var(--font-size);
+  font-family: inherit;
+
+  &:-webkit-autofill {
+    -webkit-box-shadow: 0 0 0px 1000px var(--theme-focused-foreground) inset;
+  }
+}
+
+================
+File: reference/components/Input.tsx
+================
+'use client';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import styles from '@components/Input.module.scss';
+
+type InputProps = React.InputHTMLAttributes<HTMLInputElement> & {
+  caretChars?: string | any;
+  label?: string | any;
+  isBlink?: boolean;
+};
+
+function Input({ caretChars, isBlink = true, label, placeholder, onChange, type, id, ...rest }: InputProps) {
+  const generatedId = React.useId();
+  const inputId = id || generatedId;
+
+  const inputRef = React.useRef<HTMLInputElement | null>(null);
+  const [text, setText] = React.useState<string>(rest.defaultValue?.toString() || rest.value?.toString() || '');
+  const [isFocused, setIsFocused] = React.useState<boolean>(false);
+  const [selectionStart, setSelectionStart] = React.useState<number>(text.length);
+
+  const lastFocusDirectionRef = React.useRef<'up' | 'down' | null>(null);
+
+  React.useEffect(() => {
+    if (rest.value !== undefined) {
+      const val = rest.value.toString();
+      setText(val);
+      setSelectionStart(val.length);
+    }
+  }, [rest.value]);
+
+  const onHandleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
+    const value = e.target.value;
+    setText(value);
+    if (onChange) {
+      onChange(e);
+    }
+    setSelectionStart(e.target.selectionStart ?? value.length);
+  };
+
+  const onHandleFocus = () => {
+    setIsFocused(true);
+    if (!inputRef.current) return;
+
+    if (lastFocusDirectionRef.current === 'down') {
+      setSelectionStart(text.length);
+      inputRef.current.setSelectionRange(text.length, text.length);
+    } else if (lastFocusDirectionRef.current === 'up') {
+      setSelectionStart(0);
+      inputRef.current.setSelectionRange(0, 0);
+    }
+  };
+
+  const onHandleBlur = () => {
+    setIsFocused(false);
+  };
+
+  const onHandleSelect = (e: React.SyntheticEvent<HTMLInputElement>) => {
+    const inputEl = e.currentTarget as HTMLInputElement;
+    setSelectionStart(inputEl.selectionStart ?? text.length);
+  };
+
+  const onHandleClick = (e: React.MouseEvent<HTMLInputElement>) => {
+    const inputEl = e.currentTarget as HTMLInputElement;
+    inputEl.focus();
+    setSelectionStart(inputEl.selectionStart ?? text.length);
+  };
+
+  const onHandleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
+    if (e.key === 'ArrowUp') {
+      e.preventDefault();
+      lastFocusDirectionRef.current = 'up';
+      const previousFocusable = Utilities.findNextFocusable(document.activeElement, 'previous');
+      previousFocusable?.focus();
+    } else if (e.key === 'ArrowDown') {
+      e.preventDefault();
+      lastFocusDirectionRef.current = 'down';
+      const nextFocusable = Utilities.findNextFocusable(document.activeElement, 'next');
+      nextFocusable?.focus();
+    }
+  };
+
+  const isPlaceholderVisible = !text && placeholder;
+  const containerClasses = Utilities.classNames(styles.root, isFocused && styles.focused);
+
+  const maskText = (t: string) => (type === 'password' ? '•'.repeat(t.length) : t);
+
+  const beforeCaretText = isPlaceholderVisible ? placeholder ?? '' : maskText(text.substring(0, selectionStart));
+  const afterCaretText = isPlaceholderVisible ? '' : maskText(text.substring(selectionStart));
+
+  return (
+    <div className={containerClasses}>
+      {label && (
+        <label htmlFor={inputId} className={styles.label}>
+          {label}
+        </label>
+      )}
+      <div className={styles.inputContainer}>
+        <div className={Utilities.classNames(styles.displayed, isPlaceholderVisible && styles.placeholder)}>
+          {beforeCaretText}
+          {!isPlaceholderVisible && <span className={Utilities.classNames(styles.block, isBlink && styles.blink)}>{caretChars || ''}</span>}
+          {!isPlaceholderVisible && afterCaretText}
+        </div>
+        <input id={inputId} ref={inputRef} className={styles.hidden} value={text} aria-placeholder={placeholder} type={type} onFocus={onHandleFocus} onBlur={onHandleBlur} onChange={onHandleChange} onSelect={onHandleSelect} onClick={onHandleClick} onKeyDown={onHandleKeyDown} {...rest} />
+      </div>
+    </div>
+  );
+}
+
+export default Input;
+
+================
+File: reference/components/ListItem.module.scss
+================
+.root {
+  padding-left: 1ch;
+
+  &:focus {
+    outline: 0;
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/ListItem.tsx
+================
+'use client';
+
+import styles from '@components/ListItem.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+const ListItem = ({ children }) => {
+  const itemRef = React.useRef<HTMLLIElement>(null);
+
+  const handleKeyDown = (event: React.KeyboardEvent<HTMLLIElement>) => {
+    switch (event.key) {
+      case 'Enter':
+        event.preventDefault();
+        itemRef.current?.click();
+        break;
+      case 'ArrowUp':
+      case 'ArrowLeft': {
+        event.preventDefault();
+        const previousFocusable = Utilities.findNextFocusable(document.activeElement, 'previous');
+        previousFocusable?.focus();
+        break;
+      }
+      case 'ArrowDown':
+      case 'ArrowRight': {
+        event.preventDefault();
+        const nextFocusable = Utilities.findNextFocusable(document.activeElement, 'next');
+        nextFocusable?.focus();
+        break;
+      }
+      default:
+        break;
+    }
+  };
+
+  return (
+    <li className={styles.root} tabIndex={0} ref={itemRef} onKeyDown={handleKeyDown}>
+      {children}
+    </li>
+  );
+};
+
+export default ListItem;
+
+================
+File: reference/components/MatrixLoader.module.scss
+================
+.container {
+  width: 100%;
+  height: auto;
+  position: relative;
+}
+
+.root {
+  display: block;
+  width: 100%;
+  background: transparent;
+}
+
+================
+File: reference/components/MatrixLoader.tsx
+================
+'use client';
+
+import styles from '@components/MatrixLoader.module.scss';
+
+import * as React from 'react';
+
+interface MatrixLoaderProps {
+  rows?: number;
+  direction?: undefined | 'top-to-bottom' | 'left-to-right';
+  mode?: undefined | 'greek' | 'katakana';
+}
+
+// TODO(jimmylee)
+// Move these constants into a separate file
+// Dynamically compute these constants since we're going to
+// Support t-shirt sizes for the system.
+const LINE_HEIGHT = 20;
+const CHARACTER_WIDTH = 9.6;
+
+function onTextGeneration({ mode = 'greek' }) {
+  if (mode === 'greek') {
+    const isUppercase = Math.random() < 0.5;
+
+    return String.fromCharCode(isUppercase ? 0x0391 + Math.floor(Math.random() * (0x03a9 - 0x0391 + 1)) : 0x03b1 + Math.floor(Math.random() * (0x03c9 - 0x03b1 + 1)));
+  }
+
+  if (mode === 'katakana') {
+    const japaneseRanges = [{ start: 0x30a0, end: 0x30ff }];
+
+    const allJapaneseCharacters = japaneseRanges.flatMap((range) => Array.from({ length: range.end - range.start + 1 }, (_, i) => range.start + i));
+
+    const randomJapaneseCharacter = allJapaneseCharacters[Math.floor(Math.random() * allJapaneseCharacters.length)];
+    return String.fromCharCode(randomJapaneseCharacter);
+  }
+
+  return '0';
+}
+
+const MatrixLoader: React.FC<MatrixLoaderProps> = ({ rows = 25, direction = 'top-to-bottom', mode = 'greek' }) => {
+  const canvasRef = React.useRef<HTMLCanvasElement>(null);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const parent = canvas.parentElement;
+    if (!parent) return;
+
+    const resizeCanvas = () => {
+      const parentWidth = parent.clientWidth;
+      const parentHeight = rows * LINE_HEIGHT;
+
+      const dpr = window.devicePixelRatio || 1;
+
+      canvas.style.width = parentWidth + 'px';
+      canvas.style.height = parentHeight + 'px';
+      canvas.width = Math.floor(parentWidth * dpr);
+      canvas.height = Math.floor(parentHeight * dpr);
+
+      const ctx = canvas.getContext('2d');
+      if (ctx) {
+        ctx.scale(dpr, dpr);
+      }
+    };
+
+    resizeCanvas();
+
+    window.addEventListener('resize', resizeCanvas);
+
+    return () => {
+      window.removeEventListener('resize', resizeCanvas);
+    };
+  }, [rows]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+    const ctx = canvas.getContext('2d');
+    if (!ctx) return;
+
+    let interval: number;
+
+    const drawMatrix = () => {
+      const w = canvas.width;
+      const h = canvas.height;
+
+      if (direction === 'top-to-bottom') {
+        const cols = Math.floor(w / CHARACTER_WIDTH);
+        const ypos: number[] = Array(cols).fill(0);
+
+        const matrix = () => {
+          const themeTextColor = getComputedStyle(document.body).getPropertyValue('--theme-text').trim();
+          const fontFamily = getComputedStyle(document.body).getPropertyValue('--font-family-mono').trim();
+
+          ctx.globalCompositeOperation = 'destination-out';
+          ctx.fillStyle = 'rgba(255, 255, 255, 0.05)';
+          ctx.fillRect(0, 0, w, h);
+          ctx.textBaseline = 'top';
+          ctx.font = `16px ${fontFamily}`;
+
+          ctx.globalCompositeOperation = 'source-over';
+
+          ypos.forEach((y, ind) => {
+            const text = onTextGeneration({ mode });
+            const x = ind * CHARACTER_WIDTH;
+
+            ctx.fillStyle = themeTextColor;
+            ctx.fillText(text, x, y);
+
+            if (y > h + Math.random() * 10000) {
+              ypos[ind] = 0;
+            } else {
+              ypos[ind] = y + LINE_HEIGHT;
+            }
+          });
+        };
+
+        interval = window.setInterval(matrix, 50);
+      } else if (direction === 'left-to-right') {
+        const totalRows = rows; // Use rows directly for total rows
+        const xpos: number[] = Array(totalRows).fill(0);
+
+        const matrix = () => {
+          const themeTextColor = getComputedStyle(document.body).getPropertyValue('--theme-text').trim();
+          const fontFamily = getComputedStyle(document.body).getPropertyValue('--font-family-mono').trim();
+
+          ctx.globalCompositeOperation = 'destination-out';
+          ctx.fillStyle = 'rgba(255, 255, 255, 0.05)';
+          ctx.fillRect(0, 0, w, h);
+          ctx.textBaseline = 'top';
+          ctx.font = `16px ${fontFamily}`;
+
+          ctx.globalCompositeOperation = 'source-over';
+
+          xpos.forEach((x, ind) => {
+            const text = onTextGeneration({ mode });
+            const y = ind * LINE_HEIGHT;
+
+            ctx.fillStyle = themeTextColor;
+            ctx.fillText(text, x, y);
+
+            if (x > w + Math.random() * 10000) {
+              xpos[ind] = 0;
+            } else {
+              xpos[ind] = x + CHARACTER_WIDTH;
+            }
+          });
+        };
+
+        interval = window.setInterval(matrix, 50);
+      }
+    };
+
+    drawMatrix();
+
+    return () => {
+      window.clearInterval(interval);
+    };
+  }, [rows, direction, mode]);
+
+  return (
+    <div className={styles.container}>
+      <canvas className={styles.root} ref={canvasRef} />
+    </div>
+  );
+};
+
+export default MatrixLoader;
+
+================
+File: reference/components/Message.module.scss
+================
+.message {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+  margin-bottom: calc(var(--font-size) * var(--theme-line-height-base));
+
+  &:last-child {
+    margin-bottom: 0px;
+  }
+}
+
+.left {
+  align-self: stretch;
+  flex-shrink: 0;
+  display: flex;
+  align-items: flex-end;
+  position: relative;
+}
+
+.triangle {
+  display: inline-block;
+  width: 0;
+  height: 0;
+  border-top: calc((var(--font-size) * var(--theme-line-height-base)) / 2) solid transparent;
+  border-bottom: calc((var(--font-size) * var(--theme-line-height-base)) / 2) solid transparent;
+  border-right: 1ch solid var(--theme-border);
+  margin-bottom: calc((var(--font-size) * var(--theme-line-height-base)) / 2);
+}
+
+.right {
+  min-width: 10%;
+  width: 100%;
+  text-align: left;
+}
+
+.bubble {
+  padding: calc(8px * var(--theme-line-height-base)) 1ch calc(8px * var(--theme-line-height-base)) 1ch;
+  background: var(--theme-border);
+  display: inline-block;
+  box-shadow: 1ch 1ch 0 0 var(--theme-border-subdued);
+}
+
+================
+File: reference/components/Message.tsx
+================
+import styles from '@components/Message.module.scss';
+
+export default function Message(props) {
+  return (
+    <div className={styles.message}>
+      <div className={styles.left}>
+        <figure className={styles.triangle} />
+      </div>
+      <div className={styles.right}>
+        <div className={styles.bubble}>{props.children}</div>
+      </div>
+    </div>
+  );
+}
+
+================
+File: reference/components/MessageViewer.module.scss
+================
+.message {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+  margin-bottom: calc(var(--font-size) * var(--theme-line-height-base));
+}
+
+.bubble {
+  display: inline-block;
+  background: var(--theme-focused-foreground);
+  padding: calc(8px * var(--theme-line-height-base)) 1ch calc(8px * var(--theme-line-height-base)) 1ch;
+}
+
+.left {
+  min-width: 10%;
+  width: 100%;
+  text-align: right;
+}
+
+.right {
+  align-self: stretch;
+  flex-shrink: 0;
+  display: flex;
+  align-items: flex-end;
+}
+
+.triangle {
+  display: inline-block;
+  width: 0;
+  height: 0;
+  border-top: calc((var(--font-size) * var(--theme-line-height-base)) / 2) solid transparent;
+  border-bottom: calc((var(--font-size) * var(--theme-line-height-base)) / 2) solid transparent;
+  border-left: 1ch solid var(--theme-focused-foreground);
+  margin-bottom: calc((var(--font-size) * var(--theme-line-height-base)) / 2);
+}
+
+================
+File: reference/components/MessageViewer.tsx
+================
+import styles from '@components/MessageViewer.module.scss';
+
+export default function MessageViewer(props) {
+  return (
+    <div className={styles.message}>
+      <div className={styles.left}>
+        <div className={styles.bubble}>{props.children}</div>
+      </div>
+      <div className={styles.right}>
+        <figure className={styles.triangle} />
+      </div>
+    </div>
+  );
+}
+
+================
+File: reference/components/ModalStack.module.scss
+================
+.root {
+  align-items: center;
+  bottom: 0;
+  display: flex;
+  justify-content: center;
+  left: 0;
+  pointer-events: none;
+  position: fixed;
+  right: 0;
+  top: 0;
+  z-index: var(--z-index-page-modals);
+}
+
+.item {
+  pointer-events: auto;
+  position: absolute;
+  transition:
+    opacity 0.2s ease,
+    transform 0.4s ease;
+}
+
+================
+File: reference/components/ModalStack.tsx
+================
+'use client';
+
+import styles from '@components/ModalStack.module.scss';
+
+import * as React from 'react';
+
+import { useModals } from '@components/page/ModalContext';
+
+interface ModalStackProps {}
+
+const ModalStack: React.FC<ModalStackProps> = () => {
+  const { modalStack } = useModals();
+
+  const totalModals = modalStack.length;
+
+  return (
+    <div className={styles.root}>
+      {modalStack.map((modalState, index) => {
+        const { key, component: ModalComponent, props } = modalState;
+
+        const offsetFromLast = totalModals - 1 - index;
+        const translateY = -offsetFromLast * 40;
+        const blur = offsetFromLast * 1.1;
+
+        return (
+          <div
+            key={key}
+            className={styles.item}
+            style={{
+              zIndex: 10 + index,
+              transform: `translateY(${translateY}px)`,
+              filter: `blur(${blur}px)`,
+            }}
+          >
+            <ModalComponent {...props} />
+          </div>
+        );
+      })}
+    </div>
+  );
+};
+
+export default ModalStack;
+
+================
+File: reference/components/ModalTrigger.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+import { useModals } from '@components/page/ModalContext';
+
+interface ModalTriggerProps {
+  children: React.ReactElement<{ onClick?: React.MouseEventHandler }>;
+  modal: React.ComponentType<any>;
+  modalProps?: Record<string, any>;
+}
+
+function ModalTrigger({ children, modal, modalProps = {} }: ModalTriggerProps) {
+  const { open } = useModals();
+
+  const onHandleOpenModal = () => {
+    open(modal, modalProps);
+  };
+
+  return React.cloneElement(children, {
+    onClick: onHandleOpenModal,
+  });
+}
+
+export default ModalTrigger;
+
+================
+File: reference/components/Navigation.module.scss
+================
+.root {
+  display: flex;
+  align-items: center;
+  justify-content: space-between;
+  background: var(--theme-border);
+}
+
+.logo {
+  flex-shrink: 0;
+  padding: 0 1ch 0 1ch;
+  display: inline-flex;
+  color: var(--theme-text);
+  background: var(--theme-border);
+  text-decoration: none;
+  border: 0;
+  outline: 0;
+  border-radius: 0;
+  margin: 0;
+  font-size: var(--font-size);
+
+  &:visited {
+    color: var(--theme-text);
+  }
+
+  &:hover {
+    color: var(--theme-text);
+    background: var(--theme-focused-foreground);
+  }
+
+  &:focus {
+    outline: 0;
+    border: 0;
+    margin: 0;
+    padding: 0 1ch 0 1ch;
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.left {
+  flex-shrink: 0;
+}
+
+.children {
+  min-width: 10%;
+  width: 100%;
+}
+
+.right {
+  flex-shrink: 0;
+}
+
+================
+File: reference/components/Navigation.tsx
+================
+'use client';
+
+import styles from '@components/Navigation.module.scss';
+
+import * as React from 'react';
+
+interface NavigationProps extends React.HTMLAttributes<HTMLElement> {
+  children?: React.ReactNode;
+  logoHref?: string;
+  logoTarget?: React.HTMLAttributeAnchorTarget;
+  onClickLogo?: React.MouseEventHandler<HTMLButtonElement>;
+  logo?: React.ReactNode;
+  left?: React.ReactNode;
+  right?: React.ReactNode;
+}
+
+const Navigation: React.FC<NavigationProps> = ({ children, logoHref, logoTarget, onClickLogo, logo, left, right }) => {
+  let logoElement = <button className={styles.logo}>{logo}</button>;
+
+  if (onClickLogo) {
+    logoElement = (
+      <button className={styles.logo} onClick={onClickLogo}>
+        {logo}
+      </button>
+    );
+  }
+
+  if (logoHref) {
+    logoElement = (
+      <a href={logoHref} className={styles.logo} target={logoTarget}>
+        {logo}
+      </a>
+    );
+  }
+
+  return (
+    <nav className={styles.root}>
+      {logoElement}
+      <section className={styles.left}>{left}</section>
+      <section className={styles.children}>{children}</section>
+      <section className={styles.right}>{right}</section>
+    </nav>
+  );
+};
+
+export default Navigation;
+
+================
+File: reference/components/NumberRangeSlider.module.scss
+================
+.root {
+  display: flex;
+  align-items: center;
+  justify-content: space-between;
+}
+
+.amount {
+  flex-shrink: 0;
+  background: var(--theme-text);
+  color: var(--theme-background);
+  font-weight: 400;
+  padding: 0 1ch 0 1ch;
+}
+
+.slider {
+  border-radius: 0;
+  display: block;
+  margin: 0;
+  padding: 0;
+  width: 100%;
+  min-width: 10%;
+
+  -webkit-appearance: none;
+  -moz-appearance: none;
+  appearance: none;
+
+  background: var(--theme-border-subdued);
+
+  &:focus {
+    background: linear-gradient(to right, transparent, var(--theme-focused-foreground));
+    outline: none;
+  }
+
+  &:hover {
+    background: linear-gradient(to right, transparent, var(--theme-focused-foreground));
+    cursor: pointer;
+  }
+
+  &::-webkit-slider-thumb {
+    -webkit-appearance: none;
+    appearance: none;
+    font-size: var(--font-size);
+    width: 1ch;
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: var(--theme-button-foreground);
+    vertical-align: bottom;
+    cursor: pointer;
+    border-radius: 0;
+  }
+
+  /* Customizing the track */
+  &::-webkit-slider-runnable-track {
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: var(--theme-border-subdued);
+    border-radius: 0;
+  }
+
+  &::-moz-range-thumb {
+    -moz-appearance: none;
+    appearance: none;
+    font-size: var(--font-size);
+    width: 1ch;
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: var(--theme-button-foreground);
+    vertical-align: bottom;
+    cursor: pointer;
+    border: none;
+    border-radius: 0;
+  }
+
+  &::-moz-range-track {
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: var(--theme-border-subdued);
+    border-radius: 0;
+  }
+
+  &::-ms-thumb {
+    appearance: none;
+    font-size: var(--font-size);
+    width: 1ch;
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: var(--theme-button-foreground);
+    vertical-align: bottom;
+    cursor: pointer;
+    border: none;
+    border-radius: 0;
+  }
+
+  &::-ms-track {
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: transparent;
+    border-color: transparent;
+    color: transparent;
+  }
+
+  &::-ms-fill-lower {
+    background: var(--theme-border-subdued);
+  }
+
+  &::-ms-fill-upper {
+    background: var(--theme-border-subdued);
+  }
+}
+
+================
+File: reference/components/NumberRangeSlider.tsx
+================
+'use client';
+
+import styles from '@components/NumberRangeSlider.module.scss';
+
+import * as React from 'react';
+
+interface RangerProps {
+  defaultValue?: number;
+  max?: number;
+  min?: number;
+  step?: number;
+}
+
+const NumberRangeSlider: React.FC<RangerProps> = ({ defaultValue = 0, max = 5000, min = 0, step = 1 }) => {
+  const sliderRef = React.useRef<HTMLInputElement>(null);
+  const [displayValue, setDisplayValue] = React.useState<number>(defaultValue);
+
+  const maxDigits = max.toString().length;
+
+  const padValue = (value: number): string => {
+    return value.toString().padStart(maxDigits, '0');
+  };
+
+  React.useEffect(() => {
+    if (sliderRef.current) {
+      sliderRef.current.value = String(defaultValue);
+    }
+    setDisplayValue(defaultValue);
+  }, [defaultValue]);
+
+  const scrub = (event: React.ChangeEvent<HTMLInputElement>): void => {
+    const value = parseInt(event.target.value, 10);
+    setDisplayValue(value);
+  };
+
+  return (
+    <div className={styles.root}>
+      <label className={styles.left}>
+        <div className={styles.amount}>{padValue(displayValue)}</div>
+      </label>
+      <input className={styles.slider} defaultValue={defaultValue} max={max} min={min} onChange={scrub} ref={sliderRef} role="slider" step={step} tabIndex={0} type="range" />
+    </div>
+  );
+};
+
+export default NumberRangeSlider;
+
+================
+File: reference/components/Popover.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  font-weight: 400;
+}
+
+================
+File: reference/components/Popover.tsx
+================
+import styles from '@components/Popover.module.scss';
+
+import * as React from 'react';
+
+interface PopoverProps extends React.HTMLAttributes<HTMLDivElement> {}
+
+const Popover = React.forwardRef<HTMLDivElement, PopoverProps>(({ style: propStyle, ...rest }, ref) => {
+  const style: React.CSSProperties = { ...propStyle };
+
+  return <div ref={ref} className={styles.root} {...rest} style={style} />;
+});
+
+Popover.displayName = 'Popover';
+
+export default Popover;
+
+================
+File: reference/components/Providers.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+import { ModalProvider } from '@components/page/ModalContext';
+
+interface ProvidersProps {
+  children: React.ReactNode;
+}
+
+const Providers: React.FC<ProvidersProps> = ({ children }) => {
+  return <ModalProvider>{children}</ModalProvider>;
+};
+
+export default Providers;
+
+================
+File: reference/components/RadioButton.module.scss
+================
+.section {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+  position: relative;
+
+  .right {
+    padding-bottom: calc(8px * var(--theme-line-height-base));
+    box-shadow: inset 0 1px 0 0 var(--theme-border-subdued);
+  }
+
+  &:last-child {
+    .right {
+      padding-bottom: 0;
+    }
+  }
+}
+
+.figure {
+  display: inline-flex;
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  cursor: pointer;
+  color: var(--theme-text);
+  background: var(--theme-button-foreground);
+  width: 3ch;
+  align-items: center;
+  justify-content: center;
+}
+
+.selected {
+  .figure {
+    background: var(--theme-text);
+  }
+}
+
+.dot {
+  display: inline-block;
+  width: 1ch;
+  height: 1ch;
+  background: var(--theme-background);
+  transform: rotate(45deg);
+  vertical-align: middle;
+}
+
+.focused {
+  .figure {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.relative {
+  flex-shrink: 0;
+  display: inline-block;
+  vertical-align: baseline;
+}
+
+.right {
+  background: var(--theme-button-background);
+  min-width: 10%;
+  width: 100%;
+  align-self: stretch;
+}
+
+.input {
+  position: absolute;
+  height: 1px;
+  width: 1px;
+  opacity: 0;
+  background: transparent;
+  border: 0;
+  outline: 0;
+  margin: 0;
+  padding: 0;
+}
+
+================
+File: reference/components/RadioButton.tsx
+================
+import styles from '@components/RadioButton.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface RadioButtonProps {
+  style?: React.CSSProperties;
+  name: string;
+  value: string;
+  selected?: boolean;
+  onSelect?: (value: string) => void;
+  children?: React.ReactNode;
+}
+
+const RadioButton: React.FC<RadioButtonProps> = ({ style, name, value, selected = false, onSelect, children }) => {
+  const radioId = `${name}-${value}-radio`;
+  const [isFocused, setIsFocused] = React.useState(false);
+
+  const handleFocus = () => setIsFocused(true);
+  const handleBlur = () => setIsFocused(false);
+
+  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
+    switch (event.key) {
+      case 'Enter':
+        event.preventDefault();
+        onSelect?.(value);
+        break;
+      case 'ArrowUp':
+      case 'ArrowLeft':
+        event.preventDefault();
+        Utilities.findNextFocusable(document.activeElement, 'previous')?.focus();
+        break;
+      case 'Tab':
+      case 'ArrowDown':
+      case 'ArrowRight':
+        event.preventDefault();
+        Utilities.findNextFocusable(document.activeElement, 'next')?.focus();
+        break;
+      default:
+        break;
+    }
+  };
+
+  const handleChange = () => {
+    onSelect?.(value);
+  };
+
+  return (
+    <div
+      className={Utilities.classNames(styles.section, {
+        [styles.focused]: isFocused,
+        [styles.selected]: selected,
+      })}
+      style={style}
+    >
+      <input className={styles.input} id={radioId} type="radio" name={name} value={value} checked={selected} onFocus={handleFocus} onBlur={handleBlur} onKeyDown={handleKeyDown} onChange={handleChange} />
+      <div className={styles.relative}>
+        <label className={styles.figure} htmlFor={radioId}>
+          {selected ? <span aria-hidden="true" className={styles.dot} /> : null}
+        </label>
+      </div>
+      <div className={styles.right}>&nbsp;&nbsp;{children}</div>
+    </div>
+  );
+};
+
+export default RadioButton;
+
+================
+File: reference/components/RadioButtonGroup.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+import RadioButton from '@components/RadioButton';
+
+interface RadioButtonGroupProps {
+  options: { value: string; label: string }[];
+  defaultValue?: string;
+}
+
+const RadioButtonGroup: React.FC<RadioButtonGroupProps> = ({ options, defaultValue = '' }) => {
+  const [selectedValue, setSelectedValue] = React.useState<string>(defaultValue);
+
+  const handleSelect = (value: string) => {
+    setSelectedValue(value);
+  };
+
+  return (
+    <>
+      {options.map((option) => (
+        <RadioButton key={option.value} name="example" value={option.value} selected={selectedValue === option.value} onSelect={handleSelect}>
+          {option.label}
+        </RadioButton>
+      ))}
+    </>
+  );
+};
+
+export default RadioButtonGroup;
+
+================
+File: reference/components/Row.module.scss
+================
+.row {
+  display: block;
+  outline: 0;
+  border: 0;
+  transition: 200ms ease background;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/Row.tsx
+================
+'use client';
+
+import styles from '@components/Row.module.scss';
+
+import * as React from 'react';
+
+type RowProps = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const Row = React.forwardRef<HTMLElement, RowProps>(({ children, ...rest }, ref) => {
+  return (
+    <section className={styles.row} ref={ref} {...rest}>
+      {children}
+    </section>
+  );
+});
+
+Row.displayName = 'Row';
+
+export default Row;
+
+================
+File: reference/components/RowEllipsis.module.scss
+================
+.row {
+  display: block;
+  outline: 0;
+  border: 0;
+  transition: 200ms ease background;
+  white-space: nowrap;
+  overflow: hidden;
+  text-overflow: ellipsis;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/RowEllipsis.tsx
+================
+'use client';
+
+import styles from '@components/RowEllipsis.module.scss';
+
+import * as React from 'react';
+
+type RowEllipsisProps = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const RowEllipsis = React.forwardRef<HTMLElement, RowEllipsisProps>(({ children, ...rest }, ref) => {
+  return (
+    <section className={styles.row} ref={ref} {...rest}>
+      {children}
+    </section>
+  );
+});
+
+RowEllipsis.displayName = 'RowEllipsis';
+
+export default RowEllipsis;
+
+================
+File: reference/components/RowSpaceBetween.module.scss
+================
+.row {
+  display: flex;
+  justify-content: space-between;
+  outline: 0;
+  border: 0;
+  transition: 200ms ease background;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/RowSpaceBetween.tsx
+================
+'use client';
+
+import styles from '@components/RowSpaceBetween.module.scss';
+
+import * as React from 'react';
+
+type RowSpaceBetweenProps = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const RowSpaceBetween = React.forwardRef<HTMLElement, RowSpaceBetweenProps>(({ children, ...rest }, ref) => {
+  return (
+    <section className={styles.row} ref={ref} {...rest}>
+      {children}
+    </section>
+  );
+});
+
+RowSpaceBetween.displayName = 'RowSpaceBetween';
+
+export default RowSpaceBetween;
+
+================
+File: reference/components/Select.module.scss
+================
+.select {
+  align-items: flex-start;
+  cursor: default;
+  display: flex;
+  justify-content: space-between;
+  outline: none;
+  position: relative;
+  z-index: var(--z-index-page-select);
+}
+
+.control {
+  align-self: stretch;
+  background: var(--theme-button-foreground);
+  cursor: pointer;
+  flex-shrink: 0;
+  padding: 0 1ch 0 1ch;
+
+  &.focused {
+    background: var(--theme-text);
+    color: var(--theme-background);
+  }
+}
+
+.display {
+  background: var(--theme-border);
+  border: 0;
+  color: var(--theme-text);
+  cursor: pointer;
+  font-family: var(--font-family-mono);
+  font-size: var(--font-size);
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+  margin: 0;
+  min-width: 10%;
+  outline: 0;
+  padding: 0;
+  padding-left: 3ch;
+  text-align: left;
+  user-select: none;
+  width: 100%;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    border: 0;
+    outline: 0;
+  }
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.menu {
+  background-color: var(--theme-border-subdued);
+  left: 3ch;
+  list-style-type: none;
+  padding: 0;
+  right: 0;
+  z-index: var(--z-index-page-select);
+}
+
+.item {
+  border: 0;
+  cursor: pointer;
+  outline: 0;
+  padding-left: 6ch;
+  user-select: none;
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    border: 0;
+    outline: 0;
+  }
+}
+
+================
+File: reference/components/Select.tsx
+================
+'use client';
+
+import styles from '@components/Select.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface SelectProps {
+  name: string;
+  options: string[];
+  placeholder?: string;
+  defaultValue?: string;
+  onChange?: (selectedValue: string) => void;
+}
+
+const Select: React.FC<SelectProps> = ({ name, options, placeholder, defaultValue = '', onChange }) => {
+  const [isOpen, setIsOpen] = React.useState(false);
+  const [index, setIndex] = React.useState(-1);
+  const [selectedValue, setSelectedValue] = React.useState(defaultValue);
+
+  const containerRef = React.useRef<HTMLButtonElement | null>(null);
+
+  const handleOpen = () => {
+    setIsOpen(true);
+    const currentIndex = options.indexOf(selectedValue);
+    setIndex(currentIndex >= 0 ? currentIndex : 0);
+  };
+
+  const handleClose = () => {
+    setIsOpen(false);
+    setIndex(-1);
+
+    if (containerRef && containerRef.current) {
+      containerRef.current?.focus();
+    }
+  };
+
+  const handleSelect = (value: string) => {
+    setSelectedValue(value);
+    onChange?.(value);
+    handleClose();
+  };
+
+  return (
+    <>
+      <section className={styles.select}>
+        <figure
+          className={Utilities.classNames(isOpen ? styles.focused : null, styles.control)}
+          onClick={() => {
+            isOpen ? handleClose() : handleOpen();
+          }}
+        >
+          ▼
+        </figure>
+        <button
+          className={styles.display}
+          ref={containerRef}
+          tabIndex={0}
+          onClick={() => {
+            isOpen ? handleClose() : handleOpen();
+          }}
+          aria-haspopup="listbox"
+          aria-expanded={isOpen}
+        >
+          {selectedValue || placeholder}
+        </button>
+      </section>
+
+      {isOpen && (
+        <ul className={styles.menu} role="listbox">
+          {options.map((option, idx) => {
+            return (
+              <li key={option} role="option" tabIndex={0} className={Utilities.classNames(styles.item)} onClick={() => handleSelect(option)}>
+                {option}
+              </li>
+            );
+          })}
+        </ul>
+      )}
+    </>
+  );
+};
+
+export default Select;
+
+================
+File: reference/components/SidebarLayout.module.scss
+================
+.root {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+  white-space: pre-wrap;
+}
+
+.sidebar {
+  align-self: stretch;
+  flex-shrink: 0;
+  width: 20ch;
+}
+
+.handle {
+  align-self: stretch;
+  flex-shrink: 0;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  width: 3ch;
+  outline: 0;
+  border: 0;
+  cursor: col-resize;
+
+  &:hover {
+    .line {
+      background: var(--theme-focused-foreground);
+    }
+  }
+
+  &:focus {
+    outline: 0;
+    border: 0;
+
+    .line {
+      background: var(--theme-focused-foreground);
+    }
+  }
+}
+
+.line {
+  align-self: stretch;
+  width: 2px;
+  background: var(--theme-text);
+
+  &:first-child {
+    margin-left: 1px;
+    margin-right: 2px;
+  }
+}
+
+.content {
+  min-width: 10%;
+  width: 100%;
+}
+
+================
+File: reference/components/SidebarLayout.tsx
+================
+'use client';
+
+import styles from '@components/SidebarLayout.module.scss';
+import * as React from 'react';
+
+interface SidebarLayoutProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'defaultValue'> {
+  children?: React.ReactNode;
+  sidebar?: React.ReactNode;
+  defaultSidebarWidth?: number;
+  isShowingHandle?: boolean;
+  isReversed?: boolean;
+}
+
+const LINE_HEIGHT = 20;
+const CHARACTER_WIDTH = 9.6;
+
+const SidebarLayout: React.FC<SidebarLayoutProps> = ({ defaultSidebarWidth = 20, children, sidebar, isShowingHandle = false, isReversed = false, ...rest }) => {
+  const [sidebarWidth, setSidebarWidth] = React.useState(defaultSidebarWidth);
+  const handleRef = React.useRef<HTMLDivElement>(null);
+
+  const handleMouseDown = (event: React.MouseEvent<HTMLDivElement>) => {
+    const startX = event.clientX;
+    const startWidth = sidebarWidth;
+
+    const onMouseMove = (moveEvent: MouseEvent) => {
+      const deltaX = moveEvent.clientX - startX;
+      const increment = Math.round(deltaX / CHARACTER_WIDTH);
+      setSidebarWidth(Math.max(CHARACTER_WIDTH, startWidth + increment));
+    };
+
+    const onMouseUp = () => {
+      document.removeEventListener('mousemove', onMouseMove);
+      document.removeEventListener('mouseup', onMouseUp);
+    };
+
+    document.addEventListener('mousemove', onMouseMove);
+    document.addEventListener('mouseup', onMouseUp);
+  };
+
+  if (isReversed) {
+    return (
+      <div className={styles.root} {...rest}>
+        <div className={styles.content}>{children}</div>
+        &nbsp;
+        <div
+          className={styles.sidebar}
+          style={{
+            width: `${sidebarWidth}ch`,
+          }}
+        >
+          {sidebar}
+        </div>
+      </div>
+    );
+  }
+
+  return (
+    <div className={styles.root} {...rest}>
+      <div
+        className={styles.sidebar}
+        style={{
+          width: `${sidebarWidth}ch`,
+        }}
+      >
+        {sidebar}
+      </div>
+      {isShowingHandle ? (
+        <div className={styles.handle} ref={handleRef} role="button" tabIndex={0} onMouseDown={handleMouseDown} style={isShowingHandle ? {} : { width: `0.5ch` }}>
+          <>
+            <div className={styles.line} />
+            <div className={styles.line} />
+          </>
+        </div>
+      ) : null}
+      <div className={styles.content}>{children}</div>
+    </div>
+  );
+};
+
+export default SidebarLayout;
+
+================
+File: reference/components/Table.module.scss
+================
+.root {
+  border: 0;
+  outline: 0;
+  margin: 0;
+  padding: 0;
+  position: relative;
+  width: 100%;
+  border-spacing: 0px;
+  -webkit-text-size-adjust: 100%;
+}
+
+.body {
+}
+
+================
+File: reference/components/Table.tsx
+================
+'use client';
+
+import styles from '@components/Table.module.scss';
+
+import * as React from 'react';
+
+type TableProps = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const Table = ({ children, ...rest }) => {
+  return (
+    <table className={styles.root} {...rest}>
+      <tbody className={styles.body}>{children}</tbody>
+    </table>
+  );
+};
+
+Table.displayName = 'Table';
+
+export default Table;
+
+================
+File: reference/components/TableColumn.module.scss
+================
+.root {
+  border: 0;
+  outline: 0;
+  margin: 0;
+  padding: 0;
+  transition: background-color 0.5s ease;
+  padding-left: 1ch;
+  font-size: var(--font-size);
+  flex-shrink: 0;
+  -webkit-text-size-adjust: 100%;
+
+  &:first-child {
+    padding-left: 0px;
+  }
+}
+
+================
+File: reference/components/TableColumn.tsx
+================
+'use client';
+
+import styles from '@components/TableColumn.module.scss';
+
+import * as React from 'react';
+
+type TableColumnProps = React.HTMLAttributes<HTMLTableCellElement> & {
+  children?: React.ReactNode;
+};
+
+const TableColumn: React.FC<TableColumnProps> = ({ children, ...rest }) => {
+  return (
+    <td className={styles.root} {...rest}>
+      {children}
+    </td>
+  );
+};
+
+TableColumn.displayName = 'TableColumn';
+
+export default TableColumn;
+
+================
+File: reference/components/TableRow.module.scss
+================
+.root {
+  border: 0;
+  outline: 0;
+  margin: 0;
+  padding: 0;
+
+  transition: transform 0.5s ease;
+  border-spacing: 0px;
+  -webkit-text-size-adjust: 100%;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    outline: 0;
+  }
+}
+
+================
+File: reference/components/TableRow.tsx
+================
+'use client';
+
+import styles from '@components/TableRow.module.scss';
+
+import * as React from 'react';
+
+type TableRowProps = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const TableRow = ({ children, ...rest }) => {
+  return (
+    <tr className={styles.root} tabIndex={0} {...rest}>
+      {children}
+    </tr>
+  );
+};
+
+TableRow.displayName = 'TableRow';
+
+export default TableRow;
+
+================
+File: reference/components/Text.module.scss
+================
+.text {
+  white-space: pre-wrap;
+  overflow-wrap: break-word;
+}
+
+================
+File: reference/components/Text.tsx
+================
+import styles from '@components/Text.module.scss';
+
+import * as React from 'react';
+
+interface TextProps extends React.HTMLAttributes<HTMLParagraphElement> {
+  children?: React.ReactNode;
+}
+
+const Text: React.FC<TextProps> = ({ children, ...rest }) => {
+  return (
+    <p className={styles.text} {...rest}>
+      {children}
+    </p>
+  );
+};
+
+export default Text;
+
+================
+File: reference/components/TextArea.module.scss
+================
+.root {
+  position: relative;
+}
+
+.placeholder {
+  opacity: 0.7;
+  font-style: italic;
+}
+
+.displayed {
+  white-space: pre-wrap;
+  word-wrap: break-word;
+  pointer-events: none;
+  overflow-wrap: anywhere;
+}
+
+.hidden {
+  white-space: pre-wrap;
+  word-wrap: break-word;
+  pointer-events: none;
+  overflow-wrap: anywhere;
+  position: absolute;
+  visibility: hidden;
+  width: 100%;
+  overflow: auto;
+}
+
+.focused {
+  .block {
+    background: var(--theme-focused-foreground);
+  }
+
+  .placeholder {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+@keyframes blink {
+  50% {
+    opacity: 0;
+  }
+}
+
+.blink {
+  animation: blink 1s step-start 0s infinite;
+}
+
+.block {
+  display: inline-block;
+  min-width: 1ch;
+  background: var(--theme-text);
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  vertical-align: bottom;
+}
+
+.hiddenElement {
+  position: absolute;
+  top: 0;
+  left: 0;
+  width: 100%;
+  height: 100%;
+  color: transparent;
+  background: transparent;
+  caret-color: transparent;
+  border: none;
+  resize: none;
+  outline: none;
+  overflow: hidden;
+  padding: 0;
+  margin: 0;
+  line-height: var(--theme-line-height-base);
+  font-size: var(--font-size);
+  font-family: inherit;
+}
+
+================
+File: reference/components/TextArea.tsx
+================
+'use client';
+
+import styles from '@components/TextArea.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+type TextAreaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement> & {
+  autoPlay?: string;
+  autoPlaySpeedMS?: number;
+  isBlink?: boolean;
+};
+function TextArea({ autoPlay, autoPlaySpeedMS = 40, isBlink, placeholder, onChange, ...rest }: TextAreaProps) {
+  const textAreaRef = React.useRef<HTMLTextAreaElement | null>(null);
+  const measurementRef = React.useRef<HTMLDivElement | null>(null);
+
+  const [text, setText] = React.useState<string>(rest.defaultValue?.toString() || rest.value?.toString() || '');
+  const [isAutoPlaying, setIsAutoPlaying] = React.useState<boolean>(!!autoPlay);
+  const [isFocused, setIsFocused] = React.useState<boolean>(false);
+  const [selectionStart, setSelectionStart] = React.useState<number>(0);
+
+  const autoPlayIntervalRef = React.useRef<NodeJS.Timeout | null>(null);
+  const autoPlayIndexRef = React.useRef<number>(0);
+
+  const [currentLineIndex, setCurrentLineIndex] = React.useState<number>(0);
+  const [totalLines, setTotalLines] = React.useState<number>(0);
+
+  React.useEffect(() => {
+    if (textAreaRef.current && isFocused) {
+      textAreaRef.current.setSelectionRange(selectionStart, selectionStart);
+    }
+  }, [selectionStart, isFocused]);
+
+  React.useEffect(() => {
+    if (rest.value !== undefined) {
+      const val = rest.value.toString();
+      setText(val);
+      setIsAutoPlaying(false);
+      if (autoPlayIntervalRef.current) {
+        clearInterval(autoPlayIntervalRef.current);
+      }
+      setSelectionStart(val.length);
+    }
+  }, [rest.value]);
+
+  React.useEffect(() => {
+    if (autoPlay && !rest.value && !rest.defaultValue) {
+      setIsAutoPlaying(true);
+      autoPlayIndexRef.current = 0;
+      setText('');
+      if (autoPlayIntervalRef.current) clearInterval(autoPlayIntervalRef.current);
+
+      autoPlayIntervalRef.current = setInterval(() => {
+        autoPlayIndexRef.current++;
+        if (!autoPlay) return;
+        if (autoPlayIndexRef.current > autoPlay.length) {
+          setIsAutoPlaying(false);
+          clearInterval(autoPlayIntervalRef.current!);
+          return;
+        }
+        const newText = autoPlay.slice(0, autoPlayIndexRef.current);
+        setText(newText);
+        setSelectionStart(newText.length);
+      }, autoPlaySpeedMS);
+    }
+
+    return () => {
+      if (autoPlayIntervalRef.current) clearInterval(autoPlayIntervalRef.current);
+    };
+  }, [autoPlay, rest.value, rest.defaultValue]);
+
+  const resizeTextArea = React.useCallback(() => {
+    if (!textAreaRef.current) return;
+    textAreaRef.current.style.height = 'auto';
+    textAreaRef.current.style.height = `${textAreaRef.current.scrollHeight}px`;
+  }, []);
+
+  React.useEffect(() => {
+    resizeTextArea();
+    window.addEventListener('resize', resizeTextArea);
+    return () => window.removeEventListener('resize', resizeTextArea);
+  }, [resizeTextArea]);
+
+  const onHandleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
+    const value = e.target.value;
+    setText(value);
+    setIsAutoPlaying(false);
+    if (autoPlayIntervalRef.current) {
+      clearInterval(autoPlayIntervalRef.current);
+    }
+    resizeTextArea();
+    if (onChange) {
+      onChange(e);
+    }
+    setSelectionStart(e.target.selectionStart ?? 0);
+  };
+
+  const onHandleSelect = (e: React.SyntheticEvent<HTMLTextAreaElement>) => {
+    const textarea = e.currentTarget as HTMLTextAreaElement;
+    setSelectionStart(textarea.selectionStart);
+  };
+
+  const onHandleFocus = () => {
+    setIsFocused(true);
+    if (textAreaRef.current) {
+      setSelectionStart(textAreaRef.current.selectionStart);
+    }
+  };
+
+  const onHandleBlur = () => {
+    setIsFocused(false);
+  };
+
+  const onHandleClick = (e: React.MouseEvent<HTMLTextAreaElement>) => {
+    const textarea = e.currentTarget as HTMLTextAreaElement;
+    textarea.focus();
+    setSelectionStart(textarea.selectionStart);
+  };
+
+  React.useLayoutEffect(() => {
+    if (!measurementRef.current) return;
+
+    const measurementEl = measurementRef.current;
+    const computedStyle = window.getComputedStyle(measurementEl);
+    const lineHeightStr = computedStyle.lineHeight;
+    let lineHeight = 20;
+    if (lineHeightStr.endsWith('px')) {
+      lineHeight = parseFloat(lineHeightStr);
+    }
+
+    const countLines = (content: string) => {
+      measurementEl.textContent = content || '\u00A0';
+      const height = measurementEl.offsetHeight;
+      return Math.round(height / lineHeight);
+    };
+
+    const displayString = text || placeholder || '';
+
+    const textBeforeCaret = text.substring(0, selectionStart);
+    const textAfterCaret = text.substring(selectionStart);
+
+    const total = countLines(displayString);
+    setTotalLines(total > 0 ? total - 1 : 0);
+
+    const currentLines = countLines(textBeforeCaret);
+    setCurrentLineIndex(currentLines > 0 ? currentLines - 1 : 0);
+  }, [text, selectionStart, placeholder]);
+
+  const onHandleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
+    if (e.key === 'ArrowUp' && currentLineIndex === 0) {
+      e.preventDefault();
+      const previousFocusable = Utilities.findNextFocusable(document.activeElement, 'previous');
+      previousFocusable?.focus();
+    } else if (e.key === 'ArrowDown' && currentLineIndex === totalLines) {
+      e.preventDefault();
+      const nextFocusable = Utilities.findNextFocusable(document.activeElement, 'next');
+      nextFocusable?.focus();
+    }
+  };
+
+  const isPlaceholderVisible = !text && placeholder;
+
+  const containerClasses = Utilities.classNames(styles.root, isFocused && styles.focused);
+
+  return (
+    <div className={containerClasses}>
+      <div className={Utilities.classNames(styles.displayed, isPlaceholderVisible && styles.placeholder)}>
+        {isPlaceholderVisible ? placeholder : text.substring(0, selectionStart)}
+        {!isPlaceholderVisible && <span className={Utilities.classNames(styles.block, isBlink && styles.blink)}></span>}
+        {!isPlaceholderVisible && text.substring(selectionStart)}
+      </div>
+
+      <div ref={measurementRef} className={styles.hidden}></div>
+
+      <textarea className={styles.hiddenElement} ref={textAreaRef} value={text} aria-placeholder={placeholder} onFocus={onHandleFocus} onBlur={onHandleBlur} onKeyDown={onHandleKeyDown} onChange={onHandleChange} onSelect={onHandleSelect} onClick={onHandleClick} {...rest} />
+    </div>
+  );
+}
+
+export default TextArea;
+
+================
+File: reference/components/Tooltip.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border);
+  box-shadow: 0.5ch 0.5ch 0 0 var(--theme-border-subdued);
+  font-weight: 400;
+  max-width: 24ch;
+}
+
+================
+File: reference/components/Tooltip.tsx
+================
+import styles from '@components/Tooltip.module.scss';
+
+import * as React from 'react';
+
+interface TooltipProps extends React.HTMLAttributes<HTMLDivElement> {}
+
+const Tooltip = React.forwardRef<HTMLDivElement, TooltipProps>(({ style: propStyle, ...rest }, ref) => {
+  const style: React.CSSProperties = { ...propStyle };
+
+  return <div ref={ref} className={styles.root} {...rest} style={style} />;
+});
+
+Tooltip.displayName = 'Tooltip';
+
+export default Tooltip;
+
+================
+File: reference/components/TreeView.module.scss
+================
+.root {
+  white-space: nowrap;
+  -webkit-text-size-adjust: 100%;
+}
+
+.item {
+  cursor: pointer;
+
+  &:focus {
+    outline: 0;
+    border: 0;
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.empty {
+  opacity: 0.5;
+}
+
+================
+File: reference/components/TreeView.tsx
+================
+'use client';
+
+import styles from '@components/TreeView.module.scss';
+
+import * as React from 'react';
+
+interface TreeViewProps {
+  children?: React.ReactNode;
+  defaultValue?: boolean;
+  depth?: number;
+  isFile?: boolean;
+  isLastChild?: boolean;
+  isRoot?: boolean;
+  parentLines?: boolean[];
+  style?: any;
+  title: string;
+}
+
+const TreeView: React.FC<TreeViewProps> = ({ defaultValue = false, title, children, depth = 0, isFile = false, isRoot = false, isLastChild = false, style, parentLines = [] }) => {
+  const [show, setShow] = React.useState<boolean>(defaultValue);
+
+  const onToggleShow = (): void => {
+    if (!isFile) setShow((prevShow) => !prevShow);
+  };
+
+  const hasChildren = React.Children.count(children) > 0;
+  const isEmptyFolder = !isFile && !hasChildren;
+
+  const spacing = parentLines.map((line) => (line ? '│ . ' : '. . ')).join('');
+  const endPrefix = isLastChild ? '└───' : '├───';
+  const prefix = `${spacing}${endPrefix}`;
+  const icon = isFile ? ' ' : show ? '╦ ' : '╤ ';
+
+  const updatedParentLines = [...parentLines, !isLastChild];
+
+  return (
+    <div className={styles.root} style={style}>
+      <div tabIndex={0} role="button" onClick={onToggleShow} className={styles.item} aria-expanded={show}>
+        {prefix}
+        {icon}
+        {title}
+      </div>
+      {show && hasChildren && (
+        <div>
+          {React.Children.map(children, (child, index) =>
+            React.isValidElement(child)
+              ? React.cloneElement(child as React.ReactElement<TreeViewProps>, {
+                  depth: depth + 1,
+                  isLastChild: index === React.Children.count(children) - 1,
+                  parentLines: updatedParentLines,
+                })
+              : child
+          )}
+        </div>
+      )}
+    </div>
+  );
+};
+
+export default TreeView;
+
+================
+File: reference/modules/hotkeys/bound-hotkeys-proxy-provider.tsx
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/BoundHotkeysProxyProvider.tsx
+
+import { createContext, ReactNode, useContext } from 'react'
+import { Hotkey } from '@modules/hotkeys/types'
+
+type BoundHotkeysProxyProviderType = {
+  addHotkey: (hotkey: Hotkey) => void
+  removeHotkey: (hotkey: Hotkey) => void
+}
+
+const BoundHotkeysProxyProvider = createContext<BoundHotkeysProxyProviderType | undefined>(undefined)
+
+export const useBoundHotkeysProxy = () => {
+  return useContext(BoundHotkeysProxyProvider)
+}
+
+interface Props {
+  children: ReactNode
+  addHotkey: (hotkey: Hotkey) => void
+  removeHotkey: (hotkey: Hotkey) => void
+}
+
+export default function BoundHotkeysProxyProviderProvider({ addHotkey, removeHotkey, children }: Props) {
+  return (
+    <BoundHotkeysProxyProvider.Provider value={{ addHotkey, removeHotkey }}>
+      {children}
+    </BoundHotkeysProxyProvider.Provider>
+  )
+}
+
+================
+File: reference/modules/hotkeys/hotkeys-provider.tsx
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/HotkeysProvider.tsx
+import { Hotkey } from '@modules/hotkeys/types'
+import { createContext, ReactNode, useState, useContext, useCallback } from 'react'
+import BoundHotkeysProxyProviderProvider from '@modules/hotkeys/bound-hotkeys-proxy-provider'
+
+import * as Utilities from '@common/utilities';
+
+export type HotkeysContextType = {
+  hotkeys: ReadonlyArray<Hotkey>
+  enabledScopes: string[]
+  toggleScope: (scope: string) => void
+  enableScope: (scope: string) => void
+  disableScope: (scope: string) => void
+}
+
+// The context is only needed for special features like global scoping, so we use a graceful default fallback
+const HotkeysContext = createContext<HotkeysContextType>({
+  hotkeys: [],
+  enabledScopes: [], // This array has to be empty instead of containing '*' as default, to check if the provider is set or not
+  toggleScope: () => {},
+  enableScope: () => {},
+  disableScope: () => {},
+})
+
+export const useHotkeysContext = () => {
+  return useContext(HotkeysContext)
+}
+
+interface Props {
+  initiallyActiveScopes?: string[]
+  children: ReactNode
+}
+
+export const HotkeysProvider = ({ initiallyActiveScopes = ['*'], children }: Props) => {
+  const [internalActiveScopes, setInternalActiveScopes] = useState(
+    initiallyActiveScopes?.length > 0 ? initiallyActiveScopes : ['*']
+  )
+  const [boundHotkeys, setBoundHotkeys] = useState<Hotkey[]>([])
+
+  const enableScope = useCallback((scope: string) => {
+    setInternalActiveScopes((prev) => {
+      if (prev.includes('*')) {
+        return [scope]
+      }
+
+      return Array.from(new Set([...prev, scope]))
+    })
+  }, [])
+
+  const disableScope = useCallback((scope: string) => {
+    setInternalActiveScopes((prev) => {
+      if (prev.filter((s) => s !== scope).length === 0) {
+        return ['*']
+      } else {
+        return prev.filter((s) => s !== scope)
+      }
+    })
+  }, [])
+
+  const toggleScope = useCallback((scope: string) => {
+    setInternalActiveScopes((prev) => {
+      if (prev.includes(scope)) {
+        if (prev.filter((s) => s !== scope).length === 0) {
+          return ['*']
+        } else {
+          return prev.filter((s) => s !== scope)
+        }
+      } else {
+        if (prev.includes('*')) {
+          return [scope]
+        }
+
+        return Array.from(new Set([...prev, scope]))
+      }
+    })
+  }, [])
+
+  const addBoundHotkey = useCallback((hotkey: Hotkey) => {
+    setBoundHotkeys((prev) => [...prev, hotkey])
+  }, [])
+
+  const removeBoundHotkey = useCallback((hotkey: Hotkey) => {
+    setBoundHotkeys((prev) => prev.filter((h) => !Utilities.deepEqual(h, hotkey)))
+  }, [])
+
+  return (
+    <HotkeysContext.Provider
+      value={{ enabledScopes: internalActiveScopes, hotkeys: boundHotkeys, enableScope, disableScope, toggleScope }}
+    >
+      <BoundHotkeysProxyProviderProvider addHotkey={addBoundHotkey} removeHotkey={removeBoundHotkey}>
+        {children}
+      </BoundHotkeysProxyProviderProvider>
+    </HotkeysContext.Provider>
+  )
+}
+
+================
+File: reference/modules/hotkeys/index.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/index.ts
+
+import useHotkeys from '@modules/hotkeys/use-hotkeys'
+import type { Options, Keys, HotkeyCallback } from '@modules/hotkeys/types'
+import { HotkeysProvider, useHotkeysContext } from '@modules/hotkeys/hotkeys-provider'
+import { isHotkeyPressed } from '@modules/hotkeys/is-hotkey-pressed'
+import useRecordHotkeys from '@modules/hotkeys/use-record-hotkeys'
+
+export {
+  useHotkeys,
+  useRecordHotkeys,
+  useHotkeysContext,
+  isHotkeyPressed,
+  HotkeysProvider,
+  Options,
+  Keys,
+  HotkeyCallback,
+}
+
+================
+File: reference/modules/hotkeys/is-hotkey-pressed.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/isHotkeyPressed.ts
+
+import { isHotkeyModifier, mapKey } from '@modules/hotkeys/parse-hotkeys'
+;(() => {
+  if (typeof document !== 'undefined') {
+    document.addEventListener('keydown', (e) => {
+      if (e.key === undefined) {
+        // Synthetic event (e.g., Chrome autofill).  Ignore.
+        return
+      }
+
+      pushToCurrentlyPressedKeys([mapKey(e.key), mapKey(e.code)])
+    })
+
+    document.addEventListener('keyup', (e) => {
+      if (e.key === undefined) {
+        // Synthetic event (e.g., Chrome autofill).  Ignore.
+        return
+      }
+
+      removeFromCurrentlyPressedKeys([mapKey(e.key), mapKey(e.code)])
+    })
+  }
+
+  if (typeof window !== 'undefined') {
+    window.addEventListener('blur', () => {
+      currentlyPressedKeys.clear()
+    })
+  }
+})()
+
+const currentlyPressedKeys: Set<string> = new Set<string>()
+
+// https://github.com/microsoft/TypeScript/issues/17002
+export function isReadonlyArray(value: unknown): value is readonly unknown[] {
+  return Array.isArray(value)
+}
+
+export function isHotkeyPressed(key: string | readonly string[], splitKey = ','): boolean {
+  const hotkeyArray = isReadonlyArray(key) ? key : key.split(splitKey)
+
+  return hotkeyArray.every((hotkey) => currentlyPressedKeys.has(hotkey.trim().toLowerCase()))
+}
+
+export function pushToCurrentlyPressedKeys(key: string | string[]): void {
+  const hotkeyArray = Array.isArray(key) ? key : [key]
+
+  /*
+  Due to a weird behavior on macOS we need to clear the set if the user pressed down the meta key and presses another key.
+  https://stackoverflow.com/questions/11818637/why-does-javascript-drop-keyup-events-when-the-metakey-is-pressed-on-mac-browser
+  Otherwise the set will hold all ever pressed keys while the meta key is down which leads to wrong results.
+   */
+  if (currentlyPressedKeys.has('meta')) {
+    currentlyPressedKeys.forEach((key) => !isHotkeyModifier(key) && currentlyPressedKeys.delete(key.toLowerCase()))
+  }
+
+  hotkeyArray.forEach((hotkey) => currentlyPressedKeys.add(hotkey.toLowerCase()))
+}
+
+export function removeFromCurrentlyPressedKeys(key: string | string[]): void {
+  const hotkeyArray = Array.isArray(key) ? key : [key]
+
+  /*
+  Due to a weird behavior on macOS we need to clear the set if the user pressed down the meta key and presses another key.
+  https://stackoverflow.com/questions/11818637/why-does-javascript-drop-keyup-events-when-the-metakey-is-pressed-on-mac-browser
+  Otherwise the set will hold all ever pressed keys while the meta key is down which leads to wrong results.
+   */
+  if (key === 'meta') {
+    currentlyPressedKeys.clear()
+  } else {
+    hotkeyArray.forEach((hotkey) => currentlyPressedKeys.delete(hotkey.toLowerCase()))
+  }
+}
+
+================
+File: reference/modules/hotkeys/parse-hotkeys.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/parseHotkeys.ts
+
+import { Hotkey, KeyboardModifiers } from '@modules/hotkeys/types'
+
+const reservedModifierKeywords = ['shift', 'alt', 'meta', 'mod', 'ctrl']
+
+const mappedKeys: Record<string, string> = {
+  esc: 'escape',
+  return: 'enter',
+  '.': 'period',
+  ',': 'comma',
+  '-': 'slash',
+  ' ': 'space',
+  '`': 'backquote',
+  '#': 'backslash',
+  '+': 'bracketright',
+  ShiftLeft: 'shift',
+  ShiftRight: 'shift',
+  AltLeft: 'alt',
+  AltRight: 'alt',
+  MetaLeft: 'meta',
+  MetaRight: 'meta',
+  OSLeft: 'meta',
+  OSRight: 'meta',
+  ControlLeft: 'ctrl',
+  ControlRight: 'ctrl',
+}
+
+export function mapKey(key?: string): string {
+  return ((key && mappedKeys[key]) || key || '')
+    .trim()
+    .toLowerCase()
+    .replace(/key|digit|numpad|arrow/, '')
+}
+
+export function isHotkeyModifier(key: string) {
+  return reservedModifierKeywords.includes(key)
+}
+
+export function parseKeysHookInput(keys: string, splitKey = ','): string[] {
+  return keys.split(splitKey)
+}
+
+export function parseHotkey(hotkey: string, combinationKey = '+', description?: string): Hotkey {
+  const keys = hotkey
+    .toLocaleLowerCase()
+    .split(combinationKey)
+    .map((k) => mapKey(k))
+
+  const modifiers: KeyboardModifiers = {
+    alt: keys.includes('alt'),
+    ctrl: keys.includes('ctrl') || keys.includes('control'),
+    shift: keys.includes('shift'),
+    meta: keys.includes('meta'),
+    mod: keys.includes('mod'),
+  }
+
+  const singleCharKeys = keys.filter((k) => !reservedModifierKeywords.includes(k))
+
+  return {
+    ...modifiers,
+    keys: singleCharKeys,
+    description,
+    hotkey,
+  }
+}
+
+================
+File: reference/modules/hotkeys/types.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/types.ts
+import type { DependencyList } from 'react'
+
+export type FormTags = 'input' | 'textarea' | 'select' | 'INPUT' | 'TEXTAREA' | 'SELECT'
+export type Keys = string | readonly string[]
+export type Scopes = string | readonly string[]
+
+export type RefType<T> = T | null
+
+export type KeyboardModifiers = {
+  alt?: boolean
+  ctrl?: boolean
+  meta?: boolean
+  shift?: boolean
+  mod?: boolean
+}
+
+export type Hotkey = KeyboardModifiers & {
+  keys?: readonly string[]
+  scopes?: Scopes
+  description?: string
+  hotkey: string
+}
+
+export type HotkeysEvent = Hotkey
+
+export type HotkeyCallback = (keyboardEvent: KeyboardEvent, hotkeysEvent: HotkeysEvent) => void
+
+export type Trigger = boolean | ((keyboardEvent: KeyboardEvent, hotkeysEvent: HotkeysEvent) => boolean)
+
+export type Options = {
+  enabled?: Trigger // Main setting that determines if the hotkey is enabled or not. (Default: true)
+  enableOnFormTags?: readonly FormTags[] | boolean // Enable hotkeys on a list of tags. (Default: false)
+  enableOnContentEditable?: boolean // Enable hotkeys on tags with contentEditable props. (Default: false)
+  ignoreEventWhen?: (e: KeyboardEvent) => boolean // Ignore evenets based on a condition (Default: undefined)
+  combinationKey?: string // Character to split keys in hotkeys combinations. (Default: +)
+  splitKey?: string // Character to separate different hotkeys. (Default: ,)
+  scopes?: Scopes // Scope
+  keyup?: boolean // Trigger on keyup event? (Default: undefined)
+  keydown?: boolean // Trigger on keydown event? (Default: true)
+  preventDefault?: Trigger // Prevent default browser behavior? (Default: false)
+  description?: string // Use this option to describe what the hotkey does. (Default: undefined)
+  document?: Document // Listen to events on the document instead of the window. (Default: false)
+  ignoreModifiers?: boolean // Ignore modifiers when matching hotkeys. (Default: false)
+}
+
+export type OptionsOrDependencyArray = Options | DependencyList
+
+================
+File: reference/modules/hotkeys/use-deep-equal-memo.ts
+================
+import { useRef } from 'react'
+
+import * as Utilities from '@common/utilities';
+
+export default function useDeepEqualMemo<T>(value: T) {
+  const ref = useRef<T | undefined>(undefined)
+
+  if (!Utilities.deepEqual(ref.current, value)) {
+    ref.current = value
+  }
+
+  return ref.current
+}
+
+================
+File: reference/modules/hotkeys/use-hotkeys.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/useHotkeys.ts
+
+import { HotkeyCallback, Keys, Options, OptionsOrDependencyArray, RefType } from '@modules/hotkeys/types'
+import { DependencyList, RefCallback, useCallback, useEffect, useState, useLayoutEffect, useRef } from 'react'
+import { mapKey, parseHotkey, parseKeysHookInput } from '@modules/hotkeys/parse-hotkeys'
+import {
+  isHotkeyEnabled,
+  isHotkeyEnabledOnTag,
+  isHotkeyMatchingKeyboardEvent,
+  isKeyboardEventTriggeredByInput,
+  isScopeActive,
+  maybePreventDefault,
+} from '@modules/hotkeys/validators'
+import { useHotkeysContext } from '@modules/hotkeys/hotkeys-provider'
+import { useBoundHotkeysProxy } from '@modules/hotkeys/bound-hotkeys-proxy-provider'
+import useDeepEqualMemo from '@modules/hotkeys/use-deep-equal-memo'
+import { isReadonlyArray, pushToCurrentlyPressedKeys, removeFromCurrentlyPressedKeys } from '@modules/hotkeys/is-hotkey-pressed'
+
+const stopPropagation = (e: KeyboardEvent): void => {
+  e.stopPropagation()
+  e.preventDefault()
+  e.stopImmediatePropagation()
+}
+
+const useSafeLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect
+
+export default function useHotkeys<T extends HTMLElement>(
+  keys: Keys,
+  callback: HotkeyCallback,
+  options?: OptionsOrDependencyArray,
+  dependencies?: OptionsOrDependencyArray
+) {
+  const [ref, setRef] = useState<RefType<T>>(null)
+  const hasTriggeredRef = useRef(false)
+
+  const _options: Options | undefined = !(options instanceof Array)
+    ? (options as Options)
+    : !(dependencies instanceof Array)
+    ? (dependencies as Options)
+    : undefined
+  const _keys: string = isReadonlyArray(keys) ? keys.join(_options?.splitKey) : keys
+  const _deps: DependencyList | undefined =
+    options instanceof Array ? options : dependencies instanceof Array ? dependencies : undefined
+
+  const memoisedCB = useCallback(callback, _deps ?? [])
+  const cbRef = useRef<HotkeyCallback>(memoisedCB)
+
+  if (_deps) {
+    cbRef.current = memoisedCB
+  } else {
+    cbRef.current = callback
+  }
+
+  const memoisedOptions = useDeepEqualMemo(_options)
+
+  const { enabledScopes } = useHotkeysContext()
+  const proxy = useBoundHotkeysProxy()
+
+  useSafeLayoutEffect(() => {
+    if (memoisedOptions?.enabled === false || !isScopeActive(enabledScopes, memoisedOptions?.scopes)) {
+      return
+    }
+
+    const listener = (e: KeyboardEvent, isKeyUp = false) => {
+      if (isKeyboardEventTriggeredByInput(e) && !isHotkeyEnabledOnTag(e, memoisedOptions?.enableOnFormTags)) {
+        return
+      }
+
+      // TODO: SINCE THE EVENT IS NOW ATTACHED TO THE REF, THE ACTIVE ELEMENT CAN NEVER BE INSIDE THE REF. THE HOTKEY ONLY TRIGGERS IF THE
+      // REF IS THE ACTIVE ELEMENT. THIS IS A PROBLEM SINCE FOCUSED SUB COMPONENTS WON'T TRIGGER THE HOTKEY.
+      if (ref !== null) {
+        const rootNode = ref.getRootNode()
+        if (
+          (rootNode instanceof Document || rootNode instanceof ShadowRoot) &&
+          rootNode.activeElement !== ref &&
+          !ref.contains(rootNode.activeElement)
+        ) {
+          stopPropagation(e)
+          return
+        }
+      }
+
+      if ((e.target as HTMLElement)?.isContentEditable && !memoisedOptions?.enableOnContentEditable) {
+        return
+      }
+
+      parseKeysHookInput(_keys, memoisedOptions?.splitKey).forEach((key) => {
+        const hotkey = parseHotkey(key, memoisedOptions?.combinationKey)
+
+        if (isHotkeyMatchingKeyboardEvent(e, hotkey, memoisedOptions?.ignoreModifiers) || hotkey.keys?.includes('*')) {
+          if (memoisedOptions?.ignoreEventWhen?.(e)) {
+            return
+          }
+
+          if (isKeyUp && hasTriggeredRef.current) {
+            return
+          }
+
+          maybePreventDefault(e, hotkey, memoisedOptions?.preventDefault)
+
+          if (!isHotkeyEnabled(e, hotkey, memoisedOptions?.enabled)) {
+            stopPropagation(e)
+
+            return
+          }
+
+          // Execute the user callback for that hotkey
+          cbRef.current(e, hotkey)
+
+          if (!isKeyUp) {
+            hasTriggeredRef.current = true
+          }
+        }
+      })
+    }
+
+    const handleKeyDown = (event: KeyboardEvent) => {
+      if (event.key === undefined) {
+        // Synthetic event (e.g., Chrome autofill).  Ignore.
+        return
+      }
+
+      pushToCurrentlyPressedKeys(mapKey(event.code))
+
+      if ((memoisedOptions?.keydown === undefined && memoisedOptions?.keyup !== true) || memoisedOptions?.keydown) {
+        listener(event)
+      }
+    }
+
+    const handleKeyUp = (event: KeyboardEvent) => {
+      if (event.key === undefined) {
+        // Synthetic event (e.g., Chrome autofill).  Ignore.
+        return
+      }
+
+      removeFromCurrentlyPressedKeys(mapKey(event.code))
+
+      hasTriggeredRef.current = false
+
+      if (memoisedOptions?.keyup) {
+        listener(event, true)
+      }
+    }
+
+    const domNode = ref || _options?.document || document
+
+    // @ts-ignore
+    domNode.addEventListener('keyup', handleKeyUp)
+    // @ts-ignore
+    domNode.addEventListener('keydown', handleKeyDown)
+
+    if (proxy) {
+      parseKeysHookInput(_keys, memoisedOptions?.splitKey).forEach((key) =>
+        proxy.addHotkey(parseHotkey(key, memoisedOptions?.combinationKey, memoisedOptions?.description))
+      )
+    }
+
+    return () => {
+      // @ts-ignore
+      domNode.removeEventListener('keyup', handleKeyUp)
+      // @ts-ignore
+      domNode.removeEventListener('keydown', handleKeyDown)
+
+      if (proxy) {
+        parseKeysHookInput(_keys, memoisedOptions?.splitKey).forEach((key) =>
+          proxy.removeHotkey(parseHotkey(key, memoisedOptions?.combinationKey, memoisedOptions?.description))
+        )
+      }
+    }
+  }, [ref, _keys, memoisedOptions, enabledScopes])
+
+  return setRef as RefCallback<T>
+}
+
+================
+File: reference/modules/hotkeys/use-record-hotkeys.ts
+================
+import { useCallback, useState } from 'react'
+import { mapKey } from '@modules/hotkeys/parse-hotkeys'
+
+export default function useRecordHotkeys() {
+  const [keys, setKeys] = useState(new Set<string>())
+  const [isRecording, setIsRecording] = useState(false)
+
+  const handler = useCallback((event: KeyboardEvent) => {
+    if (event.key === undefined) {
+      // Synthetic event (e.g., Chrome autofill).  Ignore.
+      return
+    }
+
+    event.preventDefault()
+    event.stopPropagation()
+
+    setKeys((prev) => {
+      const newKeys = new Set(prev)
+
+      newKeys.add(mapKey(event.code))
+
+      return newKeys
+    })
+  }, [])
+
+  const stop = useCallback(() => {
+    if (typeof document !== 'undefined') {
+      document.removeEventListener('keydown', handler)
+
+      setIsRecording(false)
+    }
+  }, [handler])
+
+  const start = useCallback(() => {
+    setKeys(new Set<string>())
+
+    if (typeof document !== 'undefined') {
+      stop()
+
+      document.addEventListener('keydown', handler)
+
+      setIsRecording(true)
+    }
+  }, [handler, stop])
+
+  const resetKeys = useCallback(() => {
+    setKeys(new Set<string>())
+  }, [])
+
+  return [keys, { start, stop, resetKeys, isRecording }] as const
+}
+
+================
+File: reference/modules/hotkeys/validators.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/validators.ts
+
+import { FormTags, Hotkey, Scopes, Trigger } from '@modules/hotkeys/types'
+import { isHotkeyPressed, isReadonlyArray } from '@modules/hotkeys/is-hotkey-pressed'
+import { mapKey } from '@modules/hotkeys/parse-hotkeys'
+
+export function maybePreventDefault(e: KeyboardEvent, hotkey: Hotkey, preventDefault?: Trigger): void {
+  if ((typeof preventDefault === 'function' && preventDefault(e, hotkey)) || preventDefault === true) {
+    e.preventDefault()
+  }
+}
+
+export function isHotkeyEnabled(e: KeyboardEvent, hotkey: Hotkey, enabled?: Trigger): boolean {
+  if (typeof enabled === 'function') {
+    return enabled(e, hotkey)
+  }
+
+  return enabled === true || enabled === undefined
+}
+
+export function isKeyboardEventTriggeredByInput(ev: KeyboardEvent): boolean {
+  return isHotkeyEnabledOnTag(ev, ['input', 'textarea', 'select'])
+}
+
+export function isHotkeyEnabledOnTag(
+  event: KeyboardEvent,
+  enabledOnTags: readonly FormTags[] | boolean = false
+): boolean {
+  const {target, composed} = event;
+
+  let targetTagName: string | null = null
+
+  if (isCustomElement(target as HTMLElement) && composed) {
+    targetTagName = event.composedPath()[0] && (event.composedPath()[0] as HTMLElement).tagName;
+  } else {
+    targetTagName = target && (target as HTMLElement).tagName;
+  }
+
+  if (isReadonlyArray(enabledOnTags)) {
+    return Boolean(
+      targetTagName && enabledOnTags && enabledOnTags.some((tag) => tag.toLowerCase() === targetTagName?.toLowerCase())
+    )
+  }
+
+  return Boolean(targetTagName && enabledOnTags && enabledOnTags)
+}
+
+export function isCustomElement(element: HTMLElement): boolean {
+  // We just do a basic check w/o any complex RegEx or validation against the list of legacy names containing a hyphen,
+  // as none of them is likely to be an event target, and it won't hurt anyway if we miss.
+  // see: https://html.spec.whatwg.org/multipage/custom-elements.html#prod-potentialcustomelementname
+  return !!element.tagName && !element.tagName.startsWith("-") && element.tagName.includes("-");
+}
+
+export function isScopeActive(activeScopes: string[], scopes?: Scopes): boolean {
+  if (activeScopes.length === 0 && scopes) {
+    console.warn(
+      'A hotkey has the "scopes" option set, however no active scopes were found. If you want to use the global scopes feature, you need to wrap your app in a <HotkeysProvider>'
+    )
+
+    return true
+  }
+
+  if (!scopes) {
+    return true
+  }
+
+  return activeScopes.some((scope) => scopes.includes(scope)) || activeScopes.includes('*')
+}
+
+export const isHotkeyMatchingKeyboardEvent = (e: KeyboardEvent, hotkey: Hotkey, ignoreModifiers = false): boolean => {
+  const { alt, meta, mod, shift, ctrl, keys } = hotkey
+  const { key: pressedKeyUppercase, code, ctrlKey, metaKey, shiftKey, altKey } = e
+
+  const keyCode = mapKey(code)
+  const pressedKey = pressedKeyUppercase.toLowerCase()
+
+  if (
+    !keys?.includes(keyCode) &&
+    !keys?.includes(pressedKey) &&
+    !['ctrl', 'control', 'unknown', 'meta', 'alt', 'shift', 'os'].includes(keyCode)
+  ) {
+    return false
+  }
+
+  if (!ignoreModifiers) {
+    // We check the pressed keys for compatibility with the keyup event. In keyup events the modifier flags are not set.
+    if (alt === !altKey && pressedKey !== 'alt') {
+      return false
+    }
+
+    if (shift === !shiftKey && pressedKey !== 'shift') {
+      return false
+    }
+
+    // Mod is a special key name that is checking for meta on macOS and ctrl on other platforms
+    if (mod) {
+      if (!metaKey && !ctrlKey) {
+        return false
+      }
+    } else {
+      if (meta === !metaKey && pressedKey !== 'meta' && pressedKey !== 'os') {
+        return false
+      }
+
+      if (ctrl === !ctrlKey && pressedKey !== 'ctrl' && pressedKey !== 'control') {
+        return false
+      }
+    }
+  }
+
+  // All modifiers are correct, now check the key
+  // If the key is set, we check for the key
+  if (keys && keys.length === 1 && (keys.includes(pressedKey) || keys.includes(keyCode))) {
+    return true
+  } else if (keys) {
+    // Check if all keys are present in pressedDownKeys set
+    return isHotkeyPressed(keys)
+  } else if (!keys) {
+    // If the key is not set, we only listen for modifiers, that check went alright, so we return true
+    return true
+  }
+
+  // There is nothing that matches.
+  return false
+}
+
+================
+File: reference/modules/cors.ts
+================
+// @ts-nocheck
+
+'use strict';
+
+import assign from '@modules/object-assign';
+import vary from '@modules/vary';
+
+var defaults = {
+  origin: '*',
+  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
+  preflightContinue: false,
+  optionsSuccessStatus: 204,
+};
+
+function isString(s) {
+  return typeof s === 'string' || s instanceof String;
+}
+
+function isOriginAllowed(origin, allowedOrigin) {
+  if (Array.isArray(allowedOrigin)) {
+    for (var i = 0; i < allowedOrigin.length; ++i) {
+      if (isOriginAllowed(origin, allowedOrigin[i])) {
+        return true;
+      }
+    }
+    return false;
+  } else if (isString(allowedOrigin)) {
+    return origin === allowedOrigin;
+  } else if (allowedOrigin instanceof RegExp) {
+    return allowedOrigin.test(origin);
+  } else {
+    return !!allowedOrigin;
+  }
+}
+
+function configureOrigin(options, req) {
+  var requestOrigin = req.headers.origin,
+    headers = [],
+    isAllowed;
+
+  if (!options.origin || options.origin === '*') {
+    // allow any origin
+    headers.push([
+      {
+        key: 'Access-Control-Allow-Origin',
+        value: '*',
+      },
+    ]);
+  } else if (isString(options.origin)) {
+    // fixed origin
+    headers.push([
+      {
+        key: 'Access-Control-Allow-Origin',
+        value: options.origin,
+      },
+    ]);
+    headers.push([
+      {
+        key: 'Vary',
+        value: 'Origin',
+      },
+    ]);
+  } else {
+    isAllowed = isOriginAllowed(requestOrigin, options.origin);
+    // reflect origin
+    headers.push([
+      {
+        key: 'Access-Control-Allow-Origin',
+        value: isAllowed ? requestOrigin : false,
+      },
+    ]);
+    headers.push([
+      {
+        key: 'Vary',
+        value: 'Origin',
+      },
+    ]);
+  }
+
+  return headers;
+}
+
+function configureMethods(options) {
+  var methods = options.methods;
+  if (methods.join) {
+    methods = options.methods.join(','); // .methods is an array, so turn it into a string
+  }
+  return {
+    key: 'Access-Control-Allow-Methods',
+    value: methods,
+  };
+}
+
+function configureCredentials(options) {
+  if (options.credentials === true) {
+    return {
+      key: 'Access-Control-Allow-Credentials',
+      value: 'true',
+    };
+  }
+  return null;
+}
+
+function configureAllowedHeaders(options, req) {
+  var allowedHeaders = options.allowedHeaders || options.headers;
+  var headers = [];
+
+  if (!allowedHeaders) {
+    allowedHeaders = req.headers['access-control-request-headers']; // .headers wasn't specified, so reflect the request headers
+    headers.push([
+      {
+        key: 'Vary',
+        value: 'Access-Control-Request-Headers',
+      },
+    ]);
+  } else if (allowedHeaders.join) {
+    allowedHeaders = allowedHeaders.join(','); // .headers is an array, so turn it into a string
+  }
+  if (allowedHeaders && allowedHeaders.length) {
+    headers.push([
+      {
+        key: 'Access-Control-Allow-Headers',
+        value: allowedHeaders,
+      },
+    ]);
+  }
+
+  return headers;
+}
+
+function configureExposedHeaders(options) {
+  var headers = options.exposedHeaders;
+  if (!headers) {
+    return null;
+  } else if (headers.join) {
+    headers = headers.join(','); // .headers is an array, so turn it into a string
+  }
+  if (headers && headers.length) {
+    return {
+      key: 'Access-Control-Expose-Headers',
+      value: headers,
+    };
+  }
+  return null;
+}
+
+function configureMaxAge(options) {
+  var maxAge = (typeof options.maxAge === 'number' || options.maxAge) && options.maxAge.toString();
+  if (maxAge && maxAge.length) {
+    return {
+      key: 'Access-Control-Max-Age',
+      value: maxAge,
+    };
+  }
+  return null;
+}
+
+function applyHeaders(headers, res) {
+  for (var i = 0, n = headers.length; i < n; i++) {
+    var header = headers[i];
+    if (header) {
+      if (Array.isArray(header)) {
+        applyHeaders(header, res);
+      } else if (header.key === 'Vary' && header.value) {
+        vary(res, header.value);
+      } else if (header.value) {
+        res.setHeader(header.key, header.value);
+      }
+    }
+  }
+}
+
+function cors(options, req, res, next) {
+  var headers = [],
+    method = req.method && req.method.toUpperCase && req.method.toUpperCase();
+
+  if (method === 'OPTIONS') {
+    // preflight
+    headers.push(configureOrigin(options, req));
+    headers.push(configureCredentials(options));
+    headers.push(configureMethods(options));
+    headers.push(configureAllowedHeaders(options, req));
+    headers.push(configureMaxAge(options));
+    headers.push(configureExposedHeaders(options));
+    applyHeaders(headers, res);
+
+    if (options.preflightContinue) {
+      next();
+    } else {
+      // Safari (and potentially other browsers) need content-length 0,
+      //   for 204 or they just hang waiting for a body
+      res.statusCode = options.optionsSuccessStatus;
+      res.setHeader('Content-Length', '0');
+      res.end();
+    }
+  } else {
+    // actual response
+    headers.push(configureOrigin(options, req));
+    headers.push(configureCredentials(options));
+    headers.push(configureExposedHeaders(options));
+    applyHeaders(headers, res);
+    next();
+  }
+}
+
+function middlewareWrapper(o) {
+  // if options are static (either via defaults or custom options passed in), wrap in a function
+  var optionsCallback = null;
+  if (typeof o === 'function') {
+    optionsCallback = o;
+  } else {
+    optionsCallback = function (req, cb) {
+      cb(null, o);
+    };
+  }
+
+  return function corsMiddleware(req, res, next) {
+    optionsCallback(req, function (err, options) {
+      if (err) {
+        next(err);
+      } else {
+        var corsOptions = assign({}, defaults, options);
+        var originCallback = null;
+        if (corsOptions.origin && typeof corsOptions.origin === 'function') {
+          originCallback = corsOptions.origin;
+        } else if (corsOptions.origin) {
+          originCallback = function (origin, cb) {
+            cb(null, corsOptions.origin);
+          };
+        }
+
+        if (originCallback) {
+          originCallback(req.headers.origin, function (err2, origin) {
+            if (err2 || !origin) {
+              next(err2);
+            } else {
+              corsOptions.origin = origin;
+              cors(corsOptions, req, res, next);
+            }
+          });
+        } else {
+          next();
+        }
+      }
+    });
+  };
+}
+
+export default middlewareWrapper;
+
+================
+File: reference/modules/object-assign.ts
+================
+// @ts-nocheck
+
+/*
+object-assign
+(c) Sindre Sorhus
+@license MIT
+*/
+
+'use strict';
+
+/* eslint-disable no-unused-vars */
+var getOwnPropertySymbols = Object.getOwnPropertySymbols;
+var hasOwnProperty = Object.prototype.hasOwnProperty;
+var propIsEnumerable = Object.prototype.propertyIsEnumerable;
+
+function toObject(val) {
+  if (val === null || val === undefined) {
+    throw new TypeError('Object.assign cannot be called with null or undefined');
+  }
+
+  return Object(val);
+}
+
+function shouldUseNative() {
+  try {
+    if (!Object.assign) {
+      return false;
+    }
+
+    // Detect buggy property enumeration order in older V8 versions.
+
+    // https://bugs.chromium.org/p/v8/issues/detail?id=4118
+    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
+    // @ts-ignore
+    test1[5] = 'de';
+    if (Object.getOwnPropertyNames(test1)[0] === '5') {
+      return false;
+    }
+
+    // https://bugs.chromium.org/p/v8/issues/detail?id=3056
+    var test2 = {};
+    for (var i = 0; i < 10; i++) {
+      test2['_' + String.fromCharCode(i)] = i;
+    }
+    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
+      return test2[n];
+    });
+    if (order2.join('') !== '0123456789') {
+      return false;
+    }
+
+    // https://bugs.chromium.org/p/v8/issues/detail?id=3056
+    var test3 = {};
+    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
+      test3[letter] = letter;
+    });
+    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
+      return false;
+    }
+
+    return true;
+  } catch (err) {
+    // We don't expect any of the above to throw, but better to be safe.
+    return false;
+  }
+}
+
+const assign = shouldUseNative()
+  ? Object.assign
+  : function (target, source) {
+      var from;
+      var to = toObject(target);
+      var symbols;
+
+      for (var s = 1; s < arguments.length; s++) {
+        from = Object(arguments[s]);
+
+        for (var key in from) {
+          if (hasOwnProperty.call(from, key)) {
+            to[key] = from[key];
+          }
+        }
+
+        if (getOwnPropertySymbols) {
+          symbols = getOwnPropertySymbols(from);
+          for (var i = 0; i < symbols.length; i++) {
+            if (propIsEnumerable.call(from, symbols[i])) {
+              to[symbols[i]] = from[symbols[i]];
+            }
+          }
+        }
+      }
+
+      return to;
+    };
+
+export default assign;
+
+================
+File: reference/modules/vary.ts
+================
+// @ts-nocheck
+
+/*!
+ * vary
+ * Copyright(c) 2014-2017 Douglas Christopher Wilson
+ * MIT Licensed
+ */
+
+'use strict';
+
+/**
+ * RegExp to match field-name in RFC 7230 sec 3.2
+ *
+ * field-name    = token
+ * token         = 1*tchar
+ * tchar         = "!" / "#" / "$" / "%" / "&" / "'" / "*"
+ *               / "+" / "-" / "." / "^" / "_" / "`" / "|" / "~"
+ *               / DIGIT / ALPHA
+ *               ; any VCHAR, except delimiters
+ */
+
+var FIELD_NAME_REGEXP = /^[!#$%&'*+\-.^_`|~0-9A-Za-z]+$/;
+
+/**
+ * Append a field to a vary header.
+ *
+ * @param {String} header
+ * @param {String|Array} field
+ * @return {String}
+ * @public
+ */
+
+function append(header, field) {
+  if (typeof header !== 'string') {
+    throw new TypeError('header argument is required');
+  }
+
+  if (!field) {
+    throw new TypeError('field argument is required');
+  }
+
+  // get fields array
+  var fields = !Array.isArray(field) ? parse(String(field)) : field;
+
+  // assert on invalid field names
+  for (var j = 0; j < fields.length; j++) {
+    if (!FIELD_NAME_REGEXP.test(fields[j])) {
+      throw new TypeError('field argument contains an invalid header name');
+    }
+  }
+
+  // existing, unspecified vary
+  if (header === '*') {
+    return header;
+  }
+
+  // enumerate current values
+  var val = header;
+  var vals = parse(header.toLowerCase());
+
+  // unspecified vary
+  if (fields.indexOf('*') !== -1 || vals.indexOf('*') !== -1) {
+    return '*';
+  }
+
+  for (var i = 0; i < fields.length; i++) {
+    var fld = fields[i].toLowerCase();
+
+    // append value (case-preserving)
+    if (vals.indexOf(fld) === -1) {
+      vals.push(fld);
+      val = val ? val + ', ' + fields[i] : fields[i];
+    }
+  }
+
+  return val;
+}
+
+/**
+ * Parse a vary header into an array.
+ *
+ * @param {String} header
+ * @return {Array}
+ * @private
+ */
+
+function parse(header) {
+  var end = 0;
+  var list = [];
+  var start = 0;
+
+  // gather tokens
+  for (var i = 0, len = header.length; i < len; i++) {
+    switch (header.charCodeAt(i)) {
+      case 0x20 /*   */:
+        if (start === end) {
+          start = end = i + 1;
+        }
+        break;
+      case 0x2c /* , */:
+        list.push(header.substring(start, end));
+        start = end = i + 1;
+        break;
+      default:
+        end = i + 1;
+        break;
+    }
+  }
+
+  // final token
+  list.push(header.substring(start, end));
+
+  return list;
+}
+
+/**
+ * Mark that a request is varied on a header field.
+ *
+ * @param {Object} res
+ * @param {String|Array} field
+ * @public
+ */
+
+function vary(res, field) {
+  if (!res || !res.getHeader || !res.setHeader) {
+    // quack quack
+    throw new TypeError('res argument is required');
+  }
+
+  // get existing header
+  var val = res.getHeader('Vary') || '';
+  var header = Array.isArray(val) ? val.join(', ') : String(val);
+
+  // set new header
+  if ((val = append(header, field))) {
+    res.setHeader('Vary', val);
+  }
+}
+
+export default vary;
+
+================
+File: reference/pages/api/index.ts
+================
+import * as Server from '@common/server';
+import * as Constants from '@common/constants';
+
+export default async function apiIndex(req, res) {
+  await Server.cors(req, res);
+
+  res.json({
+    success: true,
+    message: 'hey there, friend.',
+  });
+}
+
+================
+File: reference/pages/_app.tsx
+================
+import '@root/global.scss';
+
+import * as React from 'react';
+
+import Providers from '@components/Providers';
+
+function MyApp({ Component, pageProps }) {
+  return (
+    <Providers>
+      <Component {...pageProps} />
+    </Providers>
+  );
+}
+
+export default MyApp;
+
+================
+File: reference/pages/_document.tsx
+================
+import Document, { Html, Head, Main, NextScript } from 'next/document';
+
+export default class MyDocument extends Document {
+  render() {
+    return (
+      <Html>
+        <Head />
+        <body className="theme-light">
+          <Main />
+          <NextScript />
+        </body>
+      </Html>
+    );
+  }
+}
+
+================
+File: reference/.gitignore
+================
+.next
+.nova
+.env
+.env.local
+.env-custom-development
+.env-development
+.env-textile
+.env-production
+.DS_STORE
+DS_STORE
+yarn.lock
+node_modules
+dist
+analytics.txt
+package-lock.json
+
+/**/*/.DS_STORE
+/**/*/node_modules
+/**/*/.next
+/**/*/.data
+
+================
+File: reference/.prettierrc
+================
+{
+  "printWidth": 9999,
+  "tabWidth": 2,
+  "useTabs": false,
+  "semi": true,
+  "singleQuote": true,
+  "trailingComma": "es5",
+  "bracketSpacing": true,
+  "jsxBracketSameLine": false,
+  "arrowParens": "always",
+  "requirePragma": false,
+  "insertPragma": false,
+  "proseWrap": "preserve",
+  "parser": "babel-ts",
+  "overrides": [
+    {
+      "files": "*.js",
+      "options": {
+        "parser": "babel"
+      }
+    }
+  ]
+}
+
+================
+File: reference/global.scss
+================
+@font-face {
+  font-family: 'IosevkaTerm-Regular';
+  src: url('https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/6397be61-3ea4-459d-8a3e-fd95168cb214.woff2') format('woff2');
+}
+
+a,
+abbr,
+acronym,
+address,
+applet,
+article,
+aside,
+audio,
+b,
+big,
+blockquote,
+body,
+canvas,
+caption,
+center,
+cite,
+code,
+dd,
+del,
+details,
+dfn,
+div,
+dl,
+dt,
+embed,
+em,
+figure,
+figcaption,
+fieldset,
+footer,
+form,
+h1,
+h2,
+h3,
+h4,
+h5,
+h6,
+header,
+hgroup,
+html,
+i,
+iframe,
+img,
+ins,
+kbd,
+label,
+legend,
+li,
+mark,
+menu,
+nav,
+object,
+ol,
+output,
+p,
+pre,
+q,
+ruby,
+s,
+samp,
+section,
+small,
+span,
+strike,
+strong,
+sub,
+summary,
+sup,
+table,
+tbody,
+td,
+tfoot,
+th,
+thead,
+time,
+tr,
+tt,
+u,
+ul,
+var,
+video {
+  border: 0;
+  box-sizing: border-box;
+  margin: 0;
+  padding: 0;
+  vertical-align: baseline;
+}
+
+a {
+  background: var(--theme-border-subdued);
+  color: var(--theme-text);
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+    color: var(--theme-text);
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    color: var(--theme-text);
+    outline: 0;
+  }
+}
+
+ul {
+  list-style-position: inside;
+  list-style-type: '▪';
+  text-indent: -1ch;
+}
+
+ol {
+  list-style-type: '';
+  list-style-position: inside;
+  counter-reset: cupcake;
+  text-indent: -1ch;
+}
+
+ul ul,
+ul ol,
+ol ul,
+ol ol {
+  padding-left: 2ch;
+}
+
+ol li {
+  padding-left: 1ch;
+  counter-increment: cupcake;
+}
+
+ul li:before {
+  content: ' ';
+  display: inline-block;
+  width: 1ch;
+  height: 0;
+  visibility: hidden;
+}
+
+ol li:before {
+  content: counters(cupcake, '.') '. ';
+}
+
+article,
+aside,
+details,
+figcaption,
+figure,
+footer,
+header,
+hgroup,
+menu,
+nav,
+section {
+  display: block;
+}
+
+body.theme-blue {
+  --theme-overlay: var(--color-blue-20-5);
+  --theme-background: var(--color-blue-80);
+  --theme-background-modal: var(--color-blue-70);
+  --theme-background-modal-footer: var(--color-blue-90);
+  --theme-background-input: var(--color-blue-60);
+  --theme-border: var(--color-blue-70);
+  --theme-border-subdued: var(--color-blue-60-2);
+  --theme-text: var(--color-blue-10);
+  --theme-button: var(--color-blue-10);
+  --theme-button-text: var(--color-blue-80);
+  --theme-button-foreground: var(--color-blue-60);
+  --theme-button-background: var(--color-blue-70);
+  --theme-focused-foreground: var(--color-blue-50);
+  --theme-focused-foreground-subdued: var(--color-blue-50-5);
+}
+
+body.theme-light {
+  --theme-overlay: var(--color-black-100-4);
+  --theme-background: var(--color-white);
+  --theme-background-modal: var(--color-gray-20);
+  --theme-background-modal-footer: var(--color-gray-40);
+  --theme-background-input: var(--color-gray-10);
+  --theme-border: var(--color-gray-20);
+  --theme-border-subdued: var(--color-gray-40-2);
+  --theme-text: var(--color-black-100);
+  --theme-button: var(--color-black-100);
+  --theme-button-text: var(--color-white);
+  --theme-button-foreground: var(--color-gray-30);
+  --theme-button-background: var(--color-gray-20);
+  --theme-focused-foreground: var(--color-neon-green-50);
+  --theme-focused-foreground-subdued: var(--color-neon-green-50-5);
+}
+
+body.theme-dark {
+  --theme-overlay: var(--color-black-100-4);
+  --theme-background: var(--color-black-100);
+  --theme-background-modal: var(--color-gray-80);
+  --theme-background-modal-footer: var(--color-gray-70);
+  --theme-background-input: var(--color-gray-60);
+  --theme-border: var(--color-gray-80);
+  --theme-border-subdued: var(--color-gray-70-3);
+  --theme-text: var(--color-white);
+  --theme-button: var(--color-white);
+  --theme-button-text: var(--color-black-100);
+  --theme-button-foreground: var(--color-gray-90);
+  --theme-button-background: var(--color-gray-80);
+  --theme-focused-foreground: var(--color-daybreak-10);
+  --theme-focused-foreground-subdued: var(--color-daybreak-10-5);
+}
+
+body.theme-green {
+  --theme-overlay: var(--color-neon-green-100-4);
+  --theme-background: rgba(44, 255, 5);
+  --theme-background-modal: var(--color-neon-green-50);
+  --theme-background-modal-footer: var(--color-neon-green-50-5);
+  --theme-background-input: var(--color-neon-green-30);
+  --theme-border: var(--color-neon-green-60);
+  --theme-border-subdued: var(--color-neon-green-60-3);
+  --theme-text: var(--color-neon-green-100);
+  --theme-button: var(--color-neon-green-100);
+  --theme-button-text: var(--color-neon-green-10);
+  --theme-button-foreground: var(--color-neon-green-80);
+  --theme-button-background: var(--color-neon-green-70);
+  --theme-focused-foreground: rgba(255, 82, 243, 1);
+  --theme-focused-foreground-subdued: rgba(255, 82, 243, 0.5);
+}
+
+body.theme-black-red {
+  --theme-overlay: var(--color-red-100-4);
+  --theme-background: var(--color-black-100);
+  --theme-background-modal: var(--color-red-70);
+  --theme-background-modal-footer: var(--color-red-80);
+  --theme-background-input: var(--color-red-60);
+  --theme-border: var(--color-red-60-7);
+  --theme-border-subdued: var(--color-red-60-3);
+  --theme-text: var(--color-red-30);
+  --theme-button: var(--color-red-100);
+  --theme-button-text: var(--color-red-20);
+  --theme-button-foreground: var(--color-red-80);
+  --theme-button-background: var(--color-red-90);
+  --theme-focused-foreground: var(--color-gray-70);
+  --theme-focused-foreground-subdued: var(--color-red-70-4);
+}
+
+body.theme-black-teal {
+  --theme-overlay: var(--color-teal-100-4);
+  --theme-background: var(--color-black-100);
+  --theme-background-modal: var(--color-teal-70);
+  --theme-background-modal-footer: var(--color-teal-80);
+  --theme-background-input: var(--color-teal-60);
+  --theme-border: var(--color-teal-60-7);
+  --theme-border-subdued: var(--color-teal-60-3);
+  --theme-text: var(--color-teal-30);
+  --theme-button: var(--color-teal-100);
+  --theme-button-text: var(--color-teal-20);
+  --theme-button-foreground: var(--color-teal-80);
+  --theme-button-background: var(--color-teal-90);
+  --theme-focused-foreground: var(--color-gray-70);
+  --theme-focused-foreground-subdued: var(--color-teal-70-4);
+}
+
+body.theme-black-green {
+  --theme-overlay: var(--color-black-100-4);
+  --theme-background: var(--color-black-100);
+  --theme-background-modal: var(--color-gray-90);
+  --theme-background-modal-footer: var(--color-gray-80);
+  --theme-background-input: var(--color-gray-70);
+  --theme-border: var(--color-gray-80);
+  --theme-border-subdued: var(--color-gray-70-3);
+  --theme-text: var(--color-green-50);
+  --theme-button: var(--color-green-50);
+  --theme-button-text: var(--color-green-80);
+  --theme-button-foreground: var(--color-green-80);
+  --theme-button-background: var(--color-green-90);
+  --theme-focused-foreground: var(--color-gray-30);
+  --theme-focused-foreground-subdued: var(--color-gray-40);
+}
+
+body.font-use-berkeley-mono {
+  --font-family-mono: 'TX02Mono-Regular', sans-serif;
+}
+
+body.font-use-commit-mono {
+  --font-family-mono: 'CommitMono-Regular', sans-serif;
+}
+
+body.font-use-departure-mono {
+  --font-family-mono: 'DepartureMono-Regular', sans-serif;
+}
+
+body.font-use-fira-code {
+  --font-family-mono: 'FiraCode-Regular', sans-serif;
+}
+
+body.font-use-fragment-mono {
+  --font-family-mono: 'FragmentMono-Regular', sans-serif;
+}
+
+body.font-use-iosevka-term {
+  --font-family-mono: 'IosevkaTerm-Regular', sans-serif;
+}
+
+body.font-use-jet-brains-mono {
+  --font-family-mono: 'JetBrainsMono-Regular', sans-serif;
+}
+
+body.font-use-server-mono {
+  --font-family-mono: 'ServerMono-Regular', sans-serif;
+}
+
+body.font-use-sfmono-square {
+  --font-family-mono: 'SFMonoSquare-Regular', sans-serif;
+}
+
+#__next {
+}
+
+html,
+body {
+  --color-black-100: rgba(0, 0, 0, 1);
+  --color-black-100-1: rgba(0, 0, 0, 0.1);
+  --color-black-100-2: rgba(0, 0, 0, 0.2);
+  --color-black-100-4: rgba(0, 0, 0, 0.4);
+  --color-black-daybreak-100: rgba(4, 2, 0, 1);
+  --color-black-daybreak-100-4: rgba(4, 2, 0, 0.4);
+
+  --color-blue-10: rgba(237, 245, 255, 1);
+  --color-blue-100: rgba(0, 17, 65, 1);
+  --color-blue-20: rgba(208, 226, 255, 1);
+  --color-blue-20-1: rgba(208, 226, 255, 0.1);
+  --color-blue-20-2: rgba(208, 226, 255, 0.2);
+  --color-blue-20-5: rgba(208, 226, 255, 0.5);
+  --color-blue-30: rgba(166, 200, 255, 1);
+  --color-blue-40: rgba(120, 169, 255, 1);
+  --color-blue-50: rgba(69, 137, 255, 1);
+  --color-blue-50-5: rgba(69, 137, 255, 0.5);
+  --color-blue-60: rgba(15, 98, 254, 1);
+  --color-blue-60-2: rgba(15, 98, 254, 0.2);
+  --color-blue-70: rgba(0, 67, 206, 1);
+  --color-blue-80: rgba(0, 45, 156, 1);
+  --color-blue-80-4: rgba(0, 45, 156, 0.4);
+  --color-blue-80-6: rgba(0, 45, 156, 0.6);
+  --color-blue-90: rgba(0, 29, 108, 1);
+  --color-blue-90-6: rgba(0, 29, 108, 0.6);
+
+  --color-daybreak: rgba(255, 108, 4, 1);
+  --color-daybreak-1: rgba(255, 108, 4, 0.1);
+  --color-daybreak-10: rgba(239, 99, 0, 1);
+  --color-daybreak-10-5: rgba(239, 99, 0, 0.5);
+  --color-daybreak-2: rgba(255, 108, 4, 0.2);
+  --color-daybreak-20: rgba(220, 91, 0, 1);
+  --color-daybreak-30: rgba(200, 83, 0, 1);
+  --color-daybreak-4: rgba(255, 108, 4, 0.4);
+  --color-daybreak-40: rgba(180, 75, 0, 1);
+  --color-daybreak-40-2: rgba(180, 75, 0, 0.2);
+  --color-daybreak-50: rgba(161, 67, 0, 1);
+  --color-daybreak-60: rgba(141, 59, 0, 1);
+  --color-daybreak-70: rgba(121, 50, 0, 1);
+  --color-daybreak-70-3: rgba(121, 50, 0, 0.3);
+  --color-daybreak-80: rgba(102, 42, 0, 1);
+  --color-daybreak-90: rgba(82, 34, 0, 1);
+
+  --color-gold-30: rgba(241, 194, 27, 1);
+
+  --color-gray-10: rgba(244, 244, 244, 1);
+  --color-gray-100: rgba(22, 22, 22, 1);
+  --color-gray-20: rgba(224, 224, 224, 1);
+  --color-gray-20-7: rgba(224, 224, 224, 0.7);
+  --color-gray-30: rgba(198, 198, 198, 1);
+  --color-gray-30-7: rgba(224, 224, 224, 0.7);
+  --color-gray-40: rgba(168, 168, 168, 1);
+  --color-gray-40-2: rgba(168, 168, 168, 0.2);
+  --color-gray-50: rgba(141, 141, 141, 1);
+  --color-gray-60: rgba(111, 111, 111, 1);
+  --color-gray-70: rgba(82, 82, 82, 1);
+  --color-gray-70-3: rgba(82, 82, 82, 0.3);
+  --color-gray-70-4: rgba(82, 82, 82, 0.4);
+  --color-gray-80: rgba(57, 57, 57, 1);
+  --color-gray-80-6: rgba(57, 57, 57, 0.6);
+  --color-gray-90: rgba(38, 38, 38, 1);
+  --color-gray-90-6: rgba(38, 38, 38, 0.6);
+
+  --color-green-100: rgba(7, 25, 8, 1);
+  --color-green-100: rgba(7, 25, 8, 1);
+  --color-green-90: rgba(2, 45, 13, 1);
+  --color-green-80: rgba(4, 67, 23, 1);
+  --color-green-70: rgba(14, 96, 39, 1);
+  --color-green-60: rgba(25, 128, 56, 1);
+  --color-green-60-3: rgba(25, 128, 56, 0.3);
+  --color-green-50: rgba(36, 161, 72, 1);
+  --color-green-40: rgba(66, 190, 101, 1);
+  --color-green-30: rgba(111, 220, 140, 1);
+  --color-green-20: rgba(167, 240, 186, 1);
+  --color-green-10: rgba(222, 251, 230, 1);
+
+  --color-neon-green-10: rgba(242, 255, 233, 1);
+  --color-neon-green-100: rgba(10, 44, 2, 1);
+  --color-neon-green-100-1: rgba(10, 44, 2, 0.1);
+  --color-neon-green-100-2: rgba(10, 44, 2, 0.2);
+  --color-neon-green-100-4: rgba(10, 44, 2, 0.4);
+  --color-neon-green-20: rgba(213, 255, 191, 1);
+  --color-neon-green-30: rgba(178, 255, 148, 1);
+  --color-neon-green-40: rgba(138, 255, 104, 1);
+  --color-neon-green-50: rgba(92, 255, 59, 1);
+  --color-neon-green-50-5: rgba(92, 255, 59, 0.5);
+  --color-neon-green-60: rgba(46, 231, 29, 1);
+  --color-neon-green-60-3: rgba(46, 231, 29, 0.3);
+  --color-neon-green-70: rgba(0, 207, 0, 1);
+  --color-neon-green-70-3: rgba(0, 207, 0, 0.3);
+  --color-neon-green-70-7: rgba(0, 207, 0, 0.7);
+  --color-neon-green-80: rgba(0, 159, 0, 1);
+  --color-neon-green-80-1: rgba(0, 159, 0, 0.1);
+  --color-neon-green-80-2: rgba(0, 159, 0, 0.2);
+  --color-neon-green-80-4: rgba(0, 159, 0, 0.4);
+  --color-neon-green-90: rgba(16, 107, 2, 1);
+
+  --color-red-100: rgba(45, 7, 9, 1);
+  --color-red-100-4: rgba(45, 7, 9, 0.4);
+  --color-red-90: rgba(82, 4, 8, 1);
+  --color-red-80: rgba(117, 14, 19, 1);
+  --color-red-70: rgba(162, 25, 31, 1);
+  --color-red-60: rgba(218, 30, 40, 1);
+  --color-red-60-7: rgba(218, 30, 40, 0.7);
+  --color-red-60-3: rgba(218, 30, 40, 0.3);
+  --color-red-50: rgba(250, 77, 86, 1);
+  --color-red-40: rgba(255, 131, 137, 1);
+  --color-red-30: rgba(255, 179, 184, 1);
+  --color-red-20: rgba(255, 215, 217, 1);
+  --color-red-10: rgba(255, 241, 241, 1);
+
+  --color-teal-100: rgba(8, 26, 28, 1);
+  --color-teal-100-4: rgba(8, 26, 28, 0.4);
+  --color-teal-90: rgba(2, 43, 48, 1);
+  --color-teal-80: rgba(0, 65, 68, 1);
+  --color-teal-70: rgba(0, 93, 93, 1);
+  --color-teal-70-4: rgba(0, 93, 93, 0.4);
+  --color-teal-70-3: rgba(0, 93, 93, 0.3);
+  --color-teal-60: rgba(0, 125, 121, 1);
+  --color-teal-60-7: rgba(0, 125, 121, 0.7);
+  --color-teal-60-3: rgba(0, 125, 121, 0.3);
+  --color-teal-50: rgba(0, 157, 154, 1);
+  --color-teal-40: rgba(8, 189, 186, 1);
+  --color-teal-30: rgba(61, 219, 217, 1);
+  --color-teal-20: rgba(158, 240, 240, 1);
+  --color-teal-10: rgba(217, 251, 251, 1);
+
+  --color-white: rgba(255, 255, 255, 1);
+  --color-white-1: rgba(255, 255, 255, 0.1);
+  --color-white-2: rgba(255, 255, 255, 0.2);
+  --color-white-4: rgba(255, 255, 255, 0.4);
+
+  --font-family: -apple-system, BlinkMacSystemFont, helvetica neue, helvetica, sans-serif;
+  --font-family-mono: 'IosevkaTerm-Regular', Consolas, monaco, monospace;
+  --font-family-serif: Georgia, Times New Roman, serif;
+
+  --theme-text: var(--color-black-100);
+  --theme-line-height-base: 1.25;
+  --font-size: 20px;
+
+  --z-index-page: 1;
+  --z-index-page-select: 3;
+  --z-index-page-tooltips: 4;
+  --z-index-page-popover: 5;
+  --z-index-page-dropdown-menus: 6;
+  --z-index-page-modals: 10;
+
+  background: var(--theme-background);
+  color: var(--theme-text);
+  font-family: var(--font-family-mono);
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+
+  font-size: var(--font-size);
+  font-optical-sizing: auto;
+  font-weight: 400;
+  font-variant-numeric: tabular-nums lining-nums;
+
+  &::-webkit-scrollbar {
+    background: transparent;
+    height: calc(var(--theme-line-height-base) * 1rem);
+    width: 1ch;
+  }
+
+  &::-webkit-scrollbar-track {
+    background: var(--theme-background);
+  }
+
+  &::-webkit-scrollbar-thumb {
+    background: var(--theme-border);
+  }
+
+  &::-webkit-scrollbar-thumb:hover {
+    background: var(--theme-border);
+  }
+
+  @media (max-width: 568px) {
+    --font-size: 16px;
+  }
+}
+
+================
+File: reference/LICENSE.md
+================
+Copyright (c) 2024 INTERNET DEVELOPMENT STUDIO COMPANY
+
+Permission is hereby granted, free of charge, to any person obtaining
+a copy of this software and associated documentation files (the
+"Software"), to deal in the Software without restriction, including
+without limitation the rights to use, copy, modify, merge, publish,
+distribute, sublicense, and/or sell copies of the Software, and to
+permit persons to whom the Software is furnished to do so, subject to
+the following conditions:
+
+The above copyright notice and this permission notice shall be
+included in all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+
+================
+File: reference/package.json
+================
+{
+  "name": "INTDEV",
+  "description": "A vocation guild and great hall for webmasters. We practice the craft of designing, building, shipping, and maintaining websites, platforms, brands, and applications—end to end.",
+  "engines": {
+    "node": ">=18"
+  },
+  "license": "MIT",
+  "version": "0.0.1",
+  "scripts": {
+    "dev": "next -p 10000",
+    "build": "next build",
+    "start": "PORT=10000 next start",
+    "lint": "next lint"
+  },
+  "dependencies": {
+    "next": "^15.1.3",
+    "react": "^19.0.0",
+    "react-dom": "^19.0.0",
+    "sass": "1.83.0"
+  },
+  "devDependencies": {
+    "@types/node": "^22.10.2",
+    "@types/react": "^19.0.2",
+    "ts-node": "^10.9.2",
+    "typescript": "^5.7.2"
+  }
+}
+
+================
+File: reference/README.md
+================
+# www-internet-v2
+
+TODO
+
+```sh
+npm install
+npm run dev
+```
+
+Go to `http://localhost:10000` in your browser of choice.
+
+### Contact
+
+If you have questions ping me on Twitter, [@wwwjim](https://www.twitter.com/wwwjim). Or you can ping [@internetxstudio](https://x.com/internetxstudio).
+
+================
+File: reference/tsconfig.json
+================
+{
+  "compilerOptions": {
+    "baseUrl": ".",
+    "paths": {
+      "@root/*": [
+        "./*"
+      ],
+      "@system/*": [
+        "./system/*"
+      ],
+      "@demos/*": [
+        "./demos/*"
+      ],
+      "@common/*": [
+        "./common/*"
+      ],
+      "@data/*": [
+        "./data/*"
+      ],
+      "@components/*": [
+        "./components/*"
+      ],
+      "@pages/*": [
+        "./pages/*"
+      ],
+      "@modules/*": [
+        "./modules/*"
+      ]
+    },
+    "target": "es5",
+    "lib": [
+      "dom",
+      "dom.iterable",
+      "esnext"
+    ],
+    "allowJs": true,
+    "skipLibCheck": true,
+    "strict": false,
+    "forceConsistentCasingInFileNames": true,
+    "noEmit": true,
+    "esModuleInterop": true,
+    "module": "esnext",
+    "moduleResolution": "node",
+    "resolveJsonModule": true,
+    "isolatedModules": true,
+    "jsx": "preserve",
+    "incremental": true,
+    "plugins": [
+      {
+        "name": "next"
+      }
+    ],
+    "strictNullChecks": true
+  },
+  "exclude": [
+    "node_modules",
+    "**/*.spec.ts"
+  ],
+  "include": [
+    "next-env.d.ts",
+    "**/*.ts",
+    "**/*.tsx",
+    ".next/types/**/*.ts"
+  ]
+}
+
+================
+File: src/app/globals.css
+================
+@tailwind base;
+@tailwind components;
+@tailwind utilities;
+
+:root {
+  --background: #ffffff;
+  --foreground: #171717;
+}
+
+@media (prefers-color-scheme: dark) {
+  :root {
+    --background: #0a0a0a;
+    --foreground: #ededed;
+  }
+}
+
+body {
+  color: var(--foreground);
+  background: var(--background);
+  font-family: Arial, Helvetica, sans-serif;
+}
+
+================
+File: src/app/layout.tsx
+================
+import type { Metadata } from "next";
+import { Geist, Geist_Mono } from "next/font/google";
+import "./globals.css";
+
+const geistSans = Geist({
+  variable: "--font-geist-sans",
+  subsets: ["latin"],
+});
+
+const geistMono = Geist_Mono({
+  variable: "--font-geist-mono",
+  subsets: ["latin"],
+});
+
+export const metadata: Metadata = {
+  title: "Create Next App",
+  description: "Generated by create next app",
+};
+
+export default function RootLayout({
+  children,
+}: Readonly<{
+  children: React.ReactNode;
+}>) {
+  return (
+    <html lang="en">
+      <body
+        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
+      >
+        {children}
+      </body>
+    </html>
+  );
+}
+
+================
+File: src/app/page.tsx
+================
+import Image from "next/image";
+
+export default function Home() {
+  return (
+    <div className="grid grid-rows-[20px_1fr_20px] items-center justify-items-center min-h-screen p-8 pb-20 gap-16 sm:p-20 font-[family-name:var(--font-geist-sans)]">
+      <main className="flex flex-col gap-8 row-start-2 items-center sm:items-start">
+        <Image
+          className="dark:invert"
+          src="/next.svg"
+          alt="Next.js logo"
+          width={180}
+          height={38}
+          priority
+        />
+        <ol className="list-inside list-decimal text-sm text-center sm:text-left font-[family-name:var(--font-geist-mono)]">
+          <li className="mb-2">
+            Get started by editing{" "}
+            <code className="bg-black/[.05] dark:bg-white/[.06] px-1 py-0.5 rounded font-semibold">
+              src/app/page.tsx
+            </code>
+            .
+          </li>
+          <li>Save and see your changes instantly.</li>
+        </ol>
+
+        <div className="flex gap-4 items-center flex-col sm:flex-row">
+          <a
+            className="rounded-full border border-solid border-transparent transition-colors flex items-center justify-center bg-foreground text-background gap-2 hover:bg-[#383838] dark:hover:bg-[#ccc] text-sm sm:text-base h-10 sm:h-12 px-4 sm:px-5"
+            href="https://vercel.com/new?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
+            target="_blank"
+            rel="noopener noreferrer"
+          >
+            <Image
+              className="dark:invert"
+              src="/vercel.svg"
+              alt="Vercel logomark"
+              width={20}
+              height={20}
+            />
+            Deploy now
+          </a>
+          <a
+            className="rounded-full border border-solid border-black/[.08] dark:border-white/[.145] transition-colors flex items-center justify-center hover:bg-[#f2f2f2] dark:hover:bg-[#1a1a1a] hover:border-transparent text-sm sm:text-base h-10 sm:h-12 px-4 sm:px-5 sm:min-w-44"
+            href="https://nextjs.org/docs?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
+            target="_blank"
+            rel="noopener noreferrer"
+          >
+            Read our docs
+          </a>
+        </div>
+      </main>
+      <footer className="row-start-3 flex gap-6 flex-wrap items-center justify-center">
+        <a
+          className="flex items-center gap-2 hover:underline hover:underline-offset-4"
+          href="https://nextjs.org/learn?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
+          target="_blank"
+          rel="noopener noreferrer"
+        >
+          <Image
+            aria-hidden
+            src="/file.svg"
+            alt="File icon"
+            width={16}
+            height={16}
+          />
+          Learn
+        </a>
+        <a
+          className="flex items-center gap-2 hover:underline hover:underline-offset-4"
+          href="https://vercel.com/templates?framework=next.js&utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
+          target="_blank"
+          rel="noopener noreferrer"
+        >
+          <Image
+            aria-hidden
+            src="/window.svg"
+            alt="Window icon"
+            width={16}
+            height={16}
+          />
+          Examples
+        </a>
+        <a
+          className="flex items-center gap-2 hover:underline hover:underline-offset-4"
+          href="https://nextjs.org?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
+          target="_blank"
+          rel="noopener noreferrer"
+        >
+          <Image
+            aria-hidden
+            src="/globe.svg"
+            alt="Globe icon"
+            width={16}
+            height={16}
+          />
+          Go to nextjs.org →
+        </a>
+      </footer>
+    </div>
+  );
+}
+
+================
+File: .gitignore
+================
+# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
+
+# dependencies
+/node_modules
+/.pnp
+.pnp.*
+.yarn/*
+!.yarn/patches
+!.yarn/plugins
+!.yarn/releases
+!.yarn/versions
+
+# testing
+/coverage
+
+# next.js
+/.next/
+/out/
+
+# production
+/build
+
+# misc
+.DS_Store
+*.pem
+
+# debug
+npm-debug.log*
+yarn-debug.log*
+yarn-error.log*
+.pnpm-debug.log*
+
+# env files (can opt-in for committing if needed)
+.env*
+
+# vercel
+.vercel
+
+# typescript
+*.tsbuildinfo
+next-env.d.ts
+
+================
+File: eslint.config.mjs
+================
+import { dirname } from "path";
+import { fileURLToPath } from "url";
+import { FlatCompat } from "@eslint/eslintrc";
+
+const __filename = fileURLToPath(import.meta.url);
+const __dirname = dirname(__filename);
+
+const compat = new FlatCompat({
+  baseDirectory: __dirname,
+});
+
+const eslintConfig = [
+  ...compat.extends("next/core-web-vitals", "next/typescript"),
+];
+
+export default eslintConfig;
+
+================
+File: next.config.ts
+================
+import type { NextConfig } from "next";
+
+const nextConfig: NextConfig = {
+  /* config options here */
+};
+
+export default nextConfig;
+
+================
+File: package.json
+================
+{
+  "name": "adam-web",
+  "version": "0.1.0",
+  "private": true,
+  "scripts": {
+    "dev": "next dev --turbopack",
+    "build": "next build",
+    "start": "next start",
+    "lint": "next lint"
+  },
+  "dependencies": {
+    "react": "^19.0.0",
+    "react-dom": "^19.0.0",
+    "next": "15.1.6"
+  },
+  "devDependencies": {
+    "typescript": "^5",
+    "@types/node": "^20",
+    "@types/react": "^19",
+    "@types/react-dom": "^19",
+    "postcss": "^8",
+    "tailwindcss": "^3.4.1",
+    "eslint": "^9",
+    "eslint-config-next": "15.1.6",
+    "@eslint/eslintrc": "^3"
+  }
+}
+
+================
+File: postcss.config.mjs
+================
+/** @type {import('postcss-load-config').Config} */
+const config = {
+  plugins: {
+    tailwindcss: {},
+  },
+};
+
+export default config;
+
+================
+File: README.md
+================
+This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).
+
+## Getting Started
+
+First, run the development server:
+
+```bash
+npm run dev
+# or
+yarn dev
+# or
+pnpm dev
+# or
+bun dev
+```
+
+Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.
+
+You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.
+
+This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.
+
+## Learn More
+
+To learn more about Next.js, take a look at the following resources:
+
+- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
+- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.
+
+You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!
+
+## Deploy on Vercel
+
+The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.
+
+Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
+
+================
+File: tailwind.config.ts
+================
+import type { Config } from "tailwindcss";
+
+export default {
+  content: [
+    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
+    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
+    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
+  ],
+  theme: {
+    extend: {
+      colors: {
+        background: "var(--background)",
+        foreground: "var(--foreground)",
+      },
+    },
+  },
+  plugins: [],
+} satisfies Config;
+
+================
+File: tsconfig.json
+================
+{
+  "compilerOptions": {
+    "target": "ES2017",
+    "lib": ["dom", "dom.iterable", "esnext"],
+    "allowJs": true,
+    "skipLibCheck": true,
+    "strict": true,
+    "noEmit": true,
+    "esModuleInterop": true,
+    "module": "esnext",
+    "moduleResolution": "bundler",
+    "resolveJsonModule": true,
+    "isolatedModules": true,
+    "jsx": "preserve",
+    "incremental": true,
+    "plugins": [
+      {
+        "name": "next"
+      }
+    ],
+    "paths": {
+      "@/*": ["./src/*"]
+    }
+  },
+  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
+  "exclude": ["node_modules"]
+}
+ // make a new git repo adam-web, it's a personal site for my friend
+
+use this for all text: https://www.reactbits.dev/text-animations/ascii-text
+
+with a nice emoji ascii skateboard hero, and a nice floating header like raycast with 'adam delaney' in the left, and in the right some nav buttons to go to bio, projects pages 
+
+next15/react19/tailwind v4  //  please just use the react-bits ascii for the emoji hero? i have added a reference webapp in reference/www-internet-v2 - i want you to copy over the components wholesale from that reference directory into the adam-web src/ directory, along with any other modules, maybe the entire reference src/ dir, along with any needed config to get things working in adam-web? we'll need the scss set up to work exactly like in the reference repo. i want a fully functional adam-web with the same exact page layout, and simplified home page hero, a bio page, and a projects page 

# 2025-02-07 23:36:46.055877
+y

# 2025-02-07 23:36:52.852029
+n

# 2025-02-07 23:36:55.416418
+y

# 2025-02-07 23:37:09.363695
+n

# 2025-02-07 23:37:10.802753
+s

# 2025-02-07 23:37:18.323716
+n

# 2025-02-07 23:37:25.896595
+/model

# 2025-02-07 23:38:21.606963
+/model 

# 2025-02-07 23:38:24.493173
+/model openrouter/google/gemini-pro-1.5

# 2025-02-07 23:38:32.366838
+This file is a merged representation of the entire codebase, combining all repository files into a single document.
+Generated by Repomix on: 2025-02-08T07:31:27.472Z
+
+================================================================
+File Summary
+================================================================
+
+Purpose:
+--------
+This file contains a packed representation of the entire repository's contents.
+It is designed to be easily consumable by AI systems for analysis, code review,
+or other automated processes.
+
+File Format:
+------------
+The content is organized as follows:
+1. This summary section
+2. Repository information
+3. Directory structure
+4. Multiple file entries, each consisting of:
+  a. A separator line (================)
+  b. The file path (File: path/to/file)
+  c. Another separator line
+  d. The full contents of the file
+  e. A blank line
+
+Usage Guidelines:
+-----------------
+- This file should be treated as read-only. Any changes should be made to the
+  original repository files, not this packed version.
+- When processing this file, use the file path to distinguish
+  between different files in the repository.
+- Be aware that this file may contain sensitive information. Handle it with
+  the same level of security as you would the original repository.
+
+Notes:
+------
+- Some files may have been excluded based on .gitignore rules and Repomix's
+  configuration.
+- Binary files are not included in this packed representation. Please refer to
+  the Repository Structure section for a complete list of file paths, including
+  binary files.
+
+Additional Info:
+----------------
+
+================================================================
+Directory Structure
+================================================================
+public/
+  file.svg
+  globe.svg
+  next.svg
+  vercel.svg
+  window.svg
+reference/
+  .git/
+    hooks/
+      applypatch-msg.sample
+      commit-msg.sample
+      fsmonitor-watchman.sample
+      post-update.sample
+      pre-applypatch.sample
+      pre-commit.sample
+      pre-merge-commit.sample
+      pre-push.sample
+      pre-rebase.sample
+      pre-receive.sample
+      prepare-commit-msg.sample
+      push-to-checkout.sample
+      update.sample
+    info/
+      exclude
+    logs/
+      refs/
+        heads/
+          main
+        remotes/
+          origin/
+            HEAD
+      HEAD
+    refs/
+      heads/
+        main
+      remotes/
+        origin/
+          HEAD
+    config
+    description
+    FETCH_HEAD
+    HEAD
+    packed-refs
+  app/
+    office/
+      head.tsx
+      layout.tsx
+      page.tsx
+    head.tsx
+    layout.tsx
+    manifest.ts
+    page.tsx
+    robots.ts
+    sitemap.ts
+  common/
+    constants.ts
+    hooks.ts
+    position.ts
+    queries.ts
+    server.ts
+    utilities.ts
+  components/
+    detectors/
+      OutsideElementEvent.tsx
+    examples/
+      AS400.module.scss
+      AS400.tsx
+      DashboardRadar.module.scss
+      DashboardRadar.tsx
+      Denabase.module.scss
+      Denabase.tsx
+      MessagesInterface.tsx
+      UpdatingDataTable.tsx
+    modals/
+      ModalAlert.module.scss
+      ModalAlert.tsx
+      ModalCanvasPlatformer.module.scss
+      ModalCanvasPlatformer.tsx
+      ModalCanvasSnake.module.scss
+      ModalCanvasSnake.tsx
+      ModalChess.module.scss
+      ModalChess.tsx
+      ModalCreateAccount.module.scss
+      ModalCreateAccount.tsx
+      ModalError.module.scss
+      ModalError.tsx
+      ModalMatrixModes.module.scss
+      ModalMatrixModes.tsx
+    page/
+      DefaultActionBar.module.scss
+      DefaultActionBar.tsx
+      DefaultLayout.module.scss
+      DefaultLayout.tsx
+      ModalContext.tsx
+      root.module.scss
+    svg/
+      InternetDevelopmentLogo.tsx
+      InternetDevelopmentLogoMark.tsx
+      Sphere.tsx
+    Accordion.module.scss
+    Accordion.tsx
+    ActionBar.module.scss
+    ActionBar.tsx
+    ActionButton.module.scss
+    ActionButton.tsx
+    ActionListItem.module.scss
+    ActionListItem.tsx
+    AlertBanner.module.scss
+    AlertBanner.tsx
+    Avatar.module.scss
+    Avatar.tsx
+    Badge.module.scss
+    Badge.tsx
+    BarLoader.module.scss
+    BarLoader.tsx
+    BarProgress.module.scss
+    BarProgress.tsx
+    Block.module.scss
+    Block.tsx
+    BlockLoader.module.scss
+    BlockLoader.tsx
+    BreadCrumbs.module.scss
+    BreadCrumbs.tsx
+    Button.module.scss
+    Button.tsx
+    ButtonGroup.module.scss
+    ButtonGroup.tsx
+    Canvas.module.scss
+    Canvas.tsx
+    CanvasPlatformer.module.scss
+    CanvasPlatformer.tsx
+    CanvasSnake.module.scss
+    CanvasSnake.tsx
+    Card.module.scss
+    Card.tsx
+    CardDouble.module.scss
+    CardDouble.tsx
+    Checkbox.module.scss
+    Checkbox.tsx
+    Chessboard.module.scss
+    Chessboard.tsx
+    CodeBlock.module.scss
+    CodeBlock.tsx
+    ComboBox.module.scss
+    ComboBox.tsx
+    ContentFluid.module.scss
+    ContentFluid.tsx
+    DataTable.module.scss
+    DataTable.tsx
+    DatePicker.module.scss
+    DatePicker.tsx
+    DebugGrid.tsx
+    DefaultMetaTags.tsx
+    Dialog.module.scss
+    Dialog.tsx
+    Divider.module.scss
+    Divider.tsx
+    Drawer.module.scss
+    Drawer.tsx
+    DropdownMenu.module.scss
+    DropdownMenu.tsx
+    DropdownMenuTrigger.module.scss
+    DropdownMenuTrigger.tsx
+    Grid.module.scss
+    Grid.tsx
+    HoverComponentTrigger.module.scss
+    HoverComponentTrigger.tsx
+    Indent.module.scss
+    Indent.tsx
+    Input.module.scss
+    Input.tsx
+    ListItem.module.scss
+    ListItem.tsx
+    MatrixLoader.module.scss
+    MatrixLoader.tsx
+    Message.module.scss
+    Message.tsx
+    MessageViewer.module.scss
+    MessageViewer.tsx
+    ModalStack.module.scss
+    ModalStack.tsx
+    ModalTrigger.tsx
+    Navigation.module.scss
+    Navigation.tsx
+    NumberRangeSlider.module.scss
+    NumberRangeSlider.tsx
+    Popover.module.scss
+    Popover.tsx
+    Providers.tsx
+    RadioButton.module.scss
+    RadioButton.tsx
+    RadioButtonGroup.tsx
+    Row.module.scss
+    Row.tsx
+    RowEllipsis.module.scss
+    RowEllipsis.tsx
+    RowSpaceBetween.module.scss
+    RowSpaceBetween.tsx
+    Select.module.scss
+    Select.tsx
+    SidebarLayout.module.scss
+    SidebarLayout.tsx
+    Table.module.scss
+    Table.tsx
+    TableColumn.module.scss
+    TableColumn.tsx
+    TableRow.module.scss
+    TableRow.tsx
+    Text.module.scss
+    Text.tsx
+    TextArea.module.scss
+    TextArea.tsx
+    Tooltip.module.scss
+    Tooltip.tsx
+    TreeView.module.scss
+    TreeView.tsx
+  modules/
+    hotkeys/
+      bound-hotkeys-proxy-provider.tsx
+      hotkeys-provider.tsx
+      index.ts
+      is-hotkey-pressed.ts
+      parse-hotkeys.ts
+      types.ts
+      use-deep-equal-memo.ts
+      use-hotkeys.ts
+      use-record-hotkeys.ts
+      validators.ts
+    cors.ts
+    object-assign.ts
+    vary.ts
+  pages/
+    api/
+      index.ts
+    _app.tsx
+    _document.tsx
+  .gitignore
+  .prettierrc
+  global.scss
+  LICENSE.md
+  package.json
+  README.md
+  tsconfig.json
+src/
+  app/
+    globals.css
+    layout.tsx
+    page.tsx
+.gitignore
+eslint.config.mjs
+next.config.ts
+package.json
+postcss.config.mjs
+README.md
+tailwind.config.ts
+tsconfig.json
+
+================================================================
+Files
+================================================================
+
+================
+File: public/file.svg
+================
+<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
+
+================
+File: public/globe.svg
+================
+<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
+
+================
+File: public/next.svg
+================
+<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
+
+================
+File: public/vercel.svg
+================
+<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
+
+================
+File: public/window.svg
+================
+<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
+
+================
+File: reference/.git/hooks/applypatch-msg.sample
+================
+#!/bin/sh
+#
+# An example hook script to check the commit log message taken by
+# applypatch from an e-mail message.
+#
+# The hook should exit with non-zero status after issuing an
+# appropriate message if it wants to stop the commit.  The hook is
+# allowed to edit the commit message file.
+#
+# To enable this hook, rename this file to "applypatch-msg".
+
+. git-sh-setup
+commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
+test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
+:
+
+================
+File: reference/.git/hooks/commit-msg.sample
+================
+#!/bin/sh
+#
+# An example hook script to check the commit log message.
+# Called by "git commit" with one argument, the name of the file
+# that has the commit message.  The hook should exit with non-zero
+# status after issuing an appropriate message if it wants to stop the
+# commit.  The hook is allowed to edit the commit message file.
+#
+# To enable this hook, rename this file to "commit-msg".
+
+# Uncomment the below to add a Signed-off-by line to the message.
+# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
+# hook is more suited to it.
+#
+# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
+# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"
+
+# This example catches duplicate Signed-off-by lines.
+
+test "" = "$(grep '^Signed-off-by: ' "$1" |
+	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
+	echo >&2 Duplicate Signed-off-by lines.
+	exit 1
+}
+
+================
+File: reference/.git/hooks/fsmonitor-watchman.sample
+================
+#!/usr/bin/perl
+
+use strict;
+use warnings;
+use IPC::Open2;
+
+# An example hook script to integrate Watchman
+# (https://facebook.github.io/watchman/) with git to speed up detecting
+# new and modified files.
+#
+# The hook is passed a version (currently 2) and last update token
+# formatted as a string and outputs to stdout a new update token and
+# all files that have been modified since the update token. Paths must
+# be relative to the root of the working tree and separated by a single NUL.
+#
+# To enable this hook, rename this file to "query-watchman" and set
+# 'git config core.fsmonitor .git/hooks/query-watchman'
+#
+my ($version, $last_update_token) = @ARGV;
+
+# Uncomment for debugging
+# print STDERR "$0 $version $last_update_token\n";
+
+# Check the hook interface version
+if ($version ne 2) {
+	die "Unsupported query-fsmonitor hook version '$version'.\n" .
+	    "Falling back to scanning...\n";
+}
+
+my $git_work_tree = get_working_dir();
+
+my $retry = 1;
+
+my $json_pkg;
+eval {
+	require JSON::XS;
+	$json_pkg = "JSON::XS";
+	1;
+} or do {
+	require JSON::PP;
+	$json_pkg = "JSON::PP";
+};
+
+launch_watchman();
+
+sub launch_watchman {
+	my $o = watchman_query();
+	if (is_work_tree_watched($o)) {
+		output_result($o->{clock}, @{$o->{files}});
+	}
+}
+
+sub output_result {
+	my ($clockid, @files) = @_;
+
+	# Uncomment for debugging watchman output
+	# open (my $fh, ">", ".git/watchman-output.out");
+	# binmode $fh, ":utf8";
+	# print $fh "$clockid\n@files\n";
+	# close $fh;
+
+	binmode STDOUT, ":utf8";
+	print $clockid;
+	print "\0";
+	local $, = "\0";
+	print @files;
+}
+
+sub watchman_clock {
+	my $response = qx/watchman clock "$git_work_tree"/;
+	die "Failed to get clock id on '$git_work_tree'.\n" .
+		"Falling back to scanning...\n" if $? != 0;
+
+	return $json_pkg->new->utf8->decode($response);
+}
+
+sub watchman_query {
+	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
+	or die "open2() failed: $!\n" .
+	"Falling back to scanning...\n";
+
+	# In the query expression below we're asking for names of files that
+	# changed since $last_update_token but not from the .git folder.
+	#
+	# To accomplish this, we're using the "since" generator to use the
+	# recency index to select candidate nodes and "fields" to limit the
+	# output to file names only. Then we're using the "expression" term to
+	# further constrain the results.
+	my $last_update_line = "";
+	if (substr($last_update_token, 0, 1) eq "c") {
+		$last_update_token = "\"$last_update_token\"";
+		$last_update_line = qq[\n"since": $last_update_token,];
+	}
+	my $query = <<"	END";
+		["query", "$git_work_tree", {$last_update_line
+			"fields": ["name"],
+			"expression": ["not", ["dirname", ".git"]]
+		}]
+	END
+
+	# Uncomment for debugging the watchman query
+	# open (my $fh, ">", ".git/watchman-query.json");
+	# print $fh $query;
+	# close $fh;
+
+	print CHLD_IN $query;
+	close CHLD_IN;
+	my $response = do {local $/; <CHLD_OUT>};
+
+	# Uncomment for debugging the watch response
+	# open ($fh, ">", ".git/watchman-response.json");
+	# print $fh $response;
+	# close $fh;
+
+	die "Watchman: command returned no output.\n" .
+	"Falling back to scanning...\n" if $response eq "";
+	die "Watchman: command returned invalid output: $response\n" .
+	"Falling back to scanning...\n" unless $response =~ /^\{/;
+
+	return $json_pkg->new->utf8->decode($response);
+}
+
+sub is_work_tree_watched {
+	my ($output) = @_;
+	my $error = $output->{error};
+	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
+		$retry--;
+		my $response = qx/watchman watch "$git_work_tree"/;
+		die "Failed to make watchman watch '$git_work_tree'.\n" .
+		    "Falling back to scanning...\n" if $? != 0;
+		$output = $json_pkg->new->utf8->decode($response);
+		$error = $output->{error};
+		die "Watchman: $error.\n" .
+		"Falling back to scanning...\n" if $error;
+
+		# Uncomment for debugging watchman output
+		# open (my $fh, ">", ".git/watchman-output.out");
+		# close $fh;
+
+		# Watchman will always return all files on the first query so
+		# return the fast "everything is dirty" flag to git and do the
+		# Watchman query just to get it over with now so we won't pay
+		# the cost in git to look up each individual file.
+		my $o = watchman_clock();
+		$error = $output->{error};
+
+		die "Watchman: $error.\n" .
+		"Falling back to scanning...\n" if $error;
+
+		output_result($o->{clock}, ("/"));
+		$last_update_token = $o->{clock};
+
+		eval { launch_watchman() };
+		return 0;
+	}
+
+	die "Watchman: $error.\n" .
+	"Falling back to scanning...\n" if $error;
+
+	return 1;
+}
+
+sub get_working_dir {
+	my $working_dir;
+	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
+		$working_dir = Win32::GetCwd();
+		$working_dir =~ tr/\\/\//;
+	} else {
+		require Cwd;
+		$working_dir = Cwd::cwd();
+	}
+
+	return $working_dir;
+}
+
+================
+File: reference/.git/hooks/post-update.sample
+================
+#!/bin/sh
+#
+# An example hook script to prepare a packed repository for use over
+# dumb transports.
+#
+# To enable this hook, rename this file to "post-update".
+
+exec git update-server-info
+
+================
+File: reference/.git/hooks/pre-applypatch.sample
+================
+#!/bin/sh
+#
+# An example hook script to verify what is about to be committed
+# by applypatch from an e-mail message.
+#
+# The hook should exit with non-zero status after issuing an
+# appropriate message if it wants to stop the commit.
+#
+# To enable this hook, rename this file to "pre-applypatch".
+
+. git-sh-setup
+precommit="$(git rev-parse --git-path hooks/pre-commit)"
+test -x "$precommit" && exec "$precommit" ${1+"$@"}
+:
+
+================
+File: reference/.git/hooks/pre-commit.sample
+================
+#!/bin/sh
+#
+# An example hook script to verify what is about to be committed.
+# Called by "git commit" with no arguments.  The hook should
+# exit with non-zero status after issuing an appropriate message if
+# it wants to stop the commit.
+#
+# To enable this hook, rename this file to "pre-commit".
+
+if git rev-parse --verify HEAD >/dev/null 2>&1
+then
+	against=HEAD
+else
+	# Initial commit: diff against an empty tree object
+	against=$(git hash-object -t tree /dev/null)
+fi
+
+# If you want to allow non-ASCII filenames set this variable to true.
+allownonascii=$(git config --type=bool hooks.allownonascii)
+
+# Redirect output to stderr.
+exec 1>&2
+
+# Cross platform projects tend to avoid non-ASCII filenames; prevent
+# them from being added to the repository. We exploit the fact that the
+# printable range starts at the space character and ends with tilde.
+if [ "$allownonascii" != "true" ] &&
+	# Note that the use of brackets around a tr range is ok here, (it's
+	# even required, for portability to Solaris 10's /usr/bin/tr), since
+	# the square bracket bytes happen to fall in the designated range.
+	test $(git diff --cached --name-only --diff-filter=A -z $against |
+	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
+then
+	cat <<\EOF
+Error: Attempt to add a non-ASCII file name.
+
+This can cause problems if you want to work with people on other platforms.
+
+To be portable it is advisable to rename the file.
+
+If you know what you are doing you can disable this check using:
+
+  git config hooks.allownonascii true
+EOF
+	exit 1
+fi
+
+# If there are whitespace errors, print the offending file names and fail.
+exec git diff-index --check --cached $against --
+
+================
+File: reference/.git/hooks/pre-merge-commit.sample
+================
+#!/bin/sh
+#
+# An example hook script to verify what is about to be committed.
+# Called by "git merge" with no arguments.  The hook should
+# exit with non-zero status after issuing an appropriate message to
+# stderr if it wants to stop the merge commit.
+#
+# To enable this hook, rename this file to "pre-merge-commit".
+
+. git-sh-setup
+test -x "$GIT_DIR/hooks/pre-commit" &&
+        exec "$GIT_DIR/hooks/pre-commit"
+:
+
+================
+File: reference/.git/hooks/pre-push.sample
+================
+#!/bin/sh
+
+# An example hook script to verify what is about to be pushed.  Called by "git
+# push" after it has checked the remote status, but before anything has been
+# pushed.  If this script exits with a non-zero status nothing will be pushed.
+#
+# This hook is called with the following parameters:
+#
+# $1 -- Name of the remote to which the push is being done
+# $2 -- URL to which the push is being done
+#
+# If pushing without using a named remote those arguments will be equal.
+#
+# Information about the commits which are being pushed is supplied as lines to
+# the standard input in the form:
+#
+#   <local ref> <local oid> <remote ref> <remote oid>
+#
+# This sample shows how to prevent push of commits where the log message starts
+# with "WIP" (work in progress).
+
+remote="$1"
+url="$2"
+
+zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
+
+while read local_ref local_oid remote_ref remote_oid
+do
+	if test "$local_oid" = "$zero"
+	then
+		# Handle delete
+		:
+	else
+		if test "$remote_oid" = "$zero"
+		then
+			# New branch, examine all commits
+			range="$local_oid"
+		else
+			# Update to existing branch, examine new commits
+			range="$remote_oid..$local_oid"
+		fi
+
+		# Check for WIP commit
+		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
+		if test -n "$commit"
+		then
+			echo >&2 "Found WIP commit in $local_ref, not pushing"
+			exit 1
+		fi
+	fi
+done
+
+exit 0
+
+================
+File: reference/.git/hooks/pre-rebase.sample
+================
+#!/bin/sh
+#
+# Copyright (c) 2006, 2008 Junio C Hamano
+#
+# The "pre-rebase" hook is run just before "git rebase" starts doing
+# its job, and can prevent the command from running by exiting with
+# non-zero status.
+#
+# The hook is called with the following parameters:
+#
+# $1 -- the upstream the series was forked from.
+# $2 -- the branch being rebased (or empty when rebasing the current branch).
+#
+# This sample shows how to prevent topic branches that are already
+# merged to 'next' branch from getting rebased, because allowing it
+# would result in rebasing already published history.
+
+publish=next
+basebranch="$1"
+if test "$#" = 2
+then
+	topic="refs/heads/$2"
+else
+	topic=`git symbolic-ref HEAD` ||
+	exit 0 ;# we do not interrupt rebasing detached HEAD
+fi
+
+case "$topic" in
+refs/heads/??/*)
+	;;
+*)
+	exit 0 ;# we do not interrupt others.
+	;;
+esac
+
+# Now we are dealing with a topic branch being rebased
+# on top of master.  Is it OK to rebase it?
+
+# Does the topic really exist?
+git show-ref -q "$topic" || {
+	echo >&2 "No such branch $topic"
+	exit 1
+}
+
+# Is topic fully merged to master?
+not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
+if test -z "$not_in_master"
+then
+	echo >&2 "$topic is fully merged to master; better remove it."
+	exit 1 ;# we could allow it, but there is no point.
+fi
+
+# Is topic ever merged to next?  If so you should not be rebasing it.
+only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
+only_next_2=`git rev-list ^master           ${publish} | sort`
+if test "$only_next_1" = "$only_next_2"
+then
+	not_in_topic=`git rev-list "^$topic" master`
+	if test -z "$not_in_topic"
+	then
+		echo >&2 "$topic is already up to date with master"
+		exit 1 ;# we could allow it, but there is no point.
+	else
+		exit 0
+	fi
+else
+	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
+	/usr/bin/perl -e '
+		my $topic = $ARGV[0];
+		my $msg = "* $topic has commits already merged to public branch:\n";
+		my (%not_in_next) = map {
+			/^([0-9a-f]+) /;
+			($1 => 1);
+		} split(/\n/, $ARGV[1]);
+		for my $elem (map {
+				/^([0-9a-f]+) (.*)$/;
+				[$1 => $2];
+			} split(/\n/, $ARGV[2])) {
+			if (!exists $not_in_next{$elem->[0]}) {
+				if ($msg) {
+					print STDERR $msg;
+					undef $msg;
+				}
+				print STDERR " $elem->[1]\n";
+			}
+		}
+	' "$topic" "$not_in_next" "$not_in_master"
+	exit 1
+fi
+
+<<\DOC_END
+
+This sample hook safeguards topic branches that have been
+published from being rewound.
+
+The workflow assumed here is:
+
+ * Once a topic branch forks from "master", "master" is never
+   merged into it again (either directly or indirectly).
+
+ * Once a topic branch is fully cooked and merged into "master",
+   it is deleted.  If you need to build on top of it to correct
+   earlier mistakes, a new topic branch is created by forking at
+   the tip of the "master".  This is not strictly necessary, but
+   it makes it easier to keep your history simple.
+
+ * Whenever you need to test or publish your changes to topic
+   branches, merge them into "next" branch.
+
+The script, being an example, hardcodes the publish branch name
+to be "next", but it is trivial to make it configurable via
+$GIT_DIR/config mechanism.
+
+With this workflow, you would want to know:
+
+(1) ... if a topic branch has ever been merged to "next".  Young
+    topic branches can have stupid mistakes you would rather
+    clean up before publishing, and things that have not been
+    merged into other branches can be easily rebased without
+    affecting other people.  But once it is published, you would
+    not want to rewind it.
+
+(2) ... if a topic branch has been fully merged to "master".
+    Then you can delete it.  More importantly, you should not
+    build on top of it -- other people may already want to
+    change things related to the topic as patches against your
+    "master", so if you need further changes, it is better to
+    fork the topic (perhaps with the same name) afresh from the
+    tip of "master".
+
+Let's look at this example:
+
+		   o---o---o---o---o---o---o---o---o---o "next"
+		  /       /           /           /
+		 /   a---a---b A     /           /
+		/   /               /           /
+	       /   /   c---c---c---c B         /
+	      /   /   /             \         /
+	     /   /   /   b---b C     \       /
+	    /   /   /   /             \     /
+    ---o---o---o---o---o---o---o---o---o---o---o "master"
+
+
+A, B and C are topic branches.
+
+ * A has one fix since it was merged up to "next".
+
+ * B has finished.  It has been fully merged up to "master" and "next",
+   and is ready to be deleted.
+
+ * C has not merged to "next" at all.
+
+We would want to allow C to be rebased, refuse A, and encourage
+B to be deleted.
+
+To compute (1):
+
+	git rev-list ^master ^topic next
+	git rev-list ^master        next
+
+	if these match, topic has not merged in next at all.
+
+To compute (2):
+
+	git rev-list master..topic
+
+	if this is empty, it is fully merged to "master".
+
+DOC_END
+
+================
+File: reference/.git/hooks/pre-receive.sample
+================
+#!/bin/sh
+#
+# An example hook script to make use of push options.
+# The example simply echoes all push options that start with 'echoback='
+# and rejects all pushes when the "reject" push option is used.
+#
+# To enable this hook, rename this file to "pre-receive".
+
+if test -n "$GIT_PUSH_OPTION_COUNT"
+then
+	i=0
+	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
+	do
+		eval "value=\$GIT_PUSH_OPTION_$i"
+		case "$value" in
+		echoback=*)
+			echo "echo from the pre-receive-hook: ${value#*=}" >&2
+			;;
+		reject)
+			exit 1
+		esac
+		i=$((i + 1))
+	done
+fi
+
+================
+File: reference/.git/hooks/prepare-commit-msg.sample
+================
+#!/bin/sh
+#
+# An example hook script to prepare the commit log message.
+# Called by "git commit" with the name of the file that has the
+# commit message, followed by the description of the commit
+# message's source.  The hook's purpose is to edit the commit
+# message file.  If the hook fails with a non-zero status,
+# the commit is aborted.
+#
+# To enable this hook, rename this file to "prepare-commit-msg".
+
+# This hook includes three examples. The first one removes the
+# "# Please enter the commit message..." help message.
+#
+# The second includes the output of "git diff --name-status -r"
+# into the message, just before the "git status" output.  It is
+# commented because it doesn't cope with --amend or with squashed
+# commits.
+#
+# The third example adds a Signed-off-by line to the message, that can
+# still be edited.  This is rarely a good idea.
+
+COMMIT_MSG_FILE=$1
+COMMIT_SOURCE=$2
+SHA1=$3
+
+/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"
+
+# case "$COMMIT_SOURCE,$SHA1" in
+#  ,|template,)
+#    /usr/bin/perl -i.bak -pe '
+#       print "\n" . `git diff --cached --name-status -r`
+# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
+#  *) ;;
+# esac
+
+# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
+# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
+# if test -z "$COMMIT_SOURCE"
+# then
+#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
+# fi
+
+================
+File: reference/.git/hooks/push-to-checkout.sample
+================
+#!/bin/sh
+
+# An example hook script to update a checked-out tree on a git push.
+#
+# This hook is invoked by git-receive-pack(1) when it reacts to git
+# push and updates reference(s) in its repository, and when the push
+# tries to update the branch that is currently checked out and the
+# receive.denyCurrentBranch configuration variable is set to
+# updateInstead.
+#
+# By default, such a push is refused if the working tree and the index
+# of the remote repository has any difference from the currently
+# checked out commit; when both the working tree and the index match
+# the current commit, they are updated to match the newly pushed tip
+# of the branch. This hook is to be used to override the default
+# behaviour; however the code below reimplements the default behaviour
+# as a starting point for convenient modification.
+#
+# The hook receives the commit with which the tip of the current
+# branch is going to be updated:
+commit=$1
+
+# It can exit with a non-zero status to refuse the push (when it does
+# so, it must not modify the index or the working tree).
+die () {
+	echo >&2 "$*"
+	exit 1
+}
+
+# Or it can make any necessary changes to the working tree and to the
+# index to bring them to the desired state when the tip of the current
+# branch is updated to the new commit, and exit with a zero status.
+#
+# For example, the hook can simply run git read-tree -u -m HEAD "$1"
+# in order to emulate git fetch that is run in the reverse direction
+# with git push, as the two-tree form of git read-tree -u -m is
+# essentially the same as git switch or git checkout that switches
+# branches while keeping the local changes in the working tree that do
+# not interfere with the difference between the branches.
+
+# The below is a more-or-less exact translation to shell of the C code
+# for the default behaviour for git's push-to-checkout hook defined in
+# the push_to_deploy() function in builtin/receive-pack.c.
+#
+# Note that the hook will be executed from the repository directory,
+# not from the working tree, so if you want to perform operations on
+# the working tree, you will have to adapt your code accordingly, e.g.
+# by adding "cd .." or using relative paths.
+
+if ! git update-index -q --ignore-submodules --refresh
+then
+	die "Up-to-date check failed"
+fi
+
+if ! git diff-files --quiet --ignore-submodules --
+then
+	die "Working directory has unstaged changes"
+fi
+
+# This is a rough translation of:
+#
+#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
+if git cat-file -e HEAD 2>/dev/null
+then
+	head=HEAD
+else
+	head=$(git hash-object -t tree --stdin </dev/null)
+fi
+
+if ! git diff-index --quiet --cached --ignore-submodules $head --
+then
+	die "Working directory has staged changes"
+fi
+
+if ! git read-tree -u -m "$commit"
+then
+	die "Could not update working tree to new HEAD"
+fi
+
+================
+File: reference/.git/hooks/update.sample
+================
+#!/bin/sh
+#
+# An example hook script to block unannotated tags from entering.
+# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
+#
+# To enable this hook, rename this file to "update".
+#
+# Config
+# ------
+# hooks.allowunannotated
+#   This boolean sets whether unannotated tags will be allowed into the
+#   repository.  By default they won't be.
+# hooks.allowdeletetag
+#   This boolean sets whether deleting tags will be allowed in the
+#   repository.  By default they won't be.
+# hooks.allowmodifytag
+#   This boolean sets whether a tag may be modified after creation. By default
+#   it won't be.
+# hooks.allowdeletebranch
+#   This boolean sets whether deleting branches will be allowed in the
+#   repository.  By default they won't be.
+# hooks.denycreatebranch
+#   This boolean sets whether remotely creating branches will be denied
+#   in the repository.  By default this is allowed.
+#
+
+# --- Command line
+refname="$1"
+oldrev="$2"
+newrev="$3"
+
+# --- Safety check
+if [ -z "$GIT_DIR" ]; then
+	echo "Don't run this script from the command line." >&2
+	echo " (if you want, you could supply GIT_DIR then run" >&2
+	echo "  $0 <ref> <oldrev> <newrev>)" >&2
+	exit 1
+fi
+
+if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
+	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
+	exit 1
+fi
+
+# --- Config
+allowunannotated=$(git config --type=bool hooks.allowunannotated)
+allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
+denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
+allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
+allowmodifytag=$(git config --type=bool hooks.allowmodifytag)
+
+# check for no description
+projectdesc=$(sed -e '1q' "$GIT_DIR/description")
+case "$projectdesc" in
+"Unnamed repository"* | "")
+	echo "*** Project description file hasn't been set" >&2
+	exit 1
+	;;
+esac
+
+# --- Check types
+# if $newrev is 0000...0000, it's a commit to delete a ref.
+zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
+if [ "$newrev" = "$zero" ]; then
+	newrev_type=delete
+else
+	newrev_type=$(git cat-file -t $newrev)
+fi
+
+case "$refname","$newrev_type" in
+	refs/tags/*,commit)
+		# un-annotated tag
+		short_refname=${refname##refs/tags/}
+		if [ "$allowunannotated" != "true" ]; then
+			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
+			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
+			exit 1
+		fi
+		;;
+	refs/tags/*,delete)
+		# delete tag
+		if [ "$allowdeletetag" != "true" ]; then
+			echo "*** Deleting a tag is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	refs/tags/*,tag)
+		# annotated tag
+		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
+		then
+			echo "*** Tag '$refname' already exists." >&2
+			echo "*** Modifying a tag is not allowed in this repository." >&2
+			exit 1
+		fi
+		;;
+	refs/heads/*,commit)
+		# branch
+		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
+			echo "*** Creating a branch is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	refs/heads/*,delete)
+		# delete branch
+		if [ "$allowdeletebranch" != "true" ]; then
+			echo "*** Deleting a branch is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	refs/remotes/*,commit)
+		# tracking branch
+		;;
+	refs/remotes/*,delete)
+		# delete tracking branch
+		if [ "$allowdeletebranch" != "true" ]; then
+			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	*)
+		# Anything else (is there anything else?)
+		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
+		exit 1
+		;;
+esac
+
+# --- Finished
+exit 0
+
+================
+File: reference/.git/info/exclude
+================
+# git ls-files --others --exclude-from=.git/info/exclude
+# Lines that start with '#' are comments.
+# For a project mostly in C, the following would be a good set of
+# exclude patterns (uncomment them if you want to use them):
+# *.[oa]
+# *~
+
+================
+File: reference/.git/logs/refs/heads/main
+================
+0000000000000000000000000000000000000000 0c32f7764e928daf9473961c488e6e9a855339d2 Luke Nittmann <luke.nittmann@gmail.com> 1738221446 -0800	clone: from https://github.com/internet-development/www-internet-v2.git
+
+================
+File: reference/.git/logs/refs/remotes/origin/HEAD
+================
+0000000000000000000000000000000000000000 0c32f7764e928daf9473961c488e6e9a855339d2 Luke Nittmann <luke.nittmann@gmail.com> 1738221446 -0800	clone: from https://github.com/internet-development/www-internet-v2.git
+
+================
+File: reference/.git/logs/HEAD
+================
+0000000000000000000000000000000000000000 0c32f7764e928daf9473961c488e6e9a855339d2 Luke Nittmann <luke.nittmann@gmail.com> 1738221446 -0800	clone: from https://github.com/internet-development/www-internet-v2.git
+
+================
+File: reference/.git/refs/heads/main
+================
+0c32f7764e928daf9473961c488e6e9a855339d2
+
+================
+File: reference/.git/refs/remotes/origin/HEAD
+================
+ref: refs/remotes/origin/main
+
+================
+File: reference/.git/config
+================
+[core]
+	repositoryformatversion = 0
+	filemode = true
+	bare = false
+	logallrefupdates = true
+	ignorecase = true
+	precomposeunicode = true
+[remote "origin"]
+	url = https://github.com/internet-development/www-internet-v2.git
+	fetch = +refs/heads/*:refs/remotes/origin/*
+[branch "main"]
+	remote = origin
+	merge = refs/heads/main
+	vscode-merge-base = origin/main
+
+================
+File: reference/.git/description
+================
+Unnamed repository; edit this file 'description' to name the repository.
+
+================
+File: reference/.git/FETCH_HEAD
+================
+0c32f7764e928daf9473961c488e6e9a855339d2		branch 'main' of https://github.com/internet-development/www-internet-v2
+
+================
+File: reference/.git/HEAD
+================
+ref: refs/heads/main
+
+================
+File: reference/.git/packed-refs
+================
+# pack-refs with: peeled fully-peeled sorted 
+0c32f7764e928daf9473961c488e6e9a855339d2 refs/remotes/origin/main
+
+================
+File: reference/app/office/head.tsx
+================
+import DefaultMetaTags from '@components/DefaultMetaTags';
+
+export default async function Head({ params }) {
+  return (
+    <>
+      <DefaultMetaTags />
+    </>
+  );
+}
+
+================
+File: reference/app/office/layout.tsx
+================
+import Providers from '@components/Providers';
+
+export default function RootLayout({ children }: { children: React.ReactNode }) {
+  return (
+    <html lang="en-us">
+      <body className="theme-light">
+        <Providers>{children}</Providers>
+      </body>
+    </html>
+  );
+}
+
+================
+File: reference/app/office/page.tsx
+================
+import '@root/global.scss';
+
+import * as Constants from '@common/constants';
+import * as Utilities from '@common/utilities';
+
+import Accordion from '@components/Accordion';
+import ActionListItem from '@components/ActionListItem';
+import Canvas from '@components/Canvas';
+import DefaultLayout from '@components/page/DefaultLayout';
+import InternetDevelopmentLogo from '@components/svg/InternetDevelopmentLogo';
+import InternetDevelopmentLogoMark from '@components/svg/InternetDevelopmentLogoMark';
+import Table from '@components/Table';
+import TableRow from '@components/TableRow';
+import TableColumn from '@components/TableColumn';
+import Package from '@root/package.json';
+import styles from '@components/page/root.module.scss';
+
+export const dynamic = 'force-static';
+
+const VIDEO_URL = 'https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/03025ac3-aa78-4a21-ac3c-a465cb792d39.mp4';
+
+export async function generateMetadata({ params, searchParams }) {
+  const title = `${Package.name} - OFFICE`;
+  const description = `Learn more about our Office in Pike Place, Seattle`;
+  const url = 'https://internet.dev';
+  const handle = '@internetxstudio';
+
+  return {
+    description,
+    icons: {
+      icon: '/favicon-32x32.png',
+      shortcut: '/favicon-16x16.png',
+    },
+    metadataBase: new URL('https://internet.dev/office'),
+    openGraph: {
+      description,
+      images: [
+        {
+          url: 'https://next-s3-public.s3.us-west-2.amazonaws.com/internet-dev/intdev.png',
+          width: 1500,
+          height: 785,
+        },
+      ],
+      title,
+      type: 'website',
+      url,
+    },
+    title,
+    twitter: {
+      card: 'summary_large_image',
+      description,
+      handle,
+      images: ['https://next-s3-public.s3.us-west-2.amazonaws.com/internet-dev/intdev.png'],
+      title,
+      url,
+    },
+    url,
+  };
+}
+
+export default async function Page(props) {
+  return (
+    <DefaultLayout previewPixelSRC="https://intdev-global.s3.us-west-2.amazonaws.com/template-app-icon.png">
+      <div className={styles.row}>
+        <div className={styles.column} style={{ height: '176px', padding: 0 }}>
+          <Canvas />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <InternetDevelopmentLogo height="24px" />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <img className={styles.image} src="https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/7e6088bb-4ce2-47d9-9dfd-d658faed484d.png" />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <aside className={styles.aside}>
+            Champion Building, Pike Place
+            <br />
+            Seattle, Washington
+            <br />
+            United States of America, Earth
+          </aside>
+          <br />
+          <p className={styles.p}>We invite builders who love trying new things and learning to collaborate with us, guided by our values: everything matters, support your friends, and doing your best is more than enough.</p>
+          <br />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <img className={styles.image} src="https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/0bc8d758-d4a9-412e-aa28-1fa6e6481a9a.jpg" />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`What does the INTDEV office offer?`}>
+            <br />
+            Our space offers hardwood floors, symmetrical fiber internet, a local area network, two full kitchens, three meeting booths, a server room, lunch tables, and dedicated workstations. With 24/7 access and amenities like a color printer, shredder, scanner, gallery lounge, and triple-filtered water, we foster a collaborative environment where you can build your vision alongside like-minded peers.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Apply on Users Garden
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Manage your account
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+              Read our Office Use Agreement
+            </ActionListItem>
+            <br />
+            <br /> <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <img className={styles.image} src="https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/6dcedf7d-82d1-45db-a53e-31de509a7759.jpg" />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How do I work with INTDEV at their office?`}>
+            <br />
+            You can find an application link below or by reaching out through social. Please note that the INTDEV reserved desks are invite-only and intended for those with a genuine interest in building things together.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Apply on Users Garden
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Manage your account
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+              Read our Office Use Agreement
+            </ActionListItem>
+            <br />
+            <br /> <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <img className={styles.image} src="https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/9c524b6a-855e-4329-88cd-7bb81796fcc2.jpg" />
+          <br />
+        </div>
+      </div>
+
+      <footer className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <ActionListItem icon={`⊹`} href="https://wireframes.internet.dev/" target="_blank">
+            Explore INTDEV's open source work
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://github.com/orgs/internet-development/repositories" target="_blank">
+            Follow us on GitHub
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://www.linkedin.com/company/internet-dev" target="_blank">
+            Follow us on LinkedIn
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://www.instagram.com/internetdevelopmentstudio/" target="_blank">
+            Follow us on Instagram
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://read.cv/teams/intdev" target="_blank">
+            Follow us on Read.cv
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://x.com/internetxstudio" target="_blank">
+            Follow us on X
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+            Get our attention on Telegram
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="/">
+            Go home
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+            Manage your account
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-acceptable-use" target="_blank">
+            Read our Acceptable Use Policy
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+            Read our Office Use Agreement
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-privacy-policy" target="_blank">
+            Read our Privacy Policy
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-terms-of-service" target="_blank">
+            Read our Terms of Use
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://github.com/internet-development/www-internet-v2" target="_blank">
+            View source
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev" target="_blank">
+            Write a post
+          </ActionListItem>
+          <br />
+          Copyright © 2025. All rights reserved.
+          <br />
+          <br />
+          <br />
+        </div>
+      </footer>
+    </DefaultLayout>
+  );
+}
+
+================
+File: reference/app/head.tsx
+================
+import DefaultMetaTags from '@components/DefaultMetaTags';
+
+export default async function Head({ params }) {
+  return (
+    <>
+      <DefaultMetaTags />
+    </>
+  );
+}
+
+================
+File: reference/app/layout.tsx
+================
+import Providers from '@components/Providers';
+
+export default function RootLayout({ children }: { children: React.ReactNode }) {
+  return (
+    <html lang="en-us">
+      <body className="theme-light">
+        <Providers>{children}</Providers>
+      </body>
+    </html>
+  );
+}
+
+================
+File: reference/app/manifest.ts
+================
+import Package from '@root/package.json';
+
+import { MetadataRoute } from 'next';
+
+export default function manifest(): MetadataRoute.Manifest {
+  return {
+    background_color: '#ffffff',
+    description: Package.description,
+    display: 'standalone',
+    icons: [
+      {
+        src: '/favicon.ico',
+        sizes: 'any',
+        type: 'image/x-icon',
+      },
+    ],
+    name: Package.name,
+    short_name: Package.name,
+    start_url: '/',
+    theme_color: '#ffffff',
+  };
+}
+
+================
+File: reference/app/page.tsx
+================
+import '@root/global.scss';
+
+import * as Constants from '@common/constants';
+import * as Utilities from '@common/utilities';
+
+import Accordion from '@components/Accordion';
+import ActionListItem from '@components/ActionListItem';
+import Canvas from '@components/Canvas';
+import DefaultLayout from '@components/page/DefaultLayout';
+import InternetDevelopmentLogo from '@components/svg/InternetDevelopmentLogo';
+import InternetDevelopmentLogoMark from '@components/svg/InternetDevelopmentLogoMark';
+import Table from '@components/Table';
+import TableRow from '@components/TableRow';
+import TableColumn from '@components/TableColumn';
+import Package from '@root/package.json';
+import styles from '@components/page/root.module.scss';
+
+export const dynamic = 'force-static';
+
+const VIDEO_URL = 'https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/03025ac3-aa78-4a21-ac3c-a465cb792d39.mp4';
+
+export async function generateMetadata({ params, searchParams }) {
+  const title = Package.name;
+  const description = Package.description;
+  const url = 'https://internet.dev';
+  const handle = '@internetxstudio';
+
+  return {
+    description,
+    icons: {
+      icon: '/favicon-32x32.png',
+      shortcut: '/favicon-16x16.png',
+    },
+    metadataBase: new URL('https://internet.dev'),
+    openGraph: {
+      description,
+      images: [
+        {
+          url: 'https://next-s3-public.s3.us-west-2.amazonaws.com/internet-dev/intdev.png',
+          width: 1500,
+          height: 785,
+        },
+      ],
+      title,
+      type: 'website',
+      url,
+    },
+    title,
+    twitter: {
+      card: 'summary_large_image',
+      description,
+      handle,
+      images: ['https://next-s3-public.s3.us-west-2.amazonaws.com/internet-dev/intdev.png'],
+      title,
+      url,
+    },
+    url,
+  };
+}
+
+export default async function Page(props) {
+  return (
+    <DefaultLayout previewPixelSRC="https://intdev-global.s3.us-west-2.amazonaws.com/template-app-icon.png">
+      <div className={styles.row}>
+        <div className={styles.column} style={{ height: '176px', padding: 0 }}>
+          <Canvas />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <video className={styles.video} src={VIDEO_URL} autoPlay muted loop playsInline preload="auto">
+            Your browser does not support the video tag.
+          </video>
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <h1 className={styles.h1}>Internet Development Studio Company ("INTDEV")</h1>
+          <aside className={styles.aside}>
+            Champion Building, Pike Place
+            <br />
+            Seattle, Washington
+            <br />
+            United States of America, Earth
+          </aside>
+          <br />
+          <p className={styles.p}>An american vocation guild and great hall for webmasters. Every day we practice the craft of designing, building, shipping, and maintaining websites, platforms, brands, and applications—end to end.</p>
+          <br />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <ActionListItem icon={`⊹`} href="https://wireframes.internet.dev/" target="_blank">
+            Explore INTDEV's open source work
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+            Get our attention on Telegram
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://sacred.computer" target="_blank">
+            Go explore SRCL
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="/office">
+            Learn more about the Pike Place office
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://www.beautifulthings.xyz/" target="_blank">
+            Look at beautiful things
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+            Manage your account
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev" target="_blank">
+            Write a post
+          </ActionListItem>
+
+          <br />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`What does the Internet Development Studio Company ("INTDEV") actually do?`}>
+            <br />
+            We provide a team you can hire to get things done.
+            <br />
+            <br />
+            That team is a 6 person dedicated tiger team specializing in delivering high-performance web applications, internal tools, branding assets, presentations, static websites, LLM interfaces, illustrations, productivity applications, technical writing, and general web development services. By embedding with up to four companies at a time, we allocate a shared bandwidth of 360 hours per week to drive productivity and deliver results. It’s a process we genuinely enjoy, and every major milestone we knock out helps us grow and learn.
+            <br />
+            <br />
+            We also provide an invite-only space in Seattle for people to work alongside us, offering a collaborative environment that also serves the portfolio venture companies of{' '}
+            <a href="https://mana.inc" target="_blank">
+              Mana Industries Fund 1 LP
+            </a>{' '}
+            and contributors.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://wireframes.internet.dev/" target="_blank">
+              Explore INTDEV's open source work
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`Who did INTDEV work for in 2024?`}>
+            <br />
+            Aliaksandr Hudzilin, Bakken & Bæck, Beautiful Things, El Cap Capital, Google, Mana Industries, Microsoft, Protocol Labs and various startups.
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`Who is INTDEV working for in 2025?`}>
+            <br />
+            Microsoft
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How does an engagement with INTDEV typically feel?`}>
+            <br />
+            Imagine hiring your own team, and one that already has a well-established design and engineering culture.
+            <br />
+            <br />
+            By hiring us, you gain a team that works seamlessly in person, is highly productive, and has a proven track record. This is all made possible by the extensive successful startup experience shared across our team.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How much does it cost to hire this team?`}>
+            <br />
+            <Table>
+              <TableRow>
+                <TableColumn>ONE MONTH</TableColumn>
+                <TableColumn>$70,000 USD</TableColumn>
+              </TableRow>
+
+              <TableRow>
+                <TableColumn>THREE MONTHS</TableColumn>
+                <TableColumn>$195,000 USD</TableColumn>
+              </TableRow>
+
+              <TableRow>
+                <TableColumn>SIX MONTHS</TableColumn>
+                <TableColumn>$360,000 USD</TableColumn>
+              </TableRow>
+
+              <TableRow>
+                <TableColumn>NINE MONTHS</TableColumn>
+                <TableColumn>$495,000 USD</TableColumn>
+              </TableRow>
+
+              <TableRow>
+                <TableColumn>TWELVE MONTHS</TableColumn>
+                <TableColumn>$600,000 USD</TableColumn>
+              </TableRow>
+            </Table>
+            <br />
+            From the start, it will feel like you built this team yourself.
+            <br />
+            <br />
+            We don’t do change orders—instead, we aim to complete as much work as possible within our estimates while you have us on retainer. This approach is ideal for situations where you want to accomplish a lot efficiently.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`Why do I have to hire the full six-person team?`}>
+            <br />
+            Our studio fosters deep in-person collaboration, where we openly discuss challenges and make a concerted effort to learn and improve our skills through shared experiences.
+            <br />
+            <br />
+            This approach strengthens our team and enables us to support venture-backed companies with tight deadlines and ambitious goals. By learning from each other’s mistakes, we continually refine our work and strive to hit the mark every time.
+            <br />
+            <br />
+            Also, it should be known that, based on our prices, you're only paying the cost of a full-time employee for a much larger headcount. A lot of clients find this to be high value.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`Is there a discount if we want to work with less people from the INTDEV?`}>
+            <br />
+            No, but as a client, you are welcome to work with fewer team members if that is your preference.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How does working with the INTDEV work day to day?`}>
+            <br />
+            Here’s a glimpse of what it’s like to collaborate with our six-person team.
+            <br />
+            <br />
+            <Accordion defaultValue={true} title={`Discovery Video Call`}>
+              <br />
+              We begin with a video call to understand your goals and explore how our team can deliver results. We’re flexible with your preferred video chat platform.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`[OPTIONAL] First Meeting in Seattle, WA`}>
+              <br />
+              Join us at our Pike Place office to work alongside our team as we dive into your goals. You’re welcome to use our meeting rooms and open desks, meet other companies, and enjoy engaging conversations. We always have filtered water and are here on weekends, too.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Onboarding`}>
+              <br />
+              From day one, we integrate seamlessly into your team, bringing years of experience and familiarity with compliance requirements like NDAs. Comfortable across Linux, MacOS, and Windows, we’re happy to train your employees when needed and adapt to your existing tools and processes.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Embedding`}>
+              <br />
+              We adapt to the roles you need, whether following your direction or advocating for key features, integrating into your daily routine at whatever level you require. Comfortable with agile, waterfall, or even a “move fast and break things” approach, we’re always ready to embrace challenges.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Working in the Office`}>
+              <br />
+              We can host stand-ups and any meetings you need in our office, with meeting rooms perfect for bringing in your own customers. Sharing the space often leads to team-building, and we’re happy to host and cook for large groups with a little notice. <br />
+              <br />
+              Pike Place offers great restaurants and scenic spots for breaks, though guest parking isn’t available, so please plan accordingly. Our office features symmetrical fiber internet and quiet workspaces, and we keep our client list small to stay flexible and accommodating.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Technical Program Management`}>
+              <br />
+              We help identify your Technical Program Management needs, aligning your team around a shared goal with fresh perspectives. We guide long-term strategic decisions, define “done” from the start, and set expectations upfront. We bring experience from high-profile projects while focusing on supporting your vision and helping you achieve it.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Zero to One`}>
+              <br />
+              With over a decade of startup experience, our design partners help bring your product to market for the first time and support future launches, treating each launch as a personal milestone. We love exploring logos, drawing inspiration from our collection of books, and rely on tools like Figma, Sketch, Photoshop, and Illustrator. <br />
+              <br />
+              Our network also includes some of Seattle’s top photographers and videographers, many of whom work directly in our space.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Get in Quick`}>
+              <br />
+              When you need quick results without extra discussion, we’re ready to jump in, whether it’s tackling long-standing backlogs, handling one-off tasks, or adding missing design system components. We can deliver results without delay. <br />
+              <br />
+              We’re unfazed by technical debt, comfortable managing tricky repository forks, and always ready to take on backlog tasks—just let us know how we can help.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Tooling Investment`}>
+              <br />
+              We know a team’s identity is often shaped by the tools they use. Whether you’re looking to strengthen your current toolkit or start fresh, we can help. Our expertise spans tools like Next.js, Postgres, Figma, GSAP, and Tailwind, along with CSS dialects like CSS-in-JS and email-compliant inline styles. <br />
+              <br />
+              With one of our partners contributing to Expo (React Native), we deeply value tooling. We respect your existing tools while embracing fresh starts that energize teams and foster growth. Involve us in consulting meetings for fresh perspectives—we’re always ready to explore new technologies, including LLMs.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Launch, Maintain, and Survive`}>
+              <br />
+              Your uptime is critical, and while we can’t promise 99.9999999% uptime at scale, we specialize in keeping websites running with low effort on your part. This allows you to focus on growing your product and engaging your customers without unnecessary distractions.
+              <br />
+              <br />
+              Whether you need help with IPFS, managing VPS, consulting on on-premise solutions, or working with tools like Fly, Vercel, and Render, we’ve got you covered. With experience in GCE, GCS, AWS EC2, S3, and database backups, we’re here to ensure your systems work.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Supporting Volatility`}>
+              <br />
+              If you’re navigating changes in priorities, we offer the flexibility to help you adapt. We understand that leadership shifts happen, and we’re here to support you while keeping your team focused on what matters most. Whether starting fresh or removing what’s not working, our flexible deal structure evolves with your needs, always aligned with your goal of driving success and growth for your business.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Libraries and Documentation`}>
+              <br />
+              We value great documentation and design systems, even if they’re not always a priority for everyone. We can create clear, user-friendly documentation and develop intuitive design systems for your web products, building tools to make these processes more efficient. <br />
+              <br />
+              Whether working with tools like Scalar, GitBook, and Notion or contributing to publications, blog posts, and video tutorials, we’re happy to provide custom solutions to meet your needs.
+              <br />
+              <br />
+            </Accordion>
+            <br />
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`What is INTDEV's relationship with the University of Washington?`}>
+            <br />
+            If your department requires a website that complies with the latest legal standards, is powered by modern web tooling, and boasts a functional design, partner with us. We read 313 pages of documentation for you.
+            <br />
+            <br />
+            We admire the{' '}
+            <a href="https://www.washington.edu/" target="_blank">
+              University of Washington
+            </a>
+            ’s dedication to innovation and inclusivity, and the alumni who work in our office proudly align our mission with these values. As designers, we are committed to ensuring that every website we create is not only modern but also accessible.
+            <br />
+            <br />
+            <a href="https://www.federalregister.gov/documents/2024/04/24/2024-07758/nondiscrimination-on-the-basis-of-disability-accessibility-of-web-information-and-services-of-state" target="_blank">
+              The guidelines
+            </a>{' '}
+            released by the Department of Justice under Title II of the Americans with Disabilities Act (ADA) have set a new bar for digital accessibility, which we embrace. Effective April 24, 2024, these standards require all web content to achieve compliance by April 24, 2026.
+            <br />
+            <br />
+            <Accordion defaultValue={true} title={`Ensuring all web content and mobile applications meet the Web Content Accessibility Guidelines (WCAG) 2.1, Level AA standards.`}>
+              <br />
+              This is a cornerstone of our approach to accessibility. We achieve this through rigorous processes and meticulous attention to detail. Our team follows best practices to make sure every user has a seamless and inclusive experience.
+              <br />
+              <br />
+              <Table>
+                <TableRow>
+                  <TableColumn>Semantic HTML</TableColumn>
+                  <TableColumn>We use semantic HTML to define the structure and meaning of web content, ensuring assistive technologies can interpret and navigate the site effectively.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Keyboard Accessibility</TableColumn>
+                  <TableColumn>We ensure all features are accessible via keyboard for users who cannot use a mouse.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Color Contrast</TableColumn>
+                  <TableColumn>We employ high-contrast color schemes to ensure text is readable by users with visual impairments while adhering to UW’s brand guidelines.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Alternative Text</TableColumn>
+                  <TableColumn>We provide descriptive text for images and multimedia content, helping screen readers convey information accurately to visually impaired users.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Resizable Text</TableColumn>
+                  <TableColumn>Our designs allow for text resizing without loss of content or functionality, catering to users who need larger fonts.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Error Identification and Suggestion</TableColumn>
+                  <TableColumn>Our forms are designed to identify errors and provide suggestions for correction, improving usability for those with cognitive disabilities.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Consistent Navigation</TableColumn>
+                  <TableColumn>Our predictable navigation and layouts help users with cognitive and learning disabilities.</TableColumn>
+                </TableRow>
+              </Table>
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Providing alternative text for all visual media, including images, videos, and interactive elements.`}>
+              <br />
+              Alternative text ensures that all users, including those with visual impairments, can fully understand and engage with all content on the website.
+              <br />
+              <br />
+              <Table>
+                <TableRow>
+                  <TableColumn>Descriptive Alt Text for Images</TableColumn>
+                  <TableColumn>We provide concise and descriptive alternative text for all images, enabling screen reader users to understand the context and content of visual elements.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Detailed Descriptions for Complex Images</TableColumn>
+                  <TableColumn>For complex images such as charts, infographics, or detailed diagrams, we offer extended descriptions to convey all critical information effectively.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Captions for Videos</TableColumn>
+                  <TableColumn>All video content includes synchronized captions, ensuring that users with hearing impairments can access the information being presented.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Transcripts for Audio Content</TableColumn>
+                  <TableColumn>We provide textual transcripts for all audio content, making it accessible to users with hearing impairments and allowing for easier comprehension during listening.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Text Alternatives for Interactive Elements</TableColumn>
+                  <TableColumn>Interactive elements, such as buttons, forms, and dynamic content, come with clear text alternatives or labels that describe their function and purpose.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Accessible Icons</TableColumn>
+                  <TableColumn>We use ARIA labels or alternative text for icons and other graphical elements to ensure they communicate their meaning to assistive technologies.</TableColumn>
+                </TableRow>
+              </Table>
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Making complex navigational structures accessible with clear and user-friendly interfaces.`}>
+              <br />
+              This is a fundamental aspect of our design philosophy. We believe that every user deserves an accessible browsing experience, regardless of the complexity of the content.
+              <br />
+              <br />
+              <Table>
+                <TableRow>
+                  <TableColumn>Logical Menu Hierarchies</TableColumn>
+                  <TableColumn>We design navigation menus with logical hierarchies, ensuring that users can easily find the information they need with minimal clicks.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Descriptive Links</TableColumn>
+                  <TableColumn>All links are clearly labeled with descriptive text, so users understand where each link will take them, aiding both screen readers and visual users.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Accessible Dropdown Menus</TableColumn>
+                  <TableColumn>Our dropdown menus are designed to be keyboard-accessible and screen reader-friendly, ensuring inclusivity for all users.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Breadcrumb Navigation</TableColumn>
+                  <TableColumn>We employ breadcrumb navigation to help users understand their current location within the website and easily backtrack if necessary.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Search Functionality</TableColumn>
+                  <TableColumn>We integrate advanced search functionalities, allowing users to quickly locate specific content without navigating through multiple menus.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Consistent Layouts</TableColumn>
+                  <TableColumn>We maintain consistency in layouts and navigation across all pages, so users can predict and understand where to find information.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Skip Navigation Links</TableColumn>
+                  <TableColumn>Our skip links allow users to bypass repetitive content and navigate directly to the main content, which is particularly helpful for screen reader users.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Visual Indicators</TableColumn>
+                  <TableColumn>Clear visual indicators highlight the current page or section, helping users keep track of their navigation path.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>ARIA Landmarks</TableColumn>
+                  <TableColumn>We implement ARIA (Accessible Rich Internet Applications) landmarks to define regions of a page, making it easier for screen reader users to navigate and skip to different sections.</TableColumn>
+                </TableRow>
+              </Table>
+              <br />
+              <br />
+            </Accordion>
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How do I join INTDEV as a Webmaster?`}>
+            <br />
+            In 2025, we plan to grow our team from six to eight members. If you’re passionate about the vocation of being a Webmaster, let’s talk.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://wireframes.internet.dev/examples/features/job-posting" target="_blank">
+              View the job
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`What does the INTDEV office offer?`}>
+            <br />
+            Our space offers hardwood floors, symmetrical fiber internet, a local area network, two full kitchens, three meeting booths, a server room, lunch tables, and dedicated workstations. With 24/7 access and amenities like a color printer, shredder, scanner, gallery lounge, and triple-filtered water, we foster a collaborative environment where you can build your vision alongside like-minded peers.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Apply on Users Garden
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Manage your account
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+              Read our Office Use Agreement
+            </ActionListItem>
+            <br />
+            <br /> <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How do I work with INTDEV at their office?`}>
+            <br />
+            You can find an application link below or by reaching out through social. Please note that the INTDEV reserved desks are invite-only and intended for those with a genuine interest in building things together.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Apply on Users Garden
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Manage your account
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+              Read our Office Use Agreement
+            </ActionListItem>
+            <br />
+            <br /> <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          Use this SVG for a logo without the word “INTDEV.”
+          <br />
+          <br />
+          <InternetDevelopmentLogoMark height="48px" />
+          <br />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          Use this SVG for a logo that includes our brand name.
+          <br />
+          <br />
+          <InternetDevelopmentLogo height="48px" />
+          <br />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <footer className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <img className={styles.image} src="https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/2fb7e012-4fa9-4446-9bf4-e2c5c7e4992a.jpg" />
+          <ActionListItem icon={`⊹`} href="https://wireframes.internet.dev/" target="_blank">
+            Explore INTDEV's open source work
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://bsky.app/profile/internetstudio.bsky.social" target="_blank">
+            Follow us on Bluesky
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://github.com/orgs/internet-development/repositories" target="_blank">
+            Follow us on GitHub
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://www.linkedin.com/company/internet-dev" target="_blank">
+            Follow us on LinkedIn
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://www.instagram.com/internetdevelopmentstudio/" target="_blank">
+            Follow us on Instagram
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://read.cv/teams/intdev" target="_blank">
+            Follow us on Read.cv
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://x.com/internetxstudio" target="_blank">
+            Follow us on X
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+            Get our attention on Telegram
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://sacred.computer" target="_blank">
+            Go explore SRCL
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="/office">
+            Learn more about the Pike Place office
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+            Manage your account
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-acceptable-use" target="_blank">
+            Read our Acceptable Use Policy
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+            Read our Office Use Agreement
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-privacy-policy" target="_blank">
+            Read our Privacy Policy
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-terms-of-service" target="_blank">
+            Read our Terms of Use
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://github.com/internet-development/www-internet-v2" target="_blank">
+            View source
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev" target="_blank">
+            Write a post
+          </ActionListItem>
+          <br />
+          Copyright © 2025. All rights reserved.
+          <br />
+          <br />
+          <br />
+        </div>
+      </footer>
+    </DefaultLayout>
+  );
+}
+
+================
+File: reference/app/robots.ts
+================
+import { MetadataRoute } from 'next';
+
+export default function robots(): MetadataRoute.Robots {
+  return {
+    rules: {
+      userAgent: '*',
+      allow: '/',
+      disallow: '/api/',
+    },
+    sitemap: 'https://internet.dev/sitemap.xml',
+  };
+}
+
+================
+File: reference/app/sitemap.ts
+================
+import { MetadataRoute } from 'next';
+
+export default function sitemap(): MetadataRoute.Sitemap {
+  return [
+    {
+      url: 'https://internet.dev',
+      lastModified: new Date(),
+    },
+  ];
+}
+
+================
+File: reference/common/constants.ts
+================
+export const MAX_SIZE_BYTES = 15728640;
+
+// NOTE(jimmylee):
+// https://github.com/internet-development/apis
+// export const API = `http://localhost:10001/api`;
+export const API = `https://api.internet.dev/api`;
+
+export const Users = {
+  tiers: {
+    UNVERIFIED: 0,
+    VERIFIED: 10,
+    PAYING: 20,
+    GENERAL_CO_WORKING: 30,
+    PARTNER: 40,
+    ADMIN: 100,
+  },
+};
+
+export const Tiers = {
+  PAYING: 899,
+  GENERAL_CO_WORKING: 32900,
+  PARTNER: 279000,
+};
+
+export const Payments = {
+  899: 'PAYING',
+  32900: 'GENERAL_CO_WORKING',
+  279000: 'PARTNER',
+};
+
+export const Payouts = {
+  PAYING: 1500,
+  GENERAL_CO_WORKING: 45000,
+  PARTNER: 45000,
+};
+
+export const LANDSCAPES = [
+  ['Sahara Desert', 'The Sahara stretches across North Africa with shifting dunes that tower above the horizon. Even in its harsh sunlight and cold nights, resilient life finds a way to endure.'],
+  ['Grand Canyon', 'Carved by the Colorado River, the Grand Canyon reveals layers of ancient rock. Its chasms echo with wind and the distant calls of raptors gliding through the afternoon sky.'],
+  ['Amazon Rainforest', 'The Amazon Rainforest teems with biodiversity under a dense green canopy. Rivers and flooded plains sustain countless species, while humid air hangs heavy with the promise of storms.'],
+  ['Rocky Mountains', 'The Rockies rise like rugged spines across the continent. Snowpack feeds rivers that carve valleys where elk graze, and fir trees cling to the slopes.'],
+  ['Gobi Desert', 'The Gobi Desert rolls out in arid sweeps across northern China and southern Mongolia. Sparse grasses and hardy camels testify to its unforgiving climate.'],
+  ['Andes Mountains', 'The Andes dominate western South America with ragged peaks and hidden valleys. Llamas graze on high plateaus, and glaciers feed the rivers far below.'],
+  ['Serengeti Plains', 'The Serengeti spreads under the African sun in rolling grasslands. Wildebeests and zebras migrate in vast herds, guided by the promise of water and fresh pasture.'],
+  ['Yosemite Valley', 'Glacial forces shaped this granite cradle in California. Towering waterfalls cascade from sheer cliffs, while giant sequoias stand in quiet strength.'],
+  ['Namib Desert', 'The Namib Desert clings to the Atlantic coast of southern Africa. Rust-red dunes shift above hidden water tables where desert elephants roam.'],
+  ['Patagonia', 'Patagonia’s windswept plains and jagged peaks stretch across Argentina and Chile. Glaciers calve into turquoise lakes, and guanacos graze on hardy grasses.'],
+  ['Swiss Alps', 'The Swiss Alps rise with sharp spires of snow and ice. Mountain chalets cling to slopes where wildflowers bloom each summer in vibrant displays.'],
+  ['Himalayas', 'The Himalayas hold the world’s highest summits beneath a freezing sky. From lush foothills to lofty glaciers, this range tests life’s resilience.'],
+  ['Icelandic Highlands', 'Iceland’s interior stands stark and raw with volcanic plains, steaming vents, and glacier-fed rivers. The wind sweeps across moss-coated lava fields in lonely gusts.'],
+  ['Atacama Desert', 'The Atacama is among the driest places on Earth. Its scorched soil and salt flats see rare blooms that burst into color after elusive rains.'],
+  ['Redwood Forest', 'Coastal redwoods tower in perpetual mist along the Pacific. Their trunks, thick and ancient, cradle a hidden world of fern and moss.'],
+  ['Scottish Highlands', 'The Highlands roll in rugged hills capped by heather and stone. Lochs reflect ever-shifting skies, and the wind carries the distant clang of sheep bells.'],
+  ['Great Rift Valley', 'This massive geological trench cleaves eastern Africa, where lakes shimmer at the bottom of steep escarpments. Flamingos gather in vast flocks to feed on algae.'],
+  ['Okavango Delta', 'The Okavango spreads like a bright labyrinth of channels and wetlands in Botswana. Seasonal floods create a green haven for elephants, lions, and hippos.'],
+  ['Appalachian Mountains', 'Old and eroded, the Appalachians meander through eastern North America. Their forests host black bears, rhododendrons, and the misty quiet of forest hollows.'],
+  ['Death Valley', 'Death Valley bakes under a relentless sun, reaching some of the hottest temperatures on record. Cracked salt flats testify to evaporated lakes and lost water.'],
+  ['Dolomites', 'Jagged limestone peaks define northern Italy’s Dolomites. Alpine meadows lie below sheer cliffs, where climbers test themselves against silent stone.'],
+  ['Torres del Paine', 'Chile’s Torres del Paine juts into the southern sky with glacier-fed lakes at its base. Guanacos roam windblown plains as ice cracks overhead.'],
+  ['Lofoten Islands', 'Lofoten’s dramatic peaks rise straight from Norway’s cold seas. Fishing villages huddle along rocky shores, while gulls circle overhead in crisp air.'],
+  ['Siberian Tundra', 'The Siberian tundra spans a realm of permafrost and low shrubs. Winters stretch long and bleak, yet migratory birds still find respite here each summer.'],
+  ['Norwegian Fjords', 'Deep fjords carve into Norway’s coast where dark waters mirror towering cliffs. Small farms cling to green patches between rock and sea.'],
+  ['Bungle Bungle Range', 'These striped sandstone domes rise from the Australian outback. Gorges cut deep under a harsh sun, hiding pockets of lush vegetation.'],
+  ['Zion Canyon', 'Zion Canyon glows red and orange under the Utah sky. The Virgin River sculpts sheer walls that watch over narrow trails and hidden pools.'],
+  ['Lake Baikal', 'Lake Baikal in Siberia is the world’s deepest lake. Its waters shimmer with unmatched clarity, home to species found nowhere else on Earth.'],
+  ['Banff National Park', 'Banff crowns the Canadian Rockies with turquoise lakes and towering peaks. Grizzlies roam pine forests while glacier-fed rivers reflect untouched wilderness.'],
+  ['Wadi Rum', 'Wadi Rum’s sandstone cliffs loom in Jordan’s desert, carved by millennia of wind and time. Nomadic tribes wander under a silent, star-filled sky.'],
+  ['Cappadocia', 'Cappadocia’s whimsical rock formations rise over central Turkey’s plains. Soft stone spires hold hidden chapels and the ghosts of ancient dwellers.'],
+];
+
+export const SAMPLE_TABLE_DATA_CHANGE_ME = [
+  ['NAME', 'SYMBOL', 'PRICE', 'HOLDINGS'],
+  ['Bat', 'BAT', '$9.01', '400'],
+  ['Bear', 'BR', '$56.78', '200'],
+  ['Camel', 'CML', '$55.67', '70'],
+  ['Cheetah', 'CHT', '$13.45', '150'],
+  ['Crab', 'CRB', '$15.67', '250'],
+  ['Deer', 'DER', '$29.99', '110'],
+  ['Dolphin', 'DLP', '$77.89', '50'],
+  ['Eagle', 'EGL', '$45.67', '90'],
+  ['Falcon', 'FLC', '$40.22', '85'],
+  ['Fox', 'FOX', '$12.34', '100'],
+  ['Frog', 'FRG', '$7.89', '400'],
+  ['Giraffe', 'GRF', '$44.56', '80'],
+  ['Hedgehog', 'HDG', '$11.23', '200'],
+  ['Horse', 'HRS', '$54.32', '70'],
+  ['Kangaroo', 'KNG', '$15.67', '120'],
+  ['Koala', 'KLA', '$22.34', '150'],
+  ['Leopard', 'LPR', '$14.56', '110'],
+  ['Lemur', 'LMR', '$11.12', '320'],
+  ['Lion', 'LION', '$67.89', '80'],
+  ['Lynx', 'LNX', '$16.78', '130'],
+  ['Mouse', 'MSE', '$5.12', '500'],
+  ['Octopus', 'OCT', '$88.90', '40'],
+  ['Otter', 'OTR', '$20.21', '180'],
+  ['Owl', 'OWL', '$19.01', '160'],
+  ['Panda', 'PND', '$78.90', '55'],
+  ['Peacock', 'PCK', '$12.34', '100'],
+  ['Penguin', 'PNG', '$33.45', '90'],
+  ['Porcupine', 'PRC', '$17.89', '140'],
+  ['Rabbit', 'RBT', '$9.10', '350'],
+  ['Raccoon', 'RCC', '$18.90', '150'],
+  ['Shark', 'SHK', '$89.01', '50'],
+  ['Snake', 'SNK', '$10.11', '300'],
+  ['Squirrel', 'SQL', '$10.12', '250'],
+  ['Tiger', 'TGR', '$34.56', '120'],
+  ['Turtle', 'TRL', '$66.78', '60'],
+  ['Whale', 'WHL', '$123.45', '30'],
+  ['Wolf', 'WLF', '$23.45', '150'],
+  ['Zebra', 'ZBR', '$65.43', '60'],
+];
+
+export const CHESSBOARD_DEFAULT_POSITIONS: string[][] = [
+  ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'],
+  ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],
+  ['', '', '', '', '', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],
+  ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R'],
+];
+
+export const CHESSBOARD_BAD_BISHOP: string[][] = [
+  ['r', ' ', ' ', 'q', ' ', 'r', 'k', ''],
+  [' ', 'b', ' ', ' ', ' ', 'p', 'p', 'p'],
+  ['p', '', 'p', 'b', 'p', 'n', '', ''],
+  ['', '', 'p', 'p', '', '', '', ''],
+  ['Q', '', '', 'P', '', '', '', ''],
+  ['', '', 'P', '', 'P', 'N', 'B', ''],
+  ['P', 'P', ' ', 'N', '', 'P', 'P', 'P'],
+  ['R', ' ', ' ', ' ', 'K', ' ', ' ', 'R'],
+];
+
+export const CHESSBOARD_CHECKMATE_STEP_ONE: string[][] = [
+  [' ', ' ', ' ', '', ' ', 'r', ' ', 'r'],
+  ['p', 'b', ' ', 'n', ' ', 'p', ' ', 'k'],
+  ['', 'q', '', 'N', 'p', '', '', ''],
+  ['', 'p', 'p', 'n', 'P', '', 'Q', ''],
+  ['', 'b', 'p', 'P', 'B', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['P', 'P', ' ', ' ', ' ', 'P', 'P', 'P'],
+  ['R', ' ', ' ', ' ', ' ', 'R', 'K', ''],
+];
+
+export const CHESSBOARD_CHECKMATE_STEP_TWO: string[][] = [
+  [' ', ' ', ' ', '', ' ', 'r', ' ', 'r'],
+  ['p', 'b', ' ', 'n', ' ', ' ', ' ', 'k'],
+  ['', 'q', '', 'N', 'p', '', '', ''],
+  ['', 'p', 'p', 'n', 'P', 'p', 'Q', ''],
+  ['', 'b', 'p', 'P', 'B', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['P', 'P', ' ', ' ', ' ', 'P', 'P', 'P'],
+  ['R', ' ', ' ', ' ', ' ', 'R', 'K', ''],
+];
+
+export const CHESSBOARD_CHECKMATE_STEP_THREE: string[][] = [
+  [' ', ' ', ' ', '', ' ', 'r', ' ', 'r'],
+  ['p', 'b', ' ', 'n', ' ', ' ', ' ', 'k'],
+  ['', 'q', '', 'N', 'p', 'P', '', ''],
+  ['', 'p', 'p', 'n', '', '', 'Q', ''],
+  ['', 'b', 'p', 'P', 'B', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['P', 'P', ' ', ' ', ' ', 'P', 'P', 'P'],
+  ['R', ' ', ' ', ' ', ' ', 'R', 'K', ''],
+];
+
+================
+File: reference/common/hooks.ts
+================
+import * as React from 'react';
+
+export function useDebouncedCallback<T>(ms: number, f: (...args: T[]) => void, deps: any[]): (...args: T[]) => void {
+  let throttled = false;
+  let latestArgs: T | null = null;
+
+  const clearThrottle = () => {
+    throttled = false;
+
+    if (latestArgs !== null) {
+      f(latestArgs);
+      latestArgs = null;
+    }
+  };
+
+  return React.useCallback(
+    (args) => {
+      if (throttled) {
+        latestArgs = args;
+      } else {
+        f(args);
+
+        throttled = true;
+
+        setTimeout(clearThrottle, ms);
+      }
+    },
+    [...deps, ms]
+  );
+}
+
+================
+File: reference/common/position.ts
+================
+export type Placement = 'top' | 'bottom' | 'left' | 'right';
+
+export function calculate(triggerElement: HTMLElement, popoverElement: HTMLElement, scrollX: number = window.scrollX, scrollY: number = window.scrollY): { placement: Placement; position: { top: number; left: number } } {
+  let triggerRect;
+  let popoverRect;
+
+  if (triggerElement) {
+    triggerRect = triggerElement.getBoundingClientRect();
+  }
+
+  if (popoverElement) {
+    popoverRect = popoverElement.getBoundingClientRect();
+  }
+
+  const spaceAbove = triggerRect.top;
+  const spaceBelow = window.innerHeight - triggerRect.bottom;
+  const spaceLeft = triggerRect.left;
+  const spaceRight = window.innerWidth - triggerRect.right;
+
+  const viewportHeightThreshold = window.innerHeight * 0.4;
+  const viewportWidthThreshold = window.innerWidth * 0.4;
+
+  let placement: Placement = 'bottom';
+  let top = 0;
+  let left = 0;
+  if (!popoverRect) {
+    return { placement, position: { top: 0, left: 0 } };
+  }
+
+  if (spaceAbove >= viewportHeightThreshold && spaceAbove >= popoverRect.height) {
+    placement = 'top';
+    top = triggerRect.top + scrollY - popoverRect.height;
+    left = triggerRect.left + scrollX + (triggerRect.width - popoverRect.width) / 2;
+  } else if (spaceBelow >= viewportHeightThreshold && spaceBelow >= popoverRect.height) {
+    placement = 'bottom';
+    top = triggerRect.bottom + scrollY;
+    left = triggerRect.left + scrollX + (triggerRect.width - popoverRect.width) / 2;
+  } else if (spaceRight >= viewportWidthThreshold && spaceRight >= popoverRect.width) {
+    placement = 'right';
+    top = triggerRect.top + scrollY + (triggerRect.height - popoverRect.height) / 2;
+    left = triggerRect.right + scrollX;
+  } else if (spaceLeft >= viewportWidthThreshold && spaceLeft >= popoverRect.width) {
+    placement = 'left';
+    top = triggerRect.top + scrollY + (triggerRect.height - popoverRect.height) / 2;
+    left = triggerRect.left + scrollX - popoverRect.width;
+  } else {
+    placement = 'bottom';
+    top = triggerRect.bottom + scrollY;
+    left = triggerRect.left + scrollX + (triggerRect.width - popoverRect.width) / 2;
+  }
+
+  if (left < 0) left = 0;
+  else if (left + popoverRect.width > window.innerWidth) left = window.innerWidth - popoverRect.width;
+
+  if (top < 0) top = 0;
+  else if (top + popoverRect.height > window.innerHeight + scrollY) top = window.innerHeight + scrollY - popoverRect.height;
+
+  return { placement, position: { top, left } };
+}
+
+================
+File: reference/common/queries.ts
+================
+import * as Constants from '@common/constants';
+import * as Utilities from '@common/utilities';
+
+export async function getData({ route, key, body }, qualifier = 'data') {
+  let result;
+  try {
+    const response = await fetch(route, {
+      method: 'POST',
+      headers: { 'X-API-KEY': key, 'Content-Type': 'application/json' },
+      body: JSON.stringify(body),
+    });
+    result = await response.json();
+  } catch (e) {
+    return null;
+  }
+
+  if (!result) {
+    return null;
+  }
+
+  if (result.error) {
+    return null;
+  }
+
+  if (!result[qualifier]) {
+    return null;
+  }
+
+  return result;
+}
+
+export async function onUserListData({ key }) {
+  const route = `${Constants.API}/data`;
+  const body = {};
+  return await getData({ route, key, body });
+}
+
+export async function onUserDeleteData({ id, key }) {
+  const route = `${Constants.API}/data/delete`;
+  const body = { id };
+  return await getData({ route, key, body });
+}
+
+export async function onRefreshDocuments({ key, type, domain }) {
+  const route = `${Constants.API}/documents`;
+  const body = { type, domain };
+  return await getData({ route, key, body });
+}
+
+export async function onGetDocumentById({ id }) {
+  const route = `${Constants.API}/documents/${id}`;
+  const body = {};
+  return await getData({ route, key: null, body });
+}
+
+export async function onUserCreateDocument({ key, type, domain }) {
+  const route = `${Constants.API}/documents/create`;
+  const body = { type, domain };
+  return await getData({ route, key, body });
+}
+
+export async function onDeleteDocumentById({ id, key }) {
+  const route = `${Constants.API}/documents/delete`;
+  const body = { id };
+  return await getData({ route, key, body });
+}
+
+export async function onUpdateDocumentById({ id, key, data }) {
+  const route = `${Constants.API}/documents/update`;
+  const body = { id, data };
+  return await getData({ route, key, body });
+}
+
+export async function onPublicUserAuthenticate({ email, password }) {
+  const route = `${Constants.API}/users/authenticate`;
+  const body = { email, password };
+  return getData({ route, key: null, body }, 'user');
+}
+
+export async function onPublicUserForgotPassword({ email }) {
+  const route = `${Constants.API}/users/reset-password`;
+  const body = { email, source: 'wireframes.internet.dev' };
+  return getData({ route, key: null, body }, 'success');
+}
+
+export async function onUserChangePassword({ key, password }) {
+  const route = `${Constants.API}/users/update-viewer-password`;
+  const body = { password };
+  return getData({ route, key, body });
+}
+
+export async function onUserRegenerateAPIKey({ email, password }) {
+  const route = `${Constants.API}/users/regenerate-key`;
+  const body = { email, password };
+  return getData({ route, key: null, body }, 'user');
+}
+
+export async function onUserUnsubscribeServices({ key }) {
+  const route = `${Constants.API}/users/subscriptions/unsubscribe`;
+  const body = null;
+  return getData({ route, key, body }, 'user');
+}
+
+export async function onRefreshPosts({ key, type, user_id }) {
+  const route = `${Constants.API}/posts`;
+  const body = { type, user_id };
+  return await getData({ route, key, body });
+}
+
+export async function onUserCreatePost({ id, key, src, type }) {
+  const route = `${Constants.API}/posts/create`;
+  const body = { type, fields: { fileId: id, public: true }, src };
+  return getData({ route, key, body });
+}
+
+export async function onUserCreateThread({ fields, key, src, type }) {
+  const route = `${Constants.API}/posts/create`;
+  const body = { fields, src, type };
+  return getData({ route, key, body });
+}
+
+export async function onUserDeletePost({ id, key }) {
+  const route = `${Constants.API}/posts/delete`;
+  const body = { id };
+  return getData({ route, key, body });
+}
+
+export async function onUserListThreadReplies({ id, key, orderBy }) {
+  const route = `${Constants.API}/posts/all-thread-replies`;
+  const body = { id, orderBy };
+  return getData({ route, key, body });
+}
+
+export async function onUserListThreads({ key, orderBy }) {
+  const route = `${Constants.API}/posts/all-threads`;
+  const body = { orderBy };
+  return getData({ route, key, body });
+}
+
+export async function onUserUploadDataGCS({ domain, file, key }) {
+  let signedResult;
+  const name = file.name;
+  const type = file.type;
+  const size = file.size;
+
+  if (size > Constants.MAX_SIZE_BYTES) {
+    return { error: 'File size exceeds 15mb limit' };
+  }
+
+  try {
+    const route = `${Constants.API}/data/generate-presigned-url-gcs`;
+    const body = { domain, type, file: name, size };
+    signedResult = await getData({ route, key, body }, 'uploadURL');
+  } catch (e) {
+    return null;
+  }
+
+  try {
+    fetch(signedResult.uploadURL, {
+      method: 'PUT',
+      headers: {
+        'Content-Type': 'application/octet-stream',
+      },
+      body: file,
+    });
+  } catch (e) {
+    return null;
+  }
+
+  return signedResult;
+}
+
+export async function onUserUploadDataS3({ domain, file, key }) {
+  let signedResult;
+  const name = file.name;
+  const type = file.type;
+  const size = file.size;
+
+  if (size > Constants.MAX_SIZE_BYTES) {
+    return { error: 'File size exceeds 15mb limit' };
+  }
+
+  try {
+    const route = `${Constants.API}/data/generate-presigned-url`;
+    const body = { domain, type, file: name, size };
+    signedResult = await getData({ route, key, body }, 'uploadURL');
+  } catch (e) {
+    return null;
+  }
+
+  try {
+    fetch(signedResult.uploadURL, {
+      method: 'PUT',
+      body: file,
+    });
+  } catch (e) {
+    return null;
+  }
+
+  return signedResult;
+}
+
+================
+File: reference/common/server.ts
+================
+import * as Utilities from '@common/utilities';
+
+import Cors from '@modules/cors';
+
+// NOTE(jimmylee)
+// import aesjs from 'aes-js';
+/*
+Some endpoints on https://api.internet.dev require server-side decryption. Without it, you won’t be able to perform actions like password recovery or Google authentication. To enable these features, you’ll need to set two environment variables with the correct values, and have an active partnership with us.
+
+When we built this open-source template for learning purposes, we aimed to make it fully open and accessible. However, since we are also running a service, certain restrictions are necessary. We appreciate your understanding.
+
+API_AES_KEY=
+API_IV_KEY=
+*/
+
+/*
+export function decrypt(hex) {
+  if (Utilities.isEmpty(process.env.API_AES_KEY)) {
+    throw new Error('process.env.API_AES_KEY');
+    return;
+  }
+
+  if (Utilities.isEmpty(process.env.API_IV_KEY)) {
+    throw new Error('process.env.API_IV_KEY');
+    return;
+  }
+
+  const aesKey = aesjs.utils.utf8.toBytes(process.env.API_AES_KEY);
+  const base64IV = process.env.API_IV_KEY;
+
+  if (!base64IV) {
+    throw new Error('process.env.API_IV_KEY is undefined. Please set the environment variable.');
+  }
+
+  const ivBytes = aesjs.utils.hex.toBytes(Buffer.from(base64IV, 'base64').toString('hex'));
+  const aesCtr = new aesjs.ModeOfOperation.ctr(aesKey, new aesjs.Counter(ivBytes));
+  const encryptedBytes = aesjs.utils.hex.toBytes(hex);
+  const decryptedBytes = aesCtr.decrypt(encryptedBytes);
+  const decrypted = aesjs.utils.utf8.fromBytes(decryptedBytes);
+
+  return decrypted;
+}
+*/
+
+export function initMiddleware(middleware) {
+  return (req, res) =>
+    new Promise((resolve, reject) => {
+      middleware(req, res, (result) => {
+        if (result instanceof Error) {
+          return reject(result);
+        }
+        return resolve(result);
+      });
+    });
+}
+
+export const cors = initMiddleware(
+  Cors({
+    methods: ['GET', 'POST', 'DELETE', 'OPTIONS'],
+  })
+);
+
+export async function setup(context): Promise<{ sessionKey?: any; viewer?: Record<string, any> | null }> {
+  let viewer = null;
+  let sessionKey = context.req.cookies['sitekey'] || '';
+
+  if (!Utilities.isEmpty(sessionKey)) {
+    try {
+      const response = await fetch('https://api.internet.dev/api/users/viewer', {
+        method: 'PUT',
+        headers: { 'X-API-KEY': sessionKey, 'Content-Type': 'application/json' },
+      });
+      const result = await response.json();
+      if (result && result.viewer) {
+        viewer = result.viewer;
+      }
+    } catch (e) {}
+  }
+
+  return { sessionKey, viewer };
+}
+
+export async function tryKeyWithoutCookie(key): Promise<{ sessionKey?: any; viewer?: Record<string, any> | null }> {
+  let viewer = null;
+
+  if (!Utilities.isEmpty(key)) {
+    try {
+      const response = await fetch('https://api.internet.dev/api/users/viewer', {
+        method: 'PUT',
+        headers: { 'X-API-KEY': key, 'Content-Type': 'application/json' },
+      });
+      const result = await response.json();
+      if (result && result.viewer) {
+        viewer = result.viewer;
+      }
+    } catch (e) {}
+  }
+
+  return { sessionKey: key, viewer };
+}
+
+================
+File: reference/common/utilities.ts
+================
+const hasOwn = {}.hasOwnProperty;
+const localhostDomainRE = /^localhost[\:?\d]*(?:[^\:?\d]\S*)?$/;
+const nonLocalhostDomainRE = /^[^\s\.]+\.\S{2,}$/;
+const protocolAndDomainRE = /^(?:\w+:)?\/\/(\S+)$/;
+
+export function noop() {
+  return null;
+}
+
+export function pluralize(text: string, count: number) {
+  return count > 1 || count === 0 ? `${text}s` : text;
+}
+
+export function getOrdinalNumber(n) {
+  return n + (n > 0 ? ['th', 'st', 'nd', 'rd'][(n > 3 && n < 21) || n % 10 > 3 ? 0 : n % 10] : '');
+}
+
+// NOTE(jimmylee)
+// Stolen from: https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/deepEqual.ts
+export function deepEqual(x: any, y: any): boolean {
+  //@ts-ignore
+  return x && y && typeof x === 'object' && typeof y === 'object'
+    ? Object.keys(x).length === Object.keys(y).length &&
+        //@ts-ignore
+        Object.keys(x).reduce((isEqual, key) => isEqual && deepEqual(x[key], y[key]), true)
+    : x === y;
+}
+
+export function getDomainFromEmailWithoutAnySubdomain(email: string): string {
+  const atIndex = email.lastIndexOf('@');
+  if (atIndex === -1) {
+    return '';
+  }
+
+  const domain = email.slice(atIndex + 1);
+  const domainParts = domain.split('.');
+
+  if (domainParts.length < 2) {
+    return '';
+  }
+
+  const mainDomain = domainParts.slice(-2).join('.');
+  return mainDomain;
+}
+
+export function onHandleThemeChange(className?: string) {
+  const body = document.body;
+
+  body.classList.forEach((existingClass) => {
+    if (existingClass.startsWith('theme-')) {
+      body.classList.remove(existingClass);
+    }
+  });
+
+  if (className) {
+    body.classList.add(className);
+  } else {
+    body.classList.add('theme-light');
+  }
+}
+
+export function onHandleFontChange(className?: string) {
+  const body = document.body;
+
+  if (className) {
+    body.classList.forEach((existingClass) => {
+      if (existingClass.startsWith('font-')) {
+        body.classList.remove(existingClass);
+      }
+    });
+
+    body.classList.add(className);
+    return;
+  }
+
+  body.classList.forEach((existingClass) => {
+    if (existingClass.startsWith('font-')) {
+      body.classList.remove(existingClass);
+    }
+  });
+}
+
+export function formatDollars(value: number): string {
+  return new Intl.NumberFormat('en-US', {
+    style: 'currency',
+    currency: 'USD',
+  }).format(value);
+}
+
+export function calculatePositionWithGutter(rect, objectWidth, viewportWidth, gutter = 24) {
+  const right = viewportWidth - rect.right;
+  const top = rect.top + rect.height + gutter;
+  const side = right + objectWidth >= viewportWidth ? 'left' : 'right';
+  const adjustedRight = side === 'left' ? viewportWidth - objectWidth - gutter : right;
+  return { top, right: adjustedRight, side };
+}
+
+export function calculatePositionWithGutterById(id, objectWidth, viewportWidth, gutter?) {
+  let rect;
+  if (id) {
+    const el = document.getElementById(id);
+    if (el) {
+      rect = el.getBoundingClientRect();
+    }
+  }
+  return calculatePositionWithGutter(rect, objectWidth, viewportWidth, gutter);
+}
+
+export function leftPad(input, length) {
+  const zerosNeeded = length - input.length;
+  if (zerosNeeded <= 0) {
+    return input;
+  }
+
+  const zeros = '0'.repeat(zerosNeeded);
+
+  return zeros + input;
+}
+
+export function toDateISOString(data: string) {
+  const date = new Date(data);
+  const dayOfWeek = date.toLocaleDateString('en-US', {
+    weekday: 'long',
+  });
+  const month = date.toLocaleDateString('en-US', {
+    month: 'long',
+  });
+  const dayOfMonth = getOrdinalNumber(date.getDate());
+  const year = date.getFullYear();
+
+  const formattedDate = `${dayOfWeek}, ${month} ${dayOfMonth}, ${year}`;
+
+  return formattedDate;
+}
+
+export function elide(string, length = 140, emptyState = '...') {
+  if (isEmpty(string)) {
+    return emptyState;
+  }
+
+  if (string.length < length) {
+    return string.trim();
+  }
+
+  return `${string.substring(0, length)}...`;
+}
+
+export function bytesToSize(bytes: number, decimals: number = 2) {
+  if (bytes === 0) return '0 Bytes';
+
+  const k = 1000;
+  const dm = decimals < 0 ? 0 : decimals;
+  const sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
+
+  const i = Math.floor(Math.log(bytes) / Math.log(k));
+
+  return `${(bytes / Math.pow(k, i)).toFixed(dm)} ${sizes[i]}`;
+}
+
+export function isEmpty(text: any) {
+  // NOTE(jimmylee):
+  // If a number gets passed in, it isn't considered empty for zero.
+  if (text === 0) {
+    return false;
+  }
+
+  if (!text) {
+    return true;
+  }
+
+  if (typeof text === 'object') {
+    return true;
+  }
+
+  if (text.length === 0) {
+    return true;
+  }
+
+  text = text.toString();
+
+  return Boolean(!text.trim());
+}
+
+export function createSlug(text: any) {
+  if (isEmpty(text)) {
+    return 'untitled';
+  }
+
+  const a = 'æøåàáäâèéëêìíïîòóöôùúüûñçßÿœæŕśńṕẃǵǹḿǘẍźḧ·/_,:;';
+  const b = 'aoaaaaaeeeeiiiioooouuuuncsyoarsnpwgnmuxzh------';
+  const p = new RegExp(a.split('').join('|'), 'g');
+
+  return text
+    .toString()
+    .toLowerCase()
+    .replace(/\s+/g, '-') // Replace spaces with -
+    .replace(p, (c) => b.charAt(a.indexOf(c))) // Replace special chars
+    .replace(/&/g, '-and-') // Replace & with 'and'
+    .replace(/[^\w\-]+/g, '') // Remove all non-word chars
+    .replace(/\-\-+/g, '-') // Replace multiple - with single -
+    .replace(/^-+/, '') // Trim - from start of text
+    .replace(/-+$/, ''); // Trim - from end of text
+}
+
+export function isUrl(string: any) {
+  if (typeof string !== 'string') {
+    return false;
+  }
+
+  let match = string.match(protocolAndDomainRE);
+  if (!match) {
+    return false;
+  }
+
+  let everythingAfterProtocol = match[1];
+  if (!everythingAfterProtocol) {
+    return false;
+  }
+
+  if (localhostDomainRE.test(everythingAfterProtocol) || nonLocalhostDomainRE.test(everythingAfterProtocol)) {
+    return true;
+  }
+
+  return false;
+}
+
+export function debounce<Args extends unknown[]>(fn: (...args: Args) => void, delay: number) {
+  let timeoutID: number | undefined;
+  let lastArgs: Args | undefined;
+
+  const run = () => {
+    if (lastArgs) {
+      fn(...lastArgs);
+      lastArgs = undefined;
+    }
+  };
+
+  const debounced = (...args: Args) => {
+    clearTimeout(timeoutID);
+    lastArgs = args;
+    timeoutID = window.setTimeout(run, delay);
+  };
+
+  debounced.flush = () => {
+    clearTimeout(timeoutID);
+  };
+
+  return debounced;
+}
+
+export function timeAgo(dateInput: Date | string | number): string {
+  const date = new Date(dateInput);
+  const now = new Date();
+  const secondsPast = (now.getTime() - date.getTime()) / 1000;
+
+  if (secondsPast < 0 || isNaN(secondsPast)) {
+    return '[INVALID]';
+  }
+
+  if (secondsPast < 60) {
+    return 'Just now';
+  } else if (secondsPast < 3600) {
+    const minutes = Math.floor(secondsPast / 60);
+    return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;
+  } else if (secondsPast < 86400) {
+    const hours = Math.floor(secondsPast / 3600);
+    return `${hours} hour${hours > 1 ? 's' : ''} ago`;
+  } else if (secondsPast < 604800) {
+    const days = Math.floor(secondsPast / 86400);
+    return `${days} day${days > 1 ? 's' : ''} ago`;
+  }
+
+  const formattedDate = date.toLocaleDateString('en-US', {
+    month: '2-digit',
+    day: '2-digit',
+    year: 'numeric',
+  });
+
+  return formattedDate;
+}
+
+export function classNames(...args: any[]): string {
+  let classes: string[] = [];
+
+  for (let i = 0; i < arguments.length; i++) {
+    let arg = arguments[i];
+    if (!arg) continue;
+
+    let argType = typeof arg;
+
+    if (argType === 'string' || argType === 'number') {
+      classes.push(arg);
+    } else if (Array.isArray(arg)) {
+      if (arg.length) {
+        let inner = classNames.apply(null, arg);
+        if (inner) {
+          classes.push(inner);
+        }
+      }
+    } else if (argType === 'object') {
+      if (arg.toString !== Object.prototype.toString) {
+        classes.push(arg.toString());
+      } else {
+        for (let key in arg) {
+          if (hasOwn.call(arg, key) && arg[key]) {
+            classes.push(key);
+          }
+        }
+      }
+    }
+  }
+
+  return classes.join(' ');
+}
+
+export async function generateNonce() {
+  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
+  let result = '';
+  const charactersLength = characters.length;
+  for (let i = 0; i < 8; i++) {
+    result += characters.charAt(Math.floor(Math.random() * charactersLength));
+  }
+  return result;
+}
+
+export function filterUndefined(obj) {
+  const res = {};
+  Object.keys(obj)
+    .filter((k) => obj[k] !== undefined)
+    .forEach((k) => (res[k] = obj[k]));
+  return res;
+}
+
+export const isFocusableElement = (element: EventTarget | null): element is HTMLElement => {
+  if (!element || !(element instanceof HTMLElement)) {
+    return false;
+  }
+
+  const focusableSelectors = ['a[href]', 'button', 'input', 'select', 'textarea', '[tabindex]:not([tabindex="-1"])', '[contenteditable="true"]'];
+
+  return element.matches(focusableSelectors.join(', '));
+};
+
+export const findNextFocusable = (element: Element | null, direction: 'next' | 'previous' = 'next'): HTMLElement | null => {
+  if (!element) return null;
+
+  const focusableSelectors = ['a[href]', 'button', 'input', 'select', 'textarea', '[tabindex]:not([tabindex="-1"])', '[contenteditable="true"]'];
+
+  const focusableElements = Array.from(document.querySelectorAll<HTMLElement>(focusableSelectors.join(', ')));
+
+  const currentIndex = focusableElements.indexOf(element as HTMLElement);
+
+  if (currentIndex !== -1) {
+    const nextIndex = direction === 'next' ? (currentIndex + 1) % focusableElements.length : (currentIndex - 1 + focusableElements.length) % focusableElements.length;
+
+    return focusableElements[nextIndex];
+  }
+
+  return null;
+};
+
+export const findFocusableDescendant = (container: Element | null, currentFocused: Element | null = null, direction: 'next' | 'previous' = 'next'): HTMLElement | null => {
+  if (!container) return null;
+
+  const focusableElements = Array.from(container.querySelectorAll<HTMLElement>('a[href], button, input, select, textarea, [tabindex]:not([tabindex="-1"]), [contenteditable="true"]'));
+
+  if (focusableElements.length === 0) return null;
+
+  let index = 0;
+  if (currentFocused) {
+    const currentIndex = focusableElements.indexOf(currentFocused as HTMLElement);
+    if (currentIndex !== -1) {
+      index = direction === 'next' ? currentIndex + 1 : currentIndex - 1;
+    }
+  }
+
+  if (index >= 0 && index < focusableElements.length) {
+    return focusableElements[index];
+  }
+
+  return null;
+};
+
+================
+File: reference/components/detectors/OutsideElementEvent.tsx
+================
+import * as React from 'react';
+
+interface OutsideElementEventProps {
+  className?: string;
+  children: React.ReactNode;
+  onOutsideEvent: (event: MouseEvent | TouchEvent) => void;
+  style?: React.CSSProperties;
+}
+
+const OutsideElementEvent: React.FC<OutsideElementEventProps> = ({ className, children, onOutsideEvent, style }) => {
+  const ref = React.useRef<HTMLDivElement>(null);
+
+  const handleOutsideEvent = React.useCallback(
+    (event: MouseEvent | TouchEvent) => {
+      if (!(event.target instanceof Element)) return;
+
+      if (event.target.hasAttribute('data-detector-ignore')) {
+        return;
+      }
+
+      if (ref.current && !ref.current.contains(event.target as Node)) {
+        onOutsideEvent(event);
+      }
+    },
+    [onOutsideEvent]
+  );
+
+  React.useEffect(() => {
+    document.addEventListener('mousedown', handleOutsideEvent);
+    document.addEventListener('touchstart', handleOutsideEvent);
+
+    return () => {
+      document.removeEventListener('mousedown', handleOutsideEvent);
+      document.removeEventListener('touchstart', handleOutsideEvent);
+    };
+  }, [handleOutsideEvent]);
+
+  return (
+    <div ref={ref} className={className} style={style}>
+      {children}
+    </div>
+  );
+};
+
+export default OutsideElementEvent;
+
+================
+File: reference/components/examples/AS400.module.scss
+================
+.root {
+}
+
+================
+File: reference/components/examples/AS400.tsx
+================
+'use client';
+
+import styles from '@components/AS400.module.scss';
+
+import * as React from 'react';
+
+import Card from '@components/Card';
+import Row from '@components/Row';
+import RowSpaceBetween from '@components/RowSpaceBetween';
+import Table from '@components/Table';
+import TableRow from '@components/TableRow';
+import TableColumn from '@components/TableColumn';
+import TextArea from '@components/TextArea';
+
+type AS400Props = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const AS400 = () => {
+  return (
+    <>
+      <Card>
+        <RowSpaceBetween>
+          <span style={{ minWidth: `10ch` }}>COMMAND</span>
+          <span style={{ minWidth: `10ch` }}>Menu : ⌃+T</span>
+          <span style={{ minWidth: `10ch`, textAlign: 'right' }}>IND333</span>
+        </RowSpaceBetween>
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow style={{ textAlign: 'center' }}>
+            <TableColumn>F O O D&nbsp;&nbsp;D I S T R I B U T I O N</TableColumn>
+          </TableRow>
+          <TableRow style={{ textAlign: 'center' }}>
+            <TableColumn>- - Advance Sales Menu - -</TableColumn>
+          </TableRow>
+        </Table>
+        <br />
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow>
+            <TableColumn>1. Order Entry</TableColumn>
+            <TableColumn>13. Create Texlon/MSI Orders</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>2. Route Recap</TableColumn>
+            <TableColumn>14. Create Posting w/Scanner</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>3. Staging Ticket</TableColumn>
+            <TableColumn></TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>4. Picking Ticket</TableColumn>
+            <TableColumn>15. Order List</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>5. Order Posting</TableColumn>
+            <TableColumn>16. Order Maintenance</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>6. Bill of Lading</TableColumn>
+            <TableColumn>16. Order Hold</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>7. Load Sheets</TableColumn>
+            <TableColumn>18. Order Release</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>8. Order Entry Invoicing</TableColumn>
+            <TableColumn>19. Order Cancellation</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>9. Order Entry Confirmation</TableColumn>
+            <TableColumn>20. Order Change</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>10. Order Entry Processing</TableColumn>
+            <TableColumn>21. Unsettled Invoice Report</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>&nbsp;</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>11. Credit Memo Entry</TableColumn>
+            <TableColumn>- - Transaction Processing Menu - -</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>12. Credit Memo Processing</TableColumn>
+            <TableColumn>- - Main Menu - -</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn></TableColumn>
+            <TableColumn>24. Sign Off</TableColumn>
+          </TableRow>
+        </Table>
+        <br />
+        <br />
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow>
+            <TableColumn>Ready for option number or command</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>
+              <TextArea isBlink />
+            </TableColumn>
+          </TableRow>
+        </Table>
+      </Card>
+      <br />
+      <Card>
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;Option: 1337...&nbsp;&nbsp; Copy: US&nbsp;&nbsp;&nbsp;&nbsp;ITEM ACTIVITY INQUIRY</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>IND333</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Regn: NW</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}></TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;Item #: 6666666</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}></TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GMO HONEYDEW MELON USDA PRIME 72 OZ</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}></TableColumn>
+          </TableRow>
+        </Table>
+        <br />
+        <br />
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow>
+            <TableColumn>Warehouse</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>On Hand</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>On Order</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>In Transit</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>Total</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>W/S</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>Sell</TableColumn>
+          </TableRow>
+
+          <TableRow>
+            <TableColumn>&nbsp;</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;01 SEATTLE</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;02 PORTLAND</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;06 TUKWILA</TableColumn>
+            <TableColumn>89</TableColumn>
+            <TableColumn>162</TableColumn>
+            <TableColumn>162</TableColumn>
+            <TableColumn>413</TableColumn>
+            <TableColumn>7.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;08 KIRKLAND</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;09 ALOHA</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;10 ANCHORAGE</TableColumn>
+            <TableColumn>107</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>324</TableColumn>
+            <TableColumn>511</TableColumn>
+            <TableColumn>5.5</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;13 SILVERDALE</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;17 EUGENE</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;61 FEDERAL WAY</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;63 NE ANCHORAGE</TableColumn>
+            <TableColumn>229</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>162</TableColumn>
+            <TableColumn>391</TableColumn>
+            <TableColumn>4.5</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;64 TUMWATER</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;67 MISSOULA</TableColumn>
+            <TableColumn>201</TableColumn>
+            <TableColumn>648</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>849</TableColumn>
+            <TableColumn>5.2</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;95 TACOMA</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+        </Table>
+        <br />
+        <br />
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow>
+            <TableColumn>CF-3 Exit&nbsp;&nbsp;&nbsp;&nbsp;CF7-Next Item&nbsp;&nbsp;&nbsp;&nbsp;CF21-Print Report</TableColumn>
+          </TableRow>
+        </Table>
+      </Card>
+    </>
+  );
+};
+
+AS400.displayName = 'AS400';
+
+export default AS400;
+
+================
+File: reference/components/examples/DashboardRadar.module.scss
+================
+.customSidebar {
+  display: flex;
+  align-items: center;
+  justify-content: space-between;
+  width: 100%;
+  flex-direction: column;
+  height: calc(var(--theme-line-height-base) * (var(--font-size) * 29.5));
+}
+
+.customTop {
+  min-height: 10%;
+  height: 100%;
+}
+
+.customBottom {
+  flex-shrink: 0;
+  width: 100%;
+}
+
+.root {
+  min-width: 56ch;
+}
+
+.cross {
+  width: 9ch;
+  height: calc(var(--theme-line-height-base) * (var(--font-size) * 7));
+  margin: calc(var(--theme-line-height-base) * (var(--font-size) * 0.5)) 0 calc(var(--theme-line-height-base) * (var(--font-size) * 0.5)) 0;
+  display: flex;
+  justify-content: space-between;
+  flex-direction: column;
+}
+
+.square {
+  width: 4.3ch;
+  height: calc(var(--theme-line-height-base) * (var(--font-size) * 3.4));
+}
+
+.nw {
+  border-right: 2px solid var(--theme-text);
+  border-bottom: 2px solid var(--theme-text);
+}
+
+.ne {
+  border-left: 2px solid var(--theme-text);
+  border-bottom: 2px solid var(--theme-text);
+}
+
+.sw {
+  border-top: 2px solid var(--theme-text);
+  border-right: 2px solid var(--theme-text);
+}
+
+.se {
+  border-top: 2px solid var(--theme-text);
+  border-left: 2px solid var(--theme-text);
+}
+
+.customContent {
+  width: 100%;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  height: calc(var(--theme-line-height-base) * (var(--font-size) * 24.5));
+}
+
+================
+File: reference/components/examples/DashboardRadar.tsx
+================
+import styles from '@components/examples/DashboardRadar.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import ActionButton from '@components/ActionButton';
+import ButtonGroup from '@components/ButtonGroup';
+import Card from '@components/Card';
+import RowSpaceBetween from '@components/RowSpaceBetween';
+import SidebarLayout from '@components/SidebarLayout';
+import Sphere from '@components/svg/Sphere';
+
+const RadarMarker = (props) => {
+  return (
+    <div className={styles.cross}>
+      <RowSpaceBetween>
+        <div className={Utilities.classNames(styles.square, styles.nw)} />
+        <div className={Utilities.classNames(styles.square, styles.ne)} />
+      </RowSpaceBetween>
+      <RowSpaceBetween>
+        <div className={Utilities.classNames(styles.square, styles.sw)} />
+        <div className={Utilities.classNames(styles.square, styles.se)} />
+      </RowSpaceBetween>
+    </div>
+  );
+};
+
+const DashboardRadar = (props) => {
+  return (
+    <div className={styles.root}>
+      <SidebarLayout
+        isReversed
+        sidebar={
+          <Card>
+            <div className={styles.customSidebar}>
+              <div className={styles.customTop}>
+                TIME FROM
+                <ActionButton style={{ width: '100%' }}>11:11:11:11</ActionButton>
+                <br />
+                <br />
+                PRESENT
+                <br />
+                P.O.R.
+                <br />
+                NOSTROMO
+                <br />
+              </div>
+              <div className={styles.customBottom}>
+                HEADING
+                <br />
+                <ButtonGroup isFull items={[{ body: 'N .36' }, { body: 'E .18' }]} />
+                <br />
+                GROUND
+                <br />
+                <ActionButton rootStyle={{ width: '100%' }}>SPEED 78.26</ActionButton>
+                <br />
+                CONDITION
+                <br />
+                CODE
+                <br />
+                <ActionButton style={{ width: '100%' }}>16 S=C75C</ActionButton>
+                <ActionButton>PAST=8</ActionButton>
+                <br />
+                <br />
+                <ActionButton rootStyle={{ width: '100%' }}>System #4</ActionButton>
+                <br />
+                <br />
+                AUTODECOUNT
+                <br />
+                <br />
+                <ActionButton rootStyle={{ width: '100%', textAlign: 'right' }}>3454.94#</ActionButton>
+              </div>
+            </div>
+          </Card>
+        }
+        defaultSidebarWidth={19}
+      >
+        <Card>
+          <RowSpaceBetween>
+            <span style={{ flexShrink: 0 }}>DEORBITAL DESCENT</span>
+            <span style={{ minWidth: '10%', width: '100%', display: 'flex', justifyContent: 'flex-end' }}>
+              <span>
+                <ActionButton>COMMENCE FINAL</ActionButton>
+                <br />
+                <ActionButton>SYSTEM :0L: 76.75 :08:</ActionButton>
+              </span>
+            </span>
+          </RowSpaceBetween>
+        </Card>
+        <br />
+        <Card>
+          <RowSpaceBetween style={{ position: 'absolute', top: 0, left: `6ch`, right: `6ch` }}>
+            <RadarMarker />
+            <RadarMarker />
+          </RowSpaceBetween>
+          <div className={styles.customContent}>
+            <Sphere style={{ transform: 'translateX(24ch) rotateZ(40deg)' }} />
+          </div>
+          <RowSpaceBetween style={{ position: 'absolute', bottom: `calc(var(--theme-line-height-base) * (var(--font-size) * 0.5))`, left: `6ch`, right: `6ch` }}>
+            <RadarMarker />
+            <RadarMarker />
+          </RowSpaceBetween>
+        </Card>
+      </SidebarLayout>
+    </div>
+  );
+};
+
+export default DashboardRadar;
+
+================
+File: reference/components/examples/Denabase.module.scss
+================
+.root {
+  min-width: 68ch;
+  margin-top: calc(var(--theme-line-height-base) * 1rem);
+}
+
+.dna {
+  min-width: 71ch;
+  -webkit-text-size-adjust: 100%;
+}
+
+.tag {
+  width: 3ch;
+  height: calc(var(--theme-line-height-base) * 0.5rem);
+  flex-shrink: 0;
+  box-shadow:
+    inset 2px 0 0 var(--theme-text),
+    inset -2px 0 0 var(--theme-text),
+    inset 0 2px 0 var(--theme-text);
+}
+
+.secondaryTag {
+  width: 3ch;
+  align-self: stretch;
+  flex-shrink: 0;
+  box-shadow:
+    inset 2px 0 0 var(--theme-text),
+    inset -2px 0 0 var(--theme-text),
+    inset 0 2px 0 var(--theme-text);
+}
+
+.small {
+  width: 13ch;
+  flex-shrink: 0;
+  text-align: right;
+}
+
+.smallWithBorder {
+  width: 13ch;
+  flex-shrink: 0;
+  text-align: right;
+  box-shadow: inset 0 2px 0 var(--theme-text);
+}
+
+.smallSection {
+  width: 13ch;
+  flex-shrink: 0;
+  min-width: 10%;
+  text-align: right;
+  box-shadow: inset 0 2px 0 var(--theme-text);
+}
+
+.large {
+  width: 80%;
+  min-width: 10%;
+  text-align: right;
+}
+
+.largeWithBorder {
+  width: 80%;
+  min-width: 10%;
+  text-align: right;
+  box-shadow:
+    inset 0 2px 0 var(--theme-text),
+    inset -2px 0 0 var(--theme-text);
+}
+
+.largeSection {
+  width: 80%;
+  min-width: 10%;
+  text-align: right;
+  box-shadow:
+    inset 0 2px 0 var(--theme-text),
+    inset -2px 0 0 var(--theme-text);
+}
+
+.absoluteTag {
+  top: calc(var(--theme-line-height-base) * -0.5rem);
+  left: 0;
+  height: calc(var(--theme-line-height-base) * 0.5rem);
+  width: 14.2ch;
+  background: var(--theme-background);
+  position: absolute;
+  box-shadow:
+    inset 2px 0 0 var(--theme-text),
+    inset -2px 0 0 var(--theme-text),
+    inset 0 2px 0 var(--theme-text);
+}
+
+.box {
+  width: 7.1ch;
+  flex-shrink: 0;
+  height: calc(var(--theme-line-height-base) * 3rem);
+  display: inline-flex;
+  align-items: center;
+  justify-content: center;
+  box-shadow:
+    inset -2px 0 0 var(--theme-text),
+    inset 0 2px 0 var(--theme-text),
+    inset 0 -2px 0 var(--theme-text);
+
+  &:first-child {
+    box-shadow:
+      inset 2px 0 0 var(--theme-text),
+      inset -2px 0 0 var(--theme-text),
+      inset 0 2px 0 var(--theme-text),
+      inset 0 -2px 0 var(--theme-text);
+  }
+}
+
+================
+File: reference/components/examples/Denabase.tsx
+================
+'use client';
+
+import styles from '@components/examples/Denabase.module.scss';
+
+import * as React from 'react';
+
+import ActionButton from '@components/ActionButton';
+import Card from '@components/Card';
+import Divider from '@components/Divider';
+import Row from '@components/Row';
+import RowSpaceBetween from '@components/RowSpaceBetween';
+import SidebarLayout from '@components/SidebarLayout';
+
+const Denabase = (props) => {
+  return (
+    <>
+      <Card style={{ overflowWrap: 'break-word' }}>
+        <Row>
+          <RowSpaceBetween>
+            <ActionButton>TR5342120027455925897981</ActionButton>
+            <ActionButton>02.14.2021</ActionButton>
+          </RowSpaceBetween>
+          <Divider type="GRADIENT" />
+          <div className={styles.dna}>
+            T-CA-AA-AA-TA-TC-GG-GC-AC-AT-TA-TT-TA-TT-TG-CC-GC-TC-GG-GA-AG-TA-GA-A
+            <br />
+            A-TG-GT-AC-AT-GT-GT-TT-TA-TG-AT-TT-CT-CG-CA-GT-GA-AA-AA-GC-AA-CG-AA-C
+            <br />
+            C-TC-GC-CC-TT-AG-AT-TC-TA-TA-GC-TG-CT-CT-GA-GA-CC-GC-AC-TG-GC-AA-GC-A
+            <br />
+            G-AA-AC-TC-CG-CA-TT-CA-GG-CA-GT-CC-TC-CA-TG-CA-CT-TC-CT-GC-CT-GT-CT-G
+            <br />
+            C-TG-AA-CC-TA-TT-AT-TA-GA-GA-TG-GA-CT-GC-AG-TT-CT-CA-AT-CA-CA-CG-GA-T
+            <br />
+            C-TG-AT-AC-CT-GC-TG-GT-AT-GT-TC-CT-GA-TA-CC-CA-CA-GA-CA-GC-GC-CC-GA-A
+            <br />
+            T-TT-TG-GC-AA-CC-GA-AC-TT-CT-CA-AC-AA-AA-CC-GC-CT-AG-TT-GC-TA-AT-TT-G
+            <br />
+            G-TG-AC-CT-GA-CT-GA-AT-TG-TC-AT-TA-AA-CA-CT-CC-TG-CT-AA-GA-TG-CG-AA-G
+            <br />
+            C-TA-TT-AT-AG-TG-TT-TT-GT-AC-AG-GC-TA-TT-TT-GC-GT-GA-AA-CG-CA-AA-CG-C
+            <br />
+            G-TT-GC-AT-TT-CA-GA-AT-TC-CG-TG-CA-TA-GT-TA-TC-TC-AT-GC-CG-TG-CT-CT-T
+            <br />
+            G-AT-TA-TT-GA-CA-TA-TG-CA-GT-TC-GT-CC-TA-AT-CC-GC-GC-CT-GG-TC-TT-TA-G
+            <br />
+            T-CA-CT-AA-CC-GA-CC-CT-TA-GT-AT-TG-TT-CT-CT-CA-AC-AA-AA-TG-TG-TT-AA-A
+            <br />
+            C-CG-GC-AT-AA-TC-TG-GT-GA-TC-GG-GA-GA-TC-CA-GA-GA-AA-CA-CA-CC-TT-GG-G
+            <br />
+            C-TA-GA-TG-CC-CT-AC-AT-TA-GA-TA-AG-GG-GT-CT-AT-AC-GG-GC-GG-GG-TT-AG-T
+            <br />
+            A-CA-CC-TT-GA-GC-GT-AT-AG-GA-GA-GT-AA-CG-AG-GT-GG-TT-GT-CG-TG-GG-AG-G
+            <br />
+            A-GG-AG-TA-TG-TT-CT-CC-CT-TA-CT-AG-TT-GC-CG-AT-AA-CA-GA-TA-CT-GA-TG-T
+            <br />
+            C-TG-GT-AA-TT-GC-CA-GT-CA-TG-GT-TG-TA-GT-AG-CC-GG-GA-CC-CG-CA-GT-CT-G
+            <br />
+            G-GT-AG-CG-CC-TA-AC-AG-AT-AA-GG-GG-GC-CT-AC-TC-CC-GC-CC-TG-GT-CG-GC-C
+            <br />
+            T-GA-TC-AT-AA-AC-CT-CT-GT-AA-TA-CC-AT-GG-GC-CA-CG-TT-AG-GC-GT-CG-AT-G
+            <br />
+            C-CG-GA-CC-CA-TA-TC-TT-TA-CA-TC-AT-CT-CT-TT-CA-TA-GA-AG-TA-CC-CA-CT-T
+            <br />
+          </div>
+          <Divider type="GRADIENT" />
+        </Row>
+      </Card>
+      <br />
+      <Card>
+        <SidebarLayout
+          sidebar={
+            <Card style={{ padding: `0 0 0 0` }}>
+              <br />
+              <br />
+              <Row style={{ textAlign: 'center' }}>╳</Row>
+              <br />
+              <br />
+            </Card>
+          }
+          defaultSidebarWidth={19}
+        >
+          <Card style={{ padding: 0, marginLeft: `1ch`, minWidth: `30ch` }}>
+            <br />
+            <br />
+            <br />
+            <br />
+            <Row style={{ textAlign: 'right' }}>NO DATA</Row>
+          </Card>
+        </SidebarLayout>
+        <div className={styles.root}>
+          <RowSpaceBetween>
+            <div className={styles.tag}></div>
+            <div className={styles.small}></div>
+            <div className={styles.tag}></div>
+            <div className={styles.large}></div>
+          </RowSpaceBetween>
+          <RowSpaceBetween>
+            <div className={styles.secondaryTag}>
+              <br />
+              <br />
+            </div>
+            <div className={styles.smallSection}>
+              <br />
+              2181&nbsp;
+              <br />
+              <br />
+            </div>
+            <div className={styles.secondaryTag}></div>
+            <div className={styles.largeSection}>
+              <br />
+              UNKNOWN&nbsp;&nbsp;
+              <br />
+              <br />
+            </div>
+          </RowSpaceBetween>
+          <RowSpaceBetween>
+            <div className={styles.tag}></div>
+            <div className={styles.smallWithBorder}></div>
+            <div className={styles.tag}></div>
+            <div className={styles.largeWithBorder}></div>
+          </RowSpaceBetween>
+          <RowSpaceBetween>
+            <div className={styles.secondaryTag}>
+              <br />
+              <br />
+            </div>
+            <div className={styles.smallSection}>
+              <br />
+              DECEASED&nbsp;
+              <br />
+              <br />
+            </div>
+            <div className={styles.secondaryTag}></div>
+            <div className={styles.largeSection}>
+              <br />
+              MORRILLCOLE&nbsp;&nbsp;
+              <br />
+              <br />
+            </div>
+          </RowSpaceBetween>
+          <RowSpaceBetween style={{ position: 'relative' }}>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.absoluteTag}></div>
+          </RowSpaceBetween>
+        </div>
+      </Card>
+    </>
+  );
+};
+
+export default Denabase;
+
+================
+File: reference/components/examples/MessagesInterface.tsx
+================
+import Avatar from '@components/Avatar';
+import ActionButton from '@components/ActionButton';
+import Divider from '@components/Divider';
+import DropdownMenuTrigger from '@components/DropdownMenuTrigger';
+import Indent from '@components/Indent';
+import Input from '@components/Input';
+import Message from '@components/Message';
+import MessageViewer from '@components/MessageViewer';
+import ModalError from '@components/modals/ModalError';
+import Navigation from '@components/Navigation';
+import RowEllipsis from '@components/RowEllipsis';
+import SidebarLayout from '@components/SidebarLayout';
+
+import * as React from 'react';
+
+interface MessagesInterfaceProps extends React.HTMLAttributes<HTMLSpanElement> {}
+
+const ChatPreviewInline = (props) => {
+  return <RowEllipsis style={{ opacity: 0.5, marginBottom: `10px` }}>{props.children}</RowEllipsis>;
+};
+
+const MessagesInterface: React.FC<MessagesInterfaceProps> = () => {
+  return (
+    <div style={{ minWidth: '28ch' }}>
+      <Navigation
+        logo="✶"
+        left={
+          <>
+            <DropdownMenuTrigger
+              items={[
+                {
+                  icon: '⊹',
+                  children: 'Open',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'New Message',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Quick Look',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Close Messages',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Open Conversation in New Window',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Print...',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+              ]}
+            >
+              <ActionButton>FILE</ActionButton>
+            </DropdownMenuTrigger>
+
+            <DropdownMenuTrigger
+              items={[
+                {
+                  icon: '⊹',
+                  children: 'Undo',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Redo',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Cut',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Copy',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Paste',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Paste and Match Style',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Delete',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Select All',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Find...',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Find Next',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Find Previous',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Spelling and Grammar',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Substitutions',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Speech',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Send Message',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Reply to Last Message',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Tapback Last Message',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Edit Last Message',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Autofill',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Start Dictation',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Emoji & Symbols',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+              ]}
+            >
+              <ActionButton>EDIT</ActionButton>
+            </DropdownMenuTrigger>
+            <DropdownMenuTrigger
+              items={[
+                {
+                  icon: '⊹',
+                  children: 'Show Tab Bar',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Show All Tabs',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Make Text Bigger',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Make Text Normal Size',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Make Text Smaller',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'All Messages',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Known Senders',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Unknown Senders',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Unread Messages',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Recently Delete',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Show Sidebar',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Enter Full Screen',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+              ]}
+            >
+              <ActionButton>VIEW</ActionButton>
+            </DropdownMenuTrigger>
+          </>
+        }
+        right={
+          <>
+            <DropdownMenuTrigger
+              items={[
+                {
+                  icon: '⊹',
+                  children: 'Search',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Messages Help',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+              ]}
+            >
+              <ActionButton>HELP</ActionButton>
+            </DropdownMenuTrigger>
+          </>
+        }
+      ></Navigation>
+      <Divider type="DOUBLE" />
+      <SidebarLayout
+        defaultSidebarWidth={12}
+        isShowingHandle={true}
+        sidebar={
+          <>
+            <Avatar>
+              <Indent>
+                Arthur
+                <br />
+                <ChatPreviewInline>No, it has to be more unique</ChatPreviewInline>
+              </Indent>
+            </Avatar>
+            <Avatar>
+              <Indent>
+                Ariadne
+                <br />
+                <ChatPreviewInline>No. Just you.</ChatPreviewInline>
+              </Indent>
+            </Avatar>
+            <Avatar>
+              <Indent>
+                Eames
+                <br />
+                <ChatPreviewInline>dream a little bigger</ChatPreviewInline>
+              </Indent>
+            </Avatar>
+            <Avatar>
+              <Indent>
+                Yusef
+                <br />
+                <ChatPreviewInline>Depends on the dream.</ChatPreviewInline>
+              </Indent>
+            </Avatar>
+            <Avatar>
+              <Indent>
+                Saito
+                <br />
+                <ChatPreviewInline>I bought the airline.</ChatPreviewInline>
+              </Indent>
+            </Avatar>
+          </>
+        }
+      >
+        <Message>Why are they all looking at me?</Message>
+        <MessageViewer>Because my subconscious feels that someone else is creating this world. The more you change things, the quicker the projections start to converge on you.</MessageViewer>
+        <Message>Converge?</Message>
+        <MessageViewer>It's the foreign nature of the dreamer. They attack like white blood cells fighting an infection.</MessageViewer>
+        <Message>They're going to attack us?</Message>
+        <MessageViewer>No. Just you.</MessageViewer>
+        <br />
+        <br />
+        <Input autoComplete="off" isBlink={true} label="Message" name="test_message_interface" />
+      </SidebarLayout>
+    </div>
+  );
+};
+
+export default MessagesInterface;
+
+================
+File: reference/components/examples/UpdatingDataTable.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+import DataTable from '@components/DataTable';
+
+const UpdatingDataTable = (props) => {
+  const [tableData, setTableData] = React.useState(props.data);
+
+  React.useEffect(() => {
+    const interval = setInterval(() => {
+      setTableData((prevData) => {
+        const header = prevData[0];
+        const rows = prevData.slice(1);
+
+        const updatedRows = rows.map((row) => {
+          const currentPrice = parseFloat(row[2].replace('$', ''));
+          const currentHoldings = parseInt(row[3], 10);
+          const priceChangeFactor = 1 + (Math.random() - 0.5) * 0.1;
+          const newPrice = currentPrice * priceChangeFactor;
+          const holdingsChange = Math.floor((Math.random() - 0.5) * 20);
+          const newHoldings = Math.max(1, currentHoldings + holdingsChange);
+
+          return [row[0], row[1], `$${newPrice.toFixed(2)}`, newHoldings.toString()];
+        });
+
+        updatedRows.sort((a, b) => {
+          const priceA = parseFloat(a[2].replace('$', ''));
+          const priceB = parseFloat(b[2].replace('$', ''));
+          return priceB - priceA;
+        });
+
+        return [header, ...updatedRows];
+      });
+    }, 1000);
+
+    return () => clearInterval(interval);
+  }, []);
+
+  return (
+    <>
+      <DataTable data={tableData} />
+    </>
+  );
+};
+
+export default UpdatingDataTable;
+
+================
+File: reference/components/modals/ModalAlert.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalAlert.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalAlert.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import Card from '@components/Card';
+
+interface ModalAlertProps {
+  buttonText?: string | any;
+  message: string;
+}
+
+function ModalAlert({ message, buttonText }: ModalAlertProps) {
+  const { close } = useModals();
+
+  return (
+    <div className={styles.root}>
+      <Card title="ALERT">
+        {message}
+        <br />
+        <br />
+        <Button onClick={() => close()}>{Utilities.isEmpty(buttonText) ? 'Close' : buttonText}</Button>
+      </Card>
+    </div>
+  );
+}
+
+export default ModalAlert;
+
+================
+File: reference/components/modals/ModalCanvasPlatformer.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalCanvasPlatformer.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalCanvasPlatformer.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import CanvasPlatformer from '@components/CanvasPlatformer';
+import Card from '@components/Card';
+
+interface ModalCanvasPlatformerProps {
+  buttonText?: string | any;
+}
+
+function ModalCanvasPlatformer({ buttonText }: ModalCanvasPlatformerProps) {
+  const { close } = useModals();
+
+  return (
+    <div className={styles.root}>
+      <Card title="ALERT">
+        <CanvasPlatformer rows={12} />
+        <br />
+        <br />
+        <Button onClick={() => close()}>{Utilities.isEmpty(buttonText) ? 'Close' : buttonText}</Button>
+      </Card>
+    </div>
+  );
+}
+
+export default ModalCanvasPlatformer;
+
+================
+File: reference/components/modals/ModalCanvasSnake.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalCanvasSnake.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalCanvasSnake.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import CanvasSnake from '@components/CanvasSnake';
+import Card from '@components/Card';
+
+interface ModalCanvasSnakeProps {
+  buttonText?: string | any;
+}
+
+function ModalCanvasSnake({ buttonText }: ModalCanvasSnakeProps) {
+  const { close } = useModals();
+
+  return (
+    <div className={styles.root}>
+      <Card title="CANVAS PLATFORMER">
+        <CanvasSnake rows={12} />
+        <br />
+        <br />
+        <Button onClick={() => close()}>{Utilities.isEmpty(buttonText) ? 'Close' : buttonText}</Button>
+      </Card>
+    </div>
+  );
+}
+
+export default ModalCanvasSnake;
+
+================
+File: reference/components/modals/ModalChess.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalChess.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalChess.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useHotkeys } from '@modules/hotkeys';
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import CardDouble from '@components/CardDouble';
+import Chessboard from '@components/Chessboard';
+
+interface ModalErrorProps {
+  buttonText?: string | any;
+  board: string[][];
+  title?: string;
+}
+
+function ModalChess({ board, buttonText, title }: ModalErrorProps) {
+  const { close } = useModals();
+
+  useHotkeys('enter', () => close());
+
+  return (
+    <div className={styles.root}>
+      <CardDouble title={title} style={{ textAlign: 'center' }}>
+        <Chessboard board={board} />
+        <br />
+        <br />
+        <Button onClick={() => close()}>{Utilities.isEmpty(buttonText) ? 'CLOSE' : buttonText}</Button>
+      </CardDouble>
+    </div>
+  );
+}
+
+export default ModalChess;
+
+================
+File: reference/components/modals/ModalCreateAccount.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalCreateAccount.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalAlert.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import CardDouble from '@components/CardDouble';
+import Checkbox from '@components/Checkbox';
+import Input from '@components/Input';
+import RadioButtonGroup from '@components/RadioButtonGroup';
+
+function ModalCreateAccount() {
+  const { close } = useModals();
+
+  return (
+    <div className={styles.root}>
+      <CardDouble title="NEW ACCOUNT">
+        Create a new MakeBelieve™ account, where anything is possible at your command line in the browser.
+        <br />
+        <br />
+        <RadioButtonGroup
+          defaultValue="modal_developer"
+          options={[
+            { value: 'modal_individual', label: 'I’m using this for personal use.' },
+            { value: 'modal_developer', label: 'I’m building or creating something for work.' },
+            { value: 'modal_company', label: 'We’re using this as a team or organization.' },
+          ]}
+        />
+        <br />
+        <Input autoComplete="off" label="USERNAME" placeholder="Choose a username (e.g., SurfGirl29)" name="modal_username" />
+        <Input autoComplete="off" label="PASSWORD" placeholder="Create a password (8+ characters)" type="password" name="modal_password" />
+        <Input autoComplete="off" label="CONFIRM" placeholder="Type it again" type="password" name="modal_confirm" />
+        <br />
+        <Checkbox name="modal_terms">I agree to the Terms of Service, Data Privacy Policy, and Acceptable Use Guidelines.</Checkbox>
+        <Checkbox name="modal_goodwill">I agree not to use this service for unlawful purposes.</Checkbox>
+        <br />
+        <Button onClick={() => close()}>Create an account</Button>
+      </CardDouble>
+    </div>
+  );
+}
+
+export default ModalCreateAccount;
+
+================
+File: reference/components/modals/ModalError.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalError.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalError.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useHotkeys } from '@modules/hotkeys';
+import { useModals } from '@components/page/ModalContext';
+
+import ActionButton from '@components/ActionButton';
+import Button from '@components/Button';
+import CardDouble from '@components/CardDouble';
+import Grid from '@components/Grid';
+
+interface ModalErrorProps {
+  buttonText?: string | any;
+  message: string | any;
+  title?: string;
+}
+
+// TODO(jimmylee)
+// Enter doesn't always work for some reason.
+function ModalError({ message, buttonText, title }: ModalErrorProps) {
+  const { close } = useModals();
+
+  useHotkeys('enter', () => close());
+
+  return (
+    <div className={styles.root}>
+      <CardDouble title={title}>
+        <br />
+        {message}
+        <Grid>
+          <ul>
+            <li>
+              Press{' '}
+              <ActionButton hotkey="⏎" onClick={() => close()}>
+                ENTER
+              </ActionButton>{' '}
+              to continue.
+            </li>
+          </ul>
+        </Grid>
+      </CardDouble>
+    </div>
+  );
+}
+
+export default ModalError;
+
+================
+File: reference/components/modals/ModalMatrixModes.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalMatrixModes.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalMatrixModes.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import Card from '@components/Card';
+import MatrixLoader from '@components/MatrixLoader';
+
+interface ModalMatrixModesProps {
+  buttonText?: string | any;
+}
+
+function ModalMatrixModes({ buttonText }: ModalMatrixModesProps) {
+  const { close } = useModals();
+
+  return (
+    <div className={styles.root}>
+      <Card title="MATRIX MODES">
+        <Card title="KATAKANA DEFAULT">
+          <MatrixLoader rows={32} mode="katakana" />
+        </Card>
+        <Card title="GREEK LTR">
+          <MatrixLoader direction="left-to-right" rows={8} mode="greek" />
+        </Card>
+        <br />
+        <br />
+        <Button onClick={() => close()}>{Utilities.isEmpty(buttonText) ? 'Close' : buttonText}</Button>
+      </Card>
+    </div>
+  );
+}
+
+export default ModalMatrixModes;
+
+================
+File: reference/components/page/DefaultActionBar.module.scss
+================
+.root {
+  position: fixed;
+  top: 0;
+  left: 2ch;
+  z-index: 1;
+}
+
+================
+File: reference/components/page/DefaultActionBar.tsx
+================
+'use client';
+
+import styles from '@components/page/DefaultActionBar.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { toggleDebugGrid } from '@components/DebugGrid';
+import { useHotkeys } from '@modules/hotkeys';
+
+import ActionBar from '@components/ActionBar';
+import ButtonGroup from '@components/ButtonGroup';
+
+function isElement(target: EventTarget | null): target is Element {
+  return target instanceof Element;
+}
+
+function isHTMLElement(target: EventTarget | null): target is HTMLElement {
+  return target instanceof HTMLElement;
+}
+
+const findFocusableParent = (element: Element | null): Element | null => {
+  while (element) {
+    element = element.parentElement;
+    if (element && Utilities.isFocusableElement(element)) {
+      return element;
+    }
+  }
+  return null;
+};
+
+const findNextFocusableSibling = (element: Element, direction: 'next' | 'previous'): HTMLElement | null => {
+  let sibling = direction === 'next' ? element.nextElementSibling : element.previousElementSibling;
+
+  while (sibling) {
+    if (Utilities.isFocusableElement(sibling)) {
+      return sibling as HTMLElement;
+    }
+
+    const focusableDescendant = Utilities.findFocusableDescendant(sibling, null, direction);
+    if (focusableDescendant) {
+      return focusableDescendant;
+    }
+
+    sibling = direction === 'next' ? sibling.nextElementSibling : sibling.previousElementSibling;
+  }
+
+  return null;
+};
+
+const findNextFocusableAncestor = (element: Element, direction: 'next' | 'previous'): HTMLElement | null => {
+  let ancestor = element.parentElement;
+
+  while (ancestor) {
+    const nextFocusable = findNextFocusableSibling(ancestor, direction);
+    if (nextFocusable) {
+      return nextFocusable;
+    }
+    ancestor = ancestor.parentElement;
+  }
+
+  return null;
+};
+
+const useGlobalNavigationHotkeys = () => {
+  const onHandleSubmit = (event: KeyboardEvent) => {
+    const target = event.target;
+    if (Utilities.isFocusableElement(target)) {
+      event.preventDefault();
+      (target as HTMLElement).click();
+    }
+  };
+
+  const onHandleNextFocus = (event: KeyboardEvent) => {
+    const target = event.target;
+
+    if (Utilities.isFocusableElement(target)) {
+      event.preventDefault();
+
+      const nextFocusable = Utilities.findNextFocusable(target as Element, 'next');
+      if (nextFocusable) {
+        nextFocusable.focus();
+      }
+    }
+  };
+
+  const onHandlePreviousFocus = (event: KeyboardEvent) => {
+    const target = event.target;
+
+    if (Utilities.isFocusableElement(target)) {
+      event.preventDefault();
+
+      const previousFocusable = Utilities.findNextFocusable(target as Element, 'previous');
+      if (previousFocusable) {
+        previousFocusable.focus();
+      }
+    }
+  };
+
+  useHotkeys('ArrowDown', onHandleNextFocus);
+  useHotkeys('ArrowUp', onHandlePreviousFocus);
+  useHotkeys('ArrowRight', onHandleNextFocus);
+  useHotkeys('ArrowLeft', onHandlePreviousFocus);
+  useHotkeys('Enter', onHandleSubmit);
+  useHotkeys(' ', onHandleSubmit);
+};
+
+interface DefaultActionBarProps {
+  items?: {
+    hotkey: string;
+    onClick: () => void;
+    body: React.ReactNode;
+    items?: any;
+  }[];
+}
+
+const DefaultActionBar: React.FC<DefaultActionBarProps> = ({ items = [] }) => {
+  const [isGrid, setGrid] = React.useState(false);
+  useHotkeys('ctrl+g', () => toggleDebugGrid());
+
+  useGlobalNavigationHotkeys();
+
+  return (
+    <div className={styles.root}>
+      <ActionBar
+        items={[
+          {
+            hotkey: '⌃+O',
+            body: 'Fonts',
+            openHotkey: 'ctrl+o',
+            items: [
+              {
+                icon: '⊹',
+                children: 'Commit Mono V143 [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-commit-mono'),
+              },
+              {
+                icon: '⊹',
+                children: 'Departure Mono [MIT]',
+                onClick: () => Utilities.onHandleFontChange('font-use-departure-mono'),
+              },
+              {
+                icon: '⊹',
+                children: 'Fira Code [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-fira-code'),
+              },
+              {
+                icon: '⊹',
+                children: 'Fragment Mono [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-fragment-mono'),
+              },
+              {
+                icon: '⊹',
+                children: 'Geist Mono [OFL] [DEFAULT]',
+                onClick: () => Utilities.onHandleFontChange(''),
+              },
+              {
+                icon: '⊹',
+                children: 'Iosevka Term [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-iosevka-term'),
+              },
+              {
+                icon: '⊹',
+                children: 'JetBrains Mono [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-jet-brains-mono'),
+              },
+              {
+                icon: '⊹',
+                children: 'SFMono Square [FOSS]',
+                onClick: () => Utilities.onHandleFontChange('font-use-sfmono-square'),
+              },
+              {
+                icon: '⊹',
+                children: 'Server Mono 0.0.6 [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-server-mono'),
+              },
+              {
+                icon: '⊹',
+                children: 'TX-02 Berkeley Mono™',
+                onClick: () => Utilities.onHandleFontChange('font-use-berkeley-mono'),
+              },
+            ],
+          },
+          {
+            hotkey: '⌃+T',
+            body: 'Theme',
+            openHotkey: 'ctrl+t',
+            items: [
+              {
+                icon: '⊹',
+                children: 'Refined White [DEFAULT]',
+                onClick: () => Utilities.onHandleThemeChange(''),
+              },
+              {
+                icon: '⊹',
+                children: 'Black Midnight Vapor',
+                onClick: () => Utilities.onHandleThemeChange('theme-dark'),
+              },
+              {
+                icon: '⊹',
+                children: 'U-571 Code Red',
+                onClick: () => Utilities.onHandleThemeChange('theme-black-red'),
+              },
+              {
+                icon: '⊹',
+                children: 'Digital Bioluminescence',
+                onClick: () => Utilities.onHandleThemeChange('theme-black-teal'),
+              },
+              {
+                icon: '⊹',
+                children: 'Operation Safe Blue',
+                onClick: () => Utilities.onHandleThemeChange('theme-blue'),
+              },
+              {
+                icon: '⊹',
+                children: 'Neon Green Garden',
+                onClick: () => Utilities.onHandleThemeChange('theme-green'),
+              },
+              {
+                icon: '⊹',
+                children: 'Kirkland Signature AS/400',
+                onClick: () => Utilities.onHandleThemeChange('theme-black-green'),
+              },
+            ],
+          },
+          {
+            hotkey: '⌃+G',
+            onClick: () => {
+              toggleDebugGrid();
+            },
+            body: 'Grid',
+            selected: false,
+          },
+          ...items,
+        ]}
+      />
+    </div>
+  );
+};
+
+export default DefaultActionBar;
+
+================
+File: reference/components/page/DefaultLayout.module.scss
+================
+.body {
+  width: 100%;
+}
+
+.pixel {
+  height: 1px;
+  left: 0;
+  position: absolute;
+  top: 0;
+  width: 1px;
+}
+
+================
+File: reference/components/page/DefaultLayout.tsx
+================
+import styles from '@components/page/DefaultLayout.module.scss';
+
+import * as React from 'react';
+
+interface DefaultLayoutProps {
+  previewPixelSRC: string;
+  children?: React.ReactNode;
+}
+
+const DefaultLayout: React.FC<DefaultLayoutProps> = ({ previewPixelSRC, children }) => {
+  return (
+    <div className={styles.body}>
+      <img className={styles.pixel} src={previewPixelSRC} alt="" />
+      {children}
+    </div>
+  );
+};
+
+export default DefaultLayout;
+
+================
+File: reference/components/page/ModalContext.tsx
+================
+import * as React from 'react';
+
+export type ModalComponent<P = {}> = React.ComponentType<React.PropsWithoutRef<P>>;
+
+export interface ModalState<P = any> {
+  key: string;
+  component: ModalComponent<P>;
+  props: P;
+}
+
+interface ModalContextType {
+  modalStack: ModalState[];
+  open: <P>(component: ModalComponent<P>, props: P) => string;
+  close: (key?: string) => void;
+}
+
+const ModalContext = React.createContext<ModalContextType | null>(null);
+
+export const ModalProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
+  const [modalStack, setModalStack] = React.useState<ModalState<any>[]>([]);
+
+  const open = <P,>(component: ModalComponent<P>, props: P): string => {
+    const key = `modal-${Date.now()}-${Math.random()}`;
+
+    const newModal: ModalState<P> = { key, component, props };
+
+    setModalStack((prev) => [...prev, newModal as ModalState<any>]);
+
+    return key;
+  };
+
+  const close = (key?: string): void => {
+    setModalStack((prev) =>
+      key ? prev.filter((modal) => modal.key !== key) : prev.slice(0, -1)
+    );
+  };
+
+  return (
+    <ModalContext.Provider value={{ modalStack, open, close }}>
+      {children}
+    </ModalContext.Provider>
+  );
+};
+
+export const useModals = (): ModalContextType => {
+  const context = React.useContext(ModalContext);
+  if (!context) {
+    throw new Error('useModals must be used within a ModalProvider and use client');
+  }
+  return context;
+};
+
+================
+File: reference/components/page/root.module.scss
+================
+.row {
+  border-bottom: 1px solid var(--theme-border);
+}
+
+.column {
+  max-width: 768px;
+  padding: 0 24px 0 24px;
+  margin: 0 auto 0 auto;
+  display: block;
+  border-left: 1px solid var(--theme-border);
+  border-right: 1px solid var(--theme-border);
+}
+
+.video {
+  display: block;
+  width: 100%;
+}
+
+.h1 {
+  display: block;
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+.p {
+  display: block;
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+.aside {
+  display: block;
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+.h2 {
+  display: block;
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+.image {
+  display: block;
+  width: 100%;
+}
+
+================
+File: reference/components/svg/InternetDevelopmentLogo.tsx
+================
+export default function IntDevLogo(props) {
+  return (
+    <svg viewBox="0 0 494.25 80.29" fill="currentColor" aria-hidden {...props}>
+      <path d="m57.8,29.75h0c0,5.34,4.33,9.67,9.67,9.67h38.11c5.34,0,9.67,4.33,9.67,9.67v.54c0,5.34-4.33,9.67-9.67,9.67h-38.11c-5.34,0-9.67,4.33-9.67,9.67v.29c0,5.34-4.33,9.67-9.67,9.67H9.67c-5.34,0-9.67-4.33-9.67-9.67v-.54c0-5.34,4.33-9.67,9.67-9.67h38.11c5.34,0,9.67-4.33,9.67-9.67v-.02c0-5.34-4.33-9.67-9.67-9.67H9.67c-5.34,0-9.67-4.33-9.67-9.67v-.54c0-5.34,4.33-9.67,9.67-9.67h38.11c5.34,0,9.67-4.33,9.67-9.67v-.27c0-5.34,4.33-9.67,9.67-9.67h38.45c5.34,0,9.67,4.33,9.67,9.67v.55c0,5.34-4.33,9.67-9.67,9.67h-38.11c-5.34,0-9.67,4.33-9.67,9.67Z" />
+      <g>
+        <path d="m136.93,75.57l7.21-2.12V5.34l-7.21-2.02V0h26.69v3.32l-7,2.02v68.11l7,2.12v3.37h-26.69v-3.37Z" />
+        <path d="m182.75,14.67v58.88l7.26,2.02v3.37h-19.54v-3.37l7.31-2.02V5.24l-7.31-1.92V0h20.63l31.88,51.37V5.24l-7.31-1.92V0h19.59v3.32l-7.36,1.92v75.06h-4.72L182.75,14.67Z" />
+        <path d="m253.86,75.57l9.59-2.18V5.13h-14.25c-3.52,5.7-5.96,12.44-7.57,18.09h-2.8l2.95-23.22h55.57l3.01,23.22h-2.8c-1.66-5.65-3.89-12.39-7.41-18.09h-14.2v68.27l9.54,2.18v3.37h-31.62v-3.37Z" />
+        <path d="m304.76,75.47l7.1-1.97V5.24l-7.1-1.92V0h21.87c13.94,0,21.98,1.92,28.35,7.46,7.77,6.74,12.7,18.14,12.7,31.98s-5.23,26.75-13.32,33.43c-5.29,4.35-11.04,6.06-20.01,6.06h-29.6v-3.47Zm42.97-8.92c3.89-5.8,5.75-15.08,5.75-27.47s-1.87-20.73-5.81-26.49c-3.52-5.13-8.6-7.41-16.22-7.41h-7.1v62.51c0,4.46,2.23,6.17,8.4,6.17,6.89,0,11.56-2.23,14.98-7.31Z" />
+        <path d="m374.05,75.57l7.05-2.02V5.24l-7.05-1.92V0h48.93l1.5,22.55h-3.01c-1.4-5.55-3.42-11.77-6.22-17.31h-21.67v29.44h11.61c1.76-3.94,2.75-7.98,3.42-11.82h3.01v28.72h-3.01c-.62-3.89-1.76-7.93-3.42-11.77h-11.61v33.8h21.2c3.47-6.22,5.39-12.44,7.36-18.66h3.78l-3.37,24h-48.52v-3.37Z" />
+        <path d="m436.92,9.59c-1.5-4.61-2.9-5.75-8.66-6.27V0h31.72v3.32c-8.03.73-9.12,1.71-7.67,6.79l12.75,44.89.78.05,11.77-40.48c2.07-7.36.36-9.8-8.09-11.25V0h24.73v3.32c-7.77,1.55-9.17,3.32-11.61,11.4l-19.85,65.31h-3.21l-22.65-70.44Z" />
+      </g>
+    </svg>
+  );
+}
+
+================
+File: reference/components/svg/InternetDevelopmentLogoMark.tsx
+================
+export default function LogoMark(props) {
+  return (
+    <svg viewBox="0 0 116.29 80.29" fill="currentColor" aria-hidden {...props}>
+      <path d="m57.8,29.75h0c0,5.34,4.33,9.67,9.67,9.67h38.11c5.34,0,9.67,4.33,9.67,9.67v.54c0,5.34-4.33,9.67-9.67,9.67h-38.11c-5.34,0-9.67,4.33-9.67,9.67v.29c0,5.34-4.33,9.67-9.67,9.67H9.67c-5.34,0-9.67-4.33-9.67-9.67v-.54c0-5.34,4.33-9.67,9.67-9.67h38.11c5.34,0,9.67-4.33,9.67-9.67v-.02c0-5.34-4.33-9.67-9.67-9.67H9.67c-5.34,0-9.67-4.33-9.67-9.67v-.54c0-5.34,4.33-9.67,9.67-9.67h38.11c5.34,0,9.67-4.33,9.67-9.67v-.27c0-5.34,4.33-9.67,9.67-9.67h38.45c5.34,0,9.67,4.33,9.67,9.67v.55c0,5.34-4.33,9.67-9.67,9.67h-38.11c-5.34,0-9.67,4.33-9.67,9.67Z" />
+    </svg>
+  );
+}
+
+================
+File: reference/components/svg/Sphere.tsx
+================
+import * as React from 'react';
+
+export default function Sphere(props: { size?: number; segments?: number; style?: React.CSSProperties }) {
+  const size = props.size || 500;
+  const segments = props.segments || 6;
+  const radius = size * 0.4;
+
+  const generateSpherePoints = () => {
+    const points: { x: number; y: number }[][] = [];
+    for (let lat = 0; lat <= segments; lat++) {
+      const row: { x: number; y: number }[] = [];
+      const phi = (lat * Math.PI) / segments;
+      for (let lon = 0; lon <= segments; lon++) {
+        const theta = (lon * 2 * Math.PI) / segments;
+        const x = radius * Math.sin(phi) * Math.cos(theta);
+        const y = radius * Math.cos(phi);
+        const z = radius * Math.sin(phi) * Math.sin(theta);
+        const scale = 1 + z / (radius * 4);
+        row.push({
+          x: size / 2 + x * scale,
+          y: size / 2 + y * scale,
+        });
+      }
+      points.push(row);
+    }
+    return points;
+  };
+
+  const createPaths = () => {
+    const spherePoints = generateSpherePoints();
+    const paths: string[] = [];
+    for (let lat = 0; lat <= segments; lat++) {
+      let pathString = `M ${spherePoints[lat][0].x},${spherePoints[lat][0].y}`;
+      for (let lon = 1; lon <= segments; lon++) {
+        pathString += ` L ${spherePoints[lat][lon].x},${spherePoints[lat][lon].y}`;
+      }
+      paths.push(pathString);
+    }
+    for (let lon = 0; lon <= segments; lon++) {
+      let pathString = `M ${spherePoints[0][lon].x},${spherePoints[0][lon].y}`;
+      for (let lat = 1; lat <= segments; lat++) {
+        pathString += ` L ${spherePoints[lat][lon].x},${spherePoints[lat][lon].y}`;
+      }
+      paths.push(pathString);
+    }
+    return paths;
+  };
+
+  return (
+    <svg viewBox={`0 0 ${size} ${size}`} xmlns="http://www.w3.org/2000/svg" style={props.style}>
+      <g fill="none" stroke="currentColor" strokeWidth="1">
+        {createPaths().map((path, index) => (
+          <path key={index} d={path} vectorEffect="non-scaling-stroke" />
+        ))}
+      </g>
+    </svg>
+  );
+}
+
+================
+File: reference/components/Accordion.module.scss
+================
+.flex {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+  padding: calc(var(--theme-line-height-base) * 1rem) 0 calc(var(--theme-line-height-base) * 1rem) 0;
+
+  background: var(--theme-border-subdued);
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.icon {
+  flex-shrink: 0;
+  user-select: none;
+  cursor: pointer;
+  font-size: var(--font-size);
+  align-self: stretch;
+}
+
+.content {
+  min-width: 10%;
+  width: 100%;
+  user-select: none;
+  cursor: pointer;
+  transition: 200ms ease all;
+  transition-property: padding;
+  padding-left: 0ch;
+}
+
+.active {
+  .content {
+    padding-left: 1ch;
+  }
+
+  .icon {
+  }
+}
+
+================
+File: reference/components/Accordion.tsx
+================
+'use client';
+
+import styles from '@components/Accordion.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import Row from '@components/Row';
+
+interface AccordionProps {
+  defaultValue?: boolean;
+  title: string;
+  children?: React.ReactNode;
+}
+
+const Accordion: React.FC<AccordionProps> = ({ defaultValue = false, title, children }) => {
+  const [show, setShow] = React.useState<boolean>(defaultValue);
+  const accordionRef = React.useRef<HTMLDivElement | null>(null);
+
+  const toggleShow = (): void => {
+    setShow((prevShow) => !prevShow);
+  };
+
+  return (
+    <>
+      <Row ref={accordionRef} tabIndex={0} role="button" onClick={toggleShow} aria-expanded={show}>
+        <div className={Utilities.classNames(styles.flex, show ? styles.active : undefined)}>
+          <span className={styles.icon}>{show ? '▾' : '▸'}</span>
+          <span className={styles.content}>{title}</span>
+        </div>
+      </Row>
+      {show && <Row style={{ paddingLeft: '2ch' }}>{children}</Row>}
+    </>
+  );
+};
+
+export default Accordion;
+
+================
+File: reference/components/ActionBar.module.scss
+================
+.root {
+  background: var(--theme-background);
+  box-shadow: inset 0 0 0 1px var(--theme-border);
+}
+
+================
+File: reference/components/ActionBar.tsx
+================
+import styles from '@components/ActionBar.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import ButtonGroup from '@components/ButtonGroup';
+
+interface ActionBarItem {
+  hotkey?: string;
+  onClick?: () => void;
+  openHotkey?: string;
+  selected?: boolean;
+  body: React.ReactNode;
+  items?: any;
+}
+
+interface ActionBarProps {
+  items: ActionBarItem[];
+}
+
+const ActionBar: React.FC<ActionBarProps> = ({ items }) => {
+  return (
+    <div className={styles.root}>
+      <ButtonGroup items={items} />
+    </div>
+  );
+};
+
+export default ActionBar;
+
+================
+File: reference/components/ActionButton.module.scss
+================
+.hotkey {
+  background: var(--theme-button-foreground);
+  color: var(--theme-text);
+  cursor: pointer;
+  flex-shrink: 0;
+  font-weight: 400;
+  padding: 0 1ch 0 1ch;
+  text-indent: 0ch;
+  user-select: none;
+}
+
+.content {
+  background: var(--theme-button-background);
+  box-shadow: inset 0 0 0 2px var(--theme-button-foreground);
+  cursor: pointer;
+  flex-shrink: 0;
+  font-weight: 400;
+  padding: 0 1ch 0 1ch;
+  text-indent: 0ch;
+  text-transform: uppercase;
+  user-select: none;
+}
+
+.root {
+  display: inline-flex;
+  align-items: center;
+  justify-content: space-between;
+  cursor: pointer;
+  outline: 0;
+  border: 0;
+  margin: 0;
+  padding: 0;
+  box-sizing: border-box;
+  font-family: var(--font-family-mono);
+  font-size: var(--font-size);
+  flex-shrink: 0;
+
+  &:hover .hotkey {
+    background: var(--theme-focused-foreground);
+  }
+
+  &:hover .content {
+    box-shadow: inset 0 0 0 2px var(--theme-focused-foreground);
+  }
+
+  &:focus .hotkey {
+    background: var(--theme-focused-foreground);
+  }
+
+  &:focus .content {
+    box-shadow: inset 0 0 0 2px var(--theme-focused-foreground);
+  }
+}
+
+.selected {
+  .content {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/ActionButton.tsx
+================
+import styles from '@components/ActionButton.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface ActionButtonProps {
+  onClick?: () => void;
+  hotkey?: any;
+  children?: React.ReactNode;
+  style?: any;
+  rootStyle?: any;
+  isSelected?: boolean;
+}
+
+const ActionButton = React.forwardRef<HTMLDivElement, ActionButtonProps>(({ onClick, hotkey, children, style, rootStyle, isSelected }, ref) => {
+  return (
+    <div className={Utilities.classNames(styles.root, isSelected ? styles.selected : null)} style={rootStyle} onClick={onClick} tabIndex={0} ref={ref} role="button">
+      {Utilities.isEmpty(hotkey) ? null : <span className={styles.hotkey}>{hotkey}</span>}
+      <span className={styles.content} style={style}>
+        {children}
+      </span>
+    </div>
+  );
+});
+
+ActionButton.displayName = 'ActionButton';
+
+export default ActionButton;
+
+================
+File: reference/components/ActionListItem.module.scss
+================
+.item {
+  align-items: flex-start;
+  background: transparent;
+  color: var(--theme-text);
+  cursor: pointer;
+  display: flex;
+  justify-content: space-between;
+  outline: 0;
+  border: 0;
+  text-decoration: none;
+
+  &:visited {
+    background: transparent;
+    color: var(--theme-text);
+  }
+
+  &:hover {
+    background: transparent;
+    color: var(--theme-text);
+  }
+
+  &:hover .icon {
+    background: var(--theme-focused-foreground);
+  }
+
+  &:focus .icon {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.icon {
+  align-items: center;
+  background: var(--theme-button-foreground);
+  display: inline-flex;
+  flex-shrink: 0;
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  justify-content: center;
+  width: 3ch;
+  user-select: none;
+}
+
+.text {
+  align-items: center;
+  align-self: stretch;
+  background: var(--theme-button-background);
+  display: inline-flex;
+  justify-content: flex-start;
+  min-width: 10%;
+  padding: 0 1ch 0 1ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/ActionListItem.tsx
+================
+import styles from '@components/ActionListItem.module.scss';
+
+import * as React from 'react';
+
+interface ActionListItemProps {
+  style?: React.CSSProperties;
+  icon?: React.ReactNode;
+  children?: React.ReactNode;
+  href?: string;
+  target?: string;
+  onClick?: React.MouseEventHandler<HTMLDivElement | HTMLAnchorElement>;
+}
+
+const ActionListItem: React.FC<ActionListItemProps> = (props) => {
+  const { href, target, onClick, children, icon, style } = props;
+
+  if (href) {
+    return (
+      <a className={styles.item} href={href} target={target} style={style} tabIndex={0} role="link">
+        <figure className={styles.icon}>{icon}</figure>
+        <span className={styles.text}>{children}</span>
+      </a>
+    );
+  }
+
+  return (
+    <div className={styles.item} onClick={onClick} style={style} tabIndex={0} role="button">
+      <figure className={styles.icon}>{icon}</figure>
+      <span className={styles.text}>{children}</span>
+    </div>
+  );
+};
+
+export default ActionListItem;
+
+================
+File: reference/components/AlertBanner.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border);
+  box-shadow: 1ch 1ch 0 0 var(--theme-border-subdued);
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  font-weight: 400;
+}
+
+================
+File: reference/components/AlertBanner.tsx
+================
+import styles from '@components/AlertBanner.module.scss';
+
+import * as React from 'react';
+
+interface AlertBannerProps {
+  style?: any;
+  children?: any;
+}
+
+const AlertBanner: React.FC<AlertBannerProps> = ({ style: propStyle, ...rest }) => {
+  let style: React.CSSProperties = { ...propStyle };
+
+  return <div className={styles.root} {...rest} style={style} />;
+};
+
+export default AlertBanner;
+
+================
+File: reference/components/Avatar.module.scss
+================
+.parent {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+}
+
+.placeholder {
+  background: var(--theme-border);
+  display: inline-block;
+  width: 4ch;
+  height: calc(var(--font-size) * var(--theme-line-height-base) * 2);
+  vertical-align: bottom;
+  flex-shrink: 0;
+  position: relative;
+
+  &:hover {
+    &::before {
+      content: '';
+      top: 0;
+      left: 0;
+      right: 0;
+      bottom: 0;
+      position: absolute;
+      pointer-events: none;
+      opacity: 0.5;
+      background: var(--theme-focused-foreground);
+    }
+  }
+}
+
+.root {
+  background: unset;
+  background-size: cover;
+  background-position: 50% 50%;
+  background-repeat: no-repeat;
+  display: inline-block;
+  width: 4ch;
+  height: calc(var(--font-size) * var(--theme-line-height-base) * 2);
+  vertical-align: bottom;
+  flex-shrink: 0;
+  position: relative;
+
+  &:hover {
+    background: unset;
+    background-size: cover;
+    background-position: 50% 50%;
+    background-repeat: no-repeat;
+    &::before {
+      content: '';
+      top: 0;
+      left: 0;
+      right: 0;
+      bottom: 0;
+      position: absolute;
+      pointer-events: none;
+      opacity: 0.5;
+      background: var(--theme-focused-foreground);
+    }
+  }
+}
+
+a {
+  &.root {
+    background: unset;
+    background-size: cover;
+    background-position: 50% 50%;
+    background-repeat: no-repeat;
+    display: inline-block;
+    width: 4ch;
+    height: calc(var(--font-size) * var(--theme-line-height-base) * 2);
+    vertical-align: bottom;
+    flex-shrink: 0;
+    position: relative;
+
+    &:hover {
+      background: unset;
+      background-size: cover;
+      background-position: 50% 50%;
+      background-repeat: no-repeat;
+      &::before {
+        content: '';
+        top: 0;
+        left: 0;
+        right: 0;
+        bottom: 0;
+        position: absolute;
+        pointer-events: none;
+        opacity: 0.5;
+        background: var(--theme-focused-foreground);
+      }
+    }
+
+    &:focus {
+      background: unset;
+      background-size: cover;
+      background-position: 50% 50%;
+      background-repeat: no-repeat;
+      outline: 0;
+
+      &::before {
+        content: '';
+        top: 0;
+        left: 0;
+        right: 0;
+        bottom: 0;
+        position: absolute;
+        pointer-events: none;
+        opacity: 0.5;
+        background: var(--theme-focused-foreground);
+      }
+    }
+  }
+}
+
+.right {
+  min-width: 10%;
+  width: 100%;
+  background: var(--theme-foreground);
+}
+
+================
+File: reference/components/Avatar.tsx
+================
+import styles from '@components/Avatar.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface AvatarProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'style' | 'className' | 'children'> {
+  src?: string;
+  href?: string;
+  target?: string;
+  style?: React.CSSProperties;
+  children?: React.ReactNode;
+}
+
+const Avatar: React.FC<AvatarProps> = (props) => {
+  const { src, style: propStyle, href, target, children, ...rest } = props;
+
+  const backgroundStyle = src ? { backgroundImage: `url(${src})` } : {};
+
+  const combinedStyle = { ...propStyle, ...backgroundStyle };
+
+  let avatarElement: React.ReactElement;
+
+  if (href) {
+    avatarElement = <a className={Utilities.classNames(src ? styles.root : styles.placeholder)} style={combinedStyle} href={href} target={target} tabIndex={0} role="link" />;
+  } else {
+    avatarElement = <figure className={Utilities.classNames(src ? styles.root : styles.placeholder)} style={combinedStyle} />;
+  }
+
+  if (!children) {
+    return avatarElement;
+  }
+
+  return (
+    <div className={styles.parent} {...rest}>
+      {avatarElement}
+      <span className={styles.right}>{children}</span>
+    </div>
+  );
+};
+
+export default Avatar;
+
+================
+File: reference/components/Badge.module.scss
+================
+.root {
+  display: inline-block;
+  vertical-align: top;
+  text-align: center;
+  font-weight: 400;
+  margin: 0;
+  outline: 0;
+  border: 0;
+  font-family: var(--font-family-mono);
+  min-height: calc(var(--theme-line-height-base) * var(--font-size));
+  text-transform: uppercase;
+  transition: 200ms ease all;
+  background: var(--theme-border);
+  padding: 0 1ch 0 1ch;
+}
+
+================
+File: reference/components/Badge.tsx
+================
+'use client';
+
+import styles from '@components/Badge.module.scss';
+
+import * as React from 'react';
+
+interface BadgeProps extends React.HTMLAttributes<HTMLSpanElement> {
+  children?: React.ReactNode;
+}
+
+const Badge: React.FC<BadgeProps> = ({ children, ...rest }) => {
+  return (
+    <span className={styles.root} {...rest}>
+      {children}
+    </span>
+  );
+};
+
+export default Badge;
+
+================
+File: reference/components/BarLoader.module.scss
+================
+.root {
+  background: var(--theme-border);
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  white-space: nowrap;
+  text-align: left;
+  vertical-align: bottom;
+  display: block;
+}
+
+.bar {
+  background: linear-gradient(to right, transparent, var(--theme-text));
+  height: 100%;
+  width: 0%;
+  transition: width 0.1s linear;
+}
+
+================
+File: reference/components/BarLoader.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+import styles from '@components/BarLoader.module.scss';
+
+interface BarLoaderProps {
+  intervalRate?: number;
+  progress?: number;
+}
+
+const BarLoader: React.FC<BarLoaderProps> = ({ intervalRate, progress }) => {
+  const [currentProgress, setCurrentProgress] = React.useState<number>(progress || 0);
+
+  React.useEffect(() => {
+    if (progress !== undefined) {
+      setCurrentProgress(progress);
+      return;
+    }
+
+    if (!intervalRate) return;
+
+    const interval = setInterval(() => {
+      setCurrentProgress((prev) => (prev + 10) % 110);
+    }, intervalRate);
+
+    return () => clearInterval(interval);
+  }, [intervalRate, progress]);
+
+  return (
+    <div className={styles.root}>
+      <div
+        className={styles.bar}
+        style={{
+          width: `${Math.min(currentProgress, 100)}%`,
+        }}
+      ></div>
+    </div>
+  );
+};
+
+export default BarLoader;
+
+================
+File: reference/components/BarProgress.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border-subdued);
+  white-space: nowrap;
+  text-align: left;
+  vertical-align: bottom;
+  overflow: hidden;
+  position: relative;
+}
+
+.measure {
+  visibility: hidden;
+  position: absolute;
+  pointer-events: none;
+}
+
+================
+File: reference/components/BarProgress.tsx
+================
+'use client';
+
+import styles from '@components/BarProgress.module.scss';
+
+import * as React from 'react';
+
+interface BarProgressProps {
+  intervalRate?: number;
+  progress?: number;
+  fillChar?: string;
+}
+
+const BarProgress: React.FC<BarProgressProps> = ({ intervalRate, progress, fillChar = '░' }) => {
+  const [currentProgress, setCurrentProgress] = React.useState(progress ?? 0);
+  const [containerWidth, setContainerWidth] = React.useState(0);
+  const [charWidth, setCharWidth] = React.useState(0);
+
+  const containerRef = React.useRef<HTMLDivElement>(null);
+  const measureRef = React.useRef<HTMLSpanElement>(null);
+
+  React.useEffect(() => {
+    if (typeof progress === 'number') {
+      setCurrentProgress(progress);
+      return;
+    }
+    if (!intervalRate) return;
+    const interval = setInterval(() => {
+      setCurrentProgress((prev) => (prev + 10) % 110);
+    }, intervalRate);
+    return () => clearInterval(interval);
+  }, [intervalRate, progress]);
+
+  React.useLayoutEffect(() => {
+    if (!measureRef.current) return;
+    const rect = measureRef.current.getBoundingClientRect();
+    if (rect.width > 0) {
+      setCharWidth(rect.width);
+    } else {
+      requestAnimationFrame(() => {
+        const retryRect = measureRef.current?.getBoundingClientRect();
+        if (retryRect && retryRect.width > 0) {
+          setCharWidth(retryRect.width);
+        }
+      });
+    }
+  }, [fillChar]);
+
+  React.useEffect(() => {
+    if (!containerRef.current) return;
+    const observer = new ResizeObserver((entries) => {
+      for (const entry of entries) {
+        const { width } = entry.contentRect;
+        setContainerWidth(width);
+      }
+    });
+    observer.observe(containerRef.current);
+    return () => observer.disconnect();
+  }, []);
+
+  const cappedProgress = Math.min(currentProgress, 100);
+
+  let maxChars = 10;
+  if (charWidth > 0 && containerWidth > 0) {
+    maxChars = Math.max(1, Math.floor(containerWidth / charWidth));
+  }
+
+  const filledChars = Math.round((cappedProgress / 100) * maxChars);
+  const barStr = fillChar.repeat(filledChars);
+
+  return (
+    <div className={styles.root} ref={containerRef} aria-valuenow={cappedProgress} aria-valuemin={0} aria-valuemax={100} role="progressbar">
+      <span ref={measureRef} className={styles.measure}>
+        {fillChar}
+      </span>
+      {barStr}
+    </div>
+  );
+};
+
+export default BarProgress;
+
+================
+File: reference/components/Block.module.scss
+================
+.block {
+  display: inline-block;
+  width: 1ch;
+  background: var(--theme-text);
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  vertical-align: bottom;
+  flex-shrink: 0;
+}
+
+================
+File: reference/components/Block.tsx
+================
+import styles from '@components/Block.module.scss';
+
+import * as React from 'react';
+
+interface BlockProps extends React.HTMLAttributes<HTMLSpanElement> {
+  children?: React.ReactNode;
+}
+
+const Block: React.FC<BlockProps> = ({ children, ...rest }) => {
+  return (
+    <span className={styles.block} {...rest}>
+      {children}
+    </span>
+  );
+};
+
+export default Block;
+
+================
+File: reference/components/BlockLoader.module.scss
+================
+.root {
+  display: inline-block;
+  width: 1ch;
+  color: inherit;
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  vertical-align: bottom;
+}
+
+================
+File: reference/components/BlockLoader.tsx
+================
+'use client';
+
+import styles from '@components/BlockLoader.module.scss';
+
+import * as React from 'react';
+
+const SEQUENCES = [
+  ['⠁', '⠂', '⠄', '⡀', '⢀', '⠠', '⠐', '⠈'],
+  ['⣾', '⣽', '⣻', '⢿', '⡿', '⣟', '⣯', '⣷'],
+  ['▖', '▘', '▝', '▗'],
+  ['▁', '▂', '▃', '▄', '▅', '▆', '▇', '█', '▇', '▆', '▅', '▄', '▃', '▁'],
+  ['▉', '▊', '▋', '▌', '▍', '▎', '▏', '▎', '▍', '▌', '▋', '▊', '▉'],
+  ['←', '↖', '↑', '↗', '→', '↘', '↓', '↙'],
+  ['┤', '┘', '┴', '└', '├', '┌', '┬', '┐'],
+  ['◢', '◣', '◤', '◥'],
+  ['◰', '◳', '◲', '◱'],
+  ['◴', '◷', '◶', '◵'],
+  ['◐', '◓', '◑', '◒'],
+];
+
+interface BlockLoaderProps extends Omit<React.HTMLAttributes<HTMLSpanElement>, 'children'> {
+  mode?: number;
+}
+
+const BlockLoader: React.FC<BlockLoaderProps> = ({ mode = 0 }) => {
+  if (!SEQUENCES[mode]) {
+    return <span className={styles.block}>�</span>;
+  }
+
+  const [index, setIndex] = React.useState(0);
+  const intervalRef = React.useRef<number | null>(null);
+  const indexLength = SEQUENCES[mode].length;
+
+  React.useEffect(() => {
+    if (intervalRef.current) {
+      clearInterval(intervalRef.current);
+    }
+
+    intervalRef.current = window.setInterval(() => {
+      setIndex((prevIndex) => (prevIndex + 1) % indexLength);
+    }, 100);
+
+    return () => {
+      if (intervalRef.current) {
+        clearInterval(intervalRef.current);
+      }
+    };
+  }, [indexLength]);
+
+  return <span className={styles.root}>{SEQUENCES[mode][index]}</span>;
+};
+
+export default BlockLoader;
+
+================
+File: reference/components/BreadCrumbs.module.scss
+================
+.root {
+  display: inline-block;
+}
+
+.line {
+  display: inline-block;
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+}
+
+.link {
+  display: inline-block;
+  color: var(--theme-text);
+  outline: 0;
+  border: 0;
+  text-decoration: none;
+  background: var(--theme-border);
+
+  &:hover {
+    color: var(--theme-text);
+    background: var(--theme-focused-foreground);
+  }
+  
+  &:visited {
+    color: var(--theme-text);
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.symbol {
+  min-width: 1ch;
+  display: inline-block;
+  margin: 0 1ch 0 1ch;
+}
+
+================
+File: reference/components/BreadCrumbs.tsx
+================
+import styles from '@components/BreadCrumbs.module.scss';
+
+import * as React from 'react';
+
+interface BreadCrumbsItem {
+  url?: string;
+  name: string;
+}
+
+interface BreadCrumbsProps {
+  items: BreadCrumbsItem[];
+}
+
+const BreadCrumbs: React.FC<BreadCrumbsProps> = ({ items }) => {
+  return (
+    <nav aria-label="breadcrumb" className={styles.root}>
+      {items.map((item, index) => {
+        const linkElement = (
+          <a className={styles.link} href={item.url} target="_blank" tabIndex={0} role="link">
+            {item.name}
+          </a>
+        );
+
+        return (
+          <span className={styles.line} key={index}>
+            {index === items.length - 1 ? <span>{linkElement}</span> : linkElement}
+            {index < items.length - 1 && <span className={styles.symbol}> ❯ </span>}
+          </span>
+        );
+      })}
+    </nav>
+  );
+};
+
+export default BreadCrumbs;
+
+================
+File: reference/components/Button.module.scss
+================
+.root {
+  vertical-align: top;
+  display: inline-block;
+  font-weight: 400;
+  text-align: center;
+  margin: 0;
+  outline: 0;
+  border: 0;
+  font-family: var(--font-family-mono);
+  width: 100%;
+  font-size: var(--font-size);
+  line-height: calc(var(--theme-line-height-base) * 2em);
+  min-height: calc(var(--theme-line-height-base) * (var(--font-size) * 2));
+  padding: 0 2ch 0 2ch;
+  text-transform: uppercase;
+  letter-spacing: 1px;
+  transition: 200ms ease all;
+}
+
+.primary {
+  background: var(--theme-button);
+  color: var(--theme-button-text);
+  cursor: pointer;
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.secondary {
+  background: var(--theme-background);
+  color: var(--theme-text);
+  box-shadow: inset 0 0 0 1px var(--theme-border);
+  cursor: pointer;
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+    box-shadow: inset 0 0 0 1px transparent;
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    box-shadow: inset 0 0 0 1px transparent;
+  }
+}
+
+.disabled {
+  background: var(--theme-button-background);
+  color: var(--theme-button-foreground);
+  cursor: not-allowed;
+}
+
+================
+File: reference/components/Button.tsx
+================
+'use client';
+
+import styles from '@components/Button.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
+  theme?: 'PRIMARY' | 'SECONDARY';
+  isDisabled?: boolean;
+  children?: React.ReactNode;
+}
+
+const Button: React.FC<ButtonProps> = ({ theme = 'PRIMARY', isDisabled, children, ...rest }) => {
+  let classNames = Utilities.classNames(styles.root, styles.primary);
+
+  if (theme === 'SECONDARY') {
+    classNames = Utilities.classNames(styles.root, styles.secondary);
+  }
+
+  if (isDisabled) {
+    classNames = Utilities.classNames(styles.root, styles.disabled);
+
+    return <div className={classNames}>{children}</div>;
+  }
+
+  return (
+    <button className={classNames} role="button" tabIndex={0} disabled={isDisabled} {...rest}>
+      {children}
+    </button>
+  );
+};
+
+export default Button;
+
+================
+File: reference/components/ButtonGroup.module.scss
+================
+.root {
+}
+
+.full {
+  display: grid;
+  grid-template-columns: repeat(auto-fit, minmax(60px, 1fr));
+  white-space: nowrap;
+}
+
+================
+File: reference/components/ButtonGroup.tsx
+================
+'use client';
+
+import styles from '@components/ButtonGroup.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import ActionButton from '@components/ActionButton';
+import DropdownMenuTrigger from '@components/DropdownMenuTrigger';
+
+const ButtonGroup = (props) => {
+  if (!props.items) {
+    return null;
+  }
+
+  return (
+    <div className={Utilities.classNames(styles.root, props.isFull ? styles.full : null)}>
+      {props.items.map((each) => {
+        if (each.items) {
+          return (
+            <DropdownMenuTrigger key={each.body} items={each.items} hotkey={each.openHotkey}>
+              <ActionButton hotkey={each.hotkey} isSelected={each.selected}>
+                {each.body}
+              </ActionButton>
+            </DropdownMenuTrigger>
+          );
+        }
+
+        return (
+          <ActionButton key={each.body} onClick={each.onClick} hotkey={each.hotkey} isSelected={each.selected}>
+            {each.body}
+          </ActionButton>
+        );
+      })}
+    </div>
+  );
+};
+
+export default ButtonGroup;
+
+================
+File: reference/components/Canvas.module.scss
+================
+.canvas {
+  grid-row-start: 1;
+  grid-column-start: 1;
+  margin: 0;
+  padding: 0;
+  width: 100%;
+  min-height: 100%;
+  max-height: 288px;
+}
+
+================
+File: reference/components/Canvas.tsx
+================
+'use client';
+
+import styles from '@components/Canvas.module.scss';
+
+import * as React from 'react';
+
+type WebGLContextResult = {
+  gl: WebGLRenderingContext | WebGL2RenderingContext;
+  ext: {
+    internalFormat: number;
+    internalFormatRG: number;
+    formatRG: number;
+    texType: number;
+  };
+  support_linear_float: boolean | null;
+};
+
+var config = {
+  TEXTURE_DOWNSAMPLE: 1,
+  DENSITY_DISSIPATION: 0.991,
+  VELOCITY_DISSIPATION: 0.9992,
+  PRESSURE_DISSIPATION: 0.8,
+  PRESSURE_ITERATIONS: 16,
+  CURL: 12,
+  SPLAT_RADIUS: 0.12,
+  SPEED: 0.01,
+};
+
+export default function BlueCanvasComponent(props) {
+  const canvasRef = React.useRef<HTMLCanvasElement>(null);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    canvas.width = canvas.clientWidth;
+    canvas.height = canvas.clientHeight;
+
+    let splatStack: any[] = [];
+
+    const { gl, ext, support_linear_float } = getWebGLContext(canvas);
+
+    function getWebGLContext(canvas: HTMLCanvasElement): WebGLContextResult {
+      const params = {
+        alpha: false,
+        depth: false,
+        stencil: false,
+        antialias: true,
+      };
+
+      let gl: WebGLRenderingContext | WebGL2RenderingContext | null = canvas.getContext('webgl2', params) as WebGL2RenderingContext | null;
+
+      const isWebGL2 = !!gl;
+
+      if (!isWebGL2) {
+        gl = (canvas.getContext('webgl', params) || canvas.getContext('experimental-webgl', params)) as WebGLRenderingContext | null;
+      }
+
+      if (!gl) throw new Error('WebGL not supported');
+
+      const halfFloat = gl.getExtension('OES_texture_half_float');
+      let support_linear_float = gl.getExtension('OES_texture_half_float_linear');
+
+      if (isWebGL2) {
+        gl.getExtension('EXT_color_buffer_float');
+        support_linear_float = gl.getExtension('OES_texture_float_linear');
+      }
+
+      const internalFormat = isWebGL2 ? (gl as WebGL2RenderingContext).RGBA16F : gl.RGBA;
+      const internalFormatRG = isWebGL2 ? (gl as WebGL2RenderingContext).RG16F : gl.RGBA;
+      const formatRG = isWebGL2 ? (gl as WebGL2RenderingContext).RG : gl.RGBA;
+      const texType = isWebGL2 ? (gl as WebGL2RenderingContext).HALF_FLOAT : halfFloat?.HALF_FLOAT_OES || gl.UNSIGNED_BYTE;
+
+      return {
+        gl: gl as WebGLRenderingContext,
+        ext: {
+          internalFormat,
+          internalFormatRG,
+          formatRG,
+          texType,
+        },
+        support_linear_float: !!support_linear_float,
+      };
+    }
+
+    class GLProgram {
+      program: WebGLProgram;
+      uniforms: { [key: string]: WebGLUniformLocation | null };
+
+      constructor(vertexShader: WebGLShader, fragmentShader: WebGLShader) {
+        this.uniforms = {};
+        this.program = gl.createProgram()!;
+
+        gl.attachShader(this.program, vertexShader);
+        gl.attachShader(this.program, fragmentShader);
+        gl.linkProgram(this.program);
+
+        if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {
+          throw new Error(gl.getProgramInfoLog(this.program) || 'Program failed to link');
+        }
+
+        const uniformCount = gl.getProgramParameter(this.program, gl.ACTIVE_UNIFORMS);
+        for (let i = 0; i < uniformCount; i++) {
+          const uniformName = gl.getActiveUniform(this.program, i)!.name;
+          this.uniforms[uniformName] = gl.getUniformLocation(this.program, uniformName);
+        }
+      }
+
+      bind() {
+        gl.useProgram(this.program);
+      }
+    }
+
+    function compileShader(type: number, source: string): WebGLShader {
+      const shader = gl.createShader(type)!;
+      gl.shaderSource(shader, source);
+      gl.compileShader(shader);
+
+      if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
+        throw new Error(gl.getShaderInfoLog(shader) || 'Shader compilation failed');
+      }
+
+      return shader;
+    }
+
+    var baseVertexShader = compileShader(gl.VERTEX_SHADER, 'precision highp float; precision mediump sampler2D; attribute vec2 aPosition; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform vec2 texelSize; void main () {     vUv = aPosition * 0.5 + 0.5;     vL = vUv - vec2(texelSize.x, 0.0);     vR = vUv + vec2(texelSize.x, 0.0);     vT = vUv + vec2(0.0, texelSize.y);     vB = vUv - vec2(0.0, texelSize.y);     gl_Position = vec4(aPosition, 0.0, 1.0); }');
+    var clearShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; uniform sampler2D uTexture; uniform float value; void main () {     gl_FragColor = value * texture2D(uTexture, vUv); }');
+    var displayShader = compileShader(
+      gl.FRAGMENT_SHADER,
+      `
+  precision highp float;
+  precision mediump sampler2D;
+  varying vec2 vUv;
+  uniform sampler2D uTexture;
+  void main () {
+    float density = texture2D(uTexture, vUv).r;
+    vec3 splatColor = vec3(1.0, 1.0, 1.0);
+    vec3 backgroundColor = vec3(0.8, 0.8, 0.8);
+    vec3 color = mix(backgroundColor, splatColor, density);
+    gl_FragColor = vec4(color, 1.0);
+  }
+  `
+    );
+    var splatShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; uniform sampler2D uTarget; uniform float aspectRatio; uniform vec3 color; uniform vec2 point; uniform float radius; void main () {     vec2 p = vUv - point.xy;     p.x *= aspectRatio;     vec3 splat = exp(-dot(p, p) / radius) * color;     vec3 base = texture2D(uTarget, vUv).xyz;     gl_FragColor = vec4(base + splat, 1.0); }');
+    var advectionManualFilteringShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; uniform sampler2D uVelocity; uniform sampler2D uSource; uniform vec2 texelSize; uniform float dt; uniform float dissipation; vec4 bilerp (in sampler2D sam, in vec2 p) {     vec4 st;     st.xy = floor(p - 0.5) + 0.5;     st.zw = st.xy + 1.0;     vec4 uv = st * texelSize.xyxy;     vec4 a = texture2D(sam, uv.xy);     vec4 b = texture2D(sam, uv.zy);     vec4 c = texture2D(sam, uv.xw);     vec4 d = texture2D(sam, uv.zw);     vec2 f = p - st.xy;     return mix(mix(a, b, f.x), mix(c, d, f.x), f.y); } void main () {     vec2 coord = gl_FragCoord.xy - dt * texture2D(uVelocity, vUv).xy;     gl_FragColor = dissipation * bilerp(uSource, coord);     gl_FragColor.a = 1.0; }');
+    var advectionShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; uniform sampler2D uVelocity; uniform sampler2D uSource; uniform vec2 texelSize; uniform float dt; uniform float dissipation; void main () {     vec2 coord = vUv - dt * texture2D(uVelocity, vUv).xy * texelSize;     gl_FragColor = dissipation * texture2D(uSource, coord); }');
+    var divergenceShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform sampler2D uVelocity; vec2 sampleVelocity (in vec2 uv) {     vec2 multiplier = vec2(1.0, 1.0);     if (uv.x < 0.0) { uv.x = 0.0; multiplier.x = -1.0; }     if (uv.x > 1.0) { uv.x = 1.0; multiplier.x = -1.0; }     if (uv.y < 0.0) { uv.y = 0.0; multiplier.y = -1.0; }     if (uv.y > 1.0) { uv.y = 1.0; multiplier.y = -1.0; }     return multiplier * texture2D(uVelocity, uv).xy; } void main () {     float L = sampleVelocity(vL).x;     float R = sampleVelocity(vR).x;     float T = sampleVelocity(vT).y;     float B = sampleVelocity(vB).y;     float div = 0.5 * (R - L + T - B);     gl_FragColor = vec4(div, 0.0, 0.0, 1.0); }');
+    var curlShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform sampler2D uVelocity; void main () {     float L = texture2D(uVelocity, vL).y;     float R = texture2D(uVelocity, vR).y;     float T = texture2D(uVelocity, vT).x;     float B = texture2D(uVelocity, vB).x;     float vorticity = R - L - T + B;     gl_FragColor = vec4(vorticity, 0.0, 0.0, 1.0); }');
+    var vorticityShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform sampler2D uVelocity; uniform sampler2D uCurl; uniform float curl; uniform float dt; void main () {     float L = texture2D(uCurl, vL).y;     float R = texture2D(uCurl, vR).y;     float T = texture2D(uCurl, vT).x;     float B = texture2D(uCurl, vB).x;     float C = texture2D(uCurl, vUv).x;     vec2 force = vec2(abs(T) - abs(B), abs(R) - abs(L));     force *= 1.0 / length(force + 0.00001) * curl * C;     vec2 vel = texture2D(uVelocity, vUv).xy;     gl_FragColor = vec4(vel + force * dt, 0.0, 1.0); }');
+    var pressureShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform sampler2D uPressure; uniform sampler2D uDivergence; vec2 boundary (in vec2 uv) {     uv = min(max(uv, 0.0), 1.0);     return uv; } void main () {     float L = texture2D(uPressure, boundary(vL)).x;     float R = texture2D(uPressure, boundary(vR)).x;     float T = texture2D(uPressure, boundary(vT)).x;     float B = texture2D(uPressure, boundary(vB)).x;     float C = texture2D(uPressure, vUv).x;     float divergence = texture2D(uDivergence, vUv).x;     float pressure = (L + R + B + T - divergence) * 0.25;     gl_FragColor = vec4(pressure, 0.0, 0.0, 1.0); }');
+    var gradientSubtractShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform sampler2D uPressure; uniform sampler2D uVelocity; vec2 boundary (in vec2 uv) {     uv = min(max(uv, 0.0), 1.0);     return uv; } void main () {     float L = texture2D(uPressure, boundary(vL)).x;     float R = texture2D(uPressure, boundary(vR)).x;     float T = texture2D(uPressure, boundary(vT)).x;     float B = texture2D(uPressure, boundary(vB)).x;     vec2 velocity = texture2D(uVelocity, vUv).xy;     velocity.xy -= vec2(R - L, T - B);     gl_FragColor = vec4(velocity, 0.0, 1.0); }');
+
+    let textureWidth: number = 0;
+    let textureHeight: number = 0;
+
+    let density: { first: any[]; second: any[]; swap: () => void } | undefined;
+    let velocity: { first: any[]; second: any[]; swap: () => void } | undefined;
+    let divergence: any[] | undefined;
+    let curl: any[] | undefined;
+    let pressure: { first: any[]; second: any[]; swap: () => void } | undefined;
+
+    initFramebuffers();
+
+    var clearProgram = new GLProgram(baseVertexShader, clearShader);
+    var displayProgram = new GLProgram(baseVertexShader, displayShader);
+    var splatProgram = new GLProgram(baseVertexShader, splatShader);
+    var advectionProgram = new GLProgram(baseVertexShader, support_linear_float ? advectionShader : advectionManualFilteringShader);
+    var divergenceProgram = new GLProgram(baseVertexShader, divergenceShader);
+    var curlProgram = new GLProgram(baseVertexShader, curlShader);
+    var vorticityProgram = new GLProgram(baseVertexShader, vorticityShader);
+    var pressureProgram = new GLProgram(baseVertexShader, pressureShader);
+    var gradienSubtractProgram = new GLProgram(baseVertexShader, gradientSubtractShader);
+
+    function initFramebuffers() {
+      textureWidth = gl.drawingBufferWidth >> config.TEXTURE_DOWNSAMPLE;
+      textureHeight = gl.drawingBufferHeight >> config.TEXTURE_DOWNSAMPLE;
+
+      var iFormat = ext.internalFormat;
+      var iFormatRG = ext.internalFormatRG;
+      var formatRG = ext.formatRG;
+      var texType = ext.texType;
+
+      density = createDoubleFBO(0, textureWidth, textureHeight, iFormat, gl.RGBA, texType, support_linear_float ? gl.LINEAR : gl.NEAREST);
+      velocity = createDoubleFBO(2, textureWidth, textureHeight, iFormatRG, formatRG, texType, support_linear_float ? gl.LINEAR : gl.NEAREST);
+      divergence = createFBO(4, textureWidth, textureHeight, iFormatRG, formatRG, texType, gl.NEAREST);
+      curl = createFBO(5, textureWidth, textureHeight, iFormatRG, formatRG, texType, gl.NEAREST);
+      pressure = createDoubleFBO(6, textureWidth, textureHeight, iFormatRG, formatRG, texType, gl.NEAREST);
+    }
+
+    function createFBO(texId, w, h, internalFormat, format, type, param) {
+      gl.activeTexture(gl.TEXTURE0 + texId);
+
+      var texture = gl.createTexture();
+
+      gl.bindTexture(gl.TEXTURE_2D, texture);
+      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, param);
+      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, param);
+      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
+      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
+      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, w, h, 0, format, type, null);
+
+      var fbo = gl.createFramebuffer();
+
+      gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
+      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
+      gl.viewport(0, 0, w, h);
+      gl.clear(gl.COLOR_BUFFER_BIT);
+
+      return [texture, fbo, texId];
+    }
+
+    function createDoubleFBO(texId, w, h, internalFormat, format, type, param) {
+      var fbo1 = createFBO(texId, w, h, internalFormat, format, type, param);
+      var fbo2 = createFBO(texId + 1, w, h, internalFormat, format, type, param);
+
+      return {
+        get first() {
+          return fbo1;
+        },
+        get second() {
+          return fbo2;
+        },
+        swap: function swap() {
+          var temp = fbo1;
+
+          fbo1 = fbo2;
+          fbo2 = temp;
+        },
+      };
+    }
+
+    const blit = (() => {
+      const vertexData = new Float32Array([-1, -1, -1, 1, 1, 1, 1, -1]);
+      const elementData = new Uint16Array([0, 1, 2, 0, 2, 3]);
+
+      gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());
+      gl.bufferData(gl.ARRAY_BUFFER, vertexData, gl.STATIC_DRAW);
+      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer());
+      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, elementData, gl.STATIC_DRAW);
+      gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);
+      gl.enableVertexAttribArray(0);
+
+      return (destination: WebGLFramebuffer | null) => {
+        gl.bindFramebuffer(gl.FRAMEBUFFER, destination);
+        gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);
+      };
+    })();
+
+    var lastTime = Date.now();
+    let timeAccumulator = 0;
+
+    update();
+
+    function splat(x: number, y: number, dx: number, dy: number) {
+      if (!velocity) return;
+      if (!canvas) return;
+      if (!density) return;
+
+      splatProgram.bind();
+      gl.uniform1i(splatProgram.uniforms.uTarget, velocity.first[2]);
+      gl.uniform1f(splatProgram.uniforms.aspectRatio, canvas.width / canvas.height);
+      gl.uniform2f(splatProgram.uniforms.point, x / canvas.width, 1.0 - y / canvas.height);
+      gl.uniform3f(splatProgram.uniforms.color, dx, -dy, 1.0);
+      gl.uniform1f(splatProgram.uniforms.radius, config.SPLAT_RADIUS);
+      blit(velocity.second[1]);
+      velocity.swap();
+
+      gl.uniform1i(splatProgram.uniforms.uTarget, density.first[2]);
+
+      gl.uniform3f(splatProgram.uniforms.color, 0.9, 0.9, 0.9);
+      blit(density.second[1]);
+      density.swap();
+    }
+
+    function update() {
+      resizeCanvas();
+
+      const dt = Math.min((Date.now() - lastTime) / 1000, 0.016);
+      lastTime = Date.now();
+
+      gl.viewport(0, 0, textureWidth, textureHeight);
+
+      timeAccumulator += dt;
+
+      if (canvas) {
+        if (timeAccumulator >= config.SPEED) {
+          timeAccumulator = 0;
+          // splat(canvas.width * 0.5, canvas.height, 0, 48 * 8);
+          splat(0, canvas.height, canvas.width * 0.3, 8);
+        }
+      }
+
+      advectionProgram.bind();
+
+      if (!velocity) return;
+      if (!density) return;
+      if (!curl) return;
+      if (!divergence) return;
+      if (!pressure) return;
+
+      gl.uniform2f(advectionProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(advectionProgram.uniforms.uVelocity, velocity.first[2]);
+      gl.uniform1i(advectionProgram.uniforms.uSource, velocity.first[2]);
+      gl.uniform1f(advectionProgram.uniforms.dt, dt);
+      gl.uniform1f(advectionProgram.uniforms.dissipation, config.VELOCITY_DISSIPATION);
+      blit(velocity.second[1]);
+      velocity.swap();
+
+      gl.uniform1i(advectionProgram.uniforms.uVelocity, velocity.first[2]);
+
+      gl.uniform1i(advectionProgram.uniforms.uSource, density.first[2]);
+      gl.uniform1f(advectionProgram.uniforms.dissipation, config.DENSITY_DISSIPATION);
+      blit(density.second[1]);
+      density.swap();
+
+      curlProgram.bind();
+      gl.uniform2f(curlProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(curlProgram.uniforms.uVelocity, velocity.first[2]);
+      blit(curl[1]);
+
+      vorticityProgram.bind();
+      gl.uniform2f(vorticityProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(vorticityProgram.uniforms.uVelocity, velocity.first[2]);
+      gl.uniform1i(vorticityProgram.uniforms.uCurl, curl[2]);
+      gl.uniform1f(vorticityProgram.uniforms.curl, config.CURL);
+      gl.uniform1f(vorticityProgram.uniforms.dt, dt);
+      blit(velocity.second[1]);
+      velocity.swap();
+
+      divergenceProgram.bind();
+      gl.uniform2f(divergenceProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(divergenceProgram.uniforms.uVelocity, velocity.first[2]);
+      blit(divergence[1]);
+
+      clearProgram.bind();
+
+      var pressureTexId = pressure.first[2];
+
+      gl.activeTexture(gl.TEXTURE0 + pressureTexId);
+      gl.bindTexture(gl.TEXTURE_2D, pressure.first[0]);
+      gl.uniform1i(clearProgram.uniforms.uTexture, pressureTexId);
+      gl.uniform1f(clearProgram.uniforms.value, config.PRESSURE_DISSIPATION);
+      blit(pressure.second[1]);
+      pressure.swap();
+
+      pressureProgram.bind();
+      gl.uniform2f(pressureProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(pressureProgram.uniforms.uDivergence, divergence[2]);
+      pressureTexId = pressure.first[2];
+      gl.activeTexture(gl.TEXTURE0 + pressureTexId);
+
+      for (var _i = 0; _i < config.PRESSURE_ITERATIONS; _i++) {
+        gl.bindTexture(gl.TEXTURE_2D, pressure.first[0]);
+        gl.uniform1i(pressureProgram.uniforms.uPressure, pressureTexId);
+        blit(pressure.second[1]);
+        pressure.swap();
+      }
+
+      gradienSubtractProgram.bind();
+      gl.uniform2f(gradienSubtractProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(gradienSubtractProgram.uniforms.uPressure, pressure.first[2]);
+      gl.uniform1i(gradienSubtractProgram.uniforms.uVelocity, velocity.first[2]);
+      blit(velocity.second[1]);
+      velocity.swap();
+
+      gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
+      displayProgram.bind();
+      gl.uniform1i(displayProgram.uniforms.uTexture, density.first[2]);
+      blit(null);
+
+      requestAnimationFrame(update);
+    }
+
+    function resizeCanvas() {
+      if (!canvas) return;
+
+      (canvas.width !== canvas.clientWidth || canvas.height !== canvas.clientHeight) && ((canvas.width = canvas.clientWidth), (canvas.height = canvas.clientHeight), initFramebuffers());
+    }
+  }, []);
+
+  return <canvas className={styles.canvas} ref={canvasRef} style={props.style} />;
+}
+
+================
+File: reference/components/CanvasPlatformer.module.scss
+================
+.container {
+  width: 100%;
+  height: auto;
+  position: relative;
+}
+
+.root {
+  display: block;
+  width: 100%;
+  background: transparent;
+
+  &:focus {
+    outline: 0;
+    box-shadow: inset 0 0 0 1px var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/CanvasPlatformer.tsx
+================
+'use client';
+
+import styles from '@components/CanvasPlatformer.module.scss';
+
+import * as React from 'react';
+
+import ActionButton from '@components/ActionButton';
+
+interface PlatformerProps {
+  rows?: number;
+}
+
+// TODO(jimmylee)
+// Move these constants into a separate file
+// Dynamically compute these constants since we're going to
+// Support t-shirt sizes for the system.
+const LINE_HEIGHT = 20;
+const CHARACTER_WIDTH = 9.6;
+const GRAVITY = 0.3;
+const MOVE_SPEED = 2;
+const JUMP_SPEED = -6;
+const FRICTION = 0.85;
+
+interface Position {
+  x: number;
+  y: number;
+}
+
+interface Keys {
+  left: boolean;
+  right: boolean;
+  jump: boolean;
+}
+
+interface Block {
+  x: number;
+  y: number;
+}
+
+const CanvasPlatformer: React.FC<PlatformerProps> = ({ rows = 25 }) => {
+  const canvasRef = React.useRef<HTMLCanvasElement>(null);
+  const [focused, setFocused] = React.useState(false);
+
+  const positionRef = React.useRef<Position>({ x: 50, y: 0 });
+  const velocityRef = React.useRef<Position>({ x: 0, y: 0 });
+  const keysRef = React.useRef<Keys>({ left: false, right: false, jump: false });
+  const platformBlocksRef = React.useRef<Block[]>([]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+    const parent = canvas.parentElement;
+    if (!parent) return;
+
+    const resizeCanvas = () => {
+      const parentWidth = parent.clientWidth;
+      const canvasHeight = rows * LINE_HEIGHT;
+      canvas.width = parentWidth;
+      canvas.height = canvasHeight;
+      const platformY = canvas.height - LINE_HEIGHT * 2;
+      positionRef.current.y = platformY - LINE_HEIGHT;
+      platformBlocksRef.current = [];
+      const numBlocks = Math.floor(parentWidth / CHARACTER_WIDTH);
+      for (let i = 0; i < numBlocks; i++) {
+        platformBlocksRef.current.push({ x: i * CHARACTER_WIDTH, y: platformY });
+      }
+    };
+
+    resizeCanvas();
+    window.addEventListener('resize', resizeCanvas);
+    return () => {
+      window.removeEventListener('resize', resizeCanvas);
+    };
+  }, [rows]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const handleFocus = () => setFocused(true);
+    const handleBlur = () => {
+      setFocused(false);
+      keysRef.current = { left: false, right: false, jump: false };
+    };
+
+    canvas.tabIndex = 0;
+    canvas.addEventListener('focus', handleFocus);
+    canvas.addEventListener('blur', handleBlur);
+
+    const handleClick = (e: MouseEvent) => {
+      const rect = canvas.getBoundingClientRect();
+      const x = Math.floor((e.clientX - rect.left) / CHARACTER_WIDTH) * CHARACTER_WIDTH;
+      const y = Math.floor((e.clientY - rect.top) / LINE_HEIGHT) * LINE_HEIGHT;
+      const blocks = platformBlocksRef.current;
+      const existingIndex = blocks.findIndex((b) => b.x === x && b.y === y);
+      if (existingIndex !== -1) {
+        blocks.splice(existingIndex, 1);
+      } else {
+        blocks.push({ x, y });
+      }
+    };
+
+    canvas.addEventListener('click', handleClick);
+
+    return () => {
+      canvas.removeEventListener('focus', handleFocus);
+      canvas.removeEventListener('blur', handleBlur);
+      canvas.removeEventListener('click', handleClick);
+    };
+  }, []);
+
+  React.useEffect(() => {
+    const handleKeyDown = (e: KeyboardEvent) => {
+      if (!focused) return;
+      if (e.key === 'ArrowLeft' || e.key === 'ArrowRight' || e.code === 'Space') {
+        e.preventDefault();
+        e.stopPropagation();
+      }
+      if (e.key === 'ArrowLeft') keysRef.current.left = true;
+      if (e.key === 'ArrowRight') keysRef.current.right = true;
+      if (e.code === 'Space') keysRef.current.jump = true;
+    };
+
+    const handleKeyUp = (e: KeyboardEvent) => {
+      if (!focused) return;
+      if (e.key === 'ArrowLeft' || e.key === 'ArrowRight' || e.code === 'Space') {
+        e.preventDefault();
+        e.stopPropagation();
+      }
+      if (e.key === 'ArrowLeft') keysRef.current.left = false;
+      if (e.key === 'ArrowRight') keysRef.current.right = false;
+      if (e.code === 'Space') keysRef.current.jump = false;
+    };
+
+    window.addEventListener('keydown', handleKeyDown, { capture: true });
+    window.addEventListener('keyup', handleKeyUp, { capture: true });
+
+    return () => {
+      window.removeEventListener('keydown', handleKeyDown, { capture: true });
+      window.removeEventListener('keyup', handleKeyUp, { capture: true });
+    };
+  }, [focused]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+    const ctx = canvas.getContext('2d');
+    if (!ctx) return;
+
+    const loop = () => {
+      const w = canvas.width;
+      const h = canvas.height;
+      ctx.clearRect(0, 0, w, h);
+
+      const pos = positionRef.current;
+      const vel = velocityRef.current;
+      const keys = keysRef.current;
+      const blocks = platformBlocksRef.current;
+
+      const themeBorderColor = getComputedStyle(document.body).getPropertyValue('--theme-border').trim();
+      const themeTextColor = getComputedStyle(document.body).getPropertyValue('--theme-text').trim();
+
+      ctx.fillStyle = themeBorderColor;
+      for (const b of blocks) {
+        ctx.fillRect(b.x, b.y, CHARACTER_WIDTH, LINE_HEIGHT);
+      }
+
+      if (keys.left) vel.x = -MOVE_SPEED;
+      else if (keys.right) vel.x = MOVE_SPEED;
+      else {
+        vel.x *= FRICTION;
+        if (Math.abs(vel.x) < 0.1) vel.x = 0;
+      }
+
+      const oldY = pos.y;
+      vel.y += GRAVITY;
+      pos.x += vel.x;
+      pos.y += vel.y;
+
+      if (pos.x < 0) pos.x = 0;
+      if (pos.x > w - CHARACTER_WIDTH) pos.x = w - CHARACTER_WIDTH;
+
+      let groundY = h;
+      for (const b of blocks) {
+        const horizontallyOverlapping = pos.x + CHARACTER_WIDTH > b.x && pos.x < b.x + CHARACTER_WIDTH;
+        if (horizontallyOverlapping && oldY + LINE_HEIGHT <= b.y && pos.y + LINE_HEIGHT >= b.y) {
+          if (b.y < groundY) groundY = b.y;
+        }
+      }
+
+      if (pos.y + LINE_HEIGHT > groundY) {
+        pos.y = groundY - LINE_HEIGHT;
+        vel.y = 0;
+        if (keys.jump) vel.y = JUMP_SPEED;
+      }
+
+      ctx.fillStyle = themeTextColor;
+      ctx.fillRect(pos.x, pos.y, CHARACTER_WIDTH, LINE_HEIGHT);
+
+      requestAnimationFrame(loop);
+    };
+
+    requestAnimationFrame(loop);
+  }, []);
+
+  const handleJumpClick = () => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+    const pos = positionRef.current;
+    const vel = velocityRef.current;
+    let w = canvas.width;
+    let h = canvas.height;
+    let groundY = h;
+    for (const b of platformBlocksRef.current) {
+      const horizontallyOverlapping = pos.x + CHARACTER_WIDTH > b.x && pos.x < b.x + CHARACTER_WIDTH;
+      if (horizontallyOverlapping && pos.y + LINE_HEIGHT <= b.y) {
+        if (b.y < groundY) groundY = b.y;
+      }
+    }
+    if (pos.y + LINE_HEIGHT >= groundY) vel.y = JUMP_SPEED;
+  };
+
+  const handleLeftClick = () => {
+    const pos = positionRef.current;
+    pos.x -= CHARACTER_WIDTH;
+    if (pos.x < 0) pos.x = 0;
+  };
+
+  const handleRightClick = () => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+    const pos = positionRef.current;
+    pos.x += CHARACTER_WIDTH;
+    if (pos.x > canvas.width - CHARACTER_WIDTH) pos.x = canvas.width - CHARACTER_WIDTH;
+  };
+
+  return (
+    <>
+      <ActionButton hotkey="␣" onClick={handleJumpClick}>
+        Jump
+      </ActionButton>
+      <ActionButton hotkey="←" onClick={handleLeftClick}>
+        Left
+      </ActionButton>
+      <ActionButton hotkey="→" onClick={handleRightClick}>
+        Right
+      </ActionButton>
+      <div className={styles.container}>
+        <canvas className={styles.root} ref={canvasRef} />
+      </div>
+    </>
+  );
+};
+
+export default CanvasPlatformer;
+
+================
+File: reference/components/CanvasSnake.module.scss
+================
+.container {
+  width: 100%;
+  height: auto;
+  position: relative;
+}
+
+.root {
+  display: block;
+  width: 100%;
+  background: transparent;
+
+  &:focus {
+    outline: 0;
+    box-shadow: inset 0 0 0 1px var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/CanvasSnake.tsx
+================
+'use client';
+
+import styles from '@components/CanvasSnake.module.scss';
+
+import * as React from 'react';
+
+import ActionButton from '@components/ActionButton';
+
+interface SnakeProps {
+  rows?: number;
+}
+
+// TODO(jimmylee)
+// Move these constants into a separate file
+// Dynamically compute these constants since we're going to
+// Support t-shirt sizes for the system.
+const LINE_HEIGHT = 20;
+const CHARACTER_WIDTH = 9.6;
+
+interface Position {
+  x: number;
+  y: number;
+}
+
+type Direction = 'UP' | 'DOWN' | 'LEFT' | 'RIGHT';
+
+const CanvasSnake = ({ rows = 25 }: SnakeProps) => {
+  const canvasRef = React.useRef<HTMLCanvasElement>(null);
+  const [focused, setFocused] = React.useState(false);
+  const directionRef = React.useRef<Direction>('RIGHT');
+  const snakeRef = React.useRef<Position[]>([]);
+  const fruitRef = React.useRef<Position>({ x: 0, y: 0 });
+  const gridWidthRef = React.useRef<number>(0);
+  const gridHeightRef = React.useRef<number>(0);
+  const lastMoveTimeRef = React.useRef<number>(0);
+  const moveInterval = 150;
+  const animationFrameRef = React.useRef<number | null>(null);
+
+  const reset = React.useCallback(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const w = canvas.width;
+    const h = canvas.height;
+    const gridWidth = Math.floor(w / CHARACTER_WIDTH);
+    const gridHeight = Math.floor(h / LINE_HEIGHT);
+
+    gridWidthRef.current = gridWidth;
+    gridHeightRef.current = gridHeight;
+
+    const startX = Math.floor(gridWidth / 2);
+    const startY = Math.floor(gridHeight / 2);
+
+    snakeRef.current = [
+      { x: startX - 13, y: startY },
+      { x: startX - 12, y: startY },
+      { x: startX - 11, y: startY },
+      { x: startX - 10, y: startY },
+      { x: startX - 9, y: startY },
+      { x: startX - 8, y: startY },
+      { x: startX - 7, y: startY },
+      { x: startX - 6, y: startY },
+      { x: startX - 5, y: startY },
+      { x: startX - 4, y: startY },
+      { x: startX - 3, y: startY },
+      { x: startX - 2, y: startY },
+      { x: startX - 1, y: startY },
+      { x: startX, y: startY },
+    ];
+
+    directionRef.current = 'RIGHT';
+
+    fruitRef.current = {
+      x: Math.floor(Math.random() * gridWidth),
+      y: Math.floor(Math.random() * gridHeight),
+    };
+
+    lastMoveTimeRef.current = performance.now();
+  }, []);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const parent = canvas.parentElement;
+    if (!parent) return;
+
+    const onHandleResizeCanvas = () => {
+      const parentWidth = parent.clientWidth;
+      const canvasHeight = rows * LINE_HEIGHT;
+      canvas.width = parentWidth;
+      canvas.height = canvasHeight;
+      reset();
+    };
+
+    onHandleResizeCanvas();
+    window.addEventListener('resize', onHandleResizeCanvas);
+    return () => {
+      window.removeEventListener('resize', onHandleResizeCanvas);
+    };
+  }, [rows, reset]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const onHandleFocus = () => {
+      setFocused(true);
+    };
+    const onHandleBlur = () => {
+      setFocused(false);
+    };
+
+    canvas.tabIndex = 0;
+    canvas.addEventListener('focus', onHandleFocus);
+    canvas.addEventListener('blur', onHandleBlur);
+
+    return () => {
+      canvas.removeEventListener('focus', onHandleFocus);
+      canvas.removeEventListener('blur', onHandleBlur);
+    };
+  }, []);
+
+  React.useEffect(() => {
+    const handleKeyDown = (e: KeyboardEvent) => {
+      if (!focused) return;
+      if (e.key === 'ArrowLeft' || e.key === 'ArrowRight' || e.key === 'ArrowUp' || e.key === 'ArrowDown') {
+        e.preventDefault();
+        e.stopPropagation();
+      }
+      const currentDir = directionRef.current;
+      if (e.key === 'ArrowLeft' && currentDir !== 'RIGHT') directionRef.current = 'LEFT';
+      if (e.key === 'ArrowRight' && currentDir !== 'LEFT') directionRef.current = 'RIGHT';
+      if (e.key === 'ArrowUp' && currentDir !== 'DOWN') directionRef.current = 'UP';
+      if (e.key === 'ArrowDown' && currentDir !== 'UP') directionRef.current = 'DOWN';
+    };
+
+    window.addEventListener('keydown', handleKeyDown, { capture: true });
+    return () => {
+      window.removeEventListener('keydown', handleKeyDown, { capture: true });
+    };
+  }, [focused]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const ctx = canvas.getContext('2d');
+    if (!ctx) return;
+
+    const themeBorderColor = getComputedStyle(document.body).getPropertyValue('--theme-text').trim();
+    const themeTextColor = getComputedStyle(document.body).getPropertyValue('--theme-focused-foreground').trim();
+
+    const moveSnake = () => {
+      const snake = snakeRef.current;
+      const dir = directionRef.current;
+      const head = snake[snake.length - 1];
+      let newHead: Position = { x: head.x, y: head.y };
+      if (dir === 'LEFT') newHead.x -= 1;
+      if (dir === 'RIGHT') newHead.x += 1;
+      if (dir === 'UP') newHead.y -= 1;
+      if (dir === 'DOWN') newHead.y += 1;
+      if (newHead.x < 0 || newHead.x >= gridWidthRef.current || newHead.y < 0 || newHead.y >= gridHeightRef.current) {
+        reset();
+        return;
+      }
+      for (const seg of snake) {
+        if (seg.x === newHead.x && seg.y === newHead.y) {
+          reset();
+          return;
+        }
+      }
+      snake.push(newHead);
+      if (newHead.x === fruitRef.current.x && newHead.y === fruitRef.current.y) {
+        placeTarget();
+      } else {
+        snake.shift();
+      }
+    };
+
+    const placeTarget = () => {
+      const snake = snakeRef.current;
+      const gridW = gridWidthRef.current;
+      const gridH = gridHeightRef.current;
+      let fruitPos: Position;
+      while (true) {
+        fruitPos = {
+          x: Math.floor(Math.random() * gridW),
+          y: Math.floor(Math.random() * gridH),
+        };
+        if (!snake.some((s) => s.x === fruitPos.x && s.y === fruitPos.y)) break;
+      }
+      fruitRef.current = fruitPos;
+    };
+
+    const loop = (time: number) => {
+      if (!ctx) return;
+      if (!focused) return;
+
+      const w = canvas.width;
+      const h = canvas.height;
+
+      ctx.clearRect(0, 0, w, h);
+      ctx.fillStyle = themeTextColor;
+      ctx.fillRect(fruitRef.current.x * CHARACTER_WIDTH, fruitRef.current.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+      ctx.fillStyle = themeBorderColor;
+      for (const segment of snakeRef.current) {
+        ctx.fillRect(segment.x * CHARACTER_WIDTH, segment.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+      }
+      if (time - lastMoveTimeRef.current > moveInterval) {
+        moveSnake();
+        lastMoveTimeRef.current = time;
+      }
+      animationFrameRef.current = requestAnimationFrame(loop);
+    };
+
+    if (focused && animationFrameRef.current === null) {
+      animationFrameRef.current = requestAnimationFrame(loop);
+    }
+
+    return () => {
+      if (animationFrameRef.current !== null) {
+        cancelAnimationFrame(animationFrameRef.current);
+        animationFrameRef.current = null;
+      }
+    };
+  }, [focused, reset]);
+
+  React.useEffect(() => {
+    if (!focused) {
+      if (animationFrameRef.current !== null) {
+        cancelAnimationFrame(animationFrameRef.current);
+        animationFrameRef.current = null;
+      }
+
+      return;
+    }
+
+    if (animationFrameRef.current === null && canvasRef.current) {
+      animationFrameRef.current = requestAnimationFrame((time) => {
+        const canvas = canvasRef.current;
+        if (!canvas) return;
+
+        const ctx = canvas.getContext('2d');
+        if (!ctx) return;
+
+        const themeBorderColor = getComputedStyle(document.body).getPropertyValue('--theme-border').trim();
+        const themeTextColor = getComputedStyle(document.body).getPropertyValue('--theme-text').trim();
+
+        ctx.clearRect(0, 0, canvas.width, canvas.height);
+        ctx.fillStyle = themeBorderColor;
+        ctx.fillRect(fruitRef.current.x * CHARACTER_WIDTH, fruitRef.current.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+        ctx.fillStyle = themeTextColor;
+
+        for (const segment of snakeRef.current) {
+          ctx.fillRect(segment.x * CHARACTER_WIDTH, segment.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+        }
+
+        lastMoveTimeRef.current = time;
+        animationFrameRef.current = requestAnimationFrame(loop);
+
+        function loop(time: number) {
+          if (!focused) return;
+          if (!ctx) return;
+          if (!canvas) return;
+
+          ctx.clearRect(0, 0, canvas.width, canvas.height);
+          ctx.fillStyle = themeBorderColor;
+          ctx.fillRect(fruitRef.current.x * CHARACTER_WIDTH, fruitRef.current.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+          ctx.fillStyle = themeTextColor;
+          for (const segment of snakeRef.current) {
+            ctx.fillRect(segment.x * CHARACTER_WIDTH, segment.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+          }
+          if (time - lastMoveTimeRef.current > moveInterval) {
+            moveSnake();
+            lastMoveTimeRef.current = time;
+          }
+          animationFrameRef.current = requestAnimationFrame(loop);
+        }
+
+        const moveSnake = () => {
+          const snake = snakeRef.current;
+          const dir = directionRef.current;
+          const head = snake[snake.length - 1];
+          let newHead: Position = { x: head.x, y: head.y };
+          if (dir === 'LEFT') newHead.x -= 1;
+          if (dir === 'RIGHT') newHead.x += 1;
+          if (dir === 'UP') newHead.y -= 1;
+          if (dir === 'DOWN') newHead.y += 1;
+          if (newHead.x < 0 || newHead.x >= gridWidthRef.current || newHead.y < 0 || newHead.y >= gridHeightRef.current) {
+            reset();
+            return;
+          }
+
+          for (const seg of snake) {
+            if (seg.x === newHead.x && seg.y === newHead.y) {
+              reset();
+              return;
+            }
+          }
+
+          snake.push(newHead);
+          if (newHead.x === fruitRef.current.x && newHead.y === fruitRef.current.y) {
+            placeTarget();
+          } else {
+            snake.shift();
+          }
+        };
+
+        const placeTarget = () => {
+          const snake = snakeRef.current;
+          const gridW = gridWidthRef.current;
+          const gridH = gridHeightRef.current;
+          let fruitPos: Position;
+          while (true) {
+            fruitPos = {
+              x: Math.floor(Math.random() * gridW),
+              y: Math.floor(Math.random() * gridH),
+            };
+            if (!snake.some((s) => s.x === fruitPos.x && s.y === fruitPos.y)) break;
+          }
+          fruitRef.current = fruitPos;
+        };
+      });
+    }
+  }, [focused, reset]);
+
+  const onHandleClickUp = () => {
+    if (directionRef.current !== 'DOWN') directionRef.current = 'UP';
+  };
+  const onHandleClickDown = () => {
+    if (directionRef.current !== 'UP') directionRef.current = 'DOWN';
+  };
+  const onHandleClickLeft = () => {
+    if (directionRef.current !== 'RIGHT') directionRef.current = 'LEFT';
+  };
+  const onHandleClickRight = () => {
+    if (directionRef.current !== 'LEFT') directionRef.current = 'RIGHT';
+  };
+
+  return (
+    <>
+      <ActionButton hotkey="↑" onClick={onHandleClickUp}>
+        Up
+      </ActionButton>
+      <ActionButton hotkey="↓" onClick={onHandleClickDown}>
+        Down
+      </ActionButton>
+      <ActionButton hotkey="←" onClick={onHandleClickLeft}>
+        Left
+      </ActionButton>
+      <ActionButton hotkey="→" onClick={onHandleClickRight}>
+        Right
+      </ActionButton>
+      <div className={styles.container}>
+        <canvas className={styles.root} ref={canvasRef} />
+      </div>
+    </>
+  );
+};
+
+export default CanvasSnake;
+
+================
+File: reference/components/Card.module.scss
+================
+.card {
+  position: relative;
+  display: block;
+  padding-top: 0;
+  padding-left: 0;
+  padding-right: 0;
+  padding-bottom: 0;
+  white-space: prewrap;
+}
+
+.children {
+  box-shadow:
+    inset 2px 0 0 0 var(--theme-text),
+    inset -2px 0 0 0 var(--theme-text),
+    inset 0 -2px 0 0 var(--theme-text);
+  display: block;
+  padding-top: calc(var(--theme-line-height-base) * 0.5rem);
+  padding-left: 2ch;
+  padding-right: 2ch;
+  padding-bottom: calc(var(--theme-line-height-base) * 1rem);
+  overflow-x: auto;
+  overflow-y: hidden;
+
+  &::-webkit-scrollbar {
+    display: none;
+  }
+
+  scrollbar-width: none;
+}
+
+.action {
+  display: flex;
+  align-items: flex-end;
+  justify-content: space-between;
+}
+
+.left {
+  min-width: 10%;
+  width: 100%;
+  box-shadow:
+    inset 2px 0 0 0 var(--theme-text),
+    inset 0 2px 0 0 var(--theme-text);
+  padding: calc((var(--font-size) * 0.5) * var(--theme-line-height-base)) 2ch 0px 1ch;
+}
+
+.leftCorner {
+  flex-shrink: 0;
+  box-shadow:
+    inset 2px 0 0 0 var(--theme-text),
+    inset 0 2px 0 0 var(--theme-text);
+  padding: calc((var(--font-size) * 0.5) * var(--theme-line-height-base)) 1ch 0px 1ch;
+}
+
+.right {
+  min-width: 10%;
+  width: 100%;
+  box-shadow:
+    inset -2px 0 0 0 var(--theme-text),
+    inset 0 2px 0 0 var(--theme-text);
+  padding: calc((var(--font-size) * 0.5) * var(--theme-line-height-base)) 2ch 0px 1ch;
+}
+
+.rightCorner {
+  flex-shrink: 0;
+  box-shadow:
+    inset -2px 0 0 0 var(--theme-text),
+    inset 0 2px 0 0 var(--theme-text);
+  padding: calc((var(--font-size) * 0.5) * var(--theme-line-height-base)) 1ch 0px 1ch;
+}
+
+.title {
+  flex-shrink: 0;
+  padding: 0 1ch 0 1ch;
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+================
+File: reference/components/Card.tsx
+================
+import styles from '@components/Card.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface CardProps extends React.HTMLAttributes<HTMLDivElement> {
+  children?: React.ReactNode;
+  title?: string | any;
+  mode?: string | any;
+}
+
+const Card: React.FC<CardProps> = ({ children, mode, title, style, ...rest }) => {
+  let titleElement = (
+    <header className={styles.action}>
+      <div className={styles.left} aria-hidden="true"></div>
+      {title ? <h2 className={styles.title}>{title}</h2> : null}
+      <div className={styles.right} aria-hidden="true"></div>
+    </header>
+  );
+
+  if (mode === 'left') {
+    titleElement = (
+      <header className={styles.action}>
+        <div className={styles.leftCorner} aria-hidden="true"></div>
+        <h2 className={styles.title}>{title}</h2>
+        <div className={styles.right} aria-hidden="true"></div>
+      </header>
+    );
+  }
+
+  if (mode === 'right') {
+    titleElement = (
+      <header className={styles.action}>
+        <div className={styles.left} aria-hidden="true"></div>
+        <h2 className={styles.title}>{title}</h2>
+        <div className={styles.rightCorner} aria-hidden="true"></div>
+      </header>
+    );
+  }
+
+  return (
+    <article className={styles.card} style={style}>
+      {titleElement}
+      <section className={styles.children}>{children}</section>
+    </article>
+  );
+};
+
+export default Card;
+
+================
+File: reference/components/CardDouble.module.scss
+================
+.card {
+  --card-double-border-width: 6px;
+  --card-double-half-gutter: (var(--font-size) * 0.5);
+  --card-double-top-gutter: 6px;
+
+  position: relative;
+  display: block;
+  padding-top: 0;
+  padding-right: 0;
+  padding-left: 0;
+  padding-bottom: 0;
+}
+
+.children {
+  border-left: var(--card-double-border-width) solid var(--theme-text);
+  border-left-style: double;
+  border-bottom: var(--card-double-border-width) solid var(--theme-text);
+  border-bottom-style: double;
+  border-right: var(--card-double-border-width) solid var(--theme-text);
+  border-right-style: double;
+  display: block;
+  padding-top: calc(var(--theme-line-height-base) * 0.5rem);
+  padding-left: calc(2ch - var(--card-double-border-width));
+  padding-right: calc(2ch - var(--card-double-border-width));
+  padding-bottom: calc(var(--theme-line-height-base) * 1rem - var(--card-double-border-width));
+
+  overflow-x: auto;
+  overflow-y: hidden;
+
+  &::-webkit-scrollbar {
+    display: none;
+  }
+
+  scrollbar-width: none;
+}
+
+.action {
+  display: flex;
+  align-items: flex-end;
+  justify-content: space-between;
+}
+
+.left {
+  min-width: 10%;
+  width: 100%;
+  border-top: var(--card-double-border-width) solid var(--theme-text);
+  border-top-style: double;
+  border-left: var(--card-double-border-width) solid var(--theme-text);
+  border-left-style: double;
+  padding: calc(var(--card-double-top-gutter) * var(--theme-line-height-base)) 2ch 0px 1ch;
+}
+
+.leftCorner {
+  flex-shrink: 0;
+  border-top: var(--card-double-border-width) solid var(--theme-text);
+  border-top-style: double;
+  border-left: var(--card-double-border-width) solid var(--theme-text);
+  border-left-style: double;
+  padding: calc(var(--card-double-top-gutter) * var(--theme-line-height-base)) calc(1ch - 6px) 0px 1ch;
+}
+
+.right {
+  min-width: 10%;
+  width: 100%;
+  border-top: var(--card-double-border-width) solid var(--theme-text);
+  border-top-style: double;
+  border-right: var(--card-double-border-width) solid var(--theme-text);
+  border-right-style: double;
+  padding: calc(var(--card-double-top-gutter) * var(--theme-line-height-base)) 2ch 0px 1ch;
+}
+
+.rightCorner {
+  flex-shrink: 0;
+  border-top: var(--card-double-border-width) solid var(--theme-text);
+  border-top-style: double;
+  border-right: var(--card-double-border-width) solid var(--theme-text);
+  border-right-style: double;
+  padding: calc(var(--card-double-top-gutter) * var(--theme-line-height-base)) 1ch 0px calc(1ch - 6px);
+}
+
+.title {
+  flex-shrink: 0;
+  padding: 0 1ch 0 1ch;
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+================
+File: reference/components/CardDouble.tsx
+================
+import styles from '@components/CardDouble.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface CardProps extends React.HTMLAttributes<HTMLDivElement> {
+  children?: React.ReactNode;
+  title?: string | any;
+  mode?: string | any;
+  style?: any;
+}
+
+const CardDouble: React.FC<CardProps> = ({ children, mode, title, style, ...rest }) => {
+  let titleElement = (
+    <header className={styles.action}>
+      <div className={styles.left} aria-hidden="true"></div>
+      <h2 className={styles.title}>{title}</h2>
+      <div className={styles.right} aria-hidden="true"></div>
+    </header>
+  );
+
+  if (mode === 'left') {
+    titleElement = (
+      <header className={styles.action}>
+        <div className={styles.leftCorner} aria-hidden="true"></div>
+        <h2 className={styles.title}>{title}</h2>
+        <div className={styles.right} aria-hidden="true"></div>
+      </header>
+    );
+  }
+
+  if (mode === 'right') {
+    titleElement = (
+      <header className={styles.action}>
+        <div className={styles.left} aria-hidden="true"></div>
+        <h2 className={styles.title}>{title}</h2>
+        <div className={styles.rightCorner} aria-hidden="true"></div>
+      </header>
+    );
+  }
+
+  return (
+    <article className={styles.card}>
+      {titleElement}
+      <section className={styles.children}>
+        <section className={styles.borderChildren} style={style}>
+          {children}
+        </section>
+      </section>
+    </article>
+  );
+};
+
+export default CardDouble;
+
+================
+File: reference/components/Checkbox.module.scss
+================
+.section {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+
+  .right {
+    padding-bottom: calc(8px * var(--theme-line-height-base));
+    box-shadow: inset 0 1px 0 0 var(--theme-border-subdued);
+  }
+
+  &:last-child {
+    .right {
+      padding-bottom: 0;
+    }
+  }
+}
+
+.checked {
+}
+
+.focused {
+  .figure {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.relative {
+  position: relative;
+  flex-shrink: 0;
+  display: inline-block;
+  vertical-align: baseline;
+}
+
+.figure {
+  width: 100%;
+  height: 100%;
+  cursor: pointer;
+  color: var(--theme-text);
+  background: var(--theme-button-foreground);
+  align-self: stretch;
+  display: inline-block;
+  padding: 0 1ch 0 1ch;
+}
+
+.right {
+  background: var(--theme-button-background);
+  min-width: 10%;
+  width: 100%;
+  align-self: stretch;
+}
+
+.input {
+  top: 0;
+  left: 0;
+  opacity: 0;
+  position: absolute;
+  width: 1px;
+  height: 1px;
+}
+
+================
+File: reference/components/Checkbox.tsx
+================
+'use client';
+
+import styles from '@components/Checkbox.module.scss';
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface CheckboxProps {
+  style?: React.CSSProperties;
+  checkboxStyle?: React.CSSProperties;
+  name: string;
+  defaultChecked?: boolean;
+  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;
+  tabIndex?: number;
+  children?: React.ReactNode;
+}
+
+const Checkbox: React.FC<CheckboxProps> = ({ style, name, defaultChecked = false, onChange, children }) => {
+  const checkboxId = `${name}-checkbox`;
+  const inputRef = React.useRef<HTMLInputElement>(null);
+
+  const [isChecked, setIsChecked] = React.useState(defaultChecked);
+  const [isFocused, setIsFocused] = React.useState(false);
+
+  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
+    switch (event.key) {
+      case 'Enter':
+        event.preventDefault();
+        inputRef.current?.click();
+        break;
+      case 'ArrowUp':
+      case 'ArrowLeft': {
+        event.preventDefault();
+        const previousFocusable = Utilities.findNextFocusable(document.activeElement, 'previous');
+        previousFocusable?.focus();
+        break;
+      }
+      case 'ArrowDown':
+      case 'ArrowRight': {
+        event.preventDefault();
+        const nextFocusable = Utilities.findNextFocusable(document.activeElement, 'next');
+        nextFocusable?.focus();
+        break;
+      }
+      default:
+        break;
+    }
+  };
+
+  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
+    const newCheckedStatus = event.target.checked;
+    setIsChecked(newCheckedStatus);
+    if (onChange) {
+      onChange(event);
+    }
+  };
+
+  const handleFocus = () => setIsFocused(true);
+  const handleBlur = () => setIsFocused(false);
+
+  return (
+    <div
+      className={Utilities.classNames(styles.section, {
+        [styles.checked]: isChecked,
+        [styles.focused]: isFocused,
+      })}
+      style={style}
+    >
+      <div className={styles.relative}>
+        <input className={styles.input} id={checkboxId} type="checkbox" name={name} defaultChecked={defaultChecked} onChange={handleChange} onKeyDown={handleKeyDown} onFocus={handleFocus} onBlur={handleBlur} tabIndex={0} ref={inputRef} />
+        <label className={styles.figure} htmlFor={checkboxId}>
+          {isChecked ? '╳' : '\u00A0'}
+        </label>
+      </div>
+      <div className={styles.right}>&nbsp;&nbsp;{children}</div>
+    </div>
+  );
+};
+
+export default Checkbox;
+
+================
+File: reference/components/Chessboard.module.scss
+================
+.board {
+  display: inline-table;
+  border-collapse: collapse;
+}
+
+.corner {
+  width: 1ch;
+  height: calc(var(--theme-line-height-base) * 1rem);
+}
+
+.cell {
+  width: 1ch;
+  height: calc(var(--theme-line-height-base) * 1rem);
+  background-color: var(--theme-border-subdued);
+  text-align: center;
+  vertical-align: middle;
+}
+
+.square {
+  height: calc(var(--theme-line-height-base) * 2rem);
+  text-align: center;
+  vertical-align: middle;
+  width: 3ch;
+}
+
+.dark {
+  background-color: var(--theme-focused-foreground);
+}
+
+.light {
+  background-color: var(--theme-focused-foreground-subdued);
+}
+
+.symbol {
+  font-size: 40px;
+  line-height: calc(var(--theme-line-height-base) * 2rem);
+}
+
+================
+File: reference/components/Chessboard.tsx
+================
+'use client';
+
+import styles from '@components/Chessboard.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+const FILE = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];
+const RANK = [8, 7, 6, 5, 4, 3, 2, 1];
+
+const getPieceSymbol = (piece: string) => {
+  const mapping: Record<string, string> = {
+    K: '♔',
+    Q: '♕',
+    R: '♖',
+    B: '♗',
+    N: '♘',
+    P: '♙',
+    k: '♚',
+    q: '♛',
+    r: '♜',
+    b: '♝',
+    n: '♞',
+    p: '♟',
+  };
+  return mapping[piece] || '';
+};
+
+interface ChessboardProps {
+  board: string[][];
+}
+
+const Chessboard: React.FC<ChessboardProps> = ({ board }) => {
+  return (
+    <table className={styles.board}>
+      <tbody>
+        <tr>
+          <td className={styles.corner}></td>
+          {FILE.map((file) => (
+            <td key={file} className={styles.cell}>
+              {file}
+            </td>
+          ))}
+        </tr>
+        {RANK.map((rank, rowIndex) => (
+          <tr key={rank}>
+            <td className={styles.cell}>{rank}</td>
+            {FILE.map((_, colIndex) => {
+              const isDark = (rowIndex + colIndex) % 2 === 0;
+              const squareClass = isDark ? styles.dark : styles.light;
+              return (
+                <td key={colIndex} className={Utilities.classNames(styles.square, squareClass)}>
+                  <span className={styles.symbol}>{getPieceSymbol(board[rowIndex][colIndex])}</span>
+                </td>
+              );
+            })}
+          </tr>
+        ))}
+      </tbody>
+    </table>
+  );
+};
+
+export default Chessboard;
+
+================
+File: reference/components/CodeBlock.module.scss
+================
+.root {
+  display: block;
+  font-weight: 400;
+  overflow: auto;
+  font-family: inherit;
+  background: var(--theme-border-subdued);
+
+  &::-webkit-scrollbar {
+    display: none;
+  }
+
+  scrollbar-width: none;
+}
+
+.line {
+  display: flex;
+  justify-content: space-between;
+  align-items: flex-start;
+}
+
+.number {
+  display: inline-flex;
+  width: 3ch;
+  text-align: right;
+  padding-right: 1ch;
+  user-select: none;
+  background: var(--theme-background);
+  opacity: 0.5;
+}
+
+.content {
+  min-width: 10%;
+  width: 100%;
+  white-space: pre;
+  background: var(--theme-border-subdued);
+  padding-left: 2ch;
+}
+
+================
+File: reference/components/CodeBlock.tsx
+================
+'use client';
+
+import styles from '@components/CodeBlock.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface CodeBlockProps extends React.HTMLAttributes<HTMLPreElement> {
+  children?: React.ReactNode;
+}
+
+const CodeBlock = React.forwardRef<HTMLPreElement, CodeBlockProps>(({ children, ...rest }, ref) => {
+  return (
+    <pre className={styles.root} ref={ref} {...rest}>
+      {String(children)
+        .split('\n')
+        .map((line, index) => (
+          <div key={index} className={styles.line}>
+            <span className={styles.number}>{Utilities.leftPad(String(index + 1), 3)}</span>
+            <span className={styles.content}>{line}</span>
+          </div>
+        ))}
+    </pre>
+  );
+});
+
+CodeBlock.displayName = 'CodeBlock';
+
+export default CodeBlock;
+
+================
+File: reference/components/ComboBox.module.scss
+================
+.root {
+  padding: 0;
+}
+
+================
+File: reference/components/ComboBox.tsx
+================
+'use client';
+
+import styles from '@components/ComboBox.module.scss';
+
+import * as React from 'react';
+
+import AlertBanner from '@components/AlertBanner';
+import ButtonGroup from '@components/ButtonGroup';
+import CardDouble from '@components/CardDouble';
+import Input from '@components/Input';
+
+interface ComboBoxProps {
+  data: string[][];
+  label?: string;
+}
+
+function ComboBox({ data, label }: ComboBoxProps) {
+  const [searchTerm, setSearchTerm] = React.useState('');
+
+  const filtered = React.useMemo(() => {
+    const sliced = data.slice(1);
+    if (!searchTerm) return [];
+    return sliced.filter((entry) => entry[0].toLowerCase().includes(searchTerm.toLowerCase()));
+  }, [data, searchTerm]);
+
+  const displayed = React.useMemo(() => {
+    const sliced = data.slice(1);
+    if (filtered.length >= 5) return filtered.slice(0, 5);
+    if (filtered.length === 0 && searchTerm) return sliced.slice(0, 5);
+    if (filtered.length > 0 && filtered.length < 5) {
+      const needed = 5 - filtered.length;
+      const remainder = sliced.filter((entry) => !filtered.includes(entry));
+      return [...filtered, ...remainder.slice(0, needed)];
+    }
+    return sliced.slice(0, 5);
+  }, [filtered, data, searchTerm]);
+
+  const handleChange = React.useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
+    setSearchTerm(e.target.value);
+  }, []);
+
+  return (
+    <>
+      <div className={styles.root}>
+        <Input autoComplete="off" isBlink label={label} name="input_test_blink" value={searchTerm} onChange={handleChange} />
+      </div>
+      {displayed.map((entry) => (
+        <CardDouble key={entry[0]} title={entry[0]}>
+          <AlertBanner>{entry[1]}</AlertBanner>
+          <br />
+          <ButtonGroup isFull items={[{ body: 'FAVORITE' }, { body: 'DONATE' }, { body: 'LEARN MORE' }]} />
+        </CardDouble>
+      ))}
+    </>
+  );
+}
+
+export default ComboBox;
+
+================
+File: reference/components/ContentFluid.module.scss
+================
+.root {
+  display: block;
+  min-width: 10%;
+  width: 100%;
+  align-self: stretch;
+}
+
+================
+File: reference/components/ContentFluid.tsx
+================
+import styles from '@components/ContentFluid.module.scss';
+
+import * as React from 'react';
+
+interface ContentFluidProps extends React.HTMLAttributes<HTMLSpanElement> {
+  children?: React.ReactNode;
+}
+
+const ContentFluid: React.FC<ContentFluidProps> = ({ children, ...rest }) => {
+  return <div className={styles.root}>{children}</div>;
+};
+
+export default ContentFluid;
+
+================
+File: reference/components/DataTable.module.scss
+================
+.root {
+  position: relative;
+  width: 100%;
+  border-spacing: 0px;
+  max-width: 64ch;
+}
+
+.body {
+}
+
+.row {
+  transition: transform 0.5s ease;
+  border-spacing: 0px;
+
+  &:first-child {
+    font-weight: 400;
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    outline: 0;
+  }
+}
+
+.column {
+  border: 0;
+  outline: 0;
+  padding-right: 1ch;
+  transition: background-color 0.5s ease;
+}
+
+.changed {
+  animation: flash 2000ms ease;
+}
+
+@keyframes flash {
+  0% {
+    background-color: var(--theme-focused-foreground-subdued);
+  }
+  100% {
+    background-color: transparent;
+  }
+}
+
+================
+File: reference/components/DataTable.tsx
+================
+'use client';
+
+import styles from '@components/DataTable.module.scss';
+
+import * as React from 'react';
+
+interface TableProps {
+  data: string[][];
+}
+
+interface RGBAColor {
+  r: number;
+  g: number;
+  b: number;
+  a: number;
+}
+
+const BASE_FOREGROUND_RGBA: RGBAColor = { r: 98, g: 98, b: 98, a: 0.5 };
+const BASE_BACKGROUND_RGBA: RGBAColor = { r: 168, g: 168, b: 168, a: 0.5 };
+const ALPHA = 0.45;
+
+function interpolateColor(color1: RGBAColor, color2: RGBAColor, factor: number): RGBAColor {
+  return {
+    r: Math.round(color1.r + factor * (color2.r - color1.r)),
+    g: Math.round(color1.g + factor * (color2.g - color1.g)),
+    b: Math.round(color1.b + factor * (color2.b - color1.b)),
+    a: color1.a + factor * (color2.a - color1.a),
+  };
+}
+
+const DataTable: React.FC<TableProps> = ({ data }) => {
+  const tableRef = React.useRef<HTMLTableElement>(null);
+  const prevDataRef = React.useRef<string[][]>(data);
+
+  React.useEffect(() => {
+    const rows = tableRef.current?.querySelectorAll<HTMLTableRowElement>('tr') || [];
+    for (let i = 1; i < data.length; i++) {
+      const cells = rows[i]?.querySelectorAll<HTMLTableCellElement>('td');
+      if (!cells) continue;
+      for (let j = 0; j < data[i].length; j++) {
+        const cell = cells[j];
+        const changed = prevDataRef.current[i]?.[j] !== data[i][j];
+        if (cell && changed) {
+          cell.classList.remove(styles.changed);
+          void cell.offsetWidth;
+          cell.classList.add(styles.changed);
+        }
+      }
+    }
+    prevDataRef.current = data;
+  }, [data]);
+
+  const handleKeyDown = (event: React.KeyboardEvent<HTMLTableElement>) => {
+    const activeElement = document.activeElement;
+    if (!activeElement) return;
+    switch (event.key) {
+      case 'Enter':
+        event.preventDefault();
+        if (activeElement instanceof HTMLTableCellElement) {
+          activeElement.click();
+        }
+        break;
+      case 'ArrowUp':
+      case 'ArrowDown':
+      case 'ArrowLeft':
+      case 'ArrowRight':
+        event.preventDefault();
+        if (!(activeElement instanceof HTMLTableCellElement)) return;
+        const direction = event.key === 'ArrowUp' || event.key === 'ArrowLeft' ? 'previous' : 'next';
+        const allCells = Array.from(tableRef.current?.querySelectorAll<HTMLTableCellElement>('td') || []);
+        const currentIndex = allCells.indexOf(activeElement);
+        if (currentIndex === -1) return;
+        let nextIndex = direction === 'next' ? currentIndex + 1 : currentIndex - 1;
+        if (direction === 'previous') {
+          if (nextIndex < 0) nextIndex = allCells.length - 1;
+        } else {
+          if (nextIndex >= allCells.length) nextIndex = 0;
+        }
+        allCells[nextIndex].focus();
+        break;
+    }
+  };
+
+  const targetColorHeader: RGBAColor = { r: 255, g: 255, b: 255, a: ALPHA };
+  const targetColorData: RGBAColor = { r: 255, g: 255, b: 255, a: ALPHA };
+
+  return (
+    <table className={styles.root} ref={tableRef} onKeyDown={handleKeyDown}>
+      <tbody className={styles.body}>
+        {data.map((row, rowIndex) => (
+          <tr key={rowIndex} className={styles.row} tabIndex={0} onClick={() => alert('testing')}>
+            {row.map((cellContent, colIndex) => {
+              let backgroundColor: string;
+              if (rowIndex === 0) {
+                const lightnessFactor = row.length > 1 ? colIndex / (row.length - 1) : 0;
+                const newColor = interpolateColor(BASE_FOREGROUND_RGBA, targetColorHeader, lightnessFactor);
+                backgroundColor = `rgba(${newColor.r}, ${newColor.g}, ${newColor.b}, ${newColor.a.toFixed(2)})`;
+              } else {
+                const numRows = data.length - 1;
+                const maxIndexSum = numRows - 1 + (row.length - 1) || 1;
+                const indexSum = rowIndex - 1 + colIndex;
+                const lightnessFactor = indexSum / maxIndexSum;
+                const newColor = interpolateColor(BASE_BACKGROUND_RGBA, targetColorData, lightnessFactor);
+                backgroundColor = `rgba(${newColor.r}, ${newColor.g}, ${newColor.b}, ${newColor.a.toFixed(2)})`;
+              }
+              return (
+                <td key={colIndex} className={styles.column} style={{ backgroundColor }}>
+                  {cellContent}
+                </td>
+              );
+            })}
+          </tr>
+        ))}
+      </tbody>
+    </table>
+  );
+};
+
+export default DataTable;
+
+================
+File: reference/components/DatePicker.module.scss
+================
+.root {
+  display: inline-block;
+  user-select: none;
+}
+
+.controls {
+  align-items: center;
+  background: var(--theme-border);
+  display: flex;
+  justify-content: space-between;
+}
+
+.button {
+  align-self: stretch;
+  background: none;
+  border: none;
+  color: var(--theme-text);
+  cursor: pointer;
+  display: inline-block;
+  line-height: calc(var(--theme-line-height-base) * 1em);
+  margin: 0;
+  outline: 0;
+  padding: 0 1ch 0 1ch;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    outline: 0;
+  }
+}
+
+.date {
+  min-width: 10%;
+  padding: 0 1ch 0 1ch;
+  text-align: left;
+  width: 100%;
+}
+
+.header {
+  background: var(--theme-border);
+  display: grid;
+  grid-template-columns: repeat(7, 1fr);
+  text-align: center;
+}
+
+.days {
+  background: var(--theme-border-subdued);
+  display: grid;
+  grid-template-columns: repeat(7, 1fr);
+  grid-template-rows: repeat(6, min-content);
+  align-items: start;
+  min-height: calc(var(--theme-line-height-base) * 6em);
+}
+
+.cell {
+  outline: none;
+  padding: 0 1ch 0 1ch;
+  text-align: center;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/DatePicker.tsx
+================
+'use client';
+
+import styles from '@components/DatePicker.module.scss';
+
+import * as React from 'react';
+
+interface DatePickerProps {
+  year?: number;
+  month?: number;
+}
+
+const WEEKDAYS = ['SU', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA'];
+
+const MONTH_NAMES = [
+  'January', 'February', 'March', 'April', 'May', 'June',
+  'July', 'August', 'September', 'October', 'November', 'December'
+];
+
+const MAX_CELLS = 42;
+
+const DatePicker: React.FC<DatePickerProps> = ({ year, month }) => {
+  const today = new Date();
+  const [currentYear, setYear] = React.useState(year || today.getFullYear());
+  const [currentMonth, setMonth] = React.useState(month || today.getMonth() + 1);
+
+  const first = new Date(currentYear, currentMonth - 1, 1);
+  const startingWeekday = first.getDay();
+  const daysInMonth = new Date(currentYear, currentMonth, 0).getDate();
+
+  const cells: React.ReactNode[] = [];
+
+  for (let i = 0; i < startingWeekday; i++) {
+    cells.push(<div key={`empty-start-${i}`} className={styles.dayCell} />);
+  }
+
+  for (let day = 1; day <= daysInMonth; day++) {
+    const presentationDay = String(day).padStart(2, '0');
+    cells.push(
+      <div
+        key={day}
+        className={styles.cell}
+        tabIndex={0}
+        aria-label={`${currentYear}-${String(currentMonth).padStart(2, '0')}-${presentationDay}`}
+      >
+        {presentationDay}
+      </div>
+    );
+  }
+
+  while (cells.length < MAX_CELLS) {
+    cells.push(<div key={`empty-end-${cells.length}`} className={styles.dayCell} />);
+  }
+
+  const onSwitchPreviousMonth = () => {
+    let newMonth = currentMonth - 1;
+    let newYear = currentYear;
+    if (newMonth < 1) {
+      newMonth = 12;
+      newYear--;
+    }
+    setMonth(newMonth);
+    setYear(newYear);
+  };
+
+  const onSwitchNextMonth = () => {
+    let newMonth = currentMonth + 1;
+    let newYear = currentYear;
+    if (newMonth > 12) {
+      newMonth = 1;
+      newYear++;
+    }
+    setMonth(newMonth);
+    setYear(newYear);
+  };
+
+  return (
+    <div className={styles.root}>
+      <div className={styles.controls}>
+        <button type="button" className={styles.button} onClick={onSwitchPreviousMonth} aria-label="Previous month">
+          ▲
+        </button>
+        <div className={styles.date}>
+          {currentYear} {MONTH_NAMES[currentMonth - 1].toUpperCase()}
+        </div>
+        <button type="button" className={styles.button} onClick={onSwitchNextMonth} aria-label="Next month">
+          ▼
+        </button>
+      </div>
+      <div className={styles.header}>
+        {WEEKDAYS.map((day) => (
+          <div key={day} className={styles.cell}>
+            {day}
+          </div>
+        ))}
+      </div>
+      <div className={styles.days}>{cells}</div>
+    </div>
+  );
+};
+
+export default DatePicker;
+
+================
+File: reference/components/DebugGrid.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+const DebugGrid: React.FC = () => {
+  React.useEffect(() => {
+    const debugGrid = document.createElement('div');
+    let isVisible = false;
+
+    const setGridHeight = () => {
+      debugGrid.style.height = `${document.documentElement.scrollHeight}px`;
+    };
+
+    Object.assign(debugGrid.style, {
+      position: 'absolute',
+      top: '0',
+      left: '0',
+      right: '0',
+      zIndex: '-1',
+      margin: '0',
+      backgroundImage: `
+        repeating-linear-gradient(var(--theme-border) 0 1px, transparent 1px 100%),
+        repeating-linear-gradient(90deg, var(--theme-border) 0 1px, transparent 1px 100%)
+      `,
+      backgroundSize: '1ch 1.25rem',
+      pointerEvents: 'none',
+      display: 'none',
+    });
+
+    document.body.appendChild(debugGrid);
+    setGridHeight();
+
+    const toggleDebugGrid = () => {
+      isVisible = !isVisible;
+      debugGrid.style.display = isVisible ? 'block' : 'none';
+    };
+
+    const handleDebugGridToggle = () => toggleDebugGrid();
+
+    const observer = new ResizeObserver(() => {
+      setGridHeight();
+    });
+    observer.observe(document.documentElement);
+
+    window.addEventListener('debugGridToggle', handleDebugGridToggle);
+    window.addEventListener('resize', setGridHeight);
+
+    return () => {
+      document.body.removeChild(debugGrid);
+      window.removeEventListener('resize', setGridHeight);
+      window.removeEventListener('debugGridToggle', handleDebugGridToggle);
+      observer.disconnect();
+    };
+  }, []);
+
+  return null;
+};
+
+export const toggleDebugGrid = (): void => {
+  window.dispatchEvent(new CustomEvent('debugGridToggle'));
+};
+
+export default DebugGrid;
+
+================
+File: reference/components/DefaultMetaTags.tsx
+================
+export default function DefaultMetaTags() {
+  return (
+    <>
+      <meta httpEquiv="content-language" content="en-us" />
+      <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0" />
+      <link rel="icon" type="image/png" sizes="32x32" href="/favicon-16x16.png" />
+      <link rel="icon" type="image/png" sizes="16x16" href="/favicon-32x32.png" />
+      <link rel="shortcut icon" href="/favicon.ico" />
+    </>
+  );
+}
+
+================
+File: reference/components/Dialog.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border);
+  box-shadow: 1ch 1ch 0 0 var(--theme-border-subdued);
+  font-weight: 400;
+  max-width: 56ch;
+  min-width: 24ch;
+  margin: 0;
+  padding: 0;
+}
+
+.header {
+  background: var(--theme-text);
+  color: var(--theme-background);
+  text-align: center;
+  margin: 0;
+  padding: 0;
+  display: block;
+}
+
+.message {
+  display: block;
+  margin: 0;
+  text-align: center;
+  padding: 0 2ch 0 2ch;
+}
+
+.actions {
+  display: flex;
+  justify-content: space-between;
+  align-items: center;
+  max-width: 24ch;
+  margin: 0 auto 0 auto;
+  padding: 0 2ch 0 2ch;
+}
+
+================
+File: reference/components/Dialog.tsx
+================
+import styles from '@components/Dialog.module.scss';
+
+import * as React from 'react';
+
+import Block from '@components/Block';
+import Button from '@components/Button';
+
+interface DialogProps {
+  title?: React.ReactNode;
+  children?: React.ReactNode;
+  style?: React.CSSProperties;
+  onConfirm?: () => void;
+  onCancel?: () => void;
+}
+
+const Dialog: React.FC<DialogProps> = ({ title, children, style, onConfirm, onCancel }) => {
+  const titleId = React.useId();
+  const descId = React.useId();
+
+  return (
+    <div className={styles.root} style={style} role="dialog" aria-modal="true" aria-labelledby={titleId} aria-describedby={descId}>
+      <header className={styles.header}>{title}</header>
+      <br />
+      <article className={styles.message} id={descId}>
+        {children}
+      </article>
+      <br />
+      <div className={styles.actions}>
+        <Button theme="SECONDARY" onClick={onConfirm}>
+          OK
+        </Button>
+        <Block style={{ opacity: 0 }} />
+        <Button theme="SECONDARY" onClick={onCancel}>
+          Cancel
+        </Button>
+      </div>
+      <br />
+    </div>
+  );
+};
+
+export default Dialog;
+
+================
+File: reference/components/Divider.module.scss
+================
+.gradient {
+  background: linear-gradient(to right, transparent, var(--theme-border), transparent);
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  width: 100%;
+}
+
+.divider {
+  align-items: center;
+  border: 0;
+  display: flex;
+  flex-direction: column;
+  flex-shrink: 0;
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  justify-content: center;
+  outline: 0;
+  width: 100%;
+}
+
+.line {
+  background: var(--theme-text);
+  display: block;
+  flex-shrink: 0;
+  height: 2px;
+  width: 100%;
+}
+
+================
+File: reference/components/Divider.tsx
+================
+import styles from '@components/Divider.module.scss';
+
+import * as React from 'react';
+
+interface DividerProps extends React.HTMLAttributes<HTMLSpanElement> {
+  children?: React.ReactNode;
+  type?: string | any;
+  style?: any;
+}
+
+const Divider: React.FC<DividerProps> = ({ children, style, type }) => {
+  if (type === 'GRADIENT') {
+    return <div className={styles.gradient} style={style} />;
+  }
+
+  if (type === 'DOUBLE') {
+    return (
+      <div className={styles.divider} style={style}>
+        <div className={styles.line} style={{ marginBottom: `2px` }} />
+        <div className={styles.line} />
+      </div>
+    );
+  }
+
+  return (
+    <div className={styles.divider} style={style}>
+      <div className={styles.line} />
+    </div>
+  );
+};
+
+export default Divider;
+
+================
+File: reference/components/Drawer.module.scss
+================
+@keyframes fadeInLeft {
+  from {
+    opacity: 0;
+  }
+  to {
+    opacity: 1;
+  }
+}
+
+.root {
+  align-self: stretch;
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+}
+
+.side {
+  animation: fadeInLeft 0.2s ease-out;
+  min-width: 10%;
+  width: 100%;
+  align-self: stretch;
+  min-width: 22ch;
+}
+
+.right {
+  flex-shrink: 0;
+  align-self: stretch;
+  background: var(--theme-background-input);
+  display: flex;
+  align-items: center;
+  width: 3ch;
+}
+
+.action {
+  display: inline-flex;
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  font-size: var(--font-size);
+  user-select: none;
+  cursor: pointer;
+  color: var(--theme-text);
+  background: var(--theme-button-foreground);
+  flex-shrink: 0;
+  align-items: center;
+  justify-content: center;
+  border: 0;
+  outline: 0;
+  margin: 0;
+  padding: 0;
+  width: 100%;
+
+  &:focus {
+    border: 0;
+    outline: 0;
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/Drawer.tsx
+================
+'use client';
+
+import styles from '@components/Drawer.module.scss';
+
+import * as React from 'react';
+
+interface DrawerProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'defaultValue'> {
+  children?: React.ReactNode;
+  defaultValue?: boolean;
+}
+
+const Drawer: React.FC<DrawerProps> = ({ children, defaultValue = false, ...rest }) => {
+  const [expand, setExpand] = React.useState<boolean>(defaultValue);
+
+  return (
+    <div className={styles.root} {...rest}>
+      {expand ? <div className={styles.side}>{children}</div> : null}
+      <div className={styles.right}>
+        <button className={styles.action} onClick={() => setExpand(!expand)}>
+          {expand ? '⭠' : '⭢'}
+        </button>
+      </div>
+    </div>
+  );
+};
+
+export default Drawer;
+
+================
+File: reference/components/DropdownMenu.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border);
+  font-weight: 400;
+}
+
+.footer {
+  background: var(--theme-background-modal-footer);
+  padding: calc(var(--font-size) * 0.5 * var(--theme-line-height-base)) 1ch calc(var(--font-size) * 0.5 * var(--theme-line-height-base)) 1ch;
+}
+
+================
+File: reference/components/DropdownMenu.tsx
+================
+import styles from '@components/DropdownMenu.module.scss';
+
+import * as React from 'react';
+
+import ActionButton from '@components/ActionButton';
+import ActionListItem from '@components/ActionListItem';
+import ModalTrigger from '@components/ModalTrigger';
+
+import { useHotkeys } from '@modules/hotkeys';
+
+interface DropdownMenuItemProps {
+  children: React.ReactNode;
+  icon?: React.ReactNode;
+  href?: string;
+  target?: string;
+  onClick?: () => void;
+  modal?: any;
+  modalProps?: Record<string, unknown>;
+}
+
+interface DropdownMenuProps extends React.HTMLAttributes<HTMLDivElement> {
+  onClose?: (event?: MouseEvent | TouchEvent | KeyboardEvent) => void;
+  items?: DropdownMenuItemProps[];
+}
+
+const DropdownMenu = React.forwardRef<HTMLDivElement, DropdownMenuProps>((props, ref) => {
+  const { onClose, items, style, ...rest } = props;
+
+  const handleHotkey = () => {
+    if (onClose) onClose();
+  };
+
+  useHotkeys('space', handleHotkey);
+
+  return (
+    <div ref={ref} className={styles.root} style={style} {...rest}>
+      {items &&
+        items.map((each, index) => {
+          if (each.modal) {
+            return (
+              <ModalTrigger key={`action-items-${index}`} modal={each.modal} modalProps={each.modalProps}>
+                <ActionListItem children={each.children} icon={each.icon} />
+              </ModalTrigger>
+            );
+          }
+
+          return (
+            <ActionListItem
+              key={`action-items-${index}`}
+              children={each.children}
+              icon={each.icon}
+              href={each.href}
+              target={each.target}
+              onClick={() => {
+                if (each.onClick) {
+                  each.onClick();
+                }
+
+                if (onClose) {
+                  onClose();
+                }
+              }}
+            />
+          );
+        })}
+
+      <footer className={styles.footer}>
+        Press space to{' '}
+        <ActionButton
+          hotkey="␣"
+          onClick={() => {
+            if (onClose) onClose();
+          }}
+        >
+          Close
+        </ActionButton>
+      </footer>
+    </div>
+  );
+});
+
+DropdownMenu.displayName = 'DropdownMenu';
+
+export default DropdownMenu;
+
+================
+File: reference/components/DropdownMenuTrigger.module.scss
+================
+.root {
+  display: inline-block;
+  position: relative;
+}
+
+================
+File: reference/components/DropdownMenuTrigger.tsx
+================
+'use client';
+
+import styles from '@components/DropdownMenuTrigger.module.scss';
+
+import * as Position from '@common/position';
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import DropdownMenu from '@components/DropdownMenu';
+import OutsideElementEvent from '@components/detectors/OutsideElementEvent';
+
+import { createPortal } from 'react-dom';
+import { useHotkeys } from '@modules/hotkeys';
+
+interface DropdownMenuTriggerProps {
+  children: React.ReactElement<React.HTMLAttributes<HTMLElement>>;
+  items: any;
+  hotkey?: string;
+}
+
+function DropdownMenuTrigger({ children, items, hotkey }: DropdownMenuTriggerProps) {
+  const [open, setOpen] = React.useState(false);
+  const [focusChildren, setFocusChildren] = React.useState(false);
+  const [willClose, setWillClose] = React.useState(false);
+  const [placement, setPlacement] = React.useState<Position.Placement>('bottom');
+  const [position, setPosition] = React.useState<{ top: number; left: number }>({ top: 0, left: 0 });
+
+  const triggerRef = React.useRef<HTMLElement>(null);
+  const elementRef = React.useRef<HTMLDivElement>(null);
+
+  const onClick = React.useCallback((event: React.MouseEvent) => {
+    event.preventDefault();
+    setOpen(true);
+  }, []);
+
+  const onOutsideEvent = React.useCallback(() => setOpen(false), []);
+  const onClose = React.useCallback(() => setWillClose(true), []);
+
+  if (hotkey) {
+    useHotkeys(hotkey, () => {
+      setOpen(!open);
+    });
+  }
+
+  React.useEffect(() => {
+    if (focusChildren) {
+      const element = elementRef.current;
+      if (element) {
+        const firstFocusable = Utilities.findFocusableDescendant(element);
+        if (firstFocusable) {
+          firstFocusable.focus();
+        } else {
+          element.focus();
+        }
+      }
+      setFocusChildren(false);
+    }
+  }, [focusChildren]);
+
+  React.useEffect(() => {
+    if (willClose) {
+      setOpen(false);
+      setWillClose(false);
+    }
+  }, [willClose]);
+
+  React.useEffect(() => {
+    if (!open || !triggerRef.current || !elementRef.current) return;
+
+    const updatePosition = () => {
+      const { placement, position } = Position.calculate(triggerRef.current!, elementRef.current!);
+      setPlacement(placement);
+      setPosition(position);
+    };
+
+    updatePosition();
+    setFocusChildren(true);
+
+    const handleResizeOrScroll = () => updatePosition();
+    const observer = new MutationObserver(() => updatePosition());
+    observer.observe(document.body, { attributes: true, childList: true, subtree: true });
+
+    window.addEventListener('resize', handleResizeOrScroll);
+    window.addEventListener('scroll', handleResizeOrScroll, true);
+
+    return () => {
+      window.removeEventListener('resize', handleResizeOrScroll);
+      window.removeEventListener('scroll', handleResizeOrScroll, true);
+      observer.disconnect();
+    };
+  }, [open]);
+
+  const element = open
+    ? createPortal(
+        <OutsideElementEvent onOutsideEvent={onOutsideEvent}>
+          <DropdownMenu
+            onClose={onClose}
+            ref={elementRef}
+            items={items}
+            style={{
+              position: 'absolute',
+              top: `${position.top}px`,
+              left: `${position.left}px`,
+              zIndex: `var(--z-index-page-dropdown-menus)`,
+            }}
+            role="dialog"
+            aria-modal="true"
+          />
+        </OutsideElementEvent>,
+        document.body
+      )
+    : null;
+
+  return (
+    <div className={styles.root}>
+      {React.cloneElement(children, {
+        tabIndex: 0,
+        onClick,
+        // @ts-ignore
+        ref: triggerRef,
+      })}
+      {element}
+    </div>
+  );
+}
+
+export default DropdownMenuTrigger;
+
+================
+File: reference/components/Grid.module.scss
+================
+.grid {
+  display: block;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+}
+
+================
+File: reference/components/Grid.tsx
+================
+import styles from '@components/Grid.module.scss';
+
+import * as React from 'react';
+
+interface GridProps extends React.HTMLAttributes<HTMLDivElement> {
+  children?: React.ReactNode;
+}
+
+const Grid: React.FC<GridProps> = ({ children, ...rest }) => {
+  return (
+    <div className={styles.grid} {...rest}>
+      {children}
+    </div>
+  );
+};
+
+export default Grid;
+
+================
+File: reference/components/HoverComponentTrigger.module.scss
+================
+.root {
+  display: inline-block;
+  position: relative;
+}
+
+================
+File: reference/components/HoverComponentTrigger.tsx
+================
+'use client';
+
+import styles from '@components/HoverComponentTrigger.module.scss';
+
+import * as React from 'react';
+import * as Position from '@common/position';
+
+import OutsideElementEvent from '@components/detectors/OutsideElementEvent';
+import Popover from '@components/Popover';
+import Tooltip from '@components/Tooltip';
+
+import { createPortal } from 'react-dom';
+
+interface HoverComponentTriggerProps {
+  children: React.ReactElement<React.HTMLAttributes<HTMLElement>>;
+  text: string;
+  component: 'popover' | 'tooltip';
+}
+
+function HoverComponentTrigger({ children, text, component }: HoverComponentTriggerProps) {
+  const [open, setOpen] = React.useState(false);
+  const [placement, setPlacement] = React.useState<Position.Placement>('bottom');
+  const [position, setPosition] = React.useState<{ top: number; left: number }>({ top: 0, left: 0 });
+
+  const triggerRef = React.useRef<HTMLDivElement>(null);
+  const popoverRef = React.useRef<HTMLDivElement>(null);
+
+  const onMouseEnter = () => setOpen(true);
+  const onClick = () => setOpen(true);
+  const onHandleFocus = () => setOpen(true);
+  const onOutsideEvent = () => setOpen(false);
+
+  React.useEffect(() => {
+    if (!open || !triggerRef.current || !popoverRef.current) return;
+
+    const updatePosition = () => {
+      const { placement, position } = Position.calculate(triggerRef.current!, popoverRef.current!);
+      setPlacement(placement);
+      setPosition(position);
+    };
+
+    updatePosition();
+
+    const handleResizeOrScroll = () => updatePosition();
+
+    const mutationObserver = new MutationObserver(() => updatePosition());
+    mutationObserver.observe(document.body, { attributes: true, childList: true, subtree: true });
+
+    window.addEventListener('resize', handleResizeOrScroll);
+    window.addEventListener('scroll', handleResizeOrScroll, true);
+
+    return () => {
+      window.removeEventListener('resize', handleResizeOrScroll);
+      window.removeEventListener('scroll', handleResizeOrScroll, true);
+      mutationObserver.disconnect();
+    };
+  }, [open]);
+
+  const renderComponent = () => {
+    if (component === 'popover') {
+      return (
+        <Popover
+          ref={popoverRef}
+          style={{
+            position: 'absolute',
+            top: `${position.top}px`,
+            left: `${position.left}px`,
+            zIndex: `var(--z-index-page-popover)`,
+          }}
+          role="dialog"
+          aria-modal="true"
+        >
+          {text}
+        </Popover>
+      );
+    } else if (component === 'tooltip') {
+      return (
+        <Tooltip
+          ref={popoverRef}
+          style={{
+            position: 'absolute',
+            top: `${position.top}px`,
+            left: `${position.left}px`,
+            zIndex: `var(--z-index-page-tooltip)`,
+          }}
+        >
+          {text}
+        </Tooltip>
+      );
+    }
+    return null;
+  };
+
+  const popoverElement = open ? createPortal(<OutsideElementEvent onOutsideEvent={onOutsideEvent}>{renderComponent()}</OutsideElementEvent>, document.body) : null;
+
+  return (
+    <div ref={triggerRef} className={styles.root} data-detector-ignore onMouseEnter={onMouseEnter} onClick={onClick} onFocus={onHandleFocus}>
+      {React.cloneElement(children, {
+        tabIndex: 0,
+      })}
+      {popoverElement}
+    </div>
+  );
+}
+
+export default HoverComponentTrigger;
+
+================
+File: reference/components/Indent.module.scss
+================
+.root {
+  display: block;
+  padding: 0 0 0 1ch;
+}
+
+================
+File: reference/components/Indent.tsx
+================
+import styles from '@components/Indent.module.scss';
+
+import * as React from 'react';
+
+interface IndentProps extends React.HTMLAttributes<HTMLDivElement> {
+  children?: React.ReactNode;
+}
+
+const Indent: React.FC<IndentProps> = ({ children, ...rest }) => {
+  return (
+    <div className={styles.root} {...rest}>
+      {children}
+    </div>
+  );
+};
+
+export default Indent;
+
+================
+File: reference/components/Input.module.scss
+================
+.root {
+  position: relative;
+  display: block;
+}
+
+.label {
+  background: var(--theme-border);
+  display: block;
+}
+
+.placeholder {
+  font-style: italic;
+  color: var(--theme-overlay);
+}
+
+.displayed {
+  overflow: hidden;
+  white-space: nowrap;
+  pointer-events: none;
+  overflow-wrap: anywhere;
+  background: var(--theme-background-input);
+  box-shadow: inset 0 0 0 2px var(--theme-border);
+}
+
+.focused {
+  .block {
+    background: var(--theme-focused-foreground);
+  }
+
+  .placeholder {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+@keyframes blink {
+  50% {
+    opacity: 0;
+  }
+}
+
+.blink {
+  animation: blink 1s step-start 0s infinite;
+}
+
+.block {
+  display: inline-block;
+  min-width: 1ch;
+  background: var(--theme-text);
+  color: var(--theme-background);
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  vertical-align: bottom;
+}
+
+.inputContainer {
+  position: relative;
+  display: block;
+}
+
+.hidden {
+  position: absolute;
+  top: 0;
+  left: 0;
+  width: 100%;
+  color: transparent;
+  background: transparent;
+  caret-color: transparent;
+  border: none;
+  outline: none;
+  overflow: hidden;
+  padding: 0;
+  margin: 0;
+  line-height: var(--theme-line-height-base);
+  font-size: var(--font-size);
+  font-family: inherit;
+
+  &:-webkit-autofill {
+    -webkit-box-shadow: 0 0 0px 1000px var(--theme-focused-foreground) inset;
+  }
+}
+
+================
+File: reference/components/Input.tsx
+================
+'use client';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import styles from '@components/Input.module.scss';
+
+type InputProps = React.InputHTMLAttributes<HTMLInputElement> & {
+  caretChars?: string | any;
+  label?: string | any;
+  isBlink?: boolean;
+};
+
+function Input({ caretChars, isBlink = true, label, placeholder, onChange, type, id, ...rest }: InputProps) {
+  const generatedId = React.useId();
+  const inputId = id || generatedId;
+
+  const inputRef = React.useRef<HTMLInputElement | null>(null);
+  const [text, setText] = React.useState<string>(rest.defaultValue?.toString() || rest.value?.toString() || '');
+  const [isFocused, setIsFocused] = React.useState<boolean>(false);
+  const [selectionStart, setSelectionStart] = React.useState<number>(text.length);
+
+  const lastFocusDirectionRef = React.useRef<'up' | 'down' | null>(null);
+
+  React.useEffect(() => {
+    if (rest.value !== undefined) {
+      const val = rest.value.toString();
+      setText(val);
+      setSelectionStart(val.length);
+    }
+  }, [rest.value]);
+
+  const onHandleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
+    const value = e.target.value;
+    setText(value);
+    if (onChange) {
+      onChange(e);
+    }
+    setSelectionStart(e.target.selectionStart ?? value.length);
+  };
+
+  const onHandleFocus = () => {
+    setIsFocused(true);
+    if (!inputRef.current) return;
+
+    if (lastFocusDirectionRef.current === 'down') {
+      setSelectionStart(text.length);
+      inputRef.current.setSelectionRange(text.length, text.length);
+    } else if (lastFocusDirectionRef.current === 'up') {
+      setSelectionStart(0);
+      inputRef.current.setSelectionRange(0, 0);
+    }
+  };
+
+  const onHandleBlur = () => {
+    setIsFocused(false);
+  };
+
+  const onHandleSelect = (e: React.SyntheticEvent<HTMLInputElement>) => {
+    const inputEl = e.currentTarget as HTMLInputElement;
+    setSelectionStart(inputEl.selectionStart ?? text.length);
+  };
+
+  const onHandleClick = (e: React.MouseEvent<HTMLInputElement>) => {
+    const inputEl = e.currentTarget as HTMLInputElement;
+    inputEl.focus();
+    setSelectionStart(inputEl.selectionStart ?? text.length);
+  };
+
+  const onHandleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
+    if (e.key === 'ArrowUp') {
+      e.preventDefault();
+      lastFocusDirectionRef.current = 'up';
+      const previousFocusable = Utilities.findNextFocusable(document.activeElement, 'previous');
+      previousFocusable?.focus();
+    } else if (e.key === 'ArrowDown') {
+      e.preventDefault();
+      lastFocusDirectionRef.current = 'down';
+      const nextFocusable = Utilities.findNextFocusable(document.activeElement, 'next');
+      nextFocusable?.focus();
+    }
+  };
+
+  const isPlaceholderVisible = !text && placeholder;
+  const containerClasses = Utilities.classNames(styles.root, isFocused && styles.focused);
+
+  const maskText = (t: string) => (type === 'password' ? '•'.repeat(t.length) : t);
+
+  const beforeCaretText = isPlaceholderVisible ? placeholder ?? '' : maskText(text.substring(0, selectionStart));
+  const afterCaretText = isPlaceholderVisible ? '' : maskText(text.substring(selectionStart));
+
+  return (
+    <div className={containerClasses}>
+      {label && (
+        <label htmlFor={inputId} className={styles.label}>
+          {label}
+        </label>
+      )}
+      <div className={styles.inputContainer}>
+        <div className={Utilities.classNames(styles.displayed, isPlaceholderVisible && styles.placeholder)}>
+          {beforeCaretText}
+          {!isPlaceholderVisible && <span className={Utilities.classNames(styles.block, isBlink && styles.blink)}>{caretChars || ''}</span>}
+          {!isPlaceholderVisible && afterCaretText}
+        </div>
+        <input id={inputId} ref={inputRef} className={styles.hidden} value={text} aria-placeholder={placeholder} type={type} onFocus={onHandleFocus} onBlur={onHandleBlur} onChange={onHandleChange} onSelect={onHandleSelect} onClick={onHandleClick} onKeyDown={onHandleKeyDown} {...rest} />
+      </div>
+    </div>
+  );
+}
+
+export default Input;
+
+================
+File: reference/components/ListItem.module.scss
+================
+.root {
+  padding-left: 1ch;
+
+  &:focus {
+    outline: 0;
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/ListItem.tsx
+================
+'use client';
+
+import styles from '@components/ListItem.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+const ListItem = ({ children }) => {
+  const itemRef = React.useRef<HTMLLIElement>(null);
+
+  const handleKeyDown = (event: React.KeyboardEvent<HTMLLIElement>) => {
+    switch (event.key) {
+      case 'Enter':
+        event.preventDefault();
+        itemRef.current?.click();
+        break;
+      case 'ArrowUp':
+      case 'ArrowLeft': {
+        event.preventDefault();
+        const previousFocusable = Utilities.findNextFocusable(document.activeElement, 'previous');
+        previousFocusable?.focus();
+        break;
+      }
+      case 'ArrowDown':
+      case 'ArrowRight': {
+        event.preventDefault();
+        const nextFocusable = Utilities.findNextFocusable(document.activeElement, 'next');
+        nextFocusable?.focus();
+        break;
+      }
+      default:
+        break;
+    }
+  };
+
+  return (
+    <li className={styles.root} tabIndex={0} ref={itemRef} onKeyDown={handleKeyDown}>
+      {children}
+    </li>
+  );
+};
+
+export default ListItem;
+
+================
+File: reference/components/MatrixLoader.module.scss
+================
+.container {
+  width: 100%;
+  height: auto;
+  position: relative;
+}
+
+.root {
+  display: block;
+  width: 100%;
+  background: transparent;
+}
+
+================
+File: reference/components/MatrixLoader.tsx
+================
+'use client';
+
+import styles from '@components/MatrixLoader.module.scss';
+
+import * as React from 'react';
+
+interface MatrixLoaderProps {
+  rows?: number;
+  direction?: undefined | 'top-to-bottom' | 'left-to-right';
+  mode?: undefined | 'greek' | 'katakana';
+}
+
+// TODO(jimmylee)
+// Move these constants into a separate file
+// Dynamically compute these constants since we're going to
+// Support t-shirt sizes for the system.
+const LINE_HEIGHT = 20;
+const CHARACTER_WIDTH = 9.6;
+
+function onTextGeneration({ mode = 'greek' }) {
+  if (mode === 'greek') {
+    const isUppercase = Math.random() < 0.5;
+
+    return String.fromCharCode(isUppercase ? 0x0391 + Math.floor(Math.random() * (0x03a9 - 0x0391 + 1)) : 0x03b1 + Math.floor(Math.random() * (0x03c9 - 0x03b1 + 1)));
+  }
+
+  if (mode === 'katakana') {
+    const japaneseRanges = [{ start: 0x30a0, end: 0x30ff }];
+
+    const allJapaneseCharacters = japaneseRanges.flatMap((range) => Array.from({ length: range.end - range.start + 1 }, (_, i) => range.start + i));
+
+    const randomJapaneseCharacter = allJapaneseCharacters[Math.floor(Math.random() * allJapaneseCharacters.length)];
+    return String.fromCharCode(randomJapaneseCharacter);
+  }
+
+  return '0';
+}
+
+const MatrixLoader: React.FC<MatrixLoaderProps> = ({ rows = 25, direction = 'top-to-bottom', mode = 'greek' }) => {
+  const canvasRef = React.useRef<HTMLCanvasElement>(null);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const parent = canvas.parentElement;
+    if (!parent) return;
+
+    const resizeCanvas = () => {
+      const parentWidth = parent.clientWidth;
+      const parentHeight = rows * LINE_HEIGHT;
+
+      const dpr = window.devicePixelRatio || 1;
+
+      canvas.style.width = parentWidth + 'px';
+      canvas.style.height = parentHeight + 'px';
+      canvas.width = Math.floor(parentWidth * dpr);
+      canvas.height = Math.floor(parentHeight * dpr);
+
+      const ctx = canvas.getContext('2d');
+      if (ctx) {
+        ctx.scale(dpr, dpr);
+      }
+    };
+
+    resizeCanvas();
+
+    window.addEventListener('resize', resizeCanvas);
+
+    return () => {
+      window.removeEventListener('resize', resizeCanvas);
+    };
+  }, [rows]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+    const ctx = canvas.getContext('2d');
+    if (!ctx) return;
+
+    let interval: number;
+
+    const drawMatrix = () => {
+      const w = canvas.width;
+      const h = canvas.height;
+
+      if (direction === 'top-to-bottom') {
+        const cols = Math.floor(w / CHARACTER_WIDTH);
+        const ypos: number[] = Array(cols).fill(0);
+
+        const matrix = () => {
+          const themeTextColor = getComputedStyle(document.body).getPropertyValue('--theme-text').trim();
+          const fontFamily = getComputedStyle(document.body).getPropertyValue('--font-family-mono').trim();
+
+          ctx.globalCompositeOperation = 'destination-out';
+          ctx.fillStyle = 'rgba(255, 255, 255, 0.05)';
+          ctx.fillRect(0, 0, w, h);
+          ctx.textBaseline = 'top';
+          ctx.font = `16px ${fontFamily}`;
+
+          ctx.globalCompositeOperation = 'source-over';
+
+          ypos.forEach((y, ind) => {
+            const text = onTextGeneration({ mode });
+            const x = ind * CHARACTER_WIDTH;
+
+            ctx.fillStyle = themeTextColor;
+            ctx.fillText(text, x, y);
+
+            if (y > h + Math.random() * 10000) {
+              ypos[ind] = 0;
+            } else {
+              ypos[ind] = y + LINE_HEIGHT;
+            }
+          });
+        };
+
+        interval = window.setInterval(matrix, 50);
+      } else if (direction === 'left-to-right') {
+        const totalRows = rows; // Use rows directly for total rows
+        const xpos: number[] = Array(totalRows).fill(0);
+
+        const matrix = () => {
+          const themeTextColor = getComputedStyle(document.body).getPropertyValue('--theme-text').trim();
+          const fontFamily = getComputedStyle(document.body).getPropertyValue('--font-family-mono').trim();
+
+          ctx.globalCompositeOperation = 'destination-out';
+          ctx.fillStyle = 'rgba(255, 255, 255, 0.05)';
+          ctx.fillRect(0, 0, w, h);
+          ctx.textBaseline = 'top';
+          ctx.font = `16px ${fontFamily}`;
+
+          ctx.globalCompositeOperation = 'source-over';
+
+          xpos.forEach((x, ind) => {
+            const text = onTextGeneration({ mode });
+            const y = ind * LINE_HEIGHT;
+
+            ctx.fillStyle = themeTextColor;
+            ctx.fillText(text, x, y);
+
+            if (x > w + Math.random() * 10000) {
+              xpos[ind] = 0;
+            } else {
+              xpos[ind] = x + CHARACTER_WIDTH;
+            }
+          });
+        };
+
+        interval = window.setInterval(matrix, 50);
+      }
+    };
+
+    drawMatrix();
+
+    return () => {
+      window.clearInterval(interval);
+    };
+  }, [rows, direction, mode]);
+
+  return (
+    <div className={styles.container}>
+      <canvas className={styles.root} ref={canvasRef} />
+    </div>
+  );
+};
+
+export default MatrixLoader;
+
+================
+File: reference/components/Message.module.scss
+================
+.message {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+  margin-bottom: calc(var(--font-size) * var(--theme-line-height-base));
+
+  &:last-child {
+    margin-bottom: 0px;
+  }
+}
+
+.left {
+  align-self: stretch;
+  flex-shrink: 0;
+  display: flex;
+  align-items: flex-end;
+  position: relative;
+}
+
+.triangle {
+  display: inline-block;
+  width: 0;
+  height: 0;
+  border-top: calc((var(--font-size) * var(--theme-line-height-base)) / 2) solid transparent;
+  border-bottom: calc((var(--font-size) * var(--theme-line-height-base)) / 2) solid transparent;
+  border-right: 1ch solid var(--theme-border);
+  margin-bottom: calc((var(--font-size) * var(--theme-line-height-base)) / 2);
+}
+
+.right {
+  min-width: 10%;
+  width: 100%;
+  text-align: left;
+}
+
+.bubble {
+  padding: calc(8px * var(--theme-line-height-base)) 1ch calc(8px * var(--theme-line-height-base)) 1ch;
+  background: var(--theme-border);
+  display: inline-block;
+  box-shadow: 1ch 1ch 0 0 var(--theme-border-subdued);
+}
+
+================
+File: reference/components/Message.tsx
+================
+import styles from '@components/Message.module.scss';
+
+export default function Message(props) {
+  return (
+    <div className={styles.message}>
+      <div className={styles.left}>
+        <figure className={styles.triangle} />
+      </div>
+      <div className={styles.right}>
+        <div className={styles.bubble}>{props.children}</div>
+      </div>
+    </div>
+  );
+}
+
+================
+File: reference/components/MessageViewer.module.scss
+================
+.message {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+  margin-bottom: calc(var(--font-size) * var(--theme-line-height-base));
+}
+
+.bubble {
+  display: inline-block;
+  background: var(--theme-focused-foreground);
+  padding: calc(8px * var(--theme-line-height-base)) 1ch calc(8px * var(--theme-line-height-base)) 1ch;
+}
+
+.left {
+  min-width: 10%;
+  width: 100%;
+  text-align: right;
+}
+
+.right {
+  align-self: stretch;
+  flex-shrink: 0;
+  display: flex;
+  align-items: flex-end;
+}
+
+.triangle {
+  display: inline-block;
+  width: 0;
+  height: 0;
+  border-top: calc((var(--font-size) * var(--theme-line-height-base)) / 2) solid transparent;
+  border-bottom: calc((var(--font-size) * var(--theme-line-height-base)) / 2) solid transparent;
+  border-left: 1ch solid var(--theme-focused-foreground);
+  margin-bottom: calc((var(--font-size) * var(--theme-line-height-base)) / 2);
+}
+
+================
+File: reference/components/MessageViewer.tsx
+================
+import styles from '@components/MessageViewer.module.scss';
+
+export default function MessageViewer(props) {
+  return (
+    <div className={styles.message}>
+      <div className={styles.left}>
+        <div className={styles.bubble}>{props.children}</div>
+      </div>
+      <div className={styles.right}>
+        <figure className={styles.triangle} />
+      </div>
+    </div>
+  );
+}
+
+================
+File: reference/components/ModalStack.module.scss
+================
+.root {
+  align-items: center;
+  bottom: 0;
+  display: flex;
+  justify-content: center;
+  left: 0;
+  pointer-events: none;
+  position: fixed;
+  right: 0;
+  top: 0;
+  z-index: var(--z-index-page-modals);
+}
+
+.item {
+  pointer-events: auto;
+  position: absolute;
+  transition:
+    opacity 0.2s ease,
+    transform 0.4s ease;
+}
+
+================
+File: reference/components/ModalStack.tsx
+================
+'use client';
+
+import styles from '@components/ModalStack.module.scss';
+
+import * as React from 'react';
+
+import { useModals } from '@components/page/ModalContext';
+
+interface ModalStackProps {}
+
+const ModalStack: React.FC<ModalStackProps> = () => {
+  const { modalStack } = useModals();
+
+  const totalModals = modalStack.length;
+
+  return (
+    <div className={styles.root}>
+      {modalStack.map((modalState, index) => {
+        const { key, component: ModalComponent, props } = modalState;
+
+        const offsetFromLast = totalModals - 1 - index;
+        const translateY = -offsetFromLast * 40;
+        const blur = offsetFromLast * 1.1;
+
+        return (
+          <div
+            key={key}
+            className={styles.item}
+            style={{
+              zIndex: 10 + index,
+              transform: `translateY(${translateY}px)`,
+              filter: `blur(${blur}px)`,
+            }}
+          >
+            <ModalComponent {...props} />
+          </div>
+        );
+      })}
+    </div>
+  );
+};
+
+export default ModalStack;
+
+================
+File: reference/components/ModalTrigger.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+import { useModals } from '@components/page/ModalContext';
+
+interface ModalTriggerProps {
+  children: React.ReactElement<{ onClick?: React.MouseEventHandler }>;
+  modal: React.ComponentType<any>;
+  modalProps?: Record<string, any>;
+}
+
+function ModalTrigger({ children, modal, modalProps = {} }: ModalTriggerProps) {
+  const { open } = useModals();
+
+  const onHandleOpenModal = () => {
+    open(modal, modalProps);
+  };
+
+  return React.cloneElement(children, {
+    onClick: onHandleOpenModal,
+  });
+}
+
+export default ModalTrigger;
+
+================
+File: reference/components/Navigation.module.scss
+================
+.root {
+  display: flex;
+  align-items: center;
+  justify-content: space-between;
+  background: var(--theme-border);
+}
+
+.logo {
+  flex-shrink: 0;
+  padding: 0 1ch 0 1ch;
+  display: inline-flex;
+  color: var(--theme-text);
+  background: var(--theme-border);
+  text-decoration: none;
+  border: 0;
+  outline: 0;
+  border-radius: 0;
+  margin: 0;
+  font-size: var(--font-size);
+
+  &:visited {
+    color: var(--theme-text);
+  }
+
+  &:hover {
+    color: var(--theme-text);
+    background: var(--theme-focused-foreground);
+  }
+
+  &:focus {
+    outline: 0;
+    border: 0;
+    margin: 0;
+    padding: 0 1ch 0 1ch;
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.left {
+  flex-shrink: 0;
+}
+
+.children {
+  min-width: 10%;
+  width: 100%;
+}
+
+.right {
+  flex-shrink: 0;
+}
+
+================
+File: reference/components/Navigation.tsx
+================
+'use client';
+
+import styles from '@components/Navigation.module.scss';
+
+import * as React from 'react';
+
+interface NavigationProps extends React.HTMLAttributes<HTMLElement> {
+  children?: React.ReactNode;
+  logoHref?: string;
+  logoTarget?: React.HTMLAttributeAnchorTarget;
+  onClickLogo?: React.MouseEventHandler<HTMLButtonElement>;
+  logo?: React.ReactNode;
+  left?: React.ReactNode;
+  right?: React.ReactNode;
+}
+
+const Navigation: React.FC<NavigationProps> = ({ children, logoHref, logoTarget, onClickLogo, logo, left, right }) => {
+  let logoElement = <button className={styles.logo}>{logo}</button>;
+
+  if (onClickLogo) {
+    logoElement = (
+      <button className={styles.logo} onClick={onClickLogo}>
+        {logo}
+      </button>
+    );
+  }
+
+  if (logoHref) {
+    logoElement = (
+      <a href={logoHref} className={styles.logo} target={logoTarget}>
+        {logo}
+      </a>
+    );
+  }
+
+  return (
+    <nav className={styles.root}>
+      {logoElement}
+      <section className={styles.left}>{left}</section>
+      <section className={styles.children}>{children}</section>
+      <section className={styles.right}>{right}</section>
+    </nav>
+  );
+};
+
+export default Navigation;
+
+================
+File: reference/components/NumberRangeSlider.module.scss
+================
+.root {
+  display: flex;
+  align-items: center;
+  justify-content: space-between;
+}
+
+.amount {
+  flex-shrink: 0;
+  background: var(--theme-text);
+  color: var(--theme-background);
+  font-weight: 400;
+  padding: 0 1ch 0 1ch;
+}
+
+.slider {
+  border-radius: 0;
+  display: block;
+  margin: 0;
+  padding: 0;
+  width: 100%;
+  min-width: 10%;
+
+  -webkit-appearance: none;
+  -moz-appearance: none;
+  appearance: none;
+
+  background: var(--theme-border-subdued);
+
+  &:focus {
+    background: linear-gradient(to right, transparent, var(--theme-focused-foreground));
+    outline: none;
+  }
+
+  &:hover {
+    background: linear-gradient(to right, transparent, var(--theme-focused-foreground));
+    cursor: pointer;
+  }
+
+  &::-webkit-slider-thumb {
+    -webkit-appearance: none;
+    appearance: none;
+    font-size: var(--font-size);
+    width: 1ch;
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: var(--theme-button-foreground);
+    vertical-align: bottom;
+    cursor: pointer;
+    border-radius: 0;
+  }
+
+  /* Customizing the track */
+  &::-webkit-slider-runnable-track {
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: var(--theme-border-subdued);
+    border-radius: 0;
+  }
+
+  &::-moz-range-thumb {
+    -moz-appearance: none;
+    appearance: none;
+    font-size: var(--font-size);
+    width: 1ch;
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: var(--theme-button-foreground);
+    vertical-align: bottom;
+    cursor: pointer;
+    border: none;
+    border-radius: 0;
+  }
+
+  &::-moz-range-track {
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: var(--theme-border-subdued);
+    border-radius: 0;
+  }
+
+  &::-ms-thumb {
+    appearance: none;
+    font-size: var(--font-size);
+    width: 1ch;
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: var(--theme-button-foreground);
+    vertical-align: bottom;
+    cursor: pointer;
+    border: none;
+    border-radius: 0;
+  }
+
+  &::-ms-track {
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: transparent;
+    border-color: transparent;
+    color: transparent;
+  }
+
+  &::-ms-fill-lower {
+    background: var(--theme-border-subdued);
+  }
+
+  &::-ms-fill-upper {
+    background: var(--theme-border-subdued);
+  }
+}
+
+================
+File: reference/components/NumberRangeSlider.tsx
+================
+'use client';
+
+import styles from '@components/NumberRangeSlider.module.scss';
+
+import * as React from 'react';
+
+interface RangerProps {
+  defaultValue?: number;
+  max?: number;
+  min?: number;
+  step?: number;
+}
+
+const NumberRangeSlider: React.FC<RangerProps> = ({ defaultValue = 0, max = 5000, min = 0, step = 1 }) => {
+  const sliderRef = React.useRef<HTMLInputElement>(null);
+  const [displayValue, setDisplayValue] = React.useState<number>(defaultValue);
+
+  const maxDigits = max.toString().length;
+
+  const padValue = (value: number): string => {
+    return value.toString().padStart(maxDigits, '0');
+  };
+
+  React.useEffect(() => {
+    if (sliderRef.current) {
+      sliderRef.current.value = String(defaultValue);
+    }
+    setDisplayValue(defaultValue);
+  }, [defaultValue]);
+
+  const scrub = (event: React.ChangeEvent<HTMLInputElement>): void => {
+    const value = parseInt(event.target.value, 10);
+    setDisplayValue(value);
+  };
+
+  return (
+    <div className={styles.root}>
+      <label className={styles.left}>
+        <div className={styles.amount}>{padValue(displayValue)}</div>
+      </label>
+      <input className={styles.slider} defaultValue={defaultValue} max={max} min={min} onChange={scrub} ref={sliderRef} role="slider" step={step} tabIndex={0} type="range" />
+    </div>
+  );
+};
+
+export default NumberRangeSlider;
+
+================
+File: reference/components/Popover.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  font-weight: 400;
+}
+
+================
+File: reference/components/Popover.tsx
+================
+import styles from '@components/Popover.module.scss';
+
+import * as React from 'react';
+
+interface PopoverProps extends React.HTMLAttributes<HTMLDivElement> {}
+
+const Popover = React.forwardRef<HTMLDivElement, PopoverProps>(({ style: propStyle, ...rest }, ref) => {
+  const style: React.CSSProperties = { ...propStyle };
+
+  return <div ref={ref} className={styles.root} {...rest} style={style} />;
+});
+
+Popover.displayName = 'Popover';
+
+export default Popover;
+
+================
+File: reference/components/Providers.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+import { ModalProvider } from '@components/page/ModalContext';
+
+interface ProvidersProps {
+  children: React.ReactNode;
+}
+
+const Providers: React.FC<ProvidersProps> = ({ children }) => {
+  return <ModalProvider>{children}</ModalProvider>;
+};
+
+export default Providers;
+
+================
+File: reference/components/RadioButton.module.scss
+================
+.section {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+  position: relative;
+
+  .right {
+    padding-bottom: calc(8px * var(--theme-line-height-base));
+    box-shadow: inset 0 1px 0 0 var(--theme-border-subdued);
+  }
+
+  &:last-child {
+    .right {
+      padding-bottom: 0;
+    }
+  }
+}
+
+.figure {
+  display: inline-flex;
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  cursor: pointer;
+  color: var(--theme-text);
+  background: var(--theme-button-foreground);
+  width: 3ch;
+  align-items: center;
+  justify-content: center;
+}
+
+.selected {
+  .figure {
+    background: var(--theme-text);
+  }
+}
+
+.dot {
+  display: inline-block;
+  width: 1ch;
+  height: 1ch;
+  background: var(--theme-background);
+  transform: rotate(45deg);
+  vertical-align: middle;
+}
+
+.focused {
+  .figure {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.relative {
+  flex-shrink: 0;
+  display: inline-block;
+  vertical-align: baseline;
+}
+
+.right {
+  background: var(--theme-button-background);
+  min-width: 10%;
+  width: 100%;
+  align-self: stretch;
+}
+
+.input {
+  position: absolute;
+  height: 1px;
+  width: 1px;
+  opacity: 0;
+  background: transparent;
+  border: 0;
+  outline: 0;
+  margin: 0;
+  padding: 0;
+}
+
+================
+File: reference/components/RadioButton.tsx
+================
+import styles from '@components/RadioButton.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface RadioButtonProps {
+  style?: React.CSSProperties;
+  name: string;
+  value: string;
+  selected?: boolean;
+  onSelect?: (value: string) => void;
+  children?: React.ReactNode;
+}
+
+const RadioButton: React.FC<RadioButtonProps> = ({ style, name, value, selected = false, onSelect, children }) => {
+  const radioId = `${name}-${value}-radio`;
+  const [isFocused, setIsFocused] = React.useState(false);
+
+  const handleFocus = () => setIsFocused(true);
+  const handleBlur = () => setIsFocused(false);
+
+  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
+    switch (event.key) {
+      case 'Enter':
+        event.preventDefault();
+        onSelect?.(value);
+        break;
+      case 'ArrowUp':
+      case 'ArrowLeft':
+        event.preventDefault();
+        Utilities.findNextFocusable(document.activeElement, 'previous')?.focus();
+        break;
+      case 'Tab':
+      case 'ArrowDown':
+      case 'ArrowRight':
+        event.preventDefault();
+        Utilities.findNextFocusable(document.activeElement, 'next')?.focus();
+        break;
+      default:
+        break;
+    }
+  };
+
+  const handleChange = () => {
+    onSelect?.(value);
+  };
+
+  return (
+    <div
+      className={Utilities.classNames(styles.section, {
+        [styles.focused]: isFocused,
+        [styles.selected]: selected,
+      })}
+      style={style}
+    >
+      <input className={styles.input} id={radioId} type="radio" name={name} value={value} checked={selected} onFocus={handleFocus} onBlur={handleBlur} onKeyDown={handleKeyDown} onChange={handleChange} />
+      <div className={styles.relative}>
+        <label className={styles.figure} htmlFor={radioId}>
+          {selected ? <span aria-hidden="true" className={styles.dot} /> : null}
+        </label>
+      </div>
+      <div className={styles.right}>&nbsp;&nbsp;{children}</div>
+    </div>
+  );
+};
+
+export default RadioButton;
+
+================
+File: reference/components/RadioButtonGroup.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+import RadioButton from '@components/RadioButton';
+
+interface RadioButtonGroupProps {
+  options: { value: string; label: string }[];
+  defaultValue?: string;
+}
+
+const RadioButtonGroup: React.FC<RadioButtonGroupProps> = ({ options, defaultValue = '' }) => {
+  const [selectedValue, setSelectedValue] = React.useState<string>(defaultValue);
+
+  const handleSelect = (value: string) => {
+    setSelectedValue(value);
+  };
+
+  return (
+    <>
+      {options.map((option) => (
+        <RadioButton key={option.value} name="example" value={option.value} selected={selectedValue === option.value} onSelect={handleSelect}>
+          {option.label}
+        </RadioButton>
+      ))}
+    </>
+  );
+};
+
+export default RadioButtonGroup;
+
+================
+File: reference/components/Row.module.scss
+================
+.row {
+  display: block;
+  outline: 0;
+  border: 0;
+  transition: 200ms ease background;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/Row.tsx
+================
+'use client';
+
+import styles from '@components/Row.module.scss';
+
+import * as React from 'react';
+
+type RowProps = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const Row = React.forwardRef<HTMLElement, RowProps>(({ children, ...rest }, ref) => {
+  return (
+    <section className={styles.row} ref={ref} {...rest}>
+      {children}
+    </section>
+  );
+});
+
+Row.displayName = 'Row';
+
+export default Row;
+
+================
+File: reference/components/RowEllipsis.module.scss
+================
+.row {
+  display: block;
+  outline: 0;
+  border: 0;
+  transition: 200ms ease background;
+  white-space: nowrap;
+  overflow: hidden;
+  text-overflow: ellipsis;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/RowEllipsis.tsx
+================
+'use client';
+
+import styles from '@components/RowEllipsis.module.scss';
+
+import * as React from 'react';
+
+type RowEllipsisProps = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const RowEllipsis = React.forwardRef<HTMLElement, RowEllipsisProps>(({ children, ...rest }, ref) => {
+  return (
+    <section className={styles.row} ref={ref} {...rest}>
+      {children}
+    </section>
+  );
+});
+
+RowEllipsis.displayName = 'RowEllipsis';
+
+export default RowEllipsis;
+
+================
+File: reference/components/RowSpaceBetween.module.scss
+================
+.row {
+  display: flex;
+  justify-content: space-between;
+  outline: 0;
+  border: 0;
+  transition: 200ms ease background;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/RowSpaceBetween.tsx
+================
+'use client';
+
+import styles from '@components/RowSpaceBetween.module.scss';
+
+import * as React from 'react';
+
+type RowSpaceBetweenProps = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const RowSpaceBetween = React.forwardRef<HTMLElement, RowSpaceBetweenProps>(({ children, ...rest }, ref) => {
+  return (
+    <section className={styles.row} ref={ref} {...rest}>
+      {children}
+    </section>
+  );
+});
+
+RowSpaceBetween.displayName = 'RowSpaceBetween';
+
+export default RowSpaceBetween;
+
+================
+File: reference/components/Select.module.scss
+================
+.select {
+  align-items: flex-start;
+  cursor: default;
+  display: flex;
+  justify-content: space-between;
+  outline: none;
+  position: relative;
+  z-index: var(--z-index-page-select);
+}
+
+.control {
+  align-self: stretch;
+  background: var(--theme-button-foreground);
+  cursor: pointer;
+  flex-shrink: 0;
+  padding: 0 1ch 0 1ch;
+
+  &.focused {
+    background: var(--theme-text);
+    color: var(--theme-background);
+  }
+}
+
+.display {
+  background: var(--theme-border);
+  border: 0;
+  color: var(--theme-text);
+  cursor: pointer;
+  font-family: var(--font-family-mono);
+  font-size: var(--font-size);
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+  margin: 0;
+  min-width: 10%;
+  outline: 0;
+  padding: 0;
+  padding-left: 3ch;
+  text-align: left;
+  user-select: none;
+  width: 100%;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    border: 0;
+    outline: 0;
+  }
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.menu {
+  background-color: var(--theme-border-subdued);
+  left: 3ch;
+  list-style-type: none;
+  padding: 0;
+  right: 0;
+  z-index: var(--z-index-page-select);
+}
+
+.item {
+  border: 0;
+  cursor: pointer;
+  outline: 0;
+  padding-left: 6ch;
+  user-select: none;
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    border: 0;
+    outline: 0;
+  }
+}
+
+================
+File: reference/components/Select.tsx
+================
+'use client';
+
+import styles from '@components/Select.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface SelectProps {
+  name: string;
+  options: string[];
+  placeholder?: string;
+  defaultValue?: string;
+  onChange?: (selectedValue: string) => void;
+}
+
+const Select: React.FC<SelectProps> = ({ name, options, placeholder, defaultValue = '', onChange }) => {
+  const [isOpen, setIsOpen] = React.useState(false);
+  const [index, setIndex] = React.useState(-1);
+  const [selectedValue, setSelectedValue] = React.useState(defaultValue);
+
+  const containerRef = React.useRef<HTMLButtonElement | null>(null);
+
+  const handleOpen = () => {
+    setIsOpen(true);
+    const currentIndex = options.indexOf(selectedValue);
+    setIndex(currentIndex >= 0 ? currentIndex : 0);
+  };
+
+  const handleClose = () => {
+    setIsOpen(false);
+    setIndex(-1);
+
+    if (containerRef && containerRef.current) {
+      containerRef.current?.focus();
+    }
+  };
+
+  const handleSelect = (value: string) => {
+    setSelectedValue(value);
+    onChange?.(value);
+    handleClose();
+  };
+
+  return (
+    <>
+      <section className={styles.select}>
+        <figure
+          className={Utilities.classNames(isOpen ? styles.focused : null, styles.control)}
+          onClick={() => {
+            isOpen ? handleClose() : handleOpen();
+          }}
+        >
+          ▼
+        </figure>
+        <button
+          className={styles.display}
+          ref={containerRef}
+          tabIndex={0}
+          onClick={() => {
+            isOpen ? handleClose() : handleOpen();
+          }}
+          aria-haspopup="listbox"
+          aria-expanded={isOpen}
+        >
+          {selectedValue || placeholder}
+        </button>
+      </section>
+
+      {isOpen && (
+        <ul className={styles.menu} role="listbox">
+          {options.map((option, idx) => {
+            return (
+              <li key={option} role="option" tabIndex={0} className={Utilities.classNames(styles.item)} onClick={() => handleSelect(option)}>
+                {option}
+              </li>
+            );
+          })}
+        </ul>
+      )}
+    </>
+  );
+};
+
+export default Select;
+
+================
+File: reference/components/SidebarLayout.module.scss
+================
+.root {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+  white-space: pre-wrap;
+}
+
+.sidebar {
+  align-self: stretch;
+  flex-shrink: 0;
+  width: 20ch;
+}
+
+.handle {
+  align-self: stretch;
+  flex-shrink: 0;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  width: 3ch;
+  outline: 0;
+  border: 0;
+  cursor: col-resize;
+
+  &:hover {
+    .line {
+      background: var(--theme-focused-foreground);
+    }
+  }
+
+  &:focus {
+    outline: 0;
+    border: 0;
+
+    .line {
+      background: var(--theme-focused-foreground);
+    }
+  }
+}
+
+.line {
+  align-self: stretch;
+  width: 2px;
+  background: var(--theme-text);
+
+  &:first-child {
+    margin-left: 1px;
+    margin-right: 2px;
+  }
+}
+
+.content {
+  min-width: 10%;
+  width: 100%;
+}
+
+================
+File: reference/components/SidebarLayout.tsx
+================
+'use client';
+
+import styles from '@components/SidebarLayout.module.scss';
+import * as React from 'react';
+
+interface SidebarLayoutProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'defaultValue'> {
+  children?: React.ReactNode;
+  sidebar?: React.ReactNode;
+  defaultSidebarWidth?: number;
+  isShowingHandle?: boolean;
+  isReversed?: boolean;
+}
+
+const LINE_HEIGHT = 20;
+const CHARACTER_WIDTH = 9.6;
+
+const SidebarLayout: React.FC<SidebarLayoutProps> = ({ defaultSidebarWidth = 20, children, sidebar, isShowingHandle = false, isReversed = false, ...rest }) => {
+  const [sidebarWidth, setSidebarWidth] = React.useState(defaultSidebarWidth);
+  const handleRef = React.useRef<HTMLDivElement>(null);
+
+  const handleMouseDown = (event: React.MouseEvent<HTMLDivElement>) => {
+    const startX = event.clientX;
+    const startWidth = sidebarWidth;
+
+    const onMouseMove = (moveEvent: MouseEvent) => {
+      const deltaX = moveEvent.clientX - startX;
+      const increment = Math.round(deltaX / CHARACTER_WIDTH);
+      setSidebarWidth(Math.max(CHARACTER_WIDTH, startWidth + increment));
+    };
+
+    const onMouseUp = () => {
+      document.removeEventListener('mousemove', onMouseMove);
+      document.removeEventListener('mouseup', onMouseUp);
+    };
+
+    document.addEventListener('mousemove', onMouseMove);
+    document.addEventListener('mouseup', onMouseUp);
+  };
+
+  if (isReversed) {
+    return (
+      <div className={styles.root} {...rest}>
+        <div className={styles.content}>{children}</div>
+        &nbsp;
+        <div
+          className={styles.sidebar}
+          style={{
+            width: `${sidebarWidth}ch`,
+          }}
+        >
+          {sidebar}
+        </div>
+      </div>
+    );
+  }
+
+  return (
+    <div className={styles.root} {...rest}>
+      <div
+        className={styles.sidebar}
+        style={{
+          width: `${sidebarWidth}ch`,
+        }}
+      >
+        {sidebar}
+      </div>
+      {isShowingHandle ? (
+        <div className={styles.handle} ref={handleRef} role="button" tabIndex={0} onMouseDown={handleMouseDown} style={isShowingHandle ? {} : { width: `0.5ch` }}>
+          <>
+            <div className={styles.line} />
+            <div className={styles.line} />
+          </>
+        </div>
+      ) : null}
+      <div className={styles.content}>{children}</div>
+    </div>
+  );
+};
+
+export default SidebarLayout;
+
+================
+File: reference/components/Table.module.scss
+================
+.root {
+  border: 0;
+  outline: 0;
+  margin: 0;
+  padding: 0;
+  position: relative;
+  width: 100%;
+  border-spacing: 0px;
+  -webkit-text-size-adjust: 100%;
+}
+
+.body {
+}
+
+================
+File: reference/components/Table.tsx
+================
+'use client';
+
+import styles from '@components/Table.module.scss';
+
+import * as React from 'react';
+
+type TableProps = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const Table = ({ children, ...rest }) => {
+  return (
+    <table className={styles.root} {...rest}>
+      <tbody className={styles.body}>{children}</tbody>
+    </table>
+  );
+};
+
+Table.displayName = 'Table';
+
+export default Table;
+
+================
+File: reference/components/TableColumn.module.scss
+================
+.root {
+  border: 0;
+  outline: 0;
+  margin: 0;
+  padding: 0;
+  transition: background-color 0.5s ease;
+  padding-left: 1ch;
+  font-size: var(--font-size);
+  flex-shrink: 0;
+  -webkit-text-size-adjust: 100%;
+
+  &:first-child {
+    padding-left: 0px;
+  }
+}
+
+================
+File: reference/components/TableColumn.tsx
+================
+'use client';
+
+import styles from '@components/TableColumn.module.scss';
+
+import * as React from 'react';
+
+type TableColumnProps = React.HTMLAttributes<HTMLTableCellElement> & {
+  children?: React.ReactNode;
+};
+
+const TableColumn: React.FC<TableColumnProps> = ({ children, ...rest }) => {
+  return (
+    <td className={styles.root} {...rest}>
+      {children}
+    </td>
+  );
+};
+
+TableColumn.displayName = 'TableColumn';
+
+export default TableColumn;
+
+================
+File: reference/components/TableRow.module.scss
+================
+.root {
+  border: 0;
+  outline: 0;
+  margin: 0;
+  padding: 0;
+
+  transition: transform 0.5s ease;
+  border-spacing: 0px;
+  -webkit-text-size-adjust: 100%;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    outline: 0;
+  }
+}
+
+================
+File: reference/components/TableRow.tsx
+================
+'use client';
+
+import styles from '@components/TableRow.module.scss';
+
+import * as React from 'react';
+
+type TableRowProps = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const TableRow = ({ children, ...rest }) => {
+  return (
+    <tr className={styles.root} tabIndex={0} {...rest}>
+      {children}
+    </tr>
+  );
+};
+
+TableRow.displayName = 'TableRow';
+
+export default TableRow;
+
+================
+File: reference/components/Text.module.scss
+================
+.text {
+  white-space: pre-wrap;
+  overflow-wrap: break-word;
+}
+
+================
+File: reference/components/Text.tsx
+================
+import styles from '@components/Text.module.scss';
+
+import * as React from 'react';
+
+interface TextProps extends React.HTMLAttributes<HTMLParagraphElement> {
+  children?: React.ReactNode;
+}
+
+const Text: React.FC<TextProps> = ({ children, ...rest }) => {
+  return (
+    <p className={styles.text} {...rest}>
+      {children}
+    </p>
+  );
+};
+
+export default Text;
+
+================
+File: reference/components/TextArea.module.scss
+================
+.root {
+  position: relative;
+}
+
+.placeholder {
+  opacity: 0.7;
+  font-style: italic;
+}
+
+.displayed {
+  white-space: pre-wrap;
+  word-wrap: break-word;
+  pointer-events: none;
+  overflow-wrap: anywhere;
+}
+
+.hidden {
+  white-space: pre-wrap;
+  word-wrap: break-word;
+  pointer-events: none;
+  overflow-wrap: anywhere;
+  position: absolute;
+  visibility: hidden;
+  width: 100%;
+  overflow: auto;
+}
+
+.focused {
+  .block {
+    background: var(--theme-focused-foreground);
+  }
+
+  .placeholder {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+@keyframes blink {
+  50% {
+    opacity: 0;
+  }
+}
+
+.blink {
+  animation: blink 1s step-start 0s infinite;
+}
+
+.block {
+  display: inline-block;
+  min-width: 1ch;
+  background: var(--theme-text);
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  vertical-align: bottom;
+}
+
+.hiddenElement {
+  position: absolute;
+  top: 0;
+  left: 0;
+  width: 100%;
+  height: 100%;
+  color: transparent;
+  background: transparent;
+  caret-color: transparent;
+  border: none;
+  resize: none;
+  outline: none;
+  overflow: hidden;
+  padding: 0;
+  margin: 0;
+  line-height: var(--theme-line-height-base);
+  font-size: var(--font-size);
+  font-family: inherit;
+}
+
+================
+File: reference/components/TextArea.tsx
+================
+'use client';
+
+import styles from '@components/TextArea.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+type TextAreaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement> & {
+  autoPlay?: string;
+  autoPlaySpeedMS?: number;
+  isBlink?: boolean;
+};
+function TextArea({ autoPlay, autoPlaySpeedMS = 40, isBlink, placeholder, onChange, ...rest }: TextAreaProps) {
+  const textAreaRef = React.useRef<HTMLTextAreaElement | null>(null);
+  const measurementRef = React.useRef<HTMLDivElement | null>(null);
+
+  const [text, setText] = React.useState<string>(rest.defaultValue?.toString() || rest.value?.toString() || '');
+  const [isAutoPlaying, setIsAutoPlaying] = React.useState<boolean>(!!autoPlay);
+  const [isFocused, setIsFocused] = React.useState<boolean>(false);
+  const [selectionStart, setSelectionStart] = React.useState<number>(0);
+
+  const autoPlayIntervalRef = React.useRef<NodeJS.Timeout | null>(null);
+  const autoPlayIndexRef = React.useRef<number>(0);
+
+  const [currentLineIndex, setCurrentLineIndex] = React.useState<number>(0);
+  const [totalLines, setTotalLines] = React.useState<number>(0);
+
+  React.useEffect(() => {
+    if (textAreaRef.current && isFocused) {
+      textAreaRef.current.setSelectionRange(selectionStart, selectionStart);
+    }
+  }, [selectionStart, isFocused]);
+
+  React.useEffect(() => {
+    if (rest.value !== undefined) {
+      const val = rest.value.toString();
+      setText(val);
+      setIsAutoPlaying(false);
+      if (autoPlayIntervalRef.current) {
+        clearInterval(autoPlayIntervalRef.current);
+      }
+      setSelectionStart(val.length);
+    }
+  }, [rest.value]);
+
+  React.useEffect(() => {
+    if (autoPlay && !rest.value && !rest.defaultValue) {
+      setIsAutoPlaying(true);
+      autoPlayIndexRef.current = 0;
+      setText('');
+      if (autoPlayIntervalRef.current) clearInterval(autoPlayIntervalRef.current);
+
+      autoPlayIntervalRef.current = setInterval(() => {
+        autoPlayIndexRef.current++;
+        if (!autoPlay) return;
+        if (autoPlayIndexRef.current > autoPlay.length) {
+          setIsAutoPlaying(false);
+          clearInterval(autoPlayIntervalRef.current!);
+          return;
+        }
+        const newText = autoPlay.slice(0, autoPlayIndexRef.current);
+        setText(newText);
+        setSelectionStart(newText.length);
+      }, autoPlaySpeedMS);
+    }
+
+    return () => {
+      if (autoPlayIntervalRef.current) clearInterval(autoPlayIntervalRef.current);
+    };
+  }, [autoPlay, rest.value, rest.defaultValue]);
+
+  const resizeTextArea = React.useCallback(() => {
+    if (!textAreaRef.current) return;
+    textAreaRef.current.style.height = 'auto';
+    textAreaRef.current.style.height = `${textAreaRef.current.scrollHeight}px`;
+  }, []);
+
+  React.useEffect(() => {
+    resizeTextArea();
+    window.addEventListener('resize', resizeTextArea);
+    return () => window.removeEventListener('resize', resizeTextArea);
+  }, [resizeTextArea]);
+
+  const onHandleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
+    const value = e.target.value;
+    setText(value);
+    setIsAutoPlaying(false);
+    if (autoPlayIntervalRef.current) {
+      clearInterval(autoPlayIntervalRef.current);
+    }
+    resizeTextArea();
+    if (onChange) {
+      onChange(e);
+    }
+    setSelectionStart(e.target.selectionStart ?? 0);
+  };
+
+  const onHandleSelect = (e: React.SyntheticEvent<HTMLTextAreaElement>) => {
+    const textarea = e.currentTarget as HTMLTextAreaElement;
+    setSelectionStart(textarea.selectionStart);
+  };
+
+  const onHandleFocus = () => {
+    setIsFocused(true);
+    if (textAreaRef.current) {
+      setSelectionStart(textAreaRef.current.selectionStart);
+    }
+  };
+
+  const onHandleBlur = () => {
+    setIsFocused(false);
+  };
+
+  const onHandleClick = (e: React.MouseEvent<HTMLTextAreaElement>) => {
+    const textarea = e.currentTarget as HTMLTextAreaElement;
+    textarea.focus();
+    setSelectionStart(textarea.selectionStart);
+  };
+
+  React.useLayoutEffect(() => {
+    if (!measurementRef.current) return;
+
+    const measurementEl = measurementRef.current;
+    const computedStyle = window.getComputedStyle(measurementEl);
+    const lineHeightStr = computedStyle.lineHeight;
+    let lineHeight = 20;
+    if (lineHeightStr.endsWith('px')) {
+      lineHeight = parseFloat(lineHeightStr);
+    }
+
+    const countLines = (content: string) => {
+      measurementEl.textContent = content || '\u00A0';
+      const height = measurementEl.offsetHeight;
+      return Math.round(height / lineHeight);
+    };
+
+    const displayString = text || placeholder || '';
+
+    const textBeforeCaret = text.substring(0, selectionStart);
+    const textAfterCaret = text.substring(selectionStart);
+
+    const total = countLines(displayString);
+    setTotalLines(total > 0 ? total - 1 : 0);
+
+    const currentLines = countLines(textBeforeCaret);
+    setCurrentLineIndex(currentLines > 0 ? currentLines - 1 : 0);
+  }, [text, selectionStart, placeholder]);
+
+  const onHandleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
+    if (e.key === 'ArrowUp' && currentLineIndex === 0) {
+      e.preventDefault();
+      const previousFocusable = Utilities.findNextFocusable(document.activeElement, 'previous');
+      previousFocusable?.focus();
+    } else if (e.key === 'ArrowDown' && currentLineIndex === totalLines) {
+      e.preventDefault();
+      const nextFocusable = Utilities.findNextFocusable(document.activeElement, 'next');
+      nextFocusable?.focus();
+    }
+  };
+
+  const isPlaceholderVisible = !text && placeholder;
+
+  const containerClasses = Utilities.classNames(styles.root, isFocused && styles.focused);
+
+  return (
+    <div className={containerClasses}>
+      <div className={Utilities.classNames(styles.displayed, isPlaceholderVisible && styles.placeholder)}>
+        {isPlaceholderVisible ? placeholder : text.substring(0, selectionStart)}
+        {!isPlaceholderVisible && <span className={Utilities.classNames(styles.block, isBlink && styles.blink)}></span>}
+        {!isPlaceholderVisible && text.substring(selectionStart)}
+      </div>
+
+      <div ref={measurementRef} className={styles.hidden}></div>
+
+      <textarea className={styles.hiddenElement} ref={textAreaRef} value={text} aria-placeholder={placeholder} onFocus={onHandleFocus} onBlur={onHandleBlur} onKeyDown={onHandleKeyDown} onChange={onHandleChange} onSelect={onHandleSelect} onClick={onHandleClick} {...rest} />
+    </div>
+  );
+}
+
+export default TextArea;
+
+================
+File: reference/components/Tooltip.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border);
+  box-shadow: 0.5ch 0.5ch 0 0 var(--theme-border-subdued);
+  font-weight: 400;
+  max-width: 24ch;
+}
+
+================
+File: reference/components/Tooltip.tsx
+================
+import styles from '@components/Tooltip.module.scss';
+
+import * as React from 'react';
+
+interface TooltipProps extends React.HTMLAttributes<HTMLDivElement> {}
+
+const Tooltip = React.forwardRef<HTMLDivElement, TooltipProps>(({ style: propStyle, ...rest }, ref) => {
+  const style: React.CSSProperties = { ...propStyle };
+
+  return <div ref={ref} className={styles.root} {...rest} style={style} />;
+});
+
+Tooltip.displayName = 'Tooltip';
+
+export default Tooltip;
+
+================
+File: reference/components/TreeView.module.scss
+================
+.root {
+  white-space: nowrap;
+  -webkit-text-size-adjust: 100%;
+}
+
+.item {
+  cursor: pointer;
+
+  &:focus {
+    outline: 0;
+    border: 0;
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.empty {
+  opacity: 0.5;
+}
+
+================
+File: reference/components/TreeView.tsx
+================
+'use client';
+
+import styles from '@components/TreeView.module.scss';
+
+import * as React from 'react';
+
+interface TreeViewProps {
+  children?: React.ReactNode;
+  defaultValue?: boolean;
+  depth?: number;
+  isFile?: boolean;
+  isLastChild?: boolean;
+  isRoot?: boolean;
+  parentLines?: boolean[];
+  style?: any;
+  title: string;
+}
+
+const TreeView: React.FC<TreeViewProps> = ({ defaultValue = false, title, children, depth = 0, isFile = false, isRoot = false, isLastChild = false, style, parentLines = [] }) => {
+  const [show, setShow] = React.useState<boolean>(defaultValue);
+
+  const onToggleShow = (): void => {
+    if (!isFile) setShow((prevShow) => !prevShow);
+  };
+
+  const hasChildren = React.Children.count(children) > 0;
+  const isEmptyFolder = !isFile && !hasChildren;
+
+  const spacing = parentLines.map((line) => (line ? '│ . ' : '. . ')).join('');
+  const endPrefix = isLastChild ? '└───' : '├───';
+  const prefix = `${spacing}${endPrefix}`;
+  const icon = isFile ? ' ' : show ? '╦ ' : '╤ ';
+
+  const updatedParentLines = [...parentLines, !isLastChild];
+
+  return (
+    <div className={styles.root} style={style}>
+      <div tabIndex={0} role="button" onClick={onToggleShow} className={styles.item} aria-expanded={show}>
+        {prefix}
+        {icon}
+        {title}
+      </div>
+      {show && hasChildren && (
+        <div>
+          {React.Children.map(children, (child, index) =>
+            React.isValidElement(child)
+              ? React.cloneElement(child as React.ReactElement<TreeViewProps>, {
+                  depth: depth + 1,
+                  isLastChild: index === React.Children.count(children) - 1,
+                  parentLines: updatedParentLines,
+                })
+              : child
+          )}
+        </div>
+      )}
+    </div>
+  );
+};
+
+export default TreeView;
+
+================
+File: reference/modules/hotkeys/bound-hotkeys-proxy-provider.tsx
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/BoundHotkeysProxyProvider.tsx
+
+import { createContext, ReactNode, useContext } from 'react'
+import { Hotkey } from '@modules/hotkeys/types'
+
+type BoundHotkeysProxyProviderType = {
+  addHotkey: (hotkey: Hotkey) => void
+  removeHotkey: (hotkey: Hotkey) => void
+}
+
+const BoundHotkeysProxyProvider = createContext<BoundHotkeysProxyProviderType | undefined>(undefined)
+
+export const useBoundHotkeysProxy = () => {
+  return useContext(BoundHotkeysProxyProvider)
+}
+
+interface Props {
+  children: ReactNode
+  addHotkey: (hotkey: Hotkey) => void
+  removeHotkey: (hotkey: Hotkey) => void
+}
+
+export default function BoundHotkeysProxyProviderProvider({ addHotkey, removeHotkey, children }: Props) {
+  return (
+    <BoundHotkeysProxyProvider.Provider value={{ addHotkey, removeHotkey }}>
+      {children}
+    </BoundHotkeysProxyProvider.Provider>
+  )
+}
+
+================
+File: reference/modules/hotkeys/hotkeys-provider.tsx
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/HotkeysProvider.tsx
+import { Hotkey } from '@modules/hotkeys/types'
+import { createContext, ReactNode, useState, useContext, useCallback } from 'react'
+import BoundHotkeysProxyProviderProvider from '@modules/hotkeys/bound-hotkeys-proxy-provider'
+
+import * as Utilities from '@common/utilities';
+
+export type HotkeysContextType = {
+  hotkeys: ReadonlyArray<Hotkey>
+  enabledScopes: string[]
+  toggleScope: (scope: string) => void
+  enableScope: (scope: string) => void
+  disableScope: (scope: string) => void
+}
+
+// The context is only needed for special features like global scoping, so we use a graceful default fallback
+const HotkeysContext = createContext<HotkeysContextType>({
+  hotkeys: [],
+  enabledScopes: [], // This array has to be empty instead of containing '*' as default, to check if the provider is set or not
+  toggleScope: () => {},
+  enableScope: () => {},
+  disableScope: () => {},
+})
+
+export const useHotkeysContext = () => {
+  return useContext(HotkeysContext)
+}
+
+interface Props {
+  initiallyActiveScopes?: string[]
+  children: ReactNode
+}
+
+export const HotkeysProvider = ({ initiallyActiveScopes = ['*'], children }: Props) => {
+  const [internalActiveScopes, setInternalActiveScopes] = useState(
+    initiallyActiveScopes?.length > 0 ? initiallyActiveScopes : ['*']
+  )
+  const [boundHotkeys, setBoundHotkeys] = useState<Hotkey[]>([])
+
+  const enableScope = useCallback((scope: string) => {
+    setInternalActiveScopes((prev) => {
+      if (prev.includes('*')) {
+        return [scope]
+      }
+
+      return Array.from(new Set([...prev, scope]))
+    })
+  }, [])
+
+  const disableScope = useCallback((scope: string) => {
+    setInternalActiveScopes((prev) => {
+      if (prev.filter((s) => s !== scope).length === 0) {
+        return ['*']
+      } else {
+        return prev.filter((s) => s !== scope)
+      }
+    })
+  }, [])
+
+  const toggleScope = useCallback((scope: string) => {
+    setInternalActiveScopes((prev) => {
+      if (prev.includes(scope)) {
+        if (prev.filter((s) => s !== scope).length === 0) {
+          return ['*']
+        } else {
+          return prev.filter((s) => s !== scope)
+        }
+      } else {
+        if (prev.includes('*')) {
+          return [scope]
+        }
+
+        return Array.from(new Set([...prev, scope]))
+      }
+    })
+  }, [])
+
+  const addBoundHotkey = useCallback((hotkey: Hotkey) => {
+    setBoundHotkeys((prev) => [...prev, hotkey])
+  }, [])
+
+  const removeBoundHotkey = useCallback((hotkey: Hotkey) => {
+    setBoundHotkeys((prev) => prev.filter((h) => !Utilities.deepEqual(h, hotkey)))
+  }, [])
+
+  return (
+    <HotkeysContext.Provider
+      value={{ enabledScopes: internalActiveScopes, hotkeys: boundHotkeys, enableScope, disableScope, toggleScope }}
+    >
+      <BoundHotkeysProxyProviderProvider addHotkey={addBoundHotkey} removeHotkey={removeBoundHotkey}>
+        {children}
+      </BoundHotkeysProxyProviderProvider>
+    </HotkeysContext.Provider>
+  )
+}
+
+================
+File: reference/modules/hotkeys/index.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/index.ts
+
+import useHotkeys from '@modules/hotkeys/use-hotkeys'
+import type { Options, Keys, HotkeyCallback } from '@modules/hotkeys/types'
+import { HotkeysProvider, useHotkeysContext } from '@modules/hotkeys/hotkeys-provider'
+import { isHotkeyPressed } from '@modules/hotkeys/is-hotkey-pressed'
+import useRecordHotkeys from '@modules/hotkeys/use-record-hotkeys'
+
+export {
+  useHotkeys,
+  useRecordHotkeys,
+  useHotkeysContext,
+  isHotkeyPressed,
+  HotkeysProvider,
+  Options,
+  Keys,
+  HotkeyCallback,
+}
+
+================
+File: reference/modules/hotkeys/is-hotkey-pressed.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/isHotkeyPressed.ts
+
+import { isHotkeyModifier, mapKey } from '@modules/hotkeys/parse-hotkeys'
+;(() => {
+  if (typeof document !== 'undefined') {
+    document.addEventListener('keydown', (e) => {
+      if (e.key === undefined) {
+        // Synthetic event (e.g., Chrome autofill).  Ignore.
+        return
+      }
+
+      pushToCurrentlyPressedKeys([mapKey(e.key), mapKey(e.code)])
+    })
+
+    document.addEventListener('keyup', (e) => {
+      if (e.key === undefined) {
+        // Synthetic event (e.g., Chrome autofill).  Ignore.
+        return
+      }
+
+      removeFromCurrentlyPressedKeys([mapKey(e.key), mapKey(e.code)])
+    })
+  }
+
+  if (typeof window !== 'undefined') {
+    window.addEventListener('blur', () => {
+      currentlyPressedKeys.clear()
+    })
+  }
+})()
+
+const currentlyPressedKeys: Set<string> = new Set<string>()
+
+// https://github.com/microsoft/TypeScript/issues/17002
+export function isReadonlyArray(value: unknown): value is readonly unknown[] {
+  return Array.isArray(value)
+}
+
+export function isHotkeyPressed(key: string | readonly string[], splitKey = ','): boolean {
+  const hotkeyArray = isReadonlyArray(key) ? key : key.split(splitKey)
+
+  return hotkeyArray.every((hotkey) => currentlyPressedKeys.has(hotkey.trim().toLowerCase()))
+}
+
+export function pushToCurrentlyPressedKeys(key: string | string[]): void {
+  const hotkeyArray = Array.isArray(key) ? key : [key]
+
+  /*
+  Due to a weird behavior on macOS we need to clear the set if the user pressed down the meta key and presses another key.
+  https://stackoverflow.com/questions/11818637/why-does-javascript-drop-keyup-events-when-the-metakey-is-pressed-on-mac-browser
+  Otherwise the set will hold all ever pressed keys while the meta key is down which leads to wrong results.
+   */
+  if (currentlyPressedKeys.has('meta')) {
+    currentlyPressedKeys.forEach((key) => !isHotkeyModifier(key) && currentlyPressedKeys.delete(key.toLowerCase()))
+  }
+
+  hotkeyArray.forEach((hotkey) => currentlyPressedKeys.add(hotkey.toLowerCase()))
+}
+
+export function removeFromCurrentlyPressedKeys(key: string | string[]): void {
+  const hotkeyArray = Array.isArray(key) ? key : [key]
+
+  /*
+  Due to a weird behavior on macOS we need to clear the set if the user pressed down the meta key and presses another key.
+  https://stackoverflow.com/questions/11818637/why-does-javascript-drop-keyup-events-when-the-metakey-is-pressed-on-mac-browser
+  Otherwise the set will hold all ever pressed keys while the meta key is down which leads to wrong results.
+   */
+  if (key === 'meta') {
+    currentlyPressedKeys.clear()
+  } else {
+    hotkeyArray.forEach((hotkey) => currentlyPressedKeys.delete(hotkey.toLowerCase()))
+  }
+}
+
+================
+File: reference/modules/hotkeys/parse-hotkeys.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/parseHotkeys.ts
+
+import { Hotkey, KeyboardModifiers } from '@modules/hotkeys/types'
+
+const reservedModifierKeywords = ['shift', 'alt', 'meta', 'mod', 'ctrl']
+
+const mappedKeys: Record<string, string> = {
+  esc: 'escape',
+  return: 'enter',
+  '.': 'period',
+  ',': 'comma',
+  '-': 'slash',
+  ' ': 'space',
+  '`': 'backquote',
+  '#': 'backslash',
+  '+': 'bracketright',
+  ShiftLeft: 'shift',
+  ShiftRight: 'shift',
+  AltLeft: 'alt',
+  AltRight: 'alt',
+  MetaLeft: 'meta',
+  MetaRight: 'meta',
+  OSLeft: 'meta',
+  OSRight: 'meta',
+  ControlLeft: 'ctrl',
+  ControlRight: 'ctrl',
+}
+
+export function mapKey(key?: string): string {
+  return ((key && mappedKeys[key]) || key || '')
+    .trim()
+    .toLowerCase()
+    .replace(/key|digit|numpad|arrow/, '')
+}
+
+export function isHotkeyModifier(key: string) {
+  return reservedModifierKeywords.includes(key)
+}
+
+export function parseKeysHookInput(keys: string, splitKey = ','): string[] {
+  return keys.split(splitKey)
+}
+
+export function parseHotkey(hotkey: string, combinationKey = '+', description?: string): Hotkey {
+  const keys = hotkey
+    .toLocaleLowerCase()
+    .split(combinationKey)
+    .map((k) => mapKey(k))
+
+  const modifiers: KeyboardModifiers = {
+    alt: keys.includes('alt'),
+    ctrl: keys.includes('ctrl') || keys.includes('control'),
+    shift: keys.includes('shift'),
+    meta: keys.includes('meta'),
+    mod: keys.includes('mod'),
+  }
+
+  const singleCharKeys = keys.filter((k) => !reservedModifierKeywords.includes(k))
+
+  return {
+    ...modifiers,
+    keys: singleCharKeys,
+    description,
+    hotkey,
+  }
+}
+
+================
+File: reference/modules/hotkeys/types.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/types.ts
+import type { DependencyList } from 'react'
+
+export type FormTags = 'input' | 'textarea' | 'select' | 'INPUT' | 'TEXTAREA' | 'SELECT'
+export type Keys = string | readonly string[]
+export type Scopes = string | readonly string[]
+
+export type RefType<T> = T | null
+
+export type KeyboardModifiers = {
+  alt?: boolean
+  ctrl?: boolean
+  meta?: boolean
+  shift?: boolean
+  mod?: boolean
+}
+
+export type Hotkey = KeyboardModifiers & {
+  keys?: readonly string[]
+  scopes?: Scopes
+  description?: string
+  hotkey: string
+}
+
+export type HotkeysEvent = Hotkey
+
+export type HotkeyCallback = (keyboardEvent: KeyboardEvent, hotkeysEvent: HotkeysEvent) => void
+
+export type Trigger = boolean | ((keyboardEvent: KeyboardEvent, hotkeysEvent: HotkeysEvent) => boolean)
+
+export type Options = {
+  enabled?: Trigger // Main setting that determines if the hotkey is enabled or not. (Default: true)
+  enableOnFormTags?: readonly FormTags[] | boolean // Enable hotkeys on a list of tags. (Default: false)
+  enableOnContentEditable?: boolean // Enable hotkeys on tags with contentEditable props. (Default: false)
+  ignoreEventWhen?: (e: KeyboardEvent) => boolean // Ignore evenets based on a condition (Default: undefined)
+  combinationKey?: string // Character to split keys in hotkeys combinations. (Default: +)
+  splitKey?: string // Character to separate different hotkeys. (Default: ,)
+  scopes?: Scopes // Scope
+  keyup?: boolean // Trigger on keyup event? (Default: undefined)
+  keydown?: boolean // Trigger on keydown event? (Default: true)
+  preventDefault?: Trigger // Prevent default browser behavior? (Default: false)
+  description?: string // Use this option to describe what the hotkey does. (Default: undefined)
+  document?: Document // Listen to events on the document instead of the window. (Default: false)
+  ignoreModifiers?: boolean // Ignore modifiers when matching hotkeys. (Default: false)
+}
+
+export type OptionsOrDependencyArray = Options | DependencyList
+
+================
+File: reference/modules/hotkeys/use-deep-equal-memo.ts
+================
+import { useRef } from 'react'
+
+import * as Utilities from '@common/utilities';
+
+export default function useDeepEqualMemo<T>(value: T) {
+  const ref = useRef<T | undefined>(undefined)
+
+  if (!Utilities.deepEqual(ref.current, value)) {
+    ref.current = value
+  }
+
+  return ref.current
+}
+
+================
+File: reference/modules/hotkeys/use-hotkeys.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/useHotkeys.ts
+
+import { HotkeyCallback, Keys, Options, OptionsOrDependencyArray, RefType } from '@modules/hotkeys/types'
+import { DependencyList, RefCallback, useCallback, useEffect, useState, useLayoutEffect, useRef } from 'react'
+import { mapKey, parseHotkey, parseKeysHookInput } from '@modules/hotkeys/parse-hotkeys'
+import {
+  isHotkeyEnabled,
+  isHotkeyEnabledOnTag,
+  isHotkeyMatchingKeyboardEvent,
+  isKeyboardEventTriggeredByInput,
+  isScopeActive,
+  maybePreventDefault,
+} from '@modules/hotkeys/validators'
+import { useHotkeysContext } from '@modules/hotkeys/hotkeys-provider'
+import { useBoundHotkeysProxy } from '@modules/hotkeys/bound-hotkeys-proxy-provider'
+import useDeepEqualMemo from '@modules/hotkeys/use-deep-equal-memo'
+import { isReadonlyArray, pushToCurrentlyPressedKeys, removeFromCurrentlyPressedKeys } from '@modules/hotkeys/is-hotkey-pressed'
+
+const stopPropagation = (e: KeyboardEvent): void => {
+  e.stopPropagation()
+  e.preventDefault()
+  e.stopImmediatePropagation()
+}
+
+const useSafeLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect
+
+export default function useHotkeys<T extends HTMLElement>(
+  keys: Keys,
+  callback: HotkeyCallback,
+  options?: OptionsOrDependencyArray,
+  dependencies?: OptionsOrDependencyArray
+) {
+  const [ref, setRef] = useState<RefType<T>>(null)
+  const hasTriggeredRef = useRef(false)
+
+  const _options: Options | undefined = !(options instanceof Array)
+    ? (options as Options)
+    : !(dependencies instanceof Array)
+    ? (dependencies as Options)
+    : undefined
+  const _keys: string = isReadonlyArray(keys) ? keys.join(_options?.splitKey) : keys
+  const _deps: DependencyList | undefined =
+    options instanceof Array ? options : dependencies instanceof Array ? dependencies : undefined
+
+  const memoisedCB = useCallback(callback, _deps ?? [])
+  const cbRef = useRef<HotkeyCallback>(memoisedCB)
+
+  if (_deps) {
+    cbRef.current = memoisedCB
+  } else {
+    cbRef.current = callback
+  }
+
+  const memoisedOptions = useDeepEqualMemo(_options)
+
+  const { enabledScopes } = useHotkeysContext()
+  const proxy = useBoundHotkeysProxy()
+
+  useSafeLayoutEffect(() => {
+    if (memoisedOptions?.enabled === false || !isScopeActive(enabledScopes, memoisedOptions?.scopes)) {
+      return
+    }
+
+    const listener = (e: KeyboardEvent, isKeyUp = false) => {
+      if (isKeyboardEventTriggeredByInput(e) && !isHotkeyEnabledOnTag(e, memoisedOptions?.enableOnFormTags)) {
+        return
+      }
+
+      // TODO: SINCE THE EVENT IS NOW ATTACHED TO THE REF, THE ACTIVE ELEMENT CAN NEVER BE INSIDE THE REF. THE HOTKEY ONLY TRIGGERS IF THE
+      // REF IS THE ACTIVE ELEMENT. THIS IS A PROBLEM SINCE FOCUSED SUB COMPONENTS WON'T TRIGGER THE HOTKEY.
+      if (ref !== null) {
+        const rootNode = ref.getRootNode()
+        if (
+          (rootNode instanceof Document || rootNode instanceof ShadowRoot) &&
+          rootNode.activeElement !== ref &&
+          !ref.contains(rootNode.activeElement)
+        ) {
+          stopPropagation(e)
+          return
+        }
+      }
+
+      if ((e.target as HTMLElement)?.isContentEditable && !memoisedOptions?.enableOnContentEditable) {
+        return
+      }
+
+      parseKeysHookInput(_keys, memoisedOptions?.splitKey).forEach((key) => {
+        const hotkey = parseHotkey(key, memoisedOptions?.combinationKey)
+
+        if (isHotkeyMatchingKeyboardEvent(e, hotkey, memoisedOptions?.ignoreModifiers) || hotkey.keys?.includes('*')) {
+          if (memoisedOptions?.ignoreEventWhen?.(e)) {
+            return
+          }
+
+          if (isKeyUp && hasTriggeredRef.current) {
+            return
+          }
+
+          maybePreventDefault(e, hotkey, memoisedOptions?.preventDefault)
+
+          if (!isHotkeyEnabled(e, hotkey, memoisedOptions?.enabled)) {
+            stopPropagation(e)
+
+            return
+          }
+
+          // Execute the user callback for that hotkey
+          cbRef.current(e, hotkey)
+
+          if (!isKeyUp) {
+            hasTriggeredRef.current = true
+          }
+        }
+      })
+    }
+
+    const handleKeyDown = (event: KeyboardEvent) => {
+      if (event.key === undefined) {
+        // Synthetic event (e.g., Chrome autofill).  Ignore.
+        return
+      }
+
+      pushToCurrentlyPressedKeys(mapKey(event.code))
+
+      if ((memoisedOptions?.keydown === undefined && memoisedOptions?.keyup !== true) || memoisedOptions?.keydown) {
+        listener(event)
+      }
+    }
+
+    const handleKeyUp = (event: KeyboardEvent) => {
+      if (event.key === undefined) {
+        // Synthetic event (e.g., Chrome autofill).  Ignore.
+        return
+      }
+
+      removeFromCurrentlyPressedKeys(mapKey(event.code))
+
+      hasTriggeredRef.current = false
+
+      if (memoisedOptions?.keyup) {
+        listener(event, true)
+      }
+    }
+
+    const domNode = ref || _options?.document || document
+
+    // @ts-ignore
+    domNode.addEventListener('keyup', handleKeyUp)
+    // @ts-ignore
+    domNode.addEventListener('keydown', handleKeyDown)
+
+    if (proxy) {
+      parseKeysHookInput(_keys, memoisedOptions?.splitKey).forEach((key) =>
+        proxy.addHotkey(parseHotkey(key, memoisedOptions?.combinationKey, memoisedOptions?.description))
+      )
+    }
+
+    return () => {
+      // @ts-ignore
+      domNode.removeEventListener('keyup', handleKeyUp)
+      // @ts-ignore
+      domNode.removeEventListener('keydown', handleKeyDown)
+
+      if (proxy) {
+        parseKeysHookInput(_keys, memoisedOptions?.splitKey).forEach((key) =>
+          proxy.removeHotkey(parseHotkey(key, memoisedOptions?.combinationKey, memoisedOptions?.description))
+        )
+      }
+    }
+  }, [ref, _keys, memoisedOptions, enabledScopes])
+
+  return setRef as RefCallback<T>
+}
+
+================
+File: reference/modules/hotkeys/use-record-hotkeys.ts
+================
+import { useCallback, useState } from 'react'
+import { mapKey } from '@modules/hotkeys/parse-hotkeys'
+
+export default function useRecordHotkeys() {
+  const [keys, setKeys] = useState(new Set<string>())
+  const [isRecording, setIsRecording] = useState(false)
+
+  const handler = useCallback((event: KeyboardEvent) => {
+    if (event.key === undefined) {
+      // Synthetic event (e.g., Chrome autofill).  Ignore.
+      return
+    }
+
+    event.preventDefault()
+    event.stopPropagation()
+
+    setKeys((prev) => {
+      const newKeys = new Set(prev)
+
+      newKeys.add(mapKey(event.code))
+
+      return newKeys
+    })
+  }, [])
+
+  const stop = useCallback(() => {
+    if (typeof document !== 'undefined') {
+      document.removeEventListener('keydown', handler)
+
+      setIsRecording(false)
+    }
+  }, [handler])
+
+  const start = useCallback(() => {
+    setKeys(new Set<string>())
+
+    if (typeof document !== 'undefined') {
+      stop()
+
+      document.addEventListener('keydown', handler)
+
+      setIsRecording(true)
+    }
+  }, [handler, stop])
+
+  const resetKeys = useCallback(() => {
+    setKeys(new Set<string>())
+  }, [])
+
+  return [keys, { start, stop, resetKeys, isRecording }] as const
+}
+
+================
+File: reference/modules/hotkeys/validators.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/validators.ts
+
+import { FormTags, Hotkey, Scopes, Trigger } from '@modules/hotkeys/types'
+import { isHotkeyPressed, isReadonlyArray } from '@modules/hotkeys/is-hotkey-pressed'
+import { mapKey } from '@modules/hotkeys/parse-hotkeys'
+
+export function maybePreventDefault(e: KeyboardEvent, hotkey: Hotkey, preventDefault?: Trigger): void {
+  if ((typeof preventDefault === 'function' && preventDefault(e, hotkey)) || preventDefault === true) {
+    e.preventDefault()
+  }
+}
+
+export function isHotkeyEnabled(e: KeyboardEvent, hotkey: Hotkey, enabled?: Trigger): boolean {
+  if (typeof enabled === 'function') {
+    return enabled(e, hotkey)
+  }
+
+  return enabled === true || enabled === undefined
+}
+
+export function isKeyboardEventTriggeredByInput(ev: KeyboardEvent): boolean {
+  return isHotkeyEnabledOnTag(ev, ['input', 'textarea', 'select'])
+}
+
+export function isHotkeyEnabledOnTag(
+  event: KeyboardEvent,
+  enabledOnTags: readonly FormTags[] | boolean = false
+): boolean {
+  const {target, composed} = event;
+
+  let targetTagName: string | null = null
+
+  if (isCustomElement(target as HTMLElement) && composed) {
+    targetTagName = event.composedPath()[0] && (event.composedPath()[0] as HTMLElement).tagName;
+  } else {
+    targetTagName = target && (target as HTMLElement).tagName;
+  }
+
+  if (isReadonlyArray(enabledOnTags)) {
+    return Boolean(
+      targetTagName && enabledOnTags && enabledOnTags.some((tag) => tag.toLowerCase() === targetTagName?.toLowerCase())
+    )
+  }
+
+  return Boolean(targetTagName && enabledOnTags && enabledOnTags)
+}
+
+export function isCustomElement(element: HTMLElement): boolean {
+  // We just do a basic check w/o any complex RegEx or validation against the list of legacy names containing a hyphen,
+  // as none of them is likely to be an event target, and it won't hurt anyway if we miss.
+  // see: https://html.spec.whatwg.org/multipage/custom-elements.html#prod-potentialcustomelementname
+  return !!element.tagName && !element.tagName.startsWith("-") && element.tagName.includes("-");
+}
+
+export function isScopeActive(activeScopes: string[], scopes?: Scopes): boolean {
+  if (activeScopes.length === 0 && scopes) {
+    console.warn(
+      'A hotkey has the "scopes" option set, however no active scopes were found. If you want to use the global scopes feature, you need to wrap your app in a <HotkeysProvider>'
+    )
+
+    return true
+  }
+
+  if (!scopes) {
+    return true
+  }
+
+  return activeScopes.some((scope) => scopes.includes(scope)) || activeScopes.includes('*')
+}
+
+export const isHotkeyMatchingKeyboardEvent = (e: KeyboardEvent, hotkey: Hotkey, ignoreModifiers = false): boolean => {
+  const { alt, meta, mod, shift, ctrl, keys } = hotkey
+  const { key: pressedKeyUppercase, code, ctrlKey, metaKey, shiftKey, altKey } = e
+
+  const keyCode = mapKey(code)
+  const pressedKey = pressedKeyUppercase.toLowerCase()
+
+  if (
+    !keys?.includes(keyCode) &&
+    !keys?.includes(pressedKey) &&
+    !['ctrl', 'control', 'unknown', 'meta', 'alt', 'shift', 'os'].includes(keyCode)
+  ) {
+    return false
+  }
+
+  if (!ignoreModifiers) {
+    // We check the pressed keys for compatibility with the keyup event. In keyup events the modifier flags are not set.
+    if (alt === !altKey && pressedKey !== 'alt') {
+      return false
+    }
+
+    if (shift === !shiftKey && pressedKey !== 'shift') {
+      return false
+    }
+
+    // Mod is a special key name that is checking for meta on macOS and ctrl on other platforms
+    if (mod) {
+      if (!metaKey && !ctrlKey) {
+        return false
+      }
+    } else {
+      if (meta === !metaKey && pressedKey !== 'meta' && pressedKey !== 'os') {
+        return false
+      }
+
+      if (ctrl === !ctrlKey && pressedKey !== 'ctrl' && pressedKey !== 'control') {
+        return false
+      }
+    }
+  }
+
+  // All modifiers are correct, now check the key
+  // If the key is set, we check for the key
+  if (keys && keys.length === 1 && (keys.includes(pressedKey) || keys.includes(keyCode))) {
+    return true
+  } else if (keys) {
+    // Check if all keys are present in pressedDownKeys set
+    return isHotkeyPressed(keys)
+  } else if (!keys) {
+    // If the key is not set, we only listen for modifiers, that check went alright, so we return true
+    return true
+  }
+
+  // There is nothing that matches.
+  return false
+}
+
+================
+File: reference/modules/cors.ts
+================
+// @ts-nocheck
+
+'use strict';
+
+import assign from '@modules/object-assign';
+import vary from '@modules/vary';
+
+var defaults = {
+  origin: '*',
+  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
+  preflightContinue: false,
+  optionsSuccessStatus: 204,
+};
+
+function isString(s) {
+  return typeof s === 'string' || s instanceof String;
+}
+
+function isOriginAllowed(origin, allowedOrigin) {
+  if (Array.isArray(allowedOrigin)) {
+    for (var i = 0; i < allowedOrigin.length; ++i) {
+      if (isOriginAllowed(origin, allowedOrigin[i])) {
+        return true;
+      }
+    }
+    return false;
+  } else if (isString(allowedOrigin)) {
+    return origin === allowedOrigin;
+  } else if (allowedOrigin instanceof RegExp) {
+    return allowedOrigin.test(origin);
+  } else {
+    return !!allowedOrigin;
+  }
+}
+
+function configureOrigin(options, req) {
+  var requestOrigin = req.headers.origin,
+    headers = [],
+    isAllowed;
+
+  if (!options.origin || options.origin === '*') {
+    // allow any origin
+    headers.push([
+      {
+        key: 'Access-Control-Allow-Origin',
+        value: '*',
+      },
+    ]);
+  } else if (isString(options.origin)) {
+    // fixed origin
+    headers.push([
+      {
+        key: 'Access-Control-Allow-Origin',
+        value: options.origin,
+      },
+    ]);
+    headers.push([
+      {
+        key: 'Vary',
+        value: 'Origin',
+      },
+    ]);
+  } else {
+    isAllowed = isOriginAllowed(requestOrigin, options.origin);
+    // reflect origin
+    headers.push([
+      {
+        key: 'Access-Control-Allow-Origin',
+        value: isAllowed ? requestOrigin : false,
+      },
+    ]);
+    headers.push([
+      {
+        key: 'Vary',
+        value: 'Origin',
+      },
+    ]);
+  }
+
+  return headers;
+}
+
+function configureMethods(options) {
+  var methods = options.methods;
+  if (methods.join) {
+    methods = options.methods.join(','); // .methods is an array, so turn it into a string
+  }
+  return {
+    key: 'Access-Control-Allow-Methods',
+    value: methods,
+  };
+}
+
+function configureCredentials(options) {
+  if (options.credentials === true) {
+    return {
+      key: 'Access-Control-Allow-Credentials',
+      value: 'true',
+    };
+  }
+  return null;
+}
+
+function configureAllowedHeaders(options, req) {
+  var allowedHeaders = options.allowedHeaders || options.headers;
+  var headers = [];
+
+  if (!allowedHeaders) {
+    allowedHeaders = req.headers['access-control-request-headers']; // .headers wasn't specified, so reflect the request headers
+    headers.push([
+      {
+        key: 'Vary',
+        value: 'Access-Control-Request-Headers',
+      },
+    ]);
+  } else if (allowedHeaders.join) {
+    allowedHeaders = allowedHeaders.join(','); // .headers is an array, so turn it into a string
+  }
+  if (allowedHeaders && allowedHeaders.length) {
+    headers.push([
+      {
+        key: 'Access-Control-Allow-Headers',
+        value: allowedHeaders,
+      },
+    ]);
+  }
+
+  return headers;
+}
+
+function configureExposedHeaders(options) {
+  var headers = options.exposedHeaders;
+  if (!headers) {
+    return null;
+  } else if (headers.join) {
+    headers = headers.join(','); // .headers is an array, so turn it into a string
+  }
+  if (headers && headers.length) {
+    return {
+      key: 'Access-Control-Expose-Headers',
+      value: headers,
+    };
+  }
+  return null;
+}
+
+function configureMaxAge(options) {
+  var maxAge = (typeof options.maxAge === 'number' || options.maxAge) && options.maxAge.toString();
+  if (maxAge && maxAge.length) {
+    return {
+      key: 'Access-Control-Max-Age',
+      value: maxAge,
+    };
+  }
+  return null;
+}
+
+function applyHeaders(headers, res) {
+  for (var i = 0, n = headers.length; i < n; i++) {
+    var header = headers[i];
+    if (header) {
+      if (Array.isArray(header)) {
+        applyHeaders(header, res);
+      } else if (header.key === 'Vary' && header.value) {
+        vary(res, header.value);
+      } else if (header.value) {
+        res.setHeader(header.key, header.value);
+      }
+    }
+  }
+}
+
+function cors(options, req, res, next) {
+  var headers = [],
+    method = req.method && req.method.toUpperCase && req.method.toUpperCase();
+
+  if (method === 'OPTIONS') {
+    // preflight
+    headers.push(configureOrigin(options, req));
+    headers.push(configureCredentials(options));
+    headers.push(configureMethods(options));
+    headers.push(configureAllowedHeaders(options, req));
+    headers.push(configureMaxAge(options));
+    headers.push(configureExposedHeaders(options));
+    applyHeaders(headers, res);
+
+    if (options.preflightContinue) {
+      next();
+    } else {
+      // Safari (and potentially other browsers) need content-length 0,
+      //   for 204 or they just hang waiting for a body
+      res.statusCode = options.optionsSuccessStatus;
+      res.setHeader('Content-Length', '0');
+      res.end();
+    }
+  } else {
+    // actual response
+    headers.push(configureOrigin(options, req));
+    headers.push(configureCredentials(options));
+    headers.push(configureExposedHeaders(options));
+    applyHeaders(headers, res);
+    next();
+  }
+}
+
+function middlewareWrapper(o) {
+  // if options are static (either via defaults or custom options passed in), wrap in a function
+  var optionsCallback = null;
+  if (typeof o === 'function') {
+    optionsCallback = o;
+  } else {
+    optionsCallback = function (req, cb) {
+      cb(null, o);
+    };
+  }
+
+  return function corsMiddleware(req, res, next) {
+    optionsCallback(req, function (err, options) {
+      if (err) {
+        next(err);
+      } else {
+        var corsOptions = assign({}, defaults, options);
+        var originCallback = null;
+        if (corsOptions.origin && typeof corsOptions.origin === 'function') {
+          originCallback = corsOptions.origin;
+        } else if (corsOptions.origin) {
+          originCallback = function (origin, cb) {
+            cb(null, corsOptions.origin);
+          };
+        }
+
+        if (originCallback) {
+          originCallback(req.headers.origin, function (err2, origin) {
+            if (err2 || !origin) {
+              next(err2);
+            } else {
+              corsOptions.origin = origin;
+              cors(corsOptions, req, res, next);
+            }
+          });
+        } else {
+          next();
+        }
+      }
+    });
+  };
+}
+
+export default middlewareWrapper;
+
+================
+File: reference/modules/object-assign.ts
+================
+// @ts-nocheck
+
+/*
+object-assign
+(c) Sindre Sorhus
+@license MIT
+*/
+
+'use strict';
+
+/* eslint-disable no-unused-vars */
+var getOwnPropertySymbols = Object.getOwnPropertySymbols;
+var hasOwnProperty = Object.prototype.hasOwnProperty;
+var propIsEnumerable = Object.prototype.propertyIsEnumerable;
+
+function toObject(val) {
+  if (val === null || val === undefined) {
+    throw new TypeError('Object.assign cannot be called with null or undefined');
+  }
+
+  return Object(val);
+}
+
+function shouldUseNative() {
+  try {
+    if (!Object.assign) {
+      return false;
+    }
+
+    // Detect buggy property enumeration order in older V8 versions.
+
+    // https://bugs.chromium.org/p/v8/issues/detail?id=4118
+    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
+    // @ts-ignore
+    test1[5] = 'de';
+    if (Object.getOwnPropertyNames(test1)[0] === '5') {
+      return false;
+    }
+
+    // https://bugs.chromium.org/p/v8/issues/detail?id=3056
+    var test2 = {};
+    for (var i = 0; i < 10; i++) {
+      test2['_' + String.fromCharCode(i)] = i;
+    }
+    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
+      return test2[n];
+    });
+    if (order2.join('') !== '0123456789') {
+      return false;
+    }
+
+    // https://bugs.chromium.org/p/v8/issues/detail?id=3056
+    var test3 = {};
+    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
+      test3[letter] = letter;
+    });
+    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
+      return false;
+    }
+
+    return true;
+  } catch (err) {
+    // We don't expect any of the above to throw, but better to be safe.
+    return false;
+  }
+}
+
+const assign = shouldUseNative()
+  ? Object.assign
+  : function (target, source) {
+      var from;
+      var to = toObject(target);
+      var symbols;
+
+      for (var s = 1; s < arguments.length; s++) {
+        from = Object(arguments[s]);
+
+        for (var key in from) {
+          if (hasOwnProperty.call(from, key)) {
+            to[key] = from[key];
+          }
+        }
+
+        if (getOwnPropertySymbols) {
+          symbols = getOwnPropertySymbols(from);
+          for (var i = 0; i < symbols.length; i++) {
+            if (propIsEnumerable.call(from, symbols[i])) {
+              to[symbols[i]] = from[symbols[i]];
+            }
+          }
+        }
+      }
+
+      return to;
+    };
+
+export default assign;
+
+================
+File: reference/modules/vary.ts
+================
+// @ts-nocheck
+
+/*!
+ * vary
+ * Copyright(c) 2014-2017 Douglas Christopher Wilson
+ * MIT Licensed
+ */
+
+'use strict';
+
+/**
+ * RegExp to match field-name in RFC 7230 sec 3.2
+ *
+ * field-name    = token
+ * token         = 1*tchar
+ * tchar         = "!" / "#" / "$" / "%" / "&" / "'" / "*"
+ *               / "+" / "-" / "." / "^" / "_" / "`" / "|" / "~"
+ *               / DIGIT / ALPHA
+ *               ; any VCHAR, except delimiters
+ */
+
+var FIELD_NAME_REGEXP = /^[!#$%&'*+\-.^_`|~0-9A-Za-z]+$/;
+
+/**
+ * Append a field to a vary header.
+ *
+ * @param {String} header
+ * @param {String|Array} field
+ * @return {String}
+ * @public
+ */
+
+function append(header, field) {
+  if (typeof header !== 'string') {
+    throw new TypeError('header argument is required');
+  }
+
+  if (!field) {
+    throw new TypeError('field argument is required');
+  }
+
+  // get fields array
+  var fields = !Array.isArray(field) ? parse(String(field)) : field;
+
+  // assert on invalid field names
+  for (var j = 0; j < fields.length; j++) {
+    if (!FIELD_NAME_REGEXP.test(fields[j])) {
+      throw new TypeError('field argument contains an invalid header name');
+    }
+  }
+
+  // existing, unspecified vary
+  if (header === '*') {
+    return header;
+  }
+
+  // enumerate current values
+  var val = header;
+  var vals = parse(header.toLowerCase());
+
+  // unspecified vary
+  if (fields.indexOf('*') !== -1 || vals.indexOf('*') !== -1) {
+    return '*';
+  }
+
+  for (var i = 0; i < fields.length; i++) {
+    var fld = fields[i].toLowerCase();
+
+    // append value (case-preserving)
+    if (vals.indexOf(fld) === -1) {
+      vals.push(fld);
+      val = val ? val + ', ' + fields[i] : fields[i];
+    }
+  }
+
+  return val;
+}
+
+/**
+ * Parse a vary header into an array.
+ *
+ * @param {String} header
+ * @return {Array}
+ * @private
+ */
+
+function parse(header) {
+  var end = 0;
+  var list = [];
+  var start = 0;
+
+  // gather tokens
+  for (var i = 0, len = header.length; i < len; i++) {
+    switch (header.charCodeAt(i)) {
+      case 0x20 /*   */:
+        if (start === end) {
+          start = end = i + 1;
+        }
+        break;
+      case 0x2c /* , */:
+        list.push(header.substring(start, end));
+        start = end = i + 1;
+        break;
+      default:
+        end = i + 1;
+        break;
+    }
+  }
+
+  // final token
+  list.push(header.substring(start, end));
+
+  return list;
+}
+
+/**
+ * Mark that a request is varied on a header field.
+ *
+ * @param {Object} res
+ * @param {String|Array} field
+ * @public
+ */
+
+function vary(res, field) {
+  if (!res || !res.getHeader || !res.setHeader) {
+    // quack quack
+    throw new TypeError('res argument is required');
+  }
+
+  // get existing header
+  var val = res.getHeader('Vary') || '';
+  var header = Array.isArray(val) ? val.join(', ') : String(val);
+
+  // set new header
+  if ((val = append(header, field))) {
+    res.setHeader('Vary', val);
+  }
+}
+
+export default vary;
+
+================
+File: reference/pages/api/index.ts
+================
+import * as Server from '@common/server';
+import * as Constants from '@common/constants';
+
+export default async function apiIndex(req, res) {
+  await Server.cors(req, res);
+
+  res.json({
+    success: true,
+    message: 'hey there, friend.',
+  });
+}
+
+================
+File: reference/pages/_app.tsx
+================
+import '@root/global.scss';
+
+import * as React from 'react';
+
+import Providers from '@components/Providers';
+
+function MyApp({ Component, pageProps }) {
+  return (
+    <Providers>
+      <Component {...pageProps} />
+    </Providers>
+  );
+}
+
+export default MyApp;
+
+================
+File: reference/pages/_document.tsx
+================
+import Document, { Html, Head, Main, NextScript } from 'next/document';
+
+export default class MyDocument extends Document {
+  render() {
+    return (
+      <Html>
+        <Head />
+        <body className="theme-light">
+          <Main />
+          <NextScript />
+        </body>
+      </Html>
+    );
+  }
+}
+
+================
+File: reference/.gitignore
+================
+.next
+.nova
+.env
+.env.local
+.env-custom-development
+.env-development
+.env-textile
+.env-production
+.DS_STORE
+DS_STORE
+yarn.lock
+node_modules
+dist
+analytics.txt
+package-lock.json
+
+/**/*/.DS_STORE
+/**/*/node_modules
+/**/*/.next
+/**/*/.data
+
+================
+File: reference/.prettierrc
+================
+{
+  "printWidth": 9999,
+  "tabWidth": 2,
+  "useTabs": false,
+  "semi": true,
+  "singleQuote": true,
+  "trailingComma": "es5",
+  "bracketSpacing": true,
+  "jsxBracketSameLine": false,
+  "arrowParens": "always",
+  "requirePragma": false,
+  "insertPragma": false,
+  "proseWrap": "preserve",
+  "parser": "babel-ts",
+  "overrides": [
+    {
+      "files": "*.js",
+      "options": {
+        "parser": "babel"
+      }
+    }
+  ]
+}
+
+================
+File: reference/global.scss
+================
+@font-face {
+  font-family: 'IosevkaTerm-Regular';
+  src: url('https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/6397be61-3ea4-459d-8a3e-fd95168cb214.woff2') format('woff2');
+}
+
+a,
+abbr,
+acronym,
+address,
+applet,
+article,
+aside,
+audio,
+b,
+big,
+blockquote,
+body,
+canvas,
+caption,
+center,
+cite,
+code,
+dd,
+del,
+details,
+dfn,
+div,
+dl,
+dt,
+embed,
+em,
+figure,
+figcaption,
+fieldset,
+footer,
+form,
+h1,
+h2,
+h3,
+h4,
+h5,
+h6,
+header,
+hgroup,
+html,
+i,
+iframe,
+img,
+ins,
+kbd,
+label,
+legend,
+li,
+mark,
+menu,
+nav,
+object,
+ol,
+output,
+p,
+pre,
+q,
+ruby,
+s,
+samp,
+section,
+small,
+span,
+strike,
+strong,
+sub,
+summary,
+sup,
+table,
+tbody,
+td,
+tfoot,
+th,
+thead,
+time,
+tr,
+tt,
+u,
+ul,
+var,
+video {
+  border: 0;
+  box-sizing: border-box;
+  margin: 0;
+  padding: 0;
+  vertical-align: baseline;
+}
+
+a {
+  background: var(--theme-border-subdued);
+  color: var(--theme-text);
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+    color: var(--theme-text);
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    color: var(--theme-text);
+    outline: 0;
+  }
+}
+
+ul {
+  list-style-position: inside;
+  list-style-type: '▪';
+  text-indent: -1ch;
+}
+
+ol {
+  list-style-type: '';
+  list-style-position: inside;
+  counter-reset: cupcake;
+  text-indent: -1ch;
+}
+
+ul ul,
+ul ol,
+ol ul,
+ol ol {
+  padding-left: 2ch;
+}
+
+ol li {
+  padding-left: 1ch;
+  counter-increment: cupcake;
+}
+
+ul li:before {
+  content: ' ';
+  display: inline-block;
+  width: 1ch;
+  height: 0;
+  visibility: hidden;
+}
+
+ol li:before {
+  content: counters(cupcake, '.') '. ';
+}
+
+article,
+aside,
+details,
+figcaption,
+figure,
+footer,
+header,
+hgroup,
+menu,
+nav,
+section {
+  display: block;
+}
+
+body.theme-blue {
+  --theme-overlay: var(--color-blue-20-5);
+  --theme-background: var(--color-blue-80);
+  --theme-background-modal: var(--color-blue-70);
+  --theme-background-modal-footer: var(--color-blue-90);
+  --theme-background-input: var(--color-blue-60);
+  --theme-border: var(--color-blue-70);
+  --theme-border-subdued: var(--color-blue-60-2);
+  --theme-text: var(--color-blue-10);
+  --theme-button: var(--color-blue-10);
+  --theme-button-text: var(--color-blue-80);
+  --theme-button-foreground: var(--color-blue-60);
+  --theme-button-background: var(--color-blue-70);
+  --theme-focused-foreground: var(--color-blue-50);
+  --theme-focused-foreground-subdued: var(--color-blue-50-5);
+}
+
+body.theme-light {
+  --theme-overlay: var(--color-black-100-4);
+  --theme-background: var(--color-white);
+  --theme-background-modal: var(--color-gray-20);
+  --theme-background-modal-footer: var(--color-gray-40);
+  --theme-background-input: var(--color-gray-10);
+  --theme-border: var(--color-gray-20);
+  --theme-border-subdued: var(--color-gray-40-2);
+  --theme-text: var(--color-black-100);
+  --theme-button: var(--color-black-100);
+  --theme-button-text: var(--color-white);
+  --theme-button-foreground: var(--color-gray-30);
+  --theme-button-background: var(--color-gray-20);
+  --theme-focused-foreground: var(--color-neon-green-50);
+  --theme-focused-foreground-subdued: var(--color-neon-green-50-5);
+}
+
+body.theme-dark {
+  --theme-overlay: var(--color-black-100-4);
+  --theme-background: var(--color-black-100);
+  --theme-background-modal: var(--color-gray-80);
+  --theme-background-modal-footer: var(--color-gray-70);
+  --theme-background-input: var(--color-gray-60);
+  --theme-border: var(--color-gray-80);
+  --theme-border-subdued: var(--color-gray-70-3);
+  --theme-text: var(--color-white);
+  --theme-button: var(--color-white);
+  --theme-button-text: var(--color-black-100);
+  --theme-button-foreground: var(--color-gray-90);
+  --theme-button-background: var(--color-gray-80);
+  --theme-focused-foreground: var(--color-daybreak-10);
+  --theme-focused-foreground-subdued: var(--color-daybreak-10-5);
+}
+
+body.theme-green {
+  --theme-overlay: var(--color-neon-green-100-4);
+  --theme-background: rgba(44, 255, 5);
+  --theme-background-modal: var(--color-neon-green-50);
+  --theme-background-modal-footer: var(--color-neon-green-50-5);
+  --theme-background-input: var(--color-neon-green-30);
+  --theme-border: var(--color-neon-green-60);
+  --theme-border-subdued: var(--color-neon-green-60-3);
+  --theme-text: var(--color-neon-green-100);
+  --theme-button: var(--color-neon-green-100);
+  --theme-button-text: var(--color-neon-green-10);
+  --theme-button-foreground: var(--color-neon-green-80);
+  --theme-button-background: var(--color-neon-green-70);
+  --theme-focused-foreground: rgba(255, 82, 243, 1);
+  --theme-focused-foreground-subdued: rgba(255, 82, 243, 0.5);
+}
+
+body.theme-black-red {
+  --theme-overlay: var(--color-red-100-4);
+  --theme-background: var(--color-black-100);
+  --theme-background-modal: var(--color-red-70);
+  --theme-background-modal-footer: var(--color-red-80);
+  --theme-background-input: var(--color-red-60);
+  --theme-border: var(--color-red-60-7);
+  --theme-border-subdued: var(--color-red-60-3);
+  --theme-text: var(--color-red-30);
+  --theme-button: var(--color-red-100);
+  --theme-button-text: var(--color-red-20);
+  --theme-button-foreground: var(--color-red-80);
+  --theme-button-background: var(--color-red-90);
+  --theme-focused-foreground: var(--color-gray-70);
+  --theme-focused-foreground-subdued: var(--color-red-70-4);
+}
+
+body.theme-black-teal {
+  --theme-overlay: var(--color-teal-100-4);
+  --theme-background: var(--color-black-100);
+  --theme-background-modal: var(--color-teal-70);
+  --theme-background-modal-footer: var(--color-teal-80);
+  --theme-background-input: var(--color-teal-60);
+  --theme-border: var(--color-teal-60-7);
+  --theme-border-subdued: var(--color-teal-60-3);
+  --theme-text: var(--color-teal-30);
+  --theme-button: var(--color-teal-100);
+  --theme-button-text: var(--color-teal-20);
+  --theme-button-foreground: var(--color-teal-80);
+  --theme-button-background: var(--color-teal-90);
+  --theme-focused-foreground: var(--color-gray-70);
+  --theme-focused-foreground-subdued: var(--color-teal-70-4);
+}
+
+body.theme-black-green {
+  --theme-overlay: var(--color-black-100-4);
+  --theme-background: var(--color-black-100);
+  --theme-background-modal: var(--color-gray-90);
+  --theme-background-modal-footer: var(--color-gray-80);
+  --theme-background-input: var(--color-gray-70);
+  --theme-border: var(--color-gray-80);
+  --theme-border-subdued: var(--color-gray-70-3);
+  --theme-text: var(--color-green-50);
+  --theme-button: var(--color-green-50);
+  --theme-button-text: var(--color-green-80);
+  --theme-button-foreground: var(--color-green-80);
+  --theme-button-background: var(--color-green-90);
+  --theme-focused-foreground: var(--color-gray-30);
+  --theme-focused-foreground-subdued: var(--color-gray-40);
+}
+
+body.font-use-berkeley-mono {
+  --font-family-mono: 'TX02Mono-Regular', sans-serif;
+}
+
+body.font-use-commit-mono {
+  --font-family-mono: 'CommitMono-Regular', sans-serif;
+}
+
+body.font-use-departure-mono {
+  --font-family-mono: 'DepartureMono-Regular', sans-serif;
+}
+
+body.font-use-fira-code {
+  --font-family-mono: 'FiraCode-Regular', sans-serif;
+}
+
+body.font-use-fragment-mono {
+  --font-family-mono: 'FragmentMono-Regular', sans-serif;
+}
+
+body.font-use-iosevka-term {
+  --font-family-mono: 'IosevkaTerm-Regular', sans-serif;
+}
+
+body.font-use-jet-brains-mono {
+  --font-family-mono: 'JetBrainsMono-Regular', sans-serif;
+}
+
+body.font-use-server-mono {
+  --font-family-mono: 'ServerMono-Regular', sans-serif;
+}
+
+body.font-use-sfmono-square {
+  --font-family-mono: 'SFMonoSquare-Regular', sans-serif;
+}
+
+#__next {
+}
+
+html,
+body {
+  --color-black-100: rgba(0, 0, 0, 1);
+  --color-black-100-1: rgba(0, 0, 0, 0.1);
+  --color-black-100-2: rgba(0, 0, 0, 0.2);
+  --color-black-100-4: rgba(0, 0, 0, 0.4);
+  --color-black-daybreak-100: rgba(4, 2, 0, 1);
+  --color-black-daybreak-100-4: rgba(4, 2, 0, 0.4);
+
+  --color-blue-10: rgba(237, 245, 255, 1);
+  --color-blue-100: rgba(0, 17, 65, 1);
+  --color-blue-20: rgba(208, 226, 255, 1);
+  --color-blue-20-1: rgba(208, 226, 255, 0.1);
+  --color-blue-20-2: rgba(208, 226, 255, 0.2);
+  --color-blue-20-5: rgba(208, 226, 255, 0.5);
+  --color-blue-30: rgba(166, 200, 255, 1);
+  --color-blue-40: rgba(120, 169, 255, 1);
+  --color-blue-50: rgba(69, 137, 255, 1);
+  --color-blue-50-5: rgba(69, 137, 255, 0.5);
+  --color-blue-60: rgba(15, 98, 254, 1);
+  --color-blue-60-2: rgba(15, 98, 254, 0.2);
+  --color-blue-70: rgba(0, 67, 206, 1);
+  --color-blue-80: rgba(0, 45, 156, 1);
+  --color-blue-80-4: rgba(0, 45, 156, 0.4);
+  --color-blue-80-6: rgba(0, 45, 156, 0.6);
+  --color-blue-90: rgba(0, 29, 108, 1);
+  --color-blue-90-6: rgba(0, 29, 108, 0.6);
+
+  --color-daybreak: rgba(255, 108, 4, 1);
+  --color-daybreak-1: rgba(255, 108, 4, 0.1);
+  --color-daybreak-10: rgba(239, 99, 0, 1);
+  --color-daybreak-10-5: rgba(239, 99, 0, 0.5);
+  --color-daybreak-2: rgba(255, 108, 4, 0.2);
+  --color-daybreak-20: rgba(220, 91, 0, 1);
+  --color-daybreak-30: rgba(200, 83, 0, 1);
+  --color-daybreak-4: rgba(255, 108, 4, 0.4);
+  --color-daybreak-40: rgba(180, 75, 0, 1);
+  --color-daybreak-40-2: rgba(180, 75, 0, 0.2);
+  --color-daybreak-50: rgba(161, 67, 0, 1);
+  --color-daybreak-60: rgba(141, 59, 0, 1);
+  --color-daybreak-70: rgba(121, 50, 0, 1);
+  --color-daybreak-70-3: rgba(121, 50, 0, 0.3);
+  --color-daybreak-80: rgba(102, 42, 0, 1);
+  --color-daybreak-90: rgba(82, 34, 0, 1);
+
+  --color-gold-30: rgba(241, 194, 27, 1);
+
+  --color-gray-10: rgba(244, 244, 244, 1);
+  --color-gray-100: rgba(22, 22, 22, 1);
+  --color-gray-20: rgba(224, 224, 224, 1);
+  --color-gray-20-7: rgba(224, 224, 224, 0.7);
+  --color-gray-30: rgba(198, 198, 198, 1);
+  --color-gray-30-7: rgba(224, 224, 224, 0.7);
+  --color-gray-40: rgba(168, 168, 168, 1);
+  --color-gray-40-2: rgba(168, 168, 168, 0.2);
+  --color-gray-50: rgba(141, 141, 141, 1);
+  --color-gray-60: rgba(111, 111, 111, 1);
+  --color-gray-70: rgba(82, 82, 82, 1);
+  --color-gray-70-3: rgba(82, 82, 82, 0.3);
+  --color-gray-70-4: rgba(82, 82, 82, 0.4);
+  --color-gray-80: rgba(57, 57, 57, 1);
+  --color-gray-80-6: rgba(57, 57, 57, 0.6);
+  --color-gray-90: rgba(38, 38, 38, 1);
+  --color-gray-90-6: rgba(38, 38, 38, 0.6);
+
+  --color-green-100: rgba(7, 25, 8, 1);
+  --color-green-100: rgba(7, 25, 8, 1);
+  --color-green-90: rgba(2, 45, 13, 1);
+  --color-green-80: rgba(4, 67, 23, 1);
+  --color-green-70: rgba(14, 96, 39, 1);
+  --color-green-60: rgba(25, 128, 56, 1);
+  --color-green-60-3: rgba(25, 128, 56, 0.3);
+  --color-green-50: rgba(36, 161, 72, 1);
+  --color-green-40: rgba(66, 190, 101, 1);
+  --color-green-30: rgba(111, 220, 140, 1);
+  --color-green-20: rgba(167, 240, 186, 1);
+  --color-green-10: rgba(222, 251, 230, 1);
+
+  --color-neon-green-10: rgba(242, 255, 233, 1);
+  --color-neon-green-100: rgba(10, 44, 2, 1);
+  --color-neon-green-100-1: rgba(10, 44, 2, 0.1);
+  --color-neon-green-100-2: rgba(10, 44, 2, 0.2);
+  --color-neon-green-100-4: rgba(10, 44, 2, 0.4);
+  --color-neon-green-20: rgba(213, 255, 191, 1);
+  --color-neon-green-30: rgba(178, 255, 148, 1);
+  --color-neon-green-40: rgba(138, 255, 104, 1);
+  --color-neon-green-50: rgba(92, 255, 59, 1);
+  --color-neon-green-50-5: rgba(92, 255, 59, 0.5);
+  --color-neon-green-60: rgba(46, 231, 29, 1);
+  --color-neon-green-60-3: rgba(46, 231, 29, 0.3);
+  --color-neon-green-70: rgba(0, 207, 0, 1);
+  --color-neon-green-70-3: rgba(0, 207, 0, 0.3);
+  --color-neon-green-70-7: rgba(0, 207, 0, 0.7);
+  --color-neon-green-80: rgba(0, 159, 0, 1);
+  --color-neon-green-80-1: rgba(0, 159, 0, 0.1);
+  --color-neon-green-80-2: rgba(0, 159, 0, 0.2);
+  --color-neon-green-80-4: rgba(0, 159, 0, 0.4);
+  --color-neon-green-90: rgba(16, 107, 2, 1);
+
+  --color-red-100: rgba(45, 7, 9, 1);
+  --color-red-100-4: rgba(45, 7, 9, 0.4);
+  --color-red-90: rgba(82, 4, 8, 1);
+  --color-red-80: rgba(117, 14, 19, 1);
+  --color-red-70: rgba(162, 25, 31, 1);
+  --color-red-60: rgba(218, 30, 40, 1);
+  --color-red-60-7: rgba(218, 30, 40, 0.7);
+  --color-red-60-3: rgba(218, 30, 40, 0.3);
+  --color-red-50: rgba(250, 77, 86, 1);
+  --color-red-40: rgba(255, 131, 137, 1);
+  --color-red-30: rgba(255, 179, 184, 1);
+  --color-red-20: rgba(255, 215, 217, 1);
+  --color-red-10: rgba(255, 241, 241, 1);
+
+  --color-teal-100: rgba(8, 26, 28, 1);
+  --color-teal-100-4: rgba(8, 26, 28, 0.4);
+  --color-teal-90: rgba(2, 43, 48, 1);
+  --color-teal-80: rgba(0, 65, 68, 1);
+  --color-teal-70: rgba(0, 93, 93, 1);
+  --color-teal-70-4: rgba(0, 93, 93, 0.4);
+  --color-teal-70-3: rgba(0, 93, 93, 0.3);
+  --color-teal-60: rgba(0, 125, 121, 1);
+  --color-teal-60-7: rgba(0, 125, 121, 0.7);
+  --color-teal-60-3: rgba(0, 125, 121, 0.3);
+  --color-teal-50: rgba(0, 157, 154, 1);
+  --color-teal-40: rgba(8, 189, 186, 1);
+  --color-teal-30: rgba(61, 219, 217, 1);
+  --color-teal-20: rgba(158, 240, 240, 1);
+  --color-teal-10: rgba(217, 251, 251, 1);
+
+  --color-white: rgba(255, 255, 255, 1);
+  --color-white-1: rgba(255, 255, 255, 0.1);
+  --color-white-2: rgba(255, 255, 255, 0.2);
+  --color-white-4: rgba(255, 255, 255, 0.4);
+
+  --font-family: -apple-system, BlinkMacSystemFont, helvetica neue, helvetica, sans-serif;
+  --font-family-mono: 'IosevkaTerm-Regular', Consolas, monaco, monospace;
+  --font-family-serif: Georgia, Times New Roman, serif;
+
+  --theme-text: var(--color-black-100);
+  --theme-line-height-base: 1.25;
+  --font-size: 20px;
+
+  --z-index-page: 1;
+  --z-index-page-select: 3;
+  --z-index-page-tooltips: 4;
+  --z-index-page-popover: 5;
+  --z-index-page-dropdown-menus: 6;
+  --z-index-page-modals: 10;
+
+  background: var(--theme-background);
+  color: var(--theme-text);
+  font-family: var(--font-family-mono);
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+
+  font-size: var(--font-size);
+  font-optical-sizing: auto;
+  font-weight: 400;
+  font-variant-numeric: tabular-nums lining-nums;
+
+  &::-webkit-scrollbar {
+    background: transparent;
+    height: calc(var(--theme-line-height-base) * 1rem);
+    width: 1ch;
+  }
+
+  &::-webkit-scrollbar-track {
+    background: var(--theme-background);
+  }
+
+  &::-webkit-scrollbar-thumb {
+    background: var(--theme-border);
+  }
+
+  &::-webkit-scrollbar-thumb:hover {
+    background: var(--theme-border);
+  }
+
+  @media (max-width: 568px) {
+    --font-size: 16px;
+  }
+}
+
+================
+File: reference/LICENSE.md
+================
+Copyright (c) 2024 INTERNET DEVELOPMENT STUDIO COMPANY
+
+Permission is hereby granted, free of charge, to any person obtaining
+a copy of this software and associated documentation files (the
+"Software"), to deal in the Software without restriction, including
+without limitation the rights to use, copy, modify, merge, publish,
+distribute, sublicense, and/or sell copies of the Software, and to
+permit persons to whom the Software is furnished to do so, subject to
+the following conditions:
+
+The above copyright notice and this permission notice shall be
+included in all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+
+================
+File: reference/package.json
+================
+{
+  "name": "INTDEV",
+  "description": "A vocation guild and great hall for webmasters. We practice the craft of designing, building, shipping, and maintaining websites, platforms, brands, and applications—end to end.",
+  "engines": {
+    "node": ">=18"
+  },
+  "license": "MIT",
+  "version": "0.0.1",
+  "scripts": {
+    "dev": "next -p 10000",
+    "build": "next build",
+    "start": "PORT=10000 next start",
+    "lint": "next lint"
+  },
+  "dependencies": {
+    "next": "^15.1.3",
+    "react": "^19.0.0",
+    "react-dom": "^19.0.0",
+    "sass": "1.83.0"
+  },
+  "devDependencies": {
+    "@types/node": "^22.10.2",
+    "@types/react": "^19.0.2",
+    "ts-node": "^10.9.2",
+    "typescript": "^5.7.2"
+  }
+}
+
+================
+File: reference/README.md
+================
+# www-internet-v2
+
+TODO
+
+```sh
+npm install
+npm run dev
+```
+
+Go to `http://localhost:10000` in your browser of choice.
+
+### Contact
+
+If you have questions ping me on Twitter, [@wwwjim](https://www.twitter.com/wwwjim). Or you can ping [@internetxstudio](https://x.com/internetxstudio).
+
+================
+File: reference/tsconfig.json
+================
+{
+  "compilerOptions": {
+    "baseUrl": ".",
+    "paths": {
+      "@root/*": [
+        "./*"
+      ],
+      "@system/*": [
+        "./system/*"
+      ],
+      "@demos/*": [
+        "./demos/*"
+      ],
+      "@common/*": [
+        "./common/*"
+      ],
+      "@data/*": [
+        "./data/*"
+      ],
+      "@components/*": [
+        "./components/*"
+      ],
+      "@pages/*": [
+        "./pages/*"
+      ],
+      "@modules/*": [
+        "./modules/*"
+      ]
+    },
+    "target": "es5",
+    "lib": [
+      "dom",
+      "dom.iterable",
+      "esnext"
+    ],
+    "allowJs": true,
+    "skipLibCheck": true,
+    "strict": false,
+    "forceConsistentCasingInFileNames": true,
+    "noEmit": true,
+    "esModuleInterop": true,
+    "module": "esnext",
+    "moduleResolution": "node",
+    "resolveJsonModule": true,
+    "isolatedModules": true,
+    "jsx": "preserve",
+    "incremental": true,
+    "plugins": [
+      {
+        "name": "next"
+      }
+    ],
+    "strictNullChecks": true
+  },
+  "exclude": [
+    "node_modules",
+    "**/*.spec.ts"
+  ],
+  "include": [
+    "next-env.d.ts",
+    "**/*.ts",
+    "**/*.tsx",
+    ".next/types/**/*.ts"
+  ]
+}
+
+================
+File: src/app/globals.css
+================
+@tailwind base;
+@tailwind components;
+@tailwind utilities;
+
+:root {
+  --background: #ffffff;
+  --foreground: #171717;
+}
+
+@media (prefers-color-scheme: dark) {
+  :root {
+    --background: #0a0a0a;
+    --foreground: #ededed;
+  }
+}
+
+body {
+  color: var(--foreground);
+  background: var(--background);
+  font-family: Arial, Helvetica, sans-serif;
+}
+
+================
+File: src/app/layout.tsx
+================
+import type { Metadata } from "next";
+import { Geist, Geist_Mono } from "next/font/google";
+import "./globals.css";
+
+const geistSans = Geist({
+  variable: "--font-geist-sans",
+  subsets: ["latin"],
+});
+
+const geistMono = Geist_Mono({
+  variable: "--font-geist-mono",
+  subsets: ["latin"],
+});
+
+export const metadata: Metadata = {
+  title: "Create Next App",
+  description: "Generated by create next app",
+};
+
+export default function RootLayout({
+  children,
+}: Readonly<{
+  children: React.ReactNode;
+}>) {
+  return (
+    <html lang="en">
+      <body
+        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
+      >
+        {children}
+      </body>
+    </html>
+  );
+}
+
+================
+File: src/app/page.tsx
+================
+import Image from "next/image";
+
+export default function Home() {
+  return (
+    <div className="grid grid-rows-[20px_1fr_20px] items-center justify-items-center min-h-screen p-8 pb-20 gap-16 sm:p-20 font-[family-name:var(--font-geist-sans)]">
+      <main className="flex flex-col gap-8 row-start-2 items-center sm:items-start">
+        <Image
+          className="dark:invert"
+          src="/next.svg"
+          alt="Next.js logo"
+          width={180}
+          height={38}
+          priority
+        />
+        <ol className="list-inside list-decimal text-sm text-center sm:text-left font-[family-name:var(--font-geist-mono)]">
+          <li className="mb-2">
+            Get started by editing{" "}
+            <code className="bg-black/[.05] dark:bg-white/[.06] px-1 py-0.5 rounded font-semibold">
+              src/app/page.tsx
+            </code>
+            .
+          </li>
+          <li>Save and see your changes instantly.</li>
+        </ol>
+
+        <div className="flex gap-4 items-center flex-col sm:flex-row">
+          <a
+            className="rounded-full border border-solid border-transparent transition-colors flex items-center justify-center bg-foreground text-background gap-2 hover:bg-[#383838] dark:hover:bg-[#ccc] text-sm sm:text-base h-10 sm:h-12 px-4 sm:px-5"
+            href="https://vercel.com/new?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
+            target="_blank"
+            rel="noopener noreferrer"
+          >
+            <Image
+              className="dark:invert"
+              src="/vercel.svg"
+              alt="Vercel logomark"
+              width={20}
+              height={20}
+            />
+            Deploy now
+          </a>
+          <a
+            className="rounded-full border border-solid border-black/[.08] dark:border-white/[.145] transition-colors flex items-center justify-center hover:bg-[#f2f2f2] dark:hover:bg-[#1a1a1a] hover:border-transparent text-sm sm:text-base h-10 sm:h-12 px-4 sm:px-5 sm:min-w-44"
+            href="https://nextjs.org/docs?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
+            target="_blank"
+            rel="noopener noreferrer"
+          >
+            Read our docs
+          </a>
+        </div>
+      </main>
+      <footer className="row-start-3 flex gap-6 flex-wrap items-center justify-center">
+        <a
+          className="flex items-center gap-2 hover:underline hover:underline-offset-4"
+          href="https://nextjs.org/learn?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
+          target="_blank"
+          rel="noopener noreferrer"
+        >
+          <Image
+            aria-hidden
+            src="/file.svg"
+            alt="File icon"
+            width={16}
+            height={16}
+          />
+          Learn
+        </a>
+        <a
+          className="flex items-center gap-2 hover:underline hover:underline-offset-4"
+          href="https://vercel.com/templates?framework=next.js&utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
+          target="_blank"
+          rel="noopener noreferrer"
+        >
+          <Image
+            aria-hidden
+            src="/window.svg"
+            alt="Window icon"
+            width={16}
+            height={16}
+          />
+          Examples
+        </a>
+        <a
+          className="flex items-center gap-2 hover:underline hover:underline-offset-4"
+          href="https://nextjs.org?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
+          target="_blank"
+          rel="noopener noreferrer"
+        >
+          <Image
+            aria-hidden
+            src="/globe.svg"
+            alt="Globe icon"
+            width={16}
+            height={16}
+          />
+          Go to nextjs.org →
+        </a>
+      </footer>
+    </div>
+  );
+}
+
+================
+File: .gitignore
+================
+# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
+
+# dependencies
+/node_modules
+/.pnp
+.pnp.*
+.yarn/*
+!.yarn/patches
+!.yarn/plugins
+!.yarn/releases
+!.yarn/versions
+
+# testing
+/coverage
+
+# next.js
+/.next/
+/out/
+
+# production
+/build
+
+# misc
+.DS_Store
+*.pem
+
+# debug
+npm-debug.log*
+yarn-debug.log*
+yarn-error.log*
+.pnpm-debug.log*
+
+# env files (can opt-in for committing if needed)
+.env*
+
+# vercel
+.vercel
+
+# typescript
+*.tsbuildinfo
+next-env.d.ts
+
+================
+File: eslint.config.mjs
+================
+import { dirname } from "path";
+import { fileURLToPath } from "url";
+import { FlatCompat } from "@eslint/eslintrc";
+
+const __filename = fileURLToPath(import.meta.url);
+const __dirname = dirname(__filename);
+
+const compat = new FlatCompat({
+  baseDirectory: __dirname,
+});
+
+const eslintConfig = [
+  ...compat.extends("next/core-web-vitals", "next/typescript"),
+];
+
+export default eslintConfig;
+
+================
+File: next.config.ts
+================
+import type { NextConfig } from "next";
+
+const nextConfig: NextConfig = {
+  /* config options here */
+};
+
+export default nextConfig;
+
+================
+File: package.json
+================
+{
+  "name": "adam-web",
+  "version": "0.1.0",
+  "private": true,
+  "scripts": {
+    "dev": "next dev --turbopack",
+    "build": "next build",
+    "start": "next start",
+    "lint": "next lint"
+  },
+  "dependencies": {
+    "react": "^19.0.0",
+    "react-dom": "^19.0.0",
+    "next": "15.1.6"
+  },
+  "devDependencies": {
+    "typescript": "^5",
+    "@types/node": "^20",
+    "@types/react": "^19",
+    "@types/react-dom": "^19",
+    "postcss": "^8",
+    "tailwindcss": "^3.4.1",
+    "eslint": "^9",
+    "eslint-config-next": "15.1.6",
+    "@eslint/eslintrc": "^3"
+  }
+}
+
+================
+File: postcss.config.mjs
+================
+/** @type {import('postcss-load-config').Config} */
+const config = {
+  plugins: {
+    tailwindcss: {},
+  },
+};
+
+export default config;
+
+================
+File: README.md
+================
+This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).
+
+## Getting Started
+
+First, run the development server:
+
+```bash
+npm run dev
+# or
+yarn dev
+# or
+pnpm dev
+# or
+bun dev
+```
+
+Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.
+
+You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.
+
+This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.
+
+## Learn More
+
+To learn more about Next.js, take a look at the following resources:
+
+- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
+- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.
+
+You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!
+
+## Deploy on Vercel
+
+The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.
+
+Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
+
+================
+File: tailwind.config.ts
+================
+import type { Config } from "tailwindcss";
+
+export default {
+  content: [
+    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
+    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
+    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
+  ],
+  theme: {
+    extend: {
+      colors: {
+        background: "var(--background)",
+        foreground: "var(--foreground)",
+      },
+    },
+  },
+  plugins: [],
+} satisfies Config;
+
+================
+File: tsconfig.json
+================
+{
+  "compilerOptions": {
+    "target": "ES2017",
+    "lib": ["dom", "dom.iterable", "esnext"],
+    "allowJs": true,
+    "skipLibCheck": true,
+    "strict": true,
+    "noEmit": true,
+    "esModuleInterop": true,
+    "module": "esnext",
+    "moduleResolution": "bundler",
+    "resolveJsonModule": true,
+    "isolatedModules": true,
+    "jsx": "preserve",
+    "incremental": true,
+    "plugins": [
+      {
+        "name": "next"
+      }
+    ],
+    "paths": {
+      "@/*": ["./src/*"]
+    }
+  },
+  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
+  "exclude": ["node_modules"]
+}
+ // make a new git repo adam-web, it's a personal site for my friend
+
+use this for all text: https://www.reactbits.dev/text-animations/ascii-text
+
+with a nice emoji ascii skateboard hero, and a nice floating header like raycast with 'adam delaney' in the left, and in the right some nav buttons to go to bio, projects pages 
+
+next15/react19/tailwind v4  //  please just use the react-bits ascii for the emoji hero? i have added a reference webapp in reference/www-internet-v2 - i want you to copy over the components wholesale from that reference directory into the adam-web src/ directory, along with any other modules, maybe the entire reference src/ dir, along with any needed config to get things working in adam-web? we'll need the scss set up to work exactly like in the reference repo. i want a fully functional adam-web with the same exact page layout, and simplified home page hero, a bio page, and a projects page 

# 2025-02-07 23:38:34.332615
+s

# 2025-02-07 23:44:02.714809
+This file is a merged representation of the entire codebase, combining all repository files into a single document.
+Generated by Repomix on: 2025-02-08T07:41:57.140Z
+
+================================================================
+File Summary
+================================================================
+
+Purpose:
+--------
+This file contains a packed representation of the entire repository's contents.
+It is designed to be easily consumable by AI systems for analysis, code review,
+or other automated processes.
+
+File Format:
+------------
+The content is organized as follows:
+1. This summary section
+2. Repository information
+3. Directory structure
+4. Multiple file entries, each consisting of:
+  a. A separator line (================)
+  b. The file path (File: path/to/file)
+  c. Another separator line
+  d. The full contents of the file
+  e. A blank line
+
+Usage Guidelines:
+-----------------
+- This file should be treated as read-only. Any changes should be made to the
+  original repository files, not this packed version.
+- When processing this file, use the file path to distinguish
+  between different files in the repository.
+- Be aware that this file may contain sensitive information. Handle it with
+  the same level of security as you would the original repository.
+
+Notes:
+------
+- Some files may have been excluded based on .gitignore rules and Repomix's
+  configuration.
+- Binary files are not included in this packed representation. Please refer to
+  the Repository Structure section for a complete list of file paths, including
+  binary files.
+
+Additional Info:
+----------------
+
+================================================================
+Directory Structure
+================================================================
+public/
+  file.svg
+  globe.svg
+  next.svg
+  vercel.svg
+  window.svg
+reference/
+  .git/
+    hooks/
+      applypatch-msg.sample
+      commit-msg.sample
+      fsmonitor-watchman.sample
+      post-update.sample
+      pre-applypatch.sample
+      pre-commit.sample
+      pre-merge-commit.sample
+      pre-push.sample
+      pre-rebase.sample
+      pre-receive.sample
+      prepare-commit-msg.sample
+      push-to-checkout.sample
+      update.sample
+    info/
+      exclude
+    logs/
+      refs/
+        heads/
+          main
+        remotes/
+          origin/
+            HEAD
+      HEAD
+    refs/
+      heads/
+        main
+      remotes/
+        origin/
+          HEAD
+    config
+    description
+    FETCH_HEAD
+    HEAD
+    packed-refs
+  app/
+    office/
+      head.tsx
+      layout.tsx
+      page.tsx
+    head.tsx
+    layout.tsx
+    manifest.ts
+    page.tsx
+    robots.ts
+    sitemap.ts
+  common/
+    constants.ts
+    hooks.ts
+    position.ts
+    queries.ts
+    server.ts
+    utilities.ts
+  components/
+    detectors/
+      OutsideElementEvent.tsx
+    examples/
+      AS400.module.scss
+      AS400.tsx
+      DashboardRadar.module.scss
+      DashboardRadar.tsx
+      Denabase.module.scss
+      Denabase.tsx
+      MessagesInterface.tsx
+      UpdatingDataTable.tsx
+    modals/
+      ModalAlert.module.scss
+      ModalAlert.tsx
+      ModalCanvasPlatformer.module.scss
+      ModalCanvasPlatformer.tsx
+      ModalCanvasSnake.module.scss
+      ModalCanvasSnake.tsx
+      ModalChess.module.scss
+      ModalChess.tsx
+      ModalCreateAccount.module.scss
+      ModalCreateAccount.tsx
+      ModalError.module.scss
+      ModalError.tsx
+      ModalMatrixModes.module.scss
+      ModalMatrixModes.tsx
+    page/
+      DefaultActionBar.module.scss
+      DefaultActionBar.tsx
+      DefaultLayout.module.scss
+      DefaultLayout.tsx
+      ModalContext.tsx
+      root.module.scss
+    svg/
+      InternetDevelopmentLogo.tsx
+      InternetDevelopmentLogoMark.tsx
+      Sphere.tsx
+    Accordion.module.scss
+    Accordion.tsx
+    ActionBar.module.scss
+    ActionBar.tsx
+    ActionButton.module.scss
+    ActionButton.tsx
+    ActionListItem.module.scss
+    ActionListItem.tsx
+    AlertBanner.module.scss
+    AlertBanner.tsx
+    Avatar.module.scss
+    Avatar.tsx
+    Badge.module.scss
+    Badge.tsx
+    BarLoader.module.scss
+    BarLoader.tsx
+    BarProgress.module.scss
+    BarProgress.tsx
+    Block.module.scss
+    Block.tsx
+    BlockLoader.module.scss
+    BlockLoader.tsx
+    BreadCrumbs.module.scss
+    BreadCrumbs.tsx
+    Button.module.scss
+    Button.tsx
+    ButtonGroup.module.scss
+    ButtonGroup.tsx
+    Canvas.module.scss
+    Canvas.tsx
+    CanvasPlatformer.module.scss
+    CanvasPlatformer.tsx
+    CanvasSnake.module.scss
+    CanvasSnake.tsx
+    Card.module.scss
+    Card.tsx
+    CardDouble.module.scss
+    CardDouble.tsx
+    Checkbox.module.scss
+    Checkbox.tsx
+    Chessboard.module.scss
+    Chessboard.tsx
+    CodeBlock.module.scss
+    CodeBlock.tsx
+    ComboBox.module.scss
+    ComboBox.tsx
+    ContentFluid.module.scss
+    ContentFluid.tsx
+    DataTable.module.scss
+    DataTable.tsx
+    DatePicker.module.scss
+    DatePicker.tsx
+    DebugGrid.tsx
+    DefaultMetaTags.tsx
+    Dialog.module.scss
+    Dialog.tsx
+    Divider.module.scss
+    Divider.tsx
+    Drawer.module.scss
+    Drawer.tsx
+    DropdownMenu.module.scss
+    DropdownMenu.tsx
+    DropdownMenuTrigger.module.scss
+    DropdownMenuTrigger.tsx
+    Grid.module.scss
+    Grid.tsx
+    HoverComponentTrigger.module.scss
+    HoverComponentTrigger.tsx
+    Indent.module.scss
+    Indent.tsx
+    Input.module.scss
+    Input.tsx
+    ListItem.module.scss
+    ListItem.tsx
+    MatrixLoader.module.scss
+    MatrixLoader.tsx
+    Message.module.scss
+    Message.tsx
+    MessageViewer.module.scss
+    MessageViewer.tsx
+    ModalStack.module.scss
+    ModalStack.tsx
+    ModalTrigger.tsx
+    Navigation.module.scss
+    Navigation.tsx
+    NumberRangeSlider.module.scss
+    NumberRangeSlider.tsx
+    Popover.module.scss
+    Popover.tsx
+    Providers.tsx
+    RadioButton.module.scss
+    RadioButton.tsx
+    RadioButtonGroup.tsx
+    Row.module.scss
+    Row.tsx
+    RowEllipsis.module.scss
+    RowEllipsis.tsx
+    RowSpaceBetween.module.scss
+    RowSpaceBetween.tsx
+    Select.module.scss
+    Select.tsx
+    SidebarLayout.module.scss
+    SidebarLayout.tsx
+    Table.module.scss
+    Table.tsx
+    TableColumn.module.scss
+    TableColumn.tsx
+    TableRow.module.scss
+    TableRow.tsx
+    Text.module.scss
+    Text.tsx
+    TextArea.module.scss
+    TextArea.tsx
+    Tooltip.module.scss
+    Tooltip.tsx
+    TreeView.module.scss
+    TreeView.tsx
+  modules/
+    hotkeys/
+      bound-hotkeys-proxy-provider.tsx
+      hotkeys-provider.tsx
+      index.ts
+      is-hotkey-pressed.ts
+      parse-hotkeys.ts
+      types.ts
+      use-deep-equal-memo.ts
+      use-hotkeys.ts
+      use-record-hotkeys.ts
+      validators.ts
+    cors.ts
+    object-assign.ts
+    vary.ts
+  pages/
+    api/
+      index.ts
+    _app.tsx
+    _document.tsx
+  .gitignore
+  .prettierrc
+  global.scss
+  LICENSE.md
+  package.json
+  README.md
+  tsconfig.json
+src/
+  app/
+    globals.css
+    layout.tsx
+    page.tsx
+.gitignore
+eslint.config.mjs
+next.config.ts
+package.json
+postcss.config.mjs
+README.md
+tailwind.config.ts
+tsconfig.json
+
+================================================================
+Files
+================================================================
+
+================
+File: public/file.svg
+================
+<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
+
+================
+File: public/globe.svg
+================
+<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
+
+================
+File: public/next.svg
+================
+<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
+
+================
+File: public/vercel.svg
+================
+<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
+
+================
+File: public/window.svg
+================
+<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
+
+================
+File: reference/.git/hooks/applypatch-msg.sample
+================
+#!/bin/sh
+#
+# An example hook script to check the commit log message taken by
+# applypatch from an e-mail message.
+#
+# The hook should exit with non-zero status after issuing an
+# appropriate message if it wants to stop the commit.  The hook is
+# allowed to edit the commit message file.
+#
+# To enable this hook, rename this file to "applypatch-msg".
+
+. git-sh-setup
+commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
+test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
+:
+
+================
+File: reference/.git/hooks/commit-msg.sample
+================
+#!/bin/sh
+#
+# An example hook script to check the commit log message.
+# Called by "git commit" with one argument, the name of the file
+# that has the commit message.  The hook should exit with non-zero
+# status after issuing an appropriate message if it wants to stop the
+# commit.  The hook is allowed to edit the commit message file.
+#
+# To enable this hook, rename this file to "commit-msg".
+
+# Uncomment the below to add a Signed-off-by line to the message.
+# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
+# hook is more suited to it.
+#
+# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
+# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"
+
+# This example catches duplicate Signed-off-by lines.
+
+test "" = "$(grep '^Signed-off-by: ' "$1" |
+	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
+	echo >&2 Duplicate Signed-off-by lines.
+	exit 1
+}
+
+================
+File: reference/.git/hooks/fsmonitor-watchman.sample
+================
+#!/usr/bin/perl
+
+use strict;
+use warnings;
+use IPC::Open2;
+
+# An example hook script to integrate Watchman
+# (https://facebook.github.io/watchman/) with git to speed up detecting
+# new and modified files.
+#
+# The hook is passed a version (currently 2) and last update token
+# formatted as a string and outputs to stdout a new update token and
+# all files that have been modified since the update token. Paths must
+# be relative to the root of the working tree and separated by a single NUL.
+#
+# To enable this hook, rename this file to "query-watchman" and set
+# 'git config core.fsmonitor .git/hooks/query-watchman'
+#
+my ($version, $last_update_token) = @ARGV;
+
+# Uncomment for debugging
+# print STDERR "$0 $version $last_update_token\n";
+
+# Check the hook interface version
+if ($version ne 2) {
+	die "Unsupported query-fsmonitor hook version '$version'.\n" .
+	    "Falling back to scanning...\n";
+}
+
+my $git_work_tree = get_working_dir();
+
+my $retry = 1;
+
+my $json_pkg;
+eval {
+	require JSON::XS;
+	$json_pkg = "JSON::XS";
+	1;
+} or do {
+	require JSON::PP;
+	$json_pkg = "JSON::PP";
+};
+
+launch_watchman();
+
+sub launch_watchman {
+	my $o = watchman_query();
+	if (is_work_tree_watched($o)) {
+		output_result($o->{clock}, @{$o->{files}});
+	}
+}
+
+sub output_result {
+	my ($clockid, @files) = @_;
+
+	# Uncomment for debugging watchman output
+	# open (my $fh, ">", ".git/watchman-output.out");
+	# binmode $fh, ":utf8";
+	# print $fh "$clockid\n@files\n";
+	# close $fh;
+
+	binmode STDOUT, ":utf8";
+	print $clockid;
+	print "\0";
+	local $, = "\0";
+	print @files;
+}
+
+sub watchman_clock {
+	my $response = qx/watchman clock "$git_work_tree"/;
+	die "Failed to get clock id on '$git_work_tree'.\n" .
+		"Falling back to scanning...\n" if $? != 0;
+
+	return $json_pkg->new->utf8->decode($response);
+}
+
+sub watchman_query {
+	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
+	or die "open2() failed: $!\n" .
+	"Falling back to scanning...\n";
+
+	# In the query expression below we're asking for names of files that
+	# changed since $last_update_token but not from the .git folder.
+	#
+	# To accomplish this, we're using the "since" generator to use the
+	# recency index to select candidate nodes and "fields" to limit the
+	# output to file names only. Then we're using the "expression" term to
+	# further constrain the results.
+	my $last_update_line = "";
+	if (substr($last_update_token, 0, 1) eq "c") {
+		$last_update_token = "\"$last_update_token\"";
+		$last_update_line = qq[\n"since": $last_update_token,];
+	}
+	my $query = <<"	END";
+		["query", "$git_work_tree", {$last_update_line
+			"fields": ["name"],
+			"expression": ["not", ["dirname", ".git"]]
+		}]
+	END
+
+	# Uncomment for debugging the watchman query
+	# open (my $fh, ">", ".git/watchman-query.json");
+	# print $fh $query;
+	# close $fh;
+
+	print CHLD_IN $query;
+	close CHLD_IN;
+	my $response = do {local $/; <CHLD_OUT>};
+
+	# Uncomment for debugging the watch response
+	# open ($fh, ">", ".git/watchman-response.json");
+	# print $fh $response;
+	# close $fh;
+
+	die "Watchman: command returned no output.\n" .
+	"Falling back to scanning...\n" if $response eq "";
+	die "Watchman: command returned invalid output: $response\n" .
+	"Falling back to scanning...\n" unless $response =~ /^\{/;
+
+	return $json_pkg->new->utf8->decode($response);
+}
+
+sub is_work_tree_watched {
+	my ($output) = @_;
+	my $error = $output->{error};
+	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
+		$retry--;
+		my $response = qx/watchman watch "$git_work_tree"/;
+		die "Failed to make watchman watch '$git_work_tree'.\n" .
+		    "Falling back to scanning...\n" if $? != 0;
+		$output = $json_pkg->new->utf8->decode($response);
+		$error = $output->{error};
+		die "Watchman: $error.\n" .
+		"Falling back to scanning...\n" if $error;
+
+		# Uncomment for debugging watchman output
+		# open (my $fh, ">", ".git/watchman-output.out");
+		# close $fh;
+
+		# Watchman will always return all files on the first query so
+		# return the fast "everything is dirty" flag to git and do the
+		# Watchman query just to get it over with now so we won't pay
+		# the cost in git to look up each individual file.
+		my $o = watchman_clock();
+		$error = $output->{error};
+
+		die "Watchman: $error.\n" .
+		"Falling back to scanning...\n" if $error;
+
+		output_result($o->{clock}, ("/"));
+		$last_update_token = $o->{clock};
+
+		eval { launch_watchman() };
+		return 0;
+	}
+
+	die "Watchman: $error.\n" .
+	"Falling back to scanning...\n" if $error;
+
+	return 1;
+}
+
+sub get_working_dir {
+	my $working_dir;
+	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
+		$working_dir = Win32::GetCwd();
+		$working_dir =~ tr/\\/\//;
+	} else {
+		require Cwd;
+		$working_dir = Cwd::cwd();
+	}
+
+	return $working_dir;
+}
+
+================
+File: reference/.git/hooks/post-update.sample
+================
+#!/bin/sh
+#
+# An example hook script to prepare a packed repository for use over
+# dumb transports.
+#
+# To enable this hook, rename this file to "post-update".
+
+exec git update-server-info
+
+================
+File: reference/.git/hooks/pre-applypatch.sample
+================
+#!/bin/sh
+#
+# An example hook script to verify what is about to be committed
+# by applypatch from an e-mail message.
+#
+# The hook should exit with non-zero status after issuing an
+# appropriate message if it wants to stop the commit.
+#
+# To enable this hook, rename this file to "pre-applypatch".
+
+. git-sh-setup
+precommit="$(git rev-parse --git-path hooks/pre-commit)"
+test -x "$precommit" && exec "$precommit" ${1+"$@"}
+:
+
+================
+File: reference/.git/hooks/pre-commit.sample
+================
+#!/bin/sh
+#
+# An example hook script to verify what is about to be committed.
+# Called by "git commit" with no arguments.  The hook should
+# exit with non-zero status after issuing an appropriate message if
+# it wants to stop the commit.
+#
+# To enable this hook, rename this file to "pre-commit".
+
+if git rev-parse --verify HEAD >/dev/null 2>&1
+then
+	against=HEAD
+else
+	# Initial commit: diff against an empty tree object
+	against=$(git hash-object -t tree /dev/null)
+fi
+
+# If you want to allow non-ASCII filenames set this variable to true.
+allownonascii=$(git config --type=bool hooks.allownonascii)
+
+# Redirect output to stderr.
+exec 1>&2
+
+# Cross platform projects tend to avoid non-ASCII filenames; prevent
+# them from being added to the repository. We exploit the fact that the
+# printable range starts at the space character and ends with tilde.
+if [ "$allownonascii" != "true" ] &&
+	# Note that the use of brackets around a tr range is ok here, (it's
+	# even required, for portability to Solaris 10's /usr/bin/tr), since
+	# the square bracket bytes happen to fall in the designated range.
+	test $(git diff --cached --name-only --diff-filter=A -z $against |
+	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
+then
+	cat <<\EOF
+Error: Attempt to add a non-ASCII file name.
+
+This can cause problems if you want to work with people on other platforms.
+
+To be portable it is advisable to rename the file.
+
+If you know what you are doing you can disable this check using:
+
+  git config hooks.allownonascii true
+EOF
+	exit 1
+fi
+
+# If there are whitespace errors, print the offending file names and fail.
+exec git diff-index --check --cached $against --
+
+================
+File: reference/.git/hooks/pre-merge-commit.sample
+================
+#!/bin/sh
+#
+# An example hook script to verify what is about to be committed.
+# Called by "git merge" with no arguments.  The hook should
+# exit with non-zero status after issuing an appropriate message to
+# stderr if it wants to stop the merge commit.
+#
+# To enable this hook, rename this file to "pre-merge-commit".
+
+. git-sh-setup
+test -x "$GIT_DIR/hooks/pre-commit" &&
+        exec "$GIT_DIR/hooks/pre-commit"
+:
+
+================
+File: reference/.git/hooks/pre-push.sample
+================
+#!/bin/sh
+
+# An example hook script to verify what is about to be pushed.  Called by "git
+# push" after it has checked the remote status, but before anything has been
+# pushed.  If this script exits with a non-zero status nothing will be pushed.
+#
+# This hook is called with the following parameters:
+#
+# $1 -- Name of the remote to which the push is being done
+# $2 -- URL to which the push is being done
+#
+# If pushing without using a named remote those arguments will be equal.
+#
+# Information about the commits which are being pushed is supplied as lines to
+# the standard input in the form:
+#
+#   <local ref> <local oid> <remote ref> <remote oid>
+#
+# This sample shows how to prevent push of commits where the log message starts
+# with "WIP" (work in progress).
+
+remote="$1"
+url="$2"
+
+zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
+
+while read local_ref local_oid remote_ref remote_oid
+do
+	if test "$local_oid" = "$zero"
+	then
+		# Handle delete
+		:
+	else
+		if test "$remote_oid" = "$zero"
+		then
+			# New branch, examine all commits
+			range="$local_oid"
+		else
+			# Update to existing branch, examine new commits
+			range="$remote_oid..$local_oid"
+		fi
+
+		# Check for WIP commit
+		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
+		if test -n "$commit"
+		then
+			echo >&2 "Found WIP commit in $local_ref, not pushing"
+			exit 1
+		fi
+	fi
+done
+
+exit 0
+
+================
+File: reference/.git/hooks/pre-rebase.sample
+================
+#!/bin/sh
+#
+# Copyright (c) 2006, 2008 Junio C Hamano
+#
+# The "pre-rebase" hook is run just before "git rebase" starts doing
+# its job, and can prevent the command from running by exiting with
+# non-zero status.
+#
+# The hook is called with the following parameters:
+#
+# $1 -- the upstream the series was forked from.
+# $2 -- the branch being rebased (or empty when rebasing the current branch).
+#
+# This sample shows how to prevent topic branches that are already
+# merged to 'next' branch from getting rebased, because allowing it
+# would result in rebasing already published history.
+
+publish=next
+basebranch="$1"
+if test "$#" = 2
+then
+	topic="refs/heads/$2"
+else
+	topic=`git symbolic-ref HEAD` ||
+	exit 0 ;# we do not interrupt rebasing detached HEAD
+fi
+
+case "$topic" in
+refs/heads/??/*)
+	;;
+*)
+	exit 0 ;# we do not interrupt others.
+	;;
+esac
+
+# Now we are dealing with a topic branch being rebased
+# on top of master.  Is it OK to rebase it?
+
+# Does the topic really exist?
+git show-ref -q "$topic" || {
+	echo >&2 "No such branch $topic"
+	exit 1
+}
+
+# Is topic fully merged to master?
+not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
+if test -z "$not_in_master"
+then
+	echo >&2 "$topic is fully merged to master; better remove it."
+	exit 1 ;# we could allow it, but there is no point.
+fi
+
+# Is topic ever merged to next?  If so you should not be rebasing it.
+only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
+only_next_2=`git rev-list ^master           ${publish} | sort`
+if test "$only_next_1" = "$only_next_2"
+then
+	not_in_topic=`git rev-list "^$topic" master`
+	if test -z "$not_in_topic"
+	then
+		echo >&2 "$topic is already up to date with master"
+		exit 1 ;# we could allow it, but there is no point.
+	else
+		exit 0
+	fi
+else
+	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
+	/usr/bin/perl -e '
+		my $topic = $ARGV[0];
+		my $msg = "* $topic has commits already merged to public branch:\n";
+		my (%not_in_next) = map {
+			/^([0-9a-f]+) /;
+			($1 => 1);
+		} split(/\n/, $ARGV[1]);
+		for my $elem (map {
+				/^([0-9a-f]+) (.*)$/;
+				[$1 => $2];
+			} split(/\n/, $ARGV[2])) {
+			if (!exists $not_in_next{$elem->[0]}) {
+				if ($msg) {
+					print STDERR $msg;
+					undef $msg;
+				}
+				print STDERR " $elem->[1]\n";
+			}
+		}
+	' "$topic" "$not_in_next" "$not_in_master"
+	exit 1
+fi
+
+<<\DOC_END
+
+This sample hook safeguards topic branches that have been
+published from being rewound.
+
+The workflow assumed here is:
+
+ * Once a topic branch forks from "master", "master" is never
+   merged into it again (either directly or indirectly).
+
+ * Once a topic branch is fully cooked and merged into "master",
+   it is deleted.  If you need to build on top of it to correct
+   earlier mistakes, a new topic branch is created by forking at
+   the tip of the "master".  This is not strictly necessary, but
+   it makes it easier to keep your history simple.
+
+ * Whenever you need to test or publish your changes to topic
+   branches, merge them into "next" branch.
+
+The script, being an example, hardcodes the publish branch name
+to be "next", but it is trivial to make it configurable via
+$GIT_DIR/config mechanism.
+
+With this workflow, you would want to know:
+
+(1) ... if a topic branch has ever been merged to "next".  Young
+    topic branches can have stupid mistakes you would rather
+    clean up before publishing, and things that have not been
+    merged into other branches can be easily rebased without
+    affecting other people.  But once it is published, you would
+    not want to rewind it.
+
+(2) ... if a topic branch has been fully merged to "master".
+    Then you can delete it.  More importantly, you should not
+    build on top of it -- other people may already want to
+    change things related to the topic as patches against your
+    "master", so if you need further changes, it is better to
+    fork the topic (perhaps with the same name) afresh from the
+    tip of "master".
+
+Let's look at this example:
+
+		   o---o---o---o---o---o---o---o---o---o "next"
+		  /       /           /           /
+		 /   a---a---b A     /           /
+		/   /               /           /
+	       /   /   c---c---c---c B         /
+	      /   /   /             \         /
+	     /   /   /   b---b C     \       /
+	    /   /   /   /             \     /
+    ---o---o---o---o---o---o---o---o---o---o---o "master"
+
+
+A, B and C are topic branches.
+
+ * A has one fix since it was merged up to "next".
+
+ * B has finished.  It has been fully merged up to "master" and "next",
+   and is ready to be deleted.
+
+ * C has not merged to "next" at all.
+
+We would want to allow C to be rebased, refuse A, and encourage
+B to be deleted.
+
+To compute (1):
+
+	git rev-list ^master ^topic next
+	git rev-list ^master        next
+
+	if these match, topic has not merged in next at all.
+
+To compute (2):
+
+	git rev-list master..topic
+
+	if this is empty, it is fully merged to "master".
+
+DOC_END
+
+================
+File: reference/.git/hooks/pre-receive.sample
+================
+#!/bin/sh
+#
+# An example hook script to make use of push options.
+# The example simply echoes all push options that start with 'echoback='
+# and rejects all pushes when the "reject" push option is used.
+#
+# To enable this hook, rename this file to "pre-receive".
+
+if test -n "$GIT_PUSH_OPTION_COUNT"
+then
+	i=0
+	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
+	do
+		eval "value=\$GIT_PUSH_OPTION_$i"
+		case "$value" in
+		echoback=*)
+			echo "echo from the pre-receive-hook: ${value#*=}" >&2
+			;;
+		reject)
+			exit 1
+		esac
+		i=$((i + 1))
+	done
+fi
+
+================
+File: reference/.git/hooks/prepare-commit-msg.sample
+================
+#!/bin/sh
+#
+# An example hook script to prepare the commit log message.
+# Called by "git commit" with the name of the file that has the
+# commit message, followed by the description of the commit
+# message's source.  The hook's purpose is to edit the commit
+# message file.  If the hook fails with a non-zero status,
+# the commit is aborted.
+#
+# To enable this hook, rename this file to "prepare-commit-msg".
+
+# This hook includes three examples. The first one removes the
+# "# Please enter the commit message..." help message.
+#
+# The second includes the output of "git diff --name-status -r"
+# into the message, just before the "git status" output.  It is
+# commented because it doesn't cope with --amend or with squashed
+# commits.
+#
+# The third example adds a Signed-off-by line to the message, that can
+# still be edited.  This is rarely a good idea.
+
+COMMIT_MSG_FILE=$1
+COMMIT_SOURCE=$2
+SHA1=$3
+
+/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"
+
+# case "$COMMIT_SOURCE,$SHA1" in
+#  ,|template,)
+#    /usr/bin/perl -i.bak -pe '
+#       print "\n" . `git diff --cached --name-status -r`
+# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
+#  *) ;;
+# esac
+
+# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
+# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
+# if test -z "$COMMIT_SOURCE"
+# then
+#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
+# fi
+
+================
+File: reference/.git/hooks/push-to-checkout.sample
+================
+#!/bin/sh
+
+# An example hook script to update a checked-out tree on a git push.
+#
+# This hook is invoked by git-receive-pack(1) when it reacts to git
+# push and updates reference(s) in its repository, and when the push
+# tries to update the branch that is currently checked out and the
+# receive.denyCurrentBranch configuration variable is set to
+# updateInstead.
+#
+# By default, such a push is refused if the working tree and the index
+# of the remote repository has any difference from the currently
+# checked out commit; when both the working tree and the index match
+# the current commit, they are updated to match the newly pushed tip
+# of the branch. This hook is to be used to override the default
+# behaviour; however the code below reimplements the default behaviour
+# as a starting point for convenient modification.
+#
+# The hook receives the commit with which the tip of the current
+# branch is going to be updated:
+commit=$1
+
+# It can exit with a non-zero status to refuse the push (when it does
+# so, it must not modify the index or the working tree).
+die () {
+	echo >&2 "$*"
+	exit 1
+}
+
+# Or it can make any necessary changes to the working tree and to the
+# index to bring them to the desired state when the tip of the current
+# branch is updated to the new commit, and exit with a zero status.
+#
+# For example, the hook can simply run git read-tree -u -m HEAD "$1"
+# in order to emulate git fetch that is run in the reverse direction
+# with git push, as the two-tree form of git read-tree -u -m is
+# essentially the same as git switch or git checkout that switches
+# branches while keeping the local changes in the working tree that do
+# not interfere with the difference between the branches.
+
+# The below is a more-or-less exact translation to shell of the C code
+# for the default behaviour for git's push-to-checkout hook defined in
+# the push_to_deploy() function in builtin/receive-pack.c.
+#
+# Note that the hook will be executed from the repository directory,
+# not from the working tree, so if you want to perform operations on
+# the working tree, you will have to adapt your code accordingly, e.g.
+# by adding "cd .." or using relative paths.
+
+if ! git update-index -q --ignore-submodules --refresh
+then
+	die "Up-to-date check failed"
+fi
+
+if ! git diff-files --quiet --ignore-submodules --
+then
+	die "Working directory has unstaged changes"
+fi
+
+# This is a rough translation of:
+#
+#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
+if git cat-file -e HEAD 2>/dev/null
+then
+	head=HEAD
+else
+	head=$(git hash-object -t tree --stdin </dev/null)
+fi
+
+if ! git diff-index --quiet --cached --ignore-submodules $head --
+then
+	die "Working directory has staged changes"
+fi
+
+if ! git read-tree -u -m "$commit"
+then
+	die "Could not update working tree to new HEAD"
+fi
+
+================
+File: reference/.git/hooks/update.sample
+================
+#!/bin/sh
+#
+# An example hook script to block unannotated tags from entering.
+# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
+#
+# To enable this hook, rename this file to "update".
+#
+# Config
+# ------
+# hooks.allowunannotated
+#   This boolean sets whether unannotated tags will be allowed into the
+#   repository.  By default they won't be.
+# hooks.allowdeletetag
+#   This boolean sets whether deleting tags will be allowed in the
+#   repository.  By default they won't be.
+# hooks.allowmodifytag
+#   This boolean sets whether a tag may be modified after creation. By default
+#   it won't be.
+# hooks.allowdeletebranch
+#   This boolean sets whether deleting branches will be allowed in the
+#   repository.  By default they won't be.
+# hooks.denycreatebranch
+#   This boolean sets whether remotely creating branches will be denied
+#   in the repository.  By default this is allowed.
+#
+
+# --- Command line
+refname="$1"
+oldrev="$2"
+newrev="$3"
+
+# --- Safety check
+if [ -z "$GIT_DIR" ]; then
+	echo "Don't run this script from the command line." >&2
+	echo " (if you want, you could supply GIT_DIR then run" >&2
+	echo "  $0 <ref> <oldrev> <newrev>)" >&2
+	exit 1
+fi
+
+if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
+	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
+	exit 1
+fi
+
+# --- Config
+allowunannotated=$(git config --type=bool hooks.allowunannotated)
+allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
+denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
+allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
+allowmodifytag=$(git config --type=bool hooks.allowmodifytag)
+
+# check for no description
+projectdesc=$(sed -e '1q' "$GIT_DIR/description")
+case "$projectdesc" in
+"Unnamed repository"* | "")
+	echo "*** Project description file hasn't been set" >&2
+	exit 1
+	;;
+esac
+
+# --- Check types
+# if $newrev is 0000...0000, it's a commit to delete a ref.
+zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
+if [ "$newrev" = "$zero" ]; then
+	newrev_type=delete
+else
+	newrev_type=$(git cat-file -t $newrev)
+fi
+
+case "$refname","$newrev_type" in
+	refs/tags/*,commit)
+		# un-annotated tag
+		short_refname=${refname##refs/tags/}
+		if [ "$allowunannotated" != "true" ]; then
+			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
+			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
+			exit 1
+		fi
+		;;
+	refs/tags/*,delete)
+		# delete tag
+		if [ "$allowdeletetag" != "true" ]; then
+			echo "*** Deleting a tag is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	refs/tags/*,tag)
+		# annotated tag
+		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
+		then
+			echo "*** Tag '$refname' already exists." >&2
+			echo "*** Modifying a tag is not allowed in this repository." >&2
+			exit 1
+		fi
+		;;
+	refs/heads/*,commit)
+		# branch
+		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
+			echo "*** Creating a branch is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	refs/heads/*,delete)
+		# delete branch
+		if [ "$allowdeletebranch" != "true" ]; then
+			echo "*** Deleting a branch is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	refs/remotes/*,commit)
+		# tracking branch
+		;;
+	refs/remotes/*,delete)
+		# delete tracking branch
+		if [ "$allowdeletebranch" != "true" ]; then
+			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	*)
+		# Anything else (is there anything else?)
+		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
+		exit 1
+		;;
+esac
+
+# --- Finished
+exit 0
+
+================
+File: reference/.git/info/exclude
+================
+# git ls-files --others --exclude-from=.git/info/exclude
+# Lines that start with '#' are comments.
+# For a project mostly in C, the following would be a good set of
+# exclude patterns (uncomment them if you want to use them):
+# *.[oa]
+# *~
+
+================
+File: reference/.git/logs/refs/heads/main
+================
+0000000000000000000000000000000000000000 0c32f7764e928daf9473961c488e6e9a855339d2 Luke Nittmann <luke.nittmann@gmail.com> 1738221446 -0800	clone: from https://github.com/internet-development/www-internet-v2.git
+
+================
+File: reference/.git/logs/refs/remotes/origin/HEAD
+================
+0000000000000000000000000000000000000000 0c32f7764e928daf9473961c488e6e9a855339d2 Luke Nittmann <luke.nittmann@gmail.com> 1738221446 -0800	clone: from https://github.com/internet-development/www-internet-v2.git
+
+================
+File: reference/.git/logs/HEAD
+================
+0000000000000000000000000000000000000000 0c32f7764e928daf9473961c488e6e9a855339d2 Luke Nittmann <luke.nittmann@gmail.com> 1738221446 -0800	clone: from https://github.com/internet-development/www-internet-v2.git
+
+================
+File: reference/.git/refs/heads/main
+================
+0c32f7764e928daf9473961c488e6e9a855339d2
+
+================
+File: reference/.git/refs/remotes/origin/HEAD
+================
+ref: refs/remotes/origin/main
+
+================
+File: reference/.git/config
+================
+[core]
+	repositoryformatversion = 0
+	filemode = true
+	bare = false
+	logallrefupdates = true
+	ignorecase = true
+	precomposeunicode = true
+[remote "origin"]
+	url = https://github.com/internet-development/www-internet-v2.git
+	fetch = +refs/heads/*:refs/remotes/origin/*
+[branch "main"]
+	remote = origin
+	merge = refs/heads/main
+	vscode-merge-base = origin/main
+
+================
+File: reference/.git/description
+================
+Unnamed repository; edit this file 'description' to name the repository.
+
+================
+File: reference/.git/FETCH_HEAD
+================
+0c32f7764e928daf9473961c488e6e9a855339d2		branch 'main' of https://github.com/internet-development/www-internet-v2
+
+================
+File: reference/.git/HEAD
+================
+ref: refs/heads/main
+
+================
+File: reference/.git/packed-refs
+================
+# pack-refs with: peeled fully-peeled sorted 
+0c32f7764e928daf9473961c488e6e9a855339d2 refs/remotes/origin/main
+
+================
+File: reference/app/office/head.tsx
+================
+import DefaultMetaTags from '@components/DefaultMetaTags';
+
+export default async function Head({ params }) {
+  return (
+    <>
+      <DefaultMetaTags />
+    </>
+  );
+}
+
+================
+File: reference/app/office/layout.tsx
+================
+import Providers from '@components/Providers';
+
+export default function RootLayout({ children }: { children: React.ReactNode }) {
+  return (
+    <html lang="en-us">
+      <body className="theme-light">
+        <Providers>{children}</Providers>
+      </body>
+    </html>
+  );
+}
+
+================
+File: reference/app/office/page.tsx
+================
+import '@root/global.scss';
+
+import * as Constants from '@common/constants';
+import * as Utilities from '@common/utilities';
+
+import Accordion from '@components/Accordion';
+import ActionListItem from '@components/ActionListItem';
+import Canvas from '@components/Canvas';
+import DefaultLayout from '@components/page/DefaultLayout';
+import InternetDevelopmentLogo from '@components/svg/InternetDevelopmentLogo';
+import InternetDevelopmentLogoMark from '@components/svg/InternetDevelopmentLogoMark';
+import Table from '@components/Table';
+import TableRow from '@components/TableRow';
+import TableColumn from '@components/TableColumn';
+import Package from '@root/package.json';
+import styles from '@components/page/root.module.scss';
+
+export const dynamic = 'force-static';
+
+const VIDEO_URL = 'https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/03025ac3-aa78-4a21-ac3c-a465cb792d39.mp4';
+
+export async function generateMetadata({ params, searchParams }) {
+  const title = `${Package.name} - OFFICE`;
+  const description = `Learn more about our Office in Pike Place, Seattle`;
+  const url = 'https://internet.dev';
+  const handle = '@internetxstudio';
+
+  return {
+    description,
+    icons: {
+      icon: '/favicon-32x32.png',
+      shortcut: '/favicon-16x16.png',
+    },
+    metadataBase: new URL('https://internet.dev/office'),
+    openGraph: {
+      description,
+      images: [
+        {
+          url: 'https://next-s3-public.s3.us-west-2.amazonaws.com/internet-dev/intdev.png',
+          width: 1500,
+          height: 785,
+        },
+      ],
+      title,
+      type: 'website',
+      url,
+    },
+    title,
+    twitter: {
+      card: 'summary_large_image',
+      description,
+      handle,
+      images: ['https://next-s3-public.s3.us-west-2.amazonaws.com/internet-dev/intdev.png'],
+      title,
+      url,
+    },
+    url,
+  };
+}
+
+export default async function Page(props) {
+  return (
+    <DefaultLayout previewPixelSRC="https://intdev-global.s3.us-west-2.amazonaws.com/template-app-icon.png">
+      <div className={styles.row}>
+        <div className={styles.column} style={{ height: '176px', padding: 0 }}>
+          <Canvas />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <InternetDevelopmentLogo height="24px" />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <img className={styles.image} src="https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/7e6088bb-4ce2-47d9-9dfd-d658faed484d.png" />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <aside className={styles.aside}>
+            Champion Building, Pike Place
+            <br />
+            Seattle, Washington
+            <br />
+            United States of America, Earth
+          </aside>
+          <br />
+          <p className={styles.p}>We invite builders who love trying new things and learning to collaborate with us, guided by our values: everything matters, support your friends, and doing your best is more than enough.</p>
+          <br />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <img className={styles.image} src="https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/0bc8d758-d4a9-412e-aa28-1fa6e6481a9a.jpg" />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`What does the INTDEV office offer?`}>
+            <br />
+            Our space offers hardwood floors, symmetrical fiber internet, a local area network, two full kitchens, three meeting booths, a server room, lunch tables, and dedicated workstations. With 24/7 access and amenities like a color printer, shredder, scanner, gallery lounge, and triple-filtered water, we foster a collaborative environment where you can build your vision alongside like-minded peers.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Apply on Users Garden
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Manage your account
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+              Read our Office Use Agreement
+            </ActionListItem>
+            <br />
+            <br /> <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <img className={styles.image} src="https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/6dcedf7d-82d1-45db-a53e-31de509a7759.jpg" />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How do I work with INTDEV at their office?`}>
+            <br />
+            You can find an application link below or by reaching out through social. Please note that the INTDEV reserved desks are invite-only and intended for those with a genuine interest in building things together.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Apply on Users Garden
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Manage your account
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+              Read our Office Use Agreement
+            </ActionListItem>
+            <br />
+            <br /> <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <img className={styles.image} src="https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/9c524b6a-855e-4329-88cd-7bb81796fcc2.jpg" />
+          <br />
+        </div>
+      </div>
+
+      <footer className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <ActionListItem icon={`⊹`} href="https://wireframes.internet.dev/" target="_blank">
+            Explore INTDEV's open source work
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://github.com/orgs/internet-development/repositories" target="_blank">
+            Follow us on GitHub
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://www.linkedin.com/company/internet-dev" target="_blank">
+            Follow us on LinkedIn
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://www.instagram.com/internetdevelopmentstudio/" target="_blank">
+            Follow us on Instagram
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://read.cv/teams/intdev" target="_blank">
+            Follow us on Read.cv
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://x.com/internetxstudio" target="_blank">
+            Follow us on X
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+            Get our attention on Telegram
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="/">
+            Go home
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+            Manage your account
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-acceptable-use" target="_blank">
+            Read our Acceptable Use Policy
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+            Read our Office Use Agreement
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-privacy-policy" target="_blank">
+            Read our Privacy Policy
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-terms-of-service" target="_blank">
+            Read our Terms of Use
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://github.com/internet-development/www-internet-v2" target="_blank">
+            View source
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev" target="_blank">
+            Write a post
+          </ActionListItem>
+          <br />
+          Copyright © 2025. All rights reserved.
+          <br />
+          <br />
+          <br />
+        </div>
+      </footer>
+    </DefaultLayout>
+  );
+}
+
+================
+File: reference/app/head.tsx
+================
+import DefaultMetaTags from '@components/DefaultMetaTags';
+
+export default async function Head({ params }) {
+  return (
+    <>
+      <DefaultMetaTags />
+    </>
+  );
+}
+
+================
+File: reference/app/layout.tsx
+================
+import Providers from '@components/Providers';
+
+export default function RootLayout({ children }: { children: React.ReactNode }) {
+  return (
+    <html lang="en-us">
+      <body className="theme-light">
+        <Providers>{children}</Providers>
+      </body>
+    </html>
+  );
+}
+
+================
+File: reference/app/manifest.ts
+================
+import Package from '@root/package.json';
+
+import { MetadataRoute } from 'next';
+
+export default function manifest(): MetadataRoute.Manifest {
+  return {
+    background_color: '#ffffff',
+    description: Package.description,
+    display: 'standalone',
+    icons: [
+      {
+        src: '/favicon.ico',
+        sizes: 'any',
+        type: 'image/x-icon',
+      },
+    ],
+    name: Package.name,
+    short_name: Package.name,
+    start_url: '/',
+    theme_color: '#ffffff',
+  };
+}
+
+================
+File: reference/app/page.tsx
+================
+import '@root/global.scss';
+
+import * as Constants from '@common/constants';
+import * as Utilities from '@common/utilities';
+
+import Accordion from '@components/Accordion';
+import ActionListItem from '@components/ActionListItem';
+import Canvas from '@components/Canvas';
+import DefaultLayout from '@components/page/DefaultLayout';
+import InternetDevelopmentLogo from '@components/svg/InternetDevelopmentLogo';
+import InternetDevelopmentLogoMark from '@components/svg/InternetDevelopmentLogoMark';
+import Table from '@components/Table';
+import TableRow from '@components/TableRow';
+import TableColumn from '@components/TableColumn';
+import Package from '@root/package.json';
+import styles from '@components/page/root.module.scss';
+
+export const dynamic = 'force-static';
+
+const VIDEO_URL = 'https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/03025ac3-aa78-4a21-ac3c-a465cb792d39.mp4';
+
+export async function generateMetadata({ params, searchParams }) {
+  const title = Package.name;
+  const description = Package.description;
+  const url = 'https://internet.dev';
+  const handle = '@internetxstudio';
+
+  return {
+    description,
+    icons: {
+      icon: '/favicon-32x32.png',
+      shortcut: '/favicon-16x16.png',
+    },
+    metadataBase: new URL('https://internet.dev'),
+    openGraph: {
+      description,
+      images: [
+        {
+          url: 'https://next-s3-public.s3.us-west-2.amazonaws.com/internet-dev/intdev.png',
+          width: 1500,
+          height: 785,
+        },
+      ],
+      title,
+      type: 'website',
+      url,
+    },
+    title,
+    twitter: {
+      card: 'summary_large_image',
+      description,
+      handle,
+      images: ['https://next-s3-public.s3.us-west-2.amazonaws.com/internet-dev/intdev.png'],
+      title,
+      url,
+    },
+    url,
+  };
+}
+
+export default async function Page(props) {
+  return (
+    <DefaultLayout previewPixelSRC="https://intdev-global.s3.us-west-2.amazonaws.com/template-app-icon.png">
+      <div className={styles.row}>
+        <div className={styles.column} style={{ height: '176px', padding: 0 }}>
+          <Canvas />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <video className={styles.video} src={VIDEO_URL} autoPlay muted loop playsInline preload="auto">
+            Your browser does not support the video tag.
+          </video>
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <h1 className={styles.h1}>Internet Development Studio Company ("INTDEV")</h1>
+          <aside className={styles.aside}>
+            Champion Building, Pike Place
+            <br />
+            Seattle, Washington
+            <br />
+            United States of America, Earth
+          </aside>
+          <br />
+          <p className={styles.p}>An american vocation guild and great hall for webmasters. Every day we practice the craft of designing, building, shipping, and maintaining websites, platforms, brands, and applications—end to end.</p>
+          <br />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <ActionListItem icon={`⊹`} href="https://wireframes.internet.dev/" target="_blank">
+            Explore INTDEV's open source work
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+            Get our attention on Telegram
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://sacred.computer" target="_blank">
+            Go explore SRCL
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="/office">
+            Learn more about the Pike Place office
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://www.beautifulthings.xyz/" target="_blank">
+            Look at beautiful things
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+            Manage your account
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev" target="_blank">
+            Write a post
+          </ActionListItem>
+
+          <br />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`What does the Internet Development Studio Company ("INTDEV") actually do?`}>
+            <br />
+            We provide a team you can hire to get things done.
+            <br />
+            <br />
+            That team is a 6 person dedicated tiger team specializing in delivering high-performance web applications, internal tools, branding assets, presentations, static websites, LLM interfaces, illustrations, productivity applications, technical writing, and general web development services. By embedding with up to four companies at a time, we allocate a shared bandwidth of 360 hours per week to drive productivity and deliver results. It’s a process we genuinely enjoy, and every major milestone we knock out helps us grow and learn.
+            <br />
+            <br />
+            We also provide an invite-only space in Seattle for people to work alongside us, offering a collaborative environment that also serves the portfolio venture companies of{' '}
+            <a href="https://mana.inc" target="_blank">
+              Mana Industries Fund 1 LP
+            </a>{' '}
+            and contributors.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://wireframes.internet.dev/" target="_blank">
+              Explore INTDEV's open source work
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`Who did INTDEV work for in 2024?`}>
+            <br />
+            Aliaksandr Hudzilin, Bakken & Bæck, Beautiful Things, El Cap Capital, Google, Mana Industries, Microsoft, Protocol Labs and various startups.
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`Who is INTDEV working for in 2025?`}>
+            <br />
+            Microsoft
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How does an engagement with INTDEV typically feel?`}>
+            <br />
+            Imagine hiring your own team, and one that already has a well-established design and engineering culture.
+            <br />
+            <br />
+            By hiring us, you gain a team that works seamlessly in person, is highly productive, and has a proven track record. This is all made possible by the extensive successful startup experience shared across our team.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How much does it cost to hire this team?`}>
+            <br />
+            <Table>
+              <TableRow>
+                <TableColumn>ONE MONTH</TableColumn>
+                <TableColumn>$70,000 USD</TableColumn>
+              </TableRow>
+
+              <TableRow>
+                <TableColumn>THREE MONTHS</TableColumn>
+                <TableColumn>$195,000 USD</TableColumn>
+              </TableRow>
+
+              <TableRow>
+                <TableColumn>SIX MONTHS</TableColumn>
+                <TableColumn>$360,000 USD</TableColumn>
+              </TableRow>
+
+              <TableRow>
+                <TableColumn>NINE MONTHS</TableColumn>
+                <TableColumn>$495,000 USD</TableColumn>
+              </TableRow>
+
+              <TableRow>
+                <TableColumn>TWELVE MONTHS</TableColumn>
+                <TableColumn>$600,000 USD</TableColumn>
+              </TableRow>
+            </Table>
+            <br />
+            From the start, it will feel like you built this team yourself.
+            <br />
+            <br />
+            We don’t do change orders—instead, we aim to complete as much work as possible within our estimates while you have us on retainer. This approach is ideal for situations where you want to accomplish a lot efficiently.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`Why do I have to hire the full six-person team?`}>
+            <br />
+            Our studio fosters deep in-person collaboration, where we openly discuss challenges and make a concerted effort to learn and improve our skills through shared experiences.
+            <br />
+            <br />
+            This approach strengthens our team and enables us to support venture-backed companies with tight deadlines and ambitious goals. By learning from each other’s mistakes, we continually refine our work and strive to hit the mark every time.
+            <br />
+            <br />
+            Also, it should be known that, based on our prices, you're only paying the cost of a full-time employee for a much larger headcount. A lot of clients find this to be high value.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`Is there a discount if we want to work with less people from the INTDEV?`}>
+            <br />
+            No, but as a client, you are welcome to work with fewer team members if that is your preference.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How does working with the INTDEV work day to day?`}>
+            <br />
+            Here’s a glimpse of what it’s like to collaborate with our six-person team.
+            <br />
+            <br />
+            <Accordion defaultValue={true} title={`Discovery Video Call`}>
+              <br />
+              We begin with a video call to understand your goals and explore how our team can deliver results. We’re flexible with your preferred video chat platform.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`[OPTIONAL] First Meeting in Seattle, WA`}>
+              <br />
+              Join us at our Pike Place office to work alongside our team as we dive into your goals. You’re welcome to use our meeting rooms and open desks, meet other companies, and enjoy engaging conversations. We always have filtered water and are here on weekends, too.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Onboarding`}>
+              <br />
+              From day one, we integrate seamlessly into your team, bringing years of experience and familiarity with compliance requirements like NDAs. Comfortable across Linux, MacOS, and Windows, we’re happy to train your employees when needed and adapt to your existing tools and processes.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Embedding`}>
+              <br />
+              We adapt to the roles you need, whether following your direction or advocating for key features, integrating into your daily routine at whatever level you require. Comfortable with agile, waterfall, or even a “move fast and break things” approach, we’re always ready to embrace challenges.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Working in the Office`}>
+              <br />
+              We can host stand-ups and any meetings you need in our office, with meeting rooms perfect for bringing in your own customers. Sharing the space often leads to team-building, and we’re happy to host and cook for large groups with a little notice. <br />
+              <br />
+              Pike Place offers great restaurants and scenic spots for breaks, though guest parking isn’t available, so please plan accordingly. Our office features symmetrical fiber internet and quiet workspaces, and we keep our client list small to stay flexible and accommodating.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Technical Program Management`}>
+              <br />
+              We help identify your Technical Program Management needs, aligning your team around a shared goal with fresh perspectives. We guide long-term strategic decisions, define “done” from the start, and set expectations upfront. We bring experience from high-profile projects while focusing on supporting your vision and helping you achieve it.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Zero to One`}>
+              <br />
+              With over a decade of startup experience, our design partners help bring your product to market for the first time and support future launches, treating each launch as a personal milestone. We love exploring logos, drawing inspiration from our collection of books, and rely on tools like Figma, Sketch, Photoshop, and Illustrator. <br />
+              <br />
+              Our network also includes some of Seattle’s top photographers and videographers, many of whom work directly in our space.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Get in Quick`}>
+              <br />
+              When you need quick results without extra discussion, we’re ready to jump in, whether it’s tackling long-standing backlogs, handling one-off tasks, or adding missing design system components. We can deliver results without delay. <br />
+              <br />
+              We’re unfazed by technical debt, comfortable managing tricky repository forks, and always ready to take on backlog tasks—just let us know how we can help.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Tooling Investment`}>
+              <br />
+              We know a team’s identity is often shaped by the tools they use. Whether you’re looking to strengthen your current toolkit or start fresh, we can help. Our expertise spans tools like Next.js, Postgres, Figma, GSAP, and Tailwind, along with CSS dialects like CSS-in-JS and email-compliant inline styles. <br />
+              <br />
+              With one of our partners contributing to Expo (React Native), we deeply value tooling. We respect your existing tools while embracing fresh starts that energize teams and foster growth. Involve us in consulting meetings for fresh perspectives—we’re always ready to explore new technologies, including LLMs.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Launch, Maintain, and Survive`}>
+              <br />
+              Your uptime is critical, and while we can’t promise 99.9999999% uptime at scale, we specialize in keeping websites running with low effort on your part. This allows you to focus on growing your product and engaging your customers without unnecessary distractions.
+              <br />
+              <br />
+              Whether you need help with IPFS, managing VPS, consulting on on-premise solutions, or working with tools like Fly, Vercel, and Render, we’ve got you covered. With experience in GCE, GCS, AWS EC2, S3, and database backups, we’re here to ensure your systems work.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Supporting Volatility`}>
+              <br />
+              If you’re navigating changes in priorities, we offer the flexibility to help you adapt. We understand that leadership shifts happen, and we’re here to support you while keeping your team focused on what matters most. Whether starting fresh or removing what’s not working, our flexible deal structure evolves with your needs, always aligned with your goal of driving success and growth for your business.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Libraries and Documentation`}>
+              <br />
+              We value great documentation and design systems, even if they’re not always a priority for everyone. We can create clear, user-friendly documentation and develop intuitive design systems for your web products, building tools to make these processes more efficient. <br />
+              <br />
+              Whether working with tools like Scalar, GitBook, and Notion or contributing to publications, blog posts, and video tutorials, we’re happy to provide custom solutions to meet your needs.
+              <br />
+              <br />
+            </Accordion>
+            <br />
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`What is INTDEV's relationship with the University of Washington?`}>
+            <br />
+            If your department requires a website that complies with the latest legal standards, is powered by modern web tooling, and boasts a functional design, partner with us. We read 313 pages of documentation for you.
+            <br />
+            <br />
+            We admire the{' '}
+            <a href="https://www.washington.edu/" target="_blank">
+              University of Washington
+            </a>
+            ’s dedication to innovation and inclusivity, and the alumni who work in our office proudly align our mission with these values. As designers, we are committed to ensuring that every website we create is not only modern but also accessible.
+            <br />
+            <br />
+            <a href="https://www.federalregister.gov/documents/2024/04/24/2024-07758/nondiscrimination-on-the-basis-of-disability-accessibility-of-web-information-and-services-of-state" target="_blank">
+              The guidelines
+            </a>{' '}
+            released by the Department of Justice under Title II of the Americans with Disabilities Act (ADA) have set a new bar for digital accessibility, which we embrace. Effective April 24, 2024, these standards require all web content to achieve compliance by April 24, 2026.
+            <br />
+            <br />
+            <Accordion defaultValue={true} title={`Ensuring all web content and mobile applications meet the Web Content Accessibility Guidelines (WCAG) 2.1, Level AA standards.`}>
+              <br />
+              This is a cornerstone of our approach to accessibility. We achieve this through rigorous processes and meticulous attention to detail. Our team follows best practices to make sure every user has a seamless and inclusive experience.
+              <br />
+              <br />
+              <Table>
+                <TableRow>
+                  <TableColumn>Semantic HTML</TableColumn>
+                  <TableColumn>We use semantic HTML to define the structure and meaning of web content, ensuring assistive technologies can interpret and navigate the site effectively.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Keyboard Accessibility</TableColumn>
+                  <TableColumn>We ensure all features are accessible via keyboard for users who cannot use a mouse.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Color Contrast</TableColumn>
+                  <TableColumn>We employ high-contrast color schemes to ensure text is readable by users with visual impairments while adhering to UW’s brand guidelines.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Alternative Text</TableColumn>
+                  <TableColumn>We provide descriptive text for images and multimedia content, helping screen readers convey information accurately to visually impaired users.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Resizable Text</TableColumn>
+                  <TableColumn>Our designs allow for text resizing without loss of content or functionality, catering to users who need larger fonts.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Error Identification and Suggestion</TableColumn>
+                  <TableColumn>Our forms are designed to identify errors and provide suggestions for correction, improving usability for those with cognitive disabilities.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Consistent Navigation</TableColumn>
+                  <TableColumn>Our predictable navigation and layouts help users with cognitive and learning disabilities.</TableColumn>
+                </TableRow>
+              </Table>
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Providing alternative text for all visual media, including images, videos, and interactive elements.`}>
+              <br />
+              Alternative text ensures that all users, including those with visual impairments, can fully understand and engage with all content on the website.
+              <br />
+              <br />
+              <Table>
+                <TableRow>
+                  <TableColumn>Descriptive Alt Text for Images</TableColumn>
+                  <TableColumn>We provide concise and descriptive alternative text for all images, enabling screen reader users to understand the context and content of visual elements.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Detailed Descriptions for Complex Images</TableColumn>
+                  <TableColumn>For complex images such as charts, infographics, or detailed diagrams, we offer extended descriptions to convey all critical information effectively.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Captions for Videos</TableColumn>
+                  <TableColumn>All video content includes synchronized captions, ensuring that users with hearing impairments can access the information being presented.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Transcripts for Audio Content</TableColumn>
+                  <TableColumn>We provide textual transcripts for all audio content, making it accessible to users with hearing impairments and allowing for easier comprehension during listening.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Text Alternatives for Interactive Elements</TableColumn>
+                  <TableColumn>Interactive elements, such as buttons, forms, and dynamic content, come with clear text alternatives or labels that describe their function and purpose.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Accessible Icons</TableColumn>
+                  <TableColumn>We use ARIA labels or alternative text for icons and other graphical elements to ensure they communicate their meaning to assistive technologies.</TableColumn>
+                </TableRow>
+              </Table>
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Making complex navigational structures accessible with clear and user-friendly interfaces.`}>
+              <br />
+              This is a fundamental aspect of our design philosophy. We believe that every user deserves an accessible browsing experience, regardless of the complexity of the content.
+              <br />
+              <br />
+              <Table>
+                <TableRow>
+                  <TableColumn>Logical Menu Hierarchies</TableColumn>
+                  <TableColumn>We design navigation menus with logical hierarchies, ensuring that users can easily find the information they need with minimal clicks.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Descriptive Links</TableColumn>
+                  <TableColumn>All links are clearly labeled with descriptive text, so users understand where each link will take them, aiding both screen readers and visual users.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Accessible Dropdown Menus</TableColumn>
+                  <TableColumn>Our dropdown menus are designed to be keyboard-accessible and screen reader-friendly, ensuring inclusivity for all users.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Breadcrumb Navigation</TableColumn>
+                  <TableColumn>We employ breadcrumb navigation to help users understand their current location within the website and easily backtrack if necessary.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Search Functionality</TableColumn>
+                  <TableColumn>We integrate advanced search functionalities, allowing users to quickly locate specific content without navigating through multiple menus.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Consistent Layouts</TableColumn>
+                  <TableColumn>We maintain consistency in layouts and navigation across all pages, so users can predict and understand where to find information.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Skip Navigation Links</TableColumn>
+                  <TableColumn>Our skip links allow users to bypass repetitive content and navigate directly to the main content, which is particularly helpful for screen reader users.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Visual Indicators</TableColumn>
+                  <TableColumn>Clear visual indicators highlight the current page or section, helping users keep track of their navigation path.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>ARIA Landmarks</TableColumn>
+                  <TableColumn>We implement ARIA (Accessible Rich Internet Applications) landmarks to define regions of a page, making it easier for screen reader users to navigate and skip to different sections.</TableColumn>
+                </TableRow>
+              </Table>
+              <br />
+              <br />
+            </Accordion>
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How do I join INTDEV as a Webmaster?`}>
+            <br />
+            In 2025, we plan to grow our team from six to eight members. If you’re passionate about the vocation of being a Webmaster, let’s talk.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://wireframes.internet.dev/examples/features/job-posting" target="_blank">
+              View the job
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`What does the INTDEV office offer?`}>
+            <br />
+            Our space offers hardwood floors, symmetrical fiber internet, a local area network, two full kitchens, three meeting booths, a server room, lunch tables, and dedicated workstations. With 24/7 access and amenities like a color printer, shredder, scanner, gallery lounge, and triple-filtered water, we foster a collaborative environment where you can build your vision alongside like-minded peers.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Apply on Users Garden
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Manage your account
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+              Read our Office Use Agreement
+            </ActionListItem>
+            <br />
+            <br /> <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How do I work with INTDEV at their office?`}>
+            <br />
+            You can find an application link below or by reaching out through social. Please note that the INTDEV reserved desks are invite-only and intended for those with a genuine interest in building things together.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Apply on Users Garden
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Manage your account
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+              Read our Office Use Agreement
+            </ActionListItem>
+            <br />
+            <br /> <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          Use this SVG for a logo without the word “INTDEV.”
+          <br />
+          <br />
+          <InternetDevelopmentLogoMark height="48px" />
+          <br />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          Use this SVG for a logo that includes our brand name.
+          <br />
+          <br />
+          <InternetDevelopmentLogo height="48px" />
+          <br />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <footer className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <img className={styles.image} src="https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/2fb7e012-4fa9-4446-9bf4-e2c5c7e4992a.jpg" />
+          <ActionListItem icon={`⊹`} href="https://wireframes.internet.dev/" target="_blank">
+            Explore INTDEV's open source work
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://bsky.app/profile/internetstudio.bsky.social" target="_blank">
+            Follow us on Bluesky
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://github.com/orgs/internet-development/repositories" target="_blank">
+            Follow us on GitHub
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://www.linkedin.com/company/internet-dev" target="_blank">
+            Follow us on LinkedIn
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://www.instagram.com/internetdevelopmentstudio/" target="_blank">
+            Follow us on Instagram
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://read.cv/teams/intdev" target="_blank">
+            Follow us on Read.cv
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://x.com/internetxstudio" target="_blank">
+            Follow us on X
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+            Get our attention on Telegram
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://sacred.computer" target="_blank">
+            Go explore SRCL
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="/office">
+            Learn more about the Pike Place office
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+            Manage your account
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-acceptable-use" target="_blank">
+            Read our Acceptable Use Policy
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+            Read our Office Use Agreement
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-privacy-policy" target="_blank">
+            Read our Privacy Policy
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-terms-of-service" target="_blank">
+            Read our Terms of Use
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://github.com/internet-development/www-internet-v2" target="_blank">
+            View source
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev" target="_blank">
+            Write a post
+          </ActionListItem>
+          <br />
+          Copyright © 2025. All rights reserved.
+          <br />
+          <br />
+          <br />
+        </div>
+      </footer>
+    </DefaultLayout>
+  );
+}
+
+================
+File: reference/app/robots.ts
+================
+import { MetadataRoute } from 'next';
+
+export default function robots(): MetadataRoute.Robots {
+  return {
+    rules: {
+      userAgent: '*',
+      allow: '/',
+      disallow: '/api/',
+    },
+    sitemap: 'https://internet.dev/sitemap.xml',
+  };
+}
+
+================
+File: reference/app/sitemap.ts
+================
+import { MetadataRoute } from 'next';
+
+export default function sitemap(): MetadataRoute.Sitemap {
+  return [
+    {
+      url: 'https://internet.dev',
+      lastModified: new Date(),
+    },
+  ];
+}
+
+================
+File: reference/common/constants.ts
+================
+export const MAX_SIZE_BYTES = 15728640;
+
+// NOTE(jimmylee):
+// https://github.com/internet-development/apis
+// export const API = `http://localhost:10001/api`;
+export const API = `https://api.internet.dev/api`;
+
+export const Users = {
+  tiers: {
+    UNVERIFIED: 0,
+    VERIFIED: 10,
+    PAYING: 20,
+    GENERAL_CO_WORKING: 30,
+    PARTNER: 40,
+    ADMIN: 100,
+  },
+};
+
+export const Tiers = {
+  PAYING: 899,
+  GENERAL_CO_WORKING: 32900,
+  PARTNER: 279000,
+};
+
+export const Payments = {
+  899: 'PAYING',
+  32900: 'GENERAL_CO_WORKING',
+  279000: 'PARTNER',
+};
+
+export const Payouts = {
+  PAYING: 1500,
+  GENERAL_CO_WORKING: 45000,
+  PARTNER: 45000,
+};
+
+export const LANDSCAPES = [
+  ['Sahara Desert', 'The Sahara stretches across North Africa with shifting dunes that tower above the horizon. Even in its harsh sunlight and cold nights, resilient life finds a way to endure.'],
+  ['Grand Canyon', 'Carved by the Colorado River, the Grand Canyon reveals layers of ancient rock. Its chasms echo with wind and the distant calls of raptors gliding through the afternoon sky.'],
+  ['Amazon Rainforest', 'The Amazon Rainforest teems with biodiversity under a dense green canopy. Rivers and flooded plains sustain countless species, while humid air hangs heavy with the promise of storms.'],
+  ['Rocky Mountains', 'The Rockies rise like rugged spines across the continent. Snowpack feeds rivers that carve valleys where elk graze, and fir trees cling to the slopes.'],
+  ['Gobi Desert', 'The Gobi Desert rolls out in arid sweeps across northern China and southern Mongolia. Sparse grasses and hardy camels testify to its unforgiving climate.'],
+  ['Andes Mountains', 'The Andes dominate western South America with ragged peaks and hidden valleys. Llamas graze on high plateaus, and glaciers feed the rivers far below.'],
+  ['Serengeti Plains', 'The Serengeti spreads under the African sun in rolling grasslands. Wildebeests and zebras migrate in vast herds, guided by the promise of water and fresh pasture.'],
+  ['Yosemite Valley', 'Glacial forces shaped this granite cradle in California. Towering waterfalls cascade from sheer cliffs, while giant sequoias stand in quiet strength.'],
+  ['Namib Desert', 'The Namib Desert clings to the Atlantic coast of southern Africa. Rust-red dunes shift above hidden water tables where desert elephants roam.'],
+  ['Patagonia', 'Patagonia’s windswept plains and jagged peaks stretch across Argentina and Chile. Glaciers calve into turquoise lakes, and guanacos graze on hardy grasses.'],
+  ['Swiss Alps', 'The Swiss Alps rise with sharp spires of snow and ice. Mountain chalets cling to slopes where wildflowers bloom each summer in vibrant displays.'],
+  ['Himalayas', 'The Himalayas hold the world’s highest summits beneath a freezing sky. From lush foothills to lofty glaciers, this range tests life’s resilience.'],
+  ['Icelandic Highlands', 'Iceland’s interior stands stark and raw with volcanic plains, steaming vents, and glacier-fed rivers. The wind sweeps across moss-coated lava fields in lonely gusts.'],
+  ['Atacama Desert', 'The Atacama is among the driest places on Earth. Its scorched soil and salt flats see rare blooms that burst into color after elusive rains.'],
+  ['Redwood Forest', 'Coastal redwoods tower in perpetual mist along the Pacific. Their trunks, thick and ancient, cradle a hidden world of fern and moss.'],
+  ['Scottish Highlands', 'The Highlands roll in rugged hills capped by heather and stone. Lochs reflect ever-shifting skies, and the wind carries the distant clang of sheep bells.'],
+  ['Great Rift Valley', 'This massive geological trench cleaves eastern Africa, where lakes shimmer at the bottom of steep escarpments. Flamingos gather in vast flocks to feed on algae.'],
+  ['Okavango Delta', 'The Okavango spreads like a bright labyrinth of channels and wetlands in Botswana. Seasonal floods create a green haven for elephants, lions, and hippos.'],
+  ['Appalachian Mountains', 'Old and eroded, the Appalachians meander through eastern North America. Their forests host black bears, rhododendrons, and the misty quiet of forest hollows.'],
+  ['Death Valley', 'Death Valley bakes under a relentless sun, reaching some of the hottest temperatures on record. Cracked salt flats testify to evaporated lakes and lost water.'],
+  ['Dolomites', 'Jagged limestone peaks define northern Italy’s Dolomites. Alpine meadows lie below sheer cliffs, where climbers test themselves against silent stone.'],
+  ['Torres del Paine', 'Chile’s Torres del Paine juts into the southern sky with glacier-fed lakes at its base. Guanacos roam windblown plains as ice cracks overhead.'],
+  ['Lofoten Islands', 'Lofoten’s dramatic peaks rise straight from Norway’s cold seas. Fishing villages huddle along rocky shores, while gulls circle overhead in crisp air.'],
+  ['Siberian Tundra', 'The Siberian tundra spans a realm of permafrost and low shrubs. Winters stretch long and bleak, yet migratory birds still find respite here each summer.'],
+  ['Norwegian Fjords', 'Deep fjords carve into Norway’s coast where dark waters mirror towering cliffs. Small farms cling to green patches between rock and sea.'],
+  ['Bungle Bungle Range', 'These striped sandstone domes rise from the Australian outback. Gorges cut deep under a harsh sun, hiding pockets of lush vegetation.'],
+  ['Zion Canyon', 'Zion Canyon glows red and orange under the Utah sky. The Virgin River sculpts sheer walls that watch over narrow trails and hidden pools.'],
+  ['Lake Baikal', 'Lake Baikal in Siberia is the world’s deepest lake. Its waters shimmer with unmatched clarity, home to species found nowhere else on Earth.'],
+  ['Banff National Park', 'Banff crowns the Canadian Rockies with turquoise lakes and towering peaks. Grizzlies roam pine forests while glacier-fed rivers reflect untouched wilderness.'],
+  ['Wadi Rum', 'Wadi Rum’s sandstone cliffs loom in Jordan’s desert, carved by millennia of wind and time. Nomadic tribes wander under a silent, star-filled sky.'],
+  ['Cappadocia', 'Cappadocia’s whimsical rock formations rise over central Turkey’s plains. Soft stone spires hold hidden chapels and the ghosts of ancient dwellers.'],
+];
+
+export const SAMPLE_TABLE_DATA_CHANGE_ME = [
+  ['NAME', 'SYMBOL', 'PRICE', 'HOLDINGS'],
+  ['Bat', 'BAT', '$9.01', '400'],
+  ['Bear', 'BR', '$56.78', '200'],
+  ['Camel', 'CML', '$55.67', '70'],
+  ['Cheetah', 'CHT', '$13.45', '150'],
+  ['Crab', 'CRB', '$15.67', '250'],
+  ['Deer', 'DER', '$29.99', '110'],
+  ['Dolphin', 'DLP', '$77.89', '50'],
+  ['Eagle', 'EGL', '$45.67', '90'],
+  ['Falcon', 'FLC', '$40.22', '85'],
+  ['Fox', 'FOX', '$12.34', '100'],
+  ['Frog', 'FRG', '$7.89', '400'],
+  ['Giraffe', 'GRF', '$44.56', '80'],
+  ['Hedgehog', 'HDG', '$11.23', '200'],
+  ['Horse', 'HRS', '$54.32', '70'],
+  ['Kangaroo', 'KNG', '$15.67', '120'],
+  ['Koala', 'KLA', '$22.34', '150'],
+  ['Leopard', 'LPR', '$14.56', '110'],
+  ['Lemur', 'LMR', '$11.12', '320'],
+  ['Lion', 'LION', '$67.89', '80'],
+  ['Lynx', 'LNX', '$16.78', '130'],
+  ['Mouse', 'MSE', '$5.12', '500'],
+  ['Octopus', 'OCT', '$88.90', '40'],
+  ['Otter', 'OTR', '$20.21', '180'],
+  ['Owl', 'OWL', '$19.01', '160'],
+  ['Panda', 'PND', '$78.90', '55'],
+  ['Peacock', 'PCK', '$12.34', '100'],
+  ['Penguin', 'PNG', '$33.45', '90'],
+  ['Porcupine', 'PRC', '$17.89', '140'],
+  ['Rabbit', 'RBT', '$9.10', '350'],
+  ['Raccoon', 'RCC', '$18.90', '150'],
+  ['Shark', 'SHK', '$89.01', '50'],
+  ['Snake', 'SNK', '$10.11', '300'],
+  ['Squirrel', 'SQL', '$10.12', '250'],
+  ['Tiger', 'TGR', '$34.56', '120'],
+  ['Turtle', 'TRL', '$66.78', '60'],
+  ['Whale', 'WHL', '$123.45', '30'],
+  ['Wolf', 'WLF', '$23.45', '150'],
+  ['Zebra', 'ZBR', '$65.43', '60'],
+];
+
+export const CHESSBOARD_DEFAULT_POSITIONS: string[][] = [
+  ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'],
+  ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],
+  ['', '', '', '', '', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],
+  ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R'],
+];
+
+export const CHESSBOARD_BAD_BISHOP: string[][] = [
+  ['r', ' ', ' ', 'q', ' ', 'r', 'k', ''],
+  [' ', 'b', ' ', ' ', ' ', 'p', 'p', 'p'],
+  ['p', '', 'p', 'b', 'p', 'n', '', ''],
+  ['', '', 'p', 'p', '', '', '', ''],
+  ['Q', '', '', 'P', '', '', '', ''],
+  ['', '', 'P', '', 'P', 'N', 'B', ''],
+  ['P', 'P', ' ', 'N', '', 'P', 'P', 'P'],
+  ['R', ' ', ' ', ' ', 'K', ' ', ' ', 'R'],
+];
+
+export const CHESSBOARD_CHECKMATE_STEP_ONE: string[][] = [
+  [' ', ' ', ' ', '', ' ', 'r', ' ', 'r'],
+  ['p', 'b', ' ', 'n', ' ', 'p', ' ', 'k'],
+  ['', 'q', '', 'N', 'p', '', '', ''],
+  ['', 'p', 'p', 'n', 'P', '', 'Q', ''],
+  ['', 'b', 'p', 'P', 'B', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['P', 'P', ' ', ' ', ' ', 'P', 'P', 'P'],
+  ['R', ' ', ' ', ' ', ' ', 'R', 'K', ''],
+];
+
+export const CHESSBOARD_CHECKMATE_STEP_TWO: string[][] = [
+  [' ', ' ', ' ', '', ' ', 'r', ' ', 'r'],
+  ['p', 'b', ' ', 'n', ' ', ' ', ' ', 'k'],
+  ['', 'q', '', 'N', 'p', '', '', ''],
+  ['', 'p', 'p', 'n', 'P', 'p', 'Q', ''],
+  ['', 'b', 'p', 'P', 'B', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['P', 'P', ' ', ' ', ' ', 'P', 'P', 'P'],
+  ['R', ' ', ' ', ' ', ' ', 'R', 'K', ''],
+];
+
+export const CHESSBOARD_CHECKMATE_STEP_THREE: string[][] = [
+  [' ', ' ', ' ', '', ' ', 'r', ' ', 'r'],
+  ['p', 'b', ' ', 'n', ' ', ' ', ' ', 'k'],
+  ['', 'q', '', 'N', 'p', 'P', '', ''],
+  ['', 'p', 'p', 'n', '', '', 'Q', ''],
+  ['', 'b', 'p', 'P', 'B', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['P', 'P', ' ', ' ', ' ', 'P', 'P', 'P'],
+  ['R', ' ', ' ', ' ', ' ', 'R', 'K', ''],
+];
+
+================
+File: reference/common/hooks.ts
+================
+import * as React from 'react';
+
+export function useDebouncedCallback<T>(ms: number, f: (...args: T[]) => void, deps: any[]): (...args: T[]) => void {
+  let throttled = false;
+  let latestArgs: T | null = null;
+
+  const clearThrottle = () => {
+    throttled = false;
+
+    if (latestArgs !== null) {
+      f(latestArgs);
+      latestArgs = null;
+    }
+  };
+
+  return React.useCallback(
+    (args) => {
+      if (throttled) {
+        latestArgs = args;
+      } else {
+        f(args);
+
+        throttled = true;
+
+        setTimeout(clearThrottle, ms);
+      }
+    },
+    [...deps, ms]
+  );
+}
+
+================
+File: reference/common/position.ts
+================
+export type Placement = 'top' | 'bottom' | 'left' | 'right';
+
+export function calculate(triggerElement: HTMLElement, popoverElement: HTMLElement, scrollX: number = window.scrollX, scrollY: number = window.scrollY): { placement: Placement; position: { top: number; left: number } } {
+  let triggerRect;
+  let popoverRect;
+
+  if (triggerElement) {
+    triggerRect = triggerElement.getBoundingClientRect();
+  }
+
+  if (popoverElement) {
+    popoverRect = popoverElement.getBoundingClientRect();
+  }
+
+  const spaceAbove = triggerRect.top;
+  const spaceBelow = window.innerHeight - triggerRect.bottom;
+  const spaceLeft = triggerRect.left;
+  const spaceRight = window.innerWidth - triggerRect.right;
+
+  const viewportHeightThreshold = window.innerHeight * 0.4;
+  const viewportWidthThreshold = window.innerWidth * 0.4;
+
+  let placement: Placement = 'bottom';
+  let top = 0;
+  let left = 0;
+  if (!popoverRect) {
+    return { placement, position: { top: 0, left: 0 } };
+  }
+
+  if (spaceAbove >= viewportHeightThreshold && spaceAbove >= popoverRect.height) {
+    placement = 'top';
+    top = triggerRect.top + scrollY - popoverRect.height;
+    left = triggerRect.left + scrollX + (triggerRect.width - popoverRect.width) / 2;
+  } else if (spaceBelow >= viewportHeightThreshold && spaceBelow >= popoverRect.height) {
+    placement = 'bottom';
+    top = triggerRect.bottom + scrollY;
+    left = triggerRect.left + scrollX + (triggerRect.width - popoverRect.width) / 2;
+  } else if (spaceRight >= viewportWidthThreshold && spaceRight >= popoverRect.width) {
+    placement = 'right';
+    top = triggerRect.top + scrollY + (triggerRect.height - popoverRect.height) / 2;
+    left = triggerRect.right + scrollX;
+  } else if (spaceLeft >= viewportWidthThreshold && spaceLeft >= popoverRect.width) {
+    placement = 'left';
+    top = triggerRect.top + scrollY + (triggerRect.height - popoverRect.height) / 2;
+    left = triggerRect.left + scrollX - popoverRect.width;
+  } else {
+    placement = 'bottom';
+    top = triggerRect.bottom + scrollY;
+    left = triggerRect.left + scrollX + (triggerRect.width - popoverRect.width) / 2;
+  }
+
+  if (left < 0) left = 0;
+  else if (left + popoverRect.width > window.innerWidth) left = window.innerWidth - popoverRect.width;
+
+  if (top < 0) top = 0;
+  else if (top + popoverRect.height > window.innerHeight + scrollY) top = window.innerHeight + scrollY - popoverRect.height;
+
+  return { placement, position: { top, left } };
+}
+
+================
+File: reference/common/queries.ts
+================
+import * as Constants from '@common/constants';
+import * as Utilities from '@common/utilities';
+
+export async function getData({ route, key, body }, qualifier = 'data') {
+  let result;
+  try {
+    const response = await fetch(route, {
+      method: 'POST',
+      headers: { 'X-API-KEY': key, 'Content-Type': 'application/json' },
+      body: JSON.stringify(body),
+    });
+    result = await response.json();
+  } catch (e) {
+    return null;
+  }
+
+  if (!result) {
+    return null;
+  }
+
+  if (result.error) {
+    return null;
+  }
+
+  if (!result[qualifier]) {
+    return null;
+  }
+
+  return result;
+}
+
+export async function onUserListData({ key }) {
+  const route = `${Constants.API}/data`;
+  const body = {};
+  return await getData({ route, key, body });
+}
+
+export async function onUserDeleteData({ id, key }) {
+  const route = `${Constants.API}/data/delete`;
+  const body = { id };
+  return await getData({ route, key, body });
+}
+
+export async function onRefreshDocuments({ key, type, domain }) {
+  const route = `${Constants.API}/documents`;
+  const body = { type, domain };
+  return await getData({ route, key, body });
+}
+
+export async function onGetDocumentById({ id }) {
+  const route = `${Constants.API}/documents/${id}`;
+  const body = {};
+  return await getData({ route, key: null, body });
+}
+
+export async function onUserCreateDocument({ key, type, domain }) {
+  const route = `${Constants.API}/documents/create`;
+  const body = { type, domain };
+  return await getData({ route, key, body });
+}
+
+export async function onDeleteDocumentById({ id, key }) {
+  const route = `${Constants.API}/documents/delete`;
+  const body = { id };
+  return await getData({ route, key, body });
+}
+
+export async function onUpdateDocumentById({ id, key, data }) {
+  const route = `${Constants.API}/documents/update`;
+  const body = { id, data };
+  return await getData({ route, key, body });
+}
+
+export async function onPublicUserAuthenticate({ email, password }) {
+  const route = `${Constants.API}/users/authenticate`;
+  const body = { email, password };
+  return getData({ route, key: null, body }, 'user');
+}
+
+export async function onPublicUserForgotPassword({ email }) {
+  const route = `${Constants.API}/users/reset-password`;
+  const body = { email, source: 'wireframes.internet.dev' };
+  return getData({ route, key: null, body }, 'success');
+}
+
+export async function onUserChangePassword({ key, password }) {
+  const route = `${Constants.API}/users/update-viewer-password`;
+  const body = { password };
+  return getData({ route, key, body });
+}
+
+export async function onUserRegenerateAPIKey({ email, password }) {
+  const route = `${Constants.API}/users/regenerate-key`;
+  const body = { email, password };
+  return getData({ route, key: null, body }, 'user');
+}
+
+export async function onUserUnsubscribeServices({ key }) {
+  const route = `${Constants.API}/users/subscriptions/unsubscribe`;
+  const body = null;
+  return getData({ route, key, body }, 'user');
+}
+
+export async function onRefreshPosts({ key, type, user_id }) {
+  const route = `${Constants.API}/posts`;
+  const body = { type, user_id };
+  return await getData({ route, key, body });
+}
+
+export async function onUserCreatePost({ id, key, src, type }) {
+  const route = `${Constants.API}/posts/create`;
+  const body = { type, fields: { fileId: id, public: true }, src };
+  return getData({ route, key, body });
+}
+
+export async function onUserCreateThread({ fields, key, src, type }) {
+  const route = `${Constants.API}/posts/create`;
+  const body = { fields, src, type };
+  return getData({ route, key, body });
+}
+
+export async function onUserDeletePost({ id, key }) {
+  const route = `${Constants.API}/posts/delete`;
+  const body = { id };
+  return getData({ route, key, body });
+}
+
+export async function onUserListThreadReplies({ id, key, orderBy }) {
+  const route = `${Constants.API}/posts/all-thread-replies`;
+  const body = { id, orderBy };
+  return getData({ route, key, body });
+}
+
+export async function onUserListThreads({ key, orderBy }) {
+  const route = `${Constants.API}/posts/all-threads`;
+  const body = { orderBy };
+  return getData({ route, key, body });
+}
+
+export async function onUserUploadDataGCS({ domain, file, key }) {
+  let signedResult;
+  const name = file.name;
+  const type = file.type;
+  const size = file.size;
+
+  if (size > Constants.MAX_SIZE_BYTES) {
+    return { error: 'File size exceeds 15mb limit' };
+  }
+
+  try {
+    const route = `${Constants.API}/data/generate-presigned-url-gcs`;
+    const body = { domain, type, file: name, size };
+    signedResult = await getData({ route, key, body }, 'uploadURL');
+  } catch (e) {
+    return null;
+  }
+
+  try {
+    fetch(signedResult.uploadURL, {
+      method: 'PUT',
+      headers: {
+        'Content-Type': 'application/octet-stream',
+      },
+      body: file,
+    });
+  } catch (e) {
+    return null;
+  }
+
+  return signedResult;
+}
+
+export async function onUserUploadDataS3({ domain, file, key }) {
+  let signedResult;
+  const name = file.name;
+  const type = file.type;
+  const size = file.size;
+
+  if (size > Constants.MAX_SIZE_BYTES) {
+    return { error: 'File size exceeds 15mb limit' };
+  }
+
+  try {
+    const route = `${Constants.API}/data/generate-presigned-url`;
+    const body = { domain, type, file: name, size };
+    signedResult = await getData({ route, key, body }, 'uploadURL');
+  } catch (e) {
+    return null;
+  }
+
+  try {
+    fetch(signedResult.uploadURL, {
+      method: 'PUT',
+      body: file,
+    });
+  } catch (e) {
+    return null;
+  }
+
+  return signedResult;
+}
+
+================
+File: reference/common/server.ts
+================
+import * as Utilities from '@common/utilities';
+
+import Cors from '@modules/cors';
+
+// NOTE(jimmylee)
+// import aesjs from 'aes-js';
+/*
+Some endpoints on https://api.internet.dev require server-side decryption. Without it, you won’t be able to perform actions like password recovery or Google authentication. To enable these features, you’ll need to set two environment variables with the correct values, and have an active partnership with us.
+
+When we built this open-source template for learning purposes, we aimed to make it fully open and accessible. However, since we are also running a service, certain restrictions are necessary. We appreciate your understanding.
+
+API_AES_KEY=
+API_IV_KEY=
+*/
+
+/*
+export function decrypt(hex) {
+  if (Utilities.isEmpty(process.env.API_AES_KEY)) {
+    throw new Error('process.env.API_AES_KEY');
+    return;
+  }
+
+  if (Utilities.isEmpty(process.env.API_IV_KEY)) {
+    throw new Error('process.env.API_IV_KEY');
+    return;
+  }
+
+  const aesKey = aesjs.utils.utf8.toBytes(process.env.API_AES_KEY);
+  const base64IV = process.env.API_IV_KEY;
+
+  if (!base64IV) {
+    throw new Error('process.env.API_IV_KEY is undefined. Please set the environment variable.');
+  }
+
+  const ivBytes = aesjs.utils.hex.toBytes(Buffer.from(base64IV, 'base64').toString('hex'));
+  const aesCtr = new aesjs.ModeOfOperation.ctr(aesKey, new aesjs.Counter(ivBytes));
+  const encryptedBytes = aesjs.utils.hex.toBytes(hex);
+  const decryptedBytes = aesCtr.decrypt(encryptedBytes);
+  const decrypted = aesjs.utils.utf8.fromBytes(decryptedBytes);
+
+  return decrypted;
+}
+*/
+
+export function initMiddleware(middleware) {
+  return (req, res) =>
+    new Promise((resolve, reject) => {
+      middleware(req, res, (result) => {
+        if (result instanceof Error) {
+          return reject(result);
+        }
+        return resolve(result);
+      });
+    });
+}
+
+export const cors = initMiddleware(
+  Cors({
+    methods: ['GET', 'POST', 'DELETE', 'OPTIONS'],
+  })
+);
+
+export async function setup(context): Promise<{ sessionKey?: any; viewer?: Record<string, any> | null }> {
+  let viewer = null;
+  let sessionKey = context.req.cookies['sitekey'] || '';
+
+  if (!Utilities.isEmpty(sessionKey)) {
+    try {
+      const response = await fetch('https://api.internet.dev/api/users/viewer', {
+        method: 'PUT',
+        headers: { 'X-API-KEY': sessionKey, 'Content-Type': 'application/json' },
+      });
+      const result = await response.json();
+      if (result && result.viewer) {
+        viewer = result.viewer;
+      }
+    } catch (e) {}
+  }
+
+  return { sessionKey, viewer };
+}
+
+export async function tryKeyWithoutCookie(key): Promise<{ sessionKey?: any; viewer?: Record<string, any> | null }> {
+  let viewer = null;
+
+  if (!Utilities.isEmpty(key)) {
+    try {
+      const response = await fetch('https://api.internet.dev/api/users/viewer', {
+        method: 'PUT',
+        headers: { 'X-API-KEY': key, 'Content-Type': 'application/json' },
+      });
+      const result = await response.json();
+      if (result && result.viewer) {
+        viewer = result.viewer;
+      }
+    } catch (e) {}
+  }
+
+  return { sessionKey: key, viewer };
+}
+
+================
+File: reference/common/utilities.ts
+================
+const hasOwn = {}.hasOwnProperty;
+const localhostDomainRE = /^localhost[\:?\d]*(?:[^\:?\d]\S*)?$/;
+const nonLocalhostDomainRE = /^[^\s\.]+\.\S{2,}$/;
+const protocolAndDomainRE = /^(?:\w+:)?\/\/(\S+)$/;
+
+export function noop() {
+  return null;
+}
+
+export function pluralize(text: string, count: number) {
+  return count > 1 || count === 0 ? `${text}s` : text;
+}
+
+export function getOrdinalNumber(n) {
+  return n + (n > 0 ? ['th', 'st', 'nd', 'rd'][(n > 3 && n < 21) || n % 10 > 3 ? 0 : n % 10] : '');
+}
+
+// NOTE(jimmylee)
+// Stolen from: https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/deepEqual.ts
+export function deepEqual(x: any, y: any): boolean {
+  //@ts-ignore
+  return x && y && typeof x === 'object' && typeof y === 'object'
+    ? Object.keys(x).length === Object.keys(y).length &&
+        //@ts-ignore
+        Object.keys(x).reduce((isEqual, key) => isEqual && deepEqual(x[key], y[key]), true)
+    : x === y;
+}
+
+export function getDomainFromEmailWithoutAnySubdomain(email: string): string {
+  const atIndex = email.lastIndexOf('@');
+  if (atIndex === -1) {
+    return '';
+  }
+
+  const domain = email.slice(atIndex + 1);
+  const domainParts = domain.split('.');
+
+  if (domainParts.length < 2) {
+    return '';
+  }
+
+  const mainDomain = domainParts.slice(-2).join('.');
+  return mainDomain;
+}
+
+export function onHandleThemeChange(className?: string) {
+  const body = document.body;
+
+  body.classList.forEach((existingClass) => {
+    if (existingClass.startsWith('theme-')) {
+      body.classList.remove(existingClass);
+    }
+  });
+
+  if (className) {
+    body.classList.add(className);
+  } else {
+    body.classList.add('theme-light');
+  }
+}
+
+export function onHandleFontChange(className?: string) {
+  const body = document.body;
+
+  if (className) {
+    body.classList.forEach((existingClass) => {
+      if (existingClass.startsWith('font-')) {
+        body.classList.remove(existingClass);
+      }
+    });
+
+    body.classList.add(className);
+    return;
+  }
+
+  body.classList.forEach((existingClass) => {
+    if (existingClass.startsWith('font-')) {
+      body.classList.remove(existingClass);
+    }
+  });
+}
+
+export function formatDollars(value: number): string {
+  return new Intl.NumberFormat('en-US', {
+    style: 'currency',
+    currency: 'USD',
+  }).format(value);
+}
+
+export function calculatePositionWithGutter(rect, objectWidth, viewportWidth, gutter = 24) {
+  const right = viewportWidth - rect.right;
+  const top = rect.top + rect.height + gutter;
+  const side = right + objectWidth >= viewportWidth ? 'left' : 'right';
+  const adjustedRight = side === 'left' ? viewportWidth - objectWidth - gutter : right;
+  return { top, right: adjustedRight, side };
+}
+
+export function calculatePositionWithGutterById(id, objectWidth, viewportWidth, gutter?) {
+  let rect;
+  if (id) {
+    const el = document.getElementById(id);
+    if (el) {
+      rect = el.getBoundingClientRect();
+    }
+  }
+  return calculatePositionWithGutter(rect, objectWidth, viewportWidth, gutter);
+}
+
+export function leftPad(input, length) {
+  const zerosNeeded = length - input.length;
+  if (zerosNeeded <= 0) {
+    return input;
+  }
+
+  const zeros = '0'.repeat(zerosNeeded);
+
+  return zeros + input;
+}
+
+export function toDateISOString(data: string) {
+  const date = new Date(data);
+  const dayOfWeek = date.toLocaleDateString('en-US', {
+    weekday: 'long',
+  });
+  const month = date.toLocaleDateString('en-US', {
+    month: 'long',
+  });
+  const dayOfMonth = getOrdinalNumber(date.getDate());
+  const year = date.getFullYear();
+
+  const formattedDate = `${dayOfWeek}, ${month} ${dayOfMonth}, ${year}`;
+
+  return formattedDate;
+}
+
+export function elide(string, length = 140, emptyState = '...') {
+  if (isEmpty(string)) {
+    return emptyState;
+  }
+
+  if (string.length < length) {
+    return string.trim();
+  }
+
+  return `${string.substring(0, length)}...`;
+}
+
+export function bytesToSize(bytes: number, decimals: number = 2) {
+  if (bytes === 0) return '0 Bytes';
+
+  const k = 1000;
+  const dm = decimals < 0 ? 0 : decimals;
+  const sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
+
+  const i = Math.floor(Math.log(bytes) / Math.log(k));
+
+  return `${(bytes / Math.pow(k, i)).toFixed(dm)} ${sizes[i]}`;
+}
+
+export function isEmpty(text: any) {
+  // NOTE(jimmylee):
+  // If a number gets passed in, it isn't considered empty for zero.
+  if (text === 0) {
+    return false;
+  }
+
+  if (!text) {
+    return true;
+  }
+
+  if (typeof text === 'object') {
+    return true;
+  }
+
+  if (text.length === 0) {
+    return true;
+  }
+
+  text = text.toString();
+
+  return Boolean(!text.trim());
+}
+
+export function createSlug(text: any) {
+  if (isEmpty(text)) {
+    return 'untitled';
+  }
+
+  const a = 'æøåàáäâèéëêìíïîòóöôùúüûñçßÿœæŕśńṕẃǵǹḿǘẍźḧ·/_,:;';
+  const b = 'aoaaaaaeeeeiiiioooouuuuncsyoarsnpwgnmuxzh------';
+  const p = new RegExp(a.split('').join('|'), 'g');
+
+  return text
+    .toString()
+    .toLowerCase()
+    .replace(/\s+/g, '-') // Replace spaces with -
+    .replace(p, (c) => b.charAt(a.indexOf(c))) // Replace special chars
+    .replace(/&/g, '-and-') // Replace & with 'and'
+    .replace(/[^\w\-]+/g, '') // Remove all non-word chars
+    .replace(/\-\-+/g, '-') // Replace multiple - with single -
+    .replace(/^-+/, '') // Trim - from start of text
+    .replace(/-+$/, ''); // Trim - from end of text
+}
+
+export function isUrl(string: any) {
+  if (typeof string !== 'string') {
+    return false;
+  }
+
+  let match = string.match(protocolAndDomainRE);
+  if (!match) {
+    return false;
+  }
+
+  let everythingAfterProtocol = match[1];
+  if (!everythingAfterProtocol) {
+    return false;
+  }
+
+  if (localhostDomainRE.test(everythingAfterProtocol) || nonLocalhostDomainRE.test(everythingAfterProtocol)) {
+    return true;
+  }
+
+  return false;
+}
+
+export function debounce<Args extends unknown[]>(fn: (...args: Args) => void, delay: number) {
+  let timeoutID: number | undefined;
+  let lastArgs: Args | undefined;
+
+  const run = () => {
+    if (lastArgs) {
+      fn(...lastArgs);
+      lastArgs = undefined;
+    }
+  };
+
+  const debounced = (...args: Args) => {
+    clearTimeout(timeoutID);
+    lastArgs = args;
+    timeoutID = window.setTimeout(run, delay);
+  };
+
+  debounced.flush = () => {
+    clearTimeout(timeoutID);
+  };
+
+  return debounced;
+}
+
+export function timeAgo(dateInput: Date | string | number): string {
+  const date = new Date(dateInput);
+  const now = new Date();
+  const secondsPast = (now.getTime() - date.getTime()) / 1000;
+
+  if (secondsPast < 0 || isNaN(secondsPast)) {
+    return '[INVALID]';
+  }
+
+  if (secondsPast < 60) {
+    return 'Just now';
+  } else if (secondsPast < 3600) {
+    const minutes = Math.floor(secondsPast / 60);
+    return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;
+  } else if (secondsPast < 86400) {
+    const hours = Math.floor(secondsPast / 3600);
+    return `${hours} hour${hours > 1 ? 's' : ''} ago`;
+  } else if (secondsPast < 604800) {
+    const days = Math.floor(secondsPast / 86400);
+    return `${days} day${days > 1 ? 's' : ''} ago`;
+  }
+
+  const formattedDate = date.toLocaleDateString('en-US', {
+    month: '2-digit',
+    day: '2-digit',
+    year: 'numeric',
+  });
+
+  return formattedDate;
+}
+
+export function classNames(...args: any[]): string {
+  let classes: string[] = [];
+
+  for (let i = 0; i < arguments.length; i++) {
+    let arg = arguments[i];
+    if (!arg) continue;
+
+    let argType = typeof arg;
+
+    if (argType === 'string' || argType === 'number') {
+      classes.push(arg);
+    } else if (Array.isArray(arg)) {
+      if (arg.length) {
+        let inner = classNames.apply(null, arg);
+        if (inner) {
+          classes.push(inner);
+        }
+      }
+    } else if (argType === 'object') {
+      if (arg.toString !== Object.prototype.toString) {
+        classes.push(arg.toString());
+      } else {
+        for (let key in arg) {
+          if (hasOwn.call(arg, key) && arg[key]) {
+            classes.push(key);
+          }
+        }
+      }
+    }
+  }
+
+  return classes.join(' ');
+}
+
+export async function generateNonce() {
+  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
+  let result = '';
+  const charactersLength = characters.length;
+  for (let i = 0; i < 8; i++) {
+    result += characters.charAt(Math.floor(Math.random() * charactersLength));
+  }
+  return result;
+}
+
+export function filterUndefined(obj) {
+  const res = {};
+  Object.keys(obj)
+    .filter((k) => obj[k] !== undefined)
+    .forEach((k) => (res[k] = obj[k]));
+  return res;
+}
+
+export const isFocusableElement = (element: EventTarget | null): element is HTMLElement => {
+  if (!element || !(element instanceof HTMLElement)) {
+    return false;
+  }
+
+  const focusableSelectors = ['a[href]', 'button', 'input', 'select', 'textarea', '[tabindex]:not([tabindex="-1"])', '[contenteditable="true"]'];
+
+  return element.matches(focusableSelectors.join(', '));
+};
+
+export const findNextFocusable = (element: Element | null, direction: 'next' | 'previous' = 'next'): HTMLElement | null => {
+  if (!element) return null;
+
+  const focusableSelectors = ['a[href]', 'button', 'input', 'select', 'textarea', '[tabindex]:not([tabindex="-1"])', '[contenteditable="true"]'];
+
+  const focusableElements = Array.from(document.querySelectorAll<HTMLElement>(focusableSelectors.join(', ')));
+
+  const currentIndex = focusableElements.indexOf(element as HTMLElement);
+
+  if (currentIndex !== -1) {
+    const nextIndex = direction === 'next' ? (currentIndex + 1) % focusableElements.length : (currentIndex - 1 + focusableElements.length) % focusableElements.length;
+
+    return focusableElements[nextIndex];
+  }
+
+  return null;
+};
+
+export const findFocusableDescendant = (container: Element | null, currentFocused: Element | null = null, direction: 'next' | 'previous' = 'next'): HTMLElement | null => {
+  if (!container) return null;
+
+  const focusableElements = Array.from(container.querySelectorAll<HTMLElement>('a[href], button, input, select, textarea, [tabindex]:not([tabindex="-1"]), [contenteditable="true"]'));
+
+  if (focusableElements.length === 0) return null;
+
+  let index = 0;
+  if (currentFocused) {
+    const currentIndex = focusableElements.indexOf(currentFocused as HTMLElement);
+    if (currentIndex !== -1) {
+      index = direction === 'next' ? currentIndex + 1 : currentIndex - 1;
+    }
+  }
+
+  if (index >= 0 && index < focusableElements.length) {
+    return focusableElements[index];
+  }
+
+  return null;
+};
+
+================
+File: reference/components/detectors/OutsideElementEvent.tsx
+================
+import * as React from 'react';
+
+interface OutsideElementEventProps {
+  className?: string;
+  children: React.ReactNode;
+  onOutsideEvent: (event: MouseEvent | TouchEvent) => void;
+  style?: React.CSSProperties;
+}
+
+const OutsideElementEvent: React.FC<OutsideElementEventProps> = ({ className, children, onOutsideEvent, style }) => {
+  const ref = React.useRef<HTMLDivElement>(null);
+
+  const handleOutsideEvent = React.useCallback(
+    (event: MouseEvent | TouchEvent) => {
+      if (!(event.target instanceof Element)) return;
+
+      if (event.target.hasAttribute('data-detector-ignore')) {
+        return;
+      }
+
+      if (ref.current && !ref.current.contains(event.target as Node)) {
+        onOutsideEvent(event);
+      }
+    },
+    [onOutsideEvent]
+  );
+
+  React.useEffect(() => {
+    document.addEventListener('mousedown', handleOutsideEvent);
+    document.addEventListener('touchstart', handleOutsideEvent);
+
+    return () => {
+      document.removeEventListener('mousedown', handleOutsideEvent);
+      document.removeEventListener('touchstart', handleOutsideEvent);
+    };
+  }, [handleOutsideEvent]);
+
+  return (
+    <div ref={ref} className={className} style={style}>
+      {children}
+    </div>
+  );
+};
+
+export default OutsideElementEvent;
+
+================
+File: reference/components/examples/AS400.module.scss
+================
+.root {
+}
+
+================
+File: reference/components/examples/AS400.tsx
+================
+'use client';
+
+import styles from '@components/AS400.module.scss';
+
+import * as React from 'react';
+
+import Card from '@components/Card';
+import Row from '@components/Row';
+import RowSpaceBetween from '@components/RowSpaceBetween';
+import Table from '@components/Table';
+import TableRow from '@components/TableRow';
+import TableColumn from '@components/TableColumn';
+import TextArea from '@components/TextArea';
+
+type AS400Props = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const AS400 = () => {
+  return (
+    <>
+      <Card>
+        <RowSpaceBetween>
+          <span style={{ minWidth: `10ch` }}>COMMAND</span>
+          <span style={{ minWidth: `10ch` }}>Menu : ⌃+T</span>
+          <span style={{ minWidth: `10ch`, textAlign: 'right' }}>IND333</span>
+        </RowSpaceBetween>
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow style={{ textAlign: 'center' }}>
+            <TableColumn>F O O D&nbsp;&nbsp;D I S T R I B U T I O N</TableColumn>
+          </TableRow>
+          <TableRow style={{ textAlign: 'center' }}>
+            <TableColumn>- - Advance Sales Menu - -</TableColumn>
+          </TableRow>
+        </Table>
+        <br />
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow>
+            <TableColumn>1. Order Entry</TableColumn>
+            <TableColumn>13. Create Texlon/MSI Orders</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>2. Route Recap</TableColumn>
+            <TableColumn>14. Create Posting w/Scanner</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>3. Staging Ticket</TableColumn>
+            <TableColumn></TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>4. Picking Ticket</TableColumn>
+            <TableColumn>15. Order List</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>5. Order Posting</TableColumn>
+            <TableColumn>16. Order Maintenance</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>6. Bill of Lading</TableColumn>
+            <TableColumn>16. Order Hold</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>7. Load Sheets</TableColumn>
+            <TableColumn>18. Order Release</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>8. Order Entry Invoicing</TableColumn>
+            <TableColumn>19. Order Cancellation</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>9. Order Entry Confirmation</TableColumn>
+            <TableColumn>20. Order Change</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>10. Order Entry Processing</TableColumn>
+            <TableColumn>21. Unsettled Invoice Report</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>&nbsp;</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>11. Credit Memo Entry</TableColumn>
+            <TableColumn>- - Transaction Processing Menu - -</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>12. Credit Memo Processing</TableColumn>
+            <TableColumn>- - Main Menu - -</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn></TableColumn>
+            <TableColumn>24. Sign Off</TableColumn>
+          </TableRow>
+        </Table>
+        <br />
+        <br />
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow>
+            <TableColumn>Ready for option number or command</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>
+              <TextArea isBlink />
+            </TableColumn>
+          </TableRow>
+        </Table>
+      </Card>
+      <br />
+      <Card>
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;Option: 1337...&nbsp;&nbsp; Copy: US&nbsp;&nbsp;&nbsp;&nbsp;ITEM ACTIVITY INQUIRY</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>IND333</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Regn: NW</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}></TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;Item #: 6666666</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}></TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GMO HONEYDEW MELON USDA PRIME 72 OZ</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}></TableColumn>
+          </TableRow>
+        </Table>
+        <br />
+        <br />
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow>
+            <TableColumn>Warehouse</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>On Hand</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>On Order</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>In Transit</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>Total</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>W/S</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>Sell</TableColumn>
+          </TableRow>
+
+          <TableRow>
+            <TableColumn>&nbsp;</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;01 SEATTLE</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;02 PORTLAND</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;06 TUKWILA</TableColumn>
+            <TableColumn>89</TableColumn>
+            <TableColumn>162</TableColumn>
+            <TableColumn>162</TableColumn>
+            <TableColumn>413</TableColumn>
+            <TableColumn>7.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;08 KIRKLAND</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;09 ALOHA</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;10 ANCHORAGE</TableColumn>
+            <TableColumn>107</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>324</TableColumn>
+            <TableColumn>511</TableColumn>
+            <TableColumn>5.5</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;13 SILVERDALE</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;17 EUGENE</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;61 FEDERAL WAY</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;63 NE ANCHORAGE</TableColumn>
+            <TableColumn>229</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>162</TableColumn>
+            <TableColumn>391</TableColumn>
+            <TableColumn>4.5</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;64 TUMWATER</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;67 MISSOULA</TableColumn>
+            <TableColumn>201</TableColumn>
+            <TableColumn>648</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>849</TableColumn>
+            <TableColumn>5.2</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;95 TACOMA</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+        </Table>
+        <br />
+        <br />
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow>
+            <TableColumn>CF-3 Exit&nbsp;&nbsp;&nbsp;&nbsp;CF7-Next Item&nbsp;&nbsp;&nbsp;&nbsp;CF21-Print Report</TableColumn>
+          </TableRow>
+        </Table>
+      </Card>
+    </>
+  );
+};
+
+AS400.displayName = 'AS400';
+
+export default AS400;
+
+================
+File: reference/components/examples/DashboardRadar.module.scss
+================
+.customSidebar {
+  display: flex;
+  align-items: center;
+  justify-content: space-between;
+  width: 100%;
+  flex-direction: column;
+  height: calc(var(--theme-line-height-base) * (var(--font-size) * 29.5));
+}
+
+.customTop {
+  min-height: 10%;
+  height: 100%;
+}
+
+.customBottom {
+  flex-shrink: 0;
+  width: 100%;
+}
+
+.root {
+  min-width: 56ch;
+}
+
+.cross {
+  width: 9ch;
+  height: calc(var(--theme-line-height-base) * (var(--font-size) * 7));
+  margin: calc(var(--theme-line-height-base) * (var(--font-size) * 0.5)) 0 calc(var(--theme-line-height-base) * (var(--font-size) * 0.5)) 0;
+  display: flex;
+  justify-content: space-between;
+  flex-direction: column;
+}
+
+.square {
+  width: 4.3ch;
+  height: calc(var(--theme-line-height-base) * (var(--font-size) * 3.4));
+}
+
+.nw {
+  border-right: 2px solid var(--theme-text);
+  border-bottom: 2px solid var(--theme-text);
+}
+
+.ne {
+  border-left: 2px solid var(--theme-text);
+  border-bottom: 2px solid var(--theme-text);
+}
+
+.sw {
+  border-top: 2px solid var(--theme-text);
+  border-right: 2px solid var(--theme-text);
+}
+
+.se {
+  border-top: 2px solid var(--theme-text);
+  border-left: 2px solid var(--theme-text);
+}
+
+.customContent {
+  width: 100%;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  height: calc(var(--theme-line-height-base) * (var(--font-size) * 24.5));
+}
+
+================
+File: reference/components/examples/DashboardRadar.tsx
+================
+import styles from '@components/examples/DashboardRadar.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import ActionButton from '@components/ActionButton';
+import ButtonGroup from '@components/ButtonGroup';
+import Card from '@components/Card';
+import RowSpaceBetween from '@components/RowSpaceBetween';
+import SidebarLayout from '@components/SidebarLayout';
+import Sphere from '@components/svg/Sphere';
+
+const RadarMarker = (props) => {
+  return (
+    <div className={styles.cross}>
+      <RowSpaceBetween>
+        <div className={Utilities.classNames(styles.square, styles.nw)} />
+        <div className={Utilities.classNames(styles.square, styles.ne)} />
+      </RowSpaceBetween>
+      <RowSpaceBetween>
+        <div className={Utilities.classNames(styles.square, styles.sw)} />
+        <div className={Utilities.classNames(styles.square, styles.se)} />
+      </RowSpaceBetween>
+    </div>
+  );
+};
+
+const DashboardRadar = (props) => {
+  return (
+    <div className={styles.root}>
+      <SidebarLayout
+        isReversed
+        sidebar={
+          <Card>
+            <div className={styles.customSidebar}>
+              <div className={styles.customTop}>
+                TIME FROM
+                <ActionButton style={{ width: '100%' }}>11:11:11:11</ActionButton>
+                <br />
+                <br />
+                PRESENT
+                <br />
+                P.O.R.
+                <br />
+                NOSTROMO
+                <br />
+              </div>
+              <div className={styles.customBottom}>
+                HEADING
+                <br />
+                <ButtonGroup isFull items={[{ body: 'N .36' }, { body: 'E .18' }]} />
+                <br />
+                GROUND
+                <br />
+                <ActionButton rootStyle={{ width: '100%' }}>SPEED 78.26</ActionButton>
+                <br />
+                CONDITION
+                <br />
+                CODE
+                <br />
+                <ActionButton style={{ width: '100%' }}>16 S=C75C</ActionButton>
+                <ActionButton>PAST=8</ActionButton>
+                <br />
+                <br />
+                <ActionButton rootStyle={{ width: '100%' }}>System #4</ActionButton>
+                <br />
+                <br />
+                AUTODECOUNT
+                <br />
+                <br />
+                <ActionButton rootStyle={{ width: '100%', textAlign: 'right' }}>3454.94#</ActionButton>
+              </div>
+            </div>
+          </Card>
+        }
+        defaultSidebarWidth={19}
+      >
+        <Card>
+          <RowSpaceBetween>
+            <span style={{ flexShrink: 0 }}>DEORBITAL DESCENT</span>
+            <span style={{ minWidth: '10%', width: '100%', display: 'flex', justifyContent: 'flex-end' }}>
+              <span>
+                <ActionButton>COMMENCE FINAL</ActionButton>
+                <br />
+                <ActionButton>SYSTEM :0L: 76.75 :08:</ActionButton>
+              </span>
+            </span>
+          </RowSpaceBetween>
+        </Card>
+        <br />
+        <Card>
+          <RowSpaceBetween style={{ position: 'absolute', top: 0, left: `6ch`, right: `6ch` }}>
+            <RadarMarker />
+            <RadarMarker />
+          </RowSpaceBetween>
+          <div className={styles.customContent}>
+            <Sphere style={{ transform: 'translateX(24ch) rotateZ(40deg)' }} />
+          </div>
+          <RowSpaceBetween style={{ position: 'absolute', bottom: `calc(var(--theme-line-height-base) * (var(--font-size) * 0.5))`, left: `6ch`, right: `6ch` }}>
+            <RadarMarker />
+            <RadarMarker />
+          </RowSpaceBetween>
+        </Card>
+      </SidebarLayout>
+    </div>
+  );
+};
+
+export default DashboardRadar;
+
+================
+File: reference/components/examples/Denabase.module.scss
+================
+.root {
+  min-width: 68ch;
+  margin-top: calc(var(--theme-line-height-base) * 1rem);
+}
+
+.dna {
+  min-width: 71ch;
+  -webkit-text-size-adjust: 100%;
+}
+
+.tag {
+  width: 3ch;
+  height: calc(var(--theme-line-height-base) * 0.5rem);
+  flex-shrink: 0;
+  box-shadow:
+    inset 2px 0 0 var(--theme-text),
+    inset -2px 0 0 var(--theme-text),
+    inset 0 2px 0 var(--theme-text);
+}
+
+.secondaryTag {
+  width: 3ch;
+  align-self: stretch;
+  flex-shrink: 0;
+  box-shadow:
+    inset 2px 0 0 var(--theme-text),
+    inset -2px 0 0 var(--theme-text),
+    inset 0 2px 0 var(--theme-text);
+}
+
+.small {
+  width: 13ch;
+  flex-shrink: 0;
+  text-align: right;
+}
+
+.smallWithBorder {
+  width: 13ch;
+  flex-shrink: 0;
+  text-align: right;
+  box-shadow: inset 0 2px 0 var(--theme-text);
+}
+
+.smallSection {
+  width: 13ch;
+  flex-shrink: 0;
+  min-width: 10%;
+  text-align: right;
+  box-shadow: inset 0 2px 0 var(--theme-text);
+}
+
+.large {
+  width: 80%;
+  min-width: 10%;
+  text-align: right;
+}
+
+.largeWithBorder {
+  width: 80%;
+  min-width: 10%;
+  text-align: right;
+  box-shadow:
+    inset 0 2px 0 var(--theme-text),
+    inset -2px 0 0 var(--theme-text);
+}
+
+.largeSection {
+  width: 80%;
+  min-width: 10%;
+  text-align: right;
+  box-shadow:
+    inset 0 2px 0 var(--theme-text),
+    inset -2px 0 0 var(--theme-text);
+}
+
+.absoluteTag {
+  top: calc(var(--theme-line-height-base) * -0.5rem);
+  left: 0;
+  height: calc(var(--theme-line-height-base) * 0.5rem);
+  width: 14.2ch;
+  background: var(--theme-background);
+  position: absolute;
+  box-shadow:
+    inset 2px 0 0 var(--theme-text),
+    inset -2px 0 0 var(--theme-text),
+    inset 0 2px 0 var(--theme-text);
+}
+
+.box {
+  width: 7.1ch;
+  flex-shrink: 0;
+  height: calc(var(--theme-line-height-base) * 3rem);
+  display: inline-flex;
+  align-items: center;
+  justify-content: center;
+  box-shadow:
+    inset -2px 0 0 var(--theme-text),
+    inset 0 2px 0 var(--theme-text),
+    inset 0 -2px 0 var(--theme-text);
+
+  &:first-child {
+    box-shadow:
+      inset 2px 0 0 var(--theme-text),
+      inset -2px 0 0 var(--theme-text),
+      inset 0 2px 0 var(--theme-text),
+      inset 0 -2px 0 var(--theme-text);
+  }
+}
+
+================
+File: reference/components/examples/Denabase.tsx
+================
+'use client';
+
+import styles from '@components/examples/Denabase.module.scss';
+
+import * as React from 'react';
+
+import ActionButton from '@components/ActionButton';
+import Card from '@components/Card';
+import Divider from '@components/Divider';
+import Row from '@components/Row';
+import RowSpaceBetween from '@components/RowSpaceBetween';
+import SidebarLayout from '@components/SidebarLayout';
+
+const Denabase = (props) => {
+  return (
+    <>
+      <Card style={{ overflowWrap: 'break-word' }}>
+        <Row>
+          <RowSpaceBetween>
+            <ActionButton>TR5342120027455925897981</ActionButton>
+            <ActionButton>02.14.2021</ActionButton>
+          </RowSpaceBetween>
+          <Divider type="GRADIENT" />
+          <div className={styles.dna}>
+            T-CA-AA-AA-TA-TC-GG-GC-AC-AT-TA-TT-TA-TT-TG-CC-GC-TC-GG-GA-AG-TA-GA-A
+            <br />
+            A-TG-GT-AC-AT-GT-GT-TT-TA-TG-AT-TT-CT-CG-CA-GT-GA-AA-AA-GC-AA-CG-AA-C
+            <br />
+            C-TC-GC-CC-TT-AG-AT-TC-TA-TA-GC-TG-CT-CT-GA-GA-CC-GC-AC-TG-GC-AA-GC-A
+            <br />
+            G-AA-AC-TC-CG-CA-TT-CA-GG-CA-GT-CC-TC-CA-TG-CA-CT-TC-CT-GC-CT-GT-CT-G
+            <br />
+            C-TG-AA-CC-TA-TT-AT-TA-GA-GA-TG-GA-CT-GC-AG-TT-CT-CA-AT-CA-CA-CG-GA-T
+            <br />
+            C-TG-AT-AC-CT-GC-TG-GT-AT-GT-TC-CT-GA-TA-CC-CA-CA-GA-CA-GC-GC-CC-GA-A
+            <br />
+            T-TT-TG-GC-AA-CC-GA-AC-TT-CT-CA-AC-AA-AA-CC-GC-CT-AG-TT-GC-TA-AT-TT-G
+            <br />
+            G-TG-AC-CT-GA-CT-GA-AT-TG-TC-AT-TA-AA-CA-CT-CC-TG-CT-AA-GA-TG-CG-AA-G
+            <br />
+            C-TA-TT-AT-AG-TG-TT-TT-GT-AC-AG-GC-TA-TT-TT-GC-GT-GA-AA-CG-CA-AA-CG-C
+            <br />
+            G-TT-GC-AT-TT-CA-GA-AT-TC-CG-TG-CA-TA-GT-TA-TC-TC-AT-GC-CG-TG-CT-CT-T
+            <br />
+            G-AT-TA-TT-GA-CA-TA-TG-CA-GT-TC-GT-CC-TA-AT-CC-GC-GC-CT-GG-TC-TT-TA-G
+            <br />
+            T-CA-CT-AA-CC-GA-CC-CT-TA-GT-AT-TG-TT-CT-CT-CA-AC-AA-AA-TG-TG-TT-AA-A
+            <br />
+            C-CG-GC-AT-AA-TC-TG-GT-GA-TC-GG-GA-GA-TC-CA-GA-GA-AA-CA-CA-CC-TT-GG-G
+            <br />
+            C-TA-GA-TG-CC-CT-AC-AT-TA-GA-TA-AG-GG-GT-CT-AT-AC-GG-GC-GG-GG-TT-AG-T
+            <br />
+            A-CA-CC-TT-GA-GC-GT-AT-AG-GA-GA-GT-AA-CG-AG-GT-GG-TT-GT-CG-TG-GG-AG-G
+            <br />
+            A-GG-AG-TA-TG-TT-CT-CC-CT-TA-CT-AG-TT-GC-CG-AT-AA-CA-GA-TA-CT-GA-TG-T
+            <br />
+            C-TG-GT-AA-TT-GC-CA-GT-CA-TG-GT-TG-TA-GT-AG-CC-GG-GA-CC-CG-CA-GT-CT-G
+            <br />
+            G-GT-AG-CG-CC-TA-AC-AG-AT-AA-GG-GG-GC-CT-AC-TC-CC-GC-CC-TG-GT-CG-GC-C
+            <br />
+            T-GA-TC-AT-AA-AC-CT-CT-GT-AA-TA-CC-AT-GG-GC-CA-CG-TT-AG-GC-GT-CG-AT-G
+            <br />
+            C-CG-GA-CC-CA-TA-TC-TT-TA-CA-TC-AT-CT-CT-TT-CA-TA-GA-AG-TA-CC-CA-CT-T
+            <br />
+          </div>
+          <Divider type="GRADIENT" />
+        </Row>
+      </Card>
+      <br />
+      <Card>
+        <SidebarLayout
+          sidebar={
+            <Card style={{ padding: `0 0 0 0` }}>
+              <br />
+              <br />
+              <Row style={{ textAlign: 'center' }}>╳</Row>
+              <br />
+              <br />
+            </Card>
+          }
+          defaultSidebarWidth={19}
+        >
+          <Card style={{ padding: 0, marginLeft: `1ch`, minWidth: `30ch` }}>
+            <br />
+            <br />
+            <br />
+            <br />
+            <Row style={{ textAlign: 'right' }}>NO DATA</Row>
+          </Card>
+        </SidebarLayout>
+        <div className={styles.root}>
+          <RowSpaceBetween>
+            <div className={styles.tag}></div>
+            <div className={styles.small}></div>
+            <div className={styles.tag}></div>
+            <div className={styles.large}></div>
+          </RowSpaceBetween>
+          <RowSpaceBetween>
+            <div className={styles.secondaryTag}>
+              <br />
+              <br />
+            </div>
+            <div className={styles.smallSection}>
+              <br />
+              2181&nbsp;
+              <br />
+              <br />
+            </div>
+            <div className={styles.secondaryTag}></div>
+            <div className={styles.largeSection}>
+              <br />
+              UNKNOWN&nbsp;&nbsp;
+              <br />
+              <br />
+            </div>
+          </RowSpaceBetween>
+          <RowSpaceBetween>
+            <div className={styles.tag}></div>
+            <div className={styles.smallWithBorder}></div>
+            <div className={styles.tag}></div>
+            <div className={styles.largeWithBorder}></div>
+          </RowSpaceBetween>
+          <RowSpaceBetween>
+            <div className={styles.secondaryTag}>
+              <br />
+              <br />
+            </div>
+            <div className={styles.smallSection}>
+              <br />
+              DECEASED&nbsp;
+              <br />
+              <br />
+            </div>
+            <div className={styles.secondaryTag}></div>
+            <div className={styles.largeSection}>
+              <br />
+              MORRILLCOLE&nbsp;&nbsp;
+              <br />
+              <br />
+            </div>
+          </RowSpaceBetween>
+          <RowSpaceBetween style={{ position: 'relative' }}>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.absoluteTag}></div>
+          </RowSpaceBetween>
+        </div>
+      </Card>
+    </>
+  );
+};
+
+export default Denabase;
+
+================
+File: reference/components/examples/MessagesInterface.tsx
+================
+import Avatar from '@components/Avatar';
+import ActionButton from '@components/ActionButton';
+import Divider from '@components/Divider';
+import DropdownMenuTrigger from '@components/DropdownMenuTrigger';
+import Indent from '@components/Indent';
+import Input from '@components/Input';
+import Message from '@components/Message';
+import MessageViewer from '@components/MessageViewer';
+import ModalError from '@components/modals/ModalError';
+import Navigation from '@components/Navigation';
+import RowEllipsis from '@components/RowEllipsis';
+import SidebarLayout from '@components/SidebarLayout';
+
+import * as React from 'react';
+
+interface MessagesInterfaceProps extends React.HTMLAttributes<HTMLSpanElement> {}
+
+const ChatPreviewInline = (props) => {
+  return <RowEllipsis style={{ opacity: 0.5, marginBottom: `10px` }}>{props.children}</RowEllipsis>;
+};
+
+const MessagesInterface: React.FC<MessagesInterfaceProps> = () => {
+  return (
+    <div style={{ minWidth: '28ch' }}>
+      <Navigation
+        logo="✶"
+        left={
+          <>
+            <DropdownMenuTrigger
+              items={[
+                {
+                  icon: '⊹',
+                  children: 'Open',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'New Message',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Quick Look',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Close Messages',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Open Conversation in New Window',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Print...',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+              ]}
+            >
+              <ActionButton>FILE</ActionButton>
+            </DropdownMenuTrigger>
+
+            <DropdownMenuTrigger
+              items={[
+                {
+                  icon: '⊹',
+                  children: 'Undo',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Redo',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Cut',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Copy',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Paste',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Paste and Match Style',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Delete',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Select All',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Find...',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Find Next',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Find Previous',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Spelling and Grammar',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Substitutions',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Speech',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Send Message',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Reply to Last Message',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Tapback Last Message',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Edit Last Message',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Autofill',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Start Dictation',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Emoji & Symbols',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+              ]}
+            >
+              <ActionButton>EDIT</ActionButton>
+            </DropdownMenuTrigger>
+            <DropdownMenuTrigger
+              items={[
+                {
+                  icon: '⊹',
+                  children: 'Show Tab Bar',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Show All Tabs',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Make Text Bigger',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Make Text Normal Size',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Make Text Smaller',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'All Messages',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Known Senders',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Unknown Senders',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Unread Messages',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Recently Delete',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Show Sidebar',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Enter Full Screen',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+              ]}
+            >
+              <ActionButton>VIEW</ActionButton>
+            </DropdownMenuTrigger>
+          </>
+        }
+        right={
+          <>
+            <DropdownMenuTrigger
+              items={[
+                {
+                  icon: '⊹',
+                  children: 'Search',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Messages Help',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+              ]}
+            >
+              <ActionButton>HELP</ActionButton>
+            </DropdownMenuTrigger>
+          </>
+        }
+      ></Navigation>
+      <Divider type="DOUBLE" />
+      <SidebarLayout
+        defaultSidebarWidth={12}
+        isShowingHandle={true}
+        sidebar={
+          <>
+            <Avatar>
+              <Indent>
+                Arthur
+                <br />
+                <ChatPreviewInline>No, it has to be more unique</ChatPreviewInline>
+              </Indent>
+            </Avatar>
+            <Avatar>
+              <Indent>
+                Ariadne
+                <br />
+                <ChatPreviewInline>No. Just you.</ChatPreviewInline>
+              </Indent>
+            </Avatar>
+            <Avatar>
+              <Indent>
+                Eames
+                <br />
+                <ChatPreviewInline>dream a little bigger</ChatPreviewInline>
+              </Indent>
+            </Avatar>
+            <Avatar>
+              <Indent>
+                Yusef
+                <br />
+                <ChatPreviewInline>Depends on the dream.</ChatPreviewInline>
+              </Indent>
+            </Avatar>
+            <Avatar>
+              <Indent>
+                Saito
+                <br />
+                <ChatPreviewInline>I bought the airline.</ChatPreviewInline>
+              </Indent>
+            </Avatar>
+          </>
+        }
+      >
+        <Message>Why are they all looking at me?</Message>
+        <MessageViewer>Because my subconscious feels that someone else is creating this world. The more you change things, the quicker the projections start to converge on you.</MessageViewer>
+        <Message>Converge?</Message>
+        <MessageViewer>It's the foreign nature of the dreamer. They attack like white blood cells fighting an infection.</MessageViewer>
+        <Message>They're going to attack us?</Message>
+        <MessageViewer>No. Just you.</MessageViewer>
+        <br />
+        <br />
+        <Input autoComplete="off" isBlink={true} label="Message" name="test_message_interface" />
+      </SidebarLayout>
+    </div>
+  );
+};
+
+export default MessagesInterface;
+
+================
+File: reference/components/examples/UpdatingDataTable.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+import DataTable from '@components/DataTable';
+
+const UpdatingDataTable = (props) => {
+  const [tableData, setTableData] = React.useState(props.data);
+
+  React.useEffect(() => {
+    const interval = setInterval(() => {
+      setTableData((prevData) => {
+        const header = prevData[0];
+        const rows = prevData.slice(1);
+
+        const updatedRows = rows.map((row) => {
+          const currentPrice = parseFloat(row[2].replace('$', ''));
+          const currentHoldings = parseInt(row[3], 10);
+          const priceChangeFactor = 1 + (Math.random() - 0.5) * 0.1;
+          const newPrice = currentPrice * priceChangeFactor;
+          const holdingsChange = Math.floor((Math.random() - 0.5) * 20);
+          const newHoldings = Math.max(1, currentHoldings + holdingsChange);
+
+          return [row[0], row[1], `$${newPrice.toFixed(2)}`, newHoldings.toString()];
+        });
+
+        updatedRows.sort((a, b) => {
+          const priceA = parseFloat(a[2].replace('$', ''));
+          const priceB = parseFloat(b[2].replace('$', ''));
+          return priceB - priceA;
+        });
+
+        return [header, ...updatedRows];
+      });
+    }, 1000);
+
+    return () => clearInterval(interval);
+  }, []);
+
+  return (
+    <>
+      <DataTable data={tableData} />
+    </>
+  );
+};
+
+export default UpdatingDataTable;
+
+================
+File: reference/components/modals/ModalAlert.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalAlert.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalAlert.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import Card from '@components/Card';
+
+interface ModalAlertProps {
+  buttonText?: string | any;
+  message: string;
+}
+
+function ModalAlert({ message, buttonText }: ModalAlertProps) {
+  const { close } = useModals();
+
+  return (
+    <div className={styles.root}>
+      <Card title="ALERT">
+        {message}
+        <br />
+        <br />
+        <Button onClick={() => close()}>{Utilities.isEmpty(buttonText) ? 'Close' : buttonText}</Button>
+      </Card>
+    </div>
+  );
+}
+
+export default ModalAlert;
+
+================
+File: reference/components/modals/ModalCanvasPlatformer.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalCanvasPlatformer.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalCanvasPlatformer.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import CanvasPlatformer from '@components/CanvasPlatformer';
+import Card from '@components/Card';
+
+interface ModalCanvasPlatformerProps {
+  buttonText?: string | any;
+}
+
+function ModalCanvasPlatformer({ buttonText }: ModalCanvasPlatformerProps) {
+  const { close } = useModals();
+
+  return (
+    <div className={styles.root}>
+      <Card title="ALERT">
+        <CanvasPlatformer rows={12} />
+        <br />
+        <br />
+        <Button onClick={() => close()}>{Utilities.isEmpty(buttonText) ? 'Close' : buttonText}</Button>
+      </Card>
+    </div>
+  );
+}
+
+export default ModalCanvasPlatformer;
+
+================
+File: reference/components/modals/ModalCanvasSnake.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalCanvasSnake.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalCanvasSnake.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import CanvasSnake from '@components/CanvasSnake';
+import Card from '@components/Card';
+
+interface ModalCanvasSnakeProps {
+  buttonText?: string | any;
+}
+
+function ModalCanvasSnake({ buttonText }: ModalCanvasSnakeProps) {
+  const { close } = useModals();
+
+  return (
+    <div className={styles.root}>
+      <Card title="CANVAS PLATFORMER">
+        <CanvasSnake rows={12} />
+        <br />
+        <br />
+        <Button onClick={() => close()}>{Utilities.isEmpty(buttonText) ? 'Close' : buttonText}</Button>
+      </Card>
+    </div>
+  );
+}
+
+export default ModalCanvasSnake;
+
+================
+File: reference/components/modals/ModalChess.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalChess.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalChess.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useHotkeys } from '@modules/hotkeys';
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import CardDouble from '@components/CardDouble';
+import Chessboard from '@components/Chessboard';
+
+interface ModalErrorProps {
+  buttonText?: string | any;
+  board: string[][];
+  title?: string;
+}
+
+function ModalChess({ board, buttonText, title }: ModalErrorProps) {
+  const { close } = useModals();
+
+  useHotkeys('enter', () => close());
+
+  return (
+    <div className={styles.root}>
+      <CardDouble title={title} style={{ textAlign: 'center' }}>
+        <Chessboard board={board} />
+        <br />
+        <br />
+        <Button onClick={() => close()}>{Utilities.isEmpty(buttonText) ? 'CLOSE' : buttonText}</Button>
+      </CardDouble>
+    </div>
+  );
+}
+
+export default ModalChess;
+
+================
+File: reference/components/modals/ModalCreateAccount.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalCreateAccount.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalAlert.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import CardDouble from '@components/CardDouble';
+import Checkbox from '@components/Checkbox';
+import Input from '@components/Input';
+import RadioButtonGroup from '@components/RadioButtonGroup';
+
+function ModalCreateAccount() {
+  const { close } = useModals();
+
+  return (
+    <div className={styles.root}>
+      <CardDouble title="NEW ACCOUNT">
+        Create a new MakeBelieve™ account, where anything is possible at your command line in the browser.
+        <br />
+        <br />
+        <RadioButtonGroup
+          defaultValue="modal_developer"
+          options={[
+            { value: 'modal_individual', label: 'I’m using this for personal use.' },
+            { value: 'modal_developer', label: 'I’m building or creating something for work.' },
+            { value: 'modal_company', label: 'We’re using this as a team or organization.' },
+          ]}
+        />
+        <br />
+        <Input autoComplete="off" label="USERNAME" placeholder="Choose a username (e.g., SurfGirl29)" name="modal_username" />
+        <Input autoComplete="off" label="PASSWORD" placeholder="Create a password (8+ characters)" type="password" name="modal_password" />
+        <Input autoComplete="off" label="CONFIRM" placeholder="Type it again" type="password" name="modal_confirm" />
+        <br />
+        <Checkbox name="modal_terms">I agree to the Terms of Service, Data Privacy Policy, and Acceptable Use Guidelines.</Checkbox>
+        <Checkbox name="modal_goodwill">I agree not to use this service for unlawful purposes.</Checkbox>
+        <br />
+        <Button onClick={() => close()}>Create an account</Button>
+      </CardDouble>
+    </div>
+  );
+}
+
+export default ModalCreateAccount;
+
+================
+File: reference/components/modals/ModalError.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalError.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalError.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useHotkeys } from '@modules/hotkeys';
+import { useModals } from '@components/page/ModalContext';
+
+import ActionButton from '@components/ActionButton';
+import Button from '@components/Button';
+import CardDouble from '@components/CardDouble';
+import Grid from '@components/Grid';
+
+interface ModalErrorProps {
+  buttonText?: string | any;
+  message: string | any;
+  title?: string;
+}
+
+// TODO(jimmylee)
+// Enter doesn't always work for some reason.
+function ModalError({ message, buttonText, title }: ModalErrorProps) {
+  const { close } = useModals();
+
+  useHotkeys('enter', () => close());
+
+  return (
+    <div className={styles.root}>
+      <CardDouble title={title}>
+        <br />
+        {message}
+        <Grid>
+          <ul>
+            <li>
+              Press{' '}
+              <ActionButton hotkey="⏎" onClick={() => close()}>
+                ENTER
+              </ActionButton>{' '}
+              to continue.
+            </li>
+          </ul>
+        </Grid>
+      </CardDouble>
+    </div>
+  );
+}
+
+export default ModalError;
+
+================
+File: reference/components/modals/ModalMatrixModes.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalMatrixModes.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalMatrixModes.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import Card from '@components/Card';
+import MatrixLoader from '@components/MatrixLoader';
+
+interface ModalMatrixModesProps {
+  buttonText?: string | any;
+}
+
+function ModalMatrixModes({ buttonText }: ModalMatrixModesProps) {
+  const { close } = useModals();
+
+  return (
+    <div className={styles.root}>
+      <Card title="MATRIX MODES">
+        <Card title="KATAKANA DEFAULT">
+          <MatrixLoader rows={32} mode="katakana" />
+        </Card>
+        <Card title="GREEK LTR">
+          <MatrixLoader direction="left-to-right" rows={8} mode="greek" />
+        </Card>
+        <br />
+        <br />
+        <Button onClick={() => close()}>{Utilities.isEmpty(buttonText) ? 'Close' : buttonText}</Button>
+      </Card>
+    </div>
+  );
+}
+
+export default ModalMatrixModes;
+
+================
+File: reference/components/page/DefaultActionBar.module.scss
+================
+.root {
+  position: fixed;
+  top: 0;
+  left: 2ch;
+  z-index: 1;
+}
+
+================
+File: reference/components/page/DefaultActionBar.tsx
+================
+'use client';
+
+import styles from '@components/page/DefaultActionBar.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { toggleDebugGrid } from '@components/DebugGrid';
+import { useHotkeys } from '@modules/hotkeys';
+
+import ActionBar from '@components/ActionBar';
+import ButtonGroup from '@components/ButtonGroup';
+
+function isElement(target: EventTarget | null): target is Element {
+  return target instanceof Element;
+}
+
+function isHTMLElement(target: EventTarget | null): target is HTMLElement {
+  return target instanceof HTMLElement;
+}
+
+const findFocusableParent = (element: Element | null): Element | null => {
+  while (element) {
+    element = element.parentElement;
+    if (element && Utilities.isFocusableElement(element)) {
+      return element;
+    }
+  }
+  return null;
+};
+
+const findNextFocusableSibling = (element: Element, direction: 'next' | 'previous'): HTMLElement | null => {
+  let sibling = direction === 'next' ? element.nextElementSibling : element.previousElementSibling;
+
+  while (sibling) {
+    if (Utilities.isFocusableElement(sibling)) {
+      return sibling as HTMLElement;
+    }
+
+    const focusableDescendant = Utilities.findFocusableDescendant(sibling, null, direction);
+    if (focusableDescendant) {
+      return focusableDescendant;
+    }
+
+    sibling = direction === 'next' ? sibling.nextElementSibling : sibling.previousElementSibling;
+  }
+
+  return null;
+};
+
+const findNextFocusableAncestor = (element: Element, direction: 'next' | 'previous'): HTMLElement | null => {
+  let ancestor = element.parentElement;
+
+  while (ancestor) {
+    const nextFocusable = findNextFocusableSibling(ancestor, direction);
+    if (nextFocusable) {
+      return nextFocusable;
+    }
+    ancestor = ancestor.parentElement;
+  }
+
+  return null;
+};
+
+const useGlobalNavigationHotkeys = () => {
+  const onHandleSubmit = (event: KeyboardEvent) => {
+    const target = event.target;
+    if (Utilities.isFocusableElement(target)) {
+      event.preventDefault();
+      (target as HTMLElement).click();
+    }
+  };
+
+  const onHandleNextFocus = (event: KeyboardEvent) => {
+    const target = event.target;
+
+    if (Utilities.isFocusableElement(target)) {
+      event.preventDefault();
+
+      const nextFocusable = Utilities.findNextFocusable(target as Element, 'next');
+      if (nextFocusable) {
+        nextFocusable.focus();
+      }
+    }
+  };
+
+  const onHandlePreviousFocus = (event: KeyboardEvent) => {
+    const target = event.target;
+
+    if (Utilities.isFocusableElement(target)) {
+      event.preventDefault();
+
+      const previousFocusable = Utilities.findNextFocusable(target as Element, 'previous');
+      if (previousFocusable) {
+        previousFocusable.focus();
+      }
+    }
+  };
+
+  useHotkeys('ArrowDown', onHandleNextFocus);
+  useHotkeys('ArrowUp', onHandlePreviousFocus);
+  useHotkeys('ArrowRight', onHandleNextFocus);
+  useHotkeys('ArrowLeft', onHandlePreviousFocus);
+  useHotkeys('Enter', onHandleSubmit);
+  useHotkeys(' ', onHandleSubmit);
+};
+
+interface DefaultActionBarProps {
+  items?: {
+    hotkey: string;
+    onClick: () => void;
+    body: React.ReactNode;
+    items?: any;
+  }[];
+}
+
+const DefaultActionBar: React.FC<DefaultActionBarProps> = ({ items = [] }) => {
+  const [isGrid, setGrid] = React.useState(false);
+  useHotkeys('ctrl+g', () => toggleDebugGrid());
+
+  useGlobalNavigationHotkeys();
+
+  return (
+    <div className={styles.root}>
+      <ActionBar
+        items={[
+          {
+            hotkey: '⌃+O',
+            body: 'Fonts',
+            openHotkey: 'ctrl+o',
+            items: [
+              {
+                icon: '⊹',
+                children: 'Commit Mono V143 [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-commit-mono'),
+              },
+              {
+                icon: '⊹',
+                children: 'Departure Mono [MIT]',
+                onClick: () => Utilities.onHandleFontChange('font-use-departure-mono'),
+              },
+              {
+                icon: '⊹',
+                children: 'Fira Code [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-fira-code'),
+              },
+              {
+                icon: '⊹',
+                children: 'Fragment Mono [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-fragment-mono'),
+              },
+              {
+                icon: '⊹',
+                children: 'Geist Mono [OFL] [DEFAULT]',
+                onClick: () => Utilities.onHandleFontChange(''),
+              },
+              {
+                icon: '⊹',
+                children: 'Iosevka Term [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-iosevka-term'),
+              },
+              {
+                icon: '⊹',
+                children: 'JetBrains Mono [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-jet-brains-mono'),
+              },
+              {
+                icon: '⊹',
+                children: 'SFMono Square [FOSS]',
+                onClick: () => Utilities.onHandleFontChange('font-use-sfmono-square'),
+              },
+              {
+                icon: '⊹',
+                children: 'Server Mono 0.0.6 [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-server-mono'),
+              },
+              {
+                icon: '⊹',
+                children: 'TX-02 Berkeley Mono™',
+                onClick: () => Utilities.onHandleFontChange('font-use-berkeley-mono'),
+              },
+            ],
+          },
+          {
+            hotkey: '⌃+T',
+            body: 'Theme',
+            openHotkey: 'ctrl+t',
+            items: [
+              {
+                icon: '⊹',
+                children: 'Refined White [DEFAULT]',
+                onClick: () => Utilities.onHandleThemeChange(''),
+              },
+              {
+                icon: '⊹',
+                children: 'Black Midnight Vapor',
+                onClick: () => Utilities.onHandleThemeChange('theme-dark'),
+              },
+              {
+                icon: '⊹',
+                children: 'U-571 Code Red',
+                onClick: () => Utilities.onHandleThemeChange('theme-black-red'),
+              },
+              {
+                icon: '⊹',
+                children: 'Digital Bioluminescence',
+                onClick: () => Utilities.onHandleThemeChange('theme-black-teal'),
+              },
+              {
+                icon: '⊹',
+                children: 'Operation Safe Blue',
+                onClick: () => Utilities.onHandleThemeChange('theme-blue'),
+              },
+              {
+                icon: '⊹',
+                children: 'Neon Green Garden',
+                onClick: () => Utilities.onHandleThemeChange('theme-green'),
+              },
+              {
+                icon: '⊹',
+                children: 'Kirkland Signature AS/400',
+                onClick: () => Utilities.onHandleThemeChange('theme-black-green'),
+              },
+            ],
+          },
+          {
+            hotkey: '⌃+G',
+            onClick: () => {
+              toggleDebugGrid();
+            },
+            body: 'Grid',
+            selected: false,
+          },
+          ...items,
+        ]}
+      />
+    </div>
+  );
+};
+
+export default DefaultActionBar;
+
+================
+File: reference/components/page/DefaultLayout.module.scss
+================
+.body {
+  width: 100%;
+}
+
+.pixel {
+  height: 1px;
+  left: 0;
+  position: absolute;
+  top: 0;
+  width: 1px;
+}
+
+================
+File: reference/components/page/DefaultLayout.tsx
+================
+import styles from '@components/page/DefaultLayout.module.scss';
+
+import * as React from 'react';
+
+interface DefaultLayoutProps {
+  previewPixelSRC: string;
+  children?: React.ReactNode;
+}
+
+const DefaultLayout: React.FC<DefaultLayoutProps> = ({ previewPixelSRC, children }) => {
+  return (
+    <div className={styles.body}>
+      <img className={styles.pixel} src={previewPixelSRC} alt="" />
+      {children}
+    </div>
+  );
+};
+
+export default DefaultLayout;
+
+================
+File: reference/components/page/ModalContext.tsx
+================
+import * as React from 'react';
+
+export type ModalComponent<P = {}> = React.ComponentType<React.PropsWithoutRef<P>>;
+
+export interface ModalState<P = any> {
+  key: string;
+  component: ModalComponent<P>;
+  props: P;
+}
+
+interface ModalContextType {
+  modalStack: ModalState[];
+  open: <P>(component: ModalComponent<P>, props: P) => string;
+  close: (key?: string) => void;
+}
+
+const ModalContext = React.createContext<ModalContextType | null>(null);
+
+export const ModalProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
+  const [modalStack, setModalStack] = React.useState<ModalState<any>[]>([]);
+
+  const open = <P,>(component: ModalComponent<P>, props: P): string => {
+    const key = `modal-${Date.now()}-${Math.random()}`;
+
+    const newModal: ModalState<P> = { key, component, props };
+
+    setModalStack((prev) => [...prev, newModal as ModalState<any>]);
+
+    return key;
+  };
+
+  const close = (key?: string): void => {
+    setModalStack((prev) =>
+      key ? prev.filter((modal) => modal.key !== key) : prev.slice(0, -1)
+    );
+  };
+
+  return (
+    <ModalContext.Provider value={{ modalStack, open, close }}>
+      {children}
+    </ModalContext.Provider>
+  );
+};
+
+export const useModals = (): ModalContextType => {
+  const context = React.useContext(ModalContext);
+  if (!context) {
+    throw new Error('useModals must be used within a ModalProvider and use client');
+  }
+  return context;
+};
+
+================
+File: reference/components/page/root.module.scss
+================
+.row {
+  border-bottom: 1px solid var(--theme-border);
+}
+
+.column {
+  max-width: 768px;
+  padding: 0 24px 0 24px;
+  margin: 0 auto 0 auto;
+  display: block;
+  border-left: 1px solid var(--theme-border);
+  border-right: 1px solid var(--theme-border);
+}
+
+.video {
+  display: block;
+  width: 100%;
+}
+
+.h1 {
+  display: block;
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+.p {
+  display: block;
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+.aside {
+  display: block;
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+.h2 {
+  display: block;
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+.image {
+  display: block;
+  width: 100%;
+}
+
+================
+File: reference/components/svg/InternetDevelopmentLogo.tsx
+================
+export default function IntDevLogo(props) {
+  return (
+    <svg viewBox="0 0 494.25 80.29" fill="currentColor" aria-hidden {...props}>
+      <path d="m57.8,29.75h0c0,5.34,4.33,9.67,9.67,9.67h38.11c5.34,0,9.67,4.33,9.67,9.67v.54c0,5.34-4.33,9.67-9.67,9.67h-38.11c-5.34,0-9.67,4.33-9.67,9.67v.29c0,5.34-4.33,9.67-9.67,9.67H9.67c-5.34,0-9.67-4.33-9.67-9.67v-.54c0-5.34,4.33-9.67,9.67-9.67h38.11c5.34,0,9.67-4.33,9.67-9.67v-.02c0-5.34-4.33-9.67-9.67-9.67H9.67c-5.34,0-9.67-4.33-9.67-9.67v-.54c0-5.34,4.33-9.67,9.67-9.67h38.11c5.34,0,9.67-4.33,9.67-9.67v-.27c0-5.34,4.33-9.67,9.67-9.67h38.45c5.34,0,9.67,4.33,9.67,9.67v.55c0,5.34-4.33,9.67-9.67,9.67h-38.11c-5.34,0-9.67,4.33-9.67,9.67Z" />
+      <g>
+        <path d="m136.93,75.57l7.21-2.12V5.34l-7.21-2.02V0h26.69v3.32l-7,2.02v68.11l7,2.12v3.37h-26.69v-3.37Z" />
+        <path d="m182.75,14.67v58.88l7.26,2.02v3.37h-19.54v-3.37l7.31-2.02V5.24l-7.31-1.92V0h20.63l31.88,51.37V5.24l-7.31-1.92V0h19.59v3.32l-7.36,1.92v75.06h-4.72L182.75,14.67Z" />
+        <path d="m253.86,75.57l9.59-2.18V5.13h-14.25c-3.52,5.7-5.96,12.44-7.57,18.09h-2.8l2.95-23.22h55.57l3.01,23.22h-2.8c-1.66-5.65-3.89-12.39-7.41-18.09h-14.2v68.27l9.54,2.18v3.37h-31.62v-3.37Z" />
+        <path d="m304.76,75.47l7.1-1.97V5.24l-7.1-1.92V0h21.87c13.94,0,21.98,1.92,28.35,7.46,7.77,6.74,12.7,18.14,12.7,31.98s-5.23,26.75-13.32,33.43c-5.29,4.35-11.04,6.06-20.01,6.06h-29.6v-3.47Zm42.97-8.92c3.89-5.8,5.75-15.08,5.75-27.47s-1.87-20.73-5.81-26.49c-3.52-5.13-8.6-7.41-16.22-7.41h-7.1v62.51c0,4.46,2.23,6.17,8.4,6.17,6.89,0,11.56-2.23,14.98-7.31Z" />
+        <path d="m374.05,75.57l7.05-2.02V5.24l-7.05-1.92V0h48.93l1.5,22.55h-3.01c-1.4-5.55-3.42-11.77-6.22-17.31h-21.67v29.44h11.61c1.76-3.94,2.75-7.98,3.42-11.82h3.01v28.72h-3.01c-.62-3.89-1.76-7.93-3.42-11.77h-11.61v33.8h21.2c3.47-6.22,5.39-12.44,7.36-18.66h3.78l-3.37,24h-48.52v-3.37Z" />
+        <path d="m436.92,9.59c-1.5-4.61-2.9-5.75-8.66-6.27V0h31.72v3.32c-8.03.73-9.12,1.71-7.67,6.79l12.75,44.89.78.05,11.77-40.48c2.07-7.36.36-9.8-8.09-11.25V0h24.73v3.32c-7.77,1.55-9.17,3.32-11.61,11.4l-19.85,65.31h-3.21l-22.65-70.44Z" />
+      </g>
+    </svg>
+  );
+}
+
+================
+File: reference/components/svg/InternetDevelopmentLogoMark.tsx
+================
+export default function LogoMark(props) {
+  return (
+    <svg viewBox="0 0 116.29 80.29" fill="currentColor" aria-hidden {...props}>
+      <path d="m57.8,29.75h0c0,5.34,4.33,9.67,9.67,9.67h38.11c5.34,0,9.67,4.33,9.67,9.67v.54c0,5.34-4.33,9.67-9.67,9.67h-38.11c-5.34,0-9.67,4.33-9.67,9.67v.29c0,5.34-4.33,9.67-9.67,9.67H9.67c-5.34,0-9.67-4.33-9.67-9.67v-.54c0-5.34,4.33-9.67,9.67-9.67h38.11c5.34,0,9.67-4.33,9.67-9.67v-.02c0-5.34-4.33-9.67-9.67-9.67H9.67c-5.34,0-9.67-4.33-9.67-9.67v-.54c0-5.34,4.33-9.67,9.67-9.67h38.11c5.34,0,9.67-4.33,9.67-9.67v-.27c0-5.34,4.33-9.67,9.67-9.67h38.45c5.34,0,9.67,4.33,9.67,9.67v.55c0,5.34-4.33,9.67-9.67,9.67h-38.11c-5.34,0-9.67,4.33-9.67,9.67Z" />
+    </svg>
+  );
+}
+
+================
+File: reference/components/svg/Sphere.tsx
+================
+import * as React from 'react';
+
+export default function Sphere(props: { size?: number; segments?: number; style?: React.CSSProperties }) {
+  const size = props.size || 500;
+  const segments = props.segments || 6;
+  const radius = size * 0.4;
+
+  const generateSpherePoints = () => {
+    const points: { x: number; y: number }[][] = [];
+    for (let lat = 0; lat <= segments; lat++) {
+      const row: { x: number; y: number }[] = [];
+      const phi = (lat * Math.PI) / segments;
+      for (let lon = 0; lon <= segments; lon++) {
+        const theta = (lon * 2 * Math.PI) / segments;
+        const x = radius * Math.sin(phi) * Math.cos(theta);
+        const y = radius * Math.cos(phi);
+        const z = radius * Math.sin(phi) * Math.sin(theta);
+        const scale = 1 + z / (radius * 4);
+        row.push({
+          x: size / 2 + x * scale,
+          y: size / 2 + y * scale,
+        });
+      }
+      points.push(row);
+    }
+    return points;
+  };
+
+  const createPaths = () => {
+    const spherePoints = generateSpherePoints();
+    const paths: string[] = [];
+    for (let lat = 0; lat <= segments; lat++) {
+      let pathString = `M ${spherePoints[lat][0].x},${spherePoints[lat][0].y}`;
+      for (let lon = 1; lon <= segments; lon++) {
+        pathString += ` L ${spherePoints[lat][lon].x},${spherePoints[lat][lon].y}`;
+      }
+      paths.push(pathString);
+    }
+    for (let lon = 0; lon <= segments; lon++) {
+      let pathString = `M ${spherePoints[0][lon].x},${spherePoints[0][lon].y}`;
+      for (let lat = 1; lat <= segments; lat++) {
+        pathString += ` L ${spherePoints[lat][lon].x},${spherePoints[lat][lon].y}`;
+      }
+      paths.push(pathString);
+    }
+    return paths;
+  };
+
+  return (
+    <svg viewBox={`0 0 ${size} ${size}`} xmlns="http://www.w3.org/2000/svg" style={props.style}>
+      <g fill="none" stroke="currentColor" strokeWidth="1">
+        {createPaths().map((path, index) => (
+          <path key={index} d={path} vectorEffect="non-scaling-stroke" />
+        ))}
+      </g>
+    </svg>
+  );
+}
+
+================
+File: reference/components/Accordion.module.scss
+================
+.flex {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+  padding: calc(var(--theme-line-height-base) * 1rem) 0 calc(var(--theme-line-height-base) * 1rem) 0;
+
+  background: var(--theme-border-subdued);
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.icon {
+  flex-shrink: 0;
+  user-select: none;
+  cursor: pointer;
+  font-size: var(--font-size);
+  align-self: stretch;
+}
+
+.content {
+  min-width: 10%;
+  width: 100%;
+  user-select: none;
+  cursor: pointer;
+  transition: 200ms ease all;
+  transition-property: padding;
+  padding-left: 0ch;
+}
+
+.active {
+  .content {
+    padding-left: 1ch;
+  }
+
+  .icon {
+  }
+}
+
+================
+File: reference/components/Accordion.tsx
+================
+'use client';
+
+import styles from '@components/Accordion.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import Row from '@components/Row';
+
+interface AccordionProps {
+  defaultValue?: boolean;
+  title: string;
+  children?: React.ReactNode;
+}
+
+const Accordion: React.FC<AccordionProps> = ({ defaultValue = false, title, children }) => {
+  const [show, setShow] = React.useState<boolean>(defaultValue);
+  const accordionRef = React.useRef<HTMLDivElement | null>(null);
+
+  const toggleShow = (): void => {
+    setShow((prevShow) => !prevShow);
+  };
+
+  return (
+    <>
+      <Row ref={accordionRef} tabIndex={0} role="button" onClick={toggleShow} aria-expanded={show}>
+        <div className={Utilities.classNames(styles.flex, show ? styles.active : undefined)}>
+          <span className={styles.icon}>{show ? '▾' : '▸'}</span>
+          <span className={styles.content}>{title}</span>
+        </div>
+      </Row>
+      {show && <Row style={{ paddingLeft: '2ch' }}>{children}</Row>}
+    </>
+  );
+};
+
+export default Accordion;
+
+================
+File: reference/components/ActionBar.module.scss
+================
+.root {
+  background: var(--theme-background);
+  box-shadow: inset 0 0 0 1px var(--theme-border);
+}
+
+================
+File: reference/components/ActionBar.tsx
+================
+import styles from '@components/ActionBar.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import ButtonGroup from '@components/ButtonGroup';
+
+interface ActionBarItem {
+  hotkey?: string;
+  onClick?: () => void;
+  openHotkey?: string;
+  selected?: boolean;
+  body: React.ReactNode;
+  items?: any;
+}
+
+interface ActionBarProps {
+  items: ActionBarItem[];
+}
+
+const ActionBar: React.FC<ActionBarProps> = ({ items }) => {
+  return (
+    <div className={styles.root}>
+      <ButtonGroup items={items} />
+    </div>
+  );
+};
+
+export default ActionBar;
+
+================
+File: reference/components/ActionButton.module.scss
+================
+.hotkey {
+  background: var(--theme-button-foreground);
+  color: var(--theme-text);
+  cursor: pointer;
+  flex-shrink: 0;
+  font-weight: 400;
+  padding: 0 1ch 0 1ch;
+  text-indent: 0ch;
+  user-select: none;
+}
+
+.content {
+  background: var(--theme-button-background);
+  box-shadow: inset 0 0 0 2px var(--theme-button-foreground);
+  cursor: pointer;
+  flex-shrink: 0;
+  font-weight: 400;
+  padding: 0 1ch 0 1ch;
+  text-indent: 0ch;
+  text-transform: uppercase;
+  user-select: none;
+}
+
+.root {
+  display: inline-flex;
+  align-items: center;
+  justify-content: space-between;
+  cursor: pointer;
+  outline: 0;
+  border: 0;
+  margin: 0;
+  padding: 0;
+  box-sizing: border-box;
+  font-family: var(--font-family-mono);
+  font-size: var(--font-size);
+  flex-shrink: 0;
+
+  &:hover .hotkey {
+    background: var(--theme-focused-foreground);
+  }
+
+  &:hover .content {
+    box-shadow: inset 0 0 0 2px var(--theme-focused-foreground);
+  }
+
+  &:focus .hotkey {
+    background: var(--theme-focused-foreground);
+  }
+
+  &:focus .content {
+    box-shadow: inset 0 0 0 2px var(--theme-focused-foreground);
+  }
+}
+
+.selected {
+  .content {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/ActionButton.tsx
+================
+import styles from '@components/ActionButton.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface ActionButtonProps {
+  onClick?: () => void;
+  hotkey?: any;
+  children?: React.ReactNode;
+  style?: any;
+  rootStyle?: any;
+  isSelected?: boolean;
+}
+
+const ActionButton = React.forwardRef<HTMLDivElement, ActionButtonProps>(({ onClick, hotkey, children, style, rootStyle, isSelected }, ref) => {
+  return (
+    <div className={Utilities.classNames(styles.root, isSelected ? styles.selected : null)} style={rootStyle} onClick={onClick} tabIndex={0} ref={ref} role="button">
+      {Utilities.isEmpty(hotkey) ? null : <span className={styles.hotkey}>{hotkey}</span>}
+      <span className={styles.content} style={style}>
+        {children}
+      </span>
+    </div>
+  );
+});
+
+ActionButton.displayName = 'ActionButton';
+
+export default ActionButton;
+
+================
+File: reference/components/ActionListItem.module.scss
+================
+.item {
+  align-items: flex-start;
+  background: transparent;
+  color: var(--theme-text);
+  cursor: pointer;
+  display: flex;
+  justify-content: space-between;
+  outline: 0;
+  border: 0;
+  text-decoration: none;
+
+  &:visited {
+    background: transparent;
+    color: var(--theme-text);
+  }
+
+  &:hover {
+    background: transparent;
+    color: var(--theme-text);
+  }
+
+  &:hover .icon {
+    background: var(--theme-focused-foreground);
+  }
+
+  &:focus .icon {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.icon {
+  align-items: center;
+  background: var(--theme-button-foreground);
+  display: inline-flex;
+  flex-shrink: 0;
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  justify-content: center;
+  width: 3ch;
+  user-select: none;
+}
+
+.text {
+  align-items: center;
+  align-self: stretch;
+  background: var(--theme-button-background);
+  display: inline-flex;
+  justify-content: flex-start;
+  min-width: 10%;
+  padding: 0 1ch 0 1ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/ActionListItem.tsx
+================
+import styles from '@components/ActionListItem.module.scss';
+
+import * as React from 'react';
+
+interface ActionListItemProps {
+  style?: React.CSSProperties;
+  icon?: React.ReactNode;
+  children?: React.ReactNode;
+  href?: string;
+  target?: string;
+  onClick?: React.MouseEventHandler<HTMLDivElement | HTMLAnchorElement>;
+}
+
+const ActionListItem: React.FC<ActionListItemProps> = (props) => {
+  const { href, target, onClick, children, icon, style } = props;
+
+  if (href) {
+    return (
+      <a className={styles.item} href={href} target={target} style={style} tabIndex={0} role="link">
+        <figure className={styles.icon}>{icon}</figure>
+        <span className={styles.text}>{children}</span>
+      </a>
+    );
+  }
+
+  return (
+    <div className={styles.item} onClick={onClick} style={style} tabIndex={0} role="button">
+      <figure className={styles.icon}>{icon}</figure>
+      <span className={styles.text}>{children}</span>
+    </div>
+  );
+};
+
+export default ActionListItem;
+
+================
+File: reference/components/AlertBanner.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border);
+  box-shadow: 1ch 1ch 0 0 var(--theme-border-subdued);
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  font-weight: 400;
+}
+
+================
+File: reference/components/AlertBanner.tsx
+================
+import styles from '@components/AlertBanner.module.scss';
+
+import * as React from 'react';
+
+interface AlertBannerProps {
+  style?: any;
+  children?: any;
+}
+
+const AlertBanner: React.FC<AlertBannerProps> = ({ style: propStyle, ...rest }) => {
+  let style: React.CSSProperties = { ...propStyle };
+
+  return <div className={styles.root} {...rest} style={style} />;
+};
+
+export default AlertBanner;
+
+================
+File: reference/components/Avatar.module.scss
+================
+.parent {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+}
+
+.placeholder {
+  background: var(--theme-border);
+  display: inline-block;
+  width: 4ch;
+  height: calc(var(--font-size) * var(--theme-line-height-base) * 2);
+  vertical-align: bottom;
+  flex-shrink: 0;
+  position: relative;
+
+  &:hover {
+    &::before {
+      content: '';
+      top: 0;
+      left: 0;
+      right: 0;
+      bottom: 0;
+      position: absolute;
+      pointer-events: none;
+      opacity: 0.5;
+      background: var(--theme-focused-foreground);
+    }
+  }
+}
+
+.root {
+  background: unset;
+  background-size: cover;
+  background-position: 50% 50%;
+  background-repeat: no-repeat;
+  display: inline-block;
+  width: 4ch;
+  height: calc(var(--font-size) * var(--theme-line-height-base) * 2);
+  vertical-align: bottom;
+  flex-shrink: 0;
+  position: relative;
+
+  &:hover {
+    background: unset;
+    background-size: cover;
+    background-position: 50% 50%;
+    background-repeat: no-repeat;
+    &::before {
+      content: '';
+      top: 0;
+      left: 0;
+      right: 0;
+      bottom: 0;
+      position: absolute;
+      pointer-events: none;
+      opacity: 0.5;
+      background: var(--theme-focused-foreground);
+    }
+  }
+}
+
+a {
+  &.root {
+    background: unset;
+    background-size: cover;
+    background-position: 50% 50%;
+    background-repeat: no-repeat;
+    display: inline-block;
+    width: 4ch;
+    height: calc(var(--font-size) * var(--theme-line-height-base) * 2);
+    vertical-align: bottom;
+    flex-shrink: 0;
+    position: relative;
+
+    &:hover {
+      background: unset;
+      background-size: cover;
+      background-position: 50% 50%;
+      background-repeat: no-repeat;
+      &::before {
+        content: '';
+        top: 0;
+        left: 0;
+        right: 0;
+        bottom: 0;
+        position: absolute;
+        pointer-events: none;
+        opacity: 0.5;
+        background: var(--theme-focused-foreground);
+      }
+    }
+
+    &:focus {
+      background: unset;
+      background-size: cover;
+      background-position: 50% 50%;
+      background-repeat: no-repeat;
+      outline: 0;
+
+      &::before {
+        content: '';
+        top: 0;
+        left: 0;
+        right: 0;
+        bottom: 0;
+        position: absolute;
+        pointer-events: none;
+        opacity: 0.5;
+        background: var(--theme-focused-foreground);
+      }
+    }
+  }
+}
+
+.right {
+  min-width: 10%;
+  width: 100%;
+  background: var(--theme-foreground);
+}
+
+================
+File: reference/components/Avatar.tsx
+================
+import styles from '@components/Avatar.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface AvatarProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'style' | 'className' | 'children'> {
+  src?: string;
+  href?: string;
+  target?: string;
+  style?: React.CSSProperties;
+  children?: React.ReactNode;
+}
+
+const Avatar: React.FC<AvatarProps> = (props) => {
+  const { src, style: propStyle, href, target, children, ...rest } = props;
+
+  const backgroundStyle = src ? { backgroundImage: `url(${src})` } : {};
+
+  const combinedStyle = { ...propStyle, ...backgroundStyle };
+
+  let avatarElement: React.ReactElement;
+
+  if (href) {
+    avatarElement = <a className={Utilities.classNames(src ? styles.root : styles.placeholder)} style={combinedStyle} href={href} target={target} tabIndex={0} role="link" />;
+  } else {
+    avatarElement = <figure className={Utilities.classNames(src ? styles.root : styles.placeholder)} style={combinedStyle} />;
+  }
+
+  if (!children) {
+    return avatarElement;
+  }
+
+  return (
+    <div className={styles.parent} {...rest}>
+      {avatarElement}
+      <span className={styles.right}>{children}</span>
+    </div>
+  );
+};
+
+export default Avatar;
+
+================
+File: reference/components/Badge.module.scss
+================
+.root {
+  display: inline-block;
+  vertical-align: top;
+  text-align: center;
+  font-weight: 400;
+  margin: 0;
+  outline: 0;
+  border: 0;
+  font-family: var(--font-family-mono);
+  min-height: calc(var(--theme-line-height-base) * var(--font-size));
+  text-transform: uppercase;
+  transition: 200ms ease all;
+  background: var(--theme-border);
+  padding: 0 1ch 0 1ch;
+}
+
+================
+File: reference/components/Badge.tsx
+================
+'use client';
+
+import styles from '@components/Badge.module.scss';
+
+import * as React from 'react';
+
+interface BadgeProps extends React.HTMLAttributes<HTMLSpanElement> {
+  children?: React.ReactNode;
+}
+
+const Badge: React.FC<BadgeProps> = ({ children, ...rest }) => {
+  return (
+    <span className={styles.root} {...rest}>
+      {children}
+    </span>
+  );
+};
+
+export default Badge;
+
+================
+File: reference/components/BarLoader.module.scss
+================
+.root {
+  background: var(--theme-border);
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  white-space: nowrap;
+  text-align: left;
+  vertical-align: bottom;
+  display: block;
+}
+
+.bar {
+  background: linear-gradient(to right, transparent, var(--theme-text));
+  height: 100%;
+  width: 0%;
+  transition: width 0.1s linear;
+}
+
+================
+File: reference/components/BarLoader.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+import styles from '@components/BarLoader.module.scss';
+
+interface BarLoaderProps {
+  intervalRate?: number;
+  progress?: number;
+}
+
+const BarLoader: React.FC<BarLoaderProps> = ({ intervalRate, progress }) => {
+  const [currentProgress, setCurrentProgress] = React.useState<number>(progress || 0);
+
+  React.useEffect(() => {
+    if (progress !== undefined) {
+      setCurrentProgress(progress);
+      return;
+    }
+
+    if (!intervalRate) return;
+
+    const interval = setInterval(() => {
+      setCurrentProgress((prev) => (prev + 10) % 110);
+    }, intervalRate);
+
+    return () => clearInterval(interval);
+  }, [intervalRate, progress]);
+
+  return (
+    <div className={styles.root}>
+      <div
+        className={styles.bar}
+        style={{
+          width: `${Math.min(currentProgress, 100)}%`,
+        }}
+      ></div>
+    </div>
+  );
+};
+
+export default BarLoader;
+
+================
+File: reference/components/BarProgress.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border-subdued);
+  white-space: nowrap;
+  text-align: left;
+  vertical-align: bottom;
+  overflow: hidden;
+  position: relative;
+}
+
+.measure {
+  visibility: hidden;
+  position: absolute;
+  pointer-events: none;
+}
+
+================
+File: reference/components/BarProgress.tsx
+================
+'use client';
+
+import styles from '@components/BarProgress.module.scss';
+
+import * as React from 'react';
+
+interface BarProgressProps {
+  intervalRate?: number;
+  progress?: number;
+  fillChar?: string;
+}
+
+const BarProgress: React.FC<BarProgressProps> = ({ intervalRate, progress, fillChar = '░' }) => {
+  const [currentProgress, setCurrentProgress] = React.useState(progress ?? 0);
+  const [containerWidth, setContainerWidth] = React.useState(0);
+  const [charWidth, setCharWidth] = React.useState(0);
+
+  const containerRef = React.useRef<HTMLDivElement>(null);
+  const measureRef = React.useRef<HTMLSpanElement>(null);
+
+  React.useEffect(() => {
+    if (typeof progress === 'number') {
+      setCurrentProgress(progress);
+      return;
+    }
+    if (!intervalRate) return;
+    const interval = setInterval(() => {
+      setCurrentProgress((prev) => (prev + 10) % 110);
+    }, intervalRate);
+    return () => clearInterval(interval);
+  }, [intervalRate, progress]);
+
+  React.useLayoutEffect(() => {
+    if (!measureRef.current) return;
+    const rect = measureRef.current.getBoundingClientRect();
+    if (rect.width > 0) {
+      setCharWidth(rect.width);
+    } else {
+      requestAnimationFrame(() => {
+        const retryRect = measureRef.current?.getBoundingClientRect();
+        if (retryRect && retryRect.width > 0) {
+          setCharWidth(retryRect.width);
+        }
+      });
+    }
+  }, [fillChar]);
+
+  React.useEffect(() => {
+    if (!containerRef.current) return;
+    const observer = new ResizeObserver((entries) => {
+      for (const entry of entries) {
+        const { width } = entry.contentRect;
+        setContainerWidth(width);
+      }
+    });
+    observer.observe(containerRef.current);
+    return () => observer.disconnect();
+  }, []);
+
+  const cappedProgress = Math.min(currentProgress, 100);
+
+  let maxChars = 10;
+  if (charWidth > 0 && containerWidth > 0) {
+    maxChars = Math.max(1, Math.floor(containerWidth / charWidth));
+  }
+
+  const filledChars = Math.round((cappedProgress / 100) * maxChars);
+  const barStr = fillChar.repeat(filledChars);
+
+  return (
+    <div className={styles.root} ref={containerRef} aria-valuenow={cappedProgress} aria-valuemin={0} aria-valuemax={100} role="progressbar">
+      <span ref={measureRef} className={styles.measure}>
+        {fillChar}
+      </span>
+      {barStr}
+    </div>
+  );
+};
+
+export default BarProgress;
+
+================
+File: reference/components/Block.module.scss
+================
+.block {
+  display: inline-block;
+  width: 1ch;
+  background: var(--theme-text);
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  vertical-align: bottom;
+  flex-shrink: 0;
+}
+
+================
+File: reference/components/Block.tsx
+================
+import styles from '@components/Block.module.scss';
+
+import * as React from 'react';
+
+interface BlockProps extends React.HTMLAttributes<HTMLSpanElement> {
+  children?: React.ReactNode;
+}
+
+const Block: React.FC<BlockProps> = ({ children, ...rest }) => {
+  return (
+    <span className={styles.block} {...rest}>
+      {children}
+    </span>
+  );
+};
+
+export default Block;
+
+================
+File: reference/components/BlockLoader.module.scss
+================
+.root {
+  display: inline-block;
+  width: 1ch;
+  color: inherit;
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  vertical-align: bottom;
+}
+
+================
+File: reference/components/BlockLoader.tsx
+================
+'use client';
+
+import styles from '@components/BlockLoader.module.scss';
+
+import * as React from 'react';
+
+const SEQUENCES = [
+  ['⠁', '⠂', '⠄', '⡀', '⢀', '⠠', '⠐', '⠈'],
+  ['⣾', '⣽', '⣻', '⢿', '⡿', '⣟', '⣯', '⣷'],
+  ['▖', '▘', '▝', '▗'],
+  ['▁', '▂', '▃', '▄', '▅', '▆', '▇', '█', '▇', '▆', '▅', '▄', '▃', '▁'],
+  ['▉', '▊', '▋', '▌', '▍', '▎', '▏', '▎', '▍', '▌', '▋', '▊', '▉'],
+  ['←', '↖', '↑', '↗', '→', '↘', '↓', '↙'],
+  ['┤', '┘', '┴', '└', '├', '┌', '┬', '┐'],
+  ['◢', '◣', '◤', '◥'],
+  ['◰', '◳', '◲', '◱'],
+  ['◴', '◷', '◶', '◵'],
+  ['◐', '◓', '◑', '◒'],
+];
+
+interface BlockLoaderProps extends Omit<React.HTMLAttributes<HTMLSpanElement>, 'children'> {
+  mode?: number;
+}
+
+const BlockLoader: React.FC<BlockLoaderProps> = ({ mode = 0 }) => {
+  if (!SEQUENCES[mode]) {
+    return <span className={styles.block}>�</span>;
+  }
+
+  const [index, setIndex] = React.useState(0);
+  const intervalRef = React.useRef<number | null>(null);
+  const indexLength = SEQUENCES[mode].length;
+
+  React.useEffect(() => {
+    if (intervalRef.current) {
+      clearInterval(intervalRef.current);
+    }
+
+    intervalRef.current = window.setInterval(() => {
+      setIndex((prevIndex) => (prevIndex + 1) % indexLength);
+    }, 100);
+
+    return () => {
+      if (intervalRef.current) {
+        clearInterval(intervalRef.current);
+      }
+    };
+  }, [indexLength]);
+
+  return <span className={styles.root}>{SEQUENCES[mode][index]}</span>;
+};
+
+export default BlockLoader;
+
+================
+File: reference/components/BreadCrumbs.module.scss
+================
+.root {
+  display: inline-block;
+}
+
+.line {
+  display: inline-block;
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+}
+
+.link {
+  display: inline-block;
+  color: var(--theme-text);
+  outline: 0;
+  border: 0;
+  text-decoration: none;
+  background: var(--theme-border);
+
+  &:hover {
+    color: var(--theme-text);
+    background: var(--theme-focused-foreground);
+  }
+  
+  &:visited {
+    color: var(--theme-text);
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.symbol {
+  min-width: 1ch;
+  display: inline-block;
+  margin: 0 1ch 0 1ch;
+}
+
+================
+File: reference/components/BreadCrumbs.tsx
+================
+import styles from '@components/BreadCrumbs.module.scss';
+
+import * as React from 'react';
+
+interface BreadCrumbsItem {
+  url?: string;
+  name: string;
+}
+
+interface BreadCrumbsProps {
+  items: BreadCrumbsItem[];
+}
+
+const BreadCrumbs: React.FC<BreadCrumbsProps> = ({ items }) => {
+  return (
+    <nav aria-label="breadcrumb" className={styles.root}>
+      {items.map((item, index) => {
+        const linkElement = (
+          <a className={styles.link} href={item.url} target="_blank" tabIndex={0} role="link">
+            {item.name}
+          </a>
+        );
+
+        return (
+          <span className={styles.line} key={index}>
+            {index === items.length - 1 ? <span>{linkElement}</span> : linkElement}
+            {index < items.length - 1 && <span className={styles.symbol}> ❯ </span>}
+          </span>
+        );
+      })}
+    </nav>
+  );
+};
+
+export default BreadCrumbs;
+
+================
+File: reference/components/Button.module.scss
+================
+.root {
+  vertical-align: top;
+  display: inline-block;
+  font-weight: 400;
+  text-align: center;
+  margin: 0;
+  outline: 0;
+  border: 0;
+  font-family: var(--font-family-mono);
+  width: 100%;
+  font-size: var(--font-size);
+  line-height: calc(var(--theme-line-height-base) * 2em);
+  min-height: calc(var(--theme-line-height-base) * (var(--font-size) * 2));
+  padding: 0 2ch 0 2ch;
+  text-transform: uppercase;
+  letter-spacing: 1px;
+  transition: 200ms ease all;
+}
+
+.primary {
+  background: var(--theme-button);
+  color: var(--theme-button-text);
+  cursor: pointer;
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.secondary {
+  background: var(--theme-background);
+  color: var(--theme-text);
+  box-shadow: inset 0 0 0 1px var(--theme-border);
+  cursor: pointer;
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+    box-shadow: inset 0 0 0 1px transparent;
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    box-shadow: inset 0 0 0 1px transparent;
+  }
+}
+
+.disabled {
+  background: var(--theme-button-background);
+  color: var(--theme-button-foreground);
+  cursor: not-allowed;
+}
+
+================
+File: reference/components/Button.tsx
+================
+'use client';
+
+import styles from '@components/Button.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
+  theme?: 'PRIMARY' | 'SECONDARY';
+  isDisabled?: boolean;
+  children?: React.ReactNode;
+}
+
+const Button: React.FC<ButtonProps> = ({ theme = 'PRIMARY', isDisabled, children, ...rest }) => {
+  let classNames = Utilities.classNames(styles.root, styles.primary);
+
+  if (theme === 'SECONDARY') {
+    classNames = Utilities.classNames(styles.root, styles.secondary);
+  }
+
+  if (isDisabled) {
+    classNames = Utilities.classNames(styles.root, styles.disabled);
+
+    return <div className={classNames}>{children}</div>;
+  }
+
+  return (
+    <button className={classNames} role="button" tabIndex={0} disabled={isDisabled} {...rest}>
+      {children}
+    </button>
+  );
+};
+
+export default Button;
+
+================
+File: reference/components/ButtonGroup.module.scss
+================
+.root {
+}
+
+.full {
+  display: grid;
+  grid-template-columns: repeat(auto-fit, minmax(60px, 1fr));
+  white-space: nowrap;
+}
+
+================
+File: reference/components/ButtonGroup.tsx
+================
+'use client';
+
+import styles from '@components/ButtonGroup.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import ActionButton from '@components/ActionButton';
+import DropdownMenuTrigger from '@components/DropdownMenuTrigger';
+
+const ButtonGroup = (props) => {
+  if (!props.items) {
+    return null;
+  }
+
+  return (
+    <div className={Utilities.classNames(styles.root, props.isFull ? styles.full : null)}>
+      {props.items.map((each) => {
+        if (each.items) {
+          return (
+            <DropdownMenuTrigger key={each.body} items={each.items} hotkey={each.openHotkey}>
+              <ActionButton hotkey={each.hotkey} isSelected={each.selected}>
+                {each.body}
+              </ActionButton>
+            </DropdownMenuTrigger>
+          );
+        }
+
+        return (
+          <ActionButton key={each.body} onClick={each.onClick} hotkey={each.hotkey} isSelected={each.selected}>
+            {each.body}
+          </ActionButton>
+        );
+      })}
+    </div>
+  );
+};
+
+export default ButtonGroup;
+
+================
+File: reference/components/Canvas.module.scss
+================
+.canvas {
+  grid-row-start: 1;
+  grid-column-start: 1;
+  margin: 0;
+  padding: 0;
+  width: 100%;
+  min-height: 100%;
+  max-height: 288px;
+}
+
+================
+File: reference/components/Canvas.tsx
+================
+'use client';
+
+import styles from '@components/Canvas.module.scss';
+
+import * as React from 'react';
+
+type WebGLContextResult = {
+  gl: WebGLRenderingContext | WebGL2RenderingContext;
+  ext: {
+    internalFormat: number;
+    internalFormatRG: number;
+    formatRG: number;
+    texType: number;
+  };
+  support_linear_float: boolean | null;
+};
+
+var config = {
+  TEXTURE_DOWNSAMPLE: 1,
+  DENSITY_DISSIPATION: 0.991,
+  VELOCITY_DISSIPATION: 0.9992,
+  PRESSURE_DISSIPATION: 0.8,
+  PRESSURE_ITERATIONS: 16,
+  CURL: 12,
+  SPLAT_RADIUS: 0.12,
+  SPEED: 0.01,
+};
+
+export default function BlueCanvasComponent(props) {
+  const canvasRef = React.useRef<HTMLCanvasElement>(null);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    canvas.width = canvas.clientWidth;
+    canvas.height = canvas.clientHeight;
+
+    let splatStack: any[] = [];
+
+    const { gl, ext, support_linear_float } = getWebGLContext(canvas);
+
+    function getWebGLContext(canvas: HTMLCanvasElement): WebGLContextResult {
+      const params = {
+        alpha: false,
+        depth: false,
+        stencil: false,
+        antialias: true,
+      };
+
+      let gl: WebGLRenderingContext | WebGL2RenderingContext | null = canvas.getContext('webgl2', params) as WebGL2RenderingContext | null;
+
+      const isWebGL2 = !!gl;
+
+      if (!isWebGL2) {
+        gl = (canvas.getContext('webgl', params) || canvas.getContext('experimental-webgl', params)) as WebGLRenderingContext | null;
+      }
+
+      if (!gl) throw new Error('WebGL not supported');
+
+      const halfFloat = gl.getExtension('OES_texture_half_float');
+      let support_linear_float = gl.getExtension('OES_texture_half_float_linear');
+
+      if (isWebGL2) {
+        gl.getExtension('EXT_color_buffer_float');
+        support_linear_float = gl.getExtension('OES_texture_float_linear');
+      }
+
+      const internalFormat = isWebGL2 ? (gl as WebGL2RenderingContext).RGBA16F : gl.RGBA;
+      const internalFormatRG = isWebGL2 ? (gl as WebGL2RenderingContext).RG16F : gl.RGBA;
+      const formatRG = isWebGL2 ? (gl as WebGL2RenderingContext).RG : gl.RGBA;
+      const texType = isWebGL2 ? (gl as WebGL2RenderingContext).HALF_FLOAT : halfFloat?.HALF_FLOAT_OES || gl.UNSIGNED_BYTE;
+
+      return {
+        gl: gl as WebGLRenderingContext,
+        ext: {
+          internalFormat,
+          internalFormatRG,
+          formatRG,
+          texType,
+        },
+        support_linear_float: !!support_linear_float,
+      };
+    }
+
+    class GLProgram {
+      program: WebGLProgram;
+      uniforms: { [key: string]: WebGLUniformLocation | null };
+
+      constructor(vertexShader: WebGLShader, fragmentShader: WebGLShader) {
+        this.uniforms = {};
+        this.program = gl.createProgram()!;
+
+        gl.attachShader(this.program, vertexShader);
+        gl.attachShader(this.program, fragmentShader);
+        gl.linkProgram(this.program);
+
+        if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {
+          throw new Error(gl.getProgramInfoLog(this.program) || 'Program failed to link');
+        }
+
+        const uniformCount = gl.getProgramParameter(this.program, gl.ACTIVE_UNIFORMS);
+        for (let i = 0; i < uniformCount; i++) {
+          const uniformName = gl.getActiveUniform(this.program, i)!.name;
+          this.uniforms[uniformName] = gl.getUniformLocation(this.program, uniformName);
+        }
+      }
+
+      bind() {
+        gl.useProgram(this.program);
+      }
+    }
+
+    function compileShader(type: number, source: string): WebGLShader {
+      const shader = gl.createShader(type)!;
+      gl.shaderSource(shader, source);
+      gl.compileShader(shader);
+
+      if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
+        throw new Error(gl.getShaderInfoLog(shader) || 'Shader compilation failed');
+      }
+
+      return shader;
+    }
+
+    var baseVertexShader = compileShader(gl.VERTEX_SHADER, 'precision highp float; precision mediump sampler2D; attribute vec2 aPosition; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform vec2 texelSize; void main () {     vUv = aPosition * 0.5 + 0.5;     vL = vUv - vec2(texelSize.x, 0.0);     vR = vUv + vec2(texelSize.x, 0.0);     vT = vUv + vec2(0.0, texelSize.y);     vB = vUv - vec2(0.0, texelSize.y);     gl_Position = vec4(aPosition, 0.0, 1.0); }');
+    var clearShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; uniform sampler2D uTexture; uniform float value; void main () {     gl_FragColor = value * texture2D(uTexture, vUv); }');
+    var displayShader = compileShader(
+      gl.FRAGMENT_SHADER,
+      `
+  precision highp float;
+  precision mediump sampler2D;
+  varying vec2 vUv;
+  uniform sampler2D uTexture;
+  void main () {
+    float density = texture2D(uTexture, vUv).r;
+    vec3 splatColor = vec3(1.0, 1.0, 1.0);
+    vec3 backgroundColor = vec3(0.8, 0.8, 0.8);
+    vec3 color = mix(backgroundColor, splatColor, density);
+    gl_FragColor = vec4(color, 1.0);
+  }
+  `
+    );
+    var splatShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; uniform sampler2D uTarget; uniform float aspectRatio; uniform vec3 color; uniform vec2 point; uniform float radius; void main () {     vec2 p = vUv - point.xy;     p.x *= aspectRatio;     vec3 splat = exp(-dot(p, p) / radius) * color;     vec3 base = texture2D(uTarget, vUv).xyz;     gl_FragColor = vec4(base + splat, 1.0); }');
+    var advectionManualFilteringShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; uniform sampler2D uVelocity; uniform sampler2D uSource; uniform vec2 texelSize; uniform float dt; uniform float dissipation; vec4 bilerp (in sampler2D sam, in vec2 p) {     vec4 st;     st.xy = floor(p - 0.5) + 0.5;     st.zw = st.xy + 1.0;     vec4 uv = st * texelSize.xyxy;     vec4 a = texture2D(sam, uv.xy);     vec4 b = texture2D(sam, uv.zy);     vec4 c = texture2D(sam, uv.xw);     vec4 d = texture2D(sam, uv.zw);     vec2 f = p - st.xy;     return mix(mix(a, b, f.x), mix(c, d, f.x), f.y); } void main () {     vec2 coord = gl_FragCoord.xy - dt * texture2D(uVelocity, vUv).xy;     gl_FragColor = dissipation * bilerp(uSource, coord);     gl_FragColor.a = 1.0; }');
+    var advectionShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; uniform sampler2D uVelocity; uniform sampler2D uSource; uniform vec2 texelSize; uniform float dt; uniform float dissipation; void main () {     vec2 coord = vUv - dt * texture2D(uVelocity, vUv).xy * texelSize;     gl_FragColor = dissipation * texture2D(uSource, coord); }');
+    var divergenceShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform sampler2D uVelocity; vec2 sampleVelocity (in vec2 uv) {     vec2 multiplier = vec2(1.0, 1.0);     if (uv.x < 0.0) { uv.x = 0.0; multiplier.x = -1.0; }     if (uv.x > 1.0) { uv.x = 1.0; multiplier.x = -1.0; }     if (uv.y < 0.0) { uv.y = 0.0; multiplier.y = -1.0; }     if (uv.y > 1.0) { uv.y = 1.0; multiplier.y = -1.0; }     return multiplier * texture2D(uVelocity, uv).xy; } void main () {     float L = sampleVelocity(vL).x;     float R = sampleVelocity(vR).x;     float T = sampleVelocity(vT).y;     float B = sampleVelocity(vB).y;     float div = 0.5 * (R - L + T - B);     gl_FragColor = vec4(div, 0.0, 0.0, 1.0); }');
+    var curlShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform sampler2D uVelocity; void main () {     float L = texture2D(uVelocity, vL).y;     float R = texture2D(uVelocity, vR).y;     float T = texture2D(uVelocity, vT).x;     float B = texture2D(uVelocity, vB).x;     float vorticity = R - L - T + B;     gl_FragColor = vec4(vorticity, 0.0, 0.0, 1.0); }');
+    var vorticityShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform sampler2D uVelocity; uniform sampler2D uCurl; uniform float curl; uniform float dt; void main () {     float L = texture2D(uCurl, vL).y;     float R = texture2D(uCurl, vR).y;     float T = texture2D(uCurl, vT).x;     float B = texture2D(uCurl, vB).x;     float C = texture2D(uCurl, vUv).x;     vec2 force = vec2(abs(T) - abs(B), abs(R) - abs(L));     force *= 1.0 / length(force + 0.00001) * curl * C;     vec2 vel = texture2D(uVelocity, vUv).xy;     gl_FragColor = vec4(vel + force * dt, 0.0, 1.0); }');
+    var pressureShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform sampler2D uPressure; uniform sampler2D uDivergence; vec2 boundary (in vec2 uv) {     uv = min(max(uv, 0.0), 1.0);     return uv; } void main () {     float L = texture2D(uPressure, boundary(vL)).x;     float R = texture2D(uPressure, boundary(vR)).x;     float T = texture2D(uPressure, boundary(vT)).x;     float B = texture2D(uPressure, boundary(vB)).x;     float C = texture2D(uPressure, vUv).x;     float divergence = texture2D(uDivergence, vUv).x;     float pressure = (L + R + B + T - divergence) * 0.25;     gl_FragColor = vec4(pressure, 0.0, 0.0, 1.0); }');
+    var gradientSubtractShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform sampler2D uPressure; uniform sampler2D uVelocity; vec2 boundary (in vec2 uv) {     uv = min(max(uv, 0.0), 1.0);     return uv; } void main () {     float L = texture2D(uPressure, boundary(vL)).x;     float R = texture2D(uPressure, boundary(vR)).x;     float T = texture2D(uPressure, boundary(vT)).x;     float B = texture2D(uPressure, boundary(vB)).x;     vec2 velocity = texture2D(uVelocity, vUv).xy;     velocity.xy -= vec2(R - L, T - B);     gl_FragColor = vec4(velocity, 0.0, 1.0); }');
+
+    let textureWidth: number = 0;
+    let textureHeight: number = 0;
+
+    let density: { first: any[]; second: any[]; swap: () => void } | undefined;
+    let velocity: { first: any[]; second: any[]; swap: () => void } | undefined;
+    let divergence: any[] | undefined;
+    let curl: any[] | undefined;
+    let pressure: { first: any[]; second: any[]; swap: () => void } | undefined;
+
+    initFramebuffers();
+
+    var clearProgram = new GLProgram(baseVertexShader, clearShader);
+    var displayProgram = new GLProgram(baseVertexShader, displayShader);
+    var splatProgram = new GLProgram(baseVertexShader, splatShader);
+    var advectionProgram = new GLProgram(baseVertexShader, support_linear_float ? advectionShader : advectionManualFilteringShader);
+    var divergenceProgram = new GLProgram(baseVertexShader, divergenceShader);
+    var curlProgram = new GLProgram(baseVertexShader, curlShader);
+    var vorticityProgram = new GLProgram(baseVertexShader, vorticityShader);
+    var pressureProgram = new GLProgram(baseVertexShader, pressureShader);
+    var gradienSubtractProgram = new GLProgram(baseVertexShader, gradientSubtractShader);
+
+    function initFramebuffers() {
+      textureWidth = gl.drawingBufferWidth >> config.TEXTURE_DOWNSAMPLE;
+      textureHeight = gl.drawingBufferHeight >> config.TEXTURE_DOWNSAMPLE;
+
+      var iFormat = ext.internalFormat;
+      var iFormatRG = ext.internalFormatRG;
+      var formatRG = ext.formatRG;
+      var texType = ext.texType;
+
+      density = createDoubleFBO(0, textureWidth, textureHeight, iFormat, gl.RGBA, texType, support_linear_float ? gl.LINEAR : gl.NEAREST);
+      velocity = createDoubleFBO(2, textureWidth, textureHeight, iFormatRG, formatRG, texType, support_linear_float ? gl.LINEAR : gl.NEAREST);
+      divergence = createFBO(4, textureWidth, textureHeight, iFormatRG, formatRG, texType, gl.NEAREST);
+      curl = createFBO(5, textureWidth, textureHeight, iFormatRG, formatRG, texType, gl.NEAREST);
+      pressure = createDoubleFBO(6, textureWidth, textureHeight, iFormatRG, formatRG, texType, gl.NEAREST);
+    }
+
+    function createFBO(texId, w, h, internalFormat, format, type, param) {
+      gl.activeTexture(gl.TEXTURE0 + texId);
+
+      var texture = gl.createTexture();
+
+      gl.bindTexture(gl.TEXTURE_2D, texture);
+      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, param);
+      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, param);
+      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
+      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
+      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, w, h, 0, format, type, null);
+
+      var fbo = gl.createFramebuffer();
+
+      gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
+      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
+      gl.viewport(0, 0, w, h);
+      gl.clear(gl.COLOR_BUFFER_BIT);
+
+      return [texture, fbo, texId];
+    }
+
+    function createDoubleFBO(texId, w, h, internalFormat, format, type, param) {
+      var fbo1 = createFBO(texId, w, h, internalFormat, format, type, param);
+      var fbo2 = createFBO(texId + 1, w, h, internalFormat, format, type, param);
+
+      return {
+        get first() {
+          return fbo1;
+        },
+        get second() {
+          return fbo2;
+        },
+        swap: function swap() {
+          var temp = fbo1;
+
+          fbo1 = fbo2;
+          fbo2 = temp;
+        },
+      };
+    }
+
+    const blit = (() => {
+      const vertexData = new Float32Array([-1, -1, -1, 1, 1, 1, 1, -1]);
+      const elementData = new Uint16Array([0, 1, 2, 0, 2, 3]);
+
+      gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());
+      gl.bufferData(gl.ARRAY_BUFFER, vertexData, gl.STATIC_DRAW);
+      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer());
+      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, elementData, gl.STATIC_DRAW);
+      gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);
+      gl.enableVertexAttribArray(0);
+
+      return (destination: WebGLFramebuffer | null) => {
+        gl.bindFramebuffer(gl.FRAMEBUFFER, destination);
+        gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);
+      };
+    })();
+
+    var lastTime = Date.now();
+    let timeAccumulator = 0;
+
+    update();
+
+    function splat(x: number, y: number, dx: number, dy: number) {
+      if (!velocity) return;
+      if (!canvas) return;
+      if (!density) return;
+
+      splatProgram.bind();
+      gl.uniform1i(splatProgram.uniforms.uTarget, velocity.first[2]);
+      gl.uniform1f(splatProgram.uniforms.aspectRatio, canvas.width / canvas.height);
+      gl.uniform2f(splatProgram.uniforms.point, x / canvas.width, 1.0 - y / canvas.height);
+      gl.uniform3f(splatProgram.uniforms.color, dx, -dy, 1.0);
+      gl.uniform1f(splatProgram.uniforms.radius, config.SPLAT_RADIUS);
+      blit(velocity.second[1]);
+      velocity.swap();
+
+      gl.uniform1i(splatProgram.uniforms.uTarget, density.first[2]);
+
+      gl.uniform3f(splatProgram.uniforms.color, 0.9, 0.9, 0.9);
+      blit(density.second[1]);
+      density.swap();
+    }
+
+    function update() {
+      resizeCanvas();
+
+      const dt = Math.min((Date.now() - lastTime) / 1000, 0.016);
+      lastTime = Date.now();
+
+      gl.viewport(0, 0, textureWidth, textureHeight);
+
+      timeAccumulator += dt;
+
+      if (canvas) {
+        if (timeAccumulator >= config.SPEED) {
+          timeAccumulator = 0;
+          // splat(canvas.width * 0.5, canvas.height, 0, 48 * 8);
+          splat(0, canvas.height, canvas.width * 0.3, 8);
+        }
+      }
+
+      advectionProgram.bind();
+
+      if (!velocity) return;
+      if (!density) return;
+      if (!curl) return;
+      if (!divergence) return;
+      if (!pressure) return;
+
+      gl.uniform2f(advectionProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(advectionProgram.uniforms.uVelocity, velocity.first[2]);
+      gl.uniform1i(advectionProgram.uniforms.uSource, velocity.first[2]);
+      gl.uniform1f(advectionProgram.uniforms.dt, dt);
+      gl.uniform1f(advectionProgram.uniforms.dissipation, config.VELOCITY_DISSIPATION);
+      blit(velocity.second[1]);
+      velocity.swap();
+
+      gl.uniform1i(advectionProgram.uniforms.uVelocity, velocity.first[2]);
+
+      gl.uniform1i(advectionProgram.uniforms.uSource, density.first[2]);
+      gl.uniform1f(advectionProgram.uniforms.dissipation, config.DENSITY_DISSIPATION);
+      blit(density.second[1]);
+      density.swap();
+
+      curlProgram.bind();
+      gl.uniform2f(curlProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(curlProgram.uniforms.uVelocity, velocity.first[2]);
+      blit(curl[1]);
+
+      vorticityProgram.bind();
+      gl.uniform2f(vorticityProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(vorticityProgram.uniforms.uVelocity, velocity.first[2]);
+      gl.uniform1i(vorticityProgram.uniforms.uCurl, curl[2]);
+      gl.uniform1f(vorticityProgram.uniforms.curl, config.CURL);
+      gl.uniform1f(vorticityProgram.uniforms.dt, dt);
+      blit(velocity.second[1]);
+      velocity.swap();
+
+      divergenceProgram.bind();
+      gl.uniform2f(divergenceProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(divergenceProgram.uniforms.uVelocity, velocity.first[2]);
+      blit(divergence[1]);
+
+      clearProgram.bind();
+
+      var pressureTexId = pressure.first[2];
+
+      gl.activeTexture(gl.TEXTURE0 + pressureTexId);
+      gl.bindTexture(gl.TEXTURE_2D, pressure.first[0]);
+      gl.uniform1i(clearProgram.uniforms.uTexture, pressureTexId);
+      gl.uniform1f(clearProgram.uniforms.value, config.PRESSURE_DISSIPATION);
+      blit(pressure.second[1]);
+      pressure.swap();
+
+      pressureProgram.bind();
+      gl.uniform2f(pressureProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(pressureProgram.uniforms.uDivergence, divergence[2]);
+      pressureTexId = pressure.first[2];
+      gl.activeTexture(gl.TEXTURE0 + pressureTexId);
+
+      for (var _i = 0; _i < config.PRESSURE_ITERATIONS; _i++) {
+        gl.bindTexture(gl.TEXTURE_2D, pressure.first[0]);
+        gl.uniform1i(pressureProgram.uniforms.uPressure, pressureTexId);
+        blit(pressure.second[1]);
+        pressure.swap();
+      }
+
+      gradienSubtractProgram.bind();
+      gl.uniform2f(gradienSubtractProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(gradienSubtractProgram.uniforms.uPressure, pressure.first[2]);
+      gl.uniform1i(gradienSubtractProgram.uniforms.uVelocity, velocity.first[2]);
+      blit(velocity.second[1]);
+      velocity.swap();
+
+      gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
+      displayProgram.bind();
+      gl.uniform1i(displayProgram.uniforms.uTexture, density.first[2]);
+      blit(null);
+
+      requestAnimationFrame(update);
+    }
+
+    function resizeCanvas() {
+      if (!canvas) return;
+
+      (canvas.width !== canvas.clientWidth || canvas.height !== canvas.clientHeight) && ((canvas.width = canvas.clientWidth), (canvas.height = canvas.clientHeight), initFramebuffers());
+    }
+  }, []);
+
+  return <canvas className={styles.canvas} ref={canvasRef} style={props.style} />;
+}
+
+================
+File: reference/components/CanvasPlatformer.module.scss
+================
+.container {
+  width: 100%;
+  height: auto;
+  position: relative;
+}
+
+.root {
+  display: block;
+  width: 100%;
+  background: transparent;
+
+  &:focus {
+    outline: 0;
+    box-shadow: inset 0 0 0 1px var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/CanvasPlatformer.tsx
+================
+'use client';
+
+import styles from '@components/CanvasPlatformer.module.scss';
+
+import * as React from 'react';
+
+import ActionButton from '@components/ActionButton';
+
+interface PlatformerProps {
+  rows?: number;
+}
+
+// TODO(jimmylee)
+// Move these constants into a separate file
+// Dynamically compute these constants since we're going to
+// Support t-shirt sizes for the system.
+const LINE_HEIGHT = 20;
+const CHARACTER_WIDTH = 9.6;
+const GRAVITY = 0.3;
+const MOVE_SPEED = 2;
+const JUMP_SPEED = -6;
+const FRICTION = 0.85;
+
+interface Position {
+  x: number;
+  y: number;
+}
+
+interface Keys {
+  left: boolean;
+  right: boolean;
+  jump: boolean;
+}
+
+interface Block {
+  x: number;
+  y: number;
+}
+
+const CanvasPlatformer: React.FC<PlatformerProps> = ({ rows = 25 }) => {
+  const canvasRef = React.useRef<HTMLCanvasElement>(null);
+  const [focused, setFocused] = React.useState(false);
+
+  const positionRef = React.useRef<Position>({ x: 50, y: 0 });
+  const velocityRef = React.useRef<Position>({ x: 0, y: 0 });
+  const keysRef = React.useRef<Keys>({ left: false, right: false, jump: false });
+  const platformBlocksRef = React.useRef<Block[]>([]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+    const parent = canvas.parentElement;
+    if (!parent) return;
+
+    const resizeCanvas = () => {
+      const parentWidth = parent.clientWidth;
+      const canvasHeight = rows * LINE_HEIGHT;
+      canvas.width = parentWidth;
+      canvas.height = canvasHeight;
+      const platformY = canvas.height - LINE_HEIGHT * 2;
+      positionRef.current.y = platformY - LINE_HEIGHT;
+      platformBlocksRef.current = [];
+      const numBlocks = Math.floor(parentWidth / CHARACTER_WIDTH);
+      for (let i = 0; i < numBlocks; i++) {
+        platformBlocksRef.current.push({ x: i * CHARACTER_WIDTH, y: platformY });
+      }
+    };
+
+    resizeCanvas();
+    window.addEventListener('resize', resizeCanvas);
+    return () => {
+      window.removeEventListener('resize', resizeCanvas);
+    };
+  }, [rows]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const handleFocus = () => setFocused(true);
+    const handleBlur = () => {
+      setFocused(false);
+      keysRef.current = { left: false, right: false, jump: false };
+    };
+
+    canvas.tabIndex = 0;
+    canvas.addEventListener('focus', handleFocus);
+    canvas.addEventListener('blur', handleBlur);
+
+    const handleClick = (e: MouseEvent) => {
+      const rect = canvas.getBoundingClientRect();
+      const x = Math.floor((e.clientX - rect.left) / CHARACTER_WIDTH) * CHARACTER_WIDTH;
+      const y = Math.floor((e.clientY - rect.top) / LINE_HEIGHT) * LINE_HEIGHT;
+      const blocks = platformBlocksRef.current;
+      const existingIndex = blocks.findIndex((b) => b.x === x && b.y === y);
+      if (existingIndex !== -1) {
+        blocks.splice(existingIndex, 1);
+      } else {
+        blocks.push({ x, y });
+      }
+    };
+
+    canvas.addEventListener('click', handleClick);
+
+    return () => {
+      canvas.removeEventListener('focus', handleFocus);
+      canvas.removeEventListener('blur', handleBlur);
+      canvas.removeEventListener('click', handleClick);
+    };
+  }, []);
+
+  React.useEffect(() => {
+    const handleKeyDown = (e: KeyboardEvent) => {
+      if (!focused) return;
+      if (e.key === 'ArrowLeft' || e.key === 'ArrowRight' || e.code === 'Space') {
+        e.preventDefault();
+        e.stopPropagation();
+      }
+      if (e.key === 'ArrowLeft') keysRef.current.left = true;
+      if (e.key === 'ArrowRight') keysRef.current.right = true;
+      if (e.code === 'Space') keysRef.current.jump = true;
+    };
+
+    const handleKeyUp = (e: KeyboardEvent) => {
+      if (!focused) return;
+      if (e.key === 'ArrowLeft' || e.key === 'ArrowRight' || e.code === 'Space') {
+        e.preventDefault();
+        e.stopPropagation();
+      }
+      if (e.key === 'ArrowLeft') keysRef.current.left = false;
+      if (e.key === 'ArrowRight') keysRef.current.right = false;
+      if (e.code === 'Space') keysRef.current.jump = false;
+    };
+
+    window.addEventListener('keydown', handleKeyDown, { capture: true });
+    window.addEventListener('keyup', handleKeyUp, { capture: true });
+
+    return () => {
+      window.removeEventListener('keydown', handleKeyDown, { capture: true });
+      window.removeEventListener('keyup', handleKeyUp, { capture: true });
+    };
+  }, [focused]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+    const ctx = canvas.getContext('2d');
+    if (!ctx) return;
+
+    const loop = () => {
+      const w = canvas.width;
+      const h = canvas.height;
+      ctx.clearRect(0, 0, w, h);
+
+      const pos = positionRef.current;
+      const vel = velocityRef.current;
+      const keys = keysRef.current;
+      const blocks = platformBlocksRef.current;
+
+      const themeBorderColor = getComputedStyle(document.body).getPropertyValue('--theme-border').trim();
+      const themeTextColor = getComputedStyle(document.body).getPropertyValue('--theme-text').trim();
+
+      ctx.fillStyle = themeBorderColor;
+      for (const b of blocks) {
+        ctx.fillRect(b.x, b.y, CHARACTER_WIDTH, LINE_HEIGHT);
+      }
+
+      if (keys.left) vel.x = -MOVE_SPEED;
+      else if (keys.right) vel.x = MOVE_SPEED;
+      else {
+        vel.x *= FRICTION;
+        if (Math.abs(vel.x) < 0.1) vel.x = 0;
+      }
+
+      const oldY = pos.y;
+      vel.y += GRAVITY;
+      pos.x += vel.x;
+      pos.y += vel.y;
+
+      if (pos.x < 0) pos.x = 0;
+      if (pos.x > w - CHARACTER_WIDTH) pos.x = w - CHARACTER_WIDTH;
+
+      let groundY = h;
+      for (const b of blocks) {
+        const horizontallyOverlapping = pos.x + CHARACTER_WIDTH > b.x && pos.x < b.x + CHARACTER_WIDTH;
+        if (horizontallyOverlapping && oldY + LINE_HEIGHT <= b.y && pos.y + LINE_HEIGHT >= b.y) {
+          if (b.y < groundY) groundY = b.y;
+        }
+      }
+
+      if (pos.y + LINE_HEIGHT > groundY) {
+        pos.y = groundY - LINE_HEIGHT;
+        vel.y = 0;
+        if (keys.jump) vel.y = JUMP_SPEED;
+      }
+
+      ctx.fillStyle = themeTextColor;
+      ctx.fillRect(pos.x, pos.y, CHARACTER_WIDTH, LINE_HEIGHT);
+
+      requestAnimationFrame(loop);
+    };
+
+    requestAnimationFrame(loop);
+  }, []);
+
+  const handleJumpClick = () => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+    const pos = positionRef.current;
+    const vel = velocityRef.current;
+    let w = canvas.width;
+    let h = canvas.height;
+    let groundY = h;
+    for (const b of platformBlocksRef.current) {
+      const horizontallyOverlapping = pos.x + CHARACTER_WIDTH > b.x && pos.x < b.x + CHARACTER_WIDTH;
+      if (horizontallyOverlapping && pos.y + LINE_HEIGHT <= b.y) {
+        if (b.y < groundY) groundY = b.y;
+      }
+    }
+    if (pos.y + LINE_HEIGHT >= groundY) vel.y = JUMP_SPEED;
+  };
+
+  const handleLeftClick = () => {
+    const pos = positionRef.current;
+    pos.x -= CHARACTER_WIDTH;
+    if (pos.x < 0) pos.x = 0;
+  };
+
+  const handleRightClick = () => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+    const pos = positionRef.current;
+    pos.x += CHARACTER_WIDTH;
+    if (pos.x > canvas.width - CHARACTER_WIDTH) pos.x = canvas.width - CHARACTER_WIDTH;
+  };
+
+  return (
+    <>
+      <ActionButton hotkey="␣" onClick={handleJumpClick}>
+        Jump
+      </ActionButton>
+      <ActionButton hotkey="←" onClick={handleLeftClick}>
+        Left
+      </ActionButton>
+      <ActionButton hotkey="→" onClick={handleRightClick}>
+        Right
+      </ActionButton>
+      <div className={styles.container}>
+        <canvas className={styles.root} ref={canvasRef} />
+      </div>
+    </>
+  );
+};
+
+export default CanvasPlatformer;
+
+================
+File: reference/components/CanvasSnake.module.scss
+================
+.container {
+  width: 100%;
+  height: auto;
+  position: relative;
+}
+
+.root {
+  display: block;
+  width: 100%;
+  background: transparent;
+
+  &:focus {
+    outline: 0;
+    box-shadow: inset 0 0 0 1px var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/CanvasSnake.tsx
+================
+'use client';
+
+import styles from '@components/CanvasSnake.module.scss';
+
+import * as React from 'react';
+
+import ActionButton from '@components/ActionButton';
+
+interface SnakeProps {
+  rows?: number;
+}
+
+// TODO(jimmylee)
+// Move these constants into a separate file
+// Dynamically compute these constants since we're going to
+// Support t-shirt sizes for the system.
+const LINE_HEIGHT = 20;
+const CHARACTER_WIDTH = 9.6;
+
+interface Position {
+  x: number;
+  y: number;
+}
+
+type Direction = 'UP' | 'DOWN' | 'LEFT' | 'RIGHT';
+
+const CanvasSnake = ({ rows = 25 }: SnakeProps) => {
+  const canvasRef = React.useRef<HTMLCanvasElement>(null);
+  const [focused, setFocused] = React.useState(false);
+  const directionRef = React.useRef<Direction>('RIGHT');
+  const snakeRef = React.useRef<Position[]>([]);
+  const fruitRef = React.useRef<Position>({ x: 0, y: 0 });
+  const gridWidthRef = React.useRef<number>(0);
+  const gridHeightRef = React.useRef<number>(0);
+  const lastMoveTimeRef = React.useRef<number>(0);
+  const moveInterval = 150;
+  const animationFrameRef = React.useRef<number | null>(null);
+
+  const reset = React.useCallback(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const w = canvas.width;
+    const h = canvas.height;
+    const gridWidth = Math.floor(w / CHARACTER_WIDTH);
+    const gridHeight = Math.floor(h / LINE_HEIGHT);
+
+    gridWidthRef.current = gridWidth;
+    gridHeightRef.current = gridHeight;
+
+    const startX = Math.floor(gridWidth / 2);
+    const startY = Math.floor(gridHeight / 2);
+
+    snakeRef.current = [
+      { x: startX - 13, y: startY },
+      { x: startX - 12, y: startY },
+      { x: startX - 11, y: startY },
+      { x: startX - 10, y: startY },
+      { x: startX - 9, y: startY },
+      { x: startX - 8, y: startY },
+      { x: startX - 7, y: startY },
+      { x: startX - 6, y: startY },
+      { x: startX - 5, y: startY },
+      { x: startX - 4, y: startY },
+      { x: startX - 3, y: startY },
+      { x: startX - 2, y: startY },
+      { x: startX - 1, y: startY },
+      { x: startX, y: startY },
+    ];
+
+    directionRef.current = 'RIGHT';
+
+    fruitRef.current = {
+      x: Math.floor(Math.random() * gridWidth),
+      y: Math.floor(Math.random() * gridHeight),
+    };
+
+    lastMoveTimeRef.current = performance.now();
+  }, []);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const parent = canvas.parentElement;
+    if (!parent) return;
+
+    const onHandleResizeCanvas = () => {
+      const parentWidth = parent.clientWidth;
+      const canvasHeight = rows * LINE_HEIGHT;
+      canvas.width = parentWidth;
+      canvas.height = canvasHeight;
+      reset();
+    };
+
+    onHandleResizeCanvas();
+    window.addEventListener('resize', onHandleResizeCanvas);
+    return () => {
+      window.removeEventListener('resize', onHandleResizeCanvas);
+    };
+  }, [rows, reset]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const onHandleFocus = () => {
+      setFocused(true);
+    };
+    const onHandleBlur = () => {
+      setFocused(false);
+    };
+
+    canvas.tabIndex = 0;
+    canvas.addEventListener('focus', onHandleFocus);
+    canvas.addEventListener('blur', onHandleBlur);
+
+    return () => {
+      canvas.removeEventListener('focus', onHandleFocus);
+      canvas.removeEventListener('blur', onHandleBlur);
+    };
+  }, []);
+
+  React.useEffect(() => {
+    const handleKeyDown = (e: KeyboardEvent) => {
+      if (!focused) return;
+      if (e.key === 'ArrowLeft' || e.key === 'ArrowRight' || e.key === 'ArrowUp' || e.key === 'ArrowDown') {
+        e.preventDefault();
+        e.stopPropagation();
+      }
+      const currentDir = directionRef.current;
+      if (e.key === 'ArrowLeft' && currentDir !== 'RIGHT') directionRef.current = 'LEFT';
+      if (e.key === 'ArrowRight' && currentDir !== 'LEFT') directionRef.current = 'RIGHT';
+      if (e.key === 'ArrowUp' && currentDir !== 'DOWN') directionRef.current = 'UP';
+      if (e.key === 'ArrowDown' && currentDir !== 'UP') directionRef.current = 'DOWN';
+    };
+
+    window.addEventListener('keydown', handleKeyDown, { capture: true });
+    return () => {
+      window.removeEventListener('keydown', handleKeyDown, { capture: true });
+    };
+  }, [focused]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const ctx = canvas.getContext('2d');
+    if (!ctx) return;
+
+    const themeBorderColor = getComputedStyle(document.body).getPropertyValue('--theme-text').trim();
+    const themeTextColor = getComputedStyle(document.body).getPropertyValue('--theme-focused-foreground').trim();
+
+    const moveSnake = () => {
+      const snake = snakeRef.current;
+      const dir = directionRef.current;
+      const head = snake[snake.length - 1];
+      let newHead: Position = { x: head.x, y: head.y };
+      if (dir === 'LEFT') newHead.x -= 1;
+      if (dir === 'RIGHT') newHead.x += 1;
+      if (dir === 'UP') newHead.y -= 1;
+      if (dir === 'DOWN') newHead.y += 1;
+      if (newHead.x < 0 || newHead.x >= gridWidthRef.current || newHead.y < 0 || newHead.y >= gridHeightRef.current) {
+        reset();
+        return;
+      }
+      for (const seg of snake) {
+        if (seg.x === newHead.x && seg.y === newHead.y) {
+          reset();
+          return;
+        }
+      }
+      snake.push(newHead);
+      if (newHead.x === fruitRef.current.x && newHead.y === fruitRef.current.y) {
+        placeTarget();
+      } else {
+        snake.shift();
+      }
+    };
+
+    const placeTarget = () => {
+      const snake = snakeRef.current;
+      const gridW = gridWidthRef.current;
+      const gridH = gridHeightRef.current;
+      let fruitPos: Position;
+      while (true) {
+        fruitPos = {
+          x: Math.floor(Math.random() * gridW),
+          y: Math.floor(Math.random() * gridH),
+        };
+        if (!snake.some((s) => s.x === fruitPos.x && s.y === fruitPos.y)) break;
+      }
+      fruitRef.current = fruitPos;
+    };
+
+    const loop = (time: number) => {
+      if (!ctx) return;
+      if (!focused) return;
+
+      const w = canvas.width;
+      const h = canvas.height;
+
+      ctx.clearRect(0, 0, w, h);
+      ctx.fillStyle = themeTextColor;
+      ctx.fillRect(fruitRef.current.x * CHARACTER_WIDTH, fruitRef.current.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+      ctx.fillStyle = themeBorderColor;
+      for (const segment of snakeRef.current) {
+        ctx.fillRect(segment.x * CHARACTER_WIDTH, segment.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+      }
+      if (time - lastMoveTimeRef.current > moveInterval) {
+        moveSnake();
+        lastMoveTimeRef.current = time;
+      }
+      animationFrameRef.current = requestAnimationFrame(loop);
+    };
+
+    if (focused && animationFrameRef.current === null) {
+      animationFrameRef.current = requestAnimationFrame(loop);
+    }
+
+    return () => {
+      if (animationFrameRef.current !== null) {
+        cancelAnimationFrame(animationFrameRef.current);
+        animationFrameRef.current = null;
+      }
+    };
+  }, [focused, reset]);
+
+  React.useEffect(() => {
+    if (!focused) {
+      if (animationFrameRef.current !== null) {
+        cancelAnimationFrame(animationFrameRef.current);
+        animationFrameRef.current = null;
+      }
+
+      return;
+    }
+
+    if (animationFrameRef.current === null && canvasRef.current) {
+      animationFrameRef.current = requestAnimationFrame((time) => {
+        const canvas = canvasRef.current;
+        if (!canvas) return;
+
+        const ctx = canvas.getContext('2d');
+        if (!ctx) return;
+
+        const themeBorderColor = getComputedStyle(document.body).getPropertyValue('--theme-border').trim();
+        const themeTextColor = getComputedStyle(document.body).getPropertyValue('--theme-text').trim();
+
+        ctx.clearRect(0, 0, canvas.width, canvas.height);
+        ctx.fillStyle = themeBorderColor;
+        ctx.fillRect(fruitRef.current.x * CHARACTER_WIDTH, fruitRef.current.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+        ctx.fillStyle = themeTextColor;
+
+        for (const segment of snakeRef.current) {
+          ctx.fillRect(segment.x * CHARACTER_WIDTH, segment.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+        }
+
+        lastMoveTimeRef.current = time;
+        animationFrameRef.current = requestAnimationFrame(loop);
+
+        function loop(time: number) {
+          if (!focused) return;
+          if (!ctx) return;
+          if (!canvas) return;
+
+          ctx.clearRect(0, 0, canvas.width, canvas.height);
+          ctx.fillStyle = themeBorderColor;
+          ctx.fillRect(fruitRef.current.x * CHARACTER_WIDTH, fruitRef.current.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+          ctx.fillStyle = themeTextColor;
+          for (const segment of snakeRef.current) {
+            ctx.fillRect(segment.x * CHARACTER_WIDTH, segment.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+          }
+          if (time - lastMoveTimeRef.current > moveInterval) {
+            moveSnake();
+            lastMoveTimeRef.current = time;
+          }
+          animationFrameRef.current = requestAnimationFrame(loop);
+        }
+
+        const moveSnake = () => {
+          const snake = snakeRef.current;
+          const dir = directionRef.current;
+          const head = snake[snake.length - 1];
+          let newHead: Position = { x: head.x, y: head.y };
+          if (dir === 'LEFT') newHead.x -= 1;
+          if (dir === 'RIGHT') newHead.x += 1;
+          if (dir === 'UP') newHead.y -= 1;
+          if (dir === 'DOWN') newHead.y += 1;
+          if (newHead.x < 0 || newHead.x >= gridWidthRef.current || newHead.y < 0 || newHead.y >= gridHeightRef.current) {
+            reset();
+            return;
+          }
+
+          for (const seg of snake) {
+            if (seg.x === newHead.x && seg.y === newHead.y) {
+              reset();
+              return;
+            }
+          }
+
+          snake.push(newHead);
+          if (newHead.x === fruitRef.current.x && newHead.y === fruitRef.current.y) {
+            placeTarget();
+          } else {
+            snake.shift();
+          }
+        };
+
+        const placeTarget = () => {
+          const snake = snakeRef.current;
+          const gridW = gridWidthRef.current;
+          const gridH = gridHeightRef.current;
+          let fruitPos: Position;
+          while (true) {
+            fruitPos = {
+              x: Math.floor(Math.random() * gridW),
+              y: Math.floor(Math.random() * gridH),
+            };
+            if (!snake.some((s) => s.x === fruitPos.x && s.y === fruitPos.y)) break;
+          }
+          fruitRef.current = fruitPos;
+        };
+      });
+    }
+  }, [focused, reset]);
+
+  const onHandleClickUp = () => {
+    if (directionRef.current !== 'DOWN') directionRef.current = 'UP';
+  };
+  const onHandleClickDown = () => {
+    if (directionRef.current !== 'UP') directionRef.current = 'DOWN';
+  };
+  const onHandleClickLeft = () => {
+    if (directionRef.current !== 'RIGHT') directionRef.current = 'LEFT';
+  };
+  const onHandleClickRight = () => {
+    if (directionRef.current !== 'LEFT') directionRef.current = 'RIGHT';
+  };
+
+  return (
+    <>
+      <ActionButton hotkey="↑" onClick={onHandleClickUp}>
+        Up
+      </ActionButton>
+      <ActionButton hotkey="↓" onClick={onHandleClickDown}>
+        Down
+      </ActionButton>
+      <ActionButton hotkey="←" onClick={onHandleClickLeft}>
+        Left
+      </ActionButton>
+      <ActionButton hotkey="→" onClick={onHandleClickRight}>
+        Right
+      </ActionButton>
+      <div className={styles.container}>
+        <canvas className={styles.root} ref={canvasRef} />
+      </div>
+    </>
+  );
+};
+
+export default CanvasSnake;
+
+================
+File: reference/components/Card.module.scss
+================
+.card {
+  position: relative;
+  display: block;
+  padding-top: 0;
+  padding-left: 0;
+  padding-right: 0;
+  padding-bottom: 0;
+  white-space: prewrap;
+}
+
+.children {
+  box-shadow:
+    inset 2px 0 0 0 var(--theme-text),
+    inset -2px 0 0 0 var(--theme-text),
+    inset 0 -2px 0 0 var(--theme-text);
+  display: block;
+  padding-top: calc(var(--theme-line-height-base) * 0.5rem);
+  padding-left: 2ch;
+  padding-right: 2ch;
+  padding-bottom: calc(var(--theme-line-height-base) * 1rem);
+  overflow-x: auto;
+  overflow-y: hidden;
+
+  &::-webkit-scrollbar {
+    display: none;
+  }
+
+  scrollbar-width: none;
+}
+
+.action {
+  display: flex;
+  align-items: flex-end;
+  justify-content: space-between;
+}
+
+.left {
+  min-width: 10%;
+  width: 100%;
+  box-shadow:
+    inset 2px 0 0 0 var(--theme-text),
+    inset 0 2px 0 0 var(--theme-text);
+  padding: calc((var(--font-size) * 0.5) * var(--theme-line-height-base)) 2ch 0px 1ch;
+}
+
+.leftCorner {
+  flex-shrink: 0;
+  box-shadow:
+    inset 2px 0 0 0 var(--theme-text),
+    inset 0 2px 0 0 var(--theme-text);
+  padding: calc((var(--font-size) * 0.5) * var(--theme-line-height-base)) 1ch 0px 1ch;
+}
+
+.right {
+  min-width: 10%;
+  width: 100%;
+  box-shadow:
+    inset -2px 0 0 0 var(--theme-text),
+    inset 0 2px 0 0 var(--theme-text);
+  padding: calc((var(--font-size) * 0.5) * var(--theme-line-height-base)) 2ch 0px 1ch;
+}
+
+.rightCorner {
+  flex-shrink: 0;
+  box-shadow:
+    inset -2px 0 0 0 var(--theme-text),
+    inset 0 2px 0 0 var(--theme-text);
+  padding: calc((var(--font-size) * 0.5) * var(--theme-line-height-base)) 1ch 0px 1ch;
+}
+
+.title {
+  flex-shrink: 0;
+  padding: 0 1ch 0 1ch;
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+================
+File: reference/components/Card.tsx
+================
+import styles from '@components/Card.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface CardProps extends React.HTMLAttributes<HTMLDivElement> {
+  children?: React.ReactNode;
+  title?: string | any;
+  mode?: string | any;
+}
+
+const Card: React.FC<CardProps> = ({ children, mode, title, style, ...rest }) => {
+  let titleElement = (
+    <header className={styles.action}>
+      <div className={styles.left} aria-hidden="true"></div>
+      {title ? <h2 className={styles.title}>{title}</h2> : null}
+      <div className={styles.right} aria-hidden="true"></div>
+    </header>
+  );
+
+  if (mode === 'left') {
+    titleElement = (
+      <header className={styles.action}>
+        <div className={styles.leftCorner} aria-hidden="true"></div>
+        <h2 className={styles.title}>{title}</h2>
+        <div className={styles.right} aria-hidden="true"></div>
+      </header>
+    );
+  }
+
+  if (mode === 'right') {
+    titleElement = (
+      <header className={styles.action}>
+        <div className={styles.left} aria-hidden="true"></div>
+        <h2 className={styles.title}>{title}</h2>
+        <div className={styles.rightCorner} aria-hidden="true"></div>
+      </header>
+    );
+  }
+
+  return (
+    <article className={styles.card} style={style}>
+      {titleElement}
+      <section className={styles.children}>{children}</section>
+    </article>
+  );
+};
+
+export default Card;
+
+================
+File: reference/components/CardDouble.module.scss
+================
+.card {
+  --card-double-border-width: 6px;
+  --card-double-half-gutter: (var(--font-size) * 0.5);
+  --card-double-top-gutter: 6px;
+
+  position: relative;
+  display: block;
+  padding-top: 0;
+  padding-right: 0;
+  padding-left: 0;
+  padding-bottom: 0;
+}
+
+.children {
+  border-left: var(--card-double-border-width) solid var(--theme-text);
+  border-left-style: double;
+  border-bottom: var(--card-double-border-width) solid var(--theme-text);
+  border-bottom-style: double;
+  border-right: var(--card-double-border-width) solid var(--theme-text);
+  border-right-style: double;
+  display: block;
+  padding-top: calc(var(--theme-line-height-base) * 0.5rem);
+  padding-left: calc(2ch - var(--card-double-border-width));
+  padding-right: calc(2ch - var(--card-double-border-width));
+  padding-bottom: calc(var(--theme-line-height-base) * 1rem - var(--card-double-border-width));
+
+  overflow-x: auto;
+  overflow-y: hidden;
+
+  &::-webkit-scrollbar {
+    display: none;
+  }
+
+  scrollbar-width: none;
+}
+
+.action {
+  display: flex;
+  align-items: flex-end;
+  justify-content: space-between;
+}
+
+.left {
+  min-width: 10%;
+  width: 100%;
+  border-top: var(--card-double-border-width) solid var(--theme-text);
+  border-top-style: double;
+  border-left: var(--card-double-border-width) solid var(--theme-text);
+  border-left-style: double;
+  padding: calc(var(--card-double-top-gutter) * var(--theme-line-height-base)) 2ch 0px 1ch;
+}
+
+.leftCorner {
+  flex-shrink: 0;
+  border-top: var(--card-double-border-width) solid var(--theme-text);
+  border-top-style: double;
+  border-left: var(--card-double-border-width) solid var(--theme-text);
+  border-left-style: double;
+  padding: calc(var(--card-double-top-gutter) * var(--theme-line-height-base)) calc(1ch - 6px) 0px 1ch;
+}
+
+.right {
+  min-width: 10%;
+  width: 100%;
+  border-top: var(--card-double-border-width) solid var(--theme-text);
+  border-top-style: double;
+  border-right: var(--card-double-border-width) solid var(--theme-text);
+  border-right-style: double;
+  padding: calc(var(--card-double-top-gutter) * var(--theme-line-height-base)) 2ch 0px 1ch;
+}
+
+.rightCorner {
+  flex-shrink: 0;
+  border-top: var(--card-double-border-width) solid var(--theme-text);
+  border-top-style: double;
+  border-right: var(--card-double-border-width) solid var(--theme-text);
+  border-right-style: double;
+  padding: calc(var(--card-double-top-gutter) * var(--theme-line-height-base)) 1ch 0px calc(1ch - 6px);
+}
+
+.title {
+  flex-shrink: 0;
+  padding: 0 1ch 0 1ch;
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+================
+File: reference/components/CardDouble.tsx
+================
+import styles from '@components/CardDouble.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface CardProps extends React.HTMLAttributes<HTMLDivElement> {
+  children?: React.ReactNode;
+  title?: string | any;
+  mode?: string | any;
+  style?: any;
+}
+
+const CardDouble: React.FC<CardProps> = ({ children, mode, title, style, ...rest }) => {
+  let titleElement = (
+    <header className={styles.action}>
+      <div className={styles.left} aria-hidden="true"></div>
+      <h2 className={styles.title}>{title}</h2>
+      <div className={styles.right} aria-hidden="true"></div>
+    </header>
+  );
+
+  if (mode === 'left') {
+    titleElement = (
+      <header className={styles.action}>
+        <div className={styles.leftCorner} aria-hidden="true"></div>
+        <h2 className={styles.title}>{title}</h2>
+        <div className={styles.right} aria-hidden="true"></div>
+      </header>
+    );
+  }
+
+  if (mode === 'right') {
+    titleElement = (
+      <header className={styles.action}>
+        <div className={styles.left} aria-hidden="true"></div>
+        <h2 className={styles.title}>{title}</h2>
+        <div className={styles.rightCorner} aria-hidden="true"></div>
+      </header>
+    );
+  }
+
+  return (
+    <article className={styles.card}>
+      {titleElement}
+      <section className={styles.children}>
+        <section className={styles.borderChildren} style={style}>
+          {children}
+        </section>
+      </section>
+    </article>
+  );
+};
+
+export default CardDouble;
+
+================
+File: reference/components/Checkbox.module.scss
+================
+.section {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+
+  .right {
+    padding-bottom: calc(8px * var(--theme-line-height-base));
+    box-shadow: inset 0 1px 0 0 var(--theme-border-subdued);
+  }
+
+  &:last-child {
+    .right {
+      padding-bottom: 0;
+    }
+  }
+}
+
+.checked {
+}
+
+.focused {
+  .figure {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.relative {
+  position: relative;
+  flex-shrink: 0;
+  display: inline-block;
+  vertical-align: baseline;
+}
+
+.figure {
+  width: 100%;
+  height: 100%;
+  cursor: pointer;
+  color: var(--theme-text);
+  background: var(--theme-button-foreground);
+  align-self: stretch;
+  display: inline-block;
+  padding: 0 1ch 0 1ch;
+}
+
+.right {
+  background: var(--theme-button-background);
+  min-width: 10%;
+  width: 100%;
+  align-self: stretch;
+}
+
+.input {
+  top: 0;
+  left: 0;
+  opacity: 0;
+  position: absolute;
+  width: 1px;
+  height: 1px;
+}
+
+================
+File: reference/components/Checkbox.tsx
+================
+'use client';
+
+import styles from '@components/Checkbox.module.scss';
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface CheckboxProps {
+  style?: React.CSSProperties;
+  checkboxStyle?: React.CSSProperties;
+  name: string;
+  defaultChecked?: boolean;
+  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;
+  tabIndex?: number;
+  children?: React.ReactNode;
+}
+
+const Checkbox: React.FC<CheckboxProps> = ({ style, name, defaultChecked = false, onChange, children }) => {
+  const checkboxId = `${name}-checkbox`;
+  const inputRef = React.useRef<HTMLInputElement>(null);
+
+  const [isChecked, setIsChecked] = React.useState(defaultChecked);
+  const [isFocused, setIsFocused] = React.useState(false);
+
+  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
+    switch (event.key) {
+      case 'Enter':
+        event.preventDefault();
+        inputRef.current?.click();
+        break;
+      case 'ArrowUp':
+      case 'ArrowLeft': {
+        event.preventDefault();
+        const previousFocusable = Utilities.findNextFocusable(document.activeElement, 'previous');
+        previousFocusable?.focus();
+        break;
+      }
+      case 'ArrowDown':
+      case 'ArrowRight': {
+        event.preventDefault();
+        const nextFocusable = Utilities.findNextFocusable(document.activeElement, 'next');
+        nextFocusable?.focus();
+        break;
+      }
+      default:
+        break;
+    }
+  };
+
+  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
+    const newCheckedStatus = event.target.checked;
+    setIsChecked(newCheckedStatus);
+    if (onChange) {
+      onChange(event);
+    }
+  };
+
+  const handleFocus = () => setIsFocused(true);
+  const handleBlur = () => setIsFocused(false);
+
+  return (
+    <div
+      className={Utilities.classNames(styles.section, {
+        [styles.checked]: isChecked,
+        [styles.focused]: isFocused,
+      })}
+      style={style}
+    >
+      <div className={styles.relative}>
+        <input className={styles.input} id={checkboxId} type="checkbox" name={name} defaultChecked={defaultChecked} onChange={handleChange} onKeyDown={handleKeyDown} onFocus={handleFocus} onBlur={handleBlur} tabIndex={0} ref={inputRef} />
+        <label className={styles.figure} htmlFor={checkboxId}>
+          {isChecked ? '╳' : '\u00A0'}
+        </label>
+      </div>
+      <div className={styles.right}>&nbsp;&nbsp;{children}</div>
+    </div>
+  );
+};
+
+export default Checkbox;
+
+================
+File: reference/components/Chessboard.module.scss
+================
+.board {
+  display: inline-table;
+  border-collapse: collapse;
+}
+
+.corner {
+  width: 1ch;
+  height: calc(var(--theme-line-height-base) * 1rem);
+}
+
+.cell {
+  width: 1ch;
+  height: calc(var(--theme-line-height-base) * 1rem);
+  background-color: var(--theme-border-subdued);
+  text-align: center;
+  vertical-align: middle;
+}
+
+.square {
+  height: calc(var(--theme-line-height-base) * 2rem);
+  text-align: center;
+  vertical-align: middle;
+  width: 3ch;
+}
+
+.dark {
+  background-color: var(--theme-focused-foreground);
+}
+
+.light {
+  background-color: var(--theme-focused-foreground-subdued);
+}
+
+.symbol {
+  font-size: 40px;
+  line-height: calc(var(--theme-line-height-base) * 2rem);
+}
+
+================
+File: reference/components/Chessboard.tsx
+================
+'use client';
+
+import styles from '@components/Chessboard.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+const FILE = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];
+const RANK = [8, 7, 6, 5, 4, 3, 2, 1];
+
+const getPieceSymbol = (piece: string) => {
+  const mapping: Record<string, string> = {
+    K: '♔',
+    Q: '♕',
+    R: '♖',
+    B: '♗',
+    N: '♘',
+    P: '♙',
+    k: '♚',
+    q: '♛',
+    r: '♜',
+    b: '♝',
+    n: '♞',
+    p: '♟',
+  };
+  return mapping[piece] || '';
+};
+
+interface ChessboardProps {
+  board: string[][];
+}
+
+const Chessboard: React.FC<ChessboardProps> = ({ board }) => {
+  return (
+    <table className={styles.board}>
+      <tbody>
+        <tr>
+          <td className={styles.corner}></td>
+          {FILE.map((file) => (
+            <td key={file} className={styles.cell}>
+              {file}
+            </td>
+          ))}
+        </tr>
+        {RANK.map((rank, rowIndex) => (
+          <tr key={rank}>
+            <td className={styles.cell}>{rank}</td>
+            {FILE.map((_, colIndex) => {
+              const isDark = (rowIndex + colIndex) % 2 === 0;
+              const squareClass = isDark ? styles.dark : styles.light;
+              return (
+                <td key={colIndex} className={Utilities.classNames(styles.square, squareClass)}>
+                  <span className={styles.symbol}>{getPieceSymbol(board[rowIndex][colIndex])}</span>
+                </td>
+              );
+            })}
+          </tr>
+        ))}
+      </tbody>
+    </table>
+  );
+};
+
+export default Chessboard;
+
+================
+File: reference/components/CodeBlock.module.scss
+================
+.root {
+  display: block;
+  font-weight: 400;
+  overflow: auto;
+  font-family: inherit;
+  background: var(--theme-border-subdued);
+
+  &::-webkit-scrollbar {
+    display: none;
+  }
+
+  scrollbar-width: none;
+}
+
+.line {
+  display: flex;
+  justify-content: space-between;
+  align-items: flex-start;
+}
+
+.number {
+  display: inline-flex;
+  width: 3ch;
+  text-align: right;
+  padding-right: 1ch;
+  user-select: none;
+  background: var(--theme-background);
+  opacity: 0.5;
+}
+
+.content {
+  min-width: 10%;
+  width: 100%;
+  white-space: pre;
+  background: var(--theme-border-subdued);
+  padding-left: 2ch;
+}
+
+================
+File: reference/components/CodeBlock.tsx
+================
+'use client';
+
+import styles from '@components/CodeBlock.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface CodeBlockProps extends React.HTMLAttributes<HTMLPreElement> {
+  children?: React.ReactNode;
+}
+
+const CodeBlock = React.forwardRef<HTMLPreElement, CodeBlockProps>(({ children, ...rest }, ref) => {
+  return (
+    <pre className={styles.root} ref={ref} {...rest}>
+      {String(children)
+        .split('\n')
+        .map((line, index) => (
+          <div key={index} className={styles.line}>
+            <span className={styles.number}>{Utilities.leftPad(String(index + 1), 3)}</span>
+            <span className={styles.content}>{line}</span>
+          </div>
+        ))}
+    </pre>
+  );
+});
+
+CodeBlock.displayName = 'CodeBlock';
+
+export default CodeBlock;
+
+================
+File: reference/components/ComboBox.module.scss
+================
+.root {
+  padding: 0;
+}
+
+================
+File: reference/components/ComboBox.tsx
+================
+'use client';
+
+import styles from '@components/ComboBox.module.scss';
+
+import * as React from 'react';
+
+import AlertBanner from '@components/AlertBanner';
+import ButtonGroup from '@components/ButtonGroup';
+import CardDouble from '@components/CardDouble';
+import Input from '@components/Input';
+
+interface ComboBoxProps {
+  data: string[][];
+  label?: string;
+}
+
+function ComboBox({ data, label }: ComboBoxProps) {
+  const [searchTerm, setSearchTerm] = React.useState('');
+
+  const filtered = React.useMemo(() => {
+    const sliced = data.slice(1);
+    if (!searchTerm) return [];
+    return sliced.filter((entry) => entry[0].toLowerCase().includes(searchTerm.toLowerCase()));
+  }, [data, searchTerm]);
+
+  const displayed = React.useMemo(() => {
+    const sliced = data.slice(1);
+    if (filtered.length >= 5) return filtered.slice(0, 5);
+    if (filtered.length === 0 && searchTerm) return sliced.slice(0, 5);
+    if (filtered.length > 0 && filtered.length < 5) {
+      const needed = 5 - filtered.length;
+      const remainder = sliced.filter((entry) => !filtered.includes(entry));
+      return [...filtered, ...remainder.slice(0, needed)];
+    }
+    return sliced.slice(0, 5);
+  }, [filtered, data, searchTerm]);
+
+  const handleChange = React.useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
+    setSearchTerm(e.target.value);
+  }, []);
+
+  return (
+    <>
+      <div className={styles.root}>
+        <Input autoComplete="off" isBlink label={label} name="input_test_blink" value={searchTerm} onChange={handleChange} />
+      </div>
+      {displayed.map((entry) => (
+        <CardDouble key={entry[0]} title={entry[0]}>
+          <AlertBanner>{entry[1]}</AlertBanner>
+          <br />
+          <ButtonGroup isFull items={[{ body: 'FAVORITE' }, { body: 'DONATE' }, { body: 'LEARN MORE' }]} />
+        </CardDouble>
+      ))}
+    </>
+  );
+}
+
+export default ComboBox;
+
+================
+File: reference/components/ContentFluid.module.scss
+================
+.root {
+  display: block;
+  min-width: 10%;
+  width: 100%;
+  align-self: stretch;
+}
+
+================
+File: reference/components/ContentFluid.tsx
+================
+import styles from '@components/ContentFluid.module.scss';
+
+import * as React from 'react';
+
+interface ContentFluidProps extends React.HTMLAttributes<HTMLSpanElement> {
+  children?: React.ReactNode;
+}
+
+const ContentFluid: React.FC<ContentFluidProps> = ({ children, ...rest }) => {
+  return <div className={styles.root}>{children}</div>;
+};
+
+export default ContentFluid;
+
+================
+File: reference/components/DataTable.module.scss
+================
+.root {
+  position: relative;
+  width: 100%;
+  border-spacing: 0px;
+  max-width: 64ch;
+}
+
+.body {
+}
+
+.row {
+  transition: transform 0.5s ease;
+  border-spacing: 0px;
+
+  &:first-child {
+    font-weight: 400;
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    outline: 0;
+  }
+}
+
+.column {
+  border: 0;
+  outline: 0;
+  padding-right: 1ch;
+  transition: background-color 0.5s ease;
+}
+
+.changed {
+  animation: flash 2000ms ease;
+}
+
+@keyframes flash {
+  0% {
+    background-color: var(--theme-focused-foreground-subdued);
+  }
+  100% {
+    background-color: transparent;
+  }
+}
+
+================
+File: reference/components/DataTable.tsx
+================
+'use client';
+
+import styles from '@components/DataTable.module.scss';
+
+import * as React from 'react';
+
+interface TableProps {
+  data: string[][];
+}
+
+interface RGBAColor {
+  r: number;
+  g: number;
+  b: number;
+  a: number;
+}
+
+const BASE_FOREGROUND_RGBA: RGBAColor = { r: 98, g: 98, b: 98, a: 0.5 };
+const BASE_BACKGROUND_RGBA: RGBAColor = { r: 168, g: 168, b: 168, a: 0.5 };
+const ALPHA = 0.45;
+
+function interpolateColor(color1: RGBAColor, color2: RGBAColor, factor: number): RGBAColor {
+  return {
+    r: Math.round(color1.r + factor * (color2.r - color1.r)),
+    g: Math.round(color1.g + factor * (color2.g - color1.g)),
+    b: Math.round(color1.b + factor * (color2.b - color1.b)),
+    a: color1.a + factor * (color2.a - color1.a),
+  };
+}
+
+const DataTable: React.FC<TableProps> = ({ data }) => {
+  const tableRef = React.useRef<HTMLTableElement>(null);
+  const prevDataRef = React.useRef<string[][]>(data);
+
+  React.useEffect(() => {
+    const rows = tableRef.current?.querySelectorAll<HTMLTableRowElement>('tr') || [];
+    for (let i = 1; i < data.length; i++) {
+      const cells = rows[i]?.querySelectorAll<HTMLTableCellElement>('td');
+      if (!cells) continue;
+      for (let j = 0; j < data[i].length; j++) {
+        const cell = cells[j];
+        const changed = prevDataRef.current[i]?.[j] !== data[i][j];
+        if (cell && changed) {
+          cell.classList.remove(styles.changed);
+          void cell.offsetWidth;
+          cell.classList.add(styles.changed);
+        }
+      }
+    }
+    prevDataRef.current = data;
+  }, [data]);
+
+  const handleKeyDown = (event: React.KeyboardEvent<HTMLTableElement>) => {
+    const activeElement = document.activeElement;
+    if (!activeElement) return;
+    switch (event.key) {
+      case 'Enter':
+        event.preventDefault();
+        if (activeElement instanceof HTMLTableCellElement) {
+          activeElement.click();
+        }
+        break;
+      case 'ArrowUp':
+      case 'ArrowDown':
+      case 'ArrowLeft':
+      case 'ArrowRight':
+        event.preventDefault();
+        if (!(activeElement instanceof HTMLTableCellElement)) return;
+        const direction = event.key === 'ArrowUp' || event.key === 'ArrowLeft' ? 'previous' : 'next';
+        const allCells = Array.from(tableRef.current?.querySelectorAll<HTMLTableCellElement>('td') || []);
+        const currentIndex = allCells.indexOf(activeElement);
+        if (currentIndex === -1) return;
+        let nextIndex = direction === 'next' ? currentIndex + 1 : currentIndex - 1;
+        if (direction === 'previous') {
+          if (nextIndex < 0) nextIndex = allCells.length - 1;
+        } else {
+          if (nextIndex >= allCells.length) nextIndex = 0;
+        }
+        allCells[nextIndex].focus();
+        break;
+    }
+  };
+
+  const targetColorHeader: RGBAColor = { r: 255, g: 255, b: 255, a: ALPHA };
+  const targetColorData: RGBAColor = { r: 255, g: 255, b: 255, a: ALPHA };
+
+  return (
+    <table className={styles.root} ref={tableRef} onKeyDown={handleKeyDown}>
+      <tbody className={styles.body}>
+        {data.map((row, rowIndex) => (
+          <tr key={rowIndex} className={styles.row} tabIndex={0} onClick={() => alert('testing')}>
+            {row.map((cellContent, colIndex) => {
+              let backgroundColor: string;
+              if (rowIndex === 0) {
+                const lightnessFactor = row.length > 1 ? colIndex / (row.length - 1) : 0;
+                const newColor = interpolateColor(BASE_FOREGROUND_RGBA, targetColorHeader, lightnessFactor);
+                backgroundColor = `rgba(${newColor.r}, ${newColor.g}, ${newColor.b}, ${newColor.a.toFixed(2)})`;
+              } else {
+                const numRows = data.length - 1;
+                const maxIndexSum = numRows - 1 + (row.length - 1) || 1;
+                const indexSum = rowIndex - 1 + colIndex;
+                const lightnessFactor = indexSum / maxIndexSum;
+                const newColor = interpolateColor(BASE_BACKGROUND_RGBA, targetColorData, lightnessFactor);
+                backgroundColor = `rgba(${newColor.r}, ${newColor.g}, ${newColor.b}, ${newColor.a.toFixed(2)})`;
+              }
+              return (
+                <td key={colIndex} className={styles.column} style={{ backgroundColor }}>
+                  {cellContent}
+                </td>
+              );
+            })}
+          </tr>
+        ))}
+      </tbody>
+    </table>
+  );
+};
+
+export default DataTable;
+
+================
+File: reference/components/DatePicker.module.scss
+================
+.root {
+  display: inline-block;
+  user-select: none;
+}
+
+.controls {
+  align-items: center;
+  background: var(--theme-border);
+  display: flex;
+  justify-content: space-between;
+}
+
+.button {
+  align-self: stretch;
+  background: none;
+  border: none;
+  color: var(--theme-text);
+  cursor: pointer;
+  display: inline-block;
+  line-height: calc(var(--theme-line-height-base) * 1em);
+  margin: 0;
+  outline: 0;
+  padding: 0 1ch 0 1ch;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    outline: 0;
+  }
+}
+
+.date {
+  min-width: 10%;
+  padding: 0 1ch 0 1ch;
+  text-align: left;
+  width: 100%;
+}
+
+.header {
+  background: var(--theme-border);
+  display: grid;
+  grid-template-columns: repeat(7, 1fr);
+  text-align: center;
+}
+
+.days {
+  background: var(--theme-border-subdued);
+  display: grid;
+  grid-template-columns: repeat(7, 1fr);
+  grid-template-rows: repeat(6, min-content);
+  align-items: start;
+  min-height: calc(var(--theme-line-height-base) * 6em);
+}
+
+.cell {
+  outline: none;
+  padding: 0 1ch 0 1ch;
+  text-align: center;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/DatePicker.tsx
+================
+'use client';
+
+import styles from '@components/DatePicker.module.scss';
+
+import * as React from 'react';
+
+interface DatePickerProps {
+  year?: number;
+  month?: number;
+}
+
+const WEEKDAYS = ['SU', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA'];
+
+const MONTH_NAMES = [
+  'January', 'February', 'March', 'April', 'May', 'June',
+  'July', 'August', 'September', 'October', 'November', 'December'
+];
+
+const MAX_CELLS = 42;
+
+const DatePicker: React.FC<DatePickerProps> = ({ year, month }) => {
+  const today = new Date();
+  const [currentYear, setYear] = React.useState(year || today.getFullYear());
+  const [currentMonth, setMonth] = React.useState(month || today.getMonth() + 1);
+
+  const first = new Date(currentYear, currentMonth - 1, 1);
+  const startingWeekday = first.getDay();
+  const daysInMonth = new Date(currentYear, currentMonth, 0).getDate();
+
+  const cells: React.ReactNode[] = [];
+
+  for (let i = 0; i < startingWeekday; i++) {
+    cells.push(<div key={`empty-start-${i}`} className={styles.dayCell} />);
+  }
+
+  for (let day = 1; day <= daysInMonth; day++) {
+    const presentationDay = String(day).padStart(2, '0');
+    cells.push(
+      <div
+        key={day}
+        className={styles.cell}
+        tabIndex={0}
+        aria-label={`${currentYear}-${String(currentMonth).padStart(2, '0')}-${presentationDay}`}
+      >
+        {presentationDay}
+      </div>
+    );
+  }
+
+  while (cells.length < MAX_CELLS) {
+    cells.push(<div key={`empty-end-${cells.length}`} className={styles.dayCell} />);
+  }
+
+  const onSwitchPreviousMonth = () => {
+    let newMonth = currentMonth - 1;
+    let newYear = currentYear;
+    if (newMonth < 1) {
+      newMonth = 12;
+      newYear--;
+    }
+    setMonth(newMonth);
+    setYear(newYear);
+  };
+
+  const onSwitchNextMonth = () => {
+    let newMonth = currentMonth + 1;
+    let newYear = currentYear;
+    if (newMonth > 12) {
+      newMonth = 1;
+      newYear++;
+    }
+    setMonth(newMonth);
+    setYear(newYear);
+  };
+
+  return (
+    <div className={styles.root}>
+      <div className={styles.controls}>
+        <button type="button" className={styles.button} onClick={onSwitchPreviousMonth} aria-label="Previous month">
+          ▲
+        </button>
+        <div className={styles.date}>
+          {currentYear} {MONTH_NAMES[currentMonth - 1].toUpperCase()}
+        </div>
+        <button type="button" className={styles.button} onClick={onSwitchNextMonth} aria-label="Next month">
+          ▼
+        </button>
+      </div>
+      <div className={styles.header}>
+        {WEEKDAYS.map((day) => (
+          <div key={day} className={styles.cell}>
+            {day}
+          </div>
+        ))}
+      </div>
+      <div className={styles.days}>{cells}</div>
+    </div>
+  );
+};
+
+export default DatePicker;
+
+================
+File: reference/components/DebugGrid.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+const DebugGrid: React.FC = () => {
+  React.useEffect(() => {
+    const debugGrid = document.createElement('div');
+    let isVisible = false;
+
+    const setGridHeight = () => {
+      debugGrid.style.height = `${document.documentElement.scrollHeight}px`;
+    };
+
+    Object.assign(debugGrid.style, {
+      position: 'absolute',
+      top: '0',
+      left: '0',
+      right: '0',
+      zIndex: '-1',
+      margin: '0',
+      backgroundImage: `
+        repeating-linear-gradient(var(--theme-border) 0 1px, transparent 1px 100%),
+        repeating-linear-gradient(90deg, var(--theme-border) 0 1px, transparent 1px 100%)
+      `,
+      backgroundSize: '1ch 1.25rem',
+      pointerEvents: 'none',
+      display: 'none',
+    });
+
+    document.body.appendChild(debugGrid);
+    setGridHeight();
+
+    const toggleDebugGrid = () => {
+      isVisible = !isVisible;
+      debugGrid.style.display = isVisible ? 'block' : 'none';
+    };
+
+    const handleDebugGridToggle = () => toggleDebugGrid();
+
+    const observer = new ResizeObserver(() => {
+      setGridHeight();
+    });
+    observer.observe(document.documentElement);
+
+    window.addEventListener('debugGridToggle', handleDebugGridToggle);
+    window.addEventListener('resize', setGridHeight);
+
+    return () => {
+      document.body.removeChild(debugGrid);
+      window.removeEventListener('resize', setGridHeight);
+      window.removeEventListener('debugGridToggle', handleDebugGridToggle);
+      observer.disconnect();
+    };
+  }, []);
+
+  return null;
+};
+
+export const toggleDebugGrid = (): void => {
+  window.dispatchEvent(new CustomEvent('debugGridToggle'));
+};
+
+export default DebugGrid;
+
+================
+File: reference/components/DefaultMetaTags.tsx
+================
+export default function DefaultMetaTags() {
+  return (
+    <>
+      <meta httpEquiv="content-language" content="en-us" />
+      <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0" />
+      <link rel="icon" type="image/png" sizes="32x32" href="/favicon-16x16.png" />
+      <link rel="icon" type="image/png" sizes="16x16" href="/favicon-32x32.png" />
+      <link rel="shortcut icon" href="/favicon.ico" />
+    </>
+  );
+}
+
+================
+File: reference/components/Dialog.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border);
+  box-shadow: 1ch 1ch 0 0 var(--theme-border-subdued);
+  font-weight: 400;
+  max-width: 56ch;
+  min-width: 24ch;
+  margin: 0;
+  padding: 0;
+}
+
+.header {
+  background: var(--theme-text);
+  color: var(--theme-background);
+  text-align: center;
+  margin: 0;
+  padding: 0;
+  display: block;
+}
+
+.message {
+  display: block;
+  margin: 0;
+  text-align: center;
+  padding: 0 2ch 0 2ch;
+}
+
+.actions {
+  display: flex;
+  justify-content: space-between;
+  align-items: center;
+  max-width: 24ch;
+  margin: 0 auto 0 auto;
+  padding: 0 2ch 0 2ch;
+}
+
+================
+File: reference/components/Dialog.tsx
+================
+import styles from '@components/Dialog.module.scss';
+
+import * as React from 'react';
+
+import Block from '@components/Block';
+import Button from '@components/Button';
+
+interface DialogProps {
+  title?: React.ReactNode;
+  children?: React.ReactNode;
+  style?: React.CSSProperties;
+  onConfirm?: () => void;
+  onCancel?: () => void;
+}
+
+const Dialog: React.FC<DialogProps> = ({ title, children, style, onConfirm, onCancel }) => {
+  const titleId = React.useId();
+  const descId = React.useId();
+
+  return (
+    <div className={styles.root} style={style} role="dialog" aria-modal="true" aria-labelledby={titleId} aria-describedby={descId}>
+      <header className={styles.header}>{title}</header>
+      <br />
+      <article className={styles.message} id={descId}>
+        {children}
+      </article>
+      <br />
+      <div className={styles.actions}>
+        <Button theme="SECONDARY" onClick={onConfirm}>
+          OK
+        </Button>
+        <Block style={{ opacity: 0 }} />
+        <Button theme="SECONDARY" onClick={onCancel}>
+          Cancel
+        </Button>
+      </div>
+      <br />
+    </div>
+  );
+};
+
+export default Dialog;
+
+================
+File: reference/components/Divider.module.scss
+================
+.gradient {
+  background: linear-gradient(to right, transparent, var(--theme-border), transparent);
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  width: 100%;
+}
+
+.divider {
+  align-items: center;
+  border: 0;
+  display: flex;
+  flex-direction: column;
+  flex-shrink: 0;
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  justify-content: center;
+  outline: 0;
+  width: 100%;
+}
+
+.line {
+  background: var(--theme-text);
+  display: block;
+  flex-shrink: 0;
+  height: 2px;
+  width: 100%;
+}
+
+================
+File: reference/components/Divider.tsx
+================
+import styles from '@components/Divider.module.scss';
+
+import * as React from 'react';
+
+interface DividerProps extends React.HTMLAttributes<HTMLSpanElement> {
+  children?: React.ReactNode;
+  type?: string | any;
+  style?: any;
+}
+
+const Divider: React.FC<DividerProps> = ({ children, style, type }) => {
+  if (type === 'GRADIENT') {
+    return <div className={styles.gradient} style={style} />;
+  }
+
+  if (type === 'DOUBLE') {
+    return (
+      <div className={styles.divider} style={style}>
+        <div className={styles.line} style={{ marginBottom: `2px` }} />
+        <div className={styles.line} />
+      </div>
+    );
+  }
+
+  return (
+    <div className={styles.divider} style={style}>
+      <div className={styles.line} />
+    </div>
+  );
+};
+
+export default Divider;
+
+================
+File: reference/components/Drawer.module.scss
+================
+@keyframes fadeInLeft {
+  from {
+    opacity: 0;
+  }
+  to {
+    opacity: 1;
+  }
+}
+
+.root {
+  align-self: stretch;
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+}
+
+.side {
+  animation: fadeInLeft 0.2s ease-out;
+  min-width: 10%;
+  width: 100%;
+  align-self: stretch;
+  min-width: 22ch;
+}
+
+.right {
+  flex-shrink: 0;
+  align-self: stretch;
+  background: var(--theme-background-input);
+  display: flex;
+  align-items: center;
+  width: 3ch;
+}
+
+.action {
+  display: inline-flex;
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  font-size: var(--font-size);
+  user-select: none;
+  cursor: pointer;
+  color: var(--theme-text);
+  background: var(--theme-button-foreground);
+  flex-shrink: 0;
+  align-items: center;
+  justify-content: center;
+  border: 0;
+  outline: 0;
+  margin: 0;
+  padding: 0;
+  width: 100%;
+
+  &:focus {
+    border: 0;
+    outline: 0;
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/Drawer.tsx
+================
+'use client';
+
+import styles from '@components/Drawer.module.scss';
+
+import * as React from 'react';
+
+interface DrawerProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'defaultValue'> {
+  children?: React.ReactNode;
+  defaultValue?: boolean;
+}
+
+const Drawer: React.FC<DrawerProps> = ({ children, defaultValue = false, ...rest }) => {
+  const [expand, setExpand] = React.useState<boolean>(defaultValue);
+
+  return (
+    <div className={styles.root} {...rest}>
+      {expand ? <div className={styles.side}>{children}</div> : null}
+      <div className={styles.right}>
+        <button className={styles.action} onClick={() => setExpand(!expand)}>
+          {expand ? '⭠' : '⭢'}
+        </button>
+      </div>
+    </div>
+  );
+};
+
+export default Drawer;
+
+================
+File: reference/components/DropdownMenu.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border);
+  font-weight: 400;
+}
+
+.footer {
+  background: var(--theme-background-modal-footer);
+  padding: calc(var(--font-size) * 0.5 * var(--theme-line-height-base)) 1ch calc(var(--font-size) * 0.5 * var(--theme-line-height-base)) 1ch;
+}
+
+================
+File: reference/components/DropdownMenu.tsx
+================
+import styles from '@components/DropdownMenu.module.scss';
+
+import * as React from 'react';
+
+import ActionButton from '@components/ActionButton';
+import ActionListItem from '@components/ActionListItem';
+import ModalTrigger from '@components/ModalTrigger';
+
+import { useHotkeys } from '@modules/hotkeys';
+
+interface DropdownMenuItemProps {
+  children: React.ReactNode;
+  icon?: React.ReactNode;
+  href?: string;
+  target?: string;
+  onClick?: () => void;
+  modal?: any;
+  modalProps?: Record<string, unknown>;
+}
+
+interface DropdownMenuProps extends React.HTMLAttributes<HTMLDivElement> {
+  onClose?: (event?: MouseEvent | TouchEvent | KeyboardEvent) => void;
+  items?: DropdownMenuItemProps[];
+}
+
+const DropdownMenu = React.forwardRef<HTMLDivElement, DropdownMenuProps>((props, ref) => {
+  const { onClose, items, style, ...rest } = props;
+
+  const handleHotkey = () => {
+    if (onClose) onClose();
+  };
+
+  useHotkeys('space', handleHotkey);
+
+  return (
+    <div ref={ref} className={styles.root} style={style} {...rest}>
+      {items &&
+        items.map((each, index) => {
+          if (each.modal) {
+            return (
+              <ModalTrigger key={`action-items-${index}`} modal={each.modal} modalProps={each.modalProps}>
+                <ActionListItem children={each.children} icon={each.icon} />
+              </ModalTrigger>
+            );
+          }
+
+          return (
+            <ActionListItem
+              key={`action-items-${index}`}
+              children={each.children}
+              icon={each.icon}
+              href={each.href}
+              target={each.target}
+              onClick={() => {
+                if (each.onClick) {
+                  each.onClick();
+                }
+
+                if (onClose) {
+                  onClose();
+                }
+              }}
+            />
+          );
+        })}
+
+      <footer className={styles.footer}>
+        Press space to{' '}
+        <ActionButton
+          hotkey="␣"
+          onClick={() => {
+            if (onClose) onClose();
+          }}
+        >
+          Close
+        </ActionButton>
+      </footer>
+    </div>
+  );
+});
+
+DropdownMenu.displayName = 'DropdownMenu';
+
+export default DropdownMenu;
+
+================
+File: reference/components/DropdownMenuTrigger.module.scss
+================
+.root {
+  display: inline-block;
+  position: relative;
+}
+
+================
+File: reference/components/DropdownMenuTrigger.tsx
+================
+'use client';
+
+import styles from '@components/DropdownMenuTrigger.module.scss';
+
+import * as Position from '@common/position';
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import DropdownMenu from '@components/DropdownMenu';
+import OutsideElementEvent from '@components/detectors/OutsideElementEvent';
+
+import { createPortal } from 'react-dom';
+import { useHotkeys } from '@modules/hotkeys';
+
+interface DropdownMenuTriggerProps {
+  children: React.ReactElement<React.HTMLAttributes<HTMLElement>>;
+  items: any;
+  hotkey?: string;
+}
+
+function DropdownMenuTrigger({ children, items, hotkey }: DropdownMenuTriggerProps) {
+  const [open, setOpen] = React.useState(false);
+  const [focusChildren, setFocusChildren] = React.useState(false);
+  const [willClose, setWillClose] = React.useState(false);
+  const [placement, setPlacement] = React.useState<Position.Placement>('bottom');
+  const [position, setPosition] = React.useState<{ top: number; left: number }>({ top: 0, left: 0 });
+
+  const triggerRef = React.useRef<HTMLElement>(null);
+  const elementRef = React.useRef<HTMLDivElement>(null);
+
+  const onClick = React.useCallback((event: React.MouseEvent) => {
+    event.preventDefault();
+    setOpen(true);
+  }, []);
+
+  const onOutsideEvent = React.useCallback(() => setOpen(false), []);
+  const onClose = React.useCallback(() => setWillClose(true), []);
+
+  if (hotkey) {
+    useHotkeys(hotkey, () => {
+      setOpen(!open);
+    });
+  }
+
+  React.useEffect(() => {
+    if (focusChildren) {
+      const element = elementRef.current;
+      if (element) {
+        const firstFocusable = Utilities.findFocusableDescendant(element);
+        if (firstFocusable) {
+          firstFocusable.focus();
+        } else {
+          element.focus();
+        }
+      }
+      setFocusChildren(false);
+    }
+  }, [focusChildren]);
+
+  React.useEffect(() => {
+    if (willClose) {
+      setOpen(false);
+      setWillClose(false);
+    }
+  }, [willClose]);
+
+  React.useEffect(() => {
+    if (!open || !triggerRef.current || !elementRef.current) return;
+
+    const updatePosition = () => {
+      const { placement, position } = Position.calculate(triggerRef.current!, elementRef.current!);
+      setPlacement(placement);
+      setPosition(position);
+    };
+
+    updatePosition();
+    setFocusChildren(true);
+
+    const handleResizeOrScroll = () => updatePosition();
+    const observer = new MutationObserver(() => updatePosition());
+    observer.observe(document.body, { attributes: true, childList: true, subtree: true });
+
+    window.addEventListener('resize', handleResizeOrScroll);
+    window.addEventListener('scroll', handleResizeOrScroll, true);
+
+    return () => {
+      window.removeEventListener('resize', handleResizeOrScroll);
+      window.removeEventListener('scroll', handleResizeOrScroll, true);
+      observer.disconnect();
+    };
+  }, [open]);
+
+  const element = open
+    ? createPortal(
+        <OutsideElementEvent onOutsideEvent={onOutsideEvent}>
+          <DropdownMenu
+            onClose={onClose}
+            ref={elementRef}
+            items={items}
+            style={{
+              position: 'absolute',
+              top: `${position.top}px`,
+              left: `${position.left}px`,
+              zIndex: `var(--z-index-page-dropdown-menus)`,
+            }}
+            role="dialog"
+            aria-modal="true"
+          />
+        </OutsideElementEvent>,
+        document.body
+      )
+    : null;
+
+  return (
+    <div className={styles.root}>
+      {React.cloneElement(children, {
+        tabIndex: 0,
+        onClick,
+        // @ts-ignore
+        ref: triggerRef,
+      })}
+      {element}
+    </div>
+  );
+}
+
+export default DropdownMenuTrigger;
+
+================
+File: reference/components/Grid.module.scss
+================
+.grid {
+  display: block;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+}
+
+================
+File: reference/components/Grid.tsx
+================
+import styles from '@components/Grid.module.scss';
+
+import * as React from 'react';
+
+interface GridProps extends React.HTMLAttributes<HTMLDivElement> {
+  children?: React.ReactNode;
+}
+
+const Grid: React.FC<GridProps> = ({ children, ...rest }) => {
+  return (
+    <div className={styles.grid} {...rest}>
+      {children}
+    </div>
+  );
+};
+
+export default Grid;
+
+================
+File: reference/components/HoverComponentTrigger.module.scss
+================
+.root {
+  display: inline-block;
+  position: relative;
+}
+
+================
+File: reference/components/HoverComponentTrigger.tsx
+================
+'use client';
+
+import styles from '@components/HoverComponentTrigger.module.scss';
+
+import * as React from 'react';
+import * as Position from '@common/position';
+
+import OutsideElementEvent from '@components/detectors/OutsideElementEvent';
+import Popover from '@components/Popover';
+import Tooltip from '@components/Tooltip';
+
+import { createPortal } from 'react-dom';
+
+interface HoverComponentTriggerProps {
+  children: React.ReactElement<React.HTMLAttributes<HTMLElement>>;
+  text: string;
+  component: 'popover' | 'tooltip';
+}
+
+function HoverComponentTrigger({ children, text, component }: HoverComponentTriggerProps) {
+  const [open, setOpen] = React.useState(false);
+  const [placement, setPlacement] = React.useState<Position.Placement>('bottom');
+  const [position, setPosition] = React.useState<{ top: number; left: number }>({ top: 0, left: 0 });
+
+  const triggerRef = React.useRef<HTMLDivElement>(null);
+  const popoverRef = React.useRef<HTMLDivElement>(null);
+
+  const onMouseEnter = () => setOpen(true);
+  const onClick = () => setOpen(true);
+  const onHandleFocus = () => setOpen(true);
+  const onOutsideEvent = () => setOpen(false);
+
+  React.useEffect(() => {
+    if (!open || !triggerRef.current || !popoverRef.current) return;
+
+    const updatePosition = () => {
+      const { placement, position } = Position.calculate(triggerRef.current!, popoverRef.current!);
+      setPlacement(placement);
+      setPosition(position);
+    };
+
+    updatePosition();
+
+    const handleResizeOrScroll = () => updatePosition();
+
+    const mutationObserver = new MutationObserver(() => updatePosition());
+    mutationObserver.observe(document.body, { attributes: true, childList: true, subtree: true });
+
+    window.addEventListener('resize', handleResizeOrScroll);
+    window.addEventListener('scroll', handleResizeOrScroll, true);
+
+    return () => {
+      window.removeEventListener('resize', handleResizeOrScroll);
+      window.removeEventListener('scroll', handleResizeOrScroll, true);
+      mutationObserver.disconnect();
+    };
+  }, [open]);
+
+  const renderComponent = () => {
+    if (component === 'popover') {
+      return (
+        <Popover
+          ref={popoverRef}
+          style={{
+            position: 'absolute',
+            top: `${position.top}px`,
+            left: `${position.left}px`,
+            zIndex: `var(--z-index-page-popover)`,
+          }}
+          role="dialog"
+          aria-modal="true"
+        >
+          {text}
+        </Popover>
+      );
+    } else if (component === 'tooltip') {
+      return (
+        <Tooltip
+          ref={popoverRef}
+          style={{
+            position: 'absolute',
+            top: `${position.top}px`,
+            left: `${position.left}px`,
+            zIndex: `var(--z-index-page-tooltip)`,
+          }}
+        >
+          {text}
+        </Tooltip>
+      );
+    }
+    return null;
+  };
+
+  const popoverElement = open ? createPortal(<OutsideElementEvent onOutsideEvent={onOutsideEvent}>{renderComponent()}</OutsideElementEvent>, document.body) : null;
+
+  return (
+    <div ref={triggerRef} className={styles.root} data-detector-ignore onMouseEnter={onMouseEnter} onClick={onClick} onFocus={onHandleFocus}>
+      {React.cloneElement(children, {
+        tabIndex: 0,
+      })}
+      {popoverElement}
+    </div>
+  );
+}
+
+export default HoverComponentTrigger;
+
+================
+File: reference/components/Indent.module.scss
+================
+.root {
+  display: block;
+  padding: 0 0 0 1ch;
+}
+
+================
+File: reference/components/Indent.tsx
+================
+import styles from '@components/Indent.module.scss';
+
+import * as React from 'react';
+
+interface IndentProps extends React.HTMLAttributes<HTMLDivElement> {
+  children?: React.ReactNode;
+}
+
+const Indent: React.FC<IndentProps> = ({ children, ...rest }) => {
+  return (
+    <div className={styles.root} {...rest}>
+      {children}
+    </div>
+  );
+};
+
+export default Indent;
+
+================
+File: reference/components/Input.module.scss
+================
+.root {
+  position: relative;
+  display: block;
+}
+
+.label {
+  background: var(--theme-border);
+  display: block;
+}
+
+.placeholder {
+  font-style: italic;
+  color: var(--theme-overlay);
+}
+
+.displayed {
+  overflow: hidden;
+  white-space: nowrap;
+  pointer-events: none;
+  overflow-wrap: anywhere;
+  background: var(--theme-background-input);
+  box-shadow: inset 0 0 0 2px var(--theme-border);
+}
+
+.focused {
+  .block {
+    background: var(--theme-focused-foreground);
+  }
+
+  .placeholder {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+@keyframes blink {
+  50% {
+    opacity: 0;
+  }
+}
+
+.blink {
+  animation: blink 1s step-start 0s infinite;
+}
+
+.block {
+  display: inline-block;
+  min-width: 1ch;
+  background: var(--theme-text);
+  color: var(--theme-background);
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  vertical-align: bottom;
+}
+
+.inputContainer {
+  position: relative;
+  display: block;
+}
+
+.hidden {
+  position: absolute;
+  top: 0;
+  left: 0;
+  width: 100%;
+  color: transparent;
+  background: transparent;
+  caret-color: transparent;
+  border: none;
+  outline: none;
+  overflow: hidden;
+  padding: 0;
+  margin: 0;
+  line-height: var(--theme-line-height-base);
+  font-size: var(--font-size);
+  font-family: inherit;
+
+  &:-webkit-autofill {
+    -webkit-box-shadow: 0 0 0px 1000px var(--theme-focused-foreground) inset;
+  }
+}
+
+================
+File: reference/components/Input.tsx
+================
+'use client';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import styles from '@components/Input.module.scss';
+
+type InputProps = React.InputHTMLAttributes<HTMLInputElement> & {
+  caretChars?: string | any;
+  label?: string | any;
+  isBlink?: boolean;
+};
+
+function Input({ caretChars, isBlink = true, label, placeholder, onChange, type, id, ...rest }: InputProps) {
+  const generatedId = React.useId();
+  const inputId = id || generatedId;
+
+  const inputRef = React.useRef<HTMLInputElement | null>(null);
+  const [text, setText] = React.useState<string>(rest.defaultValue?.toString() || rest.value?.toString() || '');
+  const [isFocused, setIsFocused] = React.useState<boolean>(false);
+  const [selectionStart, setSelectionStart] = React.useState<number>(text.length);
+
+  const lastFocusDirectionRef = React.useRef<'up' | 'down' | null>(null);
+
+  React.useEffect(() => {
+    if (rest.value !== undefined) {
+      const val = rest.value.toString();
+      setText(val);
+      setSelectionStart(val.length);
+    }
+  }, [rest.value]);
+
+  const onHandleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
+    const value = e.target.value;
+    setText(value);
+    if (onChange) {
+      onChange(e);
+    }
+    setSelectionStart(e.target.selectionStart ?? value.length);
+  };
+
+  const onHandleFocus = () => {
+    setIsFocused(true);
+    if (!inputRef.current) return;
+
+    if (lastFocusDirectionRef.current === 'down') {
+      setSelectionStart(text.length);
+      inputRef.current.setSelectionRange(text.length, text.length);
+    } else if (lastFocusDirectionRef.current === 'up') {
+      setSelectionStart(0);
+      inputRef.current.setSelectionRange(0, 0);
+    }
+  };
+
+  const onHandleBlur = () => {
+    setIsFocused(false);
+  };
+
+  const onHandleSelect = (e: React.SyntheticEvent<HTMLInputElement>) => {
+    const inputEl = e.currentTarget as HTMLInputElement;
+    setSelectionStart(inputEl.selectionStart ?? text.length);
+  };
+
+  const onHandleClick = (e: React.MouseEvent<HTMLInputElement>) => {
+    const inputEl = e.currentTarget as HTMLInputElement;
+    inputEl.focus();
+    setSelectionStart(inputEl.selectionStart ?? text.length);
+  };
+
+  const onHandleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
+    if (e.key === 'ArrowUp') {
+      e.preventDefault();
+      lastFocusDirectionRef.current = 'up';
+      const previousFocusable = Utilities.findNextFocusable(document.activeElement, 'previous');
+      previousFocusable?.focus();
+    } else if (e.key === 'ArrowDown') {
+      e.preventDefault();
+      lastFocusDirectionRef.current = 'down';
+      const nextFocusable = Utilities.findNextFocusable(document.activeElement, 'next');
+      nextFocusable?.focus();
+    }
+  };
+
+  const isPlaceholderVisible = !text && placeholder;
+  const containerClasses = Utilities.classNames(styles.root, isFocused && styles.focused);
+
+  const maskText = (t: string) => (type === 'password' ? '•'.repeat(t.length) : t);
+
+  const beforeCaretText = isPlaceholderVisible ? placeholder ?? '' : maskText(text.substring(0, selectionStart));
+  const afterCaretText = isPlaceholderVisible ? '' : maskText(text.substring(selectionStart));
+
+  return (
+    <div className={containerClasses}>
+      {label && (
+        <label htmlFor={inputId} className={styles.label}>
+          {label}
+        </label>
+      )}
+      <div className={styles.inputContainer}>
+        <div className={Utilities.classNames(styles.displayed, isPlaceholderVisible && styles.placeholder)}>
+          {beforeCaretText}
+          {!isPlaceholderVisible && <span className={Utilities.classNames(styles.block, isBlink && styles.blink)}>{caretChars || ''}</span>}
+          {!isPlaceholderVisible && afterCaretText}
+        </div>
+        <input id={inputId} ref={inputRef} className={styles.hidden} value={text} aria-placeholder={placeholder} type={type} onFocus={onHandleFocus} onBlur={onHandleBlur} onChange={onHandleChange} onSelect={onHandleSelect} onClick={onHandleClick} onKeyDown={onHandleKeyDown} {...rest} />
+      </div>
+    </div>
+  );
+}
+
+export default Input;
+
+================
+File: reference/components/ListItem.module.scss
+================
+.root {
+  padding-left: 1ch;
+
+  &:focus {
+    outline: 0;
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/ListItem.tsx
+================
+'use client';
+
+import styles from '@components/ListItem.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+const ListItem = ({ children }) => {
+  const itemRef = React.useRef<HTMLLIElement>(null);
+
+  const handleKeyDown = (event: React.KeyboardEvent<HTMLLIElement>) => {
+    switch (event.key) {
+      case 'Enter':
+        event.preventDefault();
+        itemRef.current?.click();
+        break;
+      case 'ArrowUp':
+      case 'ArrowLeft': {
+        event.preventDefault();
+        const previousFocusable = Utilities.findNextFocusable(document.activeElement, 'previous');
+        previousFocusable?.focus();
+        break;
+      }
+      case 'ArrowDown':
+      case 'ArrowRight': {
+        event.preventDefault();
+        const nextFocusable = Utilities.findNextFocusable(document.activeElement, 'next');
+        nextFocusable?.focus();
+        break;
+      }
+      default:
+        break;
+    }
+  };
+
+  return (
+    <li className={styles.root} tabIndex={0} ref={itemRef} onKeyDown={handleKeyDown}>
+      {children}
+    </li>
+  );
+};
+
+export default ListItem;
+
+================
+File: reference/components/MatrixLoader.module.scss
+================
+.container {
+  width: 100%;
+  height: auto;
+  position: relative;
+}
+
+.root {
+  display: block;
+  width: 100%;
+  background: transparent;
+}
+
+================
+File: reference/components/MatrixLoader.tsx
+================
+'use client';
+
+import styles from '@components/MatrixLoader.module.scss';
+
+import * as React from 'react';
+
+interface MatrixLoaderProps {
+  rows?: number;
+  direction?: undefined | 'top-to-bottom' | 'left-to-right';
+  mode?: undefined | 'greek' | 'katakana';
+}
+
+// TODO(jimmylee)
+// Move these constants into a separate file
+// Dynamically compute these constants since we're going to
+// Support t-shirt sizes for the system.
+const LINE_HEIGHT = 20;
+const CHARACTER_WIDTH = 9.6;
+
+function onTextGeneration({ mode = 'greek' }) {
+  if (mode === 'greek') {
+    const isUppercase = Math.random() < 0.5;
+
+    return String.fromCharCode(isUppercase ? 0x0391 + Math.floor(Math.random() * (0x03a9 - 0x0391 + 1)) : 0x03b1 + Math.floor(Math.random() * (0x03c9 - 0x03b1 + 1)));
+  }
+
+  if (mode === 'katakana') {
+    const japaneseRanges = [{ start: 0x30a0, end: 0x30ff }];
+
+    const allJapaneseCharacters = japaneseRanges.flatMap((range) => Array.from({ length: range.end - range.start + 1 }, (_, i) => range.start + i));
+
+    const randomJapaneseCharacter = allJapaneseCharacters[Math.floor(Math.random() * allJapaneseCharacters.length)];
+    return String.fromCharCode(randomJapaneseCharacter);
+  }
+
+  return '0';
+}
+
+const MatrixLoader: React.FC<MatrixLoaderProps> = ({ rows = 25, direction = 'top-to-bottom', mode = 'greek' }) => {
+  const canvasRef = React.useRef<HTMLCanvasElement>(null);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const parent = canvas.parentElement;
+    if (!parent) return;
+
+    const resizeCanvas = () => {
+      const parentWidth = parent.clientWidth;
+      const parentHeight = rows * LINE_HEIGHT;
+
+      const dpr = window.devicePixelRatio || 1;
+
+      canvas.style.width = parentWidth + 'px';
+      canvas.style.height = parentHeight + 'px';
+      canvas.width = Math.floor(parentWidth * dpr);
+      canvas.height = Math.floor(parentHeight * dpr);
+
+      const ctx = canvas.getContext('2d');
+      if (ctx) {
+        ctx.scale(dpr, dpr);
+      }
+    };
+
+    resizeCanvas();
+
+    window.addEventListener('resize', resizeCanvas);
+
+    return () => {
+      window.removeEventListener('resize', resizeCanvas);
+    };
+  }, [rows]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+    const ctx = canvas.getContext('2d');
+    if (!ctx) return;
+
+    let interval: number;
+
+    const drawMatrix = () => {
+      const w = canvas.width;
+      const h = canvas.height;
+
+      if (direction === 'top-to-bottom') {
+        const cols = Math.floor(w / CHARACTER_WIDTH);
+        const ypos: number[] = Array(cols).fill(0);
+
+        const matrix = () => {
+          const themeTextColor = getComputedStyle(document.body).getPropertyValue('--theme-text').trim();
+          const fontFamily = getComputedStyle(document.body).getPropertyValue('--font-family-mono').trim();
+
+          ctx.globalCompositeOperation = 'destination-out';
+          ctx.fillStyle = 'rgba(255, 255, 255, 0.05)';
+          ctx.fillRect(0, 0, w, h);
+          ctx.textBaseline = 'top';
+          ctx.font = `16px ${fontFamily}`;
+
+          ctx.globalCompositeOperation = 'source-over';
+
+          ypos.forEach((y, ind) => {
+            const text = onTextGeneration({ mode });
+            const x = ind * CHARACTER_WIDTH;
+
+            ctx.fillStyle = themeTextColor;
+            ctx.fillText(text, x, y);
+
+            if (y > h + Math.random() * 10000) {
+              ypos[ind] = 0;
+            } else {
+              ypos[ind] = y + LINE_HEIGHT;
+            }
+          });
+        };
+
+        interval = window.setInterval(matrix, 50);
+      } else if (direction === 'left-to-right') {
+        const totalRows = rows; // Use rows directly for total rows
+        const xpos: number[] = Array(totalRows).fill(0);
+
+        const matrix = () => {
+          const themeTextColor = getComputedStyle(document.body).getPropertyValue('--theme-text').trim();
+          const fontFamily = getComputedStyle(document.body).getPropertyValue('--font-family-mono').trim();
+
+          ctx.globalCompositeOperation = 'destination-out';
+          ctx.fillStyle = 'rgba(255, 255, 255, 0.05)';
+          ctx.fillRect(0, 0, w, h);
+          ctx.textBaseline = 'top';
+          ctx.font = `16px ${fontFamily}`;
+
+          ctx.globalCompositeOperation = 'source-over';
+
+          xpos.forEach((x, ind) => {
+            const text = onTextGeneration({ mode });
+            const y = ind * LINE_HEIGHT;
+
+            ctx.fillStyle = themeTextColor;
+            ctx.fillText(text, x, y);
+
+            if (x > w + Math.random() * 10000) {
+              xpos[ind] = 0;
+            } else {
+              xpos[ind] = x + CHARACTER_WIDTH;
+            }
+          });
+        };
+
+        interval = window.setInterval(matrix, 50);
+      }
+    };
+
+    drawMatrix();
+
+    return () => {
+      window.clearInterval(interval);
+    };
+  }, [rows, direction, mode]);
+
+  return (
+    <div className={styles.container}>
+      <canvas className={styles.root} ref={canvasRef} />
+    </div>
+  );
+};
+
+export default MatrixLoader;
+
+================
+File: reference/components/Message.module.scss
+================
+.message {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+  margin-bottom: calc(var(--font-size) * var(--theme-line-height-base));
+
+  &:last-child {
+    margin-bottom: 0px;
+  }
+}
+
+.left {
+  align-self: stretch;
+  flex-shrink: 0;
+  display: flex;
+  align-items: flex-end;
+  position: relative;
+}
+
+.triangle {
+  display: inline-block;
+  width: 0;
+  height: 0;
+  border-top: calc((var(--font-size) * var(--theme-line-height-base)) / 2) solid transparent;
+  border-bottom: calc((var(--font-size) * var(--theme-line-height-base)) / 2) solid transparent;
+  border-right: 1ch solid var(--theme-border);
+  margin-bottom: calc((var(--font-size) * var(--theme-line-height-base)) / 2);
+}
+
+.right {
+  min-width: 10%;
+  width: 100%;
+  text-align: left;
+}
+
+.bubble {
+  padding: calc(8px * var(--theme-line-height-base)) 1ch calc(8px * var(--theme-line-height-base)) 1ch;
+  background: var(--theme-border);
+  display: inline-block;
+  box-shadow: 1ch 1ch 0 0 var(--theme-border-subdued);
+}
+
+================
+File: reference/components/Message.tsx
+================
+import styles from '@components/Message.module.scss';
+
+export default function Message(props) {
+  return (
+    <div className={styles.message}>
+      <div className={styles.left}>
+        <figure className={styles.triangle} />
+      </div>
+      <div className={styles.right}>
+        <div className={styles.bubble}>{props.children}</div>
+      </div>
+    </div>
+  );
+}
+
+================
+File: reference/components/MessageViewer.module.scss
+================
+.message {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+  margin-bottom: calc(var(--font-size) * var(--theme-line-height-base));
+}
+
+.bubble {
+  display: inline-block;
+  background: var(--theme-focused-foreground);
+  padding: calc(8px * var(--theme-line-height-base)) 1ch calc(8px * var(--theme-line-height-base)) 1ch;
+}
+
+.left {
+  min-width: 10%;
+  width: 100%;
+  text-align: right;
+}
+
+.right {
+  align-self: stretch;
+  flex-shrink: 0;
+  display: flex;
+  align-items: flex-end;
+}
+
+.triangle {
+  display: inline-block;
+  width: 0;
+  height: 0;
+  border-top: calc((var(--font-size) * var(--theme-line-height-base)) / 2) solid transparent;
+  border-bottom: calc((var(--font-size) * var(--theme-line-height-base)) / 2) solid transparent;
+  border-left: 1ch solid var(--theme-focused-foreground);
+  margin-bottom: calc((var(--font-size) * var(--theme-line-height-base)) / 2);
+}
+
+================
+File: reference/components/MessageViewer.tsx
+================
+import styles from '@components/MessageViewer.module.scss';
+
+export default function MessageViewer(props) {
+  return (
+    <div className={styles.message}>
+      <div className={styles.left}>
+        <div className={styles.bubble}>{props.children}</div>
+      </div>
+      <div className={styles.right}>
+        <figure className={styles.triangle} />
+      </div>
+    </div>
+  );
+}
+
+================
+File: reference/components/ModalStack.module.scss
+================
+.root {
+  align-items: center;
+  bottom: 0;
+  display: flex;
+  justify-content: center;
+  left: 0;
+  pointer-events: none;
+  position: fixed;
+  right: 0;
+  top: 0;
+  z-index: var(--z-index-page-modals);
+}
+
+.item {
+  pointer-events: auto;
+  position: absolute;
+  transition:
+    opacity 0.2s ease,
+    transform 0.4s ease;
+}
+
+================
+File: reference/components/ModalStack.tsx
+================
+'use client';
+
+import styles from '@components/ModalStack.module.scss';
+
+import * as React from 'react';
+
+import { useModals } from '@components/page/ModalContext';
+
+interface ModalStackProps {}
+
+const ModalStack: React.FC<ModalStackProps> = () => {
+  const { modalStack } = useModals();
+
+  const totalModals = modalStack.length;
+
+  return (
+    <div className={styles.root}>
+      {modalStack.map((modalState, index) => {
+        const { key, component: ModalComponent, props } = modalState;
+
+        const offsetFromLast = totalModals - 1 - index;
+        const translateY = -offsetFromLast * 40;
+        const blur = offsetFromLast * 1.1;
+
+        return (
+          <div
+            key={key}
+            className={styles.item}
+            style={{
+              zIndex: 10 + index,
+              transform: `translateY(${translateY}px)`,
+              filter: `blur(${blur}px)`,
+            }}
+          >
+            <ModalComponent {...props} />
+          </div>
+        );
+      })}
+    </div>
+  );
+};
+
+export default ModalStack;
+
+================
+File: reference/components/ModalTrigger.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+import { useModals } from '@components/page/ModalContext';
+
+interface ModalTriggerProps {
+  children: React.ReactElement<{ onClick?: React.MouseEventHandler }>;
+  modal: React.ComponentType<any>;
+  modalProps?: Record<string, any>;
+}
+
+function ModalTrigger({ children, modal, modalProps = {} }: ModalTriggerProps) {
+  const { open } = useModals();
+
+  const onHandleOpenModal = () => {
+    open(modal, modalProps);
+  };
+
+  return React.cloneElement(children, {
+    onClick: onHandleOpenModal,
+  });
+}
+
+export default ModalTrigger;
+
+================
+File: reference/components/Navigation.module.scss
+================
+.root {
+  display: flex;
+  align-items: center;
+  justify-content: space-between;
+  background: var(--theme-border);
+}
+
+.logo {
+  flex-shrink: 0;
+  padding: 0 1ch 0 1ch;
+  display: inline-flex;
+  color: var(--theme-text);
+  background: var(--theme-border);
+  text-decoration: none;
+  border: 0;
+  outline: 0;
+  border-radius: 0;
+  margin: 0;
+  font-size: var(--font-size);
+
+  &:visited {
+    color: var(--theme-text);
+  }
+
+  &:hover {
+    color: var(--theme-text);
+    background: var(--theme-focused-foreground);
+  }
+
+  &:focus {
+    outline: 0;
+    border: 0;
+    margin: 0;
+    padding: 0 1ch 0 1ch;
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.left {
+  flex-shrink: 0;
+}
+
+.children {
+  min-width: 10%;
+  width: 100%;
+}
+
+.right {
+  flex-shrink: 0;
+}
+
+================
+File: reference/components/Navigation.tsx
+================
+'use client';
+
+import styles from '@components/Navigation.module.scss';
+
+import * as React from 'react';
+
+interface NavigationProps extends React.HTMLAttributes<HTMLElement> {
+  children?: React.ReactNode;
+  logoHref?: string;
+  logoTarget?: React.HTMLAttributeAnchorTarget;
+  onClickLogo?: React.MouseEventHandler<HTMLButtonElement>;
+  logo?: React.ReactNode;
+  left?: React.ReactNode;
+  right?: React.ReactNode;
+}
+
+const Navigation: React.FC<NavigationProps> = ({ children, logoHref, logoTarget, onClickLogo, logo, left, right }) => {
+  let logoElement = <button className={styles.logo}>{logo}</button>;
+
+  if (onClickLogo) {
+    logoElement = (
+      <button className={styles.logo} onClick={onClickLogo}>
+        {logo}
+      </button>
+    );
+  }
+
+  if (logoHref) {
+    logoElement = (
+      <a href={logoHref} className={styles.logo} target={logoTarget}>
+        {logo}
+      </a>
+    );
+  }
+
+  return (
+    <nav className={styles.root}>
+      {logoElement}
+      <section className={styles.left}>{left}</section>
+      <section className={styles.children}>{children}</section>
+      <section className={styles.right}>{right}</section>
+    </nav>
+  );
+};
+
+export default Navigation;
+
+================
+File: reference/components/NumberRangeSlider.module.scss
+================
+.root {
+  display: flex;
+  align-items: center;
+  justify-content: space-between;
+}
+
+.amount {
+  flex-shrink: 0;
+  background: var(--theme-text);
+  color: var(--theme-background);
+  font-weight: 400;
+  padding: 0 1ch 0 1ch;
+}
+
+.slider {
+  border-radius: 0;
+  display: block;
+  margin: 0;
+  padding: 0;
+  width: 100%;
+  min-width: 10%;
+
+  -webkit-appearance: none;
+  -moz-appearance: none;
+  appearance: none;
+
+  background: var(--theme-border-subdued);
+
+  &:focus {
+    background: linear-gradient(to right, transparent, var(--theme-focused-foreground));
+    outline: none;
+  }
+
+  &:hover {
+    background: linear-gradient(to right, transparent, var(--theme-focused-foreground));
+    cursor: pointer;
+  }
+
+  &::-webkit-slider-thumb {
+    -webkit-appearance: none;
+    appearance: none;
+    font-size: var(--font-size);
+    width: 1ch;
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: var(--theme-button-foreground);
+    vertical-align: bottom;
+    cursor: pointer;
+    border-radius: 0;
+  }
+
+  /* Customizing the track */
+  &::-webkit-slider-runnable-track {
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: var(--theme-border-subdued);
+    border-radius: 0;
+  }
+
+  &::-moz-range-thumb {
+    -moz-appearance: none;
+    appearance: none;
+    font-size: var(--font-size);
+    width: 1ch;
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: var(--theme-button-foreground);
+    vertical-align: bottom;
+    cursor: pointer;
+    border: none;
+    border-radius: 0;
+  }
+
+  &::-moz-range-track {
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: var(--theme-border-subdued);
+    border-radius: 0;
+  }
+
+  &::-ms-thumb {
+    appearance: none;
+    font-size: var(--font-size);
+    width: 1ch;
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: var(--theme-button-foreground);
+    vertical-align: bottom;
+    cursor: pointer;
+    border: none;
+    border-radius: 0;
+  }
+
+  &::-ms-track {
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: transparent;
+    border-color: transparent;
+    color: transparent;
+  }
+
+  &::-ms-fill-lower {
+    background: var(--theme-border-subdued);
+  }
+
+  &::-ms-fill-upper {
+    background: var(--theme-border-subdued);
+  }
+}
+
+================
+File: reference/components/NumberRangeSlider.tsx
+================
+'use client';
+
+import styles from '@components/NumberRangeSlider.module.scss';
+
+import * as React from 'react';
+
+interface RangerProps {
+  defaultValue?: number;
+  max?: number;
+  min?: number;
+  step?: number;
+}
+
+const NumberRangeSlider: React.FC<RangerProps> = ({ defaultValue = 0, max = 5000, min = 0, step = 1 }) => {
+  const sliderRef = React.useRef<HTMLInputElement>(null);
+  const [displayValue, setDisplayValue] = React.useState<number>(defaultValue);
+
+  const maxDigits = max.toString().length;
+
+  const padValue = (value: number): string => {
+    return value.toString().padStart(maxDigits, '0');
+  };
+
+  React.useEffect(() => {
+    if (sliderRef.current) {
+      sliderRef.current.value = String(defaultValue);
+    }
+    setDisplayValue(defaultValue);
+  }, [defaultValue]);
+
+  const scrub = (event: React.ChangeEvent<HTMLInputElement>): void => {
+    const value = parseInt(event.target.value, 10);
+    setDisplayValue(value);
+  };
+
+  return (
+    <div className={styles.root}>
+      <label className={styles.left}>
+        <div className={styles.amount}>{padValue(displayValue)}</div>
+      </label>
+      <input className={styles.slider} defaultValue={defaultValue} max={max} min={min} onChange={scrub} ref={sliderRef} role="slider" step={step} tabIndex={0} type="range" />
+    </div>
+  );
+};
+
+export default NumberRangeSlider;
+
+================
+File: reference/components/Popover.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  font-weight: 400;
+}
+
+================
+File: reference/components/Popover.tsx
+================
+import styles from '@components/Popover.module.scss';
+
+import * as React from 'react';
+
+interface PopoverProps extends React.HTMLAttributes<HTMLDivElement> {}
+
+const Popover = React.forwardRef<HTMLDivElement, PopoverProps>(({ style: propStyle, ...rest }, ref) => {
+  const style: React.CSSProperties = { ...propStyle };
+
+  return <div ref={ref} className={styles.root} {...rest} style={style} />;
+});
+
+Popover.displayName = 'Popover';
+
+export default Popover;
+
+================
+File: reference/components/Providers.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+import { ModalProvider } from '@components/page/ModalContext';
+
+interface ProvidersProps {
+  children: React.ReactNode;
+}
+
+const Providers: React.FC<ProvidersProps> = ({ children }) => {
+  return <ModalProvider>{children}</ModalProvider>;
+};
+
+export default Providers;
+
+================
+File: reference/components/RadioButton.module.scss
+================
+.section {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+  position: relative;
+
+  .right {
+    padding-bottom: calc(8px * var(--theme-line-height-base));
+    box-shadow: inset 0 1px 0 0 var(--theme-border-subdued);
+  }
+
+  &:last-child {
+    .right {
+      padding-bottom: 0;
+    }
+  }
+}
+
+.figure {
+  display: inline-flex;
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  cursor: pointer;
+  color: var(--theme-text);
+  background: var(--theme-button-foreground);
+  width: 3ch;
+  align-items: center;
+  justify-content: center;
+}
+
+.selected {
+  .figure {
+    background: var(--theme-text);
+  }
+}
+
+.dot {
+  display: inline-block;
+  width: 1ch;
+  height: 1ch;
+  background: var(--theme-background);
+  transform: rotate(45deg);
+  vertical-align: middle;
+}
+
+.focused {
+  .figure {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.relative {
+  flex-shrink: 0;
+  display: inline-block;
+  vertical-align: baseline;
+}
+
+.right {
+  background: var(--theme-button-background);
+  min-width: 10%;
+  width: 100%;
+  align-self: stretch;
+}
+
+.input {
+  position: absolute;
+  height: 1px;
+  width: 1px;
+  opacity: 0;
+  background: transparent;
+  border: 0;
+  outline: 0;
+  margin: 0;
+  padding: 0;
+}
+
+================
+File: reference/components/RadioButton.tsx
+================
+import styles from '@components/RadioButton.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface RadioButtonProps {
+  style?: React.CSSProperties;
+  name: string;
+  value: string;
+  selected?: boolean;
+  onSelect?: (value: string) => void;
+  children?: React.ReactNode;
+}
+
+const RadioButton: React.FC<RadioButtonProps> = ({ style, name, value, selected = false, onSelect, children }) => {
+  const radioId = `${name}-${value}-radio`;
+  const [isFocused, setIsFocused] = React.useState(false);
+
+  const handleFocus = () => setIsFocused(true);
+  const handleBlur = () => setIsFocused(false);
+
+  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
+    switch (event.key) {
+      case 'Enter':
+        event.preventDefault();
+        onSelect?.(value);
+        break;
+      case 'ArrowUp':
+      case 'ArrowLeft':
+        event.preventDefault();
+        Utilities.findNextFocusable(document.activeElement, 'previous')?.focus();
+        break;
+      case 'Tab':
+      case 'ArrowDown':
+      case 'ArrowRight':
+        event.preventDefault();
+        Utilities.findNextFocusable(document.activeElement, 'next')?.focus();
+        break;
+      default:
+        break;
+    }
+  };
+
+  const handleChange = () => {
+    onSelect?.(value);
+  };
+
+  return (
+    <div
+      className={Utilities.classNames(styles.section, {
+        [styles.focused]: isFocused,
+        [styles.selected]: selected,
+      })}
+      style={style}
+    >
+      <input className={styles.input} id={radioId} type="radio" name={name} value={value} checked={selected} onFocus={handleFocus} onBlur={handleBlur} onKeyDown={handleKeyDown} onChange={handleChange} />
+      <div className={styles.relative}>
+        <label className={styles.figure} htmlFor={radioId}>
+          {selected ? <span aria-hidden="true" className={styles.dot} /> : null}
+        </label>
+      </div>
+      <div className={styles.right}>&nbsp;&nbsp;{children}</div>
+    </div>
+  );
+};
+
+export default RadioButton;
+
+================
+File: reference/components/RadioButtonGroup.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+import RadioButton from '@components/RadioButton';
+
+interface RadioButtonGroupProps {
+  options: { value: string; label: string }[];
+  defaultValue?: string;
+}
+
+const RadioButtonGroup: React.FC<RadioButtonGroupProps> = ({ options, defaultValue = '' }) => {
+  const [selectedValue, setSelectedValue] = React.useState<string>(defaultValue);
+
+  const handleSelect = (value: string) => {
+    setSelectedValue(value);
+  };
+
+  return (
+    <>
+      {options.map((option) => (
+        <RadioButton key={option.value} name="example" value={option.value} selected={selectedValue === option.value} onSelect={handleSelect}>
+          {option.label}
+        </RadioButton>
+      ))}
+    </>
+  );
+};
+
+export default RadioButtonGroup;
+
+================
+File: reference/components/Row.module.scss
+================
+.row {
+  display: block;
+  outline: 0;
+  border: 0;
+  transition: 200ms ease background;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/Row.tsx
+================
+'use client';
+
+import styles from '@components/Row.module.scss';
+
+import * as React from 'react';
+
+type RowProps = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const Row = React.forwardRef<HTMLElement, RowProps>(({ children, ...rest }, ref) => {
+  return (
+    <section className={styles.row} ref={ref} {...rest}>
+      {children}
+    </section>
+  );
+});
+
+Row.displayName = 'Row';
+
+export default Row;
+
+================
+File: reference/components/RowEllipsis.module.scss
+================
+.row {
+  display: block;
+  outline: 0;
+  border: 0;
+  transition: 200ms ease background;
+  white-space: nowrap;
+  overflow: hidden;
+  text-overflow: ellipsis;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/RowEllipsis.tsx
+================
+'use client';
+
+import styles from '@components/RowEllipsis.module.scss';
+
+import * as React from 'react';
+
+type RowEllipsisProps = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const RowEllipsis = React.forwardRef<HTMLElement, RowEllipsisProps>(({ children, ...rest }, ref) => {
+  return (
+    <section className={styles.row} ref={ref} {...rest}>
+      {children}
+    </section>
+  );
+});
+
+RowEllipsis.displayName = 'RowEllipsis';
+
+export default RowEllipsis;
+
+================
+File: reference/components/RowSpaceBetween.module.scss
+================
+.row {
+  display: flex;
+  justify-content: space-between;
+  outline: 0;
+  border: 0;
+  transition: 200ms ease background;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/RowSpaceBetween.tsx
+================
+'use client';
+
+import styles from '@components/RowSpaceBetween.module.scss';
+
+import * as React from 'react';
+
+type RowSpaceBetweenProps = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const RowSpaceBetween = React.forwardRef<HTMLElement, RowSpaceBetweenProps>(({ children, ...rest }, ref) => {
+  return (
+    <section className={styles.row} ref={ref} {...rest}>
+      {children}
+    </section>
+  );
+});
+
+RowSpaceBetween.displayName = 'RowSpaceBetween';
+
+export default RowSpaceBetween;
+
+================
+File: reference/components/Select.module.scss
+================
+.select {
+  align-items: flex-start;
+  cursor: default;
+  display: flex;
+  justify-content: space-between;
+  outline: none;
+  position: relative;
+  z-index: var(--z-index-page-select);
+}
+
+.control {
+  align-self: stretch;
+  background: var(--theme-button-foreground);
+  cursor: pointer;
+  flex-shrink: 0;
+  padding: 0 1ch 0 1ch;
+
+  &.focused {
+    background: var(--theme-text);
+    color: var(--theme-background);
+  }
+}
+
+.display {
+  background: var(--theme-border);
+  border: 0;
+  color: var(--theme-text);
+  cursor: pointer;
+  font-family: var(--font-family-mono);
+  font-size: var(--font-size);
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+  margin: 0;
+  min-width: 10%;
+  outline: 0;
+  padding: 0;
+  padding-left: 3ch;
+  text-align: left;
+  user-select: none;
+  width: 100%;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    border: 0;
+    outline: 0;
+  }
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.menu {
+  background-color: var(--theme-border-subdued);
+  left: 3ch;
+  list-style-type: none;
+  padding: 0;
+  right: 0;
+  z-index: var(--z-index-page-select);
+}
+
+.item {
+  border: 0;
+  cursor: pointer;
+  outline: 0;
+  padding-left: 6ch;
+  user-select: none;
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    border: 0;
+    outline: 0;
+  }
+}
+
+================
+File: reference/components/Select.tsx
+================
+'use client';
+
+import styles from '@components/Select.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface SelectProps {
+  name: string;
+  options: string[];
+  placeholder?: string;
+  defaultValue?: string;
+  onChange?: (selectedValue: string) => void;
+}
+
+const Select: React.FC<SelectProps> = ({ name, options, placeholder, defaultValue = '', onChange }) => {
+  const [isOpen, setIsOpen] = React.useState(false);
+  const [index, setIndex] = React.useState(-1);
+  const [selectedValue, setSelectedValue] = React.useState(defaultValue);
+
+  const containerRef = React.useRef<HTMLButtonElement | null>(null);
+
+  const handleOpen = () => {
+    setIsOpen(true);
+    const currentIndex = options.indexOf(selectedValue);
+    setIndex(currentIndex >= 0 ? currentIndex : 0);
+  };
+
+  const handleClose = () => {
+    setIsOpen(false);
+    setIndex(-1);
+
+    if (containerRef && containerRef.current) {
+      containerRef.current?.focus();
+    }
+  };
+
+  const handleSelect = (value: string) => {
+    setSelectedValue(value);
+    onChange?.(value);
+    handleClose();
+  };
+
+  return (
+    <>
+      <section className={styles.select}>
+        <figure
+          className={Utilities.classNames(isOpen ? styles.focused : null, styles.control)}
+          onClick={() => {
+            isOpen ? handleClose() : handleOpen();
+          }}
+        >
+          ▼
+        </figure>
+        <button
+          className={styles.display}
+          ref={containerRef}
+          tabIndex={0}
+          onClick={() => {
+            isOpen ? handleClose() : handleOpen();
+          }}
+          aria-haspopup="listbox"
+          aria-expanded={isOpen}
+        >
+          {selectedValue || placeholder}
+        </button>
+      </section>
+
+      {isOpen && (
+        <ul className={styles.menu} role="listbox">
+          {options.map((option, idx) => {
+            return (
+              <li key={option} role="option" tabIndex={0} className={Utilities.classNames(styles.item)} onClick={() => handleSelect(option)}>
+                {option}
+              </li>
+            );
+          })}
+        </ul>
+      )}
+    </>
+  );
+};
+
+export default Select;
+
+================
+File: reference/components/SidebarLayout.module.scss
+================
+.root {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+  white-space: pre-wrap;
+}
+
+.sidebar {
+  align-self: stretch;
+  flex-shrink: 0;
+  width: 20ch;
+}
+
+.handle {
+  align-self: stretch;
+  flex-shrink: 0;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  width: 3ch;
+  outline: 0;
+  border: 0;
+  cursor: col-resize;
+
+  &:hover {
+    .line {
+      background: var(--theme-focused-foreground);
+    }
+  }
+
+  &:focus {
+    outline: 0;
+    border: 0;
+
+    .line {
+      background: var(--theme-focused-foreground);
+    }
+  }
+}
+
+.line {
+  align-self: stretch;
+  width: 2px;
+  background: var(--theme-text);
+
+  &:first-child {
+    margin-left: 1px;
+    margin-right: 2px;
+  }
+}
+
+.content {
+  min-width: 10%;
+  width: 100%;
+}
+
+================
+File: reference/components/SidebarLayout.tsx
+================
+'use client';
+
+import styles from '@components/SidebarLayout.module.scss';
+import * as React from 'react';
+
+interface SidebarLayoutProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'defaultValue'> {
+  children?: React.ReactNode;
+  sidebar?: React.ReactNode;
+  defaultSidebarWidth?: number;
+  isShowingHandle?: boolean;
+  isReversed?: boolean;
+}
+
+const LINE_HEIGHT = 20;
+const CHARACTER_WIDTH = 9.6;
+
+const SidebarLayout: React.FC<SidebarLayoutProps> = ({ defaultSidebarWidth = 20, children, sidebar, isShowingHandle = false, isReversed = false, ...rest }) => {
+  const [sidebarWidth, setSidebarWidth] = React.useState(defaultSidebarWidth);
+  const handleRef = React.useRef<HTMLDivElement>(null);
+
+  const handleMouseDown = (event: React.MouseEvent<HTMLDivElement>) => {
+    const startX = event.clientX;
+    const startWidth = sidebarWidth;
+
+    const onMouseMove = (moveEvent: MouseEvent) => {
+      const deltaX = moveEvent.clientX - startX;
+      const increment = Math.round(deltaX / CHARACTER_WIDTH);
+      setSidebarWidth(Math.max(CHARACTER_WIDTH, startWidth + increment));
+    };
+
+    const onMouseUp = () => {
+      document.removeEventListener('mousemove', onMouseMove);
+      document.removeEventListener('mouseup', onMouseUp);
+    };
+
+    document.addEventListener('mousemove', onMouseMove);
+    document.addEventListener('mouseup', onMouseUp);
+  };
+
+  if (isReversed) {
+    return (
+      <div className={styles.root} {...rest}>
+        <div className={styles.content}>{children}</div>
+        &nbsp;
+        <div
+          className={styles.sidebar}
+          style={{
+            width: `${sidebarWidth}ch`,
+          }}
+        >
+          {sidebar}
+        </div>
+      </div>
+    );
+  }
+
+  return (
+    <div className={styles.root} {...rest}>
+      <div
+        className={styles.sidebar}
+        style={{
+          width: `${sidebarWidth}ch`,
+        }}
+      >
+        {sidebar}
+      </div>
+      {isShowingHandle ? (
+        <div className={styles.handle} ref={handleRef} role="button" tabIndex={0} onMouseDown={handleMouseDown} style={isShowingHandle ? {} : { width: `0.5ch` }}>
+          <>
+            <div className={styles.line} />
+            <div className={styles.line} />
+          </>
+        </div>
+      ) : null}
+      <div className={styles.content}>{children}</div>
+    </div>
+  );
+};
+
+export default SidebarLayout;
+
+================
+File: reference/components/Table.module.scss
+================
+.root {
+  border: 0;
+  outline: 0;
+  margin: 0;
+  padding: 0;
+  position: relative;
+  width: 100%;
+  border-spacing: 0px;
+  -webkit-text-size-adjust: 100%;
+}
+
+.body {
+}
+
+================
+File: reference/components/Table.tsx
+================
+'use client';
+
+import styles from '@components/Table.module.scss';
+
+import * as React from 'react';
+
+type TableProps = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const Table = ({ children, ...rest }) => {
+  return (
+    <table className={styles.root} {...rest}>
+      <tbody className={styles.body}>{children}</tbody>
+    </table>
+  );
+};
+
+Table.displayName = 'Table';
+
+export default Table;
+
+================
+File: reference/components/TableColumn.module.scss
+================
+.root {
+  border: 0;
+  outline: 0;
+  margin: 0;
+  padding: 0;
+  transition: background-color 0.5s ease;
+  padding-left: 1ch;
+  font-size: var(--font-size);
+  flex-shrink: 0;
+  -webkit-text-size-adjust: 100%;
+
+  &:first-child {
+    padding-left: 0px;
+  }
+}
+
+================
+File: reference/components/TableColumn.tsx
+================
+'use client';
+
+import styles from '@components/TableColumn.module.scss';
+
+import * as React from 'react';
+
+type TableColumnProps = React.HTMLAttributes<HTMLTableCellElement> & {
+  children?: React.ReactNode;
+};
+
+const TableColumn: React.FC<TableColumnProps> = ({ children, ...rest }) => {
+  return (
+    <td className={styles.root} {...rest}>
+      {children}
+    </td>
+  );
+};
+
+TableColumn.displayName = 'TableColumn';
+
+export default TableColumn;
+
+================
+File: reference/components/TableRow.module.scss
+================
+.root {
+  border: 0;
+  outline: 0;
+  margin: 0;
+  padding: 0;
+
+  transition: transform 0.5s ease;
+  border-spacing: 0px;
+  -webkit-text-size-adjust: 100%;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    outline: 0;
+  }
+}
+
+================
+File: reference/components/TableRow.tsx
+================
+'use client';
+
+import styles from '@components/TableRow.module.scss';
+
+import * as React from 'react';
+
+type TableRowProps = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const TableRow = ({ children, ...rest }) => {
+  return (
+    <tr className={styles.root} tabIndex={0} {...rest}>
+      {children}
+    </tr>
+  );
+};
+
+TableRow.displayName = 'TableRow';
+
+export default TableRow;
+
+================
+File: reference/components/Text.module.scss
+================
+.text {
+  white-space: pre-wrap;
+  overflow-wrap: break-word;
+}
+
+================
+File: reference/components/Text.tsx
+================
+import styles from '@components/Text.module.scss';
+
+import * as React from 'react';
+
+interface TextProps extends React.HTMLAttributes<HTMLParagraphElement> {
+  children?: React.ReactNode;
+}
+
+const Text: React.FC<TextProps> = ({ children, ...rest }) => {
+  return (
+    <p className={styles.text} {...rest}>
+      {children}
+    </p>
+  );
+};
+
+export default Text;
+
+================
+File: reference/components/TextArea.module.scss
+================
+.root {
+  position: relative;
+}
+
+.placeholder {
+  opacity: 0.7;
+  font-style: italic;
+}
+
+.displayed {
+  white-space: pre-wrap;
+  word-wrap: break-word;
+  pointer-events: none;
+  overflow-wrap: anywhere;
+}
+
+.hidden {
+  white-space: pre-wrap;
+  word-wrap: break-word;
+  pointer-events: none;
+  overflow-wrap: anywhere;
+  position: absolute;
+  visibility: hidden;
+  width: 100%;
+  overflow: auto;
+}
+
+.focused {
+  .block {
+    background: var(--theme-focused-foreground);
+  }
+
+  .placeholder {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+@keyframes blink {
+  50% {
+    opacity: 0;
+  }
+}
+
+.blink {
+  animation: blink 1s step-start 0s infinite;
+}
+
+.block {
+  display: inline-block;
+  min-width: 1ch;
+  background: var(--theme-text);
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  vertical-align: bottom;
+}
+
+.hiddenElement {
+  position: absolute;
+  top: 0;
+  left: 0;
+  width: 100%;
+  height: 100%;
+  color: transparent;
+  background: transparent;
+  caret-color: transparent;
+  border: none;
+  resize: none;
+  outline: none;
+  overflow: hidden;
+  padding: 0;
+  margin: 0;
+  line-height: var(--theme-line-height-base);
+  font-size: var(--font-size);
+  font-family: inherit;
+}
+
+================
+File: reference/components/TextArea.tsx
+================
+'use client';
+
+import styles from '@components/TextArea.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+type TextAreaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement> & {
+  autoPlay?: string;
+  autoPlaySpeedMS?: number;
+  isBlink?: boolean;
+};
+function TextArea({ autoPlay, autoPlaySpeedMS = 40, isBlink, placeholder, onChange, ...rest }: TextAreaProps) {
+  const textAreaRef = React.useRef<HTMLTextAreaElement | null>(null);
+  const measurementRef = React.useRef<HTMLDivElement | null>(null);
+
+  const [text, setText] = React.useState<string>(rest.defaultValue?.toString() || rest.value?.toString() || '');
+  const [isAutoPlaying, setIsAutoPlaying] = React.useState<boolean>(!!autoPlay);
+  const [isFocused, setIsFocused] = React.useState<boolean>(false);
+  const [selectionStart, setSelectionStart] = React.useState<number>(0);
+
+  const autoPlayIntervalRef = React.useRef<NodeJS.Timeout | null>(null);
+  const autoPlayIndexRef = React.useRef<number>(0);
+
+  const [currentLineIndex, setCurrentLineIndex] = React.useState<number>(0);
+  const [totalLines, setTotalLines] = React.useState<number>(0);
+
+  React.useEffect(() => {
+    if (textAreaRef.current && isFocused) {
+      textAreaRef.current.setSelectionRange(selectionStart, selectionStart);
+    }
+  }, [selectionStart, isFocused]);
+
+  React.useEffect(() => {
+    if (rest.value !== undefined) {
+      const val = rest.value.toString();
+      setText(val);
+      setIsAutoPlaying(false);
+      if (autoPlayIntervalRef.current) {
+        clearInterval(autoPlayIntervalRef.current);
+      }
+      setSelectionStart(val.length);
+    }
+  }, [rest.value]);
+
+  React.useEffect(() => {
+    if (autoPlay && !rest.value && !rest.defaultValue) {
+      setIsAutoPlaying(true);
+      autoPlayIndexRef.current = 0;
+      setText('');
+      if (autoPlayIntervalRef.current) clearInterval(autoPlayIntervalRef.current);
+
+      autoPlayIntervalRef.current = setInterval(() => {
+        autoPlayIndexRef.current++;
+        if (!autoPlay) return;
+        if (autoPlayIndexRef.current > autoPlay.length) {
+          setIsAutoPlaying(false);
+          clearInterval(autoPlayIntervalRef.current!);
+          return;
+        }
+        const newText = autoPlay.slice(0, autoPlayIndexRef.current);
+        setText(newText);
+        setSelectionStart(newText.length);
+      }, autoPlaySpeedMS);
+    }
+
+    return () => {
+      if (autoPlayIntervalRef.current) clearInterval(autoPlayIntervalRef.current);
+    };
+  }, [autoPlay, rest.value, rest.defaultValue]);
+
+  const resizeTextArea = React.useCallback(() => {
+    if (!textAreaRef.current) return;
+    textAreaRef.current.style.height = 'auto';
+    textAreaRef.current.style.height = `${textAreaRef.current.scrollHeight}px`;
+  }, []);
+
+  React.useEffect(() => {
+    resizeTextArea();
+    window.addEventListener('resize', resizeTextArea);
+    return () => window.removeEventListener('resize', resizeTextArea);
+  }, [resizeTextArea]);
+
+  const onHandleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
+    const value = e.target.value;
+    setText(value);
+    setIsAutoPlaying(false);
+    if (autoPlayIntervalRef.current) {
+      clearInterval(autoPlayIntervalRef.current);
+    }
+    resizeTextArea();
+    if (onChange) {
+      onChange(e);
+    }
+    setSelectionStart(e.target.selectionStart ?? 0);
+  };
+
+  const onHandleSelect = (e: React.SyntheticEvent<HTMLTextAreaElement>) => {
+    const textarea = e.currentTarget as HTMLTextAreaElement;
+    setSelectionStart(textarea.selectionStart);
+  };
+
+  const onHandleFocus = () => {
+    setIsFocused(true);
+    if (textAreaRef.current) {
+      setSelectionStart(textAreaRef.current.selectionStart);
+    }
+  };
+
+  const onHandleBlur = () => {
+    setIsFocused(false);
+  };
+
+  const onHandleClick = (e: React.MouseEvent<HTMLTextAreaElement>) => {
+    const textarea = e.currentTarget as HTMLTextAreaElement;
+    textarea.focus();
+    setSelectionStart(textarea.selectionStart);
+  };
+
+  React.useLayoutEffect(() => {
+    if (!measurementRef.current) return;
+
+    const measurementEl = measurementRef.current;
+    const computedStyle = window.getComputedStyle(measurementEl);
+    const lineHeightStr = computedStyle.lineHeight;
+    let lineHeight = 20;
+    if (lineHeightStr.endsWith('px')) {
+      lineHeight = parseFloat(lineHeightStr);
+    }
+
+    const countLines = (content: string) => {
+      measurementEl.textContent = content || '\u00A0';
+      const height = measurementEl.offsetHeight;
+      return Math.round(height / lineHeight);
+    };
+
+    const displayString = text || placeholder || '';
+
+    const textBeforeCaret = text.substring(0, selectionStart);
+    const textAfterCaret = text.substring(selectionStart);
+
+    const total = countLines(displayString);
+    setTotalLines(total > 0 ? total - 1 : 0);
+
+    const currentLines = countLines(textBeforeCaret);
+    setCurrentLineIndex(currentLines > 0 ? currentLines - 1 : 0);
+  }, [text, selectionStart, placeholder]);
+
+  const onHandleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
+    if (e.key === 'ArrowUp' && currentLineIndex === 0) {
+      e.preventDefault();
+      const previousFocusable = Utilities.findNextFocusable(document.activeElement, 'previous');
+      previousFocusable?.focus();
+    } else if (e.key === 'ArrowDown' && currentLineIndex === totalLines) {
+      e.preventDefault();
+      const nextFocusable = Utilities.findNextFocusable(document.activeElement, 'next');
+      nextFocusable?.focus();
+    }
+  };
+
+  const isPlaceholderVisible = !text && placeholder;
+
+  const containerClasses = Utilities.classNames(styles.root, isFocused && styles.focused);
+
+  return (
+    <div className={containerClasses}>
+      <div className={Utilities.classNames(styles.displayed, isPlaceholderVisible && styles.placeholder)}>
+        {isPlaceholderVisible ? placeholder : text.substring(0, selectionStart)}
+        {!isPlaceholderVisible && <span className={Utilities.classNames(styles.block, isBlink && styles.blink)}></span>}
+        {!isPlaceholderVisible && text.substring(selectionStart)}
+      </div>
+
+      <div ref={measurementRef} className={styles.hidden}></div>
+
+      <textarea className={styles.hiddenElement} ref={textAreaRef} value={text} aria-placeholder={placeholder} onFocus={onHandleFocus} onBlur={onHandleBlur} onKeyDown={onHandleKeyDown} onChange={onHandleChange} onSelect={onHandleSelect} onClick={onHandleClick} {...rest} />
+    </div>
+  );
+}
+
+export default TextArea;
+
+================
+File: reference/components/Tooltip.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border);
+  box-shadow: 0.5ch 0.5ch 0 0 var(--theme-border-subdued);
+  font-weight: 400;
+  max-width: 24ch;
+}
+
+================
+File: reference/components/Tooltip.tsx
+================
+import styles from '@components/Tooltip.module.scss';
+
+import * as React from 'react';
+
+interface TooltipProps extends React.HTMLAttributes<HTMLDivElement> {}
+
+const Tooltip = React.forwardRef<HTMLDivElement, TooltipProps>(({ style: propStyle, ...rest }, ref) => {
+  const style: React.CSSProperties = { ...propStyle };
+
+  return <div ref={ref} className={styles.root} {...rest} style={style} />;
+});
+
+Tooltip.displayName = 'Tooltip';
+
+export default Tooltip;
+
+================
+File: reference/components/TreeView.module.scss
+================
+.root {
+  white-space: nowrap;
+  -webkit-text-size-adjust: 100%;
+}
+
+.item {
+  cursor: pointer;
+
+  &:focus {
+    outline: 0;
+    border: 0;
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.empty {
+  opacity: 0.5;
+}
+
+================
+File: reference/components/TreeView.tsx
+================
+'use client';
+
+import styles from '@components/TreeView.module.scss';
+
+import * as React from 'react';
+
+interface TreeViewProps {
+  children?: React.ReactNode;
+  defaultValue?: boolean;
+  depth?: number;
+  isFile?: boolean;
+  isLastChild?: boolean;
+  isRoot?: boolean;
+  parentLines?: boolean[];
+  style?: any;
+  title: string;
+}
+
+const TreeView: React.FC<TreeViewProps> = ({ defaultValue = false, title, children, depth = 0, isFile = false, isRoot = false, isLastChild = false, style, parentLines = [] }) => {
+  const [show, setShow] = React.useState<boolean>(defaultValue);
+
+  const onToggleShow = (): void => {
+    if (!isFile) setShow((prevShow) => !prevShow);
+  };
+
+  const hasChildren = React.Children.count(children) > 0;
+  const isEmptyFolder = !isFile && !hasChildren;
+
+  const spacing = parentLines.map((line) => (line ? '│ . ' : '. . ')).join('');
+  const endPrefix = isLastChild ? '└───' : '├───';
+  const prefix = `${spacing}${endPrefix}`;
+  const icon = isFile ? ' ' : show ? '╦ ' : '╤ ';
+
+  const updatedParentLines = [...parentLines, !isLastChild];
+
+  return (
+    <div className={styles.root} style={style}>
+      <div tabIndex={0} role="button" onClick={onToggleShow} className={styles.item} aria-expanded={show}>
+        {prefix}
+        {icon}
+        {title}
+      </div>
+      {show && hasChildren && (
+        <div>
+          {React.Children.map(children, (child, index) =>
+            React.isValidElement(child)
+              ? React.cloneElement(child as React.ReactElement<TreeViewProps>, {
+                  depth: depth + 1,
+                  isLastChild: index === React.Children.count(children) - 1,
+                  parentLines: updatedParentLines,
+                })
+              : child
+          )}
+        </div>
+      )}
+    </div>
+  );
+};
+
+export default TreeView;
+
+================
+File: reference/modules/hotkeys/bound-hotkeys-proxy-provider.tsx
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/BoundHotkeysProxyProvider.tsx
+
+import { createContext, ReactNode, useContext } from 'react'
+import { Hotkey } from '@modules/hotkeys/types'
+
+type BoundHotkeysProxyProviderType = {
+  addHotkey: (hotkey: Hotkey) => void
+  removeHotkey: (hotkey: Hotkey) => void
+}
+
+const BoundHotkeysProxyProvider = createContext<BoundHotkeysProxyProviderType | undefined>(undefined)
+
+export const useBoundHotkeysProxy = () => {
+  return useContext(BoundHotkeysProxyProvider)
+}
+
+interface Props {
+  children: ReactNode
+  addHotkey: (hotkey: Hotkey) => void
+  removeHotkey: (hotkey: Hotkey) => void
+}
+
+export default function BoundHotkeysProxyProviderProvider({ addHotkey, removeHotkey, children }: Props) {
+  return (
+    <BoundHotkeysProxyProvider.Provider value={{ addHotkey, removeHotkey }}>
+      {children}
+    </BoundHotkeysProxyProvider.Provider>
+  )
+}
+
+================
+File: reference/modules/hotkeys/hotkeys-provider.tsx
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/HotkeysProvider.tsx
+import { Hotkey } from '@modules/hotkeys/types'
+import { createContext, ReactNode, useState, useContext, useCallback } from 'react'
+import BoundHotkeysProxyProviderProvider from '@modules/hotkeys/bound-hotkeys-proxy-provider'
+
+import * as Utilities from '@common/utilities';
+
+export type HotkeysContextType = {
+  hotkeys: ReadonlyArray<Hotkey>
+  enabledScopes: string[]
+  toggleScope: (scope: string) => void
+  enableScope: (scope: string) => void
+  disableScope: (scope: string) => void
+}
+
+// The context is only needed for special features like global scoping, so we use a graceful default fallback
+const HotkeysContext = createContext<HotkeysContextType>({
+  hotkeys: [],
+  enabledScopes: [], // This array has to be empty instead of containing '*' as default, to check if the provider is set or not
+  toggleScope: () => {},
+  enableScope: () => {},
+  disableScope: () => {},
+})
+
+export const useHotkeysContext = () => {
+  return useContext(HotkeysContext)
+}
+
+interface Props {
+  initiallyActiveScopes?: string[]
+  children: ReactNode
+}
+
+export const HotkeysProvider = ({ initiallyActiveScopes = ['*'], children }: Props) => {
+  const [internalActiveScopes, setInternalActiveScopes] = useState(
+    initiallyActiveScopes?.length > 0 ? initiallyActiveScopes : ['*']
+  )
+  const [boundHotkeys, setBoundHotkeys] = useState<Hotkey[]>([])
+
+  const enableScope = useCallback((scope: string) => {
+    setInternalActiveScopes((prev) => {
+      if (prev.includes('*')) {
+        return [scope]
+      }
+
+      return Array.from(new Set([...prev, scope]))
+    })
+  }, [])
+
+  const disableScope = useCallback((scope: string) => {
+    setInternalActiveScopes((prev) => {
+      if (prev.filter((s) => s !== scope).length === 0) {
+        return ['*']
+      } else {
+        return prev.filter((s) => s !== scope)
+      }
+    })
+  }, [])
+
+  const toggleScope = useCallback((scope: string) => {
+    setInternalActiveScopes((prev) => {
+      if (prev.includes(scope)) {
+        if (prev.filter((s) => s !== scope).length === 0) {
+          return ['*']
+        } else {
+          return prev.filter((s) => s !== scope)
+        }
+      } else {
+        if (prev.includes('*')) {
+          return [scope]
+        }
+
+        return Array.from(new Set([...prev, scope]))
+      }
+    })
+  }, [])
+
+  const addBoundHotkey = useCallback((hotkey: Hotkey) => {
+    setBoundHotkeys((prev) => [...prev, hotkey])
+  }, [])
+
+  const removeBoundHotkey = useCallback((hotkey: Hotkey) => {
+    setBoundHotkeys((prev) => prev.filter((h) => !Utilities.deepEqual(h, hotkey)))
+  }, [])
+
+  return (
+    <HotkeysContext.Provider
+      value={{ enabledScopes: internalActiveScopes, hotkeys: boundHotkeys, enableScope, disableScope, toggleScope }}
+    >
+      <BoundHotkeysProxyProviderProvider addHotkey={addBoundHotkey} removeHotkey={removeBoundHotkey}>
+        {children}
+      </BoundHotkeysProxyProviderProvider>
+    </HotkeysContext.Provider>
+  )
+}
+
+================
+File: reference/modules/hotkeys/index.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/index.ts
+
+import useHotkeys from '@modules/hotkeys/use-hotkeys'
+import type { Options, Keys, HotkeyCallback } from '@modules/hotkeys/types'
+import { HotkeysProvider, useHotkeysContext } from '@modules/hotkeys/hotkeys-provider'
+import { isHotkeyPressed } from '@modules/hotkeys/is-hotkey-pressed'
+import useRecordHotkeys from '@modules/hotkeys/use-record-hotkeys'
+
+export {
+  useHotkeys,
+  useRecordHotkeys,
+  useHotkeysContext,
+  isHotkeyPressed,
+  HotkeysProvider,
+  Options,
+  Keys,
+  HotkeyCallback,
+}
+
+================
+File: reference/modules/hotkeys/is-hotkey-pressed.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/isHotkeyPressed.ts
+
+import { isHotkeyModifier, mapKey } from '@modules/hotkeys/parse-hotkeys'
+;(() => {
+  if (typeof document !== 'undefined') {
+    document.addEventListener('keydown', (e) => {
+      if (e.key === undefined) {
+        // Synthetic event (e.g., Chrome autofill).  Ignore.
+        return
+      }
+
+      pushToCurrentlyPressedKeys([mapKey(e.key), mapKey(e.code)])
+    })
+
+    document.addEventListener('keyup', (e) => {
+      if (e.key === undefined) {
+        // Synthetic event (e.g., Chrome autofill).  Ignore.
+        return
+      }
+
+      removeFromCurrentlyPressedKeys([mapKey(e.key), mapKey(e.code)])
+    })
+  }
+
+  if (typeof window !== 'undefined') {
+    window.addEventListener('blur', () => {
+      currentlyPressedKeys.clear()
+    })
+  }
+})()
+
+const currentlyPressedKeys: Set<string> = new Set<string>()
+
+// https://github.com/microsoft/TypeScript/issues/17002
+export function isReadonlyArray(value: unknown): value is readonly unknown[] {
+  return Array.isArray(value)
+}
+
+export function isHotkeyPressed(key: string | readonly string[], splitKey = ','): boolean {
+  const hotkeyArray = isReadonlyArray(key) ? key : key.split(splitKey)
+
+  return hotkeyArray.every((hotkey) => currentlyPressedKeys.has(hotkey.trim().toLowerCase()))
+}
+
+export function pushToCurrentlyPressedKeys(key: string | string[]): void {
+  const hotkeyArray = Array.isArray(key) ? key : [key]
+
+  /*
+  Due to a weird behavior on macOS we need to clear the set if the user pressed down the meta key and presses another key.
+  https://stackoverflow.com/questions/11818637/why-does-javascript-drop-keyup-events-when-the-metakey-is-pressed-on-mac-browser
+  Otherwise the set will hold all ever pressed keys while the meta key is down which leads to wrong results.
+   */
+  if (currentlyPressedKeys.has('meta')) {
+    currentlyPressedKeys.forEach((key) => !isHotkeyModifier(key) && currentlyPressedKeys.delete(key.toLowerCase()))
+  }
+
+  hotkeyArray.forEach((hotkey) => currentlyPressedKeys.add(hotkey.toLowerCase()))
+}
+
+export function removeFromCurrentlyPressedKeys(key: string | string[]): void {
+  const hotkeyArray = Array.isArray(key) ? key : [key]
+
+  /*
+  Due to a weird behavior on macOS we need to clear the set if the user pressed down the meta key and presses another key.
+  https://stackoverflow.com/questions/11818637/why-does-javascript-drop-keyup-events-when-the-metakey-is-pressed-on-mac-browser
+  Otherwise the set will hold all ever pressed keys while the meta key is down which leads to wrong results.
+   */
+  if (key === 'meta') {
+    currentlyPressedKeys.clear()
+  } else {
+    hotkeyArray.forEach((hotkey) => currentlyPressedKeys.delete(hotkey.toLowerCase()))
+  }
+}
+
+================
+File: reference/modules/hotkeys/parse-hotkeys.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/parseHotkeys.ts
+
+import { Hotkey, KeyboardModifiers } from '@modules/hotkeys/types'
+
+const reservedModifierKeywords = ['shift', 'alt', 'meta', 'mod', 'ctrl']
+
+const mappedKeys: Record<string, string> = {
+  esc: 'escape',
+  return: 'enter',
+  '.': 'period',
+  ',': 'comma',
+  '-': 'slash',
+  ' ': 'space',
+  '`': 'backquote',
+  '#': 'backslash',
+  '+': 'bracketright',
+  ShiftLeft: 'shift',
+  ShiftRight: 'shift',
+  AltLeft: 'alt',
+  AltRight: 'alt',
+  MetaLeft: 'meta',
+  MetaRight: 'meta',
+  OSLeft: 'meta',
+  OSRight: 'meta',
+  ControlLeft: 'ctrl',
+  ControlRight: 'ctrl',
+}
+
+export function mapKey(key?: string): string {
+  return ((key && mappedKeys[key]) || key || '')
+    .trim()
+    .toLowerCase()
+    .replace(/key|digit|numpad|arrow/, '')
+}
+
+export function isHotkeyModifier(key: string) {
+  return reservedModifierKeywords.includes(key)
+}
+
+export function parseKeysHookInput(keys: string, splitKey = ','): string[] {
+  return keys.split(splitKey)
+}
+
+export function parseHotkey(hotkey: string, combinationKey = '+', description?: string): Hotkey {
+  const keys = hotkey
+    .toLocaleLowerCase()
+    .split(combinationKey)
+    .map((k) => mapKey(k))
+
+  const modifiers: KeyboardModifiers = {
+    alt: keys.includes('alt'),
+    ctrl: keys.includes('ctrl') || keys.includes('control'),
+    shift: keys.includes('shift'),
+    meta: keys.includes('meta'),
+    mod: keys.includes('mod'),
+  }
+
+  const singleCharKeys = keys.filter((k) => !reservedModifierKeywords.includes(k))
+
+  return {
+    ...modifiers,
+    keys: singleCharKeys,
+    description,
+    hotkey,
+  }
+}
+
+================
+File: reference/modules/hotkeys/types.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/types.ts
+import type { DependencyList } from 'react'
+
+export type FormTags = 'input' | 'textarea' | 'select' | 'INPUT' | 'TEXTAREA' | 'SELECT'
+export type Keys = string | readonly string[]
+export type Scopes = string | readonly string[]
+
+export type RefType<T> = T | null
+
+export type KeyboardModifiers = {
+  alt?: boolean
+  ctrl?: boolean
+  meta?: boolean
+  shift?: boolean
+  mod?: boolean
+}
+
+export type Hotkey = KeyboardModifiers & {
+  keys?: readonly string[]
+  scopes?: Scopes
+  description?: string
+  hotkey: string
+}
+
+export type HotkeysEvent = Hotkey
+
+export type HotkeyCallback = (keyboardEvent: KeyboardEvent, hotkeysEvent: HotkeysEvent) => void
+
+export type Trigger = boolean | ((keyboardEvent: KeyboardEvent, hotkeysEvent: HotkeysEvent) => boolean)
+
+export type Options = {
+  enabled?: Trigger // Main setting that determines if the hotkey is enabled or not. (Default: true)
+  enableOnFormTags?: readonly FormTags[] | boolean // Enable hotkeys on a list of tags. (Default: false)
+  enableOnContentEditable?: boolean // Enable hotkeys on tags with contentEditable props. (Default: false)
+  ignoreEventWhen?: (e: KeyboardEvent) => boolean // Ignore evenets based on a condition (Default: undefined)
+  combinationKey?: string // Character to split keys in hotkeys combinations. (Default: +)
+  splitKey?: string // Character to separate different hotkeys. (Default: ,)
+  scopes?: Scopes // Scope
+  keyup?: boolean // Trigger on keyup event? (Default: undefined)
+  keydown?: boolean // Trigger on keydown event? (Default: true)
+  preventDefault?: Trigger // Prevent default browser behavior? (Default: false)
+  description?: string // Use this option to describe what the hotkey does. (Default: undefined)
+  document?: Document // Listen to events on the document instead of the window. (Default: false)
+  ignoreModifiers?: boolean // Ignore modifiers when matching hotkeys. (Default: false)
+}
+
+export type OptionsOrDependencyArray = Options | DependencyList
+
+================
+File: reference/modules/hotkeys/use-deep-equal-memo.ts
+================
+import { useRef } from 'react'
+
+import * as Utilities from '@common/utilities';
+
+export default function useDeepEqualMemo<T>(value: T) {
+  const ref = useRef<T | undefined>(undefined)
+
+  if (!Utilities.deepEqual(ref.current, value)) {
+    ref.current = value
+  }
+
+  return ref.current
+}
+
+================
+File: reference/modules/hotkeys/use-hotkeys.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/useHotkeys.ts
+
+import { HotkeyCallback, Keys, Options, OptionsOrDependencyArray, RefType } from '@modules/hotkeys/types'
+import { DependencyList, RefCallback, useCallback, useEffect, useState, useLayoutEffect, useRef } from 'react'
+import { mapKey, parseHotkey, parseKeysHookInput } from '@modules/hotkeys/parse-hotkeys'
+import {
+  isHotkeyEnabled,
+  isHotkeyEnabledOnTag,
+  isHotkeyMatchingKeyboardEvent,
+  isKeyboardEventTriggeredByInput,
+  isScopeActive,
+  maybePreventDefault,
+} from '@modules/hotkeys/validators'
+import { useHotkeysContext } from '@modules/hotkeys/hotkeys-provider'
+import { useBoundHotkeysProxy } from '@modules/hotkeys/bound-hotkeys-proxy-provider'
+import useDeepEqualMemo from '@modules/hotkeys/use-deep-equal-memo'
+import { isReadonlyArray, pushToCurrentlyPressedKeys, removeFromCurrentlyPressedKeys } from '@modules/hotkeys/is-hotkey-pressed'
+
+const stopPropagation = (e: KeyboardEvent): void => {
+  e.stopPropagation()
+  e.preventDefault()
+  e.stopImmediatePropagation()
+}
+
+const useSafeLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect
+
+export default function useHotkeys<T extends HTMLElement>(
+  keys: Keys,
+  callback: HotkeyCallback,
+  options?: OptionsOrDependencyArray,
+  dependencies?: OptionsOrDependencyArray
+) {
+  const [ref, setRef] = useState<RefType<T>>(null)
+  const hasTriggeredRef = useRef(false)
+
+  const _options: Options | undefined = !(options instanceof Array)
+    ? (options as Options)
+    : !(dependencies instanceof Array)
+    ? (dependencies as Options)
+    : undefined
+  const _keys: string = isReadonlyArray(keys) ? keys.join(_options?.splitKey) : keys
+  const _deps: DependencyList | undefined =
+    options instanceof Array ? options : dependencies instanceof Array ? dependencies : undefined
+
+  const memoisedCB = useCallback(callback, _deps ?? [])
+  const cbRef = useRef<HotkeyCallback>(memoisedCB)
+
+  if (_deps) {
+    cbRef.current = memoisedCB
+  } else {
+    cbRef.current = callback
+  }
+
+  const memoisedOptions = useDeepEqualMemo(_options)
+
+  const { enabledScopes } = useHotkeysContext()
+  const proxy = useBoundHotkeysProxy()
+
+  useSafeLayoutEffect(() => {
+    if (memoisedOptions?.enabled === false || !isScopeActive(enabledScopes, memoisedOptions?.scopes)) {
+      return
+    }
+
+    const listener = (e: KeyboardEvent, isKeyUp = false) => {
+      if (isKeyboardEventTriggeredByInput(e) && !isHotkeyEnabledOnTag(e, memoisedOptions?.enableOnFormTags)) {
+        return
+      }
+
+      // TODO: SINCE THE EVENT IS NOW ATTACHED TO THE REF, THE ACTIVE ELEMENT CAN NEVER BE INSIDE THE REF. THE HOTKEY ONLY TRIGGERS IF THE
+      // REF IS THE ACTIVE ELEMENT. THIS IS A PROBLEM SINCE FOCUSED SUB COMPONENTS WON'T TRIGGER THE HOTKEY.
+      if (ref !== null) {
+        const rootNode = ref.getRootNode()
+        if (
+          (rootNode instanceof Document || rootNode instanceof ShadowRoot) &&
+          rootNode.activeElement !== ref &&
+          !ref.contains(rootNode.activeElement)
+        ) {
+          stopPropagation(e)
+          return
+        }
+      }
+
+      if ((e.target as HTMLElement)?.isContentEditable && !memoisedOptions?.enableOnContentEditable) {
+        return
+      }
+
+      parseKeysHookInput(_keys, memoisedOptions?.splitKey).forEach((key) => {
+        const hotkey = parseHotkey(key, memoisedOptions?.combinationKey)
+
+        if (isHotkeyMatchingKeyboardEvent(e, hotkey, memoisedOptions?.ignoreModifiers) || hotkey.keys?.includes('*')) {
+          if (memoisedOptions?.ignoreEventWhen?.(e)) {
+            return
+          }
+
+          if (isKeyUp && hasTriggeredRef.current) {
+            return
+          }
+
+          maybePreventDefault(e, hotkey, memoisedOptions?.preventDefault)
+
+          if (!isHotkeyEnabled(e, hotkey, memoisedOptions?.enabled)) {
+            stopPropagation(e)
+
+            return
+          }
+
+          // Execute the user callback for that hotkey
+          cbRef.current(e, hotkey)
+
+          if (!isKeyUp) {
+            hasTriggeredRef.current = true
+          }
+        }
+      })
+    }
+
+    const handleKeyDown = (event: KeyboardEvent) => {
+      if (event.key === undefined) {
+        // Synthetic event (e.g., Chrome autofill).  Ignore.
+        return
+      }
+
+      pushToCurrentlyPressedKeys(mapKey(event.code))
+
+      if ((memoisedOptions?.keydown === undefined && memoisedOptions?.keyup !== true) || memoisedOptions?.keydown) {
+        listener(event)
+      }
+    }
+
+    const handleKeyUp = (event: KeyboardEvent) => {
+      if (event.key === undefined) {
+        // Synthetic event (e.g., Chrome autofill).  Ignore.
+        return
+      }
+
+      removeFromCurrentlyPressedKeys(mapKey(event.code))
+
+      hasTriggeredRef.current = false
+
+      if (memoisedOptions?.keyup) {
+        listener(event, true)
+      }
+    }
+
+    const domNode = ref || _options?.document || document
+
+    // @ts-ignore
+    domNode.addEventListener('keyup', handleKeyUp)
+    // @ts-ignore
+    domNode.addEventListener('keydown', handleKeyDown)
+
+    if (proxy) {
+      parseKeysHookInput(_keys, memoisedOptions?.splitKey).forEach((key) =>
+        proxy.addHotkey(parseHotkey(key, memoisedOptions?.combinationKey, memoisedOptions?.description))
+      )
+    }
+
+    return () => {
+      // @ts-ignore
+      domNode.removeEventListener('keyup', handleKeyUp)
+      // @ts-ignore
+      domNode.removeEventListener('keydown', handleKeyDown)
+
+      if (proxy) {
+        parseKeysHookInput(_keys, memoisedOptions?.splitKey).forEach((key) =>
+          proxy.removeHotkey(parseHotkey(key, memoisedOptions?.combinationKey, memoisedOptions?.description))
+        )
+      }
+    }
+  }, [ref, _keys, memoisedOptions, enabledScopes])
+
+  return setRef as RefCallback<T>
+}
+
+================
+File: reference/modules/hotkeys/use-record-hotkeys.ts
+================
+import { useCallback, useState } from 'react'
+import { mapKey } from '@modules/hotkeys/parse-hotkeys'
+
+export default function useRecordHotkeys() {
+  const [keys, setKeys] = useState(new Set<string>())
+  const [isRecording, setIsRecording] = useState(false)
+
+  const handler = useCallback((event: KeyboardEvent) => {
+    if (event.key === undefined) {
+      // Synthetic event (e.g., Chrome autofill).  Ignore.
+      return
+    }
+
+    event.preventDefault()
+    event.stopPropagation()
+
+    setKeys((prev) => {
+      const newKeys = new Set(prev)
+
+      newKeys.add(mapKey(event.code))
+
+      return newKeys
+    })
+  }, [])
+
+  const stop = useCallback(() => {
+    if (typeof document !== 'undefined') {
+      document.removeEventListener('keydown', handler)
+
+      setIsRecording(false)
+    }
+  }, [handler])
+
+  const start = useCallback(() => {
+    setKeys(new Set<string>())
+
+    if (typeof document !== 'undefined') {
+      stop()
+
+      document.addEventListener('keydown', handler)
+
+      setIsRecording(true)
+    }
+  }, [handler, stop])
+
+  const resetKeys = useCallback(() => {
+    setKeys(new Set<string>())
+  }, [])
+
+  return [keys, { start, stop, resetKeys, isRecording }] as const
+}
+
+================
+File: reference/modules/hotkeys/validators.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/validators.ts
+
+import { FormTags, Hotkey, Scopes, Trigger } from '@modules/hotkeys/types'
+import { isHotkeyPressed, isReadonlyArray } from '@modules/hotkeys/is-hotkey-pressed'
+import { mapKey } from '@modules/hotkeys/parse-hotkeys'
+
+export function maybePreventDefault(e: KeyboardEvent, hotkey: Hotkey, preventDefault?: Trigger): void {
+  if ((typeof preventDefault === 'function' && preventDefault(e, hotkey)) || preventDefault === true) {
+    e.preventDefault()
+  }
+}
+
+export function isHotkeyEnabled(e: KeyboardEvent, hotkey: Hotkey, enabled?: Trigger): boolean {
+  if (typeof enabled === 'function') {
+    return enabled(e, hotkey)
+  }
+
+  return enabled === true || enabled === undefined
+}
+
+export function isKeyboardEventTriggeredByInput(ev: KeyboardEvent): boolean {
+  return isHotkeyEnabledOnTag(ev, ['input', 'textarea', 'select'])
+}
+
+export function isHotkeyEnabledOnTag(
+  event: KeyboardEvent,
+  enabledOnTags: readonly FormTags[] | boolean = false
+): boolean {
+  const {target, composed} = event;
+
+  let targetTagName: string | null = null
+
+  if (isCustomElement(target as HTMLElement) && composed) {
+    targetTagName = event.composedPath()[0] && (event.composedPath()[0] as HTMLElement).tagName;
+  } else {
+    targetTagName = target && (target as HTMLElement).tagName;
+  }
+
+  if (isReadonlyArray(enabledOnTags)) {
+    return Boolean(
+      targetTagName && enabledOnTags && enabledOnTags.some((tag) => tag.toLowerCase() === targetTagName?.toLowerCase())
+    )
+  }
+
+  return Boolean(targetTagName && enabledOnTags && enabledOnTags)
+}
+
+export function isCustomElement(element: HTMLElement): boolean {
+  // We just do a basic check w/o any complex RegEx or validation against the list of legacy names containing a hyphen,
+  // as none of them is likely to be an event target, and it won't hurt anyway if we miss.
+  // see: https://html.spec.whatwg.org/multipage/custom-elements.html#prod-potentialcustomelementname
+  return !!element.tagName && !element.tagName.startsWith("-") && element.tagName.includes("-");
+}
+
+export function isScopeActive(activeScopes: string[], scopes?: Scopes): boolean {
+  if (activeScopes.length === 0 && scopes) {
+    console.warn(
+      'A hotkey has the "scopes" option set, however no active scopes were found. If you want to use the global scopes feature, you need to wrap your app in a <HotkeysProvider>'
+    )
+
+    return true
+  }
+
+  if (!scopes) {
+    return true
+  }
+
+  return activeScopes.some((scope) => scopes.includes(scope)) || activeScopes.includes('*')
+}
+
+export const isHotkeyMatchingKeyboardEvent = (e: KeyboardEvent, hotkey: Hotkey, ignoreModifiers = false): boolean => {
+  const { alt, meta, mod, shift, ctrl, keys } = hotkey
+  const { key: pressedKeyUppercase, code, ctrlKey, metaKey, shiftKey, altKey } = e
+
+  const keyCode = mapKey(code)
+  const pressedKey = pressedKeyUppercase.toLowerCase()
+
+  if (
+    !keys?.includes(keyCode) &&
+    !keys?.includes(pressedKey) &&
+    !['ctrl', 'control', 'unknown', 'meta', 'alt', 'shift', 'os'].includes(keyCode)
+  ) {
+    return false
+  }
+
+  if (!ignoreModifiers) {
+    // We check the pressed keys for compatibility with the keyup event. In keyup events the modifier flags are not set.
+    if (alt === !altKey && pressedKey !== 'alt') {
+      return false
+    }
+
+    if (shift === !shiftKey && pressedKey !== 'shift') {
+      return false
+    }
+
+    // Mod is a special key name that is checking for meta on macOS and ctrl on other platforms
+    if (mod) {
+      if (!metaKey && !ctrlKey) {
+        return false
+      }
+    } else {
+      if (meta === !metaKey && pressedKey !== 'meta' && pressedKey !== 'os') {
+        return false
+      }
+
+      if (ctrl === !ctrlKey && pressedKey !== 'ctrl' && pressedKey !== 'control') {
+        return false
+      }
+    }
+  }
+
+  // All modifiers are correct, now check the key
+  // If the key is set, we check for the key
+  if (keys && keys.length === 1 && (keys.includes(pressedKey) || keys.includes(keyCode))) {
+    return true
+  } else if (keys) {
+    // Check if all keys are present in pressedDownKeys set
+    return isHotkeyPressed(keys)
+  } else if (!keys) {
+    // If the key is not set, we only listen for modifiers, that check went alright, so we return true
+    return true
+  }
+
+  // There is nothing that matches.
+  return false
+}
+
+================
+File: reference/modules/cors.ts
+================
+// @ts-nocheck
+
+'use strict';
+
+import assign from '@modules/object-assign';
+import vary from '@modules/vary';
+
+var defaults = {
+  origin: '*',
+  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
+  preflightContinue: false,
+  optionsSuccessStatus: 204,
+};
+
+function isString(s) {
+  return typeof s === 'string' || s instanceof String;
+}
+
+function isOriginAllowed(origin, allowedOrigin) {
+  if (Array.isArray(allowedOrigin)) {
+    for (var i = 0; i < allowedOrigin.length; ++i) {
+      if (isOriginAllowed(origin, allowedOrigin[i])) {
+        return true;
+      }
+    }
+    return false;
+  } else if (isString(allowedOrigin)) {
+    return origin === allowedOrigin;
+  } else if (allowedOrigin instanceof RegExp) {
+    return allowedOrigin.test(origin);
+  } else {
+    return !!allowedOrigin;
+  }
+}
+
+function configureOrigin(options, req) {
+  var requestOrigin = req.headers.origin,
+    headers = [],
+    isAllowed;
+
+  if (!options.origin || options.origin === '*') {
+    // allow any origin
+    headers.push([
+      {
+        key: 'Access-Control-Allow-Origin',
+        value: '*',
+      },
+    ]);
+  } else if (isString(options.origin)) {
+    // fixed origin
+    headers.push([
+      {
+        key: 'Access-Control-Allow-Origin',
+        value: options.origin,
+      },
+    ]);
+    headers.push([
+      {
+        key: 'Vary',
+        value: 'Origin',
+      },
+    ]);
+  } else {
+    isAllowed = isOriginAllowed(requestOrigin, options.origin);
+    // reflect origin
+    headers.push([
+      {
+        key: 'Access-Control-Allow-Origin',
+        value: isAllowed ? requestOrigin : false,
+      },
+    ]);
+    headers.push([
+      {
+        key: 'Vary',
+        value: 'Origin',
+      },
+    ]);
+  }
+
+  return headers;
+}
+
+function configureMethods(options) {
+  var methods = options.methods;
+  if (methods.join) {
+    methods = options.methods.join(','); // .methods is an array, so turn it into a string
+  }
+  return {
+    key: 'Access-Control-Allow-Methods',
+    value: methods,
+  };
+}
+
+function configureCredentials(options) {
+  if (options.credentials === true) {
+    return {
+      key: 'Access-Control-Allow-Credentials',
+      value: 'true',
+    };
+  }
+  return null;
+}
+
+function configureAllowedHeaders(options, req) {
+  var allowedHeaders = options.allowedHeaders || options.headers;
+  var headers = [];
+
+  if (!allowedHeaders) {
+    allowedHeaders = req.headers['access-control-request-headers']; // .headers wasn't specified, so reflect the request headers
+    headers.push([
+      {
+        key: 'Vary',
+        value: 'Access-Control-Request-Headers',
+      },
+    ]);
+  } else if (allowedHeaders.join) {
+    allowedHeaders = allowedHeaders.join(','); // .headers is an array, so turn it into a string
+  }
+  if (allowedHeaders && allowedHeaders.length) {
+    headers.push([
+      {
+        key: 'Access-Control-Allow-Headers',
+        value: allowedHeaders,
+      },
+    ]);
+  }
+
+  return headers;
+}
+
+function configureExposedHeaders(options) {
+  var headers = options.exposedHeaders;
+  if (!headers) {
+    return null;
+  } else if (headers.join) {
+    headers = headers.join(','); // .headers is an array, so turn it into a string
+  }
+  if (headers && headers.length) {
+    return {
+      key: 'Access-Control-Expose-Headers',
+      value: headers,
+    };
+  }
+  return null;
+}
+
+function configureMaxAge(options) {
+  var maxAge = (typeof options.maxAge === 'number' || options.maxAge) && options.maxAge.toString();
+  if (maxAge && maxAge.length) {
+    return {
+      key: 'Access-Control-Max-Age',
+      value: maxAge,
+    };
+  }
+  return null;
+}
+
+function applyHeaders(headers, res) {
+  for (var i = 0, n = headers.length; i < n; i++) {
+    var header = headers[i];
+    if (header) {
+      if (Array.isArray(header)) {
+        applyHeaders(header, res);
+      } else if (header.key === 'Vary' && header.value) {
+        vary(res, header.value);
+      } else if (header.value) {
+        res.setHeader(header.key, header.value);
+      }
+    }
+  }
+}
+
+function cors(options, req, res, next) {
+  var headers = [],
+    method = req.method && req.method.toUpperCase && req.method.toUpperCase();
+
+  if (method === 'OPTIONS') {
+    // preflight
+    headers.push(configureOrigin(options, req));
+    headers.push(configureCredentials(options));
+    headers.push(configureMethods(options));
+    headers.push(configureAllowedHeaders(options, req));
+    headers.push(configureMaxAge(options));
+    headers.push(configureExposedHeaders(options));
+    applyHeaders(headers, res);
+
+    if (options.preflightContinue) {
+      next();
+    } else {
+      // Safari (and potentially other browsers) need content-length 0,
+      //   for 204 or they just hang waiting for a body
+      res.statusCode = options.optionsSuccessStatus;
+      res.setHeader('Content-Length', '0');
+      res.end();
+    }
+  } else {
+    // actual response
+    headers.push(configureOrigin(options, req));
+    headers.push(configureCredentials(options));
+    headers.push(configureExposedHeaders(options));
+    applyHeaders(headers, res);
+    next();
+  }
+}
+
+function middlewareWrapper(o) {
+  // if options are static (either via defaults or custom options passed in), wrap in a function
+  var optionsCallback = null;
+  if (typeof o === 'function') {
+    optionsCallback = o;
+  } else {
+    optionsCallback = function (req, cb) {
+      cb(null, o);
+    };
+  }
+
+  return function corsMiddleware(req, res, next) {
+    optionsCallback(req, function (err, options) {
+      if (err) {
+        next(err);
+      } else {
+        var corsOptions = assign({}, defaults, options);
+        var originCallback = null;
+        if (corsOptions.origin && typeof corsOptions.origin === 'function') {
+          originCallback = corsOptions.origin;
+        } else if (corsOptions.origin) {
+          originCallback = function (origin, cb) {
+            cb(null, corsOptions.origin);
+          };
+        }
+
+        if (originCallback) {
+          originCallback(req.headers.origin, function (err2, origin) {
+            if (err2 || !origin) {
+              next(err2);
+            } else {
+              corsOptions.origin = origin;
+              cors(corsOptions, req, res, next);
+            }
+          });
+        } else {
+          next();
+        }
+      }
+    });
+  };
+}
+
+export default middlewareWrapper;
+
+================
+File: reference/modules/object-assign.ts
+================
+// @ts-nocheck
+
+/*
+object-assign
+(c) Sindre Sorhus
+@license MIT
+*/
+
+'use strict';
+
+/* eslint-disable no-unused-vars */
+var getOwnPropertySymbols = Object.getOwnPropertySymbols;
+var hasOwnProperty = Object.prototype.hasOwnProperty;
+var propIsEnumerable = Object.prototype.propertyIsEnumerable;
+
+function toObject(val) {
+  if (val === null || val === undefined) {
+    throw new TypeError('Object.assign cannot be called with null or undefined');
+  }
+
+  return Object(val);
+}
+
+function shouldUseNative() {
+  try {
+    if (!Object.assign) {
+      return false;
+    }
+
+    // Detect buggy property enumeration order in older V8 versions.
+
+    // https://bugs.chromium.org/p/v8/issues/detail?id=4118
+    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
+    // @ts-ignore
+    test1[5] = 'de';
+    if (Object.getOwnPropertyNames(test1)[0] === '5') {
+      return false;
+    }
+
+    // https://bugs.chromium.org/p/v8/issues/detail?id=3056
+    var test2 = {};
+    for (var i = 0; i < 10; i++) {
+      test2['_' + String.fromCharCode(i)] = i;
+    }
+    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
+      return test2[n];
+    });
+    if (order2.join('') !== '0123456789') {
+      return false;
+    }
+
+    // https://bugs.chromium.org/p/v8/issues/detail?id=3056
+    var test3 = {};
+    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
+      test3[letter] = letter;
+    });
+    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
+      return false;
+    }
+
+    return true;
+  } catch (err) {
+    // We don't expect any of the above to throw, but better to be safe.
+    return false;
+  }
+}
+
+const assign = shouldUseNative()
+  ? Object.assign
+  : function (target, source) {
+      var from;
+      var to = toObject(target);
+      var symbols;
+
+      for (var s = 1; s < arguments.length; s++) {
+        from = Object(arguments[s]);
+
+        for (var key in from) {
+          if (hasOwnProperty.call(from, key)) {
+            to[key] = from[key];
+          }
+        }
+
+        if (getOwnPropertySymbols) {
+          symbols = getOwnPropertySymbols(from);
+          for (var i = 0; i < symbols.length; i++) {
+            if (propIsEnumerable.call(from, symbols[i])) {
+              to[symbols[i]] = from[symbols[i]];
+            }
+          }
+        }
+      }
+
+      return to;
+    };
+
+export default assign;
+
+================
+File: reference/modules/vary.ts
+================
+// @ts-nocheck
+
+/*!
+ * vary
+ * Copyright(c) 2014-2017 Douglas Christopher Wilson
+ * MIT Licensed
+ */
+
+'use strict';
+
+/**
+ * RegExp to match field-name in RFC 7230 sec 3.2
+ *
+ * field-name    = token
+ * token         = 1*tchar
+ * tchar         = "!" / "#" / "$" / "%" / "&" / "'" / "*"
+ *               / "+" / "-" / "." / "^" / "_" / "`" / "|" / "~"
+ *               / DIGIT / ALPHA
+ *               ; any VCHAR, except delimiters
+ */
+
+var FIELD_NAME_REGEXP = /^[!#$%&'*+\-.^_`|~0-9A-Za-z]+$/;
+
+/**
+ * Append a field to a vary header.
+ *
+ * @param {String} header
+ * @param {String|Array} field
+ * @return {String}
+ * @public
+ */
+
+function append(header, field) {
+  if (typeof header !== 'string') {
+    throw new TypeError('header argument is required');
+  }
+
+  if (!field) {
+    throw new TypeError('field argument is required');
+  }
+
+  // get fields array
+  var fields = !Array.isArray(field) ? parse(String(field)) : field;
+
+  // assert on invalid field names
+  for (var j = 0; j < fields.length; j++) {
+    if (!FIELD_NAME_REGEXP.test(fields[j])) {
+      throw new TypeError('field argument contains an invalid header name');
+    }
+  }
+
+  // existing, unspecified vary
+  if (header === '*') {
+    return header;
+  }
+
+  // enumerate current values
+  var val = header;
+  var vals = parse(header.toLowerCase());
+
+  // unspecified vary
+  if (fields.indexOf('*') !== -1 || vals.indexOf('*') !== -1) {
+    return '*';
+  }
+
+  for (var i = 0; i < fields.length; i++) {
+    var fld = fields[i].toLowerCase();
+
+    // append value (case-preserving)
+    if (vals.indexOf(fld) === -1) {
+      vals.push(fld);
+      val = val ? val + ', ' + fields[i] : fields[i];
+    }
+  }
+
+  return val;
+}
+
+/**
+ * Parse a vary header into an array.
+ *
+ * @param {String} header
+ * @return {Array}
+ * @private
+ */
+
+function parse(header) {
+  var end = 0;
+  var list = [];
+  var start = 0;
+
+  // gather tokens
+  for (var i = 0, len = header.length; i < len; i++) {
+    switch (header.charCodeAt(i)) {
+      case 0x20 /*   */:
+        if (start === end) {
+          start = end = i + 1;
+        }
+        break;
+      case 0x2c /* , */:
+        list.push(header.substring(start, end));
+        start = end = i + 1;
+        break;
+      default:
+        end = i + 1;
+        break;
+    }
+  }
+
+  // final token
+  list.push(header.substring(start, end));
+
+  return list;
+}
+
+/**
+ * Mark that a request is varied on a header field.
+ *
+ * @param {Object} res
+ * @param {String|Array} field
+ * @public
+ */
+
+function vary(res, field) {
+  if (!res || !res.getHeader || !res.setHeader) {
+    // quack quack
+    throw new TypeError('res argument is required');
+  }
+
+  // get existing header
+  var val = res.getHeader('Vary') || '';
+  var header = Array.isArray(val) ? val.join(', ') : String(val);
+
+  // set new header
+  if ((val = append(header, field))) {
+    res.setHeader('Vary', val);
+  }
+}
+
+export default vary;
+
+================
+File: reference/pages/api/index.ts
+================
+import * as Server from '@common/server';
+import * as Constants from '@common/constants';
+
+export default async function apiIndex(req, res) {
+  await Server.cors(req, res);
+
+  res.json({
+    success: true,
+    message: 'hey there, friend.',
+  });
+}
+
+================
+File: reference/pages/_app.tsx
+================
+import '@root/global.scss';
+
+import * as React from 'react';
+
+import Providers from '@components/Providers';
+
+function MyApp({ Component, pageProps }) {
+  return (
+    <Providers>
+      <Component {...pageProps} />
+    </Providers>
+  );
+}
+
+export default MyApp;
+
+================
+File: reference/pages/_document.tsx
+================
+import Document, { Html, Head, Main, NextScript } from 'next/document';
+
+export default class MyDocument extends Document {
+  render() {
+    return (
+      <Html>
+        <Head />
+        <body className="theme-light">
+          <Main />
+          <NextScript />
+        </body>
+      </Html>
+    );
+  }
+}
+
+================
+File: reference/.gitignore
+================
+.next
+.nova
+.env
+.env.local
+.env-custom-development
+.env-development
+.env-textile
+.env-production
+.DS_STORE
+DS_STORE
+yarn.lock
+node_modules
+dist
+analytics.txt
+package-lock.json
+
+/**/*/.DS_STORE
+/**/*/node_modules
+/**/*/.next
+/**/*/.data
+
+================
+File: reference/.prettierrc
+================
+{
+  "printWidth": 9999,
+  "tabWidth": 2,
+  "useTabs": false,
+  "semi": true,
+  "singleQuote": true,
+  "trailingComma": "es5",
+  "bracketSpacing": true,
+  "jsxBracketSameLine": false,
+  "arrowParens": "always",
+  "requirePragma": false,
+  "insertPragma": false,
+  "proseWrap": "preserve",
+  "parser": "babel-ts",
+  "overrides": [
+    {
+      "files": "*.js",
+      "options": {
+        "parser": "babel"
+      }
+    }
+  ]
+}
+
+================
+File: reference/global.scss
+================
+@font-face {
+  font-family: 'IosevkaTerm-Regular';
+  src: url('https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/6397be61-3ea4-459d-8a3e-fd95168cb214.woff2') format('woff2');
+}
+
+a,
+abbr,
+acronym,
+address,
+applet,
+article,
+aside,
+audio,
+b,
+big,
+blockquote,
+body,
+canvas,
+caption,
+center,
+cite,
+code,
+dd,
+del,
+details,
+dfn,
+div,
+dl,
+dt,
+embed,
+em,
+figure,
+figcaption,
+fieldset,
+footer,
+form,
+h1,
+h2,
+h3,
+h4,
+h5,
+h6,
+header,
+hgroup,
+html,
+i,
+iframe,
+img,
+ins,
+kbd,
+label,
+legend,
+li,
+mark,
+menu,
+nav,
+object,
+ol,
+output,
+p,
+pre,
+q,
+ruby,
+s,
+samp,
+section,
+small,
+span,
+strike,
+strong,
+sub,
+summary,
+sup,
+table,
+tbody,
+td,
+tfoot,
+th,
+thead,
+time,
+tr,
+tt,
+u,
+ul,
+var,
+video {
+  border: 0;
+  box-sizing: border-box;
+  margin: 0;
+  padding: 0;
+  vertical-align: baseline;
+}
+
+a {
+  background: var(--theme-border-subdued);
+  color: var(--theme-text);
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+    color: var(--theme-text);
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    color: var(--theme-text);
+    outline: 0;
+  }
+}
+
+ul {
+  list-style-position: inside;
+  list-style-type: '▪';
+  text-indent: -1ch;
+}
+
+ol {
+  list-style-type: '';
+  list-style-position: inside;
+  counter-reset: cupcake;
+  text-indent: -1ch;
+}
+
+ul ul,
+ul ol,
+ol ul,
+ol ol {
+  padding-left: 2ch;
+}
+
+ol li {
+  padding-left: 1ch;
+  counter-increment: cupcake;
+}
+
+ul li:before {
+  content: ' ';
+  display: inline-block;
+  width: 1ch;
+  height: 0;
+  visibility: hidden;
+}
+
+ol li:before {
+  content: counters(cupcake, '.') '. ';
+}
+
+article,
+aside,
+details,
+figcaption,
+figure,
+footer,
+header,
+hgroup,
+menu,
+nav,
+section {
+  display: block;
+}
+
+body.theme-blue {
+  --theme-overlay: var(--color-blue-20-5);
+  --theme-background: var(--color-blue-80);
+  --theme-background-modal: var(--color-blue-70);
+  --theme-background-modal-footer: var(--color-blue-90);
+  --theme-background-input: var(--color-blue-60);
+  --theme-border: var(--color-blue-70);
+  --theme-border-subdued: var(--color-blue-60-2);
+  --theme-text: var(--color-blue-10);
+  --theme-button: var(--color-blue-10);
+  --theme-button-text: var(--color-blue-80);
+  --theme-button-foreground: var(--color-blue-60);
+  --theme-button-background: var(--color-blue-70);
+  --theme-focused-foreground: var(--color-blue-50);
+  --theme-focused-foreground-subdued: var(--color-blue-50-5);
+}
+
+body.theme-light {
+  --theme-overlay: var(--color-black-100-4);
+  --theme-background: var(--color-white);
+  --theme-background-modal: var(--color-gray-20);
+  --theme-background-modal-footer: var(--color-gray-40);
+  --theme-background-input: var(--color-gray-10);
+  --theme-border: var(--color-gray-20);
+  --theme-border-subdued: var(--color-gray-40-2);
+  --theme-text: var(--color-black-100);
+  --theme-button: var(--color-black-100);
+  --theme-button-text: var(--color-white);
+  --theme-button-foreground: var(--color-gray-30);
+  --theme-button-background: var(--color-gray-20);
+  --theme-focused-foreground: var(--color-neon-green-50);
+  --theme-focused-foreground-subdued: var(--color-neon-green-50-5);
+}
+
+body.theme-dark {
+  --theme-overlay: var(--color-black-100-4);
+  --theme-background: var(--color-black-100);
+  --theme-background-modal: var(--color-gray-80);
+  --theme-background-modal-footer: var(--color-gray-70);
+  --theme-background-input: var(--color-gray-60);
+  --theme-border: var(--color-gray-80);
+  --theme-border-subdued: var(--color-gray-70-3);
+  --theme-text: var(--color-white);
+  --theme-button: var(--color-white);
+  --theme-button-text: var(--color-black-100);
+  --theme-button-foreground: var(--color-gray-90);
+  --theme-button-background: var(--color-gray-80);
+  --theme-focused-foreground: var(--color-daybreak-10);
+  --theme-focused-foreground-subdued: var(--color-daybreak-10-5);
+}
+
+body.theme-green {
+  --theme-overlay: var(--color-neon-green-100-4);
+  --theme-background: rgba(44, 255, 5);
+  --theme-background-modal: var(--color-neon-green-50);
+  --theme-background-modal-footer: var(--color-neon-green-50-5);
+  --theme-background-input: var(--color-neon-green-30);
+  --theme-border: var(--color-neon-green-60);
+  --theme-border-subdued: var(--color-neon-green-60-3);
+  --theme-text: var(--color-neon-green-100);
+  --theme-button: var(--color-neon-green-100);
+  --theme-button-text: var(--color-neon-green-10);
+  --theme-button-foreground: var(--color-neon-green-80);
+  --theme-button-background: var(--color-neon-green-70);
+  --theme-focused-foreground: rgba(255, 82, 243, 1);
+  --theme-focused-foreground-subdued: rgba(255, 82, 243, 0.5);
+}
+
+body.theme-black-red {
+  --theme-overlay: var(--color-red-100-4);
+  --theme-background: var(--color-black-100);
+  --theme-background-modal: var(--color-red-70);
+  --theme-background-modal-footer: var(--color-red-80);
+  --theme-background-input: var(--color-red-60);
+  --theme-border: var(--color-red-60-7);
+  --theme-border-subdued: var(--color-red-60-3);
+  --theme-text: var(--color-red-30);
+  --theme-button: var(--color-red-100);
+  --theme-button-text: var(--color-red-20);
+  --theme-button-foreground: var(--color-red-80);
+  --theme-button-background: var(--color-red-90);
+  --theme-focused-foreground: var(--color-gray-70);
+  --theme-focused-foreground-subdued: var(--color-red-70-4);
+}
+
+body.theme-black-teal {
+  --theme-overlay: var(--color-teal-100-4);
+  --theme-background: var(--color-black-100);
+  --theme-background-modal: var(--color-teal-70);
+  --theme-background-modal-footer: var(--color-teal-80);
+  --theme-background-input: var(--color-teal-60);
+  --theme-border: var(--color-teal-60-7);
+  --theme-border-subdued: var(--color-teal-60-3);
+  --theme-text: var(--color-teal-30);
+  --theme-button: var(--color-teal-100);
+  --theme-button-text: var(--color-teal-20);
+  --theme-button-foreground: var(--color-teal-80);
+  --theme-button-background: var(--color-teal-90);
+  --theme-focused-foreground: var(--color-gray-70);
+  --theme-focused-foreground-subdued: var(--color-teal-70-4);
+}
+
+body.theme-black-green {
+  --theme-overlay: var(--color-black-100-4);
+  --theme-background: var(--color-black-100);
+  --theme-background-modal: var(--color-gray-90);
+  --theme-background-modal-footer: var(--color-gray-80);
+  --theme-background-input: var(--color-gray-70);
+  --theme-border: var(--color-gray-80);
+  --theme-border-subdued: var(--color-gray-70-3);
+  --theme-text: var(--color-green-50);
+  --theme-button: var(--color-green-50);
+  --theme-button-text: var(--color-green-80);
+  --theme-button-foreground: var(--color-green-80);
+  --theme-button-background: var(--color-green-90);
+  --theme-focused-foreground: var(--color-gray-30);
+  --theme-focused-foreground-subdued: var(--color-gray-40);
+}
+
+body.font-use-berkeley-mono {
+  --font-family-mono: 'TX02Mono-Regular', sans-serif;
+}
+
+body.font-use-commit-mono {
+  --font-family-mono: 'CommitMono-Regular', sans-serif;
+}
+
+body.font-use-departure-mono {
+  --font-family-mono: 'DepartureMono-Regular', sans-serif;
+}
+
+body.font-use-fira-code {
+  --font-family-mono: 'FiraCode-Regular', sans-serif;
+}
+
+body.font-use-fragment-mono {
+  --font-family-mono: 'FragmentMono-Regular', sans-serif;
+}
+
+body.font-use-iosevka-term {
+  --font-family-mono: 'IosevkaTerm-Regular', sans-serif;
+}
+
+body.font-use-jet-brains-mono {
+  --font-family-mono: 'JetBrainsMono-Regular', sans-serif;
+}
+
+body.font-use-server-mono {
+  --font-family-mono: 'ServerMono-Regular', sans-serif;
+}
+
+body.font-use-sfmono-square {
+  --font-family-mono: 'SFMonoSquare-Regular', sans-serif;
+}
+
+#__next {
+}
+
+html,
+body {
+  --color-black-100: rgba(0, 0, 0, 1);
+  --color-black-100-1: rgba(0, 0, 0, 0.1);
+  --color-black-100-2: rgba(0, 0, 0, 0.2);
+  --color-black-100-4: rgba(0, 0, 0, 0.4);
+  --color-black-daybreak-100: rgba(4, 2, 0, 1);
+  --color-black-daybreak-100-4: rgba(4, 2, 0, 0.4);
+
+  --color-blue-10: rgba(237, 245, 255, 1);
+  --color-blue-100: rgba(0, 17, 65, 1);
+  --color-blue-20: rgba(208, 226, 255, 1);
+  --color-blue-20-1: rgba(208, 226, 255, 0.1);
+  --color-blue-20-2: rgba(208, 226, 255, 0.2);
+  --color-blue-20-5: rgba(208, 226, 255, 0.5);
+  --color-blue-30: rgba(166, 200, 255, 1);
+  --color-blue-40: rgba(120, 169, 255, 1);
+  --color-blue-50: rgba(69, 137, 255, 1);
+  --color-blue-50-5: rgba(69, 137, 255, 0.5);
+  --color-blue-60: rgba(15, 98, 254, 1);
+  --color-blue-60-2: rgba(15, 98, 254, 0.2);
+  --color-blue-70: rgba(0, 67, 206, 1);
+  --color-blue-80: rgba(0, 45, 156, 1);
+  --color-blue-80-4: rgba(0, 45, 156, 0.4);
+  --color-blue-80-6: rgba(0, 45, 156, 0.6);
+  --color-blue-90: rgba(0, 29, 108, 1);
+  --color-blue-90-6: rgba(0, 29, 108, 0.6);
+
+  --color-daybreak: rgba(255, 108, 4, 1);
+  --color-daybreak-1: rgba(255, 108, 4, 0.1);
+  --color-daybreak-10: rgba(239, 99, 0, 1);
+  --color-daybreak-10-5: rgba(239, 99, 0, 0.5);
+  --color-daybreak-2: rgba(255, 108, 4, 0.2);
+  --color-daybreak-20: rgba(220, 91, 0, 1);
+  --color-daybreak-30: rgba(200, 83, 0, 1);
+  --color-daybreak-4: rgba(255, 108, 4, 0.4);
+  --color-daybreak-40: rgba(180, 75, 0, 1);
+  --color-daybreak-40-2: rgba(180, 75, 0, 0.2);
+  --color-daybreak-50: rgba(161, 67, 0, 1);
+  --color-daybreak-60: rgba(141, 59, 0, 1);
+  --color-daybreak-70: rgba(121, 50, 0, 1);
+  --color-daybreak-70-3: rgba(121, 50, 0, 0.3);
+  --color-daybreak-80: rgba(102, 42, 0, 1);
+  --color-daybreak-90: rgba(82, 34, 0, 1);
+
+  --color-gold-30: rgba(241, 194, 27, 1);
+
+  --color-gray-10: rgba(244, 244, 244, 1);
+  --color-gray-100: rgba(22, 22, 22, 1);
+  --color-gray-20: rgba(224, 224, 224, 1);
+  --color-gray-20-7: rgba(224, 224, 224, 0.7);
+  --color-gray-30: rgba(198, 198, 198, 1);
+  --color-gray-30-7: rgba(224, 224, 224, 0.7);
+  --color-gray-40: rgba(168, 168, 168, 1);
+  --color-gray-40-2: rgba(168, 168, 168, 0.2);
+  --color-gray-50: rgba(141, 141, 141, 1);
+  --color-gray-60: rgba(111, 111, 111, 1);
+  --color-gray-70: rgba(82, 82, 82, 1);
+  --color-gray-70-3: rgba(82, 82, 82, 0.3);
+  --color-gray-70-4: rgba(82, 82, 82, 0.4);
+  --color-gray-80: rgba(57, 57, 57, 1);
+  --color-gray-80-6: rgba(57, 57, 57, 0.6);
+  --color-gray-90: rgba(38, 38, 38, 1);
+  --color-gray-90-6: rgba(38, 38, 38, 0.6);
+
+  --color-green-100: rgba(7, 25, 8, 1);
+  --color-green-100: rgba(7, 25, 8, 1);
+  --color-green-90: rgba(2, 45, 13, 1);
+  --color-green-80: rgba(4, 67, 23, 1);
+  --color-green-70: rgba(14, 96, 39, 1);
+  --color-green-60: rgba(25, 128, 56, 1);
+  --color-green-60-3: rgba(25, 128, 56, 0.3);
+  --color-green-50: rgba(36, 161, 72, 1);
+  --color-green-40: rgba(66, 190, 101, 1);
+  --color-green-30: rgba(111, 220, 140, 1);
+  --color-green-20: rgba(167, 240, 186, 1);
+  --color-green-10: rgba(222, 251, 230, 1);
+
+  --color-neon-green-10: rgba(242, 255, 233, 1);
+  --color-neon-green-100: rgba(10, 44, 2, 1);
+  --color-neon-green-100-1: rgba(10, 44, 2, 0.1);
+  --color-neon-green-100-2: rgba(10, 44, 2, 0.2);
+  --color-neon-green-100-4: rgba(10, 44, 2, 0.4);
+  --color-neon-green-20: rgba(213, 255, 191, 1);
+  --color-neon-green-30: rgba(178, 255, 148, 1);
+  --color-neon-green-40: rgba(138, 255, 104, 1);
+  --color-neon-green-50: rgba(92, 255, 59, 1);
+  --color-neon-green-50-5: rgba(92, 255, 59, 0.5);
+  --color-neon-green-60: rgba(46, 231, 29, 1);
+  --color-neon-green-60-3: rgba(46, 231, 29, 0.3);
+  --color-neon-green-70: rgba(0, 207, 0, 1);
+  --color-neon-green-70-3: rgba(0, 207, 0, 0.3);
+  --color-neon-green-70-7: rgba(0, 207, 0, 0.7);
+  --color-neon-green-80: rgba(0, 159, 0, 1);
+  --color-neon-green-80-1: rgba(0, 159, 0, 0.1);
+  --color-neon-green-80-2: rgba(0, 159, 0, 0.2);
+  --color-neon-green-80-4: rgba(0, 159, 0, 0.4);
+  --color-neon-green-90: rgba(16, 107, 2, 1);
+
+  --color-red-100: rgba(45, 7, 9, 1);
+  --color-red-100-4: rgba(45, 7, 9, 0.4);
+  --color-red-90: rgba(82, 4, 8, 1);
+  --color-red-80: rgba(117, 14, 19, 1);
+  --color-red-70: rgba(162, 25, 31, 1);
+  --color-red-60: rgba(218, 30, 40, 1);
+  --color-red-60-7: rgba(218, 30, 40, 0.7);
+  --color-red-60-3: rgba(218, 30, 40, 0.3);
+  --color-red-50: rgba(250, 77, 86, 1);
+  --color-red-40: rgba(255, 131, 137, 1);
+  --color-red-30: rgba(255, 179, 184, 1);
+  --color-red-20: rgba(255, 215, 217, 1);
+  --color-red-10: rgba(255, 241, 241, 1);
+
+  --color-teal-100: rgba(8, 26, 28, 1);
+  --color-teal-100-4: rgba(8, 26, 28, 0.4);
+  --color-teal-90: rgba(2, 43, 48, 1);
+  --color-teal-80: rgba(0, 65, 68, 1);
+  --color-teal-70: rgba(0, 93, 93, 1);
+  --color-teal-70-4: rgba(0, 93, 93, 0.4);
+  --color-teal-70-3: rgba(0, 93, 93, 0.3);
+  --color-teal-60: rgba(0, 125, 121, 1);
+  --color-teal-60-7: rgba(0, 125, 121, 0.7);
+  --color-teal-60-3: rgba(0, 125, 121, 0.3);
+  --color-teal-50: rgba(0, 157, 154, 1);
+  --color-teal-40: rgba(8, 189, 186, 1);
+  --color-teal-30: rgba(61, 219, 217, 1);
+  --color-teal-20: rgba(158, 240, 240, 1);
+  --color-teal-10: rgba(217, 251, 251, 1);
+
+  --color-white: rgba(255, 255, 255, 1);
+  --color-white-1: rgba(255, 255, 255, 0.1);
+  --color-white-2: rgba(255, 255, 255, 0.2);
+  --color-white-4: rgba(255, 255, 255, 0.4);
+
+  --font-family: -apple-system, BlinkMacSystemFont, helvetica neue, helvetica, sans-serif;
+  --font-family-mono: 'IosevkaTerm-Regular', Consolas, monaco, monospace;
+  --font-family-serif: Georgia, Times New Roman, serif;
+
+  --theme-text: var(--color-black-100);
+  --theme-line-height-base: 1.25;
+  --font-size: 20px;
+
+  --z-index-page: 1;
+  --z-index-page-select: 3;
+  --z-index-page-tooltips: 4;
+  --z-index-page-popover: 5;
+  --z-index-page-dropdown-menus: 6;
+  --z-index-page-modals: 10;
+
+  background: var(--theme-background);
+  color: var(--theme-text);
+  font-family: var(--font-family-mono);
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+
+  font-size: var(--font-size);
+  font-optical-sizing: auto;
+  font-weight: 400;
+  font-variant-numeric: tabular-nums lining-nums;
+
+  &::-webkit-scrollbar {
+    background: transparent;
+    height: calc(var(--theme-line-height-base) * 1rem);
+    width: 1ch;
+  }
+
+  &::-webkit-scrollbar-track {
+    background: var(--theme-background);
+  }
+
+  &::-webkit-scrollbar-thumb {
+    background: var(--theme-border);
+  }
+
+  &::-webkit-scrollbar-thumb:hover {
+    background: var(--theme-border);
+  }
+
+  @media (max-width: 568px) {
+    --font-size: 16px;
+  }
+}
+
+================
+File: reference/LICENSE.md
+================
+Copyright (c) 2024 INTERNET DEVELOPMENT STUDIO COMPANY
+
+Permission is hereby granted, free of charge, to any person obtaining
+a copy of this software and associated documentation files (the
+"Software"), to deal in the Software without restriction, including
+without limitation the rights to use, copy, modify, merge, publish,
+distribute, sublicense, and/or sell copies of the Software, and to
+permit persons to whom the Software is furnished to do so, subject to
+the following conditions:
+
+The above copyright notice and this permission notice shall be
+included in all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+
+================
+File: reference/package.json
+================
+{
+  "name": "INTDEV",
+  "description": "A vocation guild and great hall for webmasters. We practice the craft of designing, building, shipping, and maintaining websites, platforms, brands, and applications—end to end.",
+  "engines": {
+    "node": ">=18"
+  },
+  "license": "MIT",
+  "version": "0.0.1",
+  "scripts": {
+    "dev": "next -p 10000",
+    "build": "next build",
+    "start": "PORT=10000 next start",
+    "lint": "next lint"
+  },
+  "dependencies": {
+    "next": "^15.1.3",
+    "react": "^19.0.0",
+    "react-dom": "^19.0.0",
+    "sass": "1.83.0"
+  },
+  "devDependencies": {
+    "@types/node": "^22.10.2",
+    "@types/react": "^19.0.2",
+    "ts-node": "^10.9.2",
+    "typescript": "^5.7.2"
+  }
+}
+
+================
+File: reference/README.md
+================
+# www-internet-v2
+
+TODO
+
+```sh
+npm install
+npm run dev
+```
+
+Go to `http://localhost:10000` in your browser of choice.
+
+### Contact
+
+If you have questions ping me on Twitter, [@wwwjim](https://www.twitter.com/wwwjim). Or you can ping [@internetxstudio](https://x.com/internetxstudio).
+
+================
+File: reference/tsconfig.json
+================
+{
+  "compilerOptions": {
+    "baseUrl": ".",
+    "paths": {
+      "@root/*": [
+        "./*"
+      ],
+      "@system/*": [
+        "./system/*"
+      ],
+      "@demos/*": [
+        "./demos/*"
+      ],
+      "@common/*": [
+        "./common/*"
+      ],
+      "@data/*": [
+        "./data/*"
+      ],
+      "@components/*": [
+        "./components/*"
+      ],
+      "@pages/*": [
+        "./pages/*"
+      ],
+      "@modules/*": [
+        "./modules/*"
+      ]
+    },
+    "target": "es5",
+    "lib": [
+      "dom",
+      "dom.iterable",
+      "esnext"
+    ],
+    "allowJs": true,
+    "skipLibCheck": true,
+    "strict": false,
+    "forceConsistentCasingInFileNames": true,
+    "noEmit": true,
+    "esModuleInterop": true,
+    "module": "esnext",
+    "moduleResolution": "node",
+    "resolveJsonModule": true,
+    "isolatedModules": true,
+    "jsx": "preserve",
+    "incremental": true,
+    "plugins": [
+      {
+        "name": "next"
+      }
+    ],
+    "strictNullChecks": true
+  },
+  "exclude": [
+    "node_modules",
+    "**/*.spec.ts"
+  ],
+  "include": [
+    "next-env.d.ts",
+    "**/*.ts",
+    "**/*.tsx",
+    ".next/types/**/*.ts"
+  ]
+}
+
+================
+File: src/app/globals.css
+================
+@tailwind base;
+@tailwind components;
+@tailwind utilities;
+
+:root {
+  --background: #ffffff;
+  --foreground: #171717;
+}
+
+@media (prefers-color-scheme: dark) {
+  :root {
+    --background: #0a0a0a;
+    --foreground: #ededed;
+  }
+}
+
+body {
+  color: var(--foreground);
+  background: var(--background);
+}
+
+================
+File: src/app/layout.tsx
+================
+import './globals.css';
+// Update this import to point to your actual Providers component location
+import Providers from '../components/Providers'; 
+
+export default function layout({
+  children,
+}: Readonly<{
+  children: React.ReactNode;
+}>) {
+  return (
+    <html lang="en">
+      <body className="theme-light">
+        <Providers>
+          {children}
+        </Providers>
+      </body>
+    </html>
+  );
+}
+
+================
+File: src/app/page.tsx
+================
+// Update these imports to point to your actual component and stylesheet locations
+import DefaultLayout from '../components/page/DefaultLayout'; 
+import styles from '../components/page/root.module.scss';
+import AsciiText from '../components/examples/AsciiText';
+
+export default function Home() {
+  return (
+    <DefaultLayout previewPixelSRC="https://intdev-global.s3.us-west-2.amazonaws.com/template-app-icon.png">
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <AsciiText text="🛹" />
+        </div>
+      </div>
+    </DefaultLayout>
+  );
+}
+
+================
+File: .gitignore
+================
+# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
+
+# dependencies
+/node_modules
+/.pnp
+.pnp.*
+.yarn/*
+!.yarn/patches
+!.yarn/plugins
+!.yarn/releases
+!.yarn/versions
+
+# testing
+/coverage
+
+# next.js
+/.next/
+/out/
+
+# production
+/build
+
+# misc
+.DS_Store
+*.pem
+
+# debug
+npm-debug.log*
+yarn-debug.log*
+yarn-error.log*
+.pnpm-debug.log*
+
+# env files (can opt-in for committing if needed)
+.env*
+
+# vercel
+.vercel
+
+# typescript
+*.tsbuildinfo
+next-env.d.ts
+.aider*
+
+================
+File: eslint.config.mjs
+================
+import { dirname } from "path";
+import { fileURLToPath } from "url";
+import { FlatCompat } from "@eslint/eslintrc";
+
+const __filename = fileURLToPath(import.meta.url);
+const __dirname = dirname(__filename);
+
+const compat = new FlatCompat({
+  baseDirectory: __dirname,
+});
+
+const eslintConfig = [
+  ...compat.extends("next/core-web-vitals", "next/typescript"),
+];
+
+export default eslintConfig;
+
+================
+File: next.config.ts
+================
+import type { NextConfig } from "next";
+
+const nextConfig: NextConfig = {
+  /* config options here */
+};
+
+export default nextConfig;
+
+================
+File: package.json
+================
+{
+  "name": "adam-web",
+  "version": "0.1.0",
+  "private": true,
+  "description": "Website for Adam Delaney", // Update description
+  "scripts": {
+    "dev": "next dev", // Removed --turbopack
+    "build": "next build",
+    "start": "next start",
+    "lint": "next lint"
+  },
+  "dependencies": {
+    "next": "15.1.6",
+    "react": "^19.0.0",
+    "react-dom": "^19.0.0",
+    "sass": "^1.84.0"
+    // Add any missing dependencies from reference/package.json here
+  },
+  "devDependencies": {
+    "@eslint/eslintrc": "^3",
+    "@types/node": "^20",
+    "@types/react": "^19",
+    "@types/react-dom": "^19",
+    "eslint": "^9",
+    "eslint-config-next": "15.1.6",
+    "postcss": "^8",
+    "tailwindcss": "^3.4.1",
+    "typescript": "^5"
+  }
+}
+
+================
+File: postcss.config.mjs
+================
+/** @type {import('postcss-load-config').Config} */
+const config = {
+  plugins: {
+    tailwindcss: {},
+  },
+};
+
+export default config;
+
+================
+File: README.md
+================
+This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).
+
+## Getting Started
+
+First, run the development server:
+
+```bash
+npm run dev
+# or
+yarn dev
+# or
+pnpm dev
+# or
+bun dev
+```
+
+Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.
+
+You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.
+
+This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.
+
+## Learn More
+
+To learn more about Next.js, take a look at the following resources:
+
+- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
+- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.
+
+You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!
+
+## Deploy on Vercel
+
+The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.
+
+Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
+
+================
+File: tailwind.config.ts
+================
+import type { Config } from "tailwindcss";
+
+export default {
+  content: [
+    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
+    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
+    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
+  ],
+  theme: {
+    extend: {
+      colors: {
+        background: "var(--background)",
+        foreground: "var(--foreground)",
+      },
+    },
+  },
+  plugins: [],
+} satisfies Config;
+
+================
+File: tsconfig.json
+================
+{
+  "compilerOptions": {
+    "target": "ES2017",
+    "lib": ["dom", "dom.iterable", "esnext"],
+    "allowJs": true,
+    "skipLibCheck": true,
+    "strict": true,
+    "noEmit": true,
+    "esModuleInterop": true,
+    "module": "esnext",
+    "moduleResolution": "bundler",
+    "resolveJsonModule": true,
+    "isolatedModules": true,
+    "jsx": "preserve",
+    "incremental": true,
+    "plugins": [
+      {
+        "name": "next"
+      }
+    ],
+    "paths": {
+      "@/*": ["./src/*"]
+    }
+  },
+  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
+  "exclude": ["node_modules"]
+}
+// we need to build out adam-web - we need a simple, fully PWA, 3 page web app: home, bio, projects. https://www.reactbits.dev/text-animations/ascii-text
+
+with a nice emoji ascii skateboard hero, and a nice floating header like raycast with 'adam delaney' in the left, and in the right some nav buttons to go to bio, projects pages . react19/next15/scss and tailwind? or maybe just scss, lets do that . i want the pages to look very similar to the reference site, all components and styling and page layouts need to be the same, but the content is for adam's personal site. https://www.linkedin.com/in/adam-delaney

# 2025-02-07 23:44:06.593405
+n

# 2025-02-07 23:44:07.805306
+s

# 2025-02-07 23:44:09.898333
+n

# 2025-02-07 23:44:13.561667
+y

# 2025-02-07 23:44:38.651497
+n

# 2025-02-07 23:44:47.586670
+y

# 2025-02-07 23:44:53.392827
+n

# 2025-02-07 23:44:55.107124
+y

# 2025-02-07 23:44:59.921234
+n

# 2025-02-07 23:45:04.486733
+y

# 2025-02-07 23:45:08.981812
+n

# 2025-02-07 23:45:13.840728
+ 

# 2025-02-07 23:45:14.943574
+n

# 2025-02-07 23:45:24.846274
+nn

# 2025-02-07 23:45:25.471505
+n

# 2025-02-07 23:45:34.299968
+y

# 2025-02-07 23:45:50.541568
+n

# 2025-02-07 23:46:06.425196
+s

# 2025-02-07 23:46:10.287221
+y

# 2025-02-07 23:49:09.589011
+This file is a merged representation of the entire codebase, combining all repository files into a single document.
+Generated by Repomix on: 2025-02-08T07:41:57.140Z
+
+================================================================
+File Summary
+================================================================
+
+Purpose:
+--------
+This file contains a packed representation of the entire repository's contents.
+It is designed to be easily consumable by AI systems for analysis, code review,
+or other automated processes.
+
+File Format:
+------------
+The content is organized as follows:
+1. This summary section
+2. Repository information
+3. Directory structure
+4. Multiple file entries, each consisting of:
+  a. A separator line (================)
+  b. The file path (File: path/to/file)
+  c. Another separator line
+  d. The full contents of the file
+  e. A blank line
+
+Usage Guidelines:
+-----------------
+- This file should be treated as read-only. Any changes should be made to the
+  original repository files, not this packed version.
+- When processing this file, use the file path to distinguish
+  between different files in the repository.
+- Be aware that this file may contain sensitive information. Handle it with
+  the same level of security as you would the original repository.
+
+Notes:
+------
+- Some files may have been excluded based on .gitignore rules and Repomix's
+  configuration.
+- Binary files are not included in this packed representation. Please refer to
+  the Repository Structure section for a complete list of file paths, including
+  binary files.
+
+Additional Info:
+----------------
+
+================================================================
+Directory Structure
+================================================================
+public/
+  file.svg
+  globe.svg
+  next.svg
+  vercel.svg
+  window.svg
+reference/
+  .git/
+    hooks/
+      applypatch-msg.sample
+      commit-msg.sample
+      fsmonitor-watchman.sample
+      post-update.sample
+      pre-applypatch.sample
+      pre-commit.sample
+      pre-merge-commit.sample
+      pre-push.sample
+      pre-rebase.sample
+      pre-receive.sample
+      prepare-commit-msg.sample
+      push-to-checkout.sample
+      update.sample
+    info/
+      exclude
+    logs/
+      refs/
+        heads/
+          main
+        remotes/
+          origin/
+            HEAD
+      HEAD
+    refs/
+      heads/
+        main
+      remotes/
+        origin/
+          HEAD
+    config
+    description
+    FETCH_HEAD
+    HEAD
+    packed-refs
+  app/
+    office/
+      head.tsx
+      layout.tsx
+      page.tsx
+    head.tsx
+    layout.tsx
+    manifest.ts
+    page.tsx
+    robots.ts
+    sitemap.ts
+  common/
+    constants.ts
+    hooks.ts
+    position.ts
+    queries.ts
+    server.ts
+    utilities.ts
+  components/
+    detectors/
+      OutsideElementEvent.tsx
+    examples/
+      AS400.module.scss
+      AS400.tsx
+      DashboardRadar.module.scss
+      DashboardRadar.tsx
+      Denabase.module.scss
+      Denabase.tsx
+      MessagesInterface.tsx
+      UpdatingDataTable.tsx
+    modals/
+      ModalAlert.module.scss
+      ModalAlert.tsx
+      ModalCanvasPlatformer.module.scss
+      ModalCanvasPlatformer.tsx
+      ModalCanvasSnake.module.scss
+      ModalCanvasSnake.tsx
+      ModalChess.module.scss
+      ModalChess.tsx
+      ModalCreateAccount.module.scss
+      ModalCreateAccount.tsx
+      ModalError.module.scss
+      ModalError.tsx
+      ModalMatrixModes.module.scss
+      ModalMatrixModes.tsx
+    page/
+      DefaultActionBar.module.scss
+      DefaultActionBar.tsx
+      DefaultLayout.module.scss
+      DefaultLayout.tsx
+      ModalContext.tsx
+      root.module.scss
+    svg/
+      InternetDevelopmentLogo.tsx
+      InternetDevelopmentLogoMark.tsx
+      Sphere.tsx
+    Accordion.module.scss
+    Accordion.tsx
+    ActionBar.module.scss
+    ActionBar.tsx
+    ActionButton.module.scss
+    ActionButton.tsx
+    ActionListItem.module.scss
+    ActionListItem.tsx
+    AlertBanner.module.scss
+    AlertBanner.tsx
+    Avatar.module.scss
+    Avatar.tsx
+    Badge.module.scss
+    Badge.tsx
+    BarLoader.module.scss
+    BarLoader.tsx
+    BarProgress.module.scss
+    BarProgress.tsx
+    Block.module.scss
+    Block.tsx
+    BlockLoader.module.scss
+    BlockLoader.tsx
+    BreadCrumbs.module.scss
+    BreadCrumbs.tsx
+    Button.module.scss
+    Button.tsx
+    ButtonGroup.module.scss
+    ButtonGroup.tsx
+    Canvas.module.scss
+    Canvas.tsx
+    CanvasPlatformer.module.scss
+    CanvasPlatformer.tsx
+    CanvasSnake.module.scss
+    CanvasSnake.tsx
+    Card.module.scss
+    Card.tsx
+    CardDouble.module.scss
+    CardDouble.tsx
+    Checkbox.module.scss
+    Checkbox.tsx
+    Chessboard.module.scss
+    Chessboard.tsx
+    CodeBlock.module.scss
+    CodeBlock.tsx
+    ComboBox.module.scss
+    ComboBox.tsx
+    ContentFluid.module.scss
+    ContentFluid.tsx
+    DataTable.module.scss
+    DataTable.tsx
+    DatePicker.module.scss
+    DatePicker.tsx
+    DebugGrid.tsx
+    DefaultMetaTags.tsx
+    Dialog.module.scss
+    Dialog.tsx
+    Divider.module.scss
+    Divider.tsx
+    Drawer.module.scss
+    Drawer.tsx
+    DropdownMenu.module.scss
+    DropdownMenu.tsx
+    DropdownMenuTrigger.module.scss
+    DropdownMenuTrigger.tsx
+    Grid.module.scss
+    Grid.tsx
+    HoverComponentTrigger.module.scss
+    HoverComponentTrigger.tsx
+    Indent.module.scss
+    Indent.tsx
+    Input.module.scss
+    Input.tsx
+    ListItem.module.scss
+    ListItem.tsx
+    MatrixLoader.module.scss
+    MatrixLoader.tsx
+    Message.module.scss
+    Message.tsx
+    MessageViewer.module.scss
+    MessageViewer.tsx
+    ModalStack.module.scss
+    ModalStack.tsx
+    ModalTrigger.tsx
+    Navigation.module.scss
+    Navigation.tsx
+    NumberRangeSlider.module.scss
+    NumberRangeSlider.tsx
+    Popover.module.scss
+    Popover.tsx
+    Providers.tsx
+    RadioButton.module.scss
+    RadioButton.tsx
+    RadioButtonGroup.tsx
+    Row.module.scss
+    Row.tsx
+    RowEllipsis.module.scss
+    RowEllipsis.tsx
+    RowSpaceBetween.module.scss
+    RowSpaceBetween.tsx
+    Select.module.scss
+    Select.tsx
+    SidebarLayout.module.scss
+    SidebarLayout.tsx
+    Table.module.scss
+    Table.tsx
+    TableColumn.module.scss
+    TableColumn.tsx
+    TableRow.module.scss
+    TableRow.tsx
+    Text.module.scss
+    Text.tsx
+    TextArea.module.scss
+    TextArea.tsx
+    Tooltip.module.scss
+    Tooltip.tsx
+    TreeView.module.scss
+    TreeView.tsx
+  modules/
+    hotkeys/
+      bound-hotkeys-proxy-provider.tsx
+      hotkeys-provider.tsx
+      index.ts
+      is-hotkey-pressed.ts
+      parse-hotkeys.ts
+      types.ts
+      use-deep-equal-memo.ts
+      use-hotkeys.ts
+      use-record-hotkeys.ts
+      validators.ts
+    cors.ts
+    object-assign.ts
+    vary.ts
+  pages/
+    api/
+      index.ts
+    _app.tsx
+    _document.tsx
+  .gitignore
+  .prettierrc
+  global.scss
+  LICENSE.md
+  package.json
+  README.md
+  tsconfig.json
+src/
+  app/
+    globals.css
+    layout.tsx
+    page.tsx
+.gitignore
+eslint.config.mjs
+next.config.ts
+package.json
+postcss.config.mjs
+README.md
+tailwind.config.ts
+tsconfig.json
+
+================================================================
+Files
+================================================================
+
+================
+File: public/file.svg
+================
+<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
+
+================
+File: public/globe.svg
+================
+<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
+
+================
+File: public/next.svg
+================
+<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
+
+================
+File: public/vercel.svg
+================
+<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
+
+================
+File: public/window.svg
+================
+<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
+
+================
+File: reference/.git/hooks/applypatch-msg.sample
+================
+#!/bin/sh
+#
+# An example hook script to check the commit log message taken by
+# applypatch from an e-mail message.
+#
+# The hook should exit with non-zero status after issuing an
+# appropriate message if it wants to stop the commit.  The hook is
+# allowed to edit the commit message file.
+#
+# To enable this hook, rename this file to "applypatch-msg".
+
+. git-sh-setup
+commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
+test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
+:
+
+================
+File: reference/.git/hooks/commit-msg.sample
+================
+#!/bin/sh
+#
+# An example hook script to check the commit log message.
+# Called by "git commit" with one argument, the name of the file
+# that has the commit message.  The hook should exit with non-zero
+# status after issuing an appropriate message if it wants to stop the
+# commit.  The hook is allowed to edit the commit message file.
+#
+# To enable this hook, rename this file to "commit-msg".
+
+# Uncomment the below to add a Signed-off-by line to the message.
+# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
+# hook is more suited to it.
+#
+# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
+# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"
+
+# This example catches duplicate Signed-off-by lines.
+
+test "" = "$(grep '^Signed-off-by: ' "$1" |
+	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
+	echo >&2 Duplicate Signed-off-by lines.
+	exit 1
+}
+
+================
+File: reference/.git/hooks/fsmonitor-watchman.sample
+================
+#!/usr/bin/perl
+
+use strict;
+use warnings;
+use IPC::Open2;
+
+# An example hook script to integrate Watchman
+# (https://facebook.github.io/watchman/) with git to speed up detecting
+# new and modified files.
+#
+# The hook is passed a version (currently 2) and last update token
+# formatted as a string and outputs to stdout a new update token and
+# all files that have been modified since the update token. Paths must
+# be relative to the root of the working tree and separated by a single NUL.
+#
+# To enable this hook, rename this file to "query-watchman" and set
+# 'git config core.fsmonitor .git/hooks/query-watchman'
+#
+my ($version, $last_update_token) = @ARGV;
+
+# Uncomment for debugging
+# print STDERR "$0 $version $last_update_token\n";
+
+# Check the hook interface version
+if ($version ne 2) {
+	die "Unsupported query-fsmonitor hook version '$version'.\n" .
+	    "Falling back to scanning...\n";
+}
+
+my $git_work_tree = get_working_dir();
+
+my $retry = 1;
+
+my $json_pkg;
+eval {
+	require JSON::XS;
+	$json_pkg = "JSON::XS";
+	1;
+} or do {
+	require JSON::PP;
+	$json_pkg = "JSON::PP";
+};
+
+launch_watchman();
+
+sub launch_watchman {
+	my $o = watchman_query();
+	if (is_work_tree_watched($o)) {
+		output_result($o->{clock}, @{$o->{files}});
+	}
+}
+
+sub output_result {
+	my ($clockid, @files) = @_;
+
+	# Uncomment for debugging watchman output
+	# open (my $fh, ">", ".git/watchman-output.out");
+	# binmode $fh, ":utf8";
+	# print $fh "$clockid\n@files\n";
+	# close $fh;
+
+	binmode STDOUT, ":utf8";
+	print $clockid;
+	print "\0";
+	local $, = "\0";
+	print @files;
+}
+
+sub watchman_clock {
+	my $response = qx/watchman clock "$git_work_tree"/;
+	die "Failed to get clock id on '$git_work_tree'.\n" .
+		"Falling back to scanning...\n" if $? != 0;
+
+	return $json_pkg->new->utf8->decode($response);
+}
+
+sub watchman_query {
+	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
+	or die "open2() failed: $!\n" .
+	"Falling back to scanning...\n";
+
+	# In the query expression below we're asking for names of files that
+	# changed since $last_update_token but not from the .git folder.
+	#
+	# To accomplish this, we're using the "since" generator to use the
+	# recency index to select candidate nodes and "fields" to limit the
+	# output to file names only. Then we're using the "expression" term to
+	# further constrain the results.
+	my $last_update_line = "";
+	if (substr($last_update_token, 0, 1) eq "c") {
+		$last_update_token = "\"$last_update_token\"";
+		$last_update_line = qq[\n"since": $last_update_token,];
+	}
+	my $query = <<"	END";
+		["query", "$git_work_tree", {$last_update_line
+			"fields": ["name"],
+			"expression": ["not", ["dirname", ".git"]]
+		}]
+	END
+
+	# Uncomment for debugging the watchman query
+	# open (my $fh, ">", ".git/watchman-query.json");
+	# print $fh $query;
+	# close $fh;
+
+	print CHLD_IN $query;
+	close CHLD_IN;
+	my $response = do {local $/; <CHLD_OUT>};
+
+	# Uncomment for debugging the watch response
+	# open ($fh, ">", ".git/watchman-response.json");
+	# print $fh $response;
+	# close $fh;
+
+	die "Watchman: command returned no output.\n" .
+	"Falling back to scanning...\n" if $response eq "";
+	die "Watchman: command returned invalid output: $response\n" .
+	"Falling back to scanning...\n" unless $response =~ /^\{/;
+
+	return $json_pkg->new->utf8->decode($response);
+}
+
+sub is_work_tree_watched {
+	my ($output) = @_;
+	my $error = $output->{error};
+	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
+		$retry--;
+		my $response = qx/watchman watch "$git_work_tree"/;
+		die "Failed to make watchman watch '$git_work_tree'.\n" .
+		    "Falling back to scanning...\n" if $? != 0;
+		$output = $json_pkg->new->utf8->decode($response);
+		$error = $output->{error};
+		die "Watchman: $error.\n" .
+		"Falling back to scanning...\n" if $error;
+
+		# Uncomment for debugging watchman output
+		# open (my $fh, ">", ".git/watchman-output.out");
+		# close $fh;
+
+		# Watchman will always return all files on the first query so
+		# return the fast "everything is dirty" flag to git and do the
+		# Watchman query just to get it over with now so we won't pay
+		# the cost in git to look up each individual file.
+		my $o = watchman_clock();
+		$error = $output->{error};
+
+		die "Watchman: $error.\n" .
+		"Falling back to scanning...\n" if $error;
+
+		output_result($o->{clock}, ("/"));
+		$last_update_token = $o->{clock};
+
+		eval { launch_watchman() };
+		return 0;
+	}
+
+	die "Watchman: $error.\n" .
+	"Falling back to scanning...\n" if $error;
+
+	return 1;
+}
+
+sub get_working_dir {
+	my $working_dir;
+	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
+		$working_dir = Win32::GetCwd();
+		$working_dir =~ tr/\\/\//;
+	} else {
+		require Cwd;
+		$working_dir = Cwd::cwd();
+	}
+
+	return $working_dir;
+}
+
+================
+File: reference/.git/hooks/post-update.sample
+================
+#!/bin/sh
+#
+# An example hook script to prepare a packed repository for use over
+# dumb transports.
+#
+# To enable this hook, rename this file to "post-update".
+
+exec git update-server-info
+
+================
+File: reference/.git/hooks/pre-applypatch.sample
+================
+#!/bin/sh
+#
+# An example hook script to verify what is about to be committed
+# by applypatch from an e-mail message.
+#
+# The hook should exit with non-zero status after issuing an
+# appropriate message if it wants to stop the commit.
+#
+# To enable this hook, rename this file to "pre-applypatch".
+
+. git-sh-setup
+precommit="$(git rev-parse --git-path hooks/pre-commit)"
+test -x "$precommit" && exec "$precommit" ${1+"$@"}
+:
+
+================
+File: reference/.git/hooks/pre-commit.sample
+================
+#!/bin/sh
+#
+# An example hook script to verify what is about to be committed.
+# Called by "git commit" with no arguments.  The hook should
+# exit with non-zero status after issuing an appropriate message if
+# it wants to stop the commit.
+#
+# To enable this hook, rename this file to "pre-commit".
+
+if git rev-parse --verify HEAD >/dev/null 2>&1
+then
+	against=HEAD
+else
+	# Initial commit: diff against an empty tree object
+	against=$(git hash-object -t tree /dev/null)
+fi
+
+# If you want to allow non-ASCII filenames set this variable to true.
+allownonascii=$(git config --type=bool hooks.allownonascii)
+
+# Redirect output to stderr.
+exec 1>&2
+
+# Cross platform projects tend to avoid non-ASCII filenames; prevent
+# them from being added to the repository. We exploit the fact that the
+# printable range starts at the space character and ends with tilde.
+if [ "$allownonascii" != "true" ] &&
+	# Note that the use of brackets around a tr range is ok here, (it's
+	# even required, for portability to Solaris 10's /usr/bin/tr), since
+	# the square bracket bytes happen to fall in the designated range.
+	test $(git diff --cached --name-only --diff-filter=A -z $against |
+	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
+then
+	cat <<\EOF
+Error: Attempt to add a non-ASCII file name.
+
+This can cause problems if you want to work with people on other platforms.
+
+To be portable it is advisable to rename the file.
+
+If you know what you are doing you can disable this check using:
+
+  git config hooks.allownonascii true
+EOF
+	exit 1
+fi
+
+# If there are whitespace errors, print the offending file names and fail.
+exec git diff-index --check --cached $against --
+
+================
+File: reference/.git/hooks/pre-merge-commit.sample
+================
+#!/bin/sh
+#
+# An example hook script to verify what is about to be committed.
+# Called by "git merge" with no arguments.  The hook should
+# exit with non-zero status after issuing an appropriate message to
+# stderr if it wants to stop the merge commit.
+#
+# To enable this hook, rename this file to "pre-merge-commit".
+
+. git-sh-setup
+test -x "$GIT_DIR/hooks/pre-commit" &&
+        exec "$GIT_DIR/hooks/pre-commit"
+:
+
+================
+File: reference/.git/hooks/pre-push.sample
+================
+#!/bin/sh
+
+# An example hook script to verify what is about to be pushed.  Called by "git
+# push" after it has checked the remote status, but before anything has been
+# pushed.  If this script exits with a non-zero status nothing will be pushed.
+#
+# This hook is called with the following parameters:
+#
+# $1 -- Name of the remote to which the push is being done
+# $2 -- URL to which the push is being done
+#
+# If pushing without using a named remote those arguments will be equal.
+#
+# Information about the commits which are being pushed is supplied as lines to
+# the standard input in the form:
+#
+#   <local ref> <local oid> <remote ref> <remote oid>
+#
+# This sample shows how to prevent push of commits where the log message starts
+# with "WIP" (work in progress).
+
+remote="$1"
+url="$2"
+
+zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
+
+while read local_ref local_oid remote_ref remote_oid
+do
+	if test "$local_oid" = "$zero"
+	then
+		# Handle delete
+		:
+	else
+		if test "$remote_oid" = "$zero"
+		then
+			# New branch, examine all commits
+			range="$local_oid"
+		else
+			# Update to existing branch, examine new commits
+			range="$remote_oid..$local_oid"
+		fi
+
+		# Check for WIP commit
+		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
+		if test -n "$commit"
+		then
+			echo >&2 "Found WIP commit in $local_ref, not pushing"
+			exit 1
+		fi
+	fi
+done
+
+exit 0
+
+================
+File: reference/.git/hooks/pre-rebase.sample
+================
+#!/bin/sh
+#
+# Copyright (c) 2006, 2008 Junio C Hamano
+#
+# The "pre-rebase" hook is run just before "git rebase" starts doing
+# its job, and can prevent the command from running by exiting with
+# non-zero status.
+#
+# The hook is called with the following parameters:
+#
+# $1 -- the upstream the series was forked from.
+# $2 -- the branch being rebased (or empty when rebasing the current branch).
+#
+# This sample shows how to prevent topic branches that are already
+# merged to 'next' branch from getting rebased, because allowing it
+# would result in rebasing already published history.
+
+publish=next
+basebranch="$1"
+if test "$#" = 2
+then
+	topic="refs/heads/$2"
+else
+	topic=`git symbolic-ref HEAD` ||
+	exit 0 ;# we do not interrupt rebasing detached HEAD
+fi
+
+case "$topic" in
+refs/heads/??/*)
+	;;
+*)
+	exit 0 ;# we do not interrupt others.
+	;;
+esac
+
+# Now we are dealing with a topic branch being rebased
+# on top of master.  Is it OK to rebase it?
+
+# Does the topic really exist?
+git show-ref -q "$topic" || {
+	echo >&2 "No such branch $topic"
+	exit 1
+}
+
+# Is topic fully merged to master?
+not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
+if test -z "$not_in_master"
+then
+	echo >&2 "$topic is fully merged to master; better remove it."
+	exit 1 ;# we could allow it, but there is no point.
+fi
+
+# Is topic ever merged to next?  If so you should not be rebasing it.
+only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
+only_next_2=`git rev-list ^master           ${publish} | sort`
+if test "$only_next_1" = "$only_next_2"
+then
+	not_in_topic=`git rev-list "^$topic" master`
+	if test -z "$not_in_topic"
+	then
+		echo >&2 "$topic is already up to date with master"
+		exit 1 ;# we could allow it, but there is no point.
+	else
+		exit 0
+	fi
+else
+	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
+	/usr/bin/perl -e '
+		my $topic = $ARGV[0];
+		my $msg = "* $topic has commits already merged to public branch:\n";
+		my (%not_in_next) = map {
+			/^([0-9a-f]+) /;
+			($1 => 1);
+		} split(/\n/, $ARGV[1]);
+		for my $elem (map {
+				/^([0-9a-f]+) (.*)$/;
+				[$1 => $2];
+			} split(/\n/, $ARGV[2])) {
+			if (!exists $not_in_next{$elem->[0]}) {
+				if ($msg) {
+					print STDERR $msg;
+					undef $msg;
+				}
+				print STDERR " $elem->[1]\n";
+			}
+		}
+	' "$topic" "$not_in_next" "$not_in_master"
+	exit 1
+fi
+
+<<\DOC_END
+
+This sample hook safeguards topic branches that have been
+published from being rewound.
+
+The workflow assumed here is:
+
+ * Once a topic branch forks from "master", "master" is never
+   merged into it again (either directly or indirectly).
+
+ * Once a topic branch is fully cooked and merged into "master",
+   it is deleted.  If you need to build on top of it to correct
+   earlier mistakes, a new topic branch is created by forking at
+   the tip of the "master".  This is not strictly necessary, but
+   it makes it easier to keep your history simple.
+
+ * Whenever you need to test or publish your changes to topic
+   branches, merge them into "next" branch.
+
+The script, being an example, hardcodes the publish branch name
+to be "next", but it is trivial to make it configurable via
+$GIT_DIR/config mechanism.
+
+With this workflow, you would want to know:
+
+(1) ... if a topic branch has ever been merged to "next".  Young
+    topic branches can have stupid mistakes you would rather
+    clean up before publishing, and things that have not been
+    merged into other branches can be easily rebased without
+    affecting other people.  But once it is published, you would
+    not want to rewind it.
+
+(2) ... if a topic branch has been fully merged to "master".
+    Then you can delete it.  More importantly, you should not
+    build on top of it -- other people may already want to
+    change things related to the topic as patches against your
+    "master", so if you need further changes, it is better to
+    fork the topic (perhaps with the same name) afresh from the
+    tip of "master".
+
+Let's look at this example:
+
+		   o---o---o---o---o---o---o---o---o---o "next"
+		  /       /           /           /
+		 /   a---a---b A     /           /
+		/   /               /           /
+	       /   /   c---c---c---c B         /
+	      /   /   /             \         /
+	     /   /   /   b---b C     \       /
+	    /   /   /   /             \     /
+    ---o---o---o---o---o---o---o---o---o---o---o "master"
+
+
+A, B and C are topic branches.
+
+ * A has one fix since it was merged up to "next".
+
+ * B has finished.  It has been fully merged up to "master" and "next",
+   and is ready to be deleted.
+
+ * C has not merged to "next" at all.
+
+We would want to allow C to be rebased, refuse A, and encourage
+B to be deleted.
+
+To compute (1):
+
+	git rev-list ^master ^topic next
+	git rev-list ^master        next
+
+	if these match, topic has not merged in next at all.
+
+To compute (2):
+
+	git rev-list master..topic
+
+	if this is empty, it is fully merged to "master".
+
+DOC_END
+
+================
+File: reference/.git/hooks/pre-receive.sample
+================
+#!/bin/sh
+#
+# An example hook script to make use of push options.
+# The example simply echoes all push options that start with 'echoback='
+# and rejects all pushes when the "reject" push option is used.
+#
+# To enable this hook, rename this file to "pre-receive".
+
+if test -n "$GIT_PUSH_OPTION_COUNT"
+then
+	i=0
+	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
+	do
+		eval "value=\$GIT_PUSH_OPTION_$i"
+		case "$value" in
+		echoback=*)
+			echo "echo from the pre-receive-hook: ${value#*=}" >&2
+			;;
+		reject)
+			exit 1
+		esac
+		i=$((i + 1))
+	done
+fi
+
+================
+File: reference/.git/hooks/prepare-commit-msg.sample
+================
+#!/bin/sh
+#
+# An example hook script to prepare the commit log message.
+# Called by "git commit" with the name of the file that has the
+# commit message, followed by the description of the commit
+# message's source.  The hook's purpose is to edit the commit
+# message file.  If the hook fails with a non-zero status,
+# the commit is aborted.
+#
+# To enable this hook, rename this file to "prepare-commit-msg".
+
+# This hook includes three examples. The first one removes the
+# "# Please enter the commit message..." help message.
+#
+# The second includes the output of "git diff --name-status -r"
+# into the message, just before the "git status" output.  It is
+# commented because it doesn't cope with --amend or with squashed
+# commits.
+#
+# The third example adds a Signed-off-by line to the message, that can
+# still be edited.  This is rarely a good idea.
+
+COMMIT_MSG_FILE=$1
+COMMIT_SOURCE=$2
+SHA1=$3
+
+/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"
+
+# case "$COMMIT_SOURCE,$SHA1" in
+#  ,|template,)
+#    /usr/bin/perl -i.bak -pe '
+#       print "\n" . `git diff --cached --name-status -r`
+# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
+#  *) ;;
+# esac
+
+# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
+# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
+# if test -z "$COMMIT_SOURCE"
+# then
+#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
+# fi
+
+================
+File: reference/.git/hooks/push-to-checkout.sample
+================
+#!/bin/sh
+
+# An example hook script to update a checked-out tree on a git push.
+#
+# This hook is invoked by git-receive-pack(1) when it reacts to git
+# push and updates reference(s) in its repository, and when the push
+# tries to update the branch that is currently checked out and the
+# receive.denyCurrentBranch configuration variable is set to
+# updateInstead.
+#
+# By default, such a push is refused if the working tree and the index
+# of the remote repository has any difference from the currently
+# checked out commit; when both the working tree and the index match
+# the current commit, they are updated to match the newly pushed tip
+# of the branch. This hook is to be used to override the default
+# behaviour; however the code below reimplements the default behaviour
+# as a starting point for convenient modification.
+#
+# The hook receives the commit with which the tip of the current
+# branch is going to be updated:
+commit=$1
+
+# It can exit with a non-zero status to refuse the push (when it does
+# so, it must not modify the index or the working tree).
+die () {
+	echo >&2 "$*"
+	exit 1
+}
+
+# Or it can make any necessary changes to the working tree and to the
+# index to bring them to the desired state when the tip of the current
+# branch is updated to the new commit, and exit with a zero status.
+#
+# For example, the hook can simply run git read-tree -u -m HEAD "$1"
+# in order to emulate git fetch that is run in the reverse direction
+# with git push, as the two-tree form of git read-tree -u -m is
+# essentially the same as git switch or git checkout that switches
+# branches while keeping the local changes in the working tree that do
+# not interfere with the difference between the branches.
+
+# The below is a more-or-less exact translation to shell of the C code
+# for the default behaviour for git's push-to-checkout hook defined in
+# the push_to_deploy() function in builtin/receive-pack.c.
+#
+# Note that the hook will be executed from the repository directory,
+# not from the working tree, so if you want to perform operations on
+# the working tree, you will have to adapt your code accordingly, e.g.
+# by adding "cd .." or using relative paths.
+
+if ! git update-index -q --ignore-submodules --refresh
+then
+	die "Up-to-date check failed"
+fi
+
+if ! git diff-files --quiet --ignore-submodules --
+then
+	die "Working directory has unstaged changes"
+fi
+
+# This is a rough translation of:
+#
+#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
+if git cat-file -e HEAD 2>/dev/null
+then
+	head=HEAD
+else
+	head=$(git hash-object -t tree --stdin </dev/null)
+fi
+
+if ! git diff-index --quiet --cached --ignore-submodules $head --
+then
+	die "Working directory has staged changes"
+fi
+
+if ! git read-tree -u -m "$commit"
+then
+	die "Could not update working tree to new HEAD"
+fi
+
+================
+File: reference/.git/hooks/update.sample
+================
+#!/bin/sh
+#
+# An example hook script to block unannotated tags from entering.
+# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
+#
+# To enable this hook, rename this file to "update".
+#
+# Config
+# ------
+# hooks.allowunannotated
+#   This boolean sets whether unannotated tags will be allowed into the
+#   repository.  By default they won't be.
+# hooks.allowdeletetag
+#   This boolean sets whether deleting tags will be allowed in the
+#   repository.  By default they won't be.
+# hooks.allowmodifytag
+#   This boolean sets whether a tag may be modified after creation. By default
+#   it won't be.
+# hooks.allowdeletebranch
+#   This boolean sets whether deleting branches will be allowed in the
+#   repository.  By default they won't be.
+# hooks.denycreatebranch
+#   This boolean sets whether remotely creating branches will be denied
+#   in the repository.  By default this is allowed.
+#
+
+# --- Command line
+refname="$1"
+oldrev="$2"
+newrev="$3"
+
+# --- Safety check
+if [ -z "$GIT_DIR" ]; then
+	echo "Don't run this script from the command line." >&2
+	echo " (if you want, you could supply GIT_DIR then run" >&2
+	echo "  $0 <ref> <oldrev> <newrev>)" >&2
+	exit 1
+fi
+
+if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
+	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
+	exit 1
+fi
+
+# --- Config
+allowunannotated=$(git config --type=bool hooks.allowunannotated)
+allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
+denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
+allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
+allowmodifytag=$(git config --type=bool hooks.allowmodifytag)
+
+# check for no description
+projectdesc=$(sed -e '1q' "$GIT_DIR/description")
+case "$projectdesc" in
+"Unnamed repository"* | "")
+	echo "*** Project description file hasn't been set" >&2
+	exit 1
+	;;
+esac
+
+# --- Check types
+# if $newrev is 0000...0000, it's a commit to delete a ref.
+zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
+if [ "$newrev" = "$zero" ]; then
+	newrev_type=delete
+else
+	newrev_type=$(git cat-file -t $newrev)
+fi
+
+case "$refname","$newrev_type" in
+	refs/tags/*,commit)
+		# un-annotated tag
+		short_refname=${refname##refs/tags/}
+		if [ "$allowunannotated" != "true" ]; then
+			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
+			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
+			exit 1
+		fi
+		;;
+	refs/tags/*,delete)
+		# delete tag
+		if [ "$allowdeletetag" != "true" ]; then
+			echo "*** Deleting a tag is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	refs/tags/*,tag)
+		# annotated tag
+		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
+		then
+			echo "*** Tag '$refname' already exists." >&2
+			echo "*** Modifying a tag is not allowed in this repository." >&2
+			exit 1
+		fi
+		;;
+	refs/heads/*,commit)
+		# branch
+		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
+			echo "*** Creating a branch is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	refs/heads/*,delete)
+		# delete branch
+		if [ "$allowdeletebranch" != "true" ]; then
+			echo "*** Deleting a branch is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	refs/remotes/*,commit)
+		# tracking branch
+		;;
+	refs/remotes/*,delete)
+		# delete tracking branch
+		if [ "$allowdeletebranch" != "true" ]; then
+			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	*)
+		# Anything else (is there anything else?)
+		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
+		exit 1
+		;;
+esac
+
+# --- Finished
+exit 0
+
+================
+File: reference/.git/info/exclude
+================
+# git ls-files --others --exclude-from=.git/info/exclude
+# Lines that start with '#' are comments.
+# For a project mostly in C, the following would be a good set of
+# exclude patterns (uncomment them if you want to use them):
+# *.[oa]
+# *~
+
+================
+File: reference/.git/logs/refs/heads/main
+================
+0000000000000000000000000000000000000000 0c32f7764e928daf9473961c488e6e9a855339d2 Luke Nittmann <luke.nittmann@gmail.com> 1738221446 -0800	clone: from https://github.com/internet-development/www-internet-v2.git
+
+================
+File: reference/.git/logs/refs/remotes/origin/HEAD
+================
+0000000000000000000000000000000000000000 0c32f7764e928daf9473961c488e6e9a855339d2 Luke Nittmann <luke.nittmann@gmail.com> 1738221446 -0800	clone: from https://github.com/internet-development/www-internet-v2.git
+
+================
+File: reference/.git/logs/HEAD
+================
+0000000000000000000000000000000000000000 0c32f7764e928daf9473961c488e6e9a855339d2 Luke Nittmann <luke.nittmann@gmail.com> 1738221446 -0800	clone: from https://github.com/internet-development/www-internet-v2.git
+
+================
+File: reference/.git/refs/heads/main
+================
+0c32f7764e928daf9473961c488e6e9a855339d2
+
+================
+File: reference/.git/refs/remotes/origin/HEAD
+================
+ref: refs/remotes/origin/main
+
+================
+File: reference/.git/config
+================
+[core]
+	repositoryformatversion = 0
+	filemode = true
+	bare = false
+	logallrefupdates = true
+	ignorecase = true
+	precomposeunicode = true
+[remote "origin"]
+	url = https://github.com/internet-development/www-internet-v2.git
+	fetch = +refs/heads/*:refs/remotes/origin/*
+[branch "main"]
+	remote = origin
+	merge = refs/heads/main
+	vscode-merge-base = origin/main
+
+================
+File: reference/.git/description
+================
+Unnamed repository; edit this file 'description' to name the repository.
+
+================
+File: reference/.git/FETCH_HEAD
+================
+0c32f7764e928daf9473961c488e6e9a855339d2		branch 'main' of https://github.com/internet-development/www-internet-v2
+
+================
+File: reference/.git/HEAD
+================
+ref: refs/heads/main
+
+================
+File: reference/.git/packed-refs
+================
+# pack-refs with: peeled fully-peeled sorted 
+0c32f7764e928daf9473961c488e6e9a855339d2 refs/remotes/origin/main
+
+================
+File: reference/app/office/head.tsx
+================
+import DefaultMetaTags from '@components/DefaultMetaTags';
+
+export default async function Head({ params }) {
+  return (
+    <>
+      <DefaultMetaTags />
+    </>
+  );
+}
+
+================
+File: reference/app/office/layout.tsx
+================
+import Providers from '@components/Providers';
+
+export default function RootLayout({ children }: { children: React.ReactNode }) {
+  return (
+    <html lang="en-us">
+      <body className="theme-light">
+        <Providers>{children}</Providers>
+      </body>
+    </html>
+  );
+}
+
+================
+File: reference/app/office/page.tsx
+================
+import '@root/global.scss';
+
+import * as Constants from '@common/constants';
+import * as Utilities from '@common/utilities';
+
+import Accordion from '@components/Accordion';
+import ActionListItem from '@components/ActionListItem';
+import Canvas from '@components/Canvas';
+import DefaultLayout from '@components/page/DefaultLayout';
+import InternetDevelopmentLogo from '@components/svg/InternetDevelopmentLogo';
+import InternetDevelopmentLogoMark from '@components/svg/InternetDevelopmentLogoMark';
+import Table from '@components/Table';
+import TableRow from '@components/TableRow';
+import TableColumn from '@components/TableColumn';
+import Package from '@root/package.json';
+import styles from '@components/page/root.module.scss';
+
+export const dynamic = 'force-static';
+
+const VIDEO_URL = 'https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/03025ac3-aa78-4a21-ac3c-a465cb792d39.mp4';
+
+export async function generateMetadata({ params, searchParams }) {
+  const title = `${Package.name} - OFFICE`;
+  const description = `Learn more about our Office in Pike Place, Seattle`;
+  const url = 'https://internet.dev';
+  const handle = '@internetxstudio';
+
+  return {
+    description,
+    icons: {
+      icon: '/favicon-32x32.png',
+      shortcut: '/favicon-16x16.png',
+    },
+    metadataBase: new URL('https://internet.dev/office'),
+    openGraph: {
+      description,
+      images: [
+        {
+          url: 'https://next-s3-public.s3.us-west-2.amazonaws.com/internet-dev/intdev.png',
+          width: 1500,
+          height: 785,
+        },
+      ],
+      title,
+      type: 'website',
+      url,
+    },
+    title,
+    twitter: {
+      card: 'summary_large_image',
+      description,
+      handle,
+      images: ['https://next-s3-public.s3.us-west-2.amazonaws.com/internet-dev/intdev.png'],
+      title,
+      url,
+    },
+    url,
+  };
+}
+
+export default async function Page(props) {
+  return (
+    <DefaultLayout previewPixelSRC="https://intdev-global.s3.us-west-2.amazonaws.com/template-app-icon.png">
+      <div className={styles.row}>
+        <div className={styles.column} style={{ height: '176px', padding: 0 }}>
+          <Canvas />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <InternetDevelopmentLogo height="24px" />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <img className={styles.image} src="https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/7e6088bb-4ce2-47d9-9dfd-d658faed484d.png" />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <aside className={styles.aside}>
+            Champion Building, Pike Place
+            <br />
+            Seattle, Washington
+            <br />
+            United States of America, Earth
+          </aside>
+          <br />
+          <p className={styles.p}>We invite builders who love trying new things and learning to collaborate with us, guided by our values: everything matters, support your friends, and doing your best is more than enough.</p>
+          <br />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <img className={styles.image} src="https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/0bc8d758-d4a9-412e-aa28-1fa6e6481a9a.jpg" />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`What does the INTDEV office offer?`}>
+            <br />
+            Our space offers hardwood floors, symmetrical fiber internet, a local area network, two full kitchens, three meeting booths, a server room, lunch tables, and dedicated workstations. With 24/7 access and amenities like a color printer, shredder, scanner, gallery lounge, and triple-filtered water, we foster a collaborative environment where you can build your vision alongside like-minded peers.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Apply on Users Garden
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Manage your account
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+              Read our Office Use Agreement
+            </ActionListItem>
+            <br />
+            <br /> <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <img className={styles.image} src="https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/6dcedf7d-82d1-45db-a53e-31de509a7759.jpg" />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How do I work with INTDEV at their office?`}>
+            <br />
+            You can find an application link below or by reaching out through social. Please note that the INTDEV reserved desks are invite-only and intended for those with a genuine interest in building things together.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Apply on Users Garden
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Manage your account
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+              Read our Office Use Agreement
+            </ActionListItem>
+            <br />
+            <br /> <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <img className={styles.image} src="https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/9c524b6a-855e-4329-88cd-7bb81796fcc2.jpg" />
+          <br />
+        </div>
+      </div>
+
+      <footer className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <ActionListItem icon={`⊹`} href="https://wireframes.internet.dev/" target="_blank">
+            Explore INTDEV's open source work
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://github.com/orgs/internet-development/repositories" target="_blank">
+            Follow us on GitHub
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://www.linkedin.com/company/internet-dev" target="_blank">
+            Follow us on LinkedIn
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://www.instagram.com/internetdevelopmentstudio/" target="_blank">
+            Follow us on Instagram
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://read.cv/teams/intdev" target="_blank">
+            Follow us on Read.cv
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://x.com/internetxstudio" target="_blank">
+            Follow us on X
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+            Get our attention on Telegram
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="/">
+            Go home
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+            Manage your account
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-acceptable-use" target="_blank">
+            Read our Acceptable Use Policy
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+            Read our Office Use Agreement
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-privacy-policy" target="_blank">
+            Read our Privacy Policy
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-terms-of-service" target="_blank">
+            Read our Terms of Use
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://github.com/internet-development/www-internet-v2" target="_blank">
+            View source
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev" target="_blank">
+            Write a post
+          </ActionListItem>
+          <br />
+          Copyright © 2025. All rights reserved.
+          <br />
+          <br />
+          <br />
+        </div>
+      </footer>
+    </DefaultLayout>
+  );
+}
+
+================
+File: reference/app/head.tsx
+================
+import DefaultMetaTags from '@components/DefaultMetaTags';
+
+export default async function Head({ params }) {
+  return (
+    <>
+      <DefaultMetaTags />
+    </>
+  );
+}
+
+================
+File: reference/app/layout.tsx
+================
+import Providers from '@components/Providers';
+
+export default function RootLayout({ children }: { children: React.ReactNode }) {
+  return (
+    <html lang="en-us">
+      <body className="theme-light">
+        <Providers>{children}</Providers>
+      </body>
+    </html>
+  );
+}
+
+================
+File: reference/app/manifest.ts
+================
+import Package from '@root/package.json';
+
+import { MetadataRoute } from 'next';
+
+export default function manifest(): MetadataRoute.Manifest {
+  return {
+    background_color: '#ffffff',
+    description: Package.description,
+    display: 'standalone',
+    icons: [
+      {
+        src: '/favicon.ico',
+        sizes: 'any',
+        type: 'image/x-icon',
+      },
+    ],
+    name: Package.name,
+    short_name: Package.name,
+    start_url: '/',
+    theme_color: '#ffffff',
+  };
+}
+
+================
+File: reference/app/page.tsx
+================
+import '@root/global.scss';
+
+import * as Constants from '@common/constants';
+import * as Utilities from '@common/utilities';
+
+import Accordion from '@components/Accordion';
+import ActionListItem from '@components/ActionListItem';
+import Canvas from '@components/Canvas';
+import DefaultLayout from '@components/page/DefaultLayout';
+import InternetDevelopmentLogo from '@components/svg/InternetDevelopmentLogo';
+import InternetDevelopmentLogoMark from '@components/svg/InternetDevelopmentLogoMark';
+import Table from '@components/Table';
+import TableRow from '@components/TableRow';
+import TableColumn from '@components/TableColumn';
+import Package from '@root/package.json';
+import styles from '@components/page/root.module.scss';
+
+export const dynamic = 'force-static';
+
+const VIDEO_URL = 'https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/03025ac3-aa78-4a21-ac3c-a465cb792d39.mp4';
+
+export async function generateMetadata({ params, searchParams }) {
+  const title = Package.name;
+  const description = Package.description;
+  const url = 'https://internet.dev';
+  const handle = '@internetxstudio';
+
+  return {
+    description,
+    icons: {
+      icon: '/favicon-32x32.png',
+      shortcut: '/favicon-16x16.png',
+    },
+    metadataBase: new URL('https://internet.dev'),
+    openGraph: {
+      description,
+      images: [
+        {
+          url: 'https://next-s3-public.s3.us-west-2.amazonaws.com/internet-dev/intdev.png',
+          width: 1500,
+          height: 785,
+        },
+      ],
+      title,
+      type: 'website',
+      url,
+    },
+    title,
+    twitter: {
+      card: 'summary_large_image',
+      description,
+      handle,
+      images: ['https://next-s3-public.s3.us-west-2.amazonaws.com/internet-dev/intdev.png'],
+      title,
+      url,
+    },
+    url,
+  };
+}
+
+export default async function Page(props) {
+  return (
+    <DefaultLayout previewPixelSRC="https://intdev-global.s3.us-west-2.amazonaws.com/template-app-icon.png">
+      <div className={styles.row}>
+        <div className={styles.column} style={{ height: '176px', padding: 0 }}>
+          <Canvas />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <video className={styles.video} src={VIDEO_URL} autoPlay muted loop playsInline preload="auto">
+            Your browser does not support the video tag.
+          </video>
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <h1 className={styles.h1}>Internet Development Studio Company ("INTDEV")</h1>
+          <aside className={styles.aside}>
+            Champion Building, Pike Place
+            <br />
+            Seattle, Washington
+            <br />
+            United States of America, Earth
+          </aside>
+          <br />
+          <p className={styles.p}>An american vocation guild and great hall for webmasters. Every day we practice the craft of designing, building, shipping, and maintaining websites, platforms, brands, and applications—end to end.</p>
+          <br />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <ActionListItem icon={`⊹`} href="https://wireframes.internet.dev/" target="_blank">
+            Explore INTDEV's open source work
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+            Get our attention on Telegram
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://sacred.computer" target="_blank">
+            Go explore SRCL
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="/office">
+            Learn more about the Pike Place office
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://www.beautifulthings.xyz/" target="_blank">
+            Look at beautiful things
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+            Manage your account
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev" target="_blank">
+            Write a post
+          </ActionListItem>
+
+          <br />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`What does the Internet Development Studio Company ("INTDEV") actually do?`}>
+            <br />
+            We provide a team you can hire to get things done.
+            <br />
+            <br />
+            That team is a 6 person dedicated tiger team specializing in delivering high-performance web applications, internal tools, branding assets, presentations, static websites, LLM interfaces, illustrations, productivity applications, technical writing, and general web development services. By embedding with up to four companies at a time, we allocate a shared bandwidth of 360 hours per week to drive productivity and deliver results. It’s a process we genuinely enjoy, and every major milestone we knock out helps us grow and learn.
+            <br />
+            <br />
+            We also provide an invite-only space in Seattle for people to work alongside us, offering a collaborative environment that also serves the portfolio venture companies of{' '}
+            <a href="https://mana.inc" target="_blank">
+              Mana Industries Fund 1 LP
+            </a>{' '}
+            and contributors.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://wireframes.internet.dev/" target="_blank">
+              Explore INTDEV's open source work
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`Who did INTDEV work for in 2024?`}>
+            <br />
+            Aliaksandr Hudzilin, Bakken & Bæck, Beautiful Things, El Cap Capital, Google, Mana Industries, Microsoft, Protocol Labs and various startups.
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`Who is INTDEV working for in 2025?`}>
+            <br />
+            Microsoft
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How does an engagement with INTDEV typically feel?`}>
+            <br />
+            Imagine hiring your own team, and one that already has a well-established design and engineering culture.
+            <br />
+            <br />
+            By hiring us, you gain a team that works seamlessly in person, is highly productive, and has a proven track record. This is all made possible by the extensive successful startup experience shared across our team.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How much does it cost to hire this team?`}>
+            <br />
+            <Table>
+              <TableRow>
+                <TableColumn>ONE MONTH</TableColumn>
+                <TableColumn>$70,000 USD</TableColumn>
+              </TableRow>
+
+              <TableRow>
+                <TableColumn>THREE MONTHS</TableColumn>
+                <TableColumn>$195,000 USD</TableColumn>
+              </TableRow>
+
+              <TableRow>
+                <TableColumn>SIX MONTHS</TableColumn>
+                <TableColumn>$360,000 USD</TableColumn>
+              </TableRow>
+
+              <TableRow>
+                <TableColumn>NINE MONTHS</TableColumn>
+                <TableColumn>$495,000 USD</TableColumn>
+              </TableRow>
+
+              <TableRow>
+                <TableColumn>TWELVE MONTHS</TableColumn>
+                <TableColumn>$600,000 USD</TableColumn>
+              </TableRow>
+            </Table>
+            <br />
+            From the start, it will feel like you built this team yourself.
+            <br />
+            <br />
+            We don’t do change orders—instead, we aim to complete as much work as possible within our estimates while you have us on retainer. This approach is ideal for situations where you want to accomplish a lot efficiently.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`Why do I have to hire the full six-person team?`}>
+            <br />
+            Our studio fosters deep in-person collaboration, where we openly discuss challenges and make a concerted effort to learn and improve our skills through shared experiences.
+            <br />
+            <br />
+            This approach strengthens our team and enables us to support venture-backed companies with tight deadlines and ambitious goals. By learning from each other’s mistakes, we continually refine our work and strive to hit the mark every time.
+            <br />
+            <br />
+            Also, it should be known that, based on our prices, you're only paying the cost of a full-time employee for a much larger headcount. A lot of clients find this to be high value.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`Is there a discount if we want to work with less people from the INTDEV?`}>
+            <br />
+            No, but as a client, you are welcome to work with fewer team members if that is your preference.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How does working with the INTDEV work day to day?`}>
+            <br />
+            Here’s a glimpse of what it’s like to collaborate with our six-person team.
+            <br />
+            <br />
+            <Accordion defaultValue={true} title={`Discovery Video Call`}>
+              <br />
+              We begin with a video call to understand your goals and explore how our team can deliver results. We’re flexible with your preferred video chat platform.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`[OPTIONAL] First Meeting in Seattle, WA`}>
+              <br />
+              Join us at our Pike Place office to work alongside our team as we dive into your goals. You’re welcome to use our meeting rooms and open desks, meet other companies, and enjoy engaging conversations. We always have filtered water and are here on weekends, too.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Onboarding`}>
+              <br />
+              From day one, we integrate seamlessly into your team, bringing years of experience and familiarity with compliance requirements like NDAs. Comfortable across Linux, MacOS, and Windows, we’re happy to train your employees when needed and adapt to your existing tools and processes.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Embedding`}>
+              <br />
+              We adapt to the roles you need, whether following your direction or advocating for key features, integrating into your daily routine at whatever level you require. Comfortable with agile, waterfall, or even a “move fast and break things” approach, we’re always ready to embrace challenges.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Working in the Office`}>
+              <br />
+              We can host stand-ups and any meetings you need in our office, with meeting rooms perfect for bringing in your own customers. Sharing the space often leads to team-building, and we’re happy to host and cook for large groups with a little notice. <br />
+              <br />
+              Pike Place offers great restaurants and scenic spots for breaks, though guest parking isn’t available, so please plan accordingly. Our office features symmetrical fiber internet and quiet workspaces, and we keep our client list small to stay flexible and accommodating.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Technical Program Management`}>
+              <br />
+              We help identify your Technical Program Management needs, aligning your team around a shared goal with fresh perspectives. We guide long-term strategic decisions, define “done” from the start, and set expectations upfront. We bring experience from high-profile projects while focusing on supporting your vision and helping you achieve it.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Zero to One`}>
+              <br />
+              With over a decade of startup experience, our design partners help bring your product to market for the first time and support future launches, treating each launch as a personal milestone. We love exploring logos, drawing inspiration from our collection of books, and rely on tools like Figma, Sketch, Photoshop, and Illustrator. <br />
+              <br />
+              Our network also includes some of Seattle’s top photographers and videographers, many of whom work directly in our space.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Get in Quick`}>
+              <br />
+              When you need quick results without extra discussion, we’re ready to jump in, whether it’s tackling long-standing backlogs, handling one-off tasks, or adding missing design system components. We can deliver results without delay. <br />
+              <br />
+              We’re unfazed by technical debt, comfortable managing tricky repository forks, and always ready to take on backlog tasks—just let us know how we can help.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Tooling Investment`}>
+              <br />
+              We know a team’s identity is often shaped by the tools they use. Whether you’re looking to strengthen your current toolkit or start fresh, we can help. Our expertise spans tools like Next.js, Postgres, Figma, GSAP, and Tailwind, along with CSS dialects like CSS-in-JS and email-compliant inline styles. <br />
+              <br />
+              With one of our partners contributing to Expo (React Native), we deeply value tooling. We respect your existing tools while embracing fresh starts that energize teams and foster growth. Involve us in consulting meetings for fresh perspectives—we’re always ready to explore new technologies, including LLMs.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Launch, Maintain, and Survive`}>
+              <br />
+              Your uptime is critical, and while we can’t promise 99.9999999% uptime at scale, we specialize in keeping websites running with low effort on your part. This allows you to focus on growing your product and engaging your customers without unnecessary distractions.
+              <br />
+              <br />
+              Whether you need help with IPFS, managing VPS, consulting on on-premise solutions, or working with tools like Fly, Vercel, and Render, we’ve got you covered. With experience in GCE, GCS, AWS EC2, S3, and database backups, we’re here to ensure your systems work.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Supporting Volatility`}>
+              <br />
+              If you’re navigating changes in priorities, we offer the flexibility to help you adapt. We understand that leadership shifts happen, and we’re here to support you while keeping your team focused on what matters most. Whether starting fresh or removing what’s not working, our flexible deal structure evolves with your needs, always aligned with your goal of driving success and growth for your business.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Libraries and Documentation`}>
+              <br />
+              We value great documentation and design systems, even if they’re not always a priority for everyone. We can create clear, user-friendly documentation and develop intuitive design systems for your web products, building tools to make these processes more efficient. <br />
+              <br />
+              Whether working with tools like Scalar, GitBook, and Notion or contributing to publications, blog posts, and video tutorials, we’re happy to provide custom solutions to meet your needs.
+              <br />
+              <br />
+            </Accordion>
+            <br />
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`What is INTDEV's relationship with the University of Washington?`}>
+            <br />
+            If your department requires a website that complies with the latest legal standards, is powered by modern web tooling, and boasts a functional design, partner with us. We read 313 pages of documentation for you.
+            <br />
+            <br />
+            We admire the{' '}
+            <a href="https://www.washington.edu/" target="_blank">
+              University of Washington
+            </a>
+            ’s dedication to innovation and inclusivity, and the alumni who work in our office proudly align our mission with these values. As designers, we are committed to ensuring that every website we create is not only modern but also accessible.
+            <br />
+            <br />
+            <a href="https://www.federalregister.gov/documents/2024/04/24/2024-07758/nondiscrimination-on-the-basis-of-disability-accessibility-of-web-information-and-services-of-state" target="_blank">
+              The guidelines
+            </a>{' '}
+            released by the Department of Justice under Title II of the Americans with Disabilities Act (ADA) have set a new bar for digital accessibility, which we embrace. Effective April 24, 2024, these standards require all web content to achieve compliance by April 24, 2026.
+            <br />
+            <br />
+            <Accordion defaultValue={true} title={`Ensuring all web content and mobile applications meet the Web Content Accessibility Guidelines (WCAG) 2.1, Level AA standards.`}>
+              <br />
+              This is a cornerstone of our approach to accessibility. We achieve this through rigorous processes and meticulous attention to detail. Our team follows best practices to make sure every user has a seamless and inclusive experience.
+              <br />
+              <br />
+              <Table>
+                <TableRow>
+                  <TableColumn>Semantic HTML</TableColumn>
+                  <TableColumn>We use semantic HTML to define the structure and meaning of web content, ensuring assistive technologies can interpret and navigate the site effectively.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Keyboard Accessibility</TableColumn>
+                  <TableColumn>We ensure all features are accessible via keyboard for users who cannot use a mouse.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Color Contrast</TableColumn>
+                  <TableColumn>We employ high-contrast color schemes to ensure text is readable by users with visual impairments while adhering to UW’s brand guidelines.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Alternative Text</TableColumn>
+                  <TableColumn>We provide descriptive text for images and multimedia content, helping screen readers convey information accurately to visually impaired users.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Resizable Text</TableColumn>
+                  <TableColumn>Our designs allow for text resizing without loss of content or functionality, catering to users who need larger fonts.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Error Identification and Suggestion</TableColumn>
+                  <TableColumn>Our forms are designed to identify errors and provide suggestions for correction, improving usability for those with cognitive disabilities.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Consistent Navigation</TableColumn>
+                  <TableColumn>Our predictable navigation and layouts help users with cognitive and learning disabilities.</TableColumn>
+                </TableRow>
+              </Table>
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Providing alternative text for all visual media, including images, videos, and interactive elements.`}>
+              <br />
+              Alternative text ensures that all users, including those with visual impairments, can fully understand and engage with all content on the website.
+              <br />
+              <br />
+              <Table>
+                <TableRow>
+                  <TableColumn>Descriptive Alt Text for Images</TableColumn>
+                  <TableColumn>We provide concise and descriptive alternative text for all images, enabling screen reader users to understand the context and content of visual elements.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Detailed Descriptions for Complex Images</TableColumn>
+                  <TableColumn>For complex images such as charts, infographics, or detailed diagrams, we offer extended descriptions to convey all critical information effectively.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Captions for Videos</TableColumn>
+                  <TableColumn>All video content includes synchronized captions, ensuring that users with hearing impairments can access the information being presented.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Transcripts for Audio Content</TableColumn>
+                  <TableColumn>We provide textual transcripts for all audio content, making it accessible to users with hearing impairments and allowing for easier comprehension during listening.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Text Alternatives for Interactive Elements</TableColumn>
+                  <TableColumn>Interactive elements, such as buttons, forms, and dynamic content, come with clear text alternatives or labels that describe their function and purpose.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Accessible Icons</TableColumn>
+                  <TableColumn>We use ARIA labels or alternative text for icons and other graphical elements to ensure they communicate their meaning to assistive technologies.</TableColumn>
+                </TableRow>
+              </Table>
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Making complex navigational structures accessible with clear and user-friendly interfaces.`}>
+              <br />
+              This is a fundamental aspect of our design philosophy. We believe that every user deserves an accessible browsing experience, regardless of the complexity of the content.
+              <br />
+              <br />
+              <Table>
+                <TableRow>
+                  <TableColumn>Logical Menu Hierarchies</TableColumn>
+                  <TableColumn>We design navigation menus with logical hierarchies, ensuring that users can easily find the information they need with minimal clicks.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Descriptive Links</TableColumn>
+                  <TableColumn>All links are clearly labeled with descriptive text, so users understand where each link will take them, aiding both screen readers and visual users.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Accessible Dropdown Menus</TableColumn>
+                  <TableColumn>Our dropdown menus are designed to be keyboard-accessible and screen reader-friendly, ensuring inclusivity for all users.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Breadcrumb Navigation</TableColumn>
+                  <TableColumn>We employ breadcrumb navigation to help users understand their current location within the website and easily backtrack if necessary.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Search Functionality</TableColumn>
+                  <TableColumn>We integrate advanced search functionalities, allowing users to quickly locate specific content without navigating through multiple menus.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Consistent Layouts</TableColumn>
+                  <TableColumn>We maintain consistency in layouts and navigation across all pages, so users can predict and understand where to find information.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Skip Navigation Links</TableColumn>
+                  <TableColumn>Our skip links allow users to bypass repetitive content and navigate directly to the main content, which is particularly helpful for screen reader users.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Visual Indicators</TableColumn>
+                  <TableColumn>Clear visual indicators highlight the current page or section, helping users keep track of their navigation path.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>ARIA Landmarks</TableColumn>
+                  <TableColumn>We implement ARIA (Accessible Rich Internet Applications) landmarks to define regions of a page, making it easier for screen reader users to navigate and skip to different sections.</TableColumn>
+                </TableRow>
+              </Table>
+              <br />
+              <br />
+            </Accordion>
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How do I join INTDEV as a Webmaster?`}>
+            <br />
+            In 2025, we plan to grow our team from six to eight members. If you’re passionate about the vocation of being a Webmaster, let’s talk.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://wireframes.internet.dev/examples/features/job-posting" target="_blank">
+              View the job
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`What does the INTDEV office offer?`}>
+            <br />
+            Our space offers hardwood floors, symmetrical fiber internet, a local area network, two full kitchens, three meeting booths, a server room, lunch tables, and dedicated workstations. With 24/7 access and amenities like a color printer, shredder, scanner, gallery lounge, and triple-filtered water, we foster a collaborative environment where you can build your vision alongside like-minded peers.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Apply on Users Garden
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Manage your account
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+              Read our Office Use Agreement
+            </ActionListItem>
+            <br />
+            <br /> <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How do I work with INTDEV at their office?`}>
+            <br />
+            You can find an application link below or by reaching out through social. Please note that the INTDEV reserved desks are invite-only and intended for those with a genuine interest in building things together.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Apply on Users Garden
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Manage your account
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+              Read our Office Use Agreement
+            </ActionListItem>
+            <br />
+            <br /> <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          Use this SVG for a logo without the word “INTDEV.”
+          <br />
+          <br />
+          <InternetDevelopmentLogoMark height="48px" />
+          <br />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          Use this SVG for a logo that includes our brand name.
+          <br />
+          <br />
+          <InternetDevelopmentLogo height="48px" />
+          <br />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <footer className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <img className={styles.image} src="https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/2fb7e012-4fa9-4446-9bf4-e2c5c7e4992a.jpg" />
+          <ActionListItem icon={`⊹`} href="https://wireframes.internet.dev/" target="_blank">
+            Explore INTDEV's open source work
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://bsky.app/profile/internetstudio.bsky.social" target="_blank">
+            Follow us on Bluesky
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://github.com/orgs/internet-development/repositories" target="_blank">
+            Follow us on GitHub
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://www.linkedin.com/company/internet-dev" target="_blank">
+            Follow us on LinkedIn
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://www.instagram.com/internetdevelopmentstudio/" target="_blank">
+            Follow us on Instagram
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://read.cv/teams/intdev" target="_blank">
+            Follow us on Read.cv
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://x.com/internetxstudio" target="_blank">
+            Follow us on X
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+            Get our attention on Telegram
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://sacred.computer" target="_blank">
+            Go explore SRCL
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="/office">
+            Learn more about the Pike Place office
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+            Manage your account
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-acceptable-use" target="_blank">
+            Read our Acceptable Use Policy
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+            Read our Office Use Agreement
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-privacy-policy" target="_blank">
+            Read our Privacy Policy
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-terms-of-service" target="_blank">
+            Read our Terms of Use
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://github.com/internet-development/www-internet-v2" target="_blank">
+            View source
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev" target="_blank">
+            Write a post
+          </ActionListItem>
+          <br />
+          Copyright © 2025. All rights reserved.
+          <br />
+          <br />
+          <br />
+        </div>
+      </footer>
+    </DefaultLayout>
+  );
+}
+
+================
+File: reference/app/robots.ts
+================
+import { MetadataRoute } from 'next';
+
+export default function robots(): MetadataRoute.Robots {
+  return {
+    rules: {
+      userAgent: '*',
+      allow: '/',
+      disallow: '/api/',
+    },
+    sitemap: 'https://internet.dev/sitemap.xml',
+  };
+}
+
+================
+File: reference/app/sitemap.ts
+================
+import { MetadataRoute } from 'next';
+
+export default function sitemap(): MetadataRoute.Sitemap {
+  return [
+    {
+      url: 'https://internet.dev',
+      lastModified: new Date(),
+    },
+  ];
+}
+
+================
+File: reference/common/constants.ts
+================
+export const MAX_SIZE_BYTES = 15728640;
+
+// NOTE(jimmylee):
+// https://github.com/internet-development/apis
+// export const API = `http://localhost:10001/api`;
+export const API = `https://api.internet.dev/api`;
+
+export const Users = {
+  tiers: {
+    UNVERIFIED: 0,
+    VERIFIED: 10,
+    PAYING: 20,
+    GENERAL_CO_WORKING: 30,
+    PARTNER: 40,
+    ADMIN: 100,
+  },
+};
+
+export const Tiers = {
+  PAYING: 899,
+  GENERAL_CO_WORKING: 32900,
+  PARTNER: 279000,
+};
+
+export const Payments = {
+  899: 'PAYING',
+  32900: 'GENERAL_CO_WORKING',
+  279000: 'PARTNER',
+};
+
+export const Payouts = {
+  PAYING: 1500,
+  GENERAL_CO_WORKING: 45000,
+  PARTNER: 45000,
+};
+
+export const LANDSCAPES = [
+  ['Sahara Desert', 'The Sahara stretches across North Africa with shifting dunes that tower above the horizon. Even in its harsh sunlight and cold nights, resilient life finds a way to endure.'],
+  ['Grand Canyon', 'Carved by the Colorado River, the Grand Canyon reveals layers of ancient rock. Its chasms echo with wind and the distant calls of raptors gliding through the afternoon sky.'],
+  ['Amazon Rainforest', 'The Amazon Rainforest teems with biodiversity under a dense green canopy. Rivers and flooded plains sustain countless species, while humid air hangs heavy with the promise of storms.'],
+  ['Rocky Mountains', 'The Rockies rise like rugged spines across the continent. Snowpack feeds rivers that carve valleys where elk graze, and fir trees cling to the slopes.'],
+  ['Gobi Desert', 'The Gobi Desert rolls out in arid sweeps across northern China and southern Mongolia. Sparse grasses and hardy camels testify to its unforgiving climate.'],
+  ['Andes Mountains', 'The Andes dominate western South America with ragged peaks and hidden valleys. Llamas graze on high plateaus, and glaciers feed the rivers far below.'],
+  ['Serengeti Plains', 'The Serengeti spreads under the African sun in rolling grasslands. Wildebeests and zebras migrate in vast herds, guided by the promise of water and fresh pasture.'],
+  ['Yosemite Valley', 'Glacial forces shaped this granite cradle in California. Towering waterfalls cascade from sheer cliffs, while giant sequoias stand in quiet strength.'],
+  ['Namib Desert', 'The Namib Desert clings to the Atlantic coast of southern Africa. Rust-red dunes shift above hidden water tables where desert elephants roam.'],
+  ['Patagonia', 'Patagonia’s windswept plains and jagged peaks stretch across Argentina and Chile. Glaciers calve into turquoise lakes, and guanacos graze on hardy grasses.'],
+  ['Swiss Alps', 'The Swiss Alps rise with sharp spires of snow and ice. Mountain chalets cling to slopes where wildflowers bloom each summer in vibrant displays.'],
+  ['Himalayas', 'The Himalayas hold the world’s highest summits beneath a freezing sky. From lush foothills to lofty glaciers, this range tests life’s resilience.'],
+  ['Icelandic Highlands', 'Iceland’s interior stands stark and raw with volcanic plains, steaming vents, and glacier-fed rivers. The wind sweeps across moss-coated lava fields in lonely gusts.'],
+  ['Atacama Desert', 'The Atacama is among the driest places on Earth. Its scorched soil and salt flats see rare blooms that burst into color after elusive rains.'],
+  ['Redwood Forest', 'Coastal redwoods tower in perpetual mist along the Pacific. Their trunks, thick and ancient, cradle a hidden world of fern and moss.'],
+  ['Scottish Highlands', 'The Highlands roll in rugged hills capped by heather and stone. Lochs reflect ever-shifting skies, and the wind carries the distant clang of sheep bells.'],
+  ['Great Rift Valley', 'This massive geological trench cleaves eastern Africa, where lakes shimmer at the bottom of steep escarpments. Flamingos gather in vast flocks to feed on algae.'],
+  ['Okavango Delta', 'The Okavango spreads like a bright labyrinth of channels and wetlands in Botswana. Seasonal floods create a green haven for elephants, lions, and hippos.'],
+  ['Appalachian Mountains', 'Old and eroded, the Appalachians meander through eastern North America. Their forests host black bears, rhododendrons, and the misty quiet of forest hollows.'],
+  ['Death Valley', 'Death Valley bakes under a relentless sun, reaching some of the hottest temperatures on record. Cracked salt flats testify to evaporated lakes and lost water.'],
+  ['Dolomites', 'Jagged limestone peaks define northern Italy’s Dolomites. Alpine meadows lie below sheer cliffs, where climbers test themselves against silent stone.'],
+  ['Torres del Paine', 'Chile’s Torres del Paine juts into the southern sky with glacier-fed lakes at its base. Guanacos roam windblown plains as ice cracks overhead.'],
+  ['Lofoten Islands', 'Lofoten’s dramatic peaks rise straight from Norway’s cold seas. Fishing villages huddle along rocky shores, while gulls circle overhead in crisp air.'],
+  ['Siberian Tundra', 'The Siberian tundra spans a realm of permafrost and low shrubs. Winters stretch long and bleak, yet migratory birds still find respite here each summer.'],
+  ['Norwegian Fjords', 'Deep fjords carve into Norway’s coast where dark waters mirror towering cliffs. Small farms cling to green patches between rock and sea.'],
+  ['Bungle Bungle Range', 'These striped sandstone domes rise from the Australian outback. Gorges cut deep under a harsh sun, hiding pockets of lush vegetation.'],
+  ['Zion Canyon', 'Zion Canyon glows red and orange under the Utah sky. The Virgin River sculpts sheer walls that watch over narrow trails and hidden pools.'],
+  ['Lake Baikal', 'Lake Baikal in Siberia is the world’s deepest lake. Its waters shimmer with unmatched clarity, home to species found nowhere else on Earth.'],
+  ['Banff National Park', 'Banff crowns the Canadian Rockies with turquoise lakes and towering peaks. Grizzlies roam pine forests while glacier-fed rivers reflect untouched wilderness.'],
+  ['Wadi Rum', 'Wadi Rum’s sandstone cliffs loom in Jordan’s desert, carved by millennia of wind and time. Nomadic tribes wander under a silent, star-filled sky.'],
+  ['Cappadocia', 'Cappadocia’s whimsical rock formations rise over central Turkey’s plains. Soft stone spires hold hidden chapels and the ghosts of ancient dwellers.'],
+];
+
+export const SAMPLE_TABLE_DATA_CHANGE_ME = [
+  ['NAME', 'SYMBOL', 'PRICE', 'HOLDINGS'],
+  ['Bat', 'BAT', '$9.01', '400'],
+  ['Bear', 'BR', '$56.78', '200'],
+  ['Camel', 'CML', '$55.67', '70'],
+  ['Cheetah', 'CHT', '$13.45', '150'],
+  ['Crab', 'CRB', '$15.67', '250'],
+  ['Deer', 'DER', '$29.99', '110'],
+  ['Dolphin', 'DLP', '$77.89', '50'],
+  ['Eagle', 'EGL', '$45.67', '90'],
+  ['Falcon', 'FLC', '$40.22', '85'],
+  ['Fox', 'FOX', '$12.34', '100'],
+  ['Frog', 'FRG', '$7.89', '400'],
+  ['Giraffe', 'GRF', '$44.56', '80'],
+  ['Hedgehog', 'HDG', '$11.23', '200'],
+  ['Horse', 'HRS', '$54.32', '70'],
+  ['Kangaroo', 'KNG', '$15.67', '120'],
+  ['Koala', 'KLA', '$22.34', '150'],
+  ['Leopard', 'LPR', '$14.56', '110'],
+  ['Lemur', 'LMR', '$11.12', '320'],
+  ['Lion', 'LION', '$67.89', '80'],
+  ['Lynx', 'LNX', '$16.78', '130'],
+  ['Mouse', 'MSE', '$5.12', '500'],
+  ['Octopus', 'OCT', '$88.90', '40'],
+  ['Otter', 'OTR', '$20.21', '180'],
+  ['Owl', 'OWL', '$19.01', '160'],
+  ['Panda', 'PND', '$78.90', '55'],
+  ['Peacock', 'PCK', '$12.34', '100'],
+  ['Penguin', 'PNG', '$33.45', '90'],
+  ['Porcupine', 'PRC', '$17.89', '140'],
+  ['Rabbit', 'RBT', '$9.10', '350'],
+  ['Raccoon', 'RCC', '$18.90', '150'],
+  ['Shark', 'SHK', '$89.01', '50'],
+  ['Snake', 'SNK', '$10.11', '300'],
+  ['Squirrel', 'SQL', '$10.12', '250'],
+  ['Tiger', 'TGR', '$34.56', '120'],
+  ['Turtle', 'TRL', '$66.78', '60'],
+  ['Whale', 'WHL', '$123.45', '30'],
+  ['Wolf', 'WLF', '$23.45', '150'],
+  ['Zebra', 'ZBR', '$65.43', '60'],
+];
+
+export const CHESSBOARD_DEFAULT_POSITIONS: string[][] = [
+  ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'],
+  ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],
+  ['', '', '', '', '', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],
+  ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R'],
+];
+
+export const CHESSBOARD_BAD_BISHOP: string[][] = [
+  ['r', ' ', ' ', 'q', ' ', 'r', 'k', ''],
+  [' ', 'b', ' ', ' ', ' ', 'p', 'p', 'p'],
+  ['p', '', 'p', 'b', 'p', 'n', '', ''],
+  ['', '', 'p', 'p', '', '', '', ''],
+  ['Q', '', '', 'P', '', '', '', ''],
+  ['', '', 'P', '', 'P', 'N', 'B', ''],
+  ['P', 'P', ' ', 'N', '', 'P', 'P', 'P'],
+  ['R', ' ', ' ', ' ', 'K', ' ', ' ', 'R'],
+];
+
+export const CHESSBOARD_CHECKMATE_STEP_ONE: string[][] = [
+  [' ', ' ', ' ', '', ' ', 'r', ' ', 'r'],
+  ['p', 'b', ' ', 'n', ' ', 'p', ' ', 'k'],
+  ['', 'q', '', 'N', 'p', '', '', ''],
+  ['', 'p', 'p', 'n', 'P', '', 'Q', ''],
+  ['', 'b', 'p', 'P', 'B', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['P', 'P', ' ', ' ', ' ', 'P', 'P', 'P'],
+  ['R', ' ', ' ', ' ', ' ', 'R', 'K', ''],
+];
+
+export const CHESSBOARD_CHECKMATE_STEP_TWO: string[][] = [
+  [' ', ' ', ' ', '', ' ', 'r', ' ', 'r'],
+  ['p', 'b', ' ', 'n', ' ', ' ', ' ', 'k'],
+  ['', 'q', '', 'N', 'p', '', '', ''],
+  ['', 'p', 'p', 'n', 'P', 'p', 'Q', ''],
+  ['', 'b', 'p', 'P', 'B', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['P', 'P', ' ', ' ', ' ', 'P', 'P', 'P'],
+  ['R', ' ', ' ', ' ', ' ', 'R', 'K', ''],
+];
+
+export const CHESSBOARD_CHECKMATE_STEP_THREE: string[][] = [
+  [' ', ' ', ' ', '', ' ', 'r', ' ', 'r'],
+  ['p', 'b', ' ', 'n', ' ', ' ', ' ', 'k'],
+  ['', 'q', '', 'N', 'p', 'P', '', ''],
+  ['', 'p', 'p', 'n', '', '', 'Q', ''],
+  ['', 'b', 'p', 'P', 'B', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['P', 'P', ' ', ' ', ' ', 'P', 'P', 'P'],
+  ['R', ' ', ' ', ' ', ' ', 'R', 'K', ''],
+];
+
+================
+File: reference/common/hooks.ts
+================
+import * as React from 'react';
+
+export function useDebouncedCallback<T>(ms: number, f: (...args: T[]) => void, deps: any[]): (...args: T[]) => void {
+  let throttled = false;
+  let latestArgs: T | null = null;
+
+  const clearThrottle = () => {
+    throttled = false;
+
+    if (latestArgs !== null) {
+      f(latestArgs);
+      latestArgs = null;
+    }
+  };
+
+  return React.useCallback(
+    (args) => {
+      if (throttled) {
+        latestArgs = args;
+      } else {
+        f(args);
+
+        throttled = true;
+
+        setTimeout(clearThrottle, ms);
+      }
+    },
+    [...deps, ms]
+  );
+}
+
+================
+File: reference/common/position.ts
+================
+export type Placement = 'top' | 'bottom' | 'left' | 'right';
+
+export function calculate(triggerElement: HTMLElement, popoverElement: HTMLElement, scrollX: number = window.scrollX, scrollY: number = window.scrollY): { placement: Placement; position: { top: number; left: number } } {
+  let triggerRect;
+  let popoverRect;
+
+  if (triggerElement) {
+    triggerRect = triggerElement.getBoundingClientRect();
+  }
+
+  if (popoverElement) {
+    popoverRect = popoverElement.getBoundingClientRect();
+  }
+
+  const spaceAbove = triggerRect.top;
+  const spaceBelow = window.innerHeight - triggerRect.bottom;
+  const spaceLeft = triggerRect.left;
+  const spaceRight = window.innerWidth - triggerRect.right;
+
+  const viewportHeightThreshold = window.innerHeight * 0.4;
+  const viewportWidthThreshold = window.innerWidth * 0.4;
+
+  let placement: Placement = 'bottom';
+  let top = 0;
+  let left = 0;
+  if (!popoverRect) {
+    return { placement, position: { top: 0, left: 0 } };
+  }
+
+  if (spaceAbove >= viewportHeightThreshold && spaceAbove >= popoverRect.height) {
+    placement = 'top';
+    top = triggerRect.top + scrollY - popoverRect.height;
+    left = triggerRect.left + scrollX + (triggerRect.width - popoverRect.width) / 2;
+  } else if (spaceBelow >= viewportHeightThreshold && spaceBelow >= popoverRect.height) {
+    placement = 'bottom';
+    top = triggerRect.bottom + scrollY;
+    left = triggerRect.left + scrollX + (triggerRect.width - popoverRect.width) / 2;
+  } else if (spaceRight >= viewportWidthThreshold && spaceRight >= popoverRect.width) {
+    placement = 'right';
+    top = triggerRect.top + scrollY + (triggerRect.height - popoverRect.height) / 2;
+    left = triggerRect.right + scrollX;
+  } else if (spaceLeft >= viewportWidthThreshold && spaceLeft >= popoverRect.width) {
+    placement = 'left';
+    top = triggerRect.top + scrollY + (triggerRect.height - popoverRect.height) / 2;
+    left = triggerRect.left + scrollX - popoverRect.width;
+  } else {
+    placement = 'bottom';
+    top = triggerRect.bottom + scrollY;
+    left = triggerRect.left + scrollX + (triggerRect.width - popoverRect.width) / 2;
+  }
+
+  if (left < 0) left = 0;
+  else if (left + popoverRect.width > window.innerWidth) left = window.innerWidth - popoverRect.width;
+
+  if (top < 0) top = 0;
+  else if (top + popoverRect.height > window.innerHeight + scrollY) top = window.innerHeight + scrollY - popoverRect.height;
+
+  return { placement, position: { top, left } };
+}
+
+================
+File: reference/common/queries.ts
+================
+import * as Constants from '@common/constants';
+import * as Utilities from '@common/utilities';
+
+export async function getData({ route, key, body }, qualifier = 'data') {
+  let result;
+  try {
+    const response = await fetch(route, {
+      method: 'POST',
+      headers: { 'X-API-KEY': key, 'Content-Type': 'application/json' },
+      body: JSON.stringify(body),
+    });
+    result = await response.json();
+  } catch (e) {
+    return null;
+  }
+
+  if (!result) {
+    return null;
+  }
+
+  if (result.error) {
+    return null;
+  }
+
+  if (!result[qualifier]) {
+    return null;
+  }
+
+  return result;
+}
+
+export async function onUserListData({ key }) {
+  const route = `${Constants.API}/data`;
+  const body = {};
+  return await getData({ route, key, body });
+}
+
+export async function onUserDeleteData({ id, key }) {
+  const route = `${Constants.API}/data/delete`;
+  const body = { id };
+  return await getData({ route, key, body });
+}
+
+export async function onRefreshDocuments({ key, type, domain }) {
+  const route = `${Constants.API}/documents`;
+  const body = { type, domain };
+  return await getData({ route, key, body });
+}
+
+export async function onGetDocumentById({ id }) {
+  const route = `${Constants.API}/documents/${id}`;
+  const body = {};
+  return await getData({ route, key: null, body });
+}
+
+export async function onUserCreateDocument({ key, type, domain }) {
+  const route = `${Constants.API}/documents/create`;
+  const body = { type, domain };
+  return await getData({ route, key, body });
+}
+
+export async function onDeleteDocumentById({ id, key }) {
+  const route = `${Constants.API}/documents/delete`;
+  const body = { id };
+  return await getData({ route, key, body });
+}
+
+export async function onUpdateDocumentById({ id, key, data }) {
+  const route = `${Constants.API}/documents/update`;
+  const body = { id, data };
+  return await getData({ route, key, body });
+}
+
+export async function onPublicUserAuthenticate({ email, password }) {
+  const route = `${Constants.API}/users/authenticate`;
+  const body = { email, password };
+  return getData({ route, key: null, body }, 'user');
+}
+
+export async function onPublicUserForgotPassword({ email }) {
+  const route = `${Constants.API}/users/reset-password`;
+  const body = { email, source: 'wireframes.internet.dev' };
+  return getData({ route, key: null, body }, 'success');
+}
+
+export async function onUserChangePassword({ key, password }) {
+  const route = `${Constants.API}/users/update-viewer-password`;
+  const body = { password };
+  return getData({ route, key, body });
+}
+
+export async function onUserRegenerateAPIKey({ email, password }) {
+  const route = `${Constants.API}/users/regenerate-key`;
+  const body = { email, password };
+  return getData({ route, key: null, body }, 'user');
+}
+
+export async function onUserUnsubscribeServices({ key }) {
+  const route = `${Constants.API}/users/subscriptions/unsubscribe`;
+  const body = null;
+  return getData({ route, key, body }, 'user');
+}
+
+export async function onRefreshPosts({ key, type, user_id }) {
+  const route = `${Constants.API}/posts`;
+  const body = { type, user_id };
+  return await getData({ route, key, body });
+}
+
+export async function onUserCreatePost({ id, key, src, type }) {
+  const route = `${Constants.API}/posts/create`;
+  const body = { type, fields: { fileId: id, public: true }, src };
+  return getData({ route, key, body });
+}
+
+export async function onUserCreateThread({ fields, key, src, type }) {
+  const route = `${Constants.API}/posts/create`;
+  const body = { fields, src, type };
+  return getData({ route, key, body });
+}
+
+export async function onUserDeletePost({ id, key }) {
+  const route = `${Constants.API}/posts/delete`;
+  const body = { id };
+  return getData({ route, key, body });
+}
+
+export async function onUserListThreadReplies({ id, key, orderBy }) {
+  const route = `${Constants.API}/posts/all-thread-replies`;
+  const body = { id, orderBy };
+  return getData({ route, key, body });
+}
+
+export async function onUserListThreads({ key, orderBy }) {
+  const route = `${Constants.API}/posts/all-threads`;
+  const body = { orderBy };
+  return getData({ route, key, body });
+}
+
+export async function onUserUploadDataGCS({ domain, file, key }) {
+  let signedResult;
+  const name = file.name;
+  const type = file.type;
+  const size = file.size;
+
+  if (size > Constants.MAX_SIZE_BYTES) {
+    return { error: 'File size exceeds 15mb limit' };
+  }
+
+  try {
+    const route = `${Constants.API}/data/generate-presigned-url-gcs`;
+    const body = { domain, type, file: name, size };
+    signedResult = await getData({ route, key, body }, 'uploadURL');
+  } catch (e) {
+    return null;
+  }
+
+  try {
+    fetch(signedResult.uploadURL, {
+      method: 'PUT',
+      headers: {
+        'Content-Type': 'application/octet-stream',
+      },
+      body: file,
+    });
+  } catch (e) {
+    return null;
+  }
+
+  return signedResult;
+}
+
+export async function onUserUploadDataS3({ domain, file, key }) {
+  let signedResult;
+  const name = file.name;
+  const type = file.type;
+  const size = file.size;
+
+  if (size > Constants.MAX_SIZE_BYTES) {
+    return { error: 'File size exceeds 15mb limit' };
+  }
+
+  try {
+    const route = `${Constants.API}/data/generate-presigned-url`;
+    const body = { domain, type, file: name, size };
+    signedResult = await getData({ route, key, body }, 'uploadURL');
+  } catch (e) {
+    return null;
+  }
+
+  try {
+    fetch(signedResult.uploadURL, {
+      method: 'PUT',
+      body: file,
+    });
+  } catch (e) {
+    return null;
+  }
+
+  return signedResult;
+}
+
+================
+File: reference/common/server.ts
+================
+import * as Utilities from '@common/utilities';
+
+import Cors from '@modules/cors';
+
+// NOTE(jimmylee)
+// import aesjs from 'aes-js';
+/*
+Some endpoints on https://api.internet.dev require server-side decryption. Without it, you won’t be able to perform actions like password recovery or Google authentication. To enable these features, you’ll need to set two environment variables with the correct values, and have an active partnership with us.
+
+When we built this open-source template for learning purposes, we aimed to make it fully open and accessible. However, since we are also running a service, certain restrictions are necessary. We appreciate your understanding.
+
+API_AES_KEY=
+API_IV_KEY=
+*/
+
+/*
+export function decrypt(hex) {
+  if (Utilities.isEmpty(process.env.API_AES_KEY)) {
+    throw new Error('process.env.API_AES_KEY');
+    return;
+  }
+
+  if (Utilities.isEmpty(process.env.API_IV_KEY)) {
+    throw new Error('process.env.API_IV_KEY');
+    return;
+  }
+
+  const aesKey = aesjs.utils.utf8.toBytes(process.env.API_AES_KEY);
+  const base64IV = process.env.API_IV_KEY;
+
+  if (!base64IV) {
+    throw new Error('process.env.API_IV_KEY is undefined. Please set the environment variable.');
+  }
+
+  const ivBytes = aesjs.utils.hex.toBytes(Buffer.from(base64IV, 'base64').toString('hex'));
+  const aesCtr = new aesjs.ModeOfOperation.ctr(aesKey, new aesjs.Counter(ivBytes));
+  const encryptedBytes = aesjs.utils.hex.toBytes(hex);
+  const decryptedBytes = aesCtr.decrypt(encryptedBytes);
+  const decrypted = aesjs.utils.utf8.fromBytes(decryptedBytes);
+
+  return decrypted;
+}
+*/
+
+export function initMiddleware(middleware) {
+  return (req, res) =>
+    new Promise((resolve, reject) => {
+      middleware(req, res, (result) => {
+        if (result instanceof Error) {
+          return reject(result);
+        }
+        return resolve(result);
+      });
+    });
+}
+
+export const cors = initMiddleware(
+  Cors({
+    methods: ['GET', 'POST', 'DELETE', 'OPTIONS'],
+  })
+);
+
+export async function setup(context): Promise<{ sessionKey?: any; viewer?: Record<string, any> | null }> {
+  let viewer = null;
+  let sessionKey = context.req.cookies['sitekey'] || '';
+
+  if (!Utilities.isEmpty(sessionKey)) {
+    try {
+      const response = await fetch('https://api.internet.dev/api/users/viewer', {
+        method: 'PUT',
+        headers: { 'X-API-KEY': sessionKey, 'Content-Type': 'application/json' },
+      });
+      const result = await response.json();
+      if (result && result.viewer) {
+        viewer = result.viewer;
+      }
+    } catch (e) {}
+  }
+
+  return { sessionKey, viewer };
+}
+
+export async function tryKeyWithoutCookie(key): Promise<{ sessionKey?: any; viewer?: Record<string, any> | null }> {
+  let viewer = null;
+
+  if (!Utilities.isEmpty(key)) {
+    try {
+      const response = await fetch('https://api.internet.dev/api/users/viewer', {
+        method: 'PUT',
+        headers: { 'X-API-KEY': key, 'Content-Type': 'application/json' },
+      });
+      const result = await response.json();
+      if (result && result.viewer) {
+        viewer = result.viewer;
+      }
+    } catch (e) {}
+  }
+
+  return { sessionKey: key, viewer };
+}
+
+================
+File: reference/common/utilities.ts
+================
+const hasOwn = {}.hasOwnProperty;
+const localhostDomainRE = /^localhost[\:?\d]*(?:[^\:?\d]\S*)?$/;
+const nonLocalhostDomainRE = /^[^\s\.]+\.\S{2,}$/;
+const protocolAndDomainRE = /^(?:\w+:)?\/\/(\S+)$/;
+
+export function noop() {
+  return null;
+}
+
+export function pluralize(text: string, count: number) {
+  return count > 1 || count === 0 ? `${text}s` : text;
+}
+
+export function getOrdinalNumber(n) {
+  return n + (n > 0 ? ['th', 'st', 'nd', 'rd'][(n > 3 && n < 21) || n % 10 > 3 ? 0 : n % 10] : '');
+}
+
+// NOTE(jimmylee)
+// Stolen from: https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/deepEqual.ts
+export function deepEqual(x: any, y: any): boolean {
+  //@ts-ignore
+  return x && y && typeof x === 'object' && typeof y === 'object'
+    ? Object.keys(x).length === Object.keys(y).length &&
+        //@ts-ignore
+        Object.keys(x).reduce((isEqual, key) => isEqual && deepEqual(x[key], y[key]), true)
+    : x === y;
+}
+
+export function getDomainFromEmailWithoutAnySubdomain(email: string): string {
+  const atIndex = email.lastIndexOf('@');
+  if (atIndex === -1) {
+    return '';
+  }
+
+  const domain = email.slice(atIndex + 1);
+  const domainParts = domain.split('.');
+
+  if (domainParts.length < 2) {
+    return '';
+  }
+
+  const mainDomain = domainParts.slice(-2).join('.');
+  return mainDomain;
+}
+
+export function onHandleThemeChange(className?: string) {
+  const body = document.body;
+
+  body.classList.forEach((existingClass) => {
+    if (existingClass.startsWith('theme-')) {
+      body.classList.remove(existingClass);
+    }
+  });
+
+  if (className) {
+    body.classList.add(className);
+  } else {
+    body.classList.add('theme-light');
+  }
+}
+
+export function onHandleFontChange(className?: string) {
+  const body = document.body;
+
+  if (className) {
+    body.classList.forEach((existingClass) => {
+      if (existingClass.startsWith('font-')) {
+        body.classList.remove(existingClass);
+      }
+    });
+
+    body.classList.add(className);
+    return;
+  }
+
+  body.classList.forEach((existingClass) => {
+    if (existingClass.startsWith('font-')) {
+      body.classList.remove(existingClass);
+    }
+  });
+}
+
+export function formatDollars(value: number): string {
+  return new Intl.NumberFormat('en-US', {
+    style: 'currency',
+    currency: 'USD',
+  }).format(value);
+}
+
+export function calculatePositionWithGutter(rect, objectWidth, viewportWidth, gutter = 24) {
+  const right = viewportWidth - rect.right;
+  const top = rect.top + rect.height + gutter;
+  const side = right + objectWidth >= viewportWidth ? 'left' : 'right';
+  const adjustedRight = side === 'left' ? viewportWidth - objectWidth - gutter : right;
+  return { top, right: adjustedRight, side };
+}
+
+export function calculatePositionWithGutterById(id, objectWidth, viewportWidth, gutter?) {
+  let rect;
+  if (id) {
+    const el = document.getElementById(id);
+    if (el) {
+      rect = el.getBoundingClientRect();
+    }
+  }
+  return calculatePositionWithGutter(rect, objectWidth, viewportWidth, gutter);
+}
+
+export function leftPad(input, length) {
+  const zerosNeeded = length - input.length;
+  if (zerosNeeded <= 0) {
+    return input;
+  }
+
+  const zeros = '0'.repeat(zerosNeeded);
+
+  return zeros + input;
+}
+
+export function toDateISOString(data: string) {
+  const date = new Date(data);
+  const dayOfWeek = date.toLocaleDateString('en-US', {
+    weekday: 'long',
+  });
+  const month = date.toLocaleDateString('en-US', {
+    month: 'long',
+  });
+  const dayOfMonth = getOrdinalNumber(date.getDate());
+  const year = date.getFullYear();
+
+  const formattedDate = `${dayOfWeek}, ${month} ${dayOfMonth}, ${year}`;
+
+  return formattedDate;
+}
+
+export function elide(string, length = 140, emptyState = '...') {
+  if (isEmpty(string)) {
+    return emptyState;
+  }
+
+  if (string.length < length) {
+    return string.trim();
+  }
+
+  return `${string.substring(0, length)}...`;
+}
+
+export function bytesToSize(bytes: number, decimals: number = 2) {
+  if (bytes === 0) return '0 Bytes';
+
+  const k = 1000;
+  const dm = decimals < 0 ? 0 : decimals;
+  const sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
+
+  const i = Math.floor(Math.log(bytes) / Math.log(k));
+
+  return `${(bytes / Math.pow(k, i)).toFixed(dm)} ${sizes[i]}`;
+}
+
+export function isEmpty(text: any) {
+  // NOTE(jimmylee):
+  // If a number gets passed in, it isn't considered empty for zero.
+  if (text === 0) {
+    return false;
+  }
+
+  if (!text) {
+    return true;
+  }
+
+  if (typeof text === 'object') {
+    return true;
+  }
+
+  if (text.length === 0) {
+    return true;
+  }
+
+  text = text.toString();
+
+  return Boolean(!text.trim());
+}
+
+export function createSlug(text: any) {
+  if (isEmpty(text)) {
+    return 'untitled';
+  }
+
+  const a = 'æøåàáäâèéëêìíïîòóöôùúüûñçßÿœæŕśńṕẃǵǹḿǘẍźḧ·/_,:;';
+  const b = 'aoaaaaaeeeeiiiioooouuuuncsyoarsnpwgnmuxzh------';
+  const p = new RegExp(a.split('').join('|'), 'g');
+
+  return text
+    .toString()
+    .toLowerCase()
+    .replace(/\s+/g, '-') // Replace spaces with -
+    .replace(p, (c) => b.charAt(a.indexOf(c))) // Replace special chars
+    .replace(/&/g, '-and-') // Replace & with 'and'
+    .replace(/[^\w\-]+/g, '') // Remove all non-word chars
+    .replace(/\-\-+/g, '-') // Replace multiple - with single -
+    .replace(/^-+/, '') // Trim - from start of text
+    .replace(/-+$/, ''); // Trim - from end of text
+}
+
+export function isUrl(string: any) {
+  if (typeof string !== 'string') {
+    return false;
+  }
+
+  let match = string.match(protocolAndDomainRE);
+  if (!match) {
+    return false;
+  }
+
+  let everythingAfterProtocol = match[1];
+  if (!everythingAfterProtocol) {
+    return false;
+  }
+
+  if (localhostDomainRE.test(everythingAfterProtocol) || nonLocalhostDomainRE.test(everythingAfterProtocol)) {
+    return true;
+  }
+
+  return false;
+}
+
+export function debounce<Args extends unknown[]>(fn: (...args: Args) => void, delay: number) {
+  let timeoutID: number | undefined;
+  let lastArgs: Args | undefined;
+
+  const run = () => {
+    if (lastArgs) {
+      fn(...lastArgs);
+      lastArgs = undefined;
+    }
+  };
+
+  const debounced = (...args: Args) => {
+    clearTimeout(timeoutID);
+    lastArgs = args;
+    timeoutID = window.setTimeout(run, delay);
+  };
+
+  debounced.flush = () => {
+    clearTimeout(timeoutID);
+  };
+
+  return debounced;
+}
+
+export function timeAgo(dateInput: Date | string | number): string {
+  const date = new Date(dateInput);
+  const now = new Date();
+  const secondsPast = (now.getTime() - date.getTime()) / 1000;
+
+  if (secondsPast < 0 || isNaN(secondsPast)) {
+    return '[INVALID]';
+  }
+
+  if (secondsPast < 60) {
+    return 'Just now';
+  } else if (secondsPast < 3600) {
+    const minutes = Math.floor(secondsPast / 60);
+    return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;
+  } else if (secondsPast < 86400) {
+    const hours = Math.floor(secondsPast / 3600);
+    return `${hours} hour${hours > 1 ? 's' : ''} ago`;
+  } else if (secondsPast < 604800) {
+    const days = Math.floor(secondsPast / 86400);
+    return `${days} day${days > 1 ? 's' : ''} ago`;
+  }
+
+  const formattedDate = date.toLocaleDateString('en-US', {
+    month: '2-digit',
+    day: '2-digit',
+    year: 'numeric',
+  });
+
+  return formattedDate;
+}
+
+export function classNames(...args: any[]): string {
+  let classes: string[] = [];
+
+  for (let i = 0; i < arguments.length; i++) {
+    let arg = arguments[i];
+    if (!arg) continue;
+
+    let argType = typeof arg;
+
+    if (argType === 'string' || argType === 'number') {
+      classes.push(arg);
+    } else if (Array.isArray(arg)) {
+      if (arg.length) {
+        let inner = classNames.apply(null, arg);
+        if (inner) {
+          classes.push(inner);
+        }
+      }
+    } else if (argType === 'object') {
+      if (arg.toString !== Object.prototype.toString) {
+        classes.push(arg.toString());
+      } else {
+        for (let key in arg) {
+          if (hasOwn.call(arg, key) && arg[key]) {
+            classes.push(key);
+          }
+        }
+      }
+    }
+  }
+
+  return classes.join(' ');
+}
+
+export async function generateNonce() {
+  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
+  let result = '';
+  const charactersLength = characters.length;
+  for (let i = 0; i < 8; i++) {
+    result += characters.charAt(Math.floor(Math.random() * charactersLength));
+  }
+  return result;
+}
+
+export function filterUndefined(obj) {
+  const res = {};
+  Object.keys(obj)
+    .filter((k) => obj[k] !== undefined)
+    .forEach((k) => (res[k] = obj[k]));
+  return res;
+}
+
+export const isFocusableElement = (element: EventTarget | null): element is HTMLElement => {
+  if (!element || !(element instanceof HTMLElement)) {
+    return false;
+  }
+
+  const focusableSelectors = ['a[href]', 'button', 'input', 'select', 'textarea', '[tabindex]:not([tabindex="-1"])', '[contenteditable="true"]'];
+
+  return element.matches(focusableSelectors.join(', '));
+};
+
+export const findNextFocusable = (element: Element | null, direction: 'next' | 'previous' = 'next'): HTMLElement | null => {
+  if (!element) return null;
+
+  const focusableSelectors = ['a[href]', 'button', 'input', 'select', 'textarea', '[tabindex]:not([tabindex="-1"])', '[contenteditable="true"]'];
+
+  const focusableElements = Array.from(document.querySelectorAll<HTMLElement>(focusableSelectors.join(', ')));
+
+  const currentIndex = focusableElements.indexOf(element as HTMLElement);
+
+  if (currentIndex !== -1) {
+    const nextIndex = direction === 'next' ? (currentIndex + 1) % focusableElements.length : (currentIndex - 1 + focusableElements.length) % focusableElements.length;
+
+    return focusableElements[nextIndex];
+  }
+
+  return null;
+};
+
+export const findFocusableDescendant = (container: Element | null, currentFocused: Element | null = null, direction: 'next' | 'previous' = 'next'): HTMLElement | null => {
+  if (!container) return null;
+
+  const focusableElements = Array.from(container.querySelectorAll<HTMLElement>('a[href], button, input, select, textarea, [tabindex]:not([tabindex="-1"]), [contenteditable="true"]'));
+
+  if (focusableElements.length === 0) return null;
+
+  let index = 0;
+  if (currentFocused) {
+    const currentIndex = focusableElements.indexOf(currentFocused as HTMLElement);
+    if (currentIndex !== -1) {
+      index = direction === 'next' ? currentIndex + 1 : currentIndex - 1;
+    }
+  }
+
+  if (index >= 0 && index < focusableElements.length) {
+    return focusableElements[index];
+  }
+
+  return null;
+};
+
+================
+File: reference/components/detectors/OutsideElementEvent.tsx
+================
+import * as React from 'react';
+
+interface OutsideElementEventProps {
+  className?: string;
+  children: React.ReactNode;
+  onOutsideEvent: (event: MouseEvent | TouchEvent) => void;
+  style?: React.CSSProperties;
+}
+
+const OutsideElementEvent: React.FC<OutsideElementEventProps> = ({ className, children, onOutsideEvent, style }) => {
+  const ref = React.useRef<HTMLDivElement>(null);
+
+  const handleOutsideEvent = React.useCallback(
+    (event: MouseEvent | TouchEvent) => {
+      if (!(event.target instanceof Element)) return;
+
+      if (event.target.hasAttribute('data-detector-ignore')) {
+        return;
+      }
+
+      if (ref.current && !ref.current.contains(event.target as Node)) {
+        onOutsideEvent(event);
+      }
+    },
+    [onOutsideEvent]
+  );
+
+  React.useEffect(() => {
+    document.addEventListener('mousedown', handleOutsideEvent);
+    document.addEventListener('touchstart', handleOutsideEvent);
+
+    return () => {
+      document.removeEventListener('mousedown', handleOutsideEvent);
+      document.removeEventListener('touchstart', handleOutsideEvent);
+    };
+  }, [handleOutsideEvent]);
+
+  return (
+    <div ref={ref} className={className} style={style}>
+      {children}
+    </div>
+  );
+};
+
+export default OutsideElementEvent;
+
+================
+File: reference/components/examples/AS400.module.scss
+================
+.root {
+}
+
+================
+File: reference/components/examples/AS400.tsx
+================
+'use client';
+
+import styles from '@components/AS400.module.scss';
+
+import * as React from 'react';
+
+import Card from '@components/Card';
+import Row from '@components/Row';
+import RowSpaceBetween from '@components/RowSpaceBetween';
+import Table from '@components/Table';
+import TableRow from '@components/TableRow';
+import TableColumn from '@components/TableColumn';
+import TextArea from '@components/TextArea';
+
+type AS400Props = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const AS400 = () => {
+  return (
+    <>
+      <Card>
+        <RowSpaceBetween>
+          <span style={{ minWidth: `10ch` }}>COMMAND</span>
+          <span style={{ minWidth: `10ch` }}>Menu : ⌃+T</span>
+          <span style={{ minWidth: `10ch`, textAlign: 'right' }}>IND333</span>
+        </RowSpaceBetween>
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow style={{ textAlign: 'center' }}>
+            <TableColumn>F O O D&nbsp;&nbsp;D I S T R I B U T I O N</TableColumn>
+          </TableRow>
+          <TableRow style={{ textAlign: 'center' }}>
+            <TableColumn>- - Advance Sales Menu - -</TableColumn>
+          </TableRow>
+        </Table>
+        <br />
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow>
+            <TableColumn>1. Order Entry</TableColumn>
+            <TableColumn>13. Create Texlon/MSI Orders</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>2. Route Recap</TableColumn>
+            <TableColumn>14. Create Posting w/Scanner</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>3. Staging Ticket</TableColumn>
+            <TableColumn></TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>4. Picking Ticket</TableColumn>
+            <TableColumn>15. Order List</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>5. Order Posting</TableColumn>
+            <TableColumn>16. Order Maintenance</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>6. Bill of Lading</TableColumn>
+            <TableColumn>16. Order Hold</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>7. Load Sheets</TableColumn>
+            <TableColumn>18. Order Release</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>8. Order Entry Invoicing</TableColumn>
+            <TableColumn>19. Order Cancellation</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>9. Order Entry Confirmation</TableColumn>
+            <TableColumn>20. Order Change</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>10. Order Entry Processing</TableColumn>
+            <TableColumn>21. Unsettled Invoice Report</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>&nbsp;</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>11. Credit Memo Entry</TableColumn>
+            <TableColumn>- - Transaction Processing Menu - -</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>12. Credit Memo Processing</TableColumn>
+            <TableColumn>- - Main Menu - -</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn></TableColumn>
+            <TableColumn>24. Sign Off</TableColumn>
+          </TableRow>
+        </Table>
+        <br />
+        <br />
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow>
+            <TableColumn>Ready for option number or command</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>
+              <TextArea isBlink />
+            </TableColumn>
+          </TableRow>
+        </Table>
+      </Card>
+      <br />
+      <Card>
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;Option: 1337...&nbsp;&nbsp; Copy: US&nbsp;&nbsp;&nbsp;&nbsp;ITEM ACTIVITY INQUIRY</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>IND333</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Regn: NW</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}></TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;Item #: 6666666</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}></TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GMO HONEYDEW MELON USDA PRIME 72 OZ</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}></TableColumn>
+          </TableRow>
+        </Table>
+        <br />
+        <br />
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow>
+            <TableColumn>Warehouse</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>On Hand</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>On Order</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>In Transit</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>Total</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>W/S</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>Sell</TableColumn>
+          </TableRow>
+
+          <TableRow>
+            <TableColumn>&nbsp;</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;01 SEATTLE</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;02 PORTLAND</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;06 TUKWILA</TableColumn>
+            <TableColumn>89</TableColumn>
+            <TableColumn>162</TableColumn>
+            <TableColumn>162</TableColumn>
+            <TableColumn>413</TableColumn>
+            <TableColumn>7.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;08 KIRKLAND</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;09 ALOHA</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;10 ANCHORAGE</TableColumn>
+            <TableColumn>107</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>324</TableColumn>
+            <TableColumn>511</TableColumn>
+            <TableColumn>5.5</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;13 SILVERDALE</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;17 EUGENE</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;61 FEDERAL WAY</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;63 NE ANCHORAGE</TableColumn>
+            <TableColumn>229</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>162</TableColumn>
+            <TableColumn>391</TableColumn>
+            <TableColumn>4.5</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;64 TUMWATER</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;67 MISSOULA</TableColumn>
+            <TableColumn>201</TableColumn>
+            <TableColumn>648</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>849</TableColumn>
+            <TableColumn>5.2</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;95 TACOMA</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+        </Table>
+        <br />
+        <br />
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow>
+            <TableColumn>CF-3 Exit&nbsp;&nbsp;&nbsp;&nbsp;CF7-Next Item&nbsp;&nbsp;&nbsp;&nbsp;CF21-Print Report</TableColumn>
+          </TableRow>
+        </Table>
+      </Card>
+    </>
+  );
+};
+
+AS400.displayName = 'AS400';
+
+export default AS400;
+
+================
+File: reference/components/examples/DashboardRadar.module.scss
+================
+.customSidebar {
+  display: flex;
+  align-items: center;
+  justify-content: space-between;
+  width: 100%;
+  flex-direction: column;
+  height: calc(var(--theme-line-height-base) * (var(--font-size) * 29.5));
+}
+
+.customTop {
+  min-height: 10%;
+  height: 100%;
+}
+
+.customBottom {
+  flex-shrink: 0;
+  width: 100%;
+}
+
+.root {
+  min-width: 56ch;
+}
+
+.cross {
+  width: 9ch;
+  height: calc(var(--theme-line-height-base) * (var(--font-size) * 7));
+  margin: calc(var(--theme-line-height-base) * (var(--font-size) * 0.5)) 0 calc(var(--theme-line-height-base) * (var(--font-size) * 0.5)) 0;
+  display: flex;
+  justify-content: space-between;
+  flex-direction: column;
+}
+
+.square {
+  width: 4.3ch;
+  height: calc(var(--theme-line-height-base) * (var(--font-size) * 3.4));
+}
+
+.nw {
+  border-right: 2px solid var(--theme-text);
+  border-bottom: 2px solid var(--theme-text);
+}
+
+.ne {
+  border-left: 2px solid var(--theme-text);
+  border-bottom: 2px solid var(--theme-text);
+}
+
+.sw {
+  border-top: 2px solid var(--theme-text);
+  border-right: 2px solid var(--theme-text);
+}
+
+.se {
+  border-top: 2px solid var(--theme-text);
+  border-left: 2px solid var(--theme-text);
+}
+
+.customContent {
+  width: 100%;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  height: calc(var(--theme-line-height-base) * (var(--font-size) * 24.5));
+}
+
+================
+File: reference/components/examples/DashboardRadar.tsx
+================
+import styles from '@components/examples/DashboardRadar.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import ActionButton from '@components/ActionButton';
+import ButtonGroup from '@components/ButtonGroup';
+import Card from '@components/Card';
+import RowSpaceBetween from '@components/RowSpaceBetween';
+import SidebarLayout from '@components/SidebarLayout';
+import Sphere from '@components/svg/Sphere';
+
+const RadarMarker = (props) => {
+  return (
+    <div className={styles.cross}>
+      <RowSpaceBetween>
+        <div className={Utilities.classNames(styles.square, styles.nw)} />
+        <div className={Utilities.classNames(styles.square, styles.ne)} />
+      </RowSpaceBetween>
+      <RowSpaceBetween>
+        <div className={Utilities.classNames(styles.square, styles.sw)} />
+        <div className={Utilities.classNames(styles.square, styles.se)} />
+      </RowSpaceBetween>
+    </div>
+  );
+};
+
+const DashboardRadar = (props) => {
+  return (
+    <div className={styles.root}>
+      <SidebarLayout
+        isReversed
+        sidebar={
+          <Card>
+            <div className={styles.customSidebar}>
+              <div className={styles.customTop}>
+                TIME FROM
+                <ActionButton style={{ width: '100%' }}>11:11:11:11</ActionButton>
+                <br />
+                <br />
+                PRESENT
+                <br />
+                P.O.R.
+                <br />
+                NOSTROMO
+                <br />
+              </div>
+              <div className={styles.customBottom}>
+                HEADING
+                <br />
+                <ButtonGroup isFull items={[{ body: 'N .36' }, { body: 'E .18' }]} />
+                <br />
+                GROUND
+                <br />
+                <ActionButton rootStyle={{ width: '100%' }}>SPEED 78.26</ActionButton>
+                <br />
+                CONDITION
+                <br />
+                CODE
+                <br />
+                <ActionButton style={{ width: '100%' }}>16 S=C75C</ActionButton>
+                <ActionButton>PAST=8</ActionButton>
+                <br />
+                <br />
+                <ActionButton rootStyle={{ width: '100%' }}>System #4</ActionButton>
+                <br />
+                <br />
+                AUTODECOUNT
+                <br />
+                <br />
+                <ActionButton rootStyle={{ width: '100%', textAlign: 'right' }}>3454.94#</ActionButton>
+              </div>
+            </div>
+          </Card>
+        }
+        defaultSidebarWidth={19}
+      >
+        <Card>
+          <RowSpaceBetween>
+            <span style={{ flexShrink: 0 }}>DEORBITAL DESCENT</span>
+            <span style={{ minWidth: '10%', width: '100%', display: 'flex', justifyContent: 'flex-end' }}>
+              <span>
+                <ActionButton>COMMENCE FINAL</ActionButton>
+                <br />
+                <ActionButton>SYSTEM :0L: 76.75 :08:</ActionButton>
+              </span>
+            </span>
+          </RowSpaceBetween>
+        </Card>
+        <br />
+        <Card>
+          <RowSpaceBetween style={{ position: 'absolute', top: 0, left: `6ch`, right: `6ch` }}>
+            <RadarMarker />
+            <RadarMarker />
+          </RowSpaceBetween>
+          <div className={styles.customContent}>
+            <Sphere style={{ transform: 'translateX(24ch) rotateZ(40deg)' }} />
+          </div>
+          <RowSpaceBetween style={{ position: 'absolute', bottom: `calc(var(--theme-line-height-base) * (var(--font-size) * 0.5))`, left: `6ch`, right: `6ch` }}>
+            <RadarMarker />
+            <RadarMarker />
+          </RowSpaceBetween>
+        </Card>
+      </SidebarLayout>
+    </div>
+  );
+};
+
+export default DashboardRadar;
+
+================
+File: reference/components/examples/Denabase.module.scss
+================
+.root {
+  min-width: 68ch;
+  margin-top: calc(var(--theme-line-height-base) * 1rem);
+}
+
+.dna {
+  min-width: 71ch;
+  -webkit-text-size-adjust: 100%;
+}
+
+.tag {
+  width: 3ch;
+  height: calc(var(--theme-line-height-base) * 0.5rem);
+  flex-shrink: 0;
+  box-shadow:
+    inset 2px 0 0 var(--theme-text),
+    inset -2px 0 0 var(--theme-text),
+    inset 0 2px 0 var(--theme-text);
+}
+
+.secondaryTag {
+  width: 3ch;
+  align-self: stretch;
+  flex-shrink: 0;
+  box-shadow:
+    inset 2px 0 0 var(--theme-text),
+    inset -2px 0 0 var(--theme-text),
+    inset 0 2px 0 var(--theme-text);
+}
+
+.small {
+  width: 13ch;
+  flex-shrink: 0;
+  text-align: right;
+}
+
+.smallWithBorder {
+  width: 13ch;
+  flex-shrink: 0;
+  text-align: right;
+  box-shadow: inset 0 2px 0 var(--theme-text);
+}
+
+.smallSection {
+  width: 13ch;
+  flex-shrink: 0;
+  min-width: 10%;
+  text-align: right;
+  box-shadow: inset 0 2px 0 var(--theme-text);
+}
+
+.large {
+  width: 80%;
+  min-width: 10%;
+  text-align: right;
+}
+
+.largeWithBorder {
+  width: 80%;
+  min-width: 10%;
+  text-align: right;
+  box-shadow:
+    inset 0 2px 0 var(--theme-text),
+    inset -2px 0 0 var(--theme-text);
+}
+
+.largeSection {
+  width: 80%;
+  min-width: 10%;
+  text-align: right;
+  box-shadow:
+    inset 0 2px 0 var(--theme-text),
+    inset -2px 0 0 var(--theme-text);
+}
+
+.absoluteTag {
+  top: calc(var(--theme-line-height-base) * -0.5rem);
+  left: 0;
+  height: calc(var(--theme-line-height-base) * 0.5rem);
+  width: 14.2ch;
+  background: var(--theme-background);
+  position: absolute;
+  box-shadow:
+    inset 2px 0 0 var(--theme-text),
+    inset -2px 0 0 var(--theme-text),
+    inset 0 2px 0 var(--theme-text);
+}
+
+.box {
+  width: 7.1ch;
+  flex-shrink: 0;
+  height: calc(var(--theme-line-height-base) * 3rem);
+  display: inline-flex;
+  align-items: center;
+  justify-content: center;
+  box-shadow:
+    inset -2px 0 0 var(--theme-text),
+    inset 0 2px 0 var(--theme-text),
+    inset 0 -2px 0 var(--theme-text);
+
+  &:first-child {
+    box-shadow:
+      inset 2px 0 0 var(--theme-text),
+      inset -2px 0 0 var(--theme-text),
+      inset 0 2px 0 var(--theme-text),
+      inset 0 -2px 0 var(--theme-text);
+  }
+}
+
+================
+File: reference/components/examples/Denabase.tsx
+================
+'use client';
+
+import styles from '@components/examples/Denabase.module.scss';
+
+import * as React from 'react';
+
+import ActionButton from '@components/ActionButton';
+import Card from '@components/Card';
+import Divider from '@components/Divider';
+import Row from '@components/Row';
+import RowSpaceBetween from '@components/RowSpaceBetween';
+import SidebarLayout from '@components/SidebarLayout';
+
+const Denabase = (props) => {
+  return (
+    <>
+      <Card style={{ overflowWrap: 'break-word' }}>
+        <Row>
+          <RowSpaceBetween>
+            <ActionButton>TR5342120027455925897981</ActionButton>
+            <ActionButton>02.14.2021</ActionButton>
+          </RowSpaceBetween>
+          <Divider type="GRADIENT" />
+          <div className={styles.dna}>
+            T-CA-AA-AA-TA-TC-GG-GC-AC-AT-TA-TT-TA-TT-TG-CC-GC-TC-GG-GA-AG-TA-GA-A
+            <br />
+            A-TG-GT-AC-AT-GT-GT-TT-TA-TG-AT-TT-CT-CG-CA-GT-GA-AA-AA-GC-AA-CG-AA-C
+            <br />
+            C-TC-GC-CC-TT-AG-AT-TC-TA-TA-GC-TG-CT-CT-GA-GA-CC-GC-AC-TG-GC-AA-GC-A
+            <br />
+            G-AA-AC-TC-CG-CA-TT-CA-GG-CA-GT-CC-TC-CA-TG-CA-CT-TC-CT-GC-CT-GT-CT-G
+            <br />
+            C-TG-AA-CC-TA-TT-AT-TA-GA-GA-TG-GA-CT-GC-AG-TT-CT-CA-AT-CA-CA-CG-GA-T
+            <br />
+            C-TG-AT-AC-CT-GC-TG-GT-AT-GT-TC-CT-GA-TA-CC-CA-CA-GA-CA-GC-GC-CC-GA-A
+            <br />
+            T-TT-TG-GC-AA-CC-GA-AC-TT-CT-CA-AC-AA-AA-CC-GC-CT-AG-TT-GC-TA-AT-TT-G
+            <br />
+            G-TG-AC-CT-GA-CT-GA-AT-TG-TC-AT-TA-AA-CA-CT-CC-TG-CT-AA-GA-TG-CG-AA-G
+            <br />
+            C-TA-TT-AT-AG-TG-TT-TT-GT-AC-AG-GC-TA-TT-TT-GC-GT-GA-AA-CG-CA-AA-CG-C
+            <br />
+            G-TT-GC-AT-TT-CA-GA-AT-TC-CG-TG-CA-TA-GT-TA-TC-TC-AT-GC-CG-TG-CT-CT-T
+            <br />
+            G-AT-TA-TT-GA-CA-TA-TG-CA-GT-TC-GT-CC-TA-AT-CC-GC-GC-CT-GG-TC-TT-TA-G
+            <br />
+            T-CA-CT-AA-CC-GA-CC-CT-TA-GT-AT-TG-TT-CT-CT-CA-AC-AA-AA-TG-TG-TT-AA-A
+            <br />
+            C-CG-GC-AT-AA-TC-TG-GT-GA-TC-GG-GA-GA-TC-CA-GA-GA-AA-CA-CA-CC-TT-GG-G
+            <br />
+            C-TA-GA-TG-CC-CT-AC-AT-TA-GA-TA-AG-GG-GT-CT-AT-AC-GG-GC-GG-GG-TT-AG-T
+            <br />
+            A-CA-CC-TT-GA-GC-GT-AT-AG-GA-GA-GT-AA-CG-AG-GT-GG-TT-GT-CG-TG-GG-AG-G
+            <br />
+            A-GG-AG-TA-TG-TT-CT-CC-CT-TA-CT-AG-TT-GC-CG-AT-AA-CA-GA-TA-CT-GA-TG-T
+            <br />
+            C-TG-GT-AA-TT-GC-CA-GT-CA-TG-GT-TG-TA-GT-AG-CC-GG-GA-CC-CG-CA-GT-CT-G
+            <br />
+            G-GT-AG-CG-CC-TA-AC-AG-AT-AA-GG-GG-GC-CT-AC-TC-CC-GC-CC-TG-GT-CG-GC-C
+            <br />
+            T-GA-TC-AT-AA-AC-CT-CT-GT-AA-TA-CC-AT-GG-GC-CA-CG-TT-AG-GC-GT-CG-AT-G
+            <br />
+            C-CG-GA-CC-CA-TA-TC-TT-TA-CA-TC-AT-CT-CT-TT-CA-TA-GA-AG-TA-CC-CA-CT-T
+            <br />
+          </div>
+          <Divider type="GRADIENT" />
+        </Row>
+      </Card>
+      <br />
+      <Card>
+        <SidebarLayout
+          sidebar={
+            <Card style={{ padding: `0 0 0 0` }}>
+              <br />
+              <br />
+              <Row style={{ textAlign: 'center' }}>╳</Row>
+              <br />
+              <br />
+            </Card>
+          }
+          defaultSidebarWidth={19}
+        >
+          <Card style={{ padding: 0, marginLeft: `1ch`, minWidth: `30ch` }}>
+            <br />
+            <br />
+            <br />
+            <br />
+            <Row style={{ textAlign: 'right' }}>NO DATA</Row>
+          </Card>
+        </SidebarLayout>
+        <div className={styles.root}>
+          <RowSpaceBetween>
+            <div className={styles.tag}></div>
+            <div className={styles.small}></div>
+            <div className={styles.tag}></div>
+            <div className={styles.large}></div>
+          </RowSpaceBetween>
+          <RowSpaceBetween>
+            <div className={styles.secondaryTag}>
+              <br />
+              <br />
+            </div>
+            <div className={styles.smallSection}>
+              <br />
+              2181&nbsp;
+              <br />
+              <br />
+            </div>
+            <div className={styles.secondaryTag}></div>
+            <div className={styles.largeSection}>
+              <br />
+              UNKNOWN&nbsp;&nbsp;
+              <br />
+              <br />
+            </div>
+          </RowSpaceBetween>
+          <RowSpaceBetween>
+            <div className={styles.tag}></div>
+            <div className={styles.smallWithBorder}></div>
+            <div className={styles.tag}></div>
+            <div className={styles.largeWithBorder}></div>
+          </RowSpaceBetween>
+          <RowSpaceBetween>
+            <div className={styles.secondaryTag}>
+              <br />
+              <br />
+            </div>
+            <div className={styles.smallSection}>
+              <br />
+              DECEASED&nbsp;
+              <br />
+              <br />
+            </div>
+            <div className={styles.secondaryTag}></div>
+            <div className={styles.largeSection}>
+              <br />
+              MORRILLCOLE&nbsp;&nbsp;
+              <br />
+              <br />
+            </div>
+          </RowSpaceBetween>
+          <RowSpaceBetween style={{ position: 'relative' }}>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.absoluteTag}></div>
+          </RowSpaceBetween>
+        </div>
+      </Card>
+    </>
+  );
+};
+
+export default Denabase;
+
+================
+File: reference/components/examples/MessagesInterface.tsx
+================
+import Avatar from '@components/Avatar';
+import ActionButton from '@components/ActionButton';
+import Divider from '@components/Divider';
+import DropdownMenuTrigger from '@components/DropdownMenuTrigger';
+import Indent from '@components/Indent';
+import Input from '@components/Input';
+import Message from '@components/Message';
+import MessageViewer from '@components/MessageViewer';
+import ModalError from '@components/modals/ModalError';
+import Navigation from '@components/Navigation';
+import RowEllipsis from '@components/RowEllipsis';
+import SidebarLayout from '@components/SidebarLayout';
+
+import * as React from 'react';
+
+interface MessagesInterfaceProps extends React.HTMLAttributes<HTMLSpanElement> {}
+
+const ChatPreviewInline = (props) => {
+  return <RowEllipsis style={{ opacity: 0.5, marginBottom: `10px` }}>{props.children}</RowEllipsis>;
+};
+
+const MessagesInterface: React.FC<MessagesInterfaceProps> = () => {
+  return (
+    <div style={{ minWidth: '28ch' }}>
+      <Navigation
+        logo="✶"
+        left={
+          <>
+            <DropdownMenuTrigger
+              items={[
+                {
+                  icon: '⊹',
+                  children: 'Open',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'New Message',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Quick Look',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Close Messages',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Open Conversation in New Window',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Print...',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+              ]}
+            >
+              <ActionButton>FILE</ActionButton>
+            </DropdownMenuTrigger>
+
+            <DropdownMenuTrigger
+              items={[
+                {
+                  icon: '⊹',
+                  children: 'Undo',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Redo',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Cut',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Copy',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Paste',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Paste and Match Style',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Delete',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Select All',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Find...',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Find Next',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Find Previous',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Spelling and Grammar',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Substitutions',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Speech',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Send Message',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Reply to Last Message',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Tapback Last Message',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Edit Last Message',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Autofill',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Start Dictation',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Emoji & Symbols',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+              ]}
+            >
+              <ActionButton>EDIT</ActionButton>
+            </DropdownMenuTrigger>
+            <DropdownMenuTrigger
+              items={[
+                {
+                  icon: '⊹',
+                  children: 'Show Tab Bar',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Show All Tabs',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Make Text Bigger',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Make Text Normal Size',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Make Text Smaller',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'All Messages',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Known Senders',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Unknown Senders',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Unread Messages',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Recently Delete',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Show Sidebar',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Enter Full Screen',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+              ]}
+            >
+              <ActionButton>VIEW</ActionButton>
+            </DropdownMenuTrigger>
+          </>
+        }
+        right={
+          <>
+            <DropdownMenuTrigger
+              items={[
+                {
+                  icon: '⊹',
+                  children: 'Search',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Messages Help',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+              ]}
+            >
+              <ActionButton>HELP</ActionButton>
+            </DropdownMenuTrigger>
+          </>
+        }
+      ></Navigation>
+      <Divider type="DOUBLE" />
+      <SidebarLayout
+        defaultSidebarWidth={12}
+        isShowingHandle={true}
+        sidebar={
+          <>
+            <Avatar>
+              <Indent>
+                Arthur
+                <br />
+                <ChatPreviewInline>No, it has to be more unique</ChatPreviewInline>
+              </Indent>
+            </Avatar>
+            <Avatar>
+              <Indent>
+                Ariadne
+                <br />
+                <ChatPreviewInline>No. Just you.</ChatPreviewInline>
+              </Indent>
+            </Avatar>
+            <Avatar>
+              <Indent>
+                Eames
+                <br />
+                <ChatPreviewInline>dream a little bigger</ChatPreviewInline>
+              </Indent>
+            </Avatar>
+            <Avatar>
+              <Indent>
+                Yusef
+                <br />
+                <ChatPreviewInline>Depends on the dream.</ChatPreviewInline>
+              </Indent>
+            </Avatar>
+            <Avatar>
+              <Indent>
+                Saito
+                <br />
+                <ChatPreviewInline>I bought the airline.</ChatPreviewInline>
+              </Indent>
+            </Avatar>
+          </>
+        }
+      >
+        <Message>Why are they all looking at me?</Message>
+        <MessageViewer>Because my subconscious feels that someone else is creating this world. The more you change things, the quicker the projections start to converge on you.</MessageViewer>
+        <Message>Converge?</Message>
+        <MessageViewer>It's the foreign nature of the dreamer. They attack like white blood cells fighting an infection.</MessageViewer>
+        <Message>They're going to attack us?</Message>
+        <MessageViewer>No. Just you.</MessageViewer>
+        <br />
+        <br />
+        <Input autoComplete="off" isBlink={true} label="Message" name="test_message_interface" />
+      </SidebarLayout>
+    </div>
+  );
+};
+
+export default MessagesInterface;
+
+================
+File: reference/components/examples/UpdatingDataTable.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+import DataTable from '@components/DataTable';
+
+const UpdatingDataTable = (props) => {
+  const [tableData, setTableData] = React.useState(props.data);
+
+  React.useEffect(() => {
+    const interval = setInterval(() => {
+      setTableData((prevData) => {
+        const header = prevData[0];
+        const rows = prevData.slice(1);
+
+        const updatedRows = rows.map((row) => {
+          const currentPrice = parseFloat(row[2].replace('$', ''));
+          const currentHoldings = parseInt(row[3], 10);
+          const priceChangeFactor = 1 + (Math.random() - 0.5) * 0.1;
+          const newPrice = currentPrice * priceChangeFactor;
+          const holdingsChange = Math.floor((Math.random() - 0.5) * 20);
+          const newHoldings = Math.max(1, currentHoldings + holdingsChange);
+
+          return [row[0], row[1], `$${newPrice.toFixed(2)}`, newHoldings.toString()];
+        });
+
+        updatedRows.sort((a, b) => {
+          const priceA = parseFloat(a[2].replace('$', ''));
+          const priceB = parseFloat(b[2].replace('$', ''));
+          return priceB - priceA;
+        });
+
+        return [header, ...updatedRows];
+      });
+    }, 1000);
+
+    return () => clearInterval(interval);
+  }, []);
+
+  return (
+    <>
+      <DataTable data={tableData} />
+    </>
+  );
+};
+
+export default UpdatingDataTable;
+
+================
+File: reference/components/modals/ModalAlert.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalAlert.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalAlert.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import Card from '@components/Card';
+
+interface ModalAlertProps {
+  buttonText?: string | any;
+  message: string;
+}
+
+function ModalAlert({ message, buttonText }: ModalAlertProps) {
+  const { close } = useModals();
+
+  return (
+    <div className={styles.root}>
+      <Card title="ALERT">
+        {message}
+        <br />
+        <br />
+        <Button onClick={() => close()}>{Utilities.isEmpty(buttonText) ? 'Close' : buttonText}</Button>
+      </Card>
+    </div>
+  );
+}
+
+export default ModalAlert;
+
+================
+File: reference/components/modals/ModalCanvasPlatformer.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalCanvasPlatformer.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalCanvasPlatformer.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import CanvasPlatformer from '@components/CanvasPlatformer';
+import Card from '@components/Card';
+
+interface ModalCanvasPlatformerProps {
+  buttonText?: string | any;
+}
+
+function ModalCanvasPlatformer({ buttonText }: ModalCanvasPlatformerProps) {
+  const { close } = useModals();
+
+  return (
+    <div className={styles.root}>
+      <Card title="ALERT">
+        <CanvasPlatformer rows={12} />
+        <br />
+        <br />
+        <Button onClick={() => close()}>{Utilities.isEmpty(buttonText) ? 'Close' : buttonText}</Button>
+      </Card>
+    </div>
+  );
+}
+
+export default ModalCanvasPlatformer;
+
+================
+File: reference/components/modals/ModalCanvasSnake.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalCanvasSnake.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalCanvasSnake.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import CanvasSnake from '@components/CanvasSnake';
+import Card from '@components/Card';
+
+interface ModalCanvasSnakeProps {
+  buttonText?: string | any;
+}
+
+function ModalCanvasSnake({ buttonText }: ModalCanvasSnakeProps) {
+  const { close } = useModals();
+
+  return (
+    <div className={styles.root}>
+      <Card title="CANVAS PLATFORMER">
+        <CanvasSnake rows={12} />
+        <br />
+        <br />
+        <Button onClick={() => close()}>{Utilities.isEmpty(buttonText) ? 'Close' : buttonText}</Button>
+      </Card>
+    </div>
+  );
+}
+
+export default ModalCanvasSnake;
+
+================
+File: reference/components/modals/ModalChess.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalChess.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalChess.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useHotkeys } from '@modules/hotkeys';
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import CardDouble from '@components/CardDouble';
+import Chessboard from '@components/Chessboard';
+
+interface ModalErrorProps {
+  buttonText?: string | any;
+  board: string[][];
+  title?: string;
+}
+
+function ModalChess({ board, buttonText, title }: ModalErrorProps) {
+  const { close } = useModals();
+
+  useHotkeys('enter', () => close());
+
+  return (
+    <div className={styles.root}>
+      <CardDouble title={title} style={{ textAlign: 'center' }}>
+        <Chessboard board={board} />
+        <br />
+        <br />
+        <Button onClick={() => close()}>{Utilities.isEmpty(buttonText) ? 'CLOSE' : buttonText}</Button>
+      </CardDouble>
+    </div>
+  );
+}
+
+export default ModalChess;
+
+================
+File: reference/components/modals/ModalCreateAccount.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalCreateAccount.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalAlert.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import CardDouble from '@components/CardDouble';
+import Checkbox from '@components/Checkbox';
+import Input from '@components/Input';
+import RadioButtonGroup from '@components/RadioButtonGroup';
+
+function ModalCreateAccount() {
+  const { close } = useModals();
+
+  return (
+    <div className={styles.root}>
+      <CardDouble title="NEW ACCOUNT">
+        Create a new MakeBelieve™ account, where anything is possible at your command line in the browser.
+        <br />
+        <br />
+        <RadioButtonGroup
+          defaultValue="modal_developer"
+          options={[
+            { value: 'modal_individual', label: 'I’m using this for personal use.' },
+            { value: 'modal_developer', label: 'I’m building or creating something for work.' },
+            { value: 'modal_company', label: 'We’re using this as a team or organization.' },
+          ]}
+        />
+        <br />
+        <Input autoComplete="off" label="USERNAME" placeholder="Choose a username (e.g., SurfGirl29)" name="modal_username" />
+        <Input autoComplete="off" label="PASSWORD" placeholder="Create a password (8+ characters)" type="password" name="modal_password" />
+        <Input autoComplete="off" label="CONFIRM" placeholder="Type it again" type="password" name="modal_confirm" />
+        <br />
+        <Checkbox name="modal_terms">I agree to the Terms of Service, Data Privacy Policy, and Acceptable Use Guidelines.</Checkbox>
+        <Checkbox name="modal_goodwill">I agree not to use this service for unlawful purposes.</Checkbox>
+        <br />
+        <Button onClick={() => close()}>Create an account</Button>
+      </CardDouble>
+    </div>
+  );
+}
+
+export default ModalCreateAccount;
+
+================
+File: reference/components/modals/ModalError.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalError.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalError.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useHotkeys } from '@modules/hotkeys';
+import { useModals } from '@components/page/ModalContext';
+
+import ActionButton from '@components/ActionButton';
+import Button from '@components/Button';
+import CardDouble from '@components/CardDouble';
+import Grid from '@components/Grid';
+
+interface ModalErrorProps {
+  buttonText?: string | any;
+  message: string | any;
+  title?: string;
+}
+
+// TODO(jimmylee)
+// Enter doesn't always work for some reason.
+function ModalError({ message, buttonText, title }: ModalErrorProps) {
+  const { close } = useModals();
+
+  useHotkeys('enter', () => close());
+
+  return (
+    <div className={styles.root}>
+      <CardDouble title={title}>
+        <br />
+        {message}
+        <Grid>
+          <ul>
+            <li>
+              Press{' '}
+              <ActionButton hotkey="⏎" onClick={() => close()}>
+                ENTER
+              </ActionButton>{' '}
+              to continue.
+            </li>
+          </ul>
+        </Grid>
+      </CardDouble>
+    </div>
+  );
+}
+
+export default ModalError;
+
+================
+File: reference/components/modals/ModalMatrixModes.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalMatrixModes.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalMatrixModes.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import Card from '@components/Card';
+import MatrixLoader from '@components/MatrixLoader';
+
+interface ModalMatrixModesProps {
+  buttonText?: string | any;
+}
+
+function ModalMatrixModes({ buttonText }: ModalMatrixModesProps) {
+  const { close } = useModals();
+
+  return (
+    <div className={styles.root}>
+      <Card title="MATRIX MODES">
+        <Card title="KATAKANA DEFAULT">
+          <MatrixLoader rows={32} mode="katakana" />
+        </Card>
+        <Card title="GREEK LTR">
+          <MatrixLoader direction="left-to-right" rows={8} mode="greek" />
+        </Card>
+        <br />
+        <br />
+        <Button onClick={() => close()}>{Utilities.isEmpty(buttonText) ? 'Close' : buttonText}</Button>
+      </Card>
+    </div>
+  );
+}
+
+export default ModalMatrixModes;
+
+================
+File: reference/components/page/DefaultActionBar.module.scss
+================
+.root {
+  position: fixed;
+  top: 0;
+  left: 2ch;
+  z-index: 1;
+}
+
+================
+File: reference/components/page/DefaultActionBar.tsx
+================
+'use client';
+
+import styles from '@components/page/DefaultActionBar.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { toggleDebugGrid } from '@components/DebugGrid';
+import { useHotkeys } from '@modules/hotkeys';
+
+import ActionBar from '@components/ActionBar';
+import ButtonGroup from '@components/ButtonGroup';
+
+function isElement(target: EventTarget | null): target is Element {
+  return target instanceof Element;
+}
+
+function isHTMLElement(target: EventTarget | null): target is HTMLElement {
+  return target instanceof HTMLElement;
+}
+
+const findFocusableParent = (element: Element | null): Element | null => {
+  while (element) {
+    element = element.parentElement;
+    if (element && Utilities.isFocusableElement(element)) {
+      return element;
+    }
+  }
+  return null;
+};
+
+const findNextFocusableSibling = (element: Element, direction: 'next' | 'previous'): HTMLElement | null => {
+  let sibling = direction === 'next' ? element.nextElementSibling : element.previousElementSibling;
+
+  while (sibling) {
+    if (Utilities.isFocusableElement(sibling)) {
+      return sibling as HTMLElement;
+    }
+
+    const focusableDescendant = Utilities.findFocusableDescendant(sibling, null, direction);
+    if (focusableDescendant) {
+      return focusableDescendant;
+    }
+
+    sibling = direction === 'next' ? sibling.nextElementSibling : sibling.previousElementSibling;
+  }
+
+  return null;
+};
+
+const findNextFocusableAncestor = (element: Element, direction: 'next' | 'previous'): HTMLElement | null => {
+  let ancestor = element.parentElement;
+
+  while (ancestor) {
+    const nextFocusable = findNextFocusableSibling(ancestor, direction);
+    if (nextFocusable) {
+      return nextFocusable;
+    }
+    ancestor = ancestor.parentElement;
+  }
+
+  return null;
+};
+
+const useGlobalNavigationHotkeys = () => {
+  const onHandleSubmit = (event: KeyboardEvent) => {
+    const target = event.target;
+    if (Utilities.isFocusableElement(target)) {
+      event.preventDefault();
+      (target as HTMLElement).click();
+    }
+  };
+
+  const onHandleNextFocus = (event: KeyboardEvent) => {
+    const target = event.target;
+
+    if (Utilities.isFocusableElement(target)) {
+      event.preventDefault();
+
+      const nextFocusable = Utilities.findNextFocusable(target as Element, 'next');
+      if (nextFocusable) {
+        nextFocusable.focus();
+      }
+    }
+  };
+
+  const onHandlePreviousFocus = (event: KeyboardEvent) => {
+    const target = event.target;
+
+    if (Utilities.isFocusableElement(target)) {
+      event.preventDefault();
+
+      const previousFocusable = Utilities.findNextFocusable(target as Element, 'previous');
+      if (previousFocusable) {
+        previousFocusable.focus();
+      }
+    }
+  };
+
+  useHotkeys('ArrowDown', onHandleNextFocus);
+  useHotkeys('ArrowUp', onHandlePreviousFocus);
+  useHotkeys('ArrowRight', onHandleNextFocus);
+  useHotkeys('ArrowLeft', onHandlePreviousFocus);
+  useHotkeys('Enter', onHandleSubmit);
+  useHotkeys(' ', onHandleSubmit);
+};
+
+interface DefaultActionBarProps {
+  items?: {
+    hotkey: string;
+    onClick: () => void;
+    body: React.ReactNode;
+    items?: any;
+  }[];
+}
+
+const DefaultActionBar: React.FC<DefaultActionBarProps> = ({ items = [] }) => {
+  const [isGrid, setGrid] = React.useState(false);
+  useHotkeys('ctrl+g', () => toggleDebugGrid());
+
+  useGlobalNavigationHotkeys();
+
+  return (
+    <div className={styles.root}>
+      <ActionBar
+        items={[
+          {
+            hotkey: '⌃+O',
+            body: 'Fonts',
+            openHotkey: 'ctrl+o',
+            items: [
+              {
+                icon: '⊹',
+                children: 'Commit Mono V143 [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-commit-mono'),
+              },
+              {
+                icon: '⊹',
+                children: 'Departure Mono [MIT]',
+                onClick: () => Utilities.onHandleFontChange('font-use-departure-mono'),
+              },
+              {
+                icon: '⊹',
+                children: 'Fira Code [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-fira-code'),
+              },
+              {
+                icon: '⊹',
+                children: 'Fragment Mono [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-fragment-mono'),
+              },
+              {
+                icon: '⊹',
+                children: 'Geist Mono [OFL] [DEFAULT]',
+                onClick: () => Utilities.onHandleFontChange(''),
+              },
+              {
+                icon: '⊹',
+                children: 'Iosevka Term [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-iosevka-term'),
+              },
+              {
+                icon: '⊹',
+                children: 'JetBrains Mono [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-jet-brains-mono'),
+              },
+              {
+                icon: '⊹',
+                children: 'SFMono Square [FOSS]',
+                onClick: () => Utilities.onHandleFontChange('font-use-sfmono-square'),
+              },
+              {
+                icon: '⊹',
+                children: 'Server Mono 0.0.6 [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-server-mono'),
+              },
+              {
+                icon: '⊹',
+                children: 'TX-02 Berkeley Mono™',
+                onClick: () => Utilities.onHandleFontChange('font-use-berkeley-mono'),
+              },
+            ],
+          },
+          {
+            hotkey: '⌃+T',
+            body: 'Theme',
+            openHotkey: 'ctrl+t',
+            items: [
+              {
+                icon: '⊹',
+                children: 'Refined White [DEFAULT]',
+                onClick: () => Utilities.onHandleThemeChange(''),
+              },
+              {
+                icon: '⊹',
+                children: 'Black Midnight Vapor',
+                onClick: () => Utilities.onHandleThemeChange('theme-dark'),
+              },
+              {
+                icon: '⊹',
+                children: 'U-571 Code Red',
+                onClick: () => Utilities.onHandleThemeChange('theme-black-red'),
+              },
+              {
+                icon: '⊹',
+                children: 'Digital Bioluminescence',
+                onClick: () => Utilities.onHandleThemeChange('theme-black-teal'),
+              },
+              {
+                icon: '⊹',
+                children: 'Operation Safe Blue',
+                onClick: () => Utilities.onHandleThemeChange('theme-blue'),
+              },
+              {
+                icon: '⊹',
+                children: 'Neon Green Garden',
+                onClick: () => Utilities.onHandleThemeChange('theme-green'),
+              },
+              {
+                icon: '⊹',
+                children: 'Kirkland Signature AS/400',
+                onClick: () => Utilities.onHandleThemeChange('theme-black-green'),
+              },
+            ],
+          },
+          {
+            hotkey: '⌃+G',
+            onClick: () => {
+              toggleDebugGrid();
+            },
+            body: 'Grid',
+            selected: false,
+          },
+          ...items,
+        ]}
+      />
+    </div>
+  );
+};
+
+export default DefaultActionBar;
+
+================
+File: reference/components/page/DefaultLayout.module.scss
+================
+.body {
+  width: 100%;
+}
+
+.pixel {
+  height: 1px;
+  left: 0;
+  position: absolute;
+  top: 0;
+  width: 1px;
+}
+
+================
+File: reference/components/page/DefaultLayout.tsx
+================
+import styles from '@components/page/DefaultLayout.module.scss';
+
+import * as React from 'react';
+
+interface DefaultLayoutProps {
+  previewPixelSRC: string;
+  children?: React.ReactNode;
+}
+
+const DefaultLayout: React.FC<DefaultLayoutProps> = ({ previewPixelSRC, children }) => {
+  return (
+    <div className={styles.body}>
+      <img className={styles.pixel} src={previewPixelSRC} alt="" />
+      {children}
+    </div>
+  );
+};
+
+export default DefaultLayout;
+
+================
+File: reference/components/page/ModalContext.tsx
+================
+import * as React from 'react';
+
+export type ModalComponent<P = {}> = React.ComponentType<React.PropsWithoutRef<P>>;
+
+export interface ModalState<P = any> {
+  key: string;
+  component: ModalComponent<P>;
+  props: P;
+}
+
+interface ModalContextType {
+  modalStack: ModalState[];
+  open: <P>(component: ModalComponent<P>, props: P) => string;
+  close: (key?: string) => void;
+}
+
+const ModalContext = React.createContext<ModalContextType | null>(null);
+
+export const ModalProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
+  const [modalStack, setModalStack] = React.useState<ModalState<any>[]>([]);
+
+  const open = <P,>(component: ModalComponent<P>, props: P): string => {
+    const key = `modal-${Date.now()}-${Math.random()}`;
+
+    const newModal: ModalState<P> = { key, component, props };
+
+    setModalStack((prev) => [...prev, newModal as ModalState<any>]);
+
+    return key;
+  };
+
+  const close = (key?: string): void => {
+    setModalStack((prev) =>
+      key ? prev.filter((modal) => modal.key !== key) : prev.slice(0, -1)
+    );
+  };
+
+  return (
+    <ModalContext.Provider value={{ modalStack, open, close }}>
+      {children}
+    </ModalContext.Provider>
+  );
+};
+
+export const useModals = (): ModalContextType => {
+  const context = React.useContext(ModalContext);
+  if (!context) {
+    throw new Error('useModals must be used within a ModalProvider and use client');
+  }
+  return context;
+};
+
+================
+File: reference/components/page/root.module.scss
+================
+.row {
+  border-bottom: 1px solid var(--theme-border);
+}
+
+.column {
+  max-width: 768px;
+  padding: 0 24px 0 24px;
+  margin: 0 auto 0 auto;
+  display: block;
+  border-left: 1px solid var(--theme-border);
+  border-right: 1px solid var(--theme-border);
+}
+
+.video {
+  display: block;
+  width: 100%;
+}
+
+.h1 {
+  display: block;
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+.p {
+  display: block;
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+.aside {
+  display: block;
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+.h2 {
+  display: block;
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+.image {
+  display: block;
+  width: 100%;
+}
+
+================
+File: reference/components/svg/InternetDevelopmentLogo.tsx
+================
+export default function IntDevLogo(props) {
+  return (
+    <svg viewBox="0 0 494.25 80.29" fill="currentColor" aria-hidden {...props}>
+      <path d="m57.8,29.75h0c0,5.34,4.33,9.67,9.67,9.67h38.11c5.34,0,9.67,4.33,9.67,9.67v.54c0,5.34-4.33,9.67-9.67,9.67h-38.11c-5.34,0-9.67,4.33-9.67,9.67v.29c0,5.34-4.33,9.67-9.67,9.67H9.67c-5.34,0-9.67-4.33-9.67-9.67v-.54c0-5.34,4.33-9.67,9.67-9.67h38.11c5.34,0,9.67-4.33,9.67-9.67v-.02c0-5.34-4.33-9.67-9.67-9.67H9.67c-5.34,0-9.67-4.33-9.67-9.67v-.54c0-5.34,4.33-9.67,9.67-9.67h38.11c5.34,0,9.67-4.33,9.67-9.67v-.27c0-5.34,4.33-9.67,9.67-9.67h38.45c5.34,0,9.67,4.33,9.67,9.67v.55c0,5.34-4.33,9.67-9.67,9.67h-38.11c-5.34,0-9.67,4.33-9.67,9.67Z" />
+      <g>
+        <path d="m136.93,75.57l7.21-2.12V5.34l-7.21-2.02V0h26.69v3.32l-7,2.02v68.11l7,2.12v3.37h-26.69v-3.37Z" />
+        <path d="m182.75,14.67v58.88l7.26,2.02v3.37h-19.54v-3.37l7.31-2.02V5.24l-7.31-1.92V0h20.63l31.88,51.37V5.24l-7.31-1.92V0h19.59v3.32l-7.36,1.92v75.06h-4.72L182.75,14.67Z" />
+        <path d="m253.86,75.57l9.59-2.18V5.13h-14.25c-3.52,5.7-5.96,12.44-7.57,18.09h-2.8l2.95-23.22h55.57l3.01,23.22h-2.8c-1.66-5.65-3.89-12.39-7.41-18.09h-14.2v68.27l9.54,2.18v3.37h-31.62v-3.37Z" />
+        <path d="m304.76,75.47l7.1-1.97V5.24l-7.1-1.92V0h21.87c13.94,0,21.98,1.92,28.35,7.46,7.77,6.74,12.7,18.14,12.7,31.98s-5.23,26.75-13.32,33.43c-5.29,4.35-11.04,6.06-20.01,6.06h-29.6v-3.47Zm42.97-8.92c3.89-5.8,5.75-15.08,5.75-27.47s-1.87-20.73-5.81-26.49c-3.52-5.13-8.6-7.41-16.22-7.41h-7.1v62.51c0,4.46,2.23,6.17,8.4,6.17,6.89,0,11.56-2.23,14.98-7.31Z" />
+        <path d="m374.05,75.57l7.05-2.02V5.24l-7.05-1.92V0h48.93l1.5,22.55h-3.01c-1.4-5.55-3.42-11.77-6.22-17.31h-21.67v29.44h11.61c1.76-3.94,2.75-7.98,3.42-11.82h3.01v28.72h-3.01c-.62-3.89-1.76-7.93-3.42-11.77h-11.61v33.8h21.2c3.47-6.22,5.39-12.44,7.36-18.66h3.78l-3.37,24h-48.52v-3.37Z" />
+        <path d="m436.92,9.59c-1.5-4.61-2.9-5.75-8.66-6.27V0h31.72v3.32c-8.03.73-9.12,1.71-7.67,6.79l12.75,44.89.78.05,11.77-40.48c2.07-7.36.36-9.8-8.09-11.25V0h24.73v3.32c-7.77,1.55-9.17,3.32-11.61,11.4l-19.85,65.31h-3.21l-22.65-70.44Z" />
+      </g>
+    </svg>
+  );
+}
+
+================
+File: reference/components/svg/InternetDevelopmentLogoMark.tsx
+================
+export default function LogoMark(props) {
+  return (
+    <svg viewBox="0 0 116.29 80.29" fill="currentColor" aria-hidden {...props}>
+      <path d="m57.8,29.75h0c0,5.34,4.33,9.67,9.67,9.67h38.11c5.34,0,9.67,4.33,9.67,9.67v.54c0,5.34-4.33,9.67-9.67,9.67h-38.11c-5.34,0-9.67,4.33-9.67,9.67v.29c0,5.34-4.33,9.67-9.67,9.67H9.67c-5.34,0-9.67-4.33-9.67-9.67v-.54c0-5.34,4.33-9.67,9.67-9.67h38.11c5.34,0,9.67-4.33,9.67-9.67v-.02c0-5.34-4.33-9.67-9.67-9.67H9.67c-5.34,0-9.67-4.33-9.67-9.67v-.54c0-5.34,4.33-9.67,9.67-9.67h38.11c5.34,0,9.67-4.33,9.67-9.67v-.27c0-5.34,4.33-9.67,9.67-9.67h38.45c5.34,0,9.67,4.33,9.67,9.67v.55c0,5.34-4.33,9.67-9.67,9.67h-38.11c-5.34,0-9.67,4.33-9.67,9.67Z" />
+    </svg>
+  );
+}
+
+================
+File: reference/components/svg/Sphere.tsx
+================
+import * as React from 'react';
+
+export default function Sphere(props: { size?: number; segments?: number; style?: React.CSSProperties }) {
+  const size = props.size || 500;
+  const segments = props.segments || 6;
+  const radius = size * 0.4;
+
+  const generateSpherePoints = () => {
+    const points: { x: number; y: number }[][] = [];
+    for (let lat = 0; lat <= segments; lat++) {
+      const row: { x: number; y: number }[] = [];
+      const phi = (lat * Math.PI) / segments;
+      for (let lon = 0; lon <= segments; lon++) {
+        const theta = (lon * 2 * Math.PI) / segments;
+        const x = radius * Math.sin(phi) * Math.cos(theta);
+        const y = radius * Math.cos(phi);
+        const z = radius * Math.sin(phi) * Math.sin(theta);
+        const scale = 1 + z / (radius * 4);
+        row.push({
+          x: size / 2 + x * scale,
+          y: size / 2 + y * scale,
+        });
+      }
+      points.push(row);
+    }
+    return points;
+  };
+
+  const createPaths = () => {
+    const spherePoints = generateSpherePoints();
+    const paths: string[] = [];
+    for (let lat = 0; lat <= segments; lat++) {
+      let pathString = `M ${spherePoints[lat][0].x},${spherePoints[lat][0].y}`;
+      for (let lon = 1; lon <= segments; lon++) {
+        pathString += ` L ${spherePoints[lat][lon].x},${spherePoints[lat][lon].y}`;
+      }
+      paths.push(pathString);
+    }
+    for (let lon = 0; lon <= segments; lon++) {
+      let pathString = `M ${spherePoints[0][lon].x},${spherePoints[0][lon].y}`;
+      for (let lat = 1; lat <= segments; lat++) {
+        pathString += ` L ${spherePoints[lat][lon].x},${spherePoints[lat][lon].y}`;
+      }
+      paths.push(pathString);
+    }
+    return paths;
+  };
+
+  return (
+    <svg viewBox={`0 0 ${size} ${size}`} xmlns="http://www.w3.org/2000/svg" style={props.style}>
+      <g fill="none" stroke="currentColor" strokeWidth="1">
+        {createPaths().map((path, index) => (
+          <path key={index} d={path} vectorEffect="non-scaling-stroke" />
+        ))}
+      </g>
+    </svg>
+  );
+}
+
+================
+File: reference/components/Accordion.module.scss
+================
+.flex {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+  padding: calc(var(--theme-line-height-base) * 1rem) 0 calc(var(--theme-line-height-base) * 1rem) 0;
+
+  background: var(--theme-border-subdued);
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.icon {
+  flex-shrink: 0;
+  user-select: none;
+  cursor: pointer;
+  font-size: var(--font-size);
+  align-self: stretch;
+}
+
+.content {
+  min-width: 10%;
+  width: 100%;
+  user-select: none;
+  cursor: pointer;
+  transition: 200ms ease all;
+  transition-property: padding;
+  padding-left: 0ch;
+}
+
+.active {
+  .content {
+    padding-left: 1ch;
+  }
+
+  .icon {
+  }
+}
+
+================
+File: reference/components/Accordion.tsx
+================
+'use client';
+
+import styles from '@components/Accordion.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import Row from '@components/Row';
+
+interface AccordionProps {
+  defaultValue?: boolean;
+  title: string;
+  children?: React.ReactNode;
+}
+
+const Accordion: React.FC<AccordionProps> = ({ defaultValue = false, title, children }) => {
+  const [show, setShow] = React.useState<boolean>(defaultValue);
+  const accordionRef = React.useRef<HTMLDivElement | null>(null);
+
+  const toggleShow = (): void => {
+    setShow((prevShow) => !prevShow);
+  };
+
+  return (
+    <>
+      <Row ref={accordionRef} tabIndex={0} role="button" onClick={toggleShow} aria-expanded={show}>
+        <div className={Utilities.classNames(styles.flex, show ? styles.active : undefined)}>
+          <span className={styles.icon}>{show ? '▾' : '▸'}</span>
+          <span className={styles.content}>{title}</span>
+        </div>
+      </Row>
+      {show && <Row style={{ paddingLeft: '2ch' }}>{children}</Row>}
+    </>
+  );
+};
+
+export default Accordion;
+
+================
+File: reference/components/ActionBar.module.scss
+================
+.root {
+  background: var(--theme-background);
+  box-shadow: inset 0 0 0 1px var(--theme-border);
+}
+
+================
+File: reference/components/ActionBar.tsx
+================
+import styles from '@components/ActionBar.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import ButtonGroup from '@components/ButtonGroup';
+
+interface ActionBarItem {
+  hotkey?: string;
+  onClick?: () => void;
+  openHotkey?: string;
+  selected?: boolean;
+  body: React.ReactNode;
+  items?: any;
+}
+
+interface ActionBarProps {
+  items: ActionBarItem[];
+}
+
+const ActionBar: React.FC<ActionBarProps> = ({ items }) => {
+  return (
+    <div className={styles.root}>
+      <ButtonGroup items={items} />
+    </div>
+  );
+};
+
+export default ActionBar;
+
+================
+File: reference/components/ActionButton.module.scss
+================
+.hotkey {
+  background: var(--theme-button-foreground);
+  color: var(--theme-text);
+  cursor: pointer;
+  flex-shrink: 0;
+  font-weight: 400;
+  padding: 0 1ch 0 1ch;
+  text-indent: 0ch;
+  user-select: none;
+}
+
+.content {
+  background: var(--theme-button-background);
+  box-shadow: inset 0 0 0 2px var(--theme-button-foreground);
+  cursor: pointer;
+  flex-shrink: 0;
+  font-weight: 400;
+  padding: 0 1ch 0 1ch;
+  text-indent: 0ch;
+  text-transform: uppercase;
+  user-select: none;
+}
+
+.root {
+  display: inline-flex;
+  align-items: center;
+  justify-content: space-between;
+  cursor: pointer;
+  outline: 0;
+  border: 0;
+  margin: 0;
+  padding: 0;
+  box-sizing: border-box;
+  font-family: var(--font-family-mono);
+  font-size: var(--font-size);
+  flex-shrink: 0;
+
+  &:hover .hotkey {
+    background: var(--theme-focused-foreground);
+  }
+
+  &:hover .content {
+    box-shadow: inset 0 0 0 2px var(--theme-focused-foreground);
+  }
+
+  &:focus .hotkey {
+    background: var(--theme-focused-foreground);
+  }
+
+  &:focus .content {
+    box-shadow: inset 0 0 0 2px var(--theme-focused-foreground);
+  }
+}
+
+.selected {
+  .content {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/ActionButton.tsx
+================
+import styles from '@components/ActionButton.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface ActionButtonProps {
+  onClick?: () => void;
+  hotkey?: any;
+  children?: React.ReactNode;
+  style?: any;
+  rootStyle?: any;
+  isSelected?: boolean;
+}
+
+const ActionButton = React.forwardRef<HTMLDivElement, ActionButtonProps>(({ onClick, hotkey, children, style, rootStyle, isSelected }, ref) => {
+  return (
+    <div className={Utilities.classNames(styles.root, isSelected ? styles.selected : null)} style={rootStyle} onClick={onClick} tabIndex={0} ref={ref} role="button">
+      {Utilities.isEmpty(hotkey) ? null : <span className={styles.hotkey}>{hotkey}</span>}
+      <span className={styles.content} style={style}>
+        {children}
+      </span>
+    </div>
+  );
+});
+
+ActionButton.displayName = 'ActionButton';
+
+export default ActionButton;
+
+================
+File: reference/components/ActionListItem.module.scss
+================
+.item {
+  align-items: flex-start;
+  background: transparent;
+  color: var(--theme-text);
+  cursor: pointer;
+  display: flex;
+  justify-content: space-between;
+  outline: 0;
+  border: 0;
+  text-decoration: none;
+
+  &:visited {
+    background: transparent;
+    color: var(--theme-text);
+  }
+
+  &:hover {
+    background: transparent;
+    color: var(--theme-text);
+  }
+
+  &:hover .icon {
+    background: var(--theme-focused-foreground);
+  }
+
+  &:focus .icon {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.icon {
+  align-items: center;
+  background: var(--theme-button-foreground);
+  display: inline-flex;
+  flex-shrink: 0;
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  justify-content: center;
+  width: 3ch;
+  user-select: none;
+}
+
+.text {
+  align-items: center;
+  align-self: stretch;
+  background: var(--theme-button-background);
+  display: inline-flex;
+  justify-content: flex-start;
+  min-width: 10%;
+  padding: 0 1ch 0 1ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/ActionListItem.tsx
+================
+import styles from '@components/ActionListItem.module.scss';
+
+import * as React from 'react';
+
+interface ActionListItemProps {
+  style?: React.CSSProperties;
+  icon?: React.ReactNode;
+  children?: React.ReactNode;
+  href?: string;
+  target?: string;
+  onClick?: React.MouseEventHandler<HTMLDivElement | HTMLAnchorElement>;
+}
+
+const ActionListItem: React.FC<ActionListItemProps> = (props) => {
+  const { href, target, onClick, children, icon, style } = props;
+
+  if (href) {
+    return (
+      <a className={styles.item} href={href} target={target} style={style} tabIndex={0} role="link">
+        <figure className={styles.icon}>{icon}</figure>
+        <span className={styles.text}>{children}</span>
+      </a>
+    );
+  }
+
+  return (
+    <div className={styles.item} onClick={onClick} style={style} tabIndex={0} role="button">
+      <figure className={styles.icon}>{icon}</figure>
+      <span className={styles.text}>{children}</span>
+    </div>
+  );
+};
+
+export default ActionListItem;
+
+================
+File: reference/components/AlertBanner.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border);
+  box-shadow: 1ch 1ch 0 0 var(--theme-border-subdued);
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  font-weight: 400;
+}
+
+================
+File: reference/components/AlertBanner.tsx
+================
+import styles from '@components/AlertBanner.module.scss';
+
+import * as React from 'react';
+
+interface AlertBannerProps {
+  style?: any;
+  children?: any;
+}
+
+const AlertBanner: React.FC<AlertBannerProps> = ({ style: propStyle, ...rest }) => {
+  let style: React.CSSProperties = { ...propStyle };
+
+  return <div className={styles.root} {...rest} style={style} />;
+};
+
+export default AlertBanner;
+
+================
+File: reference/components/Avatar.module.scss
+================
+.parent {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+}
+
+.placeholder {
+  background: var(--theme-border);
+  display: inline-block;
+  width: 4ch;
+  height: calc(var(--font-size) * var(--theme-line-height-base) * 2);
+  vertical-align: bottom;
+  flex-shrink: 0;
+  position: relative;
+
+  &:hover {
+    &::before {
+      content: '';
+      top: 0;
+      left: 0;
+      right: 0;
+      bottom: 0;
+      position: absolute;
+      pointer-events: none;
+      opacity: 0.5;
+      background: var(--theme-focused-foreground);
+    }
+  }
+}
+
+.root {
+  background: unset;
+  background-size: cover;
+  background-position: 50% 50%;
+  background-repeat: no-repeat;
+  display: inline-block;
+  width: 4ch;
+  height: calc(var(--font-size) * var(--theme-line-height-base) * 2);
+  vertical-align: bottom;
+  flex-shrink: 0;
+  position: relative;
+
+  &:hover {
+    background: unset;
+    background-size: cover;
+    background-position: 50% 50%;
+    background-repeat: no-repeat;
+    &::before {
+      content: '';
+      top: 0;
+      left: 0;
+      right: 0;
+      bottom: 0;
+      position: absolute;
+      pointer-events: none;
+      opacity: 0.5;
+      background: var(--theme-focused-foreground);
+    }
+  }
+}
+
+a {
+  &.root {
+    background: unset;
+    background-size: cover;
+    background-position: 50% 50%;
+    background-repeat: no-repeat;
+    display: inline-block;
+    width: 4ch;
+    height: calc(var(--font-size) * var(--theme-line-height-base) * 2);
+    vertical-align: bottom;
+    flex-shrink: 0;
+    position: relative;
+
+    &:hover {
+      background: unset;
+      background-size: cover;
+      background-position: 50% 50%;
+      background-repeat: no-repeat;
+      &::before {
+        content: '';
+        top: 0;
+        left: 0;
+        right: 0;
+        bottom: 0;
+        position: absolute;
+        pointer-events: none;
+        opacity: 0.5;
+        background: var(--theme-focused-foreground);
+      }
+    }
+
+    &:focus {
+      background: unset;
+      background-size: cover;
+      background-position: 50% 50%;
+      background-repeat: no-repeat;
+      outline: 0;
+
+      &::before {
+        content: '';
+        top: 0;
+        left: 0;
+        right: 0;
+        bottom: 0;
+        position: absolute;
+        pointer-events: none;
+        opacity: 0.5;
+        background: var(--theme-focused-foreground);
+      }
+    }
+  }
+}
+
+.right {
+  min-width: 10%;
+  width: 100%;
+  background: var(--theme-foreground);
+}
+
+================
+File: reference/components/Avatar.tsx
+================
+import styles from '@components/Avatar.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface AvatarProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'style' | 'className' | 'children'> {
+  src?: string;
+  href?: string;
+  target?: string;
+  style?: React.CSSProperties;
+  children?: React.ReactNode;
+}
+
+const Avatar: React.FC<AvatarProps> = (props) => {
+  const { src, style: propStyle, href, target, children, ...rest } = props;
+
+  const backgroundStyle = src ? { backgroundImage: `url(${src})` } : {};
+
+  const combinedStyle = { ...propStyle, ...backgroundStyle };
+
+  let avatarElement: React.ReactElement;
+
+  if (href) {
+    avatarElement = <a className={Utilities.classNames(src ? styles.root : styles.placeholder)} style={combinedStyle} href={href} target={target} tabIndex={0} role="link" />;
+  } else {
+    avatarElement = <figure className={Utilities.classNames(src ? styles.root : styles.placeholder)} style={combinedStyle} />;
+  }
+
+  if (!children) {
+    return avatarElement;
+  }
+
+  return (
+    <div className={styles.parent} {...rest}>
+      {avatarElement}
+      <span className={styles.right}>{children}</span>
+    </div>
+  );
+};
+
+export default Avatar;
+
+================
+File: reference/components/Badge.module.scss
+================
+.root {
+  display: inline-block;
+  vertical-align: top;
+  text-align: center;
+  font-weight: 400;
+  margin: 0;
+  outline: 0;
+  border: 0;
+  font-family: var(--font-family-mono);
+  min-height: calc(var(--theme-line-height-base) * var(--font-size));
+  text-transform: uppercase;
+  transition: 200ms ease all;
+  background: var(--theme-border);
+  padding: 0 1ch 0 1ch;
+}
+
+================
+File: reference/components/Badge.tsx
+================
+'use client';
+
+import styles from '@components/Badge.module.scss';
+
+import * as React from 'react';
+
+interface BadgeProps extends React.HTMLAttributes<HTMLSpanElement> {
+  children?: React.ReactNode;
+}
+
+const Badge: React.FC<BadgeProps> = ({ children, ...rest }) => {
+  return (
+    <span className={styles.root} {...rest}>
+      {children}
+    </span>
+  );
+};
+
+export default Badge;
+
+================
+File: reference/components/BarLoader.module.scss
+================
+.root {
+  background: var(--theme-border);
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  white-space: nowrap;
+  text-align: left;
+  vertical-align: bottom;
+  display: block;
+}
+
+.bar {
+  background: linear-gradient(to right, transparent, var(--theme-text));
+  height: 100%;
+  width: 0%;
+  transition: width 0.1s linear;
+}
+
+================
+File: reference/components/BarLoader.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+import styles from '@components/BarLoader.module.scss';
+
+interface BarLoaderProps {
+  intervalRate?: number;
+  progress?: number;
+}
+
+const BarLoader: React.FC<BarLoaderProps> = ({ intervalRate, progress }) => {
+  const [currentProgress, setCurrentProgress] = React.useState<number>(progress || 0);
+
+  React.useEffect(() => {
+    if (progress !== undefined) {
+      setCurrentProgress(progress);
+      return;
+    }
+
+    if (!intervalRate) return;
+
+    const interval = setInterval(() => {
+      setCurrentProgress((prev) => (prev + 10) % 110);
+    }, intervalRate);
+
+    return () => clearInterval(interval);
+  }, [intervalRate, progress]);
+
+  return (
+    <div className={styles.root}>
+      <div
+        className={styles.bar}
+        style={{
+          width: `${Math.min(currentProgress, 100)}%`,
+        }}
+      ></div>
+    </div>
+  );
+};
+
+export default BarLoader;
+
+================
+File: reference/components/BarProgress.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border-subdued);
+  white-space: nowrap;
+  text-align: left;
+  vertical-align: bottom;
+  overflow: hidden;
+  position: relative;
+}
+
+.measure {
+  visibility: hidden;
+  position: absolute;
+  pointer-events: none;
+}
+
+================
+File: reference/components/BarProgress.tsx
+================
+'use client';
+
+import styles from '@components/BarProgress.module.scss';
+
+import * as React from 'react';
+
+interface BarProgressProps {
+  intervalRate?: number;
+  progress?: number;
+  fillChar?: string;
+}
+
+const BarProgress: React.FC<BarProgressProps> = ({ intervalRate, progress, fillChar = '░' }) => {
+  const [currentProgress, setCurrentProgress] = React.useState(progress ?? 0);
+  const [containerWidth, setContainerWidth] = React.useState(0);
+  const [charWidth, setCharWidth] = React.useState(0);
+
+  const containerRef = React.useRef<HTMLDivElement>(null);
+  const measureRef = React.useRef<HTMLSpanElement>(null);
+
+  React.useEffect(() => {
+    if (typeof progress === 'number') {
+      setCurrentProgress(progress);
+      return;
+    }
+    if (!intervalRate) return;
+    const interval = setInterval(() => {
+      setCurrentProgress((prev) => (prev + 10) % 110);
+    }, intervalRate);
+    return () => clearInterval(interval);
+  }, [intervalRate, progress]);
+
+  React.useLayoutEffect(() => {
+    if (!measureRef.current) return;
+    const rect = measureRef.current.getBoundingClientRect();
+    if (rect.width > 0) {
+      setCharWidth(rect.width);
+    } else {
+      requestAnimationFrame(() => {
+        const retryRect = measureRef.current?.getBoundingClientRect();
+        if (retryRect && retryRect.width > 0) {
+          setCharWidth(retryRect.width);
+        }
+      });
+    }
+  }, [fillChar]);
+
+  React.useEffect(() => {
+    if (!containerRef.current) return;
+    const observer = new ResizeObserver((entries) => {
+      for (const entry of entries) {
+        const { width } = entry.contentRect;
+        setContainerWidth(width);
+      }
+    });
+    observer.observe(containerRef.current);
+    return () => observer.disconnect();
+  }, []);
+
+  const cappedProgress = Math.min(currentProgress, 100);
+
+  let maxChars = 10;
+  if (charWidth > 0 && containerWidth > 0) {
+    maxChars = Math.max(1, Math.floor(containerWidth / charWidth));
+  }
+
+  const filledChars = Math.round((cappedProgress / 100) * maxChars);
+  const barStr = fillChar.repeat(filledChars);
+
+  return (
+    <div className={styles.root} ref={containerRef} aria-valuenow={cappedProgress} aria-valuemin={0} aria-valuemax={100} role="progressbar">
+      <span ref={measureRef} className={styles.measure}>
+        {fillChar}
+      </span>
+      {barStr}
+    </div>
+  );
+};
+
+export default BarProgress;
+
+================
+File: reference/components/Block.module.scss
+================
+.block {
+  display: inline-block;
+  width: 1ch;
+  background: var(--theme-text);
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  vertical-align: bottom;
+  flex-shrink: 0;
+}
+
+================
+File: reference/components/Block.tsx
+================
+import styles from '@components/Block.module.scss';
+
+import * as React from 'react';
+
+interface BlockProps extends React.HTMLAttributes<HTMLSpanElement> {
+  children?: React.ReactNode;
+}
+
+const Block: React.FC<BlockProps> = ({ children, ...rest }) => {
+  return (
+    <span className={styles.block} {...rest}>
+      {children}
+    </span>
+  );
+};
+
+export default Block;
+
+================
+File: reference/components/BlockLoader.module.scss
+================
+.root {
+  display: inline-block;
+  width: 1ch;
+  color: inherit;
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  vertical-align: bottom;
+}
+
+================
+File: reference/components/BlockLoader.tsx
+================
+'use client';
+
+import styles from '@components/BlockLoader.module.scss';
+
+import * as React from 'react';
+
+const SEQUENCES = [
+  ['⠁', '⠂', '⠄', '⡀', '⢀', '⠠', '⠐', '⠈'],
+  ['⣾', '⣽', '⣻', '⢿', '⡿', '⣟', '⣯', '⣷'],
+  ['▖', '▘', '▝', '▗'],
+  ['▁', '▂', '▃', '▄', '▅', '▆', '▇', '█', '▇', '▆', '▅', '▄', '▃', '▁'],
+  ['▉', '▊', '▋', '▌', '▍', '▎', '▏', '▎', '▍', '▌', '▋', '▊', '▉'],
+  ['←', '↖', '↑', '↗', '→', '↘', '↓', '↙'],
+  ['┤', '┘', '┴', '└', '├', '┌', '┬', '┐'],
+  ['◢', '◣', '◤', '◥'],
+  ['◰', '◳', '◲', '◱'],
+  ['◴', '◷', '◶', '◵'],
+  ['◐', '◓', '◑', '◒'],
+];
+
+interface BlockLoaderProps extends Omit<React.HTMLAttributes<HTMLSpanElement>, 'children'> {
+  mode?: number;
+}
+
+const BlockLoader: React.FC<BlockLoaderProps> = ({ mode = 0 }) => {
+  if (!SEQUENCES[mode]) {
+    return <span className={styles.block}>�</span>;
+  }
+
+  const [index, setIndex] = React.useState(0);
+  const intervalRef = React.useRef<number | null>(null);
+  const indexLength = SEQUENCES[mode].length;
+
+  React.useEffect(() => {
+    if (intervalRef.current) {
+      clearInterval(intervalRef.current);
+    }
+
+    intervalRef.current = window.setInterval(() => {
+      setIndex((prevIndex) => (prevIndex + 1) % indexLength);
+    }, 100);
+
+    return () => {
+      if (intervalRef.current) {
+        clearInterval(intervalRef.current);
+      }
+    };
+  }, [indexLength]);
+
+  return <span className={styles.root}>{SEQUENCES[mode][index]}</span>;
+};
+
+export default BlockLoader;
+
+================
+File: reference/components/BreadCrumbs.module.scss
+================
+.root {
+  display: inline-block;
+}
+
+.line {
+  display: inline-block;
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+}
+
+.link {
+  display: inline-block;
+  color: var(--theme-text);
+  outline: 0;
+  border: 0;
+  text-decoration: none;
+  background: var(--theme-border);
+
+  &:hover {
+    color: var(--theme-text);
+    background: var(--theme-focused-foreground);
+  }
+  
+  &:visited {
+    color: var(--theme-text);
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.symbol {
+  min-width: 1ch;
+  display: inline-block;
+  margin: 0 1ch 0 1ch;
+}
+
+================
+File: reference/components/BreadCrumbs.tsx
+================
+import styles from '@components/BreadCrumbs.module.scss';
+
+import * as React from 'react';
+
+interface BreadCrumbsItem {
+  url?: string;
+  name: string;
+}
+
+interface BreadCrumbsProps {
+  items: BreadCrumbsItem[];
+}
+
+const BreadCrumbs: React.FC<BreadCrumbsProps> = ({ items }) => {
+  return (
+    <nav aria-label="breadcrumb" className={styles.root}>
+      {items.map((item, index) => {
+        const linkElement = (
+          <a className={styles.link} href={item.url} target="_blank" tabIndex={0} role="link">
+            {item.name}
+          </a>
+        );
+
+        return (
+          <span className={styles.line} key={index}>
+            {index === items.length - 1 ? <span>{linkElement}</span> : linkElement}
+            {index < items.length - 1 && <span className={styles.symbol}> ❯ </span>}
+          </span>
+        );
+      })}
+    </nav>
+  );
+};
+
+export default BreadCrumbs;
+
+================
+File: reference/components/Button.module.scss
+================
+.root {
+  vertical-align: top;
+  display: inline-block;
+  font-weight: 400;
+  text-align: center;
+  margin: 0;
+  outline: 0;
+  border: 0;
+  font-family: var(--font-family-mono);
+  width: 100%;
+  font-size: var(--font-size);
+  line-height: calc(var(--theme-line-height-base) * 2em);
+  min-height: calc(var(--theme-line-height-base) * (var(--font-size) * 2));
+  padding: 0 2ch 0 2ch;
+  text-transform: uppercase;
+  letter-spacing: 1px;
+  transition: 200ms ease all;
+}
+
+.primary {
+  background: var(--theme-button);
+  color: var(--theme-button-text);
+  cursor: pointer;
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.secondary {
+  background: var(--theme-background);
+  color: var(--theme-text);
+  box-shadow: inset 0 0 0 1px var(--theme-border);
+  cursor: pointer;
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+    box-shadow: inset 0 0 0 1px transparent;
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    box-shadow: inset 0 0 0 1px transparent;
+  }
+}
+
+.disabled {
+  background: var(--theme-button-background);
+  color: var(--theme-button-foreground);
+  cursor: not-allowed;
+}
+
+================
+File: reference/components/Button.tsx
+================
+'use client';
+
+import styles from '@components/Button.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
+  theme?: 'PRIMARY' | 'SECONDARY';
+  isDisabled?: boolean;
+  children?: React.ReactNode;
+}
+
+const Button: React.FC<ButtonProps> = ({ theme = 'PRIMARY', isDisabled, children, ...rest }) => {
+  let classNames = Utilities.classNames(styles.root, styles.primary);
+
+  if (theme === 'SECONDARY') {
+    classNames = Utilities.classNames(styles.root, styles.secondary);
+  }
+
+  if (isDisabled) {
+    classNames = Utilities.classNames(styles.root, styles.disabled);
+
+    return <div className={classNames}>{children}</div>;
+  }
+
+  return (
+    <button className={classNames} role="button" tabIndex={0} disabled={isDisabled} {...rest}>
+      {children}
+    </button>
+  );
+};
+
+export default Button;
+
+================
+File: reference/components/ButtonGroup.module.scss
+================
+.root {
+}
+
+.full {
+  display: grid;
+  grid-template-columns: repeat(auto-fit, minmax(60px, 1fr));
+  white-space: nowrap;
+}
+
+================
+File: reference/components/ButtonGroup.tsx
+================
+'use client';
+
+import styles from '@components/ButtonGroup.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import ActionButton from '@components/ActionButton';
+import DropdownMenuTrigger from '@components/DropdownMenuTrigger';
+
+const ButtonGroup = (props) => {
+  if (!props.items) {
+    return null;
+  }
+
+  return (
+    <div className={Utilities.classNames(styles.root, props.isFull ? styles.full : null)}>
+      {props.items.map((each) => {
+        if (each.items) {
+          return (
+            <DropdownMenuTrigger key={each.body} items={each.items} hotkey={each.openHotkey}>
+              <ActionButton hotkey={each.hotkey} isSelected={each.selected}>
+                {each.body}
+              </ActionButton>
+            </DropdownMenuTrigger>
+          );
+        }
+
+        return (
+          <ActionButton key={each.body} onClick={each.onClick} hotkey={each.hotkey} isSelected={each.selected}>
+            {each.body}
+          </ActionButton>
+        );
+      })}
+    </div>
+  );
+};
+
+export default ButtonGroup;
+
+================
+File: reference/components/Canvas.module.scss
+================
+.canvas {
+  grid-row-start: 1;
+  grid-column-start: 1;
+  margin: 0;
+  padding: 0;
+  width: 100%;
+  min-height: 100%;
+  max-height: 288px;
+}
+
+================
+File: reference/components/Canvas.tsx
+================
+'use client';
+
+import styles from '@components/Canvas.module.scss';
+
+import * as React from 'react';
+
+type WebGLContextResult = {
+  gl: WebGLRenderingContext | WebGL2RenderingContext;
+  ext: {
+    internalFormat: number;
+    internalFormatRG: number;
+    formatRG: number;
+    texType: number;
+  };
+  support_linear_float: boolean | null;
+};
+
+var config = {
+  TEXTURE_DOWNSAMPLE: 1,
+  DENSITY_DISSIPATION: 0.991,
+  VELOCITY_DISSIPATION: 0.9992,
+  PRESSURE_DISSIPATION: 0.8,
+  PRESSURE_ITERATIONS: 16,
+  CURL: 12,
+  SPLAT_RADIUS: 0.12,
+  SPEED: 0.01,
+};
+
+export default function BlueCanvasComponent(props) {
+  const canvasRef = React.useRef<HTMLCanvasElement>(null);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    canvas.width = canvas.clientWidth;
+    canvas.height = canvas.clientHeight;
+
+    let splatStack: any[] = [];
+
+    const { gl, ext, support_linear_float } = getWebGLContext(canvas);
+
+    function getWebGLContext(canvas: HTMLCanvasElement): WebGLContextResult {
+      const params = {
+        alpha: false,
+        depth: false,
+        stencil: false,
+        antialias: true,
+      };
+
+      let gl: WebGLRenderingContext | WebGL2RenderingContext | null = canvas.getContext('webgl2', params) as WebGL2RenderingContext | null;
+
+      const isWebGL2 = !!gl;
+
+      if (!isWebGL2) {
+        gl = (canvas.getContext('webgl', params) || canvas.getContext('experimental-webgl', params)) as WebGLRenderingContext | null;
+      }
+
+      if (!gl) throw new Error('WebGL not supported');
+
+      const halfFloat = gl.getExtension('OES_texture_half_float');
+      let support_linear_float = gl.getExtension('OES_texture_half_float_linear');
+
+      if (isWebGL2) {
+        gl.getExtension('EXT_color_buffer_float');
+        support_linear_float = gl.getExtension('OES_texture_float_linear');
+      }
+
+      const internalFormat = isWebGL2 ? (gl as WebGL2RenderingContext).RGBA16F : gl.RGBA;
+      const internalFormatRG = isWebGL2 ? (gl as WebGL2RenderingContext).RG16F : gl.RGBA;
+      const formatRG = isWebGL2 ? (gl as WebGL2RenderingContext).RG : gl.RGBA;
+      const texType = isWebGL2 ? (gl as WebGL2RenderingContext).HALF_FLOAT : halfFloat?.HALF_FLOAT_OES || gl.UNSIGNED_BYTE;
+
+      return {
+        gl: gl as WebGLRenderingContext,
+        ext: {
+          internalFormat,
+          internalFormatRG,
+          formatRG,
+          texType,
+        },
+        support_linear_float: !!support_linear_float,
+      };
+    }
+
+    class GLProgram {
+      program: WebGLProgram;
+      uniforms: { [key: string]: WebGLUniformLocation | null };
+
+      constructor(vertexShader: WebGLShader, fragmentShader: WebGLShader) {
+        this.uniforms = {};
+        this.program = gl.createProgram()!;
+
+        gl.attachShader(this.program, vertexShader);
+        gl.attachShader(this.program, fragmentShader);
+        gl.linkProgram(this.program);
+
+        if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {
+          throw new Error(gl.getProgramInfoLog(this.program) || 'Program failed to link');
+        }
+
+        const uniformCount = gl.getProgramParameter(this.program, gl.ACTIVE_UNIFORMS);
+        for (let i = 0; i < uniformCount; i++) {
+          const uniformName = gl.getActiveUniform(this.program, i)!.name;
+          this.uniforms[uniformName] = gl.getUniformLocation(this.program, uniformName);
+        }
+      }
+
+      bind() {
+        gl.useProgram(this.program);
+      }
+    }
+
+    function compileShader(type: number, source: string): WebGLShader {
+      const shader = gl.createShader(type)!;
+      gl.shaderSource(shader, source);
+      gl.compileShader(shader);
+
+      if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
+        throw new Error(gl.getShaderInfoLog(shader) || 'Shader compilation failed');
+      }
+
+      return shader;
+    }
+
+    var baseVertexShader = compileShader(gl.VERTEX_SHADER, 'precision highp float; precision mediump sampler2D; attribute vec2 aPosition; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform vec2 texelSize; void main () {     vUv = aPosition * 0.5 + 0.5;     vL = vUv - vec2(texelSize.x, 0.0);     vR = vUv + vec2(texelSize.x, 0.0);     vT = vUv + vec2(0.0, texelSize.y);     vB = vUv - vec2(0.0, texelSize.y);     gl_Position = vec4(aPosition, 0.0, 1.0); }');
+    var clearShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; uniform sampler2D uTexture; uniform float value; void main () {     gl_FragColor = value * texture2D(uTexture, vUv); }');
+    var displayShader = compileShader(
+      gl.FRAGMENT_SHADER,
+      `
+  precision highp float;
+  precision mediump sampler2D;
+  varying vec2 vUv;
+  uniform sampler2D uTexture;
+  void main () {
+    float density = texture2D(uTexture, vUv).r;
+    vec3 splatColor = vec3(1.0, 1.0, 1.0);
+    vec3 backgroundColor = vec3(0.8, 0.8, 0.8);
+    vec3 color = mix(backgroundColor, splatColor, density);
+    gl_FragColor = vec4(color, 1.0);
+  }
+  `
+    );
+    var splatShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; uniform sampler2D uTarget; uniform float aspectRatio; uniform vec3 color; uniform vec2 point; uniform float radius; void main () {     vec2 p = vUv - point.xy;     p.x *= aspectRatio;     vec3 splat = exp(-dot(p, p) / radius) * color;     vec3 base = texture2D(uTarget, vUv).xyz;     gl_FragColor = vec4(base + splat, 1.0); }');
+    var advectionManualFilteringShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; uniform sampler2D uVelocity; uniform sampler2D uSource; uniform vec2 texelSize; uniform float dt; uniform float dissipation; vec4 bilerp (in sampler2D sam, in vec2 p) {     vec4 st;     st.xy = floor(p - 0.5) + 0.5;     st.zw = st.xy + 1.0;     vec4 uv = st * texelSize.xyxy;     vec4 a = texture2D(sam, uv.xy);     vec4 b = texture2D(sam, uv.zy);     vec4 c = texture2D(sam, uv.xw);     vec4 d = texture2D(sam, uv.zw);     vec2 f = p - st.xy;     return mix(mix(a, b, f.x), mix(c, d, f.x), f.y); } void main () {     vec2 coord = gl_FragCoord.xy - dt * texture2D(uVelocity, vUv).xy;     gl_FragColor = dissipation * bilerp(uSource, coord);     gl_FragColor.a = 1.0; }');
+    var advectionShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; uniform sampler2D uVelocity; uniform sampler2D uSource; uniform vec2 texelSize; uniform float dt; uniform float dissipation; void main () {     vec2 coord = vUv - dt * texture2D(uVelocity, vUv).xy * texelSize;     gl_FragColor = dissipation * texture2D(uSource, coord); }');
+    var divergenceShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform sampler2D uVelocity; vec2 sampleVelocity (in vec2 uv) {     vec2 multiplier = vec2(1.0, 1.0);     if (uv.x < 0.0) { uv.x = 0.0; multiplier.x = -1.0; }     if (uv.x > 1.0) { uv.x = 1.0; multiplier.x = -1.0; }     if (uv.y < 0.0) { uv.y = 0.0; multiplier.y = -1.0; }     if (uv.y > 1.0) { uv.y = 1.0; multiplier.y = -1.0; }     return multiplier * texture2D(uVelocity, uv).xy; } void main () {     float L = sampleVelocity(vL).x;     float R = sampleVelocity(vR).x;     float T = sampleVelocity(vT).y;     float B = sampleVelocity(vB).y;     float div = 0.5 * (R - L + T - B);     gl_FragColor = vec4(div, 0.0, 0.0, 1.0); }');
+    var curlShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform sampler2D uVelocity; void main () {     float L = texture2D(uVelocity, vL).y;     float R = texture2D(uVelocity, vR).y;     float T = texture2D(uVelocity, vT).x;     float B = texture2D(uVelocity, vB).x;     float vorticity = R - L - T + B;     gl_FragColor = vec4(vorticity, 0.0, 0.0, 1.0); }');
+    var vorticityShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform sampler2D uVelocity; uniform sampler2D uCurl; uniform float curl; uniform float dt; void main () {     float L = texture2D(uCurl, vL).y;     float R = texture2D(uCurl, vR).y;     float T = texture2D(uCurl, vT).x;     float B = texture2D(uCurl, vB).x;     float C = texture2D(uCurl, vUv).x;     vec2 force = vec2(abs(T) - abs(B), abs(R) - abs(L));     force *= 1.0 / length(force + 0.00001) * curl * C;     vec2 vel = texture2D(uVelocity, vUv).xy;     gl_FragColor = vec4(vel + force * dt, 0.0, 1.0); }');
+    var pressureShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform sampler2D uPressure; uniform sampler2D uDivergence; vec2 boundary (in vec2 uv) {     uv = min(max(uv, 0.0), 1.0);     return uv; } void main () {     float L = texture2D(uPressure, boundary(vL)).x;     float R = texture2D(uPressure, boundary(vR)).x;     float T = texture2D(uPressure, boundary(vT)).x;     float B = texture2D(uPressure, boundary(vB)).x;     float C = texture2D(uPressure, vUv).x;     float divergence = texture2D(uDivergence, vUv).x;     float pressure = (L + R + B + T - divergence) * 0.25;     gl_FragColor = vec4(pressure, 0.0, 0.0, 1.0); }');
+    var gradientSubtractShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform sampler2D uPressure; uniform sampler2D uVelocity; vec2 boundary (in vec2 uv) {     uv = min(max(uv, 0.0), 1.0);     return uv; } void main () {     float L = texture2D(uPressure, boundary(vL)).x;     float R = texture2D(uPressure, boundary(vR)).x;     float T = texture2D(uPressure, boundary(vT)).x;     float B = texture2D(uPressure, boundary(vB)).x;     vec2 velocity = texture2D(uVelocity, vUv).xy;     velocity.xy -= vec2(R - L, T - B);     gl_FragColor = vec4(velocity, 0.0, 1.0); }');
+
+    let textureWidth: number = 0;
+    let textureHeight: number = 0;
+
+    let density: { first: any[]; second: any[]; swap: () => void } | undefined;
+    let velocity: { first: any[]; second: any[]; swap: () => void } | undefined;
+    let divergence: any[] | undefined;
+    let curl: any[] | undefined;
+    let pressure: { first: any[]; second: any[]; swap: () => void } | undefined;
+
+    initFramebuffers();
+
+    var clearProgram = new GLProgram(baseVertexShader, clearShader);
+    var displayProgram = new GLProgram(baseVertexShader, displayShader);
+    var splatProgram = new GLProgram(baseVertexShader, splatShader);
+    var advectionProgram = new GLProgram(baseVertexShader, support_linear_float ? advectionShader : advectionManualFilteringShader);
+    var divergenceProgram = new GLProgram(baseVertexShader, divergenceShader);
+    var curlProgram = new GLProgram(baseVertexShader, curlShader);
+    var vorticityProgram = new GLProgram(baseVertexShader, vorticityShader);
+    var pressureProgram = new GLProgram(baseVertexShader, pressureShader);
+    var gradienSubtractProgram = new GLProgram(baseVertexShader, gradientSubtractShader);
+
+    function initFramebuffers() {
+      textureWidth = gl.drawingBufferWidth >> config.TEXTURE_DOWNSAMPLE;
+      textureHeight = gl.drawingBufferHeight >> config.TEXTURE_DOWNSAMPLE;
+
+      var iFormat = ext.internalFormat;
+      var iFormatRG = ext.internalFormatRG;
+      var formatRG = ext.formatRG;
+      var texType = ext.texType;
+
+      density = createDoubleFBO(0, textureWidth, textureHeight, iFormat, gl.RGBA, texType, support_linear_float ? gl.LINEAR : gl.NEAREST);
+      velocity = createDoubleFBO(2, textureWidth, textureHeight, iFormatRG, formatRG, texType, support_linear_float ? gl.LINEAR : gl.NEAREST);
+      divergence = createFBO(4, textureWidth, textureHeight, iFormatRG, formatRG, texType, gl.NEAREST);
+      curl = createFBO(5, textureWidth, textureHeight, iFormatRG, formatRG, texType, gl.NEAREST);
+      pressure = createDoubleFBO(6, textureWidth, textureHeight, iFormatRG, formatRG, texType, gl.NEAREST);
+    }
+
+    function createFBO(texId, w, h, internalFormat, format, type, param) {
+      gl.activeTexture(gl.TEXTURE0 + texId);
+
+      var texture = gl.createTexture();
+
+      gl.bindTexture(gl.TEXTURE_2D, texture);
+      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, param);
+      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, param);
+      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
+      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
+      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, w, h, 0, format, type, null);
+
+      var fbo = gl.createFramebuffer();
+
+      gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
+      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
+      gl.viewport(0, 0, w, h);
+      gl.clear(gl.COLOR_BUFFER_BIT);
+
+      return [texture, fbo, texId];
+    }
+
+    function createDoubleFBO(texId, w, h, internalFormat, format, type, param) {
+      var fbo1 = createFBO(texId, w, h, internalFormat, format, type, param);
+      var fbo2 = createFBO(texId + 1, w, h, internalFormat, format, type, param);
+
+      return {
+        get first() {
+          return fbo1;
+        },
+        get second() {
+          return fbo2;
+        },
+        swap: function swap() {
+          var temp = fbo1;
+
+          fbo1 = fbo2;
+          fbo2 = temp;
+        },
+      };
+    }
+
+    const blit = (() => {
+      const vertexData = new Float32Array([-1, -1, -1, 1, 1, 1, 1, -1]);
+      const elementData = new Uint16Array([0, 1, 2, 0, 2, 3]);
+
+      gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());
+      gl.bufferData(gl.ARRAY_BUFFER, vertexData, gl.STATIC_DRAW);
+      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer());
+      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, elementData, gl.STATIC_DRAW);
+      gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);
+      gl.enableVertexAttribArray(0);
+
+      return (destination: WebGLFramebuffer | null) => {
+        gl.bindFramebuffer(gl.FRAMEBUFFER, destination);
+        gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);
+      };
+    })();
+
+    var lastTime = Date.now();
+    let timeAccumulator = 0;
+
+    update();
+
+    function splat(x: number, y: number, dx: number, dy: number) {
+      if (!velocity) return;
+      if (!canvas) return;
+      if (!density) return;
+
+      splatProgram.bind();
+      gl.uniform1i(splatProgram.uniforms.uTarget, velocity.first[2]);
+      gl.uniform1f(splatProgram.uniforms.aspectRatio, canvas.width / canvas.height);
+      gl.uniform2f(splatProgram.uniforms.point, x / canvas.width, 1.0 - y / canvas.height);
+      gl.uniform3f(splatProgram.uniforms.color, dx, -dy, 1.0);
+      gl.uniform1f(splatProgram.uniforms.radius, config.SPLAT_RADIUS);
+      blit(velocity.second[1]);
+      velocity.swap();
+
+      gl.uniform1i(splatProgram.uniforms.uTarget, density.first[2]);
+
+      gl.uniform3f(splatProgram.uniforms.color, 0.9, 0.9, 0.9);
+      blit(density.second[1]);
+      density.swap();
+    }
+
+    function update() {
+      resizeCanvas();
+
+      const dt = Math.min((Date.now() - lastTime) / 1000, 0.016);
+      lastTime = Date.now();
+
+      gl.viewport(0, 0, textureWidth, textureHeight);
+
+      timeAccumulator += dt;
+
+      if (canvas) {
+        if (timeAccumulator >= config.SPEED) {
+          timeAccumulator = 0;
+          // splat(canvas.width * 0.5, canvas.height, 0, 48 * 8);
+          splat(0, canvas.height, canvas.width * 0.3, 8);
+        }
+      }
+
+      advectionProgram.bind();
+
+      if (!velocity) return;
+      if (!density) return;
+      if (!curl) return;
+      if (!divergence) return;
+      if (!pressure) return;
+
+      gl.uniform2f(advectionProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(advectionProgram.uniforms.uVelocity, velocity.first[2]);
+      gl.uniform1i(advectionProgram.uniforms.uSource, velocity.first[2]);
+      gl.uniform1f(advectionProgram.uniforms.dt, dt);
+      gl.uniform1f(advectionProgram.uniforms.dissipation, config.VELOCITY_DISSIPATION);
+      blit(velocity.second[1]);
+      velocity.swap();
+
+      gl.uniform1i(advectionProgram.uniforms.uVelocity, velocity.first[2]);
+
+      gl.uniform1i(advectionProgram.uniforms.uSource, density.first[2]);
+      gl.uniform1f(advectionProgram.uniforms.dissipation, config.DENSITY_DISSIPATION);
+      blit(density.second[1]);
+      density.swap();
+
+      curlProgram.bind();
+      gl.uniform2f(curlProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(curlProgram.uniforms.uVelocity, velocity.first[2]);
+      blit(curl[1]);
+
+      vorticityProgram.bind();
+      gl.uniform2f(vorticityProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(vorticityProgram.uniforms.uVelocity, velocity.first[2]);
+      gl.uniform1i(vorticityProgram.uniforms.uCurl, curl[2]);
+      gl.uniform1f(vorticityProgram.uniforms.curl, config.CURL);
+      gl.uniform1f(vorticityProgram.uniforms.dt, dt);
+      blit(velocity.second[1]);
+      velocity.swap();
+
+      divergenceProgram.bind();
+      gl.uniform2f(divergenceProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(divergenceProgram.uniforms.uVelocity, velocity.first[2]);
+      blit(divergence[1]);
+
+      clearProgram.bind();
+
+      var pressureTexId = pressure.first[2];
+
+      gl.activeTexture(gl.TEXTURE0 + pressureTexId);
+      gl.bindTexture(gl.TEXTURE_2D, pressure.first[0]);
+      gl.uniform1i(clearProgram.uniforms.uTexture, pressureTexId);
+      gl.uniform1f(clearProgram.uniforms.value, config.PRESSURE_DISSIPATION);
+      blit(pressure.second[1]);
+      pressure.swap();
+
+      pressureProgram.bind();
+      gl.uniform2f(pressureProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(pressureProgram.uniforms.uDivergence, divergence[2]);
+      pressureTexId = pressure.first[2];
+      gl.activeTexture(gl.TEXTURE0 + pressureTexId);
+
+      for (var _i = 0; _i < config.PRESSURE_ITERATIONS; _i++) {
+        gl.bindTexture(gl.TEXTURE_2D, pressure.first[0]);
+        gl.uniform1i(pressureProgram.uniforms.uPressure, pressureTexId);
+        blit(pressure.second[1]);
+        pressure.swap();
+      }
+
+      gradienSubtractProgram.bind();
+      gl.uniform2f(gradienSubtractProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(gradienSubtractProgram.uniforms.uPressure, pressure.first[2]);
+      gl.uniform1i(gradienSubtractProgram.uniforms.uVelocity, velocity.first[2]);
+      blit(velocity.second[1]);
+      velocity.swap();
+
+      gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
+      displayProgram.bind();
+      gl.uniform1i(displayProgram.uniforms.uTexture, density.first[2]);
+      blit(null);
+
+      requestAnimationFrame(update);
+    }
+
+    function resizeCanvas() {
+      if (!canvas) return;
+
+      (canvas.width !== canvas.clientWidth || canvas.height !== canvas.clientHeight) && ((canvas.width = canvas.clientWidth), (canvas.height = canvas.clientHeight), initFramebuffers());
+    }
+  }, []);
+
+  return <canvas className={styles.canvas} ref={canvasRef} style={props.style} />;
+}
+
+================
+File: reference/components/CanvasPlatformer.module.scss
+================
+.container {
+  width: 100%;
+  height: auto;
+  position: relative;
+}
+
+.root {
+  display: block;
+  width: 100%;
+  background: transparent;
+
+  &:focus {
+    outline: 0;
+    box-shadow: inset 0 0 0 1px var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/CanvasPlatformer.tsx
+================
+'use client';
+
+import styles from '@components/CanvasPlatformer.module.scss';
+
+import * as React from 'react';
+
+import ActionButton from '@components/ActionButton';
+
+interface PlatformerProps {
+  rows?: number;
+}
+
+// TODO(jimmylee)
+// Move these constants into a separate file
+// Dynamically compute these constants since we're going to
+// Support t-shirt sizes for the system.
+const LINE_HEIGHT = 20;
+const CHARACTER_WIDTH = 9.6;
+const GRAVITY = 0.3;
+const MOVE_SPEED = 2;
+const JUMP_SPEED = -6;
+const FRICTION = 0.85;
+
+interface Position {
+  x: number;
+  y: number;
+}
+
+interface Keys {
+  left: boolean;
+  right: boolean;
+  jump: boolean;
+}
+
+interface Block {
+  x: number;
+  y: number;
+}
+
+const CanvasPlatformer: React.FC<PlatformerProps> = ({ rows = 25 }) => {
+  const canvasRef = React.useRef<HTMLCanvasElement>(null);
+  const [focused, setFocused] = React.useState(false);
+
+  const positionRef = React.useRef<Position>({ x: 50, y: 0 });
+  const velocityRef = React.useRef<Position>({ x: 0, y: 0 });
+  const keysRef = React.useRef<Keys>({ left: false, right: false, jump: false });
+  const platformBlocksRef = React.useRef<Block[]>([]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+    const parent = canvas.parentElement;
+    if (!parent) return;
+
+    const resizeCanvas = () => {
+      const parentWidth = parent.clientWidth;
+      const canvasHeight = rows * LINE_HEIGHT;
+      canvas.width = parentWidth;
+      canvas.height = canvasHeight;
+      const platformY = canvas.height - LINE_HEIGHT * 2;
+      positionRef.current.y = platformY - LINE_HEIGHT;
+      platformBlocksRef.current = [];
+      const numBlocks = Math.floor(parentWidth / CHARACTER_WIDTH);
+      for (let i = 0; i < numBlocks; i++) {
+        platformBlocksRef.current.push({ x: i * CHARACTER_WIDTH, y: platformY });
+      }
+    };
+
+    resizeCanvas();
+    window.addEventListener('resize', resizeCanvas);
+    return () => {
+      window.removeEventListener('resize', resizeCanvas);
+    };
+  }, [rows]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const handleFocus = () => setFocused(true);
+    const handleBlur = () => {
+      setFocused(false);
+      keysRef.current = { left: false, right: false, jump: false };
+    };
+
+    canvas.tabIndex = 0;
+    canvas.addEventListener('focus', handleFocus);
+    canvas.addEventListener('blur', handleBlur);
+
+    const handleClick = (e: MouseEvent) => {
+      const rect = canvas.getBoundingClientRect();
+      const x = Math.floor((e.clientX - rect.left) / CHARACTER_WIDTH) * CHARACTER_WIDTH;
+      const y = Math.floor((e.clientY - rect.top) / LINE_HEIGHT) * LINE_HEIGHT;
+      const blocks = platformBlocksRef.current;
+      const existingIndex = blocks.findIndex((b) => b.x === x && b.y === y);
+      if (existingIndex !== -1) {
+        blocks.splice(existingIndex, 1);
+      } else {
+        blocks.push({ x, y });
+      }
+    };
+
+    canvas.addEventListener('click', handleClick);
+
+    return () => {
+      canvas.removeEventListener('focus', handleFocus);
+      canvas.removeEventListener('blur', handleBlur);
+      canvas.removeEventListener('click', handleClick);
+    };
+  }, []);
+
+  React.useEffect(() => {
+    const handleKeyDown = (e: KeyboardEvent) => {
+      if (!focused) return;
+      if (e.key === 'ArrowLeft' || e.key === 'ArrowRight' || e.code === 'Space') {
+        e.preventDefault();
+        e.stopPropagation();
+      }
+      if (e.key === 'ArrowLeft') keysRef.current.left = true;
+      if (e.key === 'ArrowRight') keysRef.current.right = true;
+      if (e.code === 'Space') keysRef.current.jump = true;
+    };
+
+    const handleKeyUp = (e: KeyboardEvent) => {
+      if (!focused) return;
+      if (e.key === 'ArrowLeft' || e.key === 'ArrowRight' || e.code === 'Space') {
+        e.preventDefault();
+        e.stopPropagation();
+      }
+      if (e.key === 'ArrowLeft') keysRef.current.left = false;
+      if (e.key === 'ArrowRight') keysRef.current.right = false;
+      if (e.code === 'Space') keysRef.current.jump = false;
+    };
+
+    window.addEventListener('keydown', handleKeyDown, { capture: true });
+    window.addEventListener('keyup', handleKeyUp, { capture: true });
+
+    return () => {
+      window.removeEventListener('keydown', handleKeyDown, { capture: true });
+      window.removeEventListener('keyup', handleKeyUp, { capture: true });
+    };
+  }, [focused]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+    const ctx = canvas.getContext('2d');
+    if (!ctx) return;
+
+    const loop = () => {
+      const w = canvas.width;
+      const h = canvas.height;
+      ctx.clearRect(0, 0, w, h);
+
+      const pos = positionRef.current;
+      const vel = velocityRef.current;
+      const keys = keysRef.current;
+      const blocks = platformBlocksRef.current;
+
+      const themeBorderColor = getComputedStyle(document.body).getPropertyValue('--theme-border').trim();
+      const themeTextColor = getComputedStyle(document.body).getPropertyValue('--theme-text').trim();
+
+      ctx.fillStyle = themeBorderColor;
+      for (const b of blocks) {
+        ctx.fillRect(b.x, b.y, CHARACTER_WIDTH, LINE_HEIGHT);
+      }
+
+      if (keys.left) vel.x = -MOVE_SPEED;
+      else if (keys.right) vel.x = MOVE_SPEED;
+      else {
+        vel.x *= FRICTION;
+        if (Math.abs(vel.x) < 0.1) vel.x = 0;
+      }
+
+      const oldY = pos.y;
+      vel.y += GRAVITY;
+      pos.x += vel.x;
+      pos.y += vel.y;
+
+      if (pos.x < 0) pos.x = 0;
+      if (pos.x > w - CHARACTER_WIDTH) pos.x = w - CHARACTER_WIDTH;
+
+      let groundY = h;
+      for (const b of blocks) {
+        const horizontallyOverlapping = pos.x + CHARACTER_WIDTH > b.x && pos.x < b.x + CHARACTER_WIDTH;
+        if (horizontallyOverlapping && oldY + LINE_HEIGHT <= b.y && pos.y + LINE_HEIGHT >= b.y) {
+          if (b.y < groundY) groundY = b.y;
+        }
+      }
+
+      if (pos.y + LINE_HEIGHT > groundY) {
+        pos.y = groundY - LINE_HEIGHT;
+        vel.y = 0;
+        if (keys.jump) vel.y = JUMP_SPEED;
+      }
+
+      ctx.fillStyle = themeTextColor;
+      ctx.fillRect(pos.x, pos.y, CHARACTER_WIDTH, LINE_HEIGHT);
+
+      requestAnimationFrame(loop);
+    };
+
+    requestAnimationFrame(loop);
+  }, []);
+
+  const handleJumpClick = () => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+    const pos = positionRef.current;
+    const vel = velocityRef.current;
+    let w = canvas.width;
+    let h = canvas.height;
+    let groundY = h;
+    for (const b of platformBlocksRef.current) {
+      const horizontallyOverlapping = pos.x + CHARACTER_WIDTH > b.x && pos.x < b.x + CHARACTER_WIDTH;
+      if (horizontallyOverlapping && pos.y + LINE_HEIGHT <= b.y) {
+        if (b.y < groundY) groundY = b.y;
+      }
+    }
+    if (pos.y + LINE_HEIGHT >= groundY) vel.y = JUMP_SPEED;
+  };
+
+  const handleLeftClick = () => {
+    const pos = positionRef.current;
+    pos.x -= CHARACTER_WIDTH;
+    if (pos.x < 0) pos.x = 0;
+  };
+
+  const handleRightClick = () => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+    const pos = positionRef.current;
+    pos.x += CHARACTER_WIDTH;
+    if (pos.x > canvas.width - CHARACTER_WIDTH) pos.x = canvas.width - CHARACTER_WIDTH;
+  };
+
+  return (
+    <>
+      <ActionButton hotkey="␣" onClick={handleJumpClick}>
+        Jump
+      </ActionButton>
+      <ActionButton hotkey="←" onClick={handleLeftClick}>
+        Left
+      </ActionButton>
+      <ActionButton hotkey="→" onClick={handleRightClick}>
+        Right
+      </ActionButton>
+      <div className={styles.container}>
+        <canvas className={styles.root} ref={canvasRef} />
+      </div>
+    </>
+  );
+};
+
+export default CanvasPlatformer;
+
+================
+File: reference/components/CanvasSnake.module.scss
+================
+.container {
+  width: 100%;
+  height: auto;
+  position: relative;
+}
+
+.root {
+  display: block;
+  width: 100%;
+  background: transparent;
+
+  &:focus {
+    outline: 0;
+    box-shadow: inset 0 0 0 1px var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/CanvasSnake.tsx
+================
+'use client';
+
+import styles from '@components/CanvasSnake.module.scss';
+
+import * as React from 'react';
+
+import ActionButton from '@components/ActionButton';
+
+interface SnakeProps {
+  rows?: number;
+}
+
+// TODO(jimmylee)
+// Move these constants into a separate file
+// Dynamically compute these constants since we're going to
+// Support t-shirt sizes for the system.
+const LINE_HEIGHT = 20;
+const CHARACTER_WIDTH = 9.6;
+
+interface Position {
+  x: number;
+  y: number;
+}
+
+type Direction = 'UP' | 'DOWN' | 'LEFT' | 'RIGHT';
+
+const CanvasSnake = ({ rows = 25 }: SnakeProps) => {
+  const canvasRef = React.useRef<HTMLCanvasElement>(null);
+  const [focused, setFocused] = React.useState(false);
+  const directionRef = React.useRef<Direction>('RIGHT');
+  const snakeRef = React.useRef<Position[]>([]);
+  const fruitRef = React.useRef<Position>({ x: 0, y: 0 });
+  const gridWidthRef = React.useRef<number>(0);
+  const gridHeightRef = React.useRef<number>(0);
+  const lastMoveTimeRef = React.useRef<number>(0);
+  const moveInterval = 150;
+  const animationFrameRef = React.useRef<number | null>(null);
+
+  const reset = React.useCallback(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const w = canvas.width;
+    const h = canvas.height;
+    const gridWidth = Math.floor(w / CHARACTER_WIDTH);
+    const gridHeight = Math.floor(h / LINE_HEIGHT);
+
+    gridWidthRef.current = gridWidth;
+    gridHeightRef.current = gridHeight;
+
+    const startX = Math.floor(gridWidth / 2);
+    const startY = Math.floor(gridHeight / 2);
+
+    snakeRef.current = [
+      { x: startX - 13, y: startY },
+      { x: startX - 12, y: startY },
+      { x: startX - 11, y: startY },
+      { x: startX - 10, y: startY },
+      { x: startX - 9, y: startY },
+      { x: startX - 8, y: startY },
+      { x: startX - 7, y: startY },
+      { x: startX - 6, y: startY },
+      { x: startX - 5, y: startY },
+      { x: startX - 4, y: startY },
+      { x: startX - 3, y: startY },
+      { x: startX - 2, y: startY },
+      { x: startX - 1, y: startY },
+      { x: startX, y: startY },
+    ];
+
+    directionRef.current = 'RIGHT';
+
+    fruitRef.current = {
+      x: Math.floor(Math.random() * gridWidth),
+      y: Math.floor(Math.random() * gridHeight),
+    };
+
+    lastMoveTimeRef.current = performance.now();
+  }, []);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const parent = canvas.parentElement;
+    if (!parent) return;
+
+    const onHandleResizeCanvas = () => {
+      const parentWidth = parent.clientWidth;
+      const canvasHeight = rows * LINE_HEIGHT;
+      canvas.width = parentWidth;
+      canvas.height = canvasHeight;
+      reset();
+    };
+
+    onHandleResizeCanvas();
+    window.addEventListener('resize', onHandleResizeCanvas);
+    return () => {
+      window.removeEventListener('resize', onHandleResizeCanvas);
+    };
+  }, [rows, reset]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const onHandleFocus = () => {
+      setFocused(true);
+    };
+    const onHandleBlur = () => {
+      setFocused(false);
+    };
+
+    canvas.tabIndex = 0;
+    canvas.addEventListener('focus', onHandleFocus);
+    canvas.addEventListener('blur', onHandleBlur);
+
+    return () => {
+      canvas.removeEventListener('focus', onHandleFocus);
+      canvas.removeEventListener('blur', onHandleBlur);
+    };
+  }, []);
+
+  React.useEffect(() => {
+    const handleKeyDown = (e: KeyboardEvent) => {
+      if (!focused) return;
+      if (e.key === 'ArrowLeft' || e.key === 'ArrowRight' || e.key === 'ArrowUp' || e.key === 'ArrowDown') {
+        e.preventDefault();
+        e.stopPropagation();
+      }
+      const currentDir = directionRef.current;
+      if (e.key === 'ArrowLeft' && currentDir !== 'RIGHT') directionRef.current = 'LEFT';
+      if (e.key === 'ArrowRight' && currentDir !== 'LEFT') directionRef.current = 'RIGHT';
+      if (e.key === 'ArrowUp' && currentDir !== 'DOWN') directionRef.current = 'UP';
+      if (e.key === 'ArrowDown' && currentDir !== 'UP') directionRef.current = 'DOWN';
+    };
+
+    window.addEventListener('keydown', handleKeyDown, { capture: true });
+    return () => {
+      window.removeEventListener('keydown', handleKeyDown, { capture: true });
+    };
+  }, [focused]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const ctx = canvas.getContext('2d');
+    if (!ctx) return;
+
+    const themeBorderColor = getComputedStyle(document.body).getPropertyValue('--theme-text').trim();
+    const themeTextColor = getComputedStyle(document.body).getPropertyValue('--theme-focused-foreground').trim();
+
+    const moveSnake = () => {
+      const snake = snakeRef.current;
+      const dir = directionRef.current;
+      const head = snake[snake.length - 1];
+      let newHead: Position = { x: head.x, y: head.y };
+      if (dir === 'LEFT') newHead.x -= 1;
+      if (dir === 'RIGHT') newHead.x += 1;
+      if (dir === 'UP') newHead.y -= 1;
+      if (dir === 'DOWN') newHead.y += 1;
+      if (newHead.x < 0 || newHead.x >= gridWidthRef.current || newHead.y < 0 || newHead.y >= gridHeightRef.current) {
+        reset();
+        return;
+      }
+      for (const seg of snake) {
+        if (seg.x === newHead.x && seg.y === newHead.y) {
+          reset();
+          return;
+        }
+      }
+      snake.push(newHead);
+      if (newHead.x === fruitRef.current.x && newHead.y === fruitRef.current.y) {
+        placeTarget();
+      } else {
+        snake.shift();
+      }
+    };
+
+    const placeTarget = () => {
+      const snake = snakeRef.current;
+      const gridW = gridWidthRef.current;
+      const gridH = gridHeightRef.current;
+      let fruitPos: Position;
+      while (true) {
+        fruitPos = {
+          x: Math.floor(Math.random() * gridW),
+          y: Math.floor(Math.random() * gridH),
+        };
+        if (!snake.some((s) => s.x === fruitPos.x && s.y === fruitPos.y)) break;
+      }
+      fruitRef.current = fruitPos;
+    };
+
+    const loop = (time: number) => {
+      if (!ctx) return;
+      if (!focused) return;
+
+      const w = canvas.width;
+      const h = canvas.height;
+
+      ctx.clearRect(0, 0, w, h);
+      ctx.fillStyle = themeTextColor;
+      ctx.fillRect(fruitRef.current.x * CHARACTER_WIDTH, fruitRef.current.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+      ctx.fillStyle = themeBorderColor;
+      for (const segment of snakeRef.current) {
+        ctx.fillRect(segment.x * CHARACTER_WIDTH, segment.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+      }
+      if (time - lastMoveTimeRef.current > moveInterval) {
+        moveSnake();
+        lastMoveTimeRef.current = time;
+      }
+      animationFrameRef.current = requestAnimationFrame(loop);
+    };
+
+    if (focused && animationFrameRef.current === null) {
+      animationFrameRef.current = requestAnimationFrame(loop);
+    }
+
+    return () => {
+      if (animationFrameRef.current !== null) {
+        cancelAnimationFrame(animationFrameRef.current);
+        animationFrameRef.current = null;
+      }
+    };
+  }, [focused, reset]);
+
+  React.useEffect(() => {
+    if (!focused) {
+      if (animationFrameRef.current !== null) {
+        cancelAnimationFrame(animationFrameRef.current);
+        animationFrameRef.current = null;
+      }
+
+      return;
+    }
+
+    if (animationFrameRef.current === null && canvasRef.current) {
+      animationFrameRef.current = requestAnimationFrame((time) => {
+        const canvas = canvasRef.current;
+        if (!canvas) return;
+
+        const ctx = canvas.getContext('2d');
+        if (!ctx) return;
+
+        const themeBorderColor = getComputedStyle(document.body).getPropertyValue('--theme-border').trim();
+        const themeTextColor = getComputedStyle(document.body).getPropertyValue('--theme-text').trim();
+
+        ctx.clearRect(0, 0, canvas.width, canvas.height);
+        ctx.fillStyle = themeBorderColor;
+        ctx.fillRect(fruitRef.current.x * CHARACTER_WIDTH, fruitRef.current.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+        ctx.fillStyle = themeTextColor;
+
+        for (const segment of snakeRef.current) {
+          ctx.fillRect(segment.x * CHARACTER_WIDTH, segment.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+        }
+
+        lastMoveTimeRef.current = time;
+        animationFrameRef.current = requestAnimationFrame(loop);
+
+        function loop(time: number) {
+          if (!focused) return;
+          if (!ctx) return;
+          if (!canvas) return;
+
+          ctx.clearRect(0, 0, canvas.width, canvas.height);
+          ctx.fillStyle = themeBorderColor;
+          ctx.fillRect(fruitRef.current.x * CHARACTER_WIDTH, fruitRef.current.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+          ctx.fillStyle = themeTextColor;
+          for (const segment of snakeRef.current) {
+            ctx.fillRect(segment.x * CHARACTER_WIDTH, segment.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+          }
+          if (time - lastMoveTimeRef.current > moveInterval) {
+            moveSnake();
+            lastMoveTimeRef.current = time;
+          }
+          animationFrameRef.current = requestAnimationFrame(loop);
+        }
+
+        const moveSnake = () => {
+          const snake = snakeRef.current;
+          const dir = directionRef.current;
+          const head = snake[snake.length - 1];
+          let newHead: Position = { x: head.x, y: head.y };
+          if (dir === 'LEFT') newHead.x -= 1;
+          if (dir === 'RIGHT') newHead.x += 1;
+          if (dir === 'UP') newHead.y -= 1;
+          if (dir === 'DOWN') newHead.y += 1;
+          if (newHead.x < 0 || newHead.x >= gridWidthRef.current || newHead.y < 0 || newHead.y >= gridHeightRef.current) {
+            reset();
+            return;
+          }
+
+          for (const seg of snake) {
+            if (seg.x === newHead.x && seg.y === newHead.y) {
+              reset();
+              return;
+            }
+          }
+
+          snake.push(newHead);
+          if (newHead.x === fruitRef.current.x && newHead.y === fruitRef.current.y) {
+            placeTarget();
+          } else {
+            snake.shift();
+          }
+        };
+
+        const placeTarget = () => {
+          const snake = snakeRef.current;
+          const gridW = gridWidthRef.current;
+          const gridH = gridHeightRef.current;
+          let fruitPos: Position;
+          while (true) {
+            fruitPos = {
+              x: Math.floor(Math.random() * gridW),
+              y: Math.floor(Math.random() * gridH),
+            };
+            if (!snake.some((s) => s.x === fruitPos.x && s.y === fruitPos.y)) break;
+          }
+          fruitRef.current = fruitPos;
+        };
+      });
+    }
+  }, [focused, reset]);
+
+  const onHandleClickUp = () => {
+    if (directionRef.current !== 'DOWN') directionRef.current = 'UP';
+  };
+  const onHandleClickDown = () => {
+    if (directionRef.current !== 'UP') directionRef.current = 'DOWN';
+  };
+  const onHandleClickLeft = () => {
+    if (directionRef.current !== 'RIGHT') directionRef.current = 'LEFT';
+  };
+  const onHandleClickRight = () => {
+    if (directionRef.current !== 'LEFT') directionRef.current = 'RIGHT';
+  };
+
+  return (
+    <>
+      <ActionButton hotkey="↑" onClick={onHandleClickUp}>
+        Up
+      </ActionButton>
+      <ActionButton hotkey="↓" onClick={onHandleClickDown}>
+        Down
+      </ActionButton>
+      <ActionButton hotkey="←" onClick={onHandleClickLeft}>
+        Left
+      </ActionButton>
+      <ActionButton hotkey="→" onClick={onHandleClickRight}>
+        Right
+      </ActionButton>
+      <div className={styles.container}>
+        <canvas className={styles.root} ref={canvasRef} />
+      </div>
+    </>
+  );
+};
+
+export default CanvasSnake;
+
+================
+File: reference/components/Card.module.scss
+================
+.card {
+  position: relative;
+  display: block;
+  padding-top: 0;
+  padding-left: 0;
+  padding-right: 0;
+  padding-bottom: 0;
+  white-space: prewrap;
+}
+
+.children {
+  box-shadow:
+    inset 2px 0 0 0 var(--theme-text),
+    inset -2px 0 0 0 var(--theme-text),
+    inset 0 -2px 0 0 var(--theme-text);
+  display: block;
+  padding-top: calc(var(--theme-line-height-base) * 0.5rem);
+  padding-left: 2ch;
+  padding-right: 2ch;
+  padding-bottom: calc(var(--theme-line-height-base) * 1rem);
+  overflow-x: auto;
+  overflow-y: hidden;
+
+  &::-webkit-scrollbar {
+    display: none;
+  }
+
+  scrollbar-width: none;
+}
+
+.action {
+  display: flex;
+  align-items: flex-end;
+  justify-content: space-between;
+}
+
+.left {
+  min-width: 10%;
+  width: 100%;
+  box-shadow:
+    inset 2px 0 0 0 var(--theme-text),
+    inset 0 2px 0 0 var(--theme-text);
+  padding: calc((var(--font-size) * 0.5) * var(--theme-line-height-base)) 2ch 0px 1ch;
+}
+
+.leftCorner {
+  flex-shrink: 0;
+  box-shadow:
+    inset 2px 0 0 0 var(--theme-text),
+    inset 0 2px 0 0 var(--theme-text);
+  padding: calc((var(--font-size) * 0.5) * var(--theme-line-height-base)) 1ch 0px 1ch;
+}
+
+.right {
+  min-width: 10%;
+  width: 100%;
+  box-shadow:
+    inset -2px 0 0 0 var(--theme-text),
+    inset 0 2px 0 0 var(--theme-text);
+  padding: calc((var(--font-size) * 0.5) * var(--theme-line-height-base)) 2ch 0px 1ch;
+}
+
+.rightCorner {
+  flex-shrink: 0;
+  box-shadow:
+    inset -2px 0 0 0 var(--theme-text),
+    inset 0 2px 0 0 var(--theme-text);
+  padding: calc((var(--font-size) * 0.5) * var(--theme-line-height-base)) 1ch 0px 1ch;
+}
+
+.title {
+  flex-shrink: 0;
+  padding: 0 1ch 0 1ch;
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+================
+File: reference/components/Card.tsx
+================
+import styles from '@components/Card.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface CardProps extends React.HTMLAttributes<HTMLDivElement> {
+  children?: React.ReactNode;
+  title?: string | any;
+  mode?: string | any;
+}
+
+const Card: React.FC<CardProps> = ({ children, mode, title, style, ...rest }) => {
+  let titleElement = (
+    <header className={styles.action}>
+      <div className={styles.left} aria-hidden="true"></div>
+      {title ? <h2 className={styles.title}>{title}</h2> : null}
+      <div className={styles.right} aria-hidden="true"></div>
+    </header>
+  );
+
+  if (mode === 'left') {
+    titleElement = (
+      <header className={styles.action}>
+        <div className={styles.leftCorner} aria-hidden="true"></div>
+        <h2 className={styles.title}>{title}</h2>
+        <div className={styles.right} aria-hidden="true"></div>
+      </header>
+    );
+  }
+
+  if (mode === 'right') {
+    titleElement = (
+      <header className={styles.action}>
+        <div className={styles.left} aria-hidden="true"></div>
+        <h2 className={styles.title}>{title}</h2>
+        <div className={styles.rightCorner} aria-hidden="true"></div>
+      </header>
+    );
+  }
+
+  return (
+    <article className={styles.card} style={style}>
+      {titleElement}
+      <section className={styles.children}>{children}</section>
+    </article>
+  );
+};
+
+export default Card;
+
+================
+File: reference/components/CardDouble.module.scss
+================
+.card {
+  --card-double-border-width: 6px;
+  --card-double-half-gutter: (var(--font-size) * 0.5);
+  --card-double-top-gutter: 6px;
+
+  position: relative;
+  display: block;
+  padding-top: 0;
+  padding-right: 0;
+  padding-left: 0;
+  padding-bottom: 0;
+}
+
+.children {
+  border-left: var(--card-double-border-width) solid var(--theme-text);
+  border-left-style: double;
+  border-bottom: var(--card-double-border-width) solid var(--theme-text);
+  border-bottom-style: double;
+  border-right: var(--card-double-border-width) solid var(--theme-text);
+  border-right-style: double;
+  display: block;
+  padding-top: calc(var(--theme-line-height-base) * 0.5rem);
+  padding-left: calc(2ch - var(--card-double-border-width));
+  padding-right: calc(2ch - var(--card-double-border-width));
+  padding-bottom: calc(var(--theme-line-height-base) * 1rem - var(--card-double-border-width));
+
+  overflow-x: auto;
+  overflow-y: hidden;
+
+  &::-webkit-scrollbar {
+    display: none;
+  }
+
+  scrollbar-width: none;
+}
+
+.action {
+  display: flex;
+  align-items: flex-end;
+  justify-content: space-between;
+}
+
+.left {
+  min-width: 10%;
+  width: 100%;
+  border-top: var(--card-double-border-width) solid var(--theme-text);
+  border-top-style: double;
+  border-left: var(--card-double-border-width) solid var(--theme-text);
+  border-left-style: double;
+  padding: calc(var(--card-double-top-gutter) * var(--theme-line-height-base)) 2ch 0px 1ch;
+}
+
+.leftCorner {
+  flex-shrink: 0;
+  border-top: var(--card-double-border-width) solid var(--theme-text);
+  border-top-style: double;
+  border-left: var(--card-double-border-width) solid var(--theme-text);
+  border-left-style: double;
+  padding: calc(var(--card-double-top-gutter) * var(--theme-line-height-base)) calc(1ch - 6px) 0px 1ch;
+}
+
+.right {
+  min-width: 10%;
+  width: 100%;
+  border-top: var(--card-double-border-width) solid var(--theme-text);
+  border-top-style: double;
+  border-right: var(--card-double-border-width) solid var(--theme-text);
+  border-right-style: double;
+  padding: calc(var(--card-double-top-gutter) * var(--theme-line-height-base)) 2ch 0px 1ch;
+}
+
+.rightCorner {
+  flex-shrink: 0;
+  border-top: var(--card-double-border-width) solid var(--theme-text);
+  border-top-style: double;
+  border-right: var(--card-double-border-width) solid var(--theme-text);
+  border-right-style: double;
+  padding: calc(var(--card-double-top-gutter) * var(--theme-line-height-base)) 1ch 0px calc(1ch - 6px);
+}
+
+.title {
+  flex-shrink: 0;
+  padding: 0 1ch 0 1ch;
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+================
+File: reference/components/CardDouble.tsx
+================
+import styles from '@components/CardDouble.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface CardProps extends React.HTMLAttributes<HTMLDivElement> {
+  children?: React.ReactNode;
+  title?: string | any;
+  mode?: string | any;
+  style?: any;
+}
+
+const CardDouble: React.FC<CardProps> = ({ children, mode, title, style, ...rest }) => {
+  let titleElement = (
+    <header className={styles.action}>
+      <div className={styles.left} aria-hidden="true"></div>
+      <h2 className={styles.title}>{title}</h2>
+      <div className={styles.right} aria-hidden="true"></div>
+    </header>
+  );
+
+  if (mode === 'left') {
+    titleElement = (
+      <header className={styles.action}>
+        <div className={styles.leftCorner} aria-hidden="true"></div>
+        <h2 className={styles.title}>{title}</h2>
+        <div className={styles.right} aria-hidden="true"></div>
+      </header>
+    );
+  }
+
+  if (mode === 'right') {
+    titleElement = (
+      <header className={styles.action}>
+        <div className={styles.left} aria-hidden="true"></div>
+        <h2 className={styles.title}>{title}</h2>
+        <div className={styles.rightCorner} aria-hidden="true"></div>
+      </header>
+    );
+  }
+
+  return (
+    <article className={styles.card}>
+      {titleElement}
+      <section className={styles.children}>
+        <section className={styles.borderChildren} style={style}>
+          {children}
+        </section>
+      </section>
+    </article>
+  );
+};
+
+export default CardDouble;
+
+================
+File: reference/components/Checkbox.module.scss
+================
+.section {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+
+  .right {
+    padding-bottom: calc(8px * var(--theme-line-height-base));
+    box-shadow: inset 0 1px 0 0 var(--theme-border-subdued);
+  }
+
+  &:last-child {
+    .right {
+      padding-bottom: 0;
+    }
+  }
+}
+
+.checked {
+}
+
+.focused {
+  .figure {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.relative {
+  position: relative;
+  flex-shrink: 0;
+  display: inline-block;
+  vertical-align: baseline;
+}
+
+.figure {
+  width: 100%;
+  height: 100%;
+  cursor: pointer;
+  color: var(--theme-text);
+  background: var(--theme-button-foreground);
+  align-self: stretch;
+  display: inline-block;
+  padding: 0 1ch 0 1ch;
+}
+
+.right {
+  background: var(--theme-button-background);
+  min-width: 10%;
+  width: 100%;
+  align-self: stretch;
+}
+
+.input {
+  top: 0;
+  left: 0;
+  opacity: 0;
+  position: absolute;
+  width: 1px;
+  height: 1px;
+}
+
+================
+File: reference/components/Checkbox.tsx
+================
+'use client';
+
+import styles from '@components/Checkbox.module.scss';
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface CheckboxProps {
+  style?: React.CSSProperties;
+  checkboxStyle?: React.CSSProperties;
+  name: string;
+  defaultChecked?: boolean;
+  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;
+  tabIndex?: number;
+  children?: React.ReactNode;
+}
+
+const Checkbox: React.FC<CheckboxProps> = ({ style, name, defaultChecked = false, onChange, children }) => {
+  const checkboxId = `${name}-checkbox`;
+  const inputRef = React.useRef<HTMLInputElement>(null);
+
+  const [isChecked, setIsChecked] = React.useState(defaultChecked);
+  const [isFocused, setIsFocused] = React.useState(false);
+
+  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
+    switch (event.key) {
+      case 'Enter':
+        event.preventDefault();
+        inputRef.current?.click();
+        break;
+      case 'ArrowUp':
+      case 'ArrowLeft': {
+        event.preventDefault();
+        const previousFocusable = Utilities.findNextFocusable(document.activeElement, 'previous');
+        previousFocusable?.focus();
+        break;
+      }
+      case 'ArrowDown':
+      case 'ArrowRight': {
+        event.preventDefault();
+        const nextFocusable = Utilities.findNextFocusable(document.activeElement, 'next');
+        nextFocusable?.focus();
+        break;
+      }
+      default:
+        break;
+    }
+  };
+
+  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
+    const newCheckedStatus = event.target.checked;
+    setIsChecked(newCheckedStatus);
+    if (onChange) {
+      onChange(event);
+    }
+  };
+
+  const handleFocus = () => setIsFocused(true);
+  const handleBlur = () => setIsFocused(false);
+
+  return (
+    <div
+      className={Utilities.classNames(styles.section, {
+        [styles.checked]: isChecked,
+        [styles.focused]: isFocused,
+      })}
+      style={style}
+    >
+      <div className={styles.relative}>
+        <input className={styles.input} id={checkboxId} type="checkbox" name={name} defaultChecked={defaultChecked} onChange={handleChange} onKeyDown={handleKeyDown} onFocus={handleFocus} onBlur={handleBlur} tabIndex={0} ref={inputRef} />
+        <label className={styles.figure} htmlFor={checkboxId}>
+          {isChecked ? '╳' : '\u00A0'}
+        </label>
+      </div>
+      <div className={styles.right}>&nbsp;&nbsp;{children}</div>
+    </div>
+  );
+};
+
+export default Checkbox;
+
+================
+File: reference/components/Chessboard.module.scss
+================
+.board {
+  display: inline-table;
+  border-collapse: collapse;
+}
+
+.corner {
+  width: 1ch;
+  height: calc(var(--theme-line-height-base) * 1rem);
+}
+
+.cell {
+  width: 1ch;
+  height: calc(var(--theme-line-height-base) * 1rem);
+  background-color: var(--theme-border-subdued);
+  text-align: center;
+  vertical-align: middle;
+}
+
+.square {
+  height: calc(var(--theme-line-height-base) * 2rem);
+  text-align: center;
+  vertical-align: middle;
+  width: 3ch;
+}
+
+.dark {
+  background-color: var(--theme-focused-foreground);
+}
+
+.light {
+  background-color: var(--theme-focused-foreground-subdued);
+}
+
+.symbol {
+  font-size: 40px;
+  line-height: calc(var(--theme-line-height-base) * 2rem);
+}
+
+================
+File: reference/components/Chessboard.tsx
+================
+'use client';
+
+import styles from '@components/Chessboard.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+const FILE = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];
+const RANK = [8, 7, 6, 5, 4, 3, 2, 1];
+
+const getPieceSymbol = (piece: string) => {
+  const mapping: Record<string, string> = {
+    K: '♔',
+    Q: '♕',
+    R: '♖',
+    B: '♗',
+    N: '♘',
+    P: '♙',
+    k: '♚',
+    q: '♛',
+    r: '♜',
+    b: '♝',
+    n: '♞',
+    p: '♟',
+  };
+  return mapping[piece] || '';
+};
+
+interface ChessboardProps {
+  board: string[][];
+}
+
+const Chessboard: React.FC<ChessboardProps> = ({ board }) => {
+  return (
+    <table className={styles.board}>
+      <tbody>
+        <tr>
+          <td className={styles.corner}></td>
+          {FILE.map((file) => (
+            <td key={file} className={styles.cell}>
+              {file}
+            </td>
+          ))}
+        </tr>
+        {RANK.map((rank, rowIndex) => (
+          <tr key={rank}>
+            <td className={styles.cell}>{rank}</td>
+            {FILE.map((_, colIndex) => {
+              const isDark = (rowIndex + colIndex) % 2 === 0;
+              const squareClass = isDark ? styles.dark : styles.light;
+              return (
+                <td key={colIndex} className={Utilities.classNames(styles.square, squareClass)}>
+                  <span className={styles.symbol}>{getPieceSymbol(board[rowIndex][colIndex])}</span>
+                </td>
+              );
+            })}
+          </tr>
+        ))}
+      </tbody>
+    </table>
+  );
+};
+
+export default Chessboard;
+
+================
+File: reference/components/CodeBlock.module.scss
+================
+.root {
+  display: block;
+  font-weight: 400;
+  overflow: auto;
+  font-family: inherit;
+  background: var(--theme-border-subdued);
+
+  &::-webkit-scrollbar {
+    display: none;
+  }
+
+  scrollbar-width: none;
+}
+
+.line {
+  display: flex;
+  justify-content: space-between;
+  align-items: flex-start;
+}
+
+.number {
+  display: inline-flex;
+  width: 3ch;
+  text-align: right;
+  padding-right: 1ch;
+  user-select: none;
+  background: var(--theme-background);
+  opacity: 0.5;
+}
+
+.content {
+  min-width: 10%;
+  width: 100%;
+  white-space: pre;
+  background: var(--theme-border-subdued);
+  padding-left: 2ch;
+}
+
+================
+File: reference/components/CodeBlock.tsx
+================
+'use client';
+
+import styles from '@components/CodeBlock.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface CodeBlockProps extends React.HTMLAttributes<HTMLPreElement> {
+  children?: React.ReactNode;
+}
+
+const CodeBlock = React.forwardRef<HTMLPreElement, CodeBlockProps>(({ children, ...rest }, ref) => {
+  return (
+    <pre className={styles.root} ref={ref} {...rest}>
+      {String(children)
+        .split('\n')
+        .map((line, index) => (
+          <div key={index} className={styles.line}>
+            <span className={styles.number}>{Utilities.leftPad(String(index + 1), 3)}</span>
+            <span className={styles.content}>{line}</span>
+          </div>
+        ))}
+    </pre>
+  );
+});
+
+CodeBlock.displayName = 'CodeBlock';
+
+export default CodeBlock;
+
+================
+File: reference/components/ComboBox.module.scss
+================
+.root {
+  padding: 0;
+}
+
+================
+File: reference/components/ComboBox.tsx
+================
+'use client';
+
+import styles from '@components/ComboBox.module.scss';
+
+import * as React from 'react';
+
+import AlertBanner from '@components/AlertBanner';
+import ButtonGroup from '@components/ButtonGroup';
+import CardDouble from '@components/CardDouble';
+import Input from '@components/Input';
+
+interface ComboBoxProps {
+  data: string[][];
+  label?: string;
+}
+
+function ComboBox({ data, label }: ComboBoxProps) {
+  const [searchTerm, setSearchTerm] = React.useState('');
+
+  const filtered = React.useMemo(() => {
+    const sliced = data.slice(1);
+    if (!searchTerm) return [];
+    return sliced.filter((entry) => entry[0].toLowerCase().includes(searchTerm.toLowerCase()));
+  }, [data, searchTerm]);
+
+  const displayed = React.useMemo(() => {
+    const sliced = data.slice(1);
+    if (filtered.length >= 5) return filtered.slice(0, 5);
+    if (filtered.length === 0 && searchTerm) return sliced.slice(0, 5);
+    if (filtered.length > 0 && filtered.length < 5) {
+      const needed = 5 - filtered.length;
+      const remainder = sliced.filter((entry) => !filtered.includes(entry));
+      return [...filtered, ...remainder.slice(0, needed)];
+    }
+    return sliced.slice(0, 5);
+  }, [filtered, data, searchTerm]);
+
+  const handleChange = React.useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
+    setSearchTerm(e.target.value);
+  }, []);
+
+  return (
+    <>
+      <div className={styles.root}>
+        <Input autoComplete="off" isBlink label={label} name="input_test_blink" value={searchTerm} onChange={handleChange} />
+      </div>
+      {displayed.map((entry) => (
+        <CardDouble key={entry[0]} title={entry[0]}>
+          <AlertBanner>{entry[1]}</AlertBanner>
+          <br />
+          <ButtonGroup isFull items={[{ body: 'FAVORITE' }, { body: 'DONATE' }, { body: 'LEARN MORE' }]} />
+        </CardDouble>
+      ))}
+    </>
+  );
+}
+
+export default ComboBox;
+
+================
+File: reference/components/ContentFluid.module.scss
+================
+.root {
+  display: block;
+  min-width: 10%;
+  width: 100%;
+  align-self: stretch;
+}
+
+================
+File: reference/components/ContentFluid.tsx
+================
+import styles from '@components/ContentFluid.module.scss';
+
+import * as React from 'react';
+
+interface ContentFluidProps extends React.HTMLAttributes<HTMLSpanElement> {
+  children?: React.ReactNode;
+}
+
+const ContentFluid: React.FC<ContentFluidProps> = ({ children, ...rest }) => {
+  return <div className={styles.root}>{children}</div>;
+};
+
+export default ContentFluid;
+
+================
+File: reference/components/DataTable.module.scss
+================
+.root {
+  position: relative;
+  width: 100%;
+  border-spacing: 0px;
+  max-width: 64ch;
+}
+
+.body {
+}
+
+.row {
+  transition: transform 0.5s ease;
+  border-spacing: 0px;
+
+  &:first-child {
+    font-weight: 400;
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    outline: 0;
+  }
+}
+
+.column {
+  border: 0;
+  outline: 0;
+  padding-right: 1ch;
+  transition: background-color 0.5s ease;
+}
+
+.changed {
+  animation: flash 2000ms ease;
+}
+
+@keyframes flash {
+  0% {
+    background-color: var(--theme-focused-foreground-subdued);
+  }
+  100% {
+    background-color: transparent;
+  }
+}
+
+================
+File: reference/components/DataTable.tsx
+================
+'use client';
+
+import styles from '@components/DataTable.module.scss';
+
+import * as React from 'react';
+
+interface TableProps {
+  data: string[][];
+}
+
+interface RGBAColor {
+  r: number;
+  g: number;
+  b: number;
+  a: number;
+}
+
+const BASE_FOREGROUND_RGBA: RGBAColor = { r: 98, g: 98, b: 98, a: 0.5 };
+const BASE_BACKGROUND_RGBA: RGBAColor = { r: 168, g: 168, b: 168, a: 0.5 };
+const ALPHA = 0.45;
+
+function interpolateColor(color1: RGBAColor, color2: RGBAColor, factor: number): RGBAColor {
+  return {
+    r: Math.round(color1.r + factor * (color2.r - color1.r)),
+    g: Math.round(color1.g + factor * (color2.g - color1.g)),
+    b: Math.round(color1.b + factor * (color2.b - color1.b)),
+    a: color1.a + factor * (color2.a - color1.a),
+  };
+}
+
+const DataTable: React.FC<TableProps> = ({ data }) => {
+  const tableRef = React.useRef<HTMLTableElement>(null);
+  const prevDataRef = React.useRef<string[][]>(data);
+
+  React.useEffect(() => {
+    const rows = tableRef.current?.querySelectorAll<HTMLTableRowElement>('tr') || [];
+    for (let i = 1; i < data.length; i++) {
+      const cells = rows[i]?.querySelectorAll<HTMLTableCellElement>('td');
+      if (!cells) continue;
+      for (let j = 0; j < data[i].length; j++) {
+        const cell = cells[j];
+        const changed = prevDataRef.current[i]?.[j] !== data[i][j];
+        if (cell && changed) {
+          cell.classList.remove(styles.changed);
+          void cell.offsetWidth;
+          cell.classList.add(styles.changed);
+        }
+      }
+    }
+    prevDataRef.current = data;
+  }, [data]);
+
+  const handleKeyDown = (event: React.KeyboardEvent<HTMLTableElement>) => {
+    const activeElement = document.activeElement;
+    if (!activeElement) return;
+    switch (event.key) {
+      case 'Enter':
+        event.preventDefault();
+        if (activeElement instanceof HTMLTableCellElement) {
+          activeElement.click();
+        }
+        break;
+      case 'ArrowUp':
+      case 'ArrowDown':
+      case 'ArrowLeft':
+      case 'ArrowRight':
+        event.preventDefault();
+        if (!(activeElement instanceof HTMLTableCellElement)) return;
+        const direction = event.key === 'ArrowUp' || event.key === 'ArrowLeft' ? 'previous' : 'next';
+        const allCells = Array.from(tableRef.current?.querySelectorAll<HTMLTableCellElement>('td') || []);
+        const currentIndex = allCells.indexOf(activeElement);
+        if (currentIndex === -1) return;
+        let nextIndex = direction === 'next' ? currentIndex + 1 : currentIndex - 1;
+        if (direction === 'previous') {
+          if (nextIndex < 0) nextIndex = allCells.length - 1;
+        } else {
+          if (nextIndex >= allCells.length) nextIndex = 0;
+        }
+        allCells[nextIndex].focus();
+        break;
+    }
+  };
+
+  const targetColorHeader: RGBAColor = { r: 255, g: 255, b: 255, a: ALPHA };
+  const targetColorData: RGBAColor = { r: 255, g: 255, b: 255, a: ALPHA };
+
+  return (
+    <table className={styles.root} ref={tableRef} onKeyDown={handleKeyDown}>
+      <tbody className={styles.body}>
+        {data.map((row, rowIndex) => (
+          <tr key={rowIndex} className={styles.row} tabIndex={0} onClick={() => alert('testing')}>
+            {row.map((cellContent, colIndex) => {
+              let backgroundColor: string;
+              if (rowIndex === 0) {
+                const lightnessFactor = row.length > 1 ? colIndex / (row.length - 1) : 0;
+                const newColor = interpolateColor(BASE_FOREGROUND_RGBA, targetColorHeader, lightnessFactor);
+                backgroundColor = `rgba(${newColor.r}, ${newColor.g}, ${newColor.b}, ${newColor.a.toFixed(2)})`;
+              } else {
+                const numRows = data.length - 1;
+                const maxIndexSum = numRows - 1 + (row.length - 1) || 1;
+                const indexSum = rowIndex - 1 + colIndex;
+                const lightnessFactor = indexSum / maxIndexSum;
+                const newColor = interpolateColor(BASE_BACKGROUND_RGBA, targetColorData, lightnessFactor);
+                backgroundColor = `rgba(${newColor.r}, ${newColor.g}, ${newColor.b}, ${newColor.a.toFixed(2)})`;
+              }
+              return (
+                <td key={colIndex} className={styles.column} style={{ backgroundColor }}>
+                  {cellContent}
+                </td>
+              );
+            })}
+          </tr>
+        ))}
+      </tbody>
+    </table>
+  );
+};
+
+export default DataTable;
+
+================
+File: reference/components/DatePicker.module.scss
+================
+.root {
+  display: inline-block;
+  user-select: none;
+}
+
+.controls {
+  align-items: center;
+  background: var(--theme-border);
+  display: flex;
+  justify-content: space-between;
+}
+
+.button {
+  align-self: stretch;
+  background: none;
+  border: none;
+  color: var(--theme-text);
+  cursor: pointer;
+  display: inline-block;
+  line-height: calc(var(--theme-line-height-base) * 1em);
+  margin: 0;
+  outline: 0;
+  padding: 0 1ch 0 1ch;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    outline: 0;
+  }
+}
+
+.date {
+  min-width: 10%;
+  padding: 0 1ch 0 1ch;
+  text-align: left;
+  width: 100%;
+}
+
+.header {
+  background: var(--theme-border);
+  display: grid;
+  grid-template-columns: repeat(7, 1fr);
+  text-align: center;
+}
+
+.days {
+  background: var(--theme-border-subdued);
+  display: grid;
+  grid-template-columns: repeat(7, 1fr);
+  grid-template-rows: repeat(6, min-content);
+  align-items: start;
+  min-height: calc(var(--theme-line-height-base) * 6em);
+}
+
+.cell {
+  outline: none;
+  padding: 0 1ch 0 1ch;
+  text-align: center;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/DatePicker.tsx
+================
+'use client';
+
+import styles from '@components/DatePicker.module.scss';
+
+import * as React from 'react';
+
+interface DatePickerProps {
+  year?: number;
+  month?: number;
+}
+
+const WEEKDAYS = ['SU', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA'];
+
+const MONTH_NAMES = [
+  'January', 'February', 'March', 'April', 'May', 'June',
+  'July', 'August', 'September', 'October', 'November', 'December'
+];
+
+const MAX_CELLS = 42;
+
+const DatePicker: React.FC<DatePickerProps> = ({ year, month }) => {
+  const today = new Date();
+  const [currentYear, setYear] = React.useState(year || today.getFullYear());
+  const [currentMonth, setMonth] = React.useState(month || today.getMonth() + 1);
+
+  const first = new Date(currentYear, currentMonth - 1, 1);
+  const startingWeekday = first.getDay();
+  const daysInMonth = new Date(currentYear, currentMonth, 0).getDate();
+
+  const cells: React.ReactNode[] = [];
+
+  for (let i = 0; i < startingWeekday; i++) {
+    cells.push(<div key={`empty-start-${i}`} className={styles.dayCell} />);
+  }
+
+  for (let day = 1; day <= daysInMonth; day++) {
+    const presentationDay = String(day).padStart(2, '0');
+    cells.push(
+      <div
+        key={day}
+        className={styles.cell}
+        tabIndex={0}
+        aria-label={`${currentYear}-${String(currentMonth).padStart(2, '0')}-${presentationDay}`}
+      >
+        {presentationDay}
+      </div>
+    );
+  }
+
+  while (cells.length < MAX_CELLS) {
+    cells.push(<div key={`empty-end-${cells.length}`} className={styles.dayCell} />);
+  }
+
+  const onSwitchPreviousMonth = () => {
+    let newMonth = currentMonth - 1;
+    let newYear = currentYear;
+    if (newMonth < 1) {
+      newMonth = 12;
+      newYear--;
+    }
+    setMonth(newMonth);
+    setYear(newYear);
+  };
+
+  const onSwitchNextMonth = () => {
+    let newMonth = currentMonth + 1;
+    let newYear = currentYear;
+    if (newMonth > 12) {
+      newMonth = 1;
+      newYear++;
+    }
+    setMonth(newMonth);
+    setYear(newYear);
+  };
+
+  return (
+    <div className={styles.root}>
+      <div className={styles.controls}>
+        <button type="button" className={styles.button} onClick={onSwitchPreviousMonth} aria-label="Previous month">
+          ▲
+        </button>
+        <div className={styles.date}>
+          {currentYear} {MONTH_NAMES[currentMonth - 1].toUpperCase()}
+        </div>
+        <button type="button" className={styles.button} onClick={onSwitchNextMonth} aria-label="Next month">
+          ▼
+        </button>
+      </div>
+      <div className={styles.header}>
+        {WEEKDAYS.map((day) => (
+          <div key={day} className={styles.cell}>
+            {day}
+          </div>
+        ))}
+      </div>
+      <div className={styles.days}>{cells}</div>
+    </div>
+  );
+};
+
+export default DatePicker;
+
+================
+File: reference/components/DebugGrid.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+const DebugGrid: React.FC = () => {
+  React.useEffect(() => {
+    const debugGrid = document.createElement('div');
+    let isVisible = false;
+
+    const setGridHeight = () => {
+      debugGrid.style.height = `${document.documentElement.scrollHeight}px`;
+    };
+
+    Object.assign(debugGrid.style, {
+      position: 'absolute',
+      top: '0',
+      left: '0',
+      right: '0',
+      zIndex: '-1',
+      margin: '0',
+      backgroundImage: `
+        repeating-linear-gradient(var(--theme-border) 0 1px, transparent 1px 100%),
+        repeating-linear-gradient(90deg, var(--theme-border) 0 1px, transparent 1px 100%)
+      `,
+      backgroundSize: '1ch 1.25rem',
+      pointerEvents: 'none',
+      display: 'none',
+    });
+
+    document.body.appendChild(debugGrid);
+    setGridHeight();
+
+    const toggleDebugGrid = () => {
+      isVisible = !isVisible;
+      debugGrid.style.display = isVisible ? 'block' : 'none';
+    };
+
+    const handleDebugGridToggle = () => toggleDebugGrid();
+
+    const observer = new ResizeObserver(() => {
+      setGridHeight();
+    });
+    observer.observe(document.documentElement);
+
+    window.addEventListener('debugGridToggle', handleDebugGridToggle);
+    window.addEventListener('resize', setGridHeight);
+
+    return () => {
+      document.body.removeChild(debugGrid);
+      window.removeEventListener('resize', setGridHeight);
+      window.removeEventListener('debugGridToggle', handleDebugGridToggle);
+      observer.disconnect();
+    };
+  }, []);
+
+  return null;
+};
+
+export const toggleDebugGrid = (): void => {
+  window.dispatchEvent(new CustomEvent('debugGridToggle'));
+};
+
+export default DebugGrid;
+
+================
+File: reference/components/DefaultMetaTags.tsx
+================
+export default function DefaultMetaTags() {
+  return (
+    <>
+      <meta httpEquiv="content-language" content="en-us" />
+      <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0" />
+      <link rel="icon" type="image/png" sizes="32x32" href="/favicon-16x16.png" />
+      <link rel="icon" type="image/png" sizes="16x16" href="/favicon-32x32.png" />
+      <link rel="shortcut icon" href="/favicon.ico" />
+    </>
+  );
+}
+
+================
+File: reference/components/Dialog.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border);
+  box-shadow: 1ch 1ch 0 0 var(--theme-border-subdued);
+  font-weight: 400;
+  max-width: 56ch;
+  min-width: 24ch;
+  margin: 0;
+  padding: 0;
+}
+
+.header {
+  background: var(--theme-text);
+  color: var(--theme-background);
+  text-align: center;
+  margin: 0;
+  padding: 0;
+  display: block;
+}
+
+.message {
+  display: block;
+  margin: 0;
+  text-align: center;
+  padding: 0 2ch 0 2ch;
+}
+
+.actions {
+  display: flex;
+  justify-content: space-between;
+  align-items: center;
+  max-width: 24ch;
+  margin: 0 auto 0 auto;
+  padding: 0 2ch 0 2ch;
+}
+
+================
+File: reference/components/Dialog.tsx
+================
+import styles from '@components/Dialog.module.scss';
+
+import * as React from 'react';
+
+import Block from '@components/Block';
+import Button from '@components/Button';
+
+interface DialogProps {
+  title?: React.ReactNode;
+  children?: React.ReactNode;
+  style?: React.CSSProperties;
+  onConfirm?: () => void;
+  onCancel?: () => void;
+}
+
+const Dialog: React.FC<DialogProps> = ({ title, children, style, onConfirm, onCancel }) => {
+  const titleId = React.useId();
+  const descId = React.useId();
+
+  return (
+    <div className={styles.root} style={style} role="dialog" aria-modal="true" aria-labelledby={titleId} aria-describedby={descId}>
+      <header className={styles.header}>{title}</header>
+      <br />
+      <article className={styles.message} id={descId}>
+        {children}
+      </article>
+      <br />
+      <div className={styles.actions}>
+        <Button theme="SECONDARY" onClick={onConfirm}>
+          OK
+        </Button>
+        <Block style={{ opacity: 0 }} />
+        <Button theme="SECONDARY" onClick={onCancel}>
+          Cancel
+        </Button>
+      </div>
+      <br />
+    </div>
+  );
+};
+
+export default Dialog;
+
+================
+File: reference/components/Divider.module.scss
+================
+.gradient {
+  background: linear-gradient(to right, transparent, var(--theme-border), transparent);
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  width: 100%;
+}
+
+.divider {
+  align-items: center;
+  border: 0;
+  display: flex;
+  flex-direction: column;
+  flex-shrink: 0;
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  justify-content: center;
+  outline: 0;
+  width: 100%;
+}
+
+.line {
+  background: var(--theme-text);
+  display: block;
+  flex-shrink: 0;
+  height: 2px;
+  width: 100%;
+}
+
+================
+File: reference/components/Divider.tsx
+================
+import styles from '@components/Divider.module.scss';
+
+import * as React from 'react';
+
+interface DividerProps extends React.HTMLAttributes<HTMLSpanElement> {
+  children?: React.ReactNode;
+  type?: string | any;
+  style?: any;
+}
+
+const Divider: React.FC<DividerProps> = ({ children, style, type }) => {
+  if (type === 'GRADIENT') {
+    return <div className={styles.gradient} style={style} />;
+  }
+
+  if (type === 'DOUBLE') {
+    return (
+      <div className={styles.divider} style={style}>
+        <div className={styles.line} style={{ marginBottom: `2px` }} />
+        <div className={styles.line} />
+      </div>
+    );
+  }
+
+  return (
+    <div className={styles.divider} style={style}>
+      <div className={styles.line} />
+    </div>
+  );
+};
+
+export default Divider;
+
+================
+File: reference/components/Drawer.module.scss
+================
+@keyframes fadeInLeft {
+  from {
+    opacity: 0;
+  }
+  to {
+    opacity: 1;
+  }
+}
+
+.root {
+  align-self: stretch;
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+}
+
+.side {
+  animation: fadeInLeft 0.2s ease-out;
+  min-width: 10%;
+  width: 100%;
+  align-self: stretch;
+  min-width: 22ch;
+}
+
+.right {
+  flex-shrink: 0;
+  align-self: stretch;
+  background: var(--theme-background-input);
+  display: flex;
+  align-items: center;
+  width: 3ch;
+}
+
+.action {
+  display: inline-flex;
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  font-size: var(--font-size);
+  user-select: none;
+  cursor: pointer;
+  color: var(--theme-text);
+  background: var(--theme-button-foreground);
+  flex-shrink: 0;
+  align-items: center;
+  justify-content: center;
+  border: 0;
+  outline: 0;
+  margin: 0;
+  padding: 0;
+  width: 100%;
+
+  &:focus {
+    border: 0;
+    outline: 0;
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/Drawer.tsx
+================
+'use client';
+
+import styles from '@components/Drawer.module.scss';
+
+import * as React from 'react';
+
+interface DrawerProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'defaultValue'> {
+  children?: React.ReactNode;
+  defaultValue?: boolean;
+}
+
+const Drawer: React.FC<DrawerProps> = ({ children, defaultValue = false, ...rest }) => {
+  const [expand, setExpand] = React.useState<boolean>(defaultValue);
+
+  return (
+    <div className={styles.root} {...rest}>
+      {expand ? <div className={styles.side}>{children}</div> : null}
+      <div className={styles.right}>
+        <button className={styles.action} onClick={() => setExpand(!expand)}>
+          {expand ? '⭠' : '⭢'}
+        </button>
+      </div>
+    </div>
+  );
+};
+
+export default Drawer;
+
+================
+File: reference/components/DropdownMenu.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border);
+  font-weight: 400;
+}
+
+.footer {
+  background: var(--theme-background-modal-footer);
+  padding: calc(var(--font-size) * 0.5 * var(--theme-line-height-base)) 1ch calc(var(--font-size) * 0.5 * var(--theme-line-height-base)) 1ch;
+}
+
+================
+File: reference/components/DropdownMenu.tsx
+================
+import styles from '@components/DropdownMenu.module.scss';
+
+import * as React from 'react';
+
+import ActionButton from '@components/ActionButton';
+import ActionListItem from '@components/ActionListItem';
+import ModalTrigger from '@components/ModalTrigger';
+
+import { useHotkeys } from '@modules/hotkeys';
+
+interface DropdownMenuItemProps {
+  children: React.ReactNode;
+  icon?: React.ReactNode;
+  href?: string;
+  target?: string;
+  onClick?: () => void;
+  modal?: any;
+  modalProps?: Record<string, unknown>;
+}
+
+interface DropdownMenuProps extends React.HTMLAttributes<HTMLDivElement> {
+  onClose?: (event?: MouseEvent | TouchEvent | KeyboardEvent) => void;
+  items?: DropdownMenuItemProps[];
+}
+
+const DropdownMenu = React.forwardRef<HTMLDivElement, DropdownMenuProps>((props, ref) => {
+  const { onClose, items, style, ...rest } = props;
+
+  const handleHotkey = () => {
+    if (onClose) onClose();
+  };
+
+  useHotkeys('space', handleHotkey);
+
+  return (
+    <div ref={ref} className={styles.root} style={style} {...rest}>
+      {items &&
+        items.map((each, index) => {
+          if (each.modal) {
+            return (
+              <ModalTrigger key={`action-items-${index}`} modal={each.modal} modalProps={each.modalProps}>
+                <ActionListItem children={each.children} icon={each.icon} />
+              </ModalTrigger>
+            );
+          }
+
+          return (
+            <ActionListItem
+              key={`action-items-${index}`}
+              children={each.children}
+              icon={each.icon}
+              href={each.href}
+              target={each.target}
+              onClick={() => {
+                if (each.onClick) {
+                  each.onClick();
+                }
+
+                if (onClose) {
+                  onClose();
+                }
+              }}
+            />
+          );
+        })}
+
+      <footer className={styles.footer}>
+        Press space to{' '}
+        <ActionButton
+          hotkey="␣"
+          onClick={() => {
+            if (onClose) onClose();
+          }}
+        >
+          Close
+        </ActionButton>
+      </footer>
+    </div>
+  );
+});
+
+DropdownMenu.displayName = 'DropdownMenu';
+
+export default DropdownMenu;
+
+================
+File: reference/components/DropdownMenuTrigger.module.scss
+================
+.root {
+  display: inline-block;
+  position: relative;
+}
+
+================
+File: reference/components/DropdownMenuTrigger.tsx
+================
+'use client';
+
+import styles from '@components/DropdownMenuTrigger.module.scss';
+
+import * as Position from '@common/position';
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import DropdownMenu from '@components/DropdownMenu';
+import OutsideElementEvent from '@components/detectors/OutsideElementEvent';
+
+import { createPortal } from 'react-dom';
+import { useHotkeys } from '@modules/hotkeys';
+
+interface DropdownMenuTriggerProps {
+  children: React.ReactElement<React.HTMLAttributes<HTMLElement>>;
+  items: any;
+  hotkey?: string;
+}
+
+function DropdownMenuTrigger({ children, items, hotkey }: DropdownMenuTriggerProps) {
+  const [open, setOpen] = React.useState(false);
+  const [focusChildren, setFocusChildren] = React.useState(false);
+  const [willClose, setWillClose] = React.useState(false);
+  const [placement, setPlacement] = React.useState<Position.Placement>('bottom');
+  const [position, setPosition] = React.useState<{ top: number; left: number }>({ top: 0, left: 0 });
+
+  const triggerRef = React.useRef<HTMLElement>(null);
+  const elementRef = React.useRef<HTMLDivElement>(null);
+
+  const onClick = React.useCallback((event: React.MouseEvent) => {
+    event.preventDefault();
+    setOpen(true);
+  }, []);
+
+  const onOutsideEvent = React.useCallback(() => setOpen(false), []);
+  const onClose = React.useCallback(() => setWillClose(true), []);
+
+  if (hotkey) {
+    useHotkeys(hotkey, () => {
+      setOpen(!open);
+    });
+  }
+
+  React.useEffect(() => {
+    if (focusChildren) {
+      const element = elementRef.current;
+      if (element) {
+        const firstFocusable = Utilities.findFocusableDescendant(element);
+        if (firstFocusable) {
+          firstFocusable.focus();
+        } else {
+          element.focus();
+        }
+      }
+      setFocusChildren(false);
+    }
+  }, [focusChildren]);
+
+  React.useEffect(() => {
+    if (willClose) {
+      setOpen(false);
+      setWillClose(false);
+    }
+  }, [willClose]);
+
+  React.useEffect(() => {
+    if (!open || !triggerRef.current || !elementRef.current) return;
+
+    const updatePosition = () => {
+      const { placement, position } = Position.calculate(triggerRef.current!, elementRef.current!);
+      setPlacement(placement);
+      setPosition(position);
+    };
+
+    updatePosition();
+    setFocusChildren(true);
+
+    const handleResizeOrScroll = () => updatePosition();
+    const observer = new MutationObserver(() => updatePosition());
+    observer.observe(document.body, { attributes: true, childList: true, subtree: true });
+
+    window.addEventListener('resize', handleResizeOrScroll);
+    window.addEventListener('scroll', handleResizeOrScroll, true);
+
+    return () => {
+      window.removeEventListener('resize', handleResizeOrScroll);
+      window.removeEventListener('scroll', handleResizeOrScroll, true);
+      observer.disconnect();
+    };
+  }, [open]);
+
+  const element = open
+    ? createPortal(
+        <OutsideElementEvent onOutsideEvent={onOutsideEvent}>
+          <DropdownMenu
+            onClose={onClose}
+            ref={elementRef}
+            items={items}
+            style={{
+              position: 'absolute',
+              top: `${position.top}px`,
+              left: `${position.left}px`,
+              zIndex: `var(--z-index-page-dropdown-menus)`,
+            }}
+            role="dialog"
+            aria-modal="true"
+          />
+        </OutsideElementEvent>,
+        document.body
+      )
+    : null;
+
+  return (
+    <div className={styles.root}>
+      {React.cloneElement(children, {
+        tabIndex: 0,
+        onClick,
+        // @ts-ignore
+        ref: triggerRef,
+      })}
+      {element}
+    </div>
+  );
+}
+
+export default DropdownMenuTrigger;
+
+================
+File: reference/components/Grid.module.scss
+================
+.grid {
+  display: block;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+}
+
+================
+File: reference/components/Grid.tsx
+================
+import styles from '@components/Grid.module.scss';
+
+import * as React from 'react';
+
+interface GridProps extends React.HTMLAttributes<HTMLDivElement> {
+  children?: React.ReactNode;
+}
+
+const Grid: React.FC<GridProps> = ({ children, ...rest }) => {
+  return (
+    <div className={styles.grid} {...rest}>
+      {children}
+    </div>
+  );
+};
+
+export default Grid;
+
+================
+File: reference/components/HoverComponentTrigger.module.scss
+================
+.root {
+  display: inline-block;
+  position: relative;
+}
+
+================
+File: reference/components/HoverComponentTrigger.tsx
+================
+'use client';
+
+import styles from '@components/HoverComponentTrigger.module.scss';
+
+import * as React from 'react';
+import * as Position from '@common/position';
+
+import OutsideElementEvent from '@components/detectors/OutsideElementEvent';
+import Popover from '@components/Popover';
+import Tooltip from '@components/Tooltip';
+
+import { createPortal } from 'react-dom';
+
+interface HoverComponentTriggerProps {
+  children: React.ReactElement<React.HTMLAttributes<HTMLElement>>;
+  text: string;
+  component: 'popover' | 'tooltip';
+}
+
+function HoverComponentTrigger({ children, text, component }: HoverComponentTriggerProps) {
+  const [open, setOpen] = React.useState(false);
+  const [placement, setPlacement] = React.useState<Position.Placement>('bottom');
+  const [position, setPosition] = React.useState<{ top: number; left: number }>({ top: 0, left: 0 });
+
+  const triggerRef = React.useRef<HTMLDivElement>(null);
+  const popoverRef = React.useRef<HTMLDivElement>(null);
+
+  const onMouseEnter = () => setOpen(true);
+  const onClick = () => setOpen(true);
+  const onHandleFocus = () => setOpen(true);
+  const onOutsideEvent = () => setOpen(false);
+
+  React.useEffect(() => {
+    if (!open || !triggerRef.current || !popoverRef.current) return;
+
+    const updatePosition = () => {
+      const { placement, position } = Position.calculate(triggerRef.current!, popoverRef.current!);
+      setPlacement(placement);
+      setPosition(position);
+    };
+
+    updatePosition();
+
+    const handleResizeOrScroll = () => updatePosition();
+
+    const mutationObserver = new MutationObserver(() => updatePosition());
+    mutationObserver.observe(document.body, { attributes: true, childList: true, subtree: true });
+
+    window.addEventListener('resize', handleResizeOrScroll);
+    window.addEventListener('scroll', handleResizeOrScroll, true);
+
+    return () => {
+      window.removeEventListener('resize', handleResizeOrScroll);
+      window.removeEventListener('scroll', handleResizeOrScroll, true);
+      mutationObserver.disconnect();
+    };
+  }, [open]);
+
+  const renderComponent = () => {
+    if (component === 'popover') {
+      return (
+        <Popover
+          ref={popoverRef}
+          style={{
+            position: 'absolute',
+            top: `${position.top}px`,
+            left: `${position.left}px`,
+            zIndex: `var(--z-index-page-popover)`,
+          }}
+          role="dialog"
+          aria-modal="true"
+        >
+          {text}
+        </Popover>
+      );
+    } else if (component === 'tooltip') {
+      return (
+        <Tooltip
+          ref={popoverRef}
+          style={{
+            position: 'absolute',
+            top: `${position.top}px`,
+            left: `${position.left}px`,
+            zIndex: `var(--z-index-page-tooltip)`,
+          }}
+        >
+          {text}
+        </Tooltip>
+      );
+    }
+    return null;
+  };
+
+  const popoverElement = open ? createPortal(<OutsideElementEvent onOutsideEvent={onOutsideEvent}>{renderComponent()}</OutsideElementEvent>, document.body) : null;
+
+  return (
+    <div ref={triggerRef} className={styles.root} data-detector-ignore onMouseEnter={onMouseEnter} onClick={onClick} onFocus={onHandleFocus}>
+      {React.cloneElement(children, {
+        tabIndex: 0,
+      })}
+      {popoverElement}
+    </div>
+  );
+}
+
+export default HoverComponentTrigger;
+
+================
+File: reference/components/Indent.module.scss
+================
+.root {
+  display: block;
+  padding: 0 0 0 1ch;
+}
+
+================
+File: reference/components/Indent.tsx
+================
+import styles from '@components/Indent.module.scss';
+
+import * as React from 'react';
+
+interface IndentProps extends React.HTMLAttributes<HTMLDivElement> {
+  children?: React.ReactNode;
+}
+
+const Indent: React.FC<IndentProps> = ({ children, ...rest }) => {
+  return (
+    <div className={styles.root} {...rest}>
+      {children}
+    </div>
+  );
+};
+
+export default Indent;
+
+================
+File: reference/components/Input.module.scss
+================
+.root {
+  position: relative;
+  display: block;
+}
+
+.label {
+  background: var(--theme-border);
+  display: block;
+}
+
+.placeholder {
+  font-style: italic;
+  color: var(--theme-overlay);
+}
+
+.displayed {
+  overflow: hidden;
+  white-space: nowrap;
+  pointer-events: none;
+  overflow-wrap: anywhere;
+  background: var(--theme-background-input);
+  box-shadow: inset 0 0 0 2px var(--theme-border);
+}
+
+.focused {
+  .block {
+    background: var(--theme-focused-foreground);
+  }
+
+  .placeholder {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+@keyframes blink {
+  50% {
+    opacity: 0;
+  }
+}
+
+.blink {
+  animation: blink 1s step-start 0s infinite;
+}
+
+.block {
+  display: inline-block;
+  min-width: 1ch;
+  background: var(--theme-text);
+  color: var(--theme-background);
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  vertical-align: bottom;
+}
+
+.inputContainer {
+  position: relative;
+  display: block;
+}
+
+.hidden {
+  position: absolute;
+  top: 0;
+  left: 0;
+  width: 100%;
+  color: transparent;
+  background: transparent;
+  caret-color: transparent;
+  border: none;
+  outline: none;
+  overflow: hidden;
+  padding: 0;
+  margin: 0;
+  line-height: var(--theme-line-height-base);
+  font-size: var(--font-size);
+  font-family: inherit;
+
+  &:-webkit-autofill {
+    -webkit-box-shadow: 0 0 0px 1000px var(--theme-focused-foreground) inset;
+  }
+}
+
+================
+File: reference/components/Input.tsx
+================
+'use client';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import styles from '@components/Input.module.scss';
+
+type InputProps = React.InputHTMLAttributes<HTMLInputElement> & {
+  caretChars?: string | any;
+  label?: string | any;
+  isBlink?: boolean;
+};
+
+function Input({ caretChars, isBlink = true, label, placeholder, onChange, type, id, ...rest }: InputProps) {
+  const generatedId = React.useId();
+  const inputId = id || generatedId;
+
+  const inputRef = React.useRef<HTMLInputElement | null>(null);
+  const [text, setText] = React.useState<string>(rest.defaultValue?.toString() || rest.value?.toString() || '');
+  const [isFocused, setIsFocused] = React.useState<boolean>(false);
+  const [selectionStart, setSelectionStart] = React.useState<number>(text.length);
+
+  const lastFocusDirectionRef = React.useRef<'up' | 'down' | null>(null);
+
+  React.useEffect(() => {
+    if (rest.value !== undefined) {
+      const val = rest.value.toString();
+      setText(val);
+      setSelectionStart(val.length);
+    }
+  }, [rest.value]);
+
+  const onHandleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
+    const value = e.target.value;
+    setText(value);
+    if (onChange) {
+      onChange(e);
+    }
+    setSelectionStart(e.target.selectionStart ?? value.length);
+  };
+
+  const onHandleFocus = () => {
+    setIsFocused(true);
+    if (!inputRef.current) return;
+
+    if (lastFocusDirectionRef.current === 'down') {
+      setSelectionStart(text.length);
+      inputRef.current.setSelectionRange(text.length, text.length);
+    } else if (lastFocusDirectionRef.current === 'up') {
+      setSelectionStart(0);
+      inputRef.current.setSelectionRange(0, 0);
+    }
+  };
+
+  const onHandleBlur = () => {
+    setIsFocused(false);
+  };
+
+  const onHandleSelect = (e: React.SyntheticEvent<HTMLInputElement>) => {
+    const inputEl = e.currentTarget as HTMLInputElement;
+    setSelectionStart(inputEl.selectionStart ?? text.length);
+  };
+
+  const onHandleClick = (e: React.MouseEvent<HTMLInputElement>) => {
+    const inputEl = e.currentTarget as HTMLInputElement;
+    inputEl.focus();
+    setSelectionStart(inputEl.selectionStart ?? text.length);
+  };
+
+  const onHandleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
+    if (e.key === 'ArrowUp') {
+      e.preventDefault();
+      lastFocusDirectionRef.current = 'up';
+      const previousFocusable = Utilities.findNextFocusable(document.activeElement, 'previous');
+      previousFocusable?.focus();
+    } else if (e.key === 'ArrowDown') {
+      e.preventDefault();
+      lastFocusDirectionRef.current = 'down';
+      const nextFocusable = Utilities.findNextFocusable(document.activeElement, 'next');
+      nextFocusable?.focus();
+    }
+  };
+
+  const isPlaceholderVisible = !text && placeholder;
+  const containerClasses = Utilities.classNames(styles.root, isFocused && styles.focused);
+
+  const maskText = (t: string) => (type === 'password' ? '•'.repeat(t.length) : t);
+
+  const beforeCaretText = isPlaceholderVisible ? placeholder ?? '' : maskText(text.substring(0, selectionStart));
+  const afterCaretText = isPlaceholderVisible ? '' : maskText(text.substring(selectionStart));
+
+  return (
+    <div className={containerClasses}>
+      {label && (
+        <label htmlFor={inputId} className={styles.label}>
+          {label}
+        </label>
+      )}
+      <div className={styles.inputContainer}>
+        <div className={Utilities.classNames(styles.displayed, isPlaceholderVisible && styles.placeholder)}>
+          {beforeCaretText}
+          {!isPlaceholderVisible && <span className={Utilities.classNames(styles.block, isBlink && styles.blink)}>{caretChars || ''}</span>}
+          {!isPlaceholderVisible && afterCaretText}
+        </div>
+        <input id={inputId} ref={inputRef} className={styles.hidden} value={text} aria-placeholder={placeholder} type={type} onFocus={onHandleFocus} onBlur={onHandleBlur} onChange={onHandleChange} onSelect={onHandleSelect} onClick={onHandleClick} onKeyDown={onHandleKeyDown} {...rest} />
+      </div>
+    </div>
+  );
+}
+
+export default Input;
+
+================
+File: reference/components/ListItem.module.scss
+================
+.root {
+  padding-left: 1ch;
+
+  &:focus {
+    outline: 0;
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/ListItem.tsx
+================
+'use client';
+
+import styles from '@components/ListItem.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+const ListItem = ({ children }) => {
+  const itemRef = React.useRef<HTMLLIElement>(null);
+
+  const handleKeyDown = (event: React.KeyboardEvent<HTMLLIElement>) => {
+    switch (event.key) {
+      case 'Enter':
+        event.preventDefault();
+        itemRef.current?.click();
+        break;
+      case 'ArrowUp':
+      case 'ArrowLeft': {
+        event.preventDefault();
+        const previousFocusable = Utilities.findNextFocusable(document.activeElement, 'previous');
+        previousFocusable?.focus();
+        break;
+      }
+      case 'ArrowDown':
+      case 'ArrowRight': {
+        event.preventDefault();
+        const nextFocusable = Utilities.findNextFocusable(document.activeElement, 'next');
+        nextFocusable?.focus();
+        break;
+      }
+      default:
+        break;
+    }
+  };
+
+  return (
+    <li className={styles.root} tabIndex={0} ref={itemRef} onKeyDown={handleKeyDown}>
+      {children}
+    </li>
+  );
+};
+
+export default ListItem;
+
+================
+File: reference/components/MatrixLoader.module.scss
+================
+.container {
+  width: 100%;
+  height: auto;
+  position: relative;
+}
+
+.root {
+  display: block;
+  width: 100%;
+  background: transparent;
+}
+
+================
+File: reference/components/MatrixLoader.tsx
+================
+'use client';
+
+import styles from '@components/MatrixLoader.module.scss';
+
+import * as React from 'react';
+
+interface MatrixLoaderProps {
+  rows?: number;
+  direction?: undefined | 'top-to-bottom' | 'left-to-right';
+  mode?: undefined | 'greek' | 'katakana';
+}
+
+// TODO(jimmylee)
+// Move these constants into a separate file
+// Dynamically compute these constants since we're going to
+// Support t-shirt sizes for the system.
+const LINE_HEIGHT = 20;
+const CHARACTER_WIDTH = 9.6;
+
+function onTextGeneration({ mode = 'greek' }) {
+  if (mode === 'greek') {
+    const isUppercase = Math.random() < 0.5;
+
+    return String.fromCharCode(isUppercase ? 0x0391 + Math.floor(Math.random() * (0x03a9 - 0x0391 + 1)) : 0x03b1 + Math.floor(Math.random() * (0x03c9 - 0x03b1 + 1)));
+  }
+
+  if (mode === 'katakana') {
+    const japaneseRanges = [{ start: 0x30a0, end: 0x30ff }];
+
+    const allJapaneseCharacters = japaneseRanges.flatMap((range) => Array.from({ length: range.end - range.start + 1 }, (_, i) => range.start + i));
+
+    const randomJapaneseCharacter = allJapaneseCharacters[Math.floor(Math.random() * allJapaneseCharacters.length)];
+    return String.fromCharCode(randomJapaneseCharacter);
+  }
+
+  return '0';
+}
+
+const MatrixLoader: React.FC<MatrixLoaderProps> = ({ rows = 25, direction = 'top-to-bottom', mode = 'greek' }) => {
+  const canvasRef = React.useRef<HTMLCanvasElement>(null);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const parent = canvas.parentElement;
+    if (!parent) return;
+
+    const resizeCanvas = () => {
+      const parentWidth = parent.clientWidth;
+      const parentHeight = rows * LINE_HEIGHT;
+
+      const dpr = window.devicePixelRatio || 1;
+
+      canvas.style.width = parentWidth + 'px';
+      canvas.style.height = parentHeight + 'px';
+      canvas.width = Math.floor(parentWidth * dpr);
+      canvas.height = Math.floor(parentHeight * dpr);
+
+      const ctx = canvas.getContext('2d');
+      if (ctx) {
+        ctx.scale(dpr, dpr);
+      }
+    };
+
+    resizeCanvas();
+
+    window.addEventListener('resize', resizeCanvas);
+
+    return () => {
+      window.removeEventListener('resize', resizeCanvas);
+    };
+  }, [rows]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+    const ctx = canvas.getContext('2d');
+    if (!ctx) return;
+
+    let interval: number;
+
+    const drawMatrix = () => {
+      const w = canvas.width;
+      const h = canvas.height;
+
+      if (direction === 'top-to-bottom') {
+        const cols = Math.floor(w / CHARACTER_WIDTH);
+        const ypos: number[] = Array(cols).fill(0);
+
+        const matrix = () => {
+          const themeTextColor = getComputedStyle(document.body).getPropertyValue('--theme-text').trim();
+          const fontFamily = getComputedStyle(document.body).getPropertyValue('--font-family-mono').trim();
+
+          ctx.globalCompositeOperation = 'destination-out';
+          ctx.fillStyle = 'rgba(255, 255, 255, 0.05)';
+          ctx.fillRect(0, 0, w, h);
+          ctx.textBaseline = 'top';
+          ctx.font = `16px ${fontFamily}`;
+
+          ctx.globalCompositeOperation = 'source-over';
+
+          ypos.forEach((y, ind) => {
+            const text = onTextGeneration({ mode });
+            const x = ind * CHARACTER_WIDTH;
+
+            ctx.fillStyle = themeTextColor;
+            ctx.fillText(text, x, y);
+
+            if (y > h + Math.random() * 10000) {
+              ypos[ind] = 0;
+            } else {
+              ypos[ind] = y + LINE_HEIGHT;
+            }
+          });
+        };
+
+        interval = window.setInterval(matrix, 50);
+      } else if (direction === 'left-to-right') {
+        const totalRows = rows; // Use rows directly for total rows
+        const xpos: number[] = Array(totalRows).fill(0);
+
+        const matrix = () => {
+          const themeTextColor = getComputedStyle(document.body).getPropertyValue('--theme-text').trim();
+          const fontFamily = getComputedStyle(document.body).getPropertyValue('--font-family-mono').trim();
+
+          ctx.globalCompositeOperation = 'destination-out';
+          ctx.fillStyle = 'rgba(255, 255, 255, 0.05)';
+          ctx.fillRect(0, 0, w, h);
+          ctx.textBaseline = 'top';
+          ctx.font = `16px ${fontFamily}`;
+
+          ctx.globalCompositeOperation = 'source-over';
+
+          xpos.forEach((x, ind) => {
+            const text = onTextGeneration({ mode });
+            const y = ind * LINE_HEIGHT;
+
+            ctx.fillStyle = themeTextColor;
+            ctx.fillText(text, x, y);
+
+            if (x > w + Math.random() * 10000) {
+              xpos[ind] = 0;
+            } else {
+              xpos[ind] = x + CHARACTER_WIDTH;
+            }
+          });
+        };
+
+        interval = window.setInterval(matrix, 50);
+      }
+    };
+
+    drawMatrix();
+
+    return () => {
+      window.clearInterval(interval);
+    };
+  }, [rows, direction, mode]);
+
+  return (
+    <div className={styles.container}>
+      <canvas className={styles.root} ref={canvasRef} />
+    </div>
+  );
+};
+
+export default MatrixLoader;
+
+================
+File: reference/components/Message.module.scss
+================
+.message {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+  margin-bottom: calc(var(--font-size) * var(--theme-line-height-base));
+
+  &:last-child {
+    margin-bottom: 0px;
+  }
+}
+
+.left {
+  align-self: stretch;
+  flex-shrink: 0;
+  display: flex;
+  align-items: flex-end;
+  position: relative;
+}
+
+.triangle {
+  display: inline-block;
+  width: 0;
+  height: 0;
+  border-top: calc((var(--font-size) * var(--theme-line-height-base)) / 2) solid transparent;
+  border-bottom: calc((var(--font-size) * var(--theme-line-height-base)) / 2) solid transparent;
+  border-right: 1ch solid var(--theme-border);
+  margin-bottom: calc((var(--font-size) * var(--theme-line-height-base)) / 2);
+}
+
+.right {
+  min-width: 10%;
+  width: 100%;
+  text-align: left;
+}
+
+.bubble {
+  padding: calc(8px * var(--theme-line-height-base)) 1ch calc(8px * var(--theme-line-height-base)) 1ch;
+  background: var(--theme-border);
+  display: inline-block;
+  box-shadow: 1ch 1ch 0 0 var(--theme-border-subdued);
+}
+
+================
+File: reference/components/Message.tsx
+================
+import styles from '@components/Message.module.scss';
+
+export default function Message(props) {
+  return (
+    <div className={styles.message}>
+      <div className={styles.left}>
+        <figure className={styles.triangle} />
+      </div>
+      <div className={styles.right}>
+        <div className={styles.bubble}>{props.children}</div>
+      </div>
+    </div>
+  );
+}
+
+================
+File: reference/components/MessageViewer.module.scss
+================
+.message {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+  margin-bottom: calc(var(--font-size) * var(--theme-line-height-base));
+}
+
+.bubble {
+  display: inline-block;
+  background: var(--theme-focused-foreground);
+  padding: calc(8px * var(--theme-line-height-base)) 1ch calc(8px * var(--theme-line-height-base)) 1ch;
+}
+
+.left {
+  min-width: 10%;
+  width: 100%;
+  text-align: right;
+}
+
+.right {
+  align-self: stretch;
+  flex-shrink: 0;
+  display: flex;
+  align-items: flex-end;
+}
+
+.triangle {
+  display: inline-block;
+  width: 0;
+  height: 0;
+  border-top: calc((var(--font-size) * var(--theme-line-height-base)) / 2) solid transparent;
+  border-bottom: calc((var(--font-size) * var(--theme-line-height-base)) / 2) solid transparent;
+  border-left: 1ch solid var(--theme-focused-foreground);
+  margin-bottom: calc((var(--font-size) * var(--theme-line-height-base)) / 2);
+}
+
+================
+File: reference/components/MessageViewer.tsx
+================
+import styles from '@components/MessageViewer.module.scss';
+
+export default function MessageViewer(props) {
+  return (
+    <div className={styles.message}>
+      <div className={styles.left}>
+        <div className={styles.bubble}>{props.children}</div>
+      </div>
+      <div className={styles.right}>
+        <figure className={styles.triangle} />
+      </div>
+    </div>
+  );
+}
+
+================
+File: reference/components/ModalStack.module.scss
+================
+.root {
+  align-items: center;
+  bottom: 0;
+  display: flex;
+  justify-content: center;
+  left: 0;
+  pointer-events: none;
+  position: fixed;
+  right: 0;
+  top: 0;
+  z-index: var(--z-index-page-modals);
+}
+
+.item {
+  pointer-events: auto;
+  position: absolute;
+  transition:
+    opacity 0.2s ease,
+    transform 0.4s ease;
+}
+
+================
+File: reference/components/ModalStack.tsx
+================
+'use client';
+
+import styles from '@components/ModalStack.module.scss';
+
+import * as React from 'react';
+
+import { useModals } from '@components/page/ModalContext';
+
+interface ModalStackProps {}
+
+const ModalStack: React.FC<ModalStackProps> = () => {
+  const { modalStack } = useModals();
+
+  const totalModals = modalStack.length;
+
+  return (
+    <div className={styles.root}>
+      {modalStack.map((modalState, index) => {
+        const { key, component: ModalComponent, props } = modalState;
+
+        const offsetFromLast = totalModals - 1 - index;
+        const translateY = -offsetFromLast * 40;
+        const blur = offsetFromLast * 1.1;
+
+        return (
+          <div
+            key={key}
+            className={styles.item}
+            style={{
+              zIndex: 10 + index,
+              transform: `translateY(${translateY}px)`,
+              filter: `blur(${blur}px)`,
+            }}
+          >
+            <ModalComponent {...props} />
+          </div>
+        );
+      })}
+    </div>
+  );
+};
+
+export default ModalStack;
+
+================
+File: reference/components/ModalTrigger.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+import { useModals } from '@components/page/ModalContext';
+
+interface ModalTriggerProps {
+  children: React.ReactElement<{ onClick?: React.MouseEventHandler }>;
+  modal: React.ComponentType<any>;
+  modalProps?: Record<string, any>;
+}
+
+function ModalTrigger({ children, modal, modalProps = {} }: ModalTriggerProps) {
+  const { open } = useModals();
+
+  const onHandleOpenModal = () => {
+    open(modal, modalProps);
+  };
+
+  return React.cloneElement(children, {
+    onClick: onHandleOpenModal,
+  });
+}
+
+export default ModalTrigger;
+
+================
+File: reference/components/Navigation.module.scss
+================
+.root {
+  display: flex;
+  align-items: center;
+  justify-content: space-between;
+  background: var(--theme-border);
+}
+
+.logo {
+  flex-shrink: 0;
+  padding: 0 1ch 0 1ch;
+  display: inline-flex;
+  color: var(--theme-text);
+  background: var(--theme-border);
+  text-decoration: none;
+  border: 0;
+  outline: 0;
+  border-radius: 0;
+  margin: 0;
+  font-size: var(--font-size);
+
+  &:visited {
+    color: var(--theme-text);
+  }
+
+  &:hover {
+    color: var(--theme-text);
+    background: var(--theme-focused-foreground);
+  }
+
+  &:focus {
+    outline: 0;
+    border: 0;
+    margin: 0;
+    padding: 0 1ch 0 1ch;
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.left {
+  flex-shrink: 0;
+}
+
+.children {
+  min-width: 10%;
+  width: 100%;
+}
+
+.right {
+  flex-shrink: 0;
+}
+
+================
+File: reference/components/Navigation.tsx
+================
+'use client';
+
+import styles from '@components/Navigation.module.scss';
+
+import * as React from 'react';
+
+interface NavigationProps extends React.HTMLAttributes<HTMLElement> {
+  children?: React.ReactNode;
+  logoHref?: string;
+  logoTarget?: React.HTMLAttributeAnchorTarget;
+  onClickLogo?: React.MouseEventHandler<HTMLButtonElement>;
+  logo?: React.ReactNode;
+  left?: React.ReactNode;
+  right?: React.ReactNode;
+}
+
+const Navigation: React.FC<NavigationProps> = ({ children, logoHref, logoTarget, onClickLogo, logo, left, right }) => {
+  let logoElement = <button className={styles.logo}>{logo}</button>;
+
+  if (onClickLogo) {
+    logoElement = (
+      <button className={styles.logo} onClick={onClickLogo}>
+        {logo}
+      </button>
+    );
+  }
+
+  if (logoHref) {
+    logoElement = (
+      <a href={logoHref} className={styles.logo} target={logoTarget}>
+        {logo}
+      </a>
+    );
+  }
+
+  return (
+    <nav className={styles.root}>
+      {logoElement}
+      <section className={styles.left}>{left}</section>
+      <section className={styles.children}>{children}</section>
+      <section className={styles.right}>{right}</section>
+    </nav>
+  );
+};
+
+export default Navigation;
+
+================
+File: reference/components/NumberRangeSlider.module.scss
+================
+.root {
+  display: flex;
+  align-items: center;
+  justify-content: space-between;
+}
+
+.amount {
+  flex-shrink: 0;
+  background: var(--theme-text);
+  color: var(--theme-background);
+  font-weight: 400;
+  padding: 0 1ch 0 1ch;
+}
+
+.slider {
+  border-radius: 0;
+  display: block;
+  margin: 0;
+  padding: 0;
+  width: 100%;
+  min-width: 10%;
+
+  -webkit-appearance: none;
+  -moz-appearance: none;
+  appearance: none;
+
+  background: var(--theme-border-subdued);
+
+  &:focus {
+    background: linear-gradient(to right, transparent, var(--theme-focused-foreground));
+    outline: none;
+  }
+
+  &:hover {
+    background: linear-gradient(to right, transparent, var(--theme-focused-foreground));
+    cursor: pointer;
+  }
+
+  &::-webkit-slider-thumb {
+    -webkit-appearance: none;
+    appearance: none;
+    font-size: var(--font-size);
+    width: 1ch;
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: var(--theme-button-foreground);
+    vertical-align: bottom;
+    cursor: pointer;
+    border-radius: 0;
+  }
+
+  /* Customizing the track */
+  &::-webkit-slider-runnable-track {
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: var(--theme-border-subdued);
+    border-radius: 0;
+  }
+
+  &::-moz-range-thumb {
+    -moz-appearance: none;
+    appearance: none;
+    font-size: var(--font-size);
+    width: 1ch;
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: var(--theme-button-foreground);
+    vertical-align: bottom;
+    cursor: pointer;
+    border: none;
+    border-radius: 0;
+  }
+
+  &::-moz-range-track {
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: var(--theme-border-subdued);
+    border-radius: 0;
+  }
+
+  &::-ms-thumb {
+    appearance: none;
+    font-size: var(--font-size);
+    width: 1ch;
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: var(--theme-button-foreground);
+    vertical-align: bottom;
+    cursor: pointer;
+    border: none;
+    border-radius: 0;
+  }
+
+  &::-ms-track {
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: transparent;
+    border-color: transparent;
+    color: transparent;
+  }
+
+  &::-ms-fill-lower {
+    background: var(--theme-border-subdued);
+  }
+
+  &::-ms-fill-upper {
+    background: var(--theme-border-subdued);
+  }
+}
+
+================
+File: reference/components/NumberRangeSlider.tsx
+================
+'use client';
+
+import styles from '@components/NumberRangeSlider.module.scss';
+
+import * as React from 'react';
+
+interface RangerProps {
+  defaultValue?: number;
+  max?: number;
+  min?: number;
+  step?: number;
+}
+
+const NumberRangeSlider: React.FC<RangerProps> = ({ defaultValue = 0, max = 5000, min = 0, step = 1 }) => {
+  const sliderRef = React.useRef<HTMLInputElement>(null);
+  const [displayValue, setDisplayValue] = React.useState<number>(defaultValue);
+
+  const maxDigits = max.toString().length;
+
+  const padValue = (value: number): string => {
+    return value.toString().padStart(maxDigits, '0');
+  };
+
+  React.useEffect(() => {
+    if (sliderRef.current) {
+      sliderRef.current.value = String(defaultValue);
+    }
+    setDisplayValue(defaultValue);
+  }, [defaultValue]);
+
+  const scrub = (event: React.ChangeEvent<HTMLInputElement>): void => {
+    const value = parseInt(event.target.value, 10);
+    setDisplayValue(value);
+  };
+
+  return (
+    <div className={styles.root}>
+      <label className={styles.left}>
+        <div className={styles.amount}>{padValue(displayValue)}</div>
+      </label>
+      <input className={styles.slider} defaultValue={defaultValue} max={max} min={min} onChange={scrub} ref={sliderRef} role="slider" step={step} tabIndex={0} type="range" />
+    </div>
+  );
+};
+
+export default NumberRangeSlider;
+
+================
+File: reference/components/Popover.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  font-weight: 400;
+}
+
+================
+File: reference/components/Popover.tsx
+================
+import styles from '@components/Popover.module.scss';
+
+import * as React from 'react';
+
+interface PopoverProps extends React.HTMLAttributes<HTMLDivElement> {}
+
+const Popover = React.forwardRef<HTMLDivElement, PopoverProps>(({ style: propStyle, ...rest }, ref) => {
+  const style: React.CSSProperties = { ...propStyle };
+
+  return <div ref={ref} className={styles.root} {...rest} style={style} />;
+});
+
+Popover.displayName = 'Popover';
+
+export default Popover;
+
+================
+File: reference/components/Providers.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+import { ModalProvider } from '@components/page/ModalContext';
+
+interface ProvidersProps {
+  children: React.ReactNode;
+}
+
+const Providers: React.FC<ProvidersProps> = ({ children }) => {
+  return <ModalProvider>{children}</ModalProvider>;
+};
+
+export default Providers;
+
+================
+File: reference/components/RadioButton.module.scss
+================
+.section {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+  position: relative;
+
+  .right {
+    padding-bottom: calc(8px * var(--theme-line-height-base));
+    box-shadow: inset 0 1px 0 0 var(--theme-border-subdued);
+  }
+
+  &:last-child {
+    .right {
+      padding-bottom: 0;
+    }
+  }
+}
+
+.figure {
+  display: inline-flex;
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  cursor: pointer;
+  color: var(--theme-text);
+  background: var(--theme-button-foreground);
+  width: 3ch;
+  align-items: center;
+  justify-content: center;
+}
+
+.selected {
+  .figure {
+    background: var(--theme-text);
+  }
+}
+
+.dot {
+  display: inline-block;
+  width: 1ch;
+  height: 1ch;
+  background: var(--theme-background);
+  transform: rotate(45deg);
+  vertical-align: middle;
+}
+
+.focused {
+  .figure {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.relative {
+  flex-shrink: 0;
+  display: inline-block;
+  vertical-align: baseline;
+}
+
+.right {
+  background: var(--theme-button-background);
+  min-width: 10%;
+  width: 100%;
+  align-self: stretch;
+}
+
+.input {
+  position: absolute;
+  height: 1px;
+  width: 1px;
+  opacity: 0;
+  background: transparent;
+  border: 0;
+  outline: 0;
+  margin: 0;
+  padding: 0;
+}
+
+================
+File: reference/components/RadioButton.tsx
+================
+import styles from '@components/RadioButton.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface RadioButtonProps {
+  style?: React.CSSProperties;
+  name: string;
+  value: string;
+  selected?: boolean;
+  onSelect?: (value: string) => void;
+  children?: React.ReactNode;
+}
+
+const RadioButton: React.FC<RadioButtonProps> = ({ style, name, value, selected = false, onSelect, children }) => {
+  const radioId = `${name}-${value}-radio`;
+  const [isFocused, setIsFocused] = React.useState(false);
+
+  const handleFocus = () => setIsFocused(true);
+  const handleBlur = () => setIsFocused(false);
+
+  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
+    switch (event.key) {
+      case 'Enter':
+        event.preventDefault();
+        onSelect?.(value);
+        break;
+      case 'ArrowUp':
+      case 'ArrowLeft':
+        event.preventDefault();
+        Utilities.findNextFocusable(document.activeElement, 'previous')?.focus();
+        break;
+      case 'Tab':
+      case 'ArrowDown':
+      case 'ArrowRight':
+        event.preventDefault();
+        Utilities.findNextFocusable(document.activeElement, 'next')?.focus();
+        break;
+      default:
+        break;
+    }
+  };
+
+  const handleChange = () => {
+    onSelect?.(value);
+  };
+
+  return (
+    <div
+      className={Utilities.classNames(styles.section, {
+        [styles.focused]: isFocused,
+        [styles.selected]: selected,
+      })}
+      style={style}
+    >
+      <input className={styles.input} id={radioId} type="radio" name={name} value={value} checked={selected} onFocus={handleFocus} onBlur={handleBlur} onKeyDown={handleKeyDown} onChange={handleChange} />
+      <div className={styles.relative}>
+        <label className={styles.figure} htmlFor={radioId}>
+          {selected ? <span aria-hidden="true" className={styles.dot} /> : null}
+        </label>
+      </div>
+      <div className={styles.right}>&nbsp;&nbsp;{children}</div>
+    </div>
+  );
+};
+
+export default RadioButton;
+
+================
+File: reference/components/RadioButtonGroup.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+import RadioButton from '@components/RadioButton';
+
+interface RadioButtonGroupProps {
+  options: { value: string; label: string }[];
+  defaultValue?: string;
+}
+
+const RadioButtonGroup: React.FC<RadioButtonGroupProps> = ({ options, defaultValue = '' }) => {
+  const [selectedValue, setSelectedValue] = React.useState<string>(defaultValue);
+
+  const handleSelect = (value: string) => {
+    setSelectedValue(value);
+  };
+
+  return (
+    <>
+      {options.map((option) => (
+        <RadioButton key={option.value} name="example" value={option.value} selected={selectedValue === option.value} onSelect={handleSelect}>
+          {option.label}
+        </RadioButton>
+      ))}
+    </>
+  );
+};
+
+export default RadioButtonGroup;
+
+================
+File: reference/components/Row.module.scss
+================
+.row {
+  display: block;
+  outline: 0;
+  border: 0;
+  transition: 200ms ease background;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/Row.tsx
+================
+'use client';
+
+import styles from '@components/Row.module.scss';
+
+import * as React from 'react';
+
+type RowProps = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const Row = React.forwardRef<HTMLElement, RowProps>(({ children, ...rest }, ref) => {
+  return (
+    <section className={styles.row} ref={ref} {...rest}>
+      {children}
+    </section>
+  );
+});
+
+Row.displayName = 'Row';
+
+export default Row;
+
+================
+File: reference/components/RowEllipsis.module.scss
+================
+.row {
+  display: block;
+  outline: 0;
+  border: 0;
+  transition: 200ms ease background;
+  white-space: nowrap;
+  overflow: hidden;
+  text-overflow: ellipsis;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/RowEllipsis.tsx
+================
+'use client';
+
+import styles from '@components/RowEllipsis.module.scss';
+
+import * as React from 'react';
+
+type RowEllipsisProps = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const RowEllipsis = React.forwardRef<HTMLElement, RowEllipsisProps>(({ children, ...rest }, ref) => {
+  return (
+    <section className={styles.row} ref={ref} {...rest}>
+      {children}
+    </section>
+  );
+});
+
+RowEllipsis.displayName = 'RowEllipsis';
+
+export default RowEllipsis;
+
+================
+File: reference/components/RowSpaceBetween.module.scss
+================
+.row {
+  display: flex;
+  justify-content: space-between;
+  outline: 0;
+  border: 0;
+  transition: 200ms ease background;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/RowSpaceBetween.tsx
+================
+'use client';
+
+import styles from '@components/RowSpaceBetween.module.scss';
+
+import * as React from 'react';
+
+type RowSpaceBetweenProps = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const RowSpaceBetween = React.forwardRef<HTMLElement, RowSpaceBetweenProps>(({ children, ...rest }, ref) => {
+  return (
+    <section className={styles.row} ref={ref} {...rest}>
+      {children}
+    </section>
+  );
+});
+
+RowSpaceBetween.displayName = 'RowSpaceBetween';
+
+export default RowSpaceBetween;
+
+================
+File: reference/components/Select.module.scss
+================
+.select {
+  align-items: flex-start;
+  cursor: default;
+  display: flex;
+  justify-content: space-between;
+  outline: none;
+  position: relative;
+  z-index: var(--z-index-page-select);
+}
+
+.control {
+  align-self: stretch;
+  background: var(--theme-button-foreground);
+  cursor: pointer;
+  flex-shrink: 0;
+  padding: 0 1ch 0 1ch;
+
+  &.focused {
+    background: var(--theme-text);
+    color: var(--theme-background);
+  }
+}
+
+.display {
+  background: var(--theme-border);
+  border: 0;
+  color: var(--theme-text);
+  cursor: pointer;
+  font-family: var(--font-family-mono);
+  font-size: var(--font-size);
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+  margin: 0;
+  min-width: 10%;
+  outline: 0;
+  padding: 0;
+  padding-left: 3ch;
+  text-align: left;
+  user-select: none;
+  width: 100%;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    border: 0;
+    outline: 0;
+  }
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.menu {
+  background-color: var(--theme-border-subdued);
+  left: 3ch;
+  list-style-type: none;
+  padding: 0;
+  right: 0;
+  z-index: var(--z-index-page-select);
+}
+
+.item {
+  border: 0;
+  cursor: pointer;
+  outline: 0;
+  padding-left: 6ch;
+  user-select: none;
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    border: 0;
+    outline: 0;
+  }
+}
+
+================
+File: reference/components/Select.tsx
+================
+'use client';
+
+import styles from '@components/Select.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface SelectProps {
+  name: string;
+  options: string[];
+  placeholder?: string;
+  defaultValue?: string;
+  onChange?: (selectedValue: string) => void;
+}
+
+const Select: React.FC<SelectProps> = ({ name, options, placeholder, defaultValue = '', onChange }) => {
+  const [isOpen, setIsOpen] = React.useState(false);
+  const [index, setIndex] = React.useState(-1);
+  const [selectedValue, setSelectedValue] = React.useState(defaultValue);
+
+  const containerRef = React.useRef<HTMLButtonElement | null>(null);
+
+  const handleOpen = () => {
+    setIsOpen(true);
+    const currentIndex = options.indexOf(selectedValue);
+    setIndex(currentIndex >= 0 ? currentIndex : 0);
+  };
+
+  const handleClose = () => {
+    setIsOpen(false);
+    setIndex(-1);
+
+    if (containerRef && containerRef.current) {
+      containerRef.current?.focus();
+    }
+  };
+
+  const handleSelect = (value: string) => {
+    setSelectedValue(value);
+    onChange?.(value);
+    handleClose();
+  };
+
+  return (
+    <>
+      <section className={styles.select}>
+        <figure
+          className={Utilities.classNames(isOpen ? styles.focused : null, styles.control)}
+          onClick={() => {
+            isOpen ? handleClose() : handleOpen();
+          }}
+        >
+          ▼
+        </figure>
+        <button
+          className={styles.display}
+          ref={containerRef}
+          tabIndex={0}
+          onClick={() => {
+            isOpen ? handleClose() : handleOpen();
+          }}
+          aria-haspopup="listbox"
+          aria-expanded={isOpen}
+        >
+          {selectedValue || placeholder}
+        </button>
+      </section>
+
+      {isOpen && (
+        <ul className={styles.menu} role="listbox">
+          {options.map((option, idx) => {
+            return (
+              <li key={option} role="option" tabIndex={0} className={Utilities.classNames(styles.item)} onClick={() => handleSelect(option)}>
+                {option}
+              </li>
+            );
+          })}
+        </ul>
+      )}
+    </>
+  );
+};
+
+export default Select;
+
+================
+File: reference/components/SidebarLayout.module.scss
+================
+.root {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+  white-space: pre-wrap;
+}
+
+.sidebar {
+  align-self: stretch;
+  flex-shrink: 0;
+  width: 20ch;
+}
+
+.handle {
+  align-self: stretch;
+  flex-shrink: 0;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  width: 3ch;
+  outline: 0;
+  border: 0;
+  cursor: col-resize;
+
+  &:hover {
+    .line {
+      background: var(--theme-focused-foreground);
+    }
+  }
+
+  &:focus {
+    outline: 0;
+    border: 0;
+
+    .line {
+      background: var(--theme-focused-foreground);
+    }
+  }
+}
+
+.line {
+  align-self: stretch;
+  width: 2px;
+  background: var(--theme-text);
+
+  &:first-child {
+    margin-left: 1px;
+    margin-right: 2px;
+  }
+}
+
+.content {
+  min-width: 10%;
+  width: 100%;
+}
+
+================
+File: reference/components/SidebarLayout.tsx
+================
+'use client';
+
+import styles from '@components/SidebarLayout.module.scss';
+import * as React from 'react';
+
+interface SidebarLayoutProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'defaultValue'> {
+  children?: React.ReactNode;
+  sidebar?: React.ReactNode;
+  defaultSidebarWidth?: number;
+  isShowingHandle?: boolean;
+  isReversed?: boolean;
+}
+
+const LINE_HEIGHT = 20;
+const CHARACTER_WIDTH = 9.6;
+
+const SidebarLayout: React.FC<SidebarLayoutProps> = ({ defaultSidebarWidth = 20, children, sidebar, isShowingHandle = false, isReversed = false, ...rest }) => {
+  const [sidebarWidth, setSidebarWidth] = React.useState(defaultSidebarWidth);
+  const handleRef = React.useRef<HTMLDivElement>(null);
+
+  const handleMouseDown = (event: React.MouseEvent<HTMLDivElement>) => {
+    const startX = event.clientX;
+    const startWidth = sidebarWidth;
+
+    const onMouseMove = (moveEvent: MouseEvent) => {
+      const deltaX = moveEvent.clientX - startX;
+      const increment = Math.round(deltaX / CHARACTER_WIDTH);
+      setSidebarWidth(Math.max(CHARACTER_WIDTH, startWidth + increment));
+    };
+
+    const onMouseUp = () => {
+      document.removeEventListener('mousemove', onMouseMove);
+      document.removeEventListener('mouseup', onMouseUp);
+    };
+
+    document.addEventListener('mousemove', onMouseMove);
+    document.addEventListener('mouseup', onMouseUp);
+  };
+
+  if (isReversed) {
+    return (
+      <div className={styles.root} {...rest}>
+        <div className={styles.content}>{children}</div>
+        &nbsp;
+        <div
+          className={styles.sidebar}
+          style={{
+            width: `${sidebarWidth}ch`,
+          }}
+        >
+          {sidebar}
+        </div>
+      </div>
+    );
+  }
+
+  return (
+    <div className={styles.root} {...rest}>
+      <div
+        className={styles.sidebar}
+        style={{
+          width: `${sidebarWidth}ch`,
+        }}
+      >
+        {sidebar}
+      </div>
+      {isShowingHandle ? (
+        <div className={styles.handle} ref={handleRef} role="button" tabIndex={0} onMouseDown={handleMouseDown} style={isShowingHandle ? {} : { width: `0.5ch` }}>
+          <>
+            <div className={styles.line} />
+            <div className={styles.line} />
+          </>
+        </div>
+      ) : null}
+      <div className={styles.content}>{children}</div>
+    </div>
+  );
+};
+
+export default SidebarLayout;
+
+================
+File: reference/components/Table.module.scss
+================
+.root {
+  border: 0;
+  outline: 0;
+  margin: 0;
+  padding: 0;
+  position: relative;
+  width: 100%;
+  border-spacing: 0px;
+  -webkit-text-size-adjust: 100%;
+}
+
+.body {
+}
+
+================
+File: reference/components/Table.tsx
+================
+'use client';
+
+import styles from '@components/Table.module.scss';
+
+import * as React from 'react';
+
+type TableProps = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const Table = ({ children, ...rest }) => {
+  return (
+    <table className={styles.root} {...rest}>
+      <tbody className={styles.body}>{children}</tbody>
+    </table>
+  );
+};
+
+Table.displayName = 'Table';
+
+export default Table;
+
+================
+File: reference/components/TableColumn.module.scss
+================
+.root {
+  border: 0;
+  outline: 0;
+  margin: 0;
+  padding: 0;
+  transition: background-color 0.5s ease;
+  padding-left: 1ch;
+  font-size: var(--font-size);
+  flex-shrink: 0;
+  -webkit-text-size-adjust: 100%;
+
+  &:first-child {
+    padding-left: 0px;
+  }
+}
+
+================
+File: reference/components/TableColumn.tsx
+================
+'use client';
+
+import styles from '@components/TableColumn.module.scss';
+
+import * as React from 'react';
+
+type TableColumnProps = React.HTMLAttributes<HTMLTableCellElement> & {
+  children?: React.ReactNode;
+};
+
+const TableColumn: React.FC<TableColumnProps> = ({ children, ...rest }) => {
+  return (
+    <td className={styles.root} {...rest}>
+      {children}
+    </td>
+  );
+};
+
+TableColumn.displayName = 'TableColumn';
+
+export default TableColumn;
+
+================
+File: reference/components/TableRow.module.scss
+================
+.root {
+  border: 0;
+  outline: 0;
+  margin: 0;
+  padding: 0;
+
+  transition: transform 0.5s ease;
+  border-spacing: 0px;
+  -webkit-text-size-adjust: 100%;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    outline: 0;
+  }
+}
+
+================
+File: reference/components/TableRow.tsx
+================
+'use client';
+
+import styles from '@components/TableRow.module.scss';
+
+import * as React from 'react';
+
+type TableRowProps = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const TableRow = ({ children, ...rest }) => {
+  return (
+    <tr className={styles.root} tabIndex={0} {...rest}>
+      {children}
+    </tr>
+  );
+};
+
+TableRow.displayName = 'TableRow';
+
+export default TableRow;
+
+================
+File: reference/components/Text.module.scss
+================
+.text {
+  white-space: pre-wrap;
+  overflow-wrap: break-word;
+}
+
+================
+File: reference/components/Text.tsx
+================
+import styles from '@components/Text.module.scss';
+
+import * as React from 'react';
+
+interface TextProps extends React.HTMLAttributes<HTMLParagraphElement> {
+  children?: React.ReactNode;
+}
+
+const Text: React.FC<TextProps> = ({ children, ...rest }) => {
+  return (
+    <p className={styles.text} {...rest}>
+      {children}
+    </p>
+  );
+};
+
+export default Text;
+
+================
+File: reference/components/TextArea.module.scss
+================
+.root {
+  position: relative;
+}
+
+.placeholder {
+  opacity: 0.7;
+  font-style: italic;
+}
+
+.displayed {
+  white-space: pre-wrap;
+  word-wrap: break-word;
+  pointer-events: none;
+  overflow-wrap: anywhere;
+}
+
+.hidden {
+  white-space: pre-wrap;
+  word-wrap: break-word;
+  pointer-events: none;
+  overflow-wrap: anywhere;
+  position: absolute;
+  visibility: hidden;
+  width: 100%;
+  overflow: auto;
+}
+
+.focused {
+  .block {
+    background: var(--theme-focused-foreground);
+  }
+
+  .placeholder {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+@keyframes blink {
+  50% {
+    opacity: 0;
+  }
+}
+
+.blink {
+  animation: blink 1s step-start 0s infinite;
+}
+
+.block {
+  display: inline-block;
+  min-width: 1ch;
+  background: var(--theme-text);
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  vertical-align: bottom;
+}
+
+.hiddenElement {
+  position: absolute;
+  top: 0;
+  left: 0;
+  width: 100%;
+  height: 100%;
+  color: transparent;
+  background: transparent;
+  caret-color: transparent;
+  border: none;
+  resize: none;
+  outline: none;
+  overflow: hidden;
+  padding: 0;
+  margin: 0;
+  line-height: var(--theme-line-height-base);
+  font-size: var(--font-size);
+  font-family: inherit;
+}
+
+================
+File: reference/components/TextArea.tsx
+================
+'use client';
+
+import styles from '@components/TextArea.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+type TextAreaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement> & {
+  autoPlay?: string;
+  autoPlaySpeedMS?: number;
+  isBlink?: boolean;
+};
+function TextArea({ autoPlay, autoPlaySpeedMS = 40, isBlink, placeholder, onChange, ...rest }: TextAreaProps) {
+  const textAreaRef = React.useRef<HTMLTextAreaElement | null>(null);
+  const measurementRef = React.useRef<HTMLDivElement | null>(null);
+
+  const [text, setText] = React.useState<string>(rest.defaultValue?.toString() || rest.value?.toString() || '');
+  const [isAutoPlaying, setIsAutoPlaying] = React.useState<boolean>(!!autoPlay);
+  const [isFocused, setIsFocused] = React.useState<boolean>(false);
+  const [selectionStart, setSelectionStart] = React.useState<number>(0);
+
+  const autoPlayIntervalRef = React.useRef<NodeJS.Timeout | null>(null);
+  const autoPlayIndexRef = React.useRef<number>(0);
+
+  const [currentLineIndex, setCurrentLineIndex] = React.useState<number>(0);
+  const [totalLines, setTotalLines] = React.useState<number>(0);
+
+  React.useEffect(() => {
+    if (textAreaRef.current && isFocused) {
+      textAreaRef.current.setSelectionRange(selectionStart, selectionStart);
+    }
+  }, [selectionStart, isFocused]);
+
+  React.useEffect(() => {
+    if (rest.value !== undefined) {
+      const val = rest.value.toString();
+      setText(val);
+      setIsAutoPlaying(false);
+      if (autoPlayIntervalRef.current) {
+        clearInterval(autoPlayIntervalRef.current);
+      }
+      setSelectionStart(val.length);
+    }
+  }, [rest.value]);
+
+  React.useEffect(() => {
+    if (autoPlay && !rest.value && !rest.defaultValue) {
+      setIsAutoPlaying(true);
+      autoPlayIndexRef.current = 0;
+      setText('');
+      if (autoPlayIntervalRef.current) clearInterval(autoPlayIntervalRef.current);
+
+      autoPlayIntervalRef.current = setInterval(() => {
+        autoPlayIndexRef.current++;
+        if (!autoPlay) return;
+        if (autoPlayIndexRef.current > autoPlay.length) {
+          setIsAutoPlaying(false);
+          clearInterval(autoPlayIntervalRef.current!);
+          return;
+        }
+        const newText = autoPlay.slice(0, autoPlayIndexRef.current);
+        setText(newText);
+        setSelectionStart(newText.length);
+      }, autoPlaySpeedMS);
+    }
+
+    return () => {
+      if (autoPlayIntervalRef.current) clearInterval(autoPlayIntervalRef.current);
+    };
+  }, [autoPlay, rest.value, rest.defaultValue]);
+
+  const resizeTextArea = React.useCallback(() => {
+    if (!textAreaRef.current) return;
+    textAreaRef.current.style.height = 'auto';
+    textAreaRef.current.style.height = `${textAreaRef.current.scrollHeight}px`;
+  }, []);
+
+  React.useEffect(() => {
+    resizeTextArea();
+    window.addEventListener('resize', resizeTextArea);
+    return () => window.removeEventListener('resize', resizeTextArea);
+  }, [resizeTextArea]);
+
+  const onHandleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
+    const value = e.target.value;
+    setText(value);
+    setIsAutoPlaying(false);
+    if (autoPlayIntervalRef.current) {
+      clearInterval(autoPlayIntervalRef.current);
+    }
+    resizeTextArea();
+    if (onChange) {
+      onChange(e);
+    }
+    setSelectionStart(e.target.selectionStart ?? 0);
+  };
+
+  const onHandleSelect = (e: React.SyntheticEvent<HTMLTextAreaElement>) => {
+    const textarea = e.currentTarget as HTMLTextAreaElement;
+    setSelectionStart(textarea.selectionStart);
+  };
+
+  const onHandleFocus = () => {
+    setIsFocused(true);
+    if (textAreaRef.current) {
+      setSelectionStart(textAreaRef.current.selectionStart);
+    }
+  };
+
+  const onHandleBlur = () => {
+    setIsFocused(false);
+  };
+
+  const onHandleClick = (e: React.MouseEvent<HTMLTextAreaElement>) => {
+    const textarea = e.currentTarget as HTMLTextAreaElement;
+    textarea.focus();
+    setSelectionStart(textarea.selectionStart);
+  };
+
+  React.useLayoutEffect(() => {
+    if (!measurementRef.current) return;
+
+    const measurementEl = measurementRef.current;
+    const computedStyle = window.getComputedStyle(measurementEl);
+    const lineHeightStr = computedStyle.lineHeight;
+    let lineHeight = 20;
+    if (lineHeightStr.endsWith('px')) {
+      lineHeight = parseFloat(lineHeightStr);
+    }
+
+    const countLines = (content: string) => {
+      measurementEl.textContent = content || '\u00A0';
+      const height = measurementEl.offsetHeight;
+      return Math.round(height / lineHeight);
+    };
+
+    const displayString = text || placeholder || '';
+
+    const textBeforeCaret = text.substring(0, selectionStart);
+    const textAfterCaret = text.substring(selectionStart);
+
+    const total = countLines(displayString);
+    setTotalLines(total > 0 ? total - 1 : 0);
+
+    const currentLines = countLines(textBeforeCaret);
+    setCurrentLineIndex(currentLines > 0 ? currentLines - 1 : 0);
+  }, [text, selectionStart, placeholder]);
+
+  const onHandleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
+    if (e.key === 'ArrowUp' && currentLineIndex === 0) {
+      e.preventDefault();
+      const previousFocusable = Utilities.findNextFocusable(document.activeElement, 'previous');
+      previousFocusable?.focus();
+    } else if (e.key === 'ArrowDown' && currentLineIndex === totalLines) {
+      e.preventDefault();
+      const nextFocusable = Utilities.findNextFocusable(document.activeElement, 'next');
+      nextFocusable?.focus();
+    }
+  };
+
+  const isPlaceholderVisible = !text && placeholder;
+
+  const containerClasses = Utilities.classNames(styles.root, isFocused && styles.focused);
+
+  return (
+    <div className={containerClasses}>
+      <div className={Utilities.classNames(styles.displayed, isPlaceholderVisible && styles.placeholder)}>
+        {isPlaceholderVisible ? placeholder : text.substring(0, selectionStart)}
+        {!isPlaceholderVisible && <span className={Utilities.classNames(styles.block, isBlink && styles.blink)}></span>}
+        {!isPlaceholderVisible && text.substring(selectionStart)}
+      </div>
+
+      <div ref={measurementRef} className={styles.hidden}></div>
+
+      <textarea className={styles.hiddenElement} ref={textAreaRef} value={text} aria-placeholder={placeholder} onFocus={onHandleFocus} onBlur={onHandleBlur} onKeyDown={onHandleKeyDown} onChange={onHandleChange} onSelect={onHandleSelect} onClick={onHandleClick} {...rest} />
+    </div>
+  );
+}
+
+export default TextArea;
+
+================
+File: reference/components/Tooltip.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border);
+  box-shadow: 0.5ch 0.5ch 0 0 var(--theme-border-subdued);
+  font-weight: 400;
+  max-width: 24ch;
+}
+
+================
+File: reference/components/Tooltip.tsx
+================
+import styles from '@components/Tooltip.module.scss';
+
+import * as React from 'react';
+
+interface TooltipProps extends React.HTMLAttributes<HTMLDivElement> {}
+
+const Tooltip = React.forwardRef<HTMLDivElement, TooltipProps>(({ style: propStyle, ...rest }, ref) => {
+  const style: React.CSSProperties = { ...propStyle };
+
+  return <div ref={ref} className={styles.root} {...rest} style={style} />;
+});
+
+Tooltip.displayName = 'Tooltip';
+
+export default Tooltip;
+
+================
+File: reference/components/TreeView.module.scss
+================
+.root {
+  white-space: nowrap;
+  -webkit-text-size-adjust: 100%;
+}
+
+.item {
+  cursor: pointer;
+
+  &:focus {
+    outline: 0;
+    border: 0;
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.empty {
+  opacity: 0.5;
+}
+
+================
+File: reference/components/TreeView.tsx
+================
+'use client';
+
+import styles from '@components/TreeView.module.scss';
+
+import * as React from 'react';
+
+interface TreeViewProps {
+  children?: React.ReactNode;
+  defaultValue?: boolean;
+  depth?: number;
+  isFile?: boolean;
+  isLastChild?: boolean;
+  isRoot?: boolean;
+  parentLines?: boolean[];
+  style?: any;
+  title: string;
+}
+
+const TreeView: React.FC<TreeViewProps> = ({ defaultValue = false, title, children, depth = 0, isFile = false, isRoot = false, isLastChild = false, style, parentLines = [] }) => {
+  const [show, setShow] = React.useState<boolean>(defaultValue);
+
+  const onToggleShow = (): void => {
+    if (!isFile) setShow((prevShow) => !prevShow);
+  };
+
+  const hasChildren = React.Children.count(children) > 0;
+  const isEmptyFolder = !isFile && !hasChildren;
+
+  const spacing = parentLines.map((line) => (line ? '│ . ' : '. . ')).join('');
+  const endPrefix = isLastChild ? '└───' : '├───';
+  const prefix = `${spacing}${endPrefix}`;
+  const icon = isFile ? ' ' : show ? '╦ ' : '╤ ';
+
+  const updatedParentLines = [...parentLines, !isLastChild];
+
+  return (
+    <div className={styles.root} style={style}>
+      <div tabIndex={0} role="button" onClick={onToggleShow} className={styles.item} aria-expanded={show}>
+        {prefix}
+        {icon}
+        {title}
+      </div>
+      {show && hasChildren && (
+        <div>
+          {React.Children.map(children, (child, index) =>
+            React.isValidElement(child)
+              ? React.cloneElement(child as React.ReactElement<TreeViewProps>, {
+                  depth: depth + 1,
+                  isLastChild: index === React.Children.count(children) - 1,
+                  parentLines: updatedParentLines,
+                })
+              : child
+          )}
+        </div>
+      )}
+    </div>
+  );
+};
+
+export default TreeView;
+
+================
+File: reference/modules/hotkeys/bound-hotkeys-proxy-provider.tsx
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/BoundHotkeysProxyProvider.tsx
+
+import { createContext, ReactNode, useContext } from 'react'
+import { Hotkey } from '@modules/hotkeys/types'
+
+type BoundHotkeysProxyProviderType = {
+  addHotkey: (hotkey: Hotkey) => void
+  removeHotkey: (hotkey: Hotkey) => void
+}
+
+const BoundHotkeysProxyProvider = createContext<BoundHotkeysProxyProviderType | undefined>(undefined)
+
+export const useBoundHotkeysProxy = () => {
+  return useContext(BoundHotkeysProxyProvider)
+}
+
+interface Props {
+  children: ReactNode
+  addHotkey: (hotkey: Hotkey) => void
+  removeHotkey: (hotkey: Hotkey) => void
+}
+
+export default function BoundHotkeysProxyProviderProvider({ addHotkey, removeHotkey, children }: Props) {
+  return (
+    <BoundHotkeysProxyProvider.Provider value={{ addHotkey, removeHotkey }}>
+      {children}
+    </BoundHotkeysProxyProvider.Provider>
+  )
+}
+
+================
+File: reference/modules/hotkeys/hotkeys-provider.tsx
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/HotkeysProvider.tsx
+import { Hotkey } from '@modules/hotkeys/types'
+import { createContext, ReactNode, useState, useContext, useCallback } from 'react'
+import BoundHotkeysProxyProviderProvider from '@modules/hotkeys/bound-hotkeys-proxy-provider'
+
+import * as Utilities from '@common/utilities';
+
+export type HotkeysContextType = {
+  hotkeys: ReadonlyArray<Hotkey>
+  enabledScopes: string[]
+  toggleScope: (scope: string) => void
+  enableScope: (scope: string) => void
+  disableScope: (scope: string) => void
+}
+
+// The context is only needed for special features like global scoping, so we use a graceful default fallback
+const HotkeysContext = createContext<HotkeysContextType>({
+  hotkeys: [],
+  enabledScopes: [], // This array has to be empty instead of containing '*' as default, to check if the provider is set or not
+  toggleScope: () => {},
+  enableScope: () => {},
+  disableScope: () => {},
+})
+
+export const useHotkeysContext = () => {
+  return useContext(HotkeysContext)
+}
+
+interface Props {
+  initiallyActiveScopes?: string[]
+  children: ReactNode
+}
+
+export const HotkeysProvider = ({ initiallyActiveScopes = ['*'], children }: Props) => {
+  const [internalActiveScopes, setInternalActiveScopes] = useState(
+    initiallyActiveScopes?.length > 0 ? initiallyActiveScopes : ['*']
+  )
+  const [boundHotkeys, setBoundHotkeys] = useState<Hotkey[]>([])
+
+  const enableScope = useCallback((scope: string) => {
+    setInternalActiveScopes((prev) => {
+      if (prev.includes('*')) {
+        return [scope]
+      }
+
+      return Array.from(new Set([...prev, scope]))
+    })
+  }, [])
+
+  const disableScope = useCallback((scope: string) => {
+    setInternalActiveScopes((prev) => {
+      if (prev.filter((s) => s !== scope).length === 0) {
+        return ['*']
+      } else {
+        return prev.filter((s) => s !== scope)
+      }
+    })
+  }, [])
+
+  const toggleScope = useCallback((scope: string) => {
+    setInternalActiveScopes((prev) => {
+      if (prev.includes(scope)) {
+        if (prev.filter((s) => s !== scope).length === 0) {
+          return ['*']
+        } else {
+          return prev.filter((s) => s !== scope)
+        }
+      } else {
+        if (prev.includes('*')) {
+          return [scope]
+        }
+
+        return Array.from(new Set([...prev, scope]))
+      }
+    })
+  }, [])
+
+  const addBoundHotkey = useCallback((hotkey: Hotkey) => {
+    setBoundHotkeys((prev) => [...prev, hotkey])
+  }, [])
+
+  const removeBoundHotkey = useCallback((hotkey: Hotkey) => {
+    setBoundHotkeys((prev) => prev.filter((h) => !Utilities.deepEqual(h, hotkey)))
+  }, [])
+
+  return (
+    <HotkeysContext.Provider
+      value={{ enabledScopes: internalActiveScopes, hotkeys: boundHotkeys, enableScope, disableScope, toggleScope }}
+    >
+      <BoundHotkeysProxyProviderProvider addHotkey={addBoundHotkey} removeHotkey={removeBoundHotkey}>
+        {children}
+      </BoundHotkeysProxyProviderProvider>
+    </HotkeysContext.Provider>
+  )
+}
+
+================
+File: reference/modules/hotkeys/index.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/index.ts
+
+import useHotkeys from '@modules/hotkeys/use-hotkeys'
+import type { Options, Keys, HotkeyCallback } from '@modules/hotkeys/types'
+import { HotkeysProvider, useHotkeysContext } from '@modules/hotkeys/hotkeys-provider'
+import { isHotkeyPressed } from '@modules/hotkeys/is-hotkey-pressed'
+import useRecordHotkeys from '@modules/hotkeys/use-record-hotkeys'
+
+export {
+  useHotkeys,
+  useRecordHotkeys,
+  useHotkeysContext,
+  isHotkeyPressed,
+  HotkeysProvider,
+  Options,
+  Keys,
+  HotkeyCallback,
+}
+
+================
+File: reference/modules/hotkeys/is-hotkey-pressed.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/isHotkeyPressed.ts
+
+import { isHotkeyModifier, mapKey } from '@modules/hotkeys/parse-hotkeys'
+;(() => {
+  if (typeof document !== 'undefined') {
+    document.addEventListener('keydown', (e) => {
+      if (e.key === undefined) {
+        // Synthetic event (e.g., Chrome autofill).  Ignore.
+        return
+      }
+
+      pushToCurrentlyPressedKeys([mapKey(e.key), mapKey(e.code)])
+    })
+
+    document.addEventListener('keyup', (e) => {
+      if (e.key === undefined) {
+        // Synthetic event (e.g., Chrome autofill).  Ignore.
+        return
+      }
+
+      removeFromCurrentlyPressedKeys([mapKey(e.key), mapKey(e.code)])
+    })
+  }
+
+  if (typeof window !== 'undefined') {
+    window.addEventListener('blur', () => {
+      currentlyPressedKeys.clear()
+    })
+  }
+})()
+
+const currentlyPressedKeys: Set<string> = new Set<string>()
+
+// https://github.com/microsoft/TypeScript/issues/17002
+export function isReadonlyArray(value: unknown): value is readonly unknown[] {
+  return Array.isArray(value)
+}
+
+export function isHotkeyPressed(key: string | readonly string[], splitKey = ','): boolean {
+  const hotkeyArray = isReadonlyArray(key) ? key : key.split(splitKey)
+
+  return hotkeyArray.every((hotkey) => currentlyPressedKeys.has(hotkey.trim().toLowerCase()))
+}
+
+export function pushToCurrentlyPressedKeys(key: string | string[]): void {
+  const hotkeyArray = Array.isArray(key) ? key : [key]
+
+  /*
+  Due to a weird behavior on macOS we need to clear the set if the user pressed down the meta key and presses another key.
+  https://stackoverflow.com/questions/11818637/why-does-javascript-drop-keyup-events-when-the-metakey-is-pressed-on-mac-browser
+  Otherwise the set will hold all ever pressed keys while the meta key is down which leads to wrong results.
+   */
+  if (currentlyPressedKeys.has('meta')) {
+    currentlyPressedKeys.forEach((key) => !isHotkeyModifier(key) && currentlyPressedKeys.delete(key.toLowerCase()))
+  }
+
+  hotkeyArray.forEach((hotkey) => currentlyPressedKeys.add(hotkey.toLowerCase()))
+}
+
+export function removeFromCurrentlyPressedKeys(key: string | string[]): void {
+  const hotkeyArray = Array.isArray(key) ? key : [key]
+
+  /*
+  Due to a weird behavior on macOS we need to clear the set if the user pressed down the meta key and presses another key.
+  https://stackoverflow.com/questions/11818637/why-does-javascript-drop-keyup-events-when-the-metakey-is-pressed-on-mac-browser
+  Otherwise the set will hold all ever pressed keys while the meta key is down which leads to wrong results.
+   */
+  if (key === 'meta') {
+    currentlyPressedKeys.clear()
+  } else {
+    hotkeyArray.forEach((hotkey) => currentlyPressedKeys.delete(hotkey.toLowerCase()))
+  }
+}
+
+================
+File: reference/modules/hotkeys/parse-hotkeys.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/parseHotkeys.ts
+
+import { Hotkey, KeyboardModifiers } from '@modules/hotkeys/types'
+
+const reservedModifierKeywords = ['shift', 'alt', 'meta', 'mod', 'ctrl']
+
+const mappedKeys: Record<string, string> = {
+  esc: 'escape',
+  return: 'enter',
+  '.': 'period',
+  ',': 'comma',
+  '-': 'slash',
+  ' ': 'space',
+  '`': 'backquote',
+  '#': 'backslash',
+  '+': 'bracketright',
+  ShiftLeft: 'shift',
+  ShiftRight: 'shift',
+  AltLeft: 'alt',
+  AltRight: 'alt',
+  MetaLeft: 'meta',
+  MetaRight: 'meta',
+  OSLeft: 'meta',
+  OSRight: 'meta',
+  ControlLeft: 'ctrl',
+  ControlRight: 'ctrl',
+}
+
+export function mapKey(key?: string): string {
+  return ((key && mappedKeys[key]) || key || '')
+    .trim()
+    .toLowerCase()
+    .replace(/key|digit|numpad|arrow/, '')
+}
+
+export function isHotkeyModifier(key: string) {
+  return reservedModifierKeywords.includes(key)
+}
+
+export function parseKeysHookInput(keys: string, splitKey = ','): string[] {
+  return keys.split(splitKey)
+}
+
+export function parseHotkey(hotkey: string, combinationKey = '+', description?: string): Hotkey {
+  const keys = hotkey
+    .toLocaleLowerCase()
+    .split(combinationKey)
+    .map((k) => mapKey(k))
+
+  const modifiers: KeyboardModifiers = {
+    alt: keys.includes('alt'),
+    ctrl: keys.includes('ctrl') || keys.includes('control'),
+    shift: keys.includes('shift'),
+    meta: keys.includes('meta'),
+    mod: keys.includes('mod'),
+  }
+
+  const singleCharKeys = keys.filter((k) => !reservedModifierKeywords.includes(k))
+
+  return {
+    ...modifiers,
+    keys: singleCharKeys,
+    description,
+    hotkey,
+  }
+}
+
+================
+File: reference/modules/hotkeys/types.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/types.ts
+import type { DependencyList } from 'react'
+
+export type FormTags = 'input' | 'textarea' | 'select' | 'INPUT' | 'TEXTAREA' | 'SELECT'
+export type Keys = string | readonly string[]
+export type Scopes = string | readonly string[]
+
+export type RefType<T> = T | null
+
+export type KeyboardModifiers = {
+  alt?: boolean
+  ctrl?: boolean
+  meta?: boolean
+  shift?: boolean
+  mod?: boolean
+}
+
+export type Hotkey = KeyboardModifiers & {
+  keys?: readonly string[]
+  scopes?: Scopes
+  description?: string
+  hotkey: string
+}
+
+export type HotkeysEvent = Hotkey
+
+export type HotkeyCallback = (keyboardEvent: KeyboardEvent, hotkeysEvent: HotkeysEvent) => void
+
+export type Trigger = boolean | ((keyboardEvent: KeyboardEvent, hotkeysEvent: HotkeysEvent) => boolean)
+
+export type Options = {
+  enabled?: Trigger // Main setting that determines if the hotkey is enabled or not. (Default: true)
+  enableOnFormTags?: readonly FormTags[] | boolean // Enable hotkeys on a list of tags. (Default: false)
+  enableOnContentEditable?: boolean // Enable hotkeys on tags with contentEditable props. (Default: false)
+  ignoreEventWhen?: (e: KeyboardEvent) => boolean // Ignore evenets based on a condition (Default: undefined)
+  combinationKey?: string // Character to split keys in hotkeys combinations. (Default: +)
+  splitKey?: string // Character to separate different hotkeys. (Default: ,)
+  scopes?: Scopes // Scope
+  keyup?: boolean // Trigger on keyup event? (Default: undefined)
+  keydown?: boolean // Trigger on keydown event? (Default: true)
+  preventDefault?: Trigger // Prevent default browser behavior? (Default: false)
+  description?: string // Use this option to describe what the hotkey does. (Default: undefined)
+  document?: Document // Listen to events on the document instead of the window. (Default: false)
+  ignoreModifiers?: boolean // Ignore modifiers when matching hotkeys. (Default: false)
+}
+
+export type OptionsOrDependencyArray = Options | DependencyList
+
+================
+File: reference/modules/hotkeys/use-deep-equal-memo.ts
+================
+import { useRef } from 'react'
+
+import * as Utilities from '@common/utilities';
+
+export default function useDeepEqualMemo<T>(value: T) {
+  const ref = useRef<T | undefined>(undefined)
+
+  if (!Utilities.deepEqual(ref.current, value)) {
+    ref.current = value
+  }
+
+  return ref.current
+}
+
+================
+File: reference/modules/hotkeys/use-hotkeys.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/useHotkeys.ts
+
+import { HotkeyCallback, Keys, Options, OptionsOrDependencyArray, RefType } from '@modules/hotkeys/types'
+import { DependencyList, RefCallback, useCallback, useEffect, useState, useLayoutEffect, useRef } from 'react'
+import { mapKey, parseHotkey, parseKeysHookInput } from '@modules/hotkeys/parse-hotkeys'
+import {
+  isHotkeyEnabled,
+  isHotkeyEnabledOnTag,
+  isHotkeyMatchingKeyboardEvent,
+  isKeyboardEventTriggeredByInput,
+  isScopeActive,
+  maybePreventDefault,
+} from '@modules/hotkeys/validators'
+import { useHotkeysContext } from '@modules/hotkeys/hotkeys-provider'
+import { useBoundHotkeysProxy } from '@modules/hotkeys/bound-hotkeys-proxy-provider'
+import useDeepEqualMemo from '@modules/hotkeys/use-deep-equal-memo'
+import { isReadonlyArray, pushToCurrentlyPressedKeys, removeFromCurrentlyPressedKeys } from '@modules/hotkeys/is-hotkey-pressed'
+
+const stopPropagation = (e: KeyboardEvent): void => {
+  e.stopPropagation()
+  e.preventDefault()
+  e.stopImmediatePropagation()
+}
+
+const useSafeLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect
+
+export default function useHotkeys<T extends HTMLElement>(
+  keys: Keys,
+  callback: HotkeyCallback,
+  options?: OptionsOrDependencyArray,
+  dependencies?: OptionsOrDependencyArray
+) {
+  const [ref, setRef] = useState<RefType<T>>(null)
+  const hasTriggeredRef = useRef(false)
+
+  const _options: Options | undefined = !(options instanceof Array)
+    ? (options as Options)
+    : !(dependencies instanceof Array)
+    ? (dependencies as Options)
+    : undefined
+  const _keys: string = isReadonlyArray(keys) ? keys.join(_options?.splitKey) : keys
+  const _deps: DependencyList | undefined =
+    options instanceof Array ? options : dependencies instanceof Array ? dependencies : undefined
+
+  const memoisedCB = useCallback(callback, _deps ?? [])
+  const cbRef = useRef<HotkeyCallback>(memoisedCB)
+
+  if (_deps) {
+    cbRef.current = memoisedCB
+  } else {
+    cbRef.current = callback
+  }
+
+  const memoisedOptions = useDeepEqualMemo(_options)
+
+  const { enabledScopes } = useHotkeysContext()
+  const proxy = useBoundHotkeysProxy()
+
+  useSafeLayoutEffect(() => {
+    if (memoisedOptions?.enabled === false || !isScopeActive(enabledScopes, memoisedOptions?.scopes)) {
+      return
+    }
+
+    const listener = (e: KeyboardEvent, isKeyUp = false) => {
+      if (isKeyboardEventTriggeredByInput(e) && !isHotkeyEnabledOnTag(e, memoisedOptions?.enableOnFormTags)) {
+        return
+      }
+
+      // TODO: SINCE THE EVENT IS NOW ATTACHED TO THE REF, THE ACTIVE ELEMENT CAN NEVER BE INSIDE THE REF. THE HOTKEY ONLY TRIGGERS IF THE
+      // REF IS THE ACTIVE ELEMENT. THIS IS A PROBLEM SINCE FOCUSED SUB COMPONENTS WON'T TRIGGER THE HOTKEY.
+      if (ref !== null) {
+        const rootNode = ref.getRootNode()
+        if (
+          (rootNode instanceof Document || rootNode instanceof ShadowRoot) &&
+          rootNode.activeElement !== ref &&
+          !ref.contains(rootNode.activeElement)
+        ) {
+          stopPropagation(e)
+          return
+        }
+      }
+
+      if ((e.target as HTMLElement)?.isContentEditable && !memoisedOptions?.enableOnContentEditable) {
+        return
+      }
+
+      parseKeysHookInput(_keys, memoisedOptions?.splitKey).forEach((key) => {
+        const hotkey = parseHotkey(key, memoisedOptions?.combinationKey)
+
+        if (isHotkeyMatchingKeyboardEvent(e, hotkey, memoisedOptions?.ignoreModifiers) || hotkey.keys?.includes('*')) {
+          if (memoisedOptions?.ignoreEventWhen?.(e)) {
+            return
+          }
+
+          if (isKeyUp && hasTriggeredRef.current) {
+            return
+          }
+
+          maybePreventDefault(e, hotkey, memoisedOptions?.preventDefault)
+
+          if (!isHotkeyEnabled(e, hotkey, memoisedOptions?.enabled)) {
+            stopPropagation(e)
+
+            return
+          }
+
+          // Execute the user callback for that hotkey
+          cbRef.current(e, hotkey)
+
+          if (!isKeyUp) {
+            hasTriggeredRef.current = true
+          }
+        }
+      })
+    }
+
+    const handleKeyDown = (event: KeyboardEvent) => {
+      if (event.key === undefined) {
+        // Synthetic event (e.g., Chrome autofill).  Ignore.
+        return
+      }
+
+      pushToCurrentlyPressedKeys(mapKey(event.code))
+
+      if ((memoisedOptions?.keydown === undefined && memoisedOptions?.keyup !== true) || memoisedOptions?.keydown) {
+        listener(event)
+      }
+    }
+
+    const handleKeyUp = (event: KeyboardEvent) => {
+      if (event.key === undefined) {
+        // Synthetic event (e.g., Chrome autofill).  Ignore.
+        return
+      }
+
+      removeFromCurrentlyPressedKeys(mapKey(event.code))
+
+      hasTriggeredRef.current = false
+
+      if (memoisedOptions?.keyup) {
+        listener(event, true)
+      }
+    }
+
+    const domNode = ref || _options?.document || document
+
+    // @ts-ignore
+    domNode.addEventListener('keyup', handleKeyUp)
+    // @ts-ignore
+    domNode.addEventListener('keydown', handleKeyDown)
+
+    if (proxy) {
+      parseKeysHookInput(_keys, memoisedOptions?.splitKey).forEach((key) =>
+        proxy.addHotkey(parseHotkey(key, memoisedOptions?.combinationKey, memoisedOptions?.description))
+      )
+    }
+
+    return () => {
+      // @ts-ignore
+      domNode.removeEventListener('keyup', handleKeyUp)
+      // @ts-ignore
+      domNode.removeEventListener('keydown', handleKeyDown)
+
+      if (proxy) {
+        parseKeysHookInput(_keys, memoisedOptions?.splitKey).forEach((key) =>
+          proxy.removeHotkey(parseHotkey(key, memoisedOptions?.combinationKey, memoisedOptions?.description))
+        )
+      }
+    }
+  }, [ref, _keys, memoisedOptions, enabledScopes])
+
+  return setRef as RefCallback<T>
+}
+
+================
+File: reference/modules/hotkeys/use-record-hotkeys.ts
+================
+import { useCallback, useState } from 'react'
+import { mapKey } from '@modules/hotkeys/parse-hotkeys'
+
+export default function useRecordHotkeys() {
+  const [keys, setKeys] = useState(new Set<string>())
+  const [isRecording, setIsRecording] = useState(false)
+
+  const handler = useCallback((event: KeyboardEvent) => {
+    if (event.key === undefined) {
+      // Synthetic event (e.g., Chrome autofill).  Ignore.
+      return
+    }
+
+    event.preventDefault()
+    event.stopPropagation()
+
+    setKeys((prev) => {
+      const newKeys = new Set(prev)
+
+      newKeys.add(mapKey(event.code))
+
+      return newKeys
+    })
+  }, [])
+
+  const stop = useCallback(() => {
+    if (typeof document !== 'undefined') {
+      document.removeEventListener('keydown', handler)
+
+      setIsRecording(false)
+    }
+  }, [handler])
+
+  const start = useCallback(() => {
+    setKeys(new Set<string>())
+
+    if (typeof document !== 'undefined') {
+      stop()
+
+      document.addEventListener('keydown', handler)
+
+      setIsRecording(true)
+    }
+  }, [handler, stop])
+
+  const resetKeys = useCallback(() => {
+    setKeys(new Set<string>())
+  }, [])
+
+  return [keys, { start, stop, resetKeys, isRecording }] as const
+}
+
+================
+File: reference/modules/hotkeys/validators.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/validators.ts
+
+import { FormTags, Hotkey, Scopes, Trigger } from '@modules/hotkeys/types'
+import { isHotkeyPressed, isReadonlyArray } from '@modules/hotkeys/is-hotkey-pressed'
+import { mapKey } from '@modules/hotkeys/parse-hotkeys'
+
+export function maybePreventDefault(e: KeyboardEvent, hotkey: Hotkey, preventDefault?: Trigger): void {
+  if ((typeof preventDefault === 'function' && preventDefault(e, hotkey)) || preventDefault === true) {
+    e.preventDefault()
+  }
+}
+
+export function isHotkeyEnabled(e: KeyboardEvent, hotkey: Hotkey, enabled?: Trigger): boolean {
+  if (typeof enabled === 'function') {
+    return enabled(e, hotkey)
+  }
+
+  return enabled === true || enabled === undefined
+}
+
+export function isKeyboardEventTriggeredByInput(ev: KeyboardEvent): boolean {
+  return isHotkeyEnabledOnTag(ev, ['input', 'textarea', 'select'])
+}
+
+export function isHotkeyEnabledOnTag(
+  event: KeyboardEvent,
+  enabledOnTags: readonly FormTags[] | boolean = false
+): boolean {
+  const {target, composed} = event;
+
+  let targetTagName: string | null = null
+
+  if (isCustomElement(target as HTMLElement) && composed) {
+    targetTagName = event.composedPath()[0] && (event.composedPath()[0] as HTMLElement).tagName;
+  } else {
+    targetTagName = target && (target as HTMLElement).tagName;
+  }
+
+  if (isReadonlyArray(enabledOnTags)) {
+    return Boolean(
+      targetTagName && enabledOnTags && enabledOnTags.some((tag) => tag.toLowerCase() === targetTagName?.toLowerCase())
+    )
+  }
+
+  return Boolean(targetTagName && enabledOnTags && enabledOnTags)
+}
+
+export function isCustomElement(element: HTMLElement): boolean {
+  // We just do a basic check w/o any complex RegEx or validation against the list of legacy names containing a hyphen,
+  // as none of them is likely to be an event target, and it won't hurt anyway if we miss.
+  // see: https://html.spec.whatwg.org/multipage/custom-elements.html#prod-potentialcustomelementname
+  return !!element.tagName && !element.tagName.startsWith("-") && element.tagName.includes("-");
+}
+
+export function isScopeActive(activeScopes: string[], scopes?: Scopes): boolean {
+  if (activeScopes.length === 0 && scopes) {
+    console.warn(
+      'A hotkey has the "scopes" option set, however no active scopes were found. If you want to use the global scopes feature, you need to wrap your app in a <HotkeysProvider>'
+    )
+
+    return true
+  }
+
+  if (!scopes) {
+    return true
+  }
+
+  return activeScopes.some((scope) => scopes.includes(scope)) || activeScopes.includes('*')
+}
+
+export const isHotkeyMatchingKeyboardEvent = (e: KeyboardEvent, hotkey: Hotkey, ignoreModifiers = false): boolean => {
+  const { alt, meta, mod, shift, ctrl, keys } = hotkey
+  const { key: pressedKeyUppercase, code, ctrlKey, metaKey, shiftKey, altKey } = e
+
+  const keyCode = mapKey(code)
+  const pressedKey = pressedKeyUppercase.toLowerCase()
+
+  if (
+    !keys?.includes(keyCode) &&
+    !keys?.includes(pressedKey) &&
+    !['ctrl', 'control', 'unknown', 'meta', 'alt', 'shift', 'os'].includes(keyCode)
+  ) {
+    return false
+  }
+
+  if (!ignoreModifiers) {
+    // We check the pressed keys for compatibility with the keyup event. In keyup events the modifier flags are not set.
+    if (alt === !altKey && pressedKey !== 'alt') {
+      return false
+    }
+
+    if (shift === !shiftKey && pressedKey !== 'shift') {
+      return false
+    }
+
+    // Mod is a special key name that is checking for meta on macOS and ctrl on other platforms
+    if (mod) {
+      if (!metaKey && !ctrlKey) {
+        return false
+      }
+    } else {
+      if (meta === !metaKey && pressedKey !== 'meta' && pressedKey !== 'os') {
+        return false
+      }
+
+      if (ctrl === !ctrlKey && pressedKey !== 'ctrl' && pressedKey !== 'control') {
+        return false
+      }
+    }
+  }
+
+  // All modifiers are correct, now check the key
+  // If the key is set, we check for the key
+  if (keys && keys.length === 1 && (keys.includes(pressedKey) || keys.includes(keyCode))) {
+    return true
+  } else if (keys) {
+    // Check if all keys are present in pressedDownKeys set
+    return isHotkeyPressed(keys)
+  } else if (!keys) {
+    // If the key is not set, we only listen for modifiers, that check went alright, so we return true
+    return true
+  }
+
+  // There is nothing that matches.
+  return false
+}
+
+================
+File: reference/modules/cors.ts
+================
+// @ts-nocheck
+
+'use strict';
+
+import assign from '@modules/object-assign';
+import vary from '@modules/vary';
+
+var defaults = {
+  origin: '*',
+  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
+  preflightContinue: false,
+  optionsSuccessStatus: 204,
+};
+
+function isString(s) {
+  return typeof s === 'string' || s instanceof String;
+}
+
+function isOriginAllowed(origin, allowedOrigin) {
+  if (Array.isArray(allowedOrigin)) {
+    for (var i = 0; i < allowedOrigin.length; ++i) {
+      if (isOriginAllowed(origin, allowedOrigin[i])) {
+        return true;
+      }
+    }
+    return false;
+  } else if (isString(allowedOrigin)) {
+    return origin === allowedOrigin;
+  } else if (allowedOrigin instanceof RegExp) {
+    return allowedOrigin.test(origin);
+  } else {
+    return !!allowedOrigin;
+  }
+}
+
+function configureOrigin(options, req) {
+  var requestOrigin = req.headers.origin,
+    headers = [],
+    isAllowed;
+
+  if (!options.origin || options.origin === '*') {
+    // allow any origin
+    headers.push([
+      {
+        key: 'Access-Control-Allow-Origin',
+        value: '*',
+      },
+    ]);
+  } else if (isString(options.origin)) {
+    // fixed origin
+    headers.push([
+      {
+        key: 'Access-Control-Allow-Origin',
+        value: options.origin,
+      },
+    ]);
+    headers.push([
+      {
+        key: 'Vary',
+        value: 'Origin',
+      },
+    ]);
+  } else {
+    isAllowed = isOriginAllowed(requestOrigin, options.origin);
+    // reflect origin
+    headers.push([
+      {
+        key: 'Access-Control-Allow-Origin',
+        value: isAllowed ? requestOrigin : false,
+      },
+    ]);
+    headers.push([
+      {
+        key: 'Vary',
+        value: 'Origin',
+      },
+    ]);
+  }
+
+  return headers;
+}
+
+function configureMethods(options) {
+  var methods = options.methods;
+  if (methods.join) {
+    methods = options.methods.join(','); // .methods is an array, so turn it into a string
+  }
+  return {
+    key: 'Access-Control-Allow-Methods',
+    value: methods,
+  };
+}
+
+function configureCredentials(options) {
+  if (options.credentials === true) {
+    return {
+      key: 'Access-Control-Allow-Credentials',
+      value: 'true',
+    };
+  }
+  return null;
+}
+
+function configureAllowedHeaders(options, req) {
+  var allowedHeaders = options.allowedHeaders || options.headers;
+  var headers = [];
+
+  if (!allowedHeaders) {
+    allowedHeaders = req.headers['access-control-request-headers']; // .headers wasn't specified, so reflect the request headers
+    headers.push([
+      {
+        key: 'Vary',
+        value: 'Access-Control-Request-Headers',
+      },
+    ]);
+  } else if (allowedHeaders.join) {
+    allowedHeaders = allowedHeaders.join(','); // .headers is an array, so turn it into a string
+  }
+  if (allowedHeaders && allowedHeaders.length) {
+    headers.push([
+      {
+        key: 'Access-Control-Allow-Headers',
+        value: allowedHeaders,
+      },
+    ]);
+  }
+
+  return headers;
+}
+
+function configureExposedHeaders(options) {
+  var headers = options.exposedHeaders;
+  if (!headers) {
+    return null;
+  } else if (headers.join) {
+    headers = headers.join(','); // .headers is an array, so turn it into a string
+  }
+  if (headers && headers.length) {
+    return {
+      key: 'Access-Control-Expose-Headers',
+      value: headers,
+    };
+  }
+  return null;
+}
+
+function configureMaxAge(options) {
+  var maxAge = (typeof options.maxAge === 'number' || options.maxAge) && options.maxAge.toString();
+  if (maxAge && maxAge.length) {
+    return {
+      key: 'Access-Control-Max-Age',
+      value: maxAge,
+    };
+  }
+  return null;
+}
+
+function applyHeaders(headers, res) {
+  for (var i = 0, n = headers.length; i < n; i++) {
+    var header = headers[i];
+    if (header) {
+      if (Array.isArray(header)) {
+        applyHeaders(header, res);
+      } else if (header.key === 'Vary' && header.value) {
+        vary(res, header.value);
+      } else if (header.value) {
+        res.setHeader(header.key, header.value);
+      }
+    }
+  }
+}
+
+function cors(options, req, res, next) {
+  var headers = [],
+    method = req.method && req.method.toUpperCase && req.method.toUpperCase();
+
+  if (method === 'OPTIONS') {
+    // preflight
+    headers.push(configureOrigin(options, req));
+    headers.push(configureCredentials(options));
+    headers.push(configureMethods(options));
+    headers.push(configureAllowedHeaders(options, req));
+    headers.push(configureMaxAge(options));
+    headers.push(configureExposedHeaders(options));
+    applyHeaders(headers, res);
+
+    if (options.preflightContinue) {
+      next();
+    } else {
+      // Safari (and potentially other browsers) need content-length 0,
+      //   for 204 or they just hang waiting for a body
+      res.statusCode = options.optionsSuccessStatus;
+      res.setHeader('Content-Length', '0');
+      res.end();
+    }
+  } else {
+    // actual response
+    headers.push(configureOrigin(options, req));
+    headers.push(configureCredentials(options));
+    headers.push(configureExposedHeaders(options));
+    applyHeaders(headers, res);
+    next();
+  }
+}
+
+function middlewareWrapper(o) {
+  // if options are static (either via defaults or custom options passed in), wrap in a function
+  var optionsCallback = null;
+  if (typeof o === 'function') {
+    optionsCallback = o;
+  } else {
+    optionsCallback = function (req, cb) {
+      cb(null, o);
+    };
+  }
+
+  return function corsMiddleware(req, res, next) {
+    optionsCallback(req, function (err, options) {
+      if (err) {
+        next(err);
+      } else {
+        var corsOptions = assign({}, defaults, options);
+        var originCallback = null;
+        if (corsOptions.origin && typeof corsOptions.origin === 'function') {
+          originCallback = corsOptions.origin;
+        } else if (corsOptions.origin) {
+          originCallback = function (origin, cb) {
+            cb(null, corsOptions.origin);
+          };
+        }
+
+        if (originCallback) {
+          originCallback(req.headers.origin, function (err2, origin) {
+            if (err2 || !origin) {
+              next(err2);
+            } else {
+              corsOptions.origin = origin;
+              cors(corsOptions, req, res, next);
+            }
+          });
+        } else {
+          next();
+        }
+      }
+    });
+  };
+}
+
+export default middlewareWrapper;
+
+================
+File: reference/modules/object-assign.ts
+================
+// @ts-nocheck
+
+/*
+object-assign
+(c) Sindre Sorhus
+@license MIT
+*/
+
+'use strict';
+
+/* eslint-disable no-unused-vars */
+var getOwnPropertySymbols = Object.getOwnPropertySymbols;
+var hasOwnProperty = Object.prototype.hasOwnProperty;
+var propIsEnumerable = Object.prototype.propertyIsEnumerable;
+
+function toObject(val) {
+  if (val === null || val === undefined) {
+    throw new TypeError('Object.assign cannot be called with null or undefined');
+  }
+
+  return Object(val);
+}
+
+function shouldUseNative() {
+  try {
+    if (!Object.assign) {
+      return false;
+    }
+
+    // Detect buggy property enumeration order in older V8 versions.
+
+    // https://bugs.chromium.org/p/v8/issues/detail?id=4118
+    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
+    // @ts-ignore
+    test1[5] = 'de';
+    if (Object.getOwnPropertyNames(test1)[0] === '5') {
+      return false;
+    }
+
+    // https://bugs.chromium.org/p/v8/issues/detail?id=3056
+    var test2 = {};
+    for (var i = 0; i < 10; i++) {
+      test2['_' + String.fromCharCode(i)] = i;
+    }
+    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
+      return test2[n];
+    });
+    if (order2.join('') !== '0123456789') {
+      return false;
+    }
+
+    // https://bugs.chromium.org/p/v8/issues/detail?id=3056
+    var test3 = {};
+    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
+      test3[letter] = letter;
+    });
+    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
+      return false;
+    }
+
+    return true;
+  } catch (err) {
+    // We don't expect any of the above to throw, but better to be safe.
+    return false;
+  }
+}
+
+const assign = shouldUseNative()
+  ? Object.assign
+  : function (target, source) {
+      var from;
+      var to = toObject(target);
+      var symbols;
+
+      for (var s = 1; s < arguments.length; s++) {
+        from = Object(arguments[s]);
+
+        for (var key in from) {
+          if (hasOwnProperty.call(from, key)) {
+            to[key] = from[key];
+          }
+        }
+
+        if (getOwnPropertySymbols) {
+          symbols = getOwnPropertySymbols(from);
+          for (var i = 0; i < symbols.length; i++) {
+            if (propIsEnumerable.call(from, symbols[i])) {
+              to[symbols[i]] = from[symbols[i]];
+            }
+          }
+        }
+      }
+
+      return to;
+    };
+
+export default assign;
+
+================
+File: reference/modules/vary.ts
+================
+// @ts-nocheck
+
+/*!
+ * vary
+ * Copyright(c) 2014-2017 Douglas Christopher Wilson
+ * MIT Licensed
+ */
+
+'use strict';
+
+/**
+ * RegExp to match field-name in RFC 7230 sec 3.2
+ *
+ * field-name    = token
+ * token         = 1*tchar
+ * tchar         = "!" / "#" / "$" / "%" / "&" / "'" / "*"
+ *               / "+" / "-" / "." / "^" / "_" / "`" / "|" / "~"
+ *               / DIGIT / ALPHA
+ *               ; any VCHAR, except delimiters
+ */
+
+var FIELD_NAME_REGEXP = /^[!#$%&'*+\-.^_`|~0-9A-Za-z]+$/;
+
+/**
+ * Append a field to a vary header.
+ *
+ * @param {String} header
+ * @param {String|Array} field
+ * @return {String}
+ * @public
+ */
+
+function append(header, field) {
+  if (typeof header !== 'string') {
+    throw new TypeError('header argument is required');
+  }
+
+  if (!field) {
+    throw new TypeError('field argument is required');
+  }
+
+  // get fields array
+  var fields = !Array.isArray(field) ? parse(String(field)) : field;
+
+  // assert on invalid field names
+  for (var j = 0; j < fields.length; j++) {
+    if (!FIELD_NAME_REGEXP.test(fields[j])) {
+      throw new TypeError('field argument contains an invalid header name');
+    }
+  }
+
+  // existing, unspecified vary
+  if (header === '*') {
+    return header;
+  }
+
+  // enumerate current values
+  var val = header;
+  var vals = parse(header.toLowerCase());
+
+  // unspecified vary
+  if (fields.indexOf('*') !== -1 || vals.indexOf('*') !== -1) {
+    return '*';
+  }
+
+  for (var i = 0; i < fields.length; i++) {
+    var fld = fields[i].toLowerCase();
+
+    // append value (case-preserving)
+    if (vals.indexOf(fld) === -1) {
+      vals.push(fld);
+      val = val ? val + ', ' + fields[i] : fields[i];
+    }
+  }
+
+  return val;
+}
+
+/**
+ * Parse a vary header into an array.
+ *
+ * @param {String} header
+ * @return {Array}
+ * @private
+ */
+
+function parse(header) {
+  var end = 0;
+  var list = [];
+  var start = 0;
+
+  // gather tokens
+  for (var i = 0, len = header.length; i < len; i++) {
+    switch (header.charCodeAt(i)) {
+      case 0x20 /*   */:
+        if (start === end) {
+          start = end = i + 1;
+        }
+        break;
+      case 0x2c /* , */:
+        list.push(header.substring(start, end));
+        start = end = i + 1;
+        break;
+      default:
+        end = i + 1;
+        break;
+    }
+  }
+
+  // final token
+  list.push(header.substring(start, end));
+
+  return list;
+}
+
+/**
+ * Mark that a request is varied on a header field.
+ *
+ * @param {Object} res
+ * @param {String|Array} field
+ * @public
+ */
+
+function vary(res, field) {
+  if (!res || !res.getHeader || !res.setHeader) {
+    // quack quack
+    throw new TypeError('res argument is required');
+  }
+
+  // get existing header
+  var val = res.getHeader('Vary') || '';
+  var header = Array.isArray(val) ? val.join(', ') : String(val);
+
+  // set new header
+  if ((val = append(header, field))) {
+    res.setHeader('Vary', val);
+  }
+}
+
+export default vary;
+
+================
+File: reference/pages/api/index.ts
+================
+import * as Server from '@common/server';
+import * as Constants from '@common/constants';
+
+export default async function apiIndex(req, res) {
+  await Server.cors(req, res);
+
+  res.json({
+    success: true,
+    message: 'hey there, friend.',
+  });
+}
+
+================
+File: reference/pages/_app.tsx
+================
+import '@root/global.scss';
+
+import * as React from 'react';
+
+import Providers from '@components/Providers';
+
+function MyApp({ Component, pageProps }) {
+  return (
+    <Providers>
+      <Component {...pageProps} />
+    </Providers>
+  );
+}
+
+export default MyApp;
+
+================
+File: reference/pages/_document.tsx
+================
+import Document, { Html, Head, Main, NextScript } from 'next/document';
+
+export default class MyDocument extends Document {
+  render() {
+    return (
+      <Html>
+        <Head />
+        <body className="theme-light">
+          <Main />
+          <NextScript />
+        </body>
+      </Html>
+    );
+  }
+}
+
+================
+File: reference/.gitignore
+================
+.next
+.nova
+.env
+.env.local
+.env-custom-development
+.env-development
+.env-textile
+.env-production
+.DS_STORE
+DS_STORE
+yarn.lock
+node_modules
+dist
+analytics.txt
+package-lock.json
+
+/**/*/.DS_STORE
+/**/*/node_modules
+/**/*/.next
+/**/*/.data
+
+================
+File: reference/.prettierrc
+================
+{
+  "printWidth": 9999,
+  "tabWidth": 2,
+  "useTabs": false,
+  "semi": true,
+  "singleQuote": true,
+  "trailingComma": "es5",
+  "bracketSpacing": true,
+  "jsxBracketSameLine": false,
+  "arrowParens": "always",
+  "requirePragma": false,
+  "insertPragma": false,
+  "proseWrap": "preserve",
+  "parser": "babel-ts",
+  "overrides": [
+    {
+      "files": "*.js",
+      "options": {
+        "parser": "babel"
+      }
+    }
+  ]
+}
+
+================
+File: reference/global.scss
+================
+@font-face {
+  font-family: 'IosevkaTerm-Regular';
+  src: url('https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/6397be61-3ea4-459d-8a3e-fd95168cb214.woff2') format('woff2');
+}
+
+a,
+abbr,
+acronym,
+address,
+applet,
+article,
+aside,
+audio,
+b,
+big,
+blockquote,
+body,
+canvas,
+caption,
+center,
+cite,
+code,
+dd,
+del,
+details,
+dfn,
+div,
+dl,
+dt,
+embed,
+em,
+figure,
+figcaption,
+fieldset,
+footer,
+form,
+h1,
+h2,
+h3,
+h4,
+h5,
+h6,
+header,
+hgroup,
+html,
+i,
+iframe,
+img,
+ins,
+kbd,
+label,
+legend,
+li,
+mark,
+menu,
+nav,
+object,
+ol,
+output,
+p,
+pre,
+q,
+ruby,
+s,
+samp,
+section,
+small,
+span,
+strike,
+strong,
+sub,
+summary,
+sup,
+table,
+tbody,
+td,
+tfoot,
+th,
+thead,
+time,
+tr,
+tt,
+u,
+ul,
+var,
+video {
+  border: 0;
+  box-sizing: border-box;
+  margin: 0;
+  padding: 0;
+  vertical-align: baseline;
+}
+
+a {
+  background: var(--theme-border-subdued);
+  color: var(--theme-text);
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+    color: var(--theme-text);
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    color: var(--theme-text);
+    outline: 0;
+  }
+}
+
+ul {
+  list-style-position: inside;
+  list-style-type: '▪';
+  text-indent: -1ch;
+}
+
+ol {
+  list-style-type: '';
+  list-style-position: inside;
+  counter-reset: cupcake;
+  text-indent: -1ch;
+}
+
+ul ul,
+ul ol,
+ol ul,
+ol ol {
+  padding-left: 2ch;
+}
+
+ol li {
+  padding-left: 1ch;
+  counter-increment: cupcake;
+}
+
+ul li:before {
+  content: ' ';
+  display: inline-block;
+  width: 1ch;
+  height: 0;
+  visibility: hidden;
+}
+
+ol li:before {
+  content: counters(cupcake, '.') '. ';
+}
+
+article,
+aside,
+details,
+figcaption,
+figure,
+footer,
+header,
+hgroup,
+menu,
+nav,
+section {
+  display: block;
+}
+
+body.theme-blue {
+  --theme-overlay: var(--color-blue-20-5);
+  --theme-background: var(--color-blue-80);
+  --theme-background-modal: var(--color-blue-70);
+  --theme-background-modal-footer: var(--color-blue-90);
+  --theme-background-input: var(--color-blue-60);
+  --theme-border: var(--color-blue-70);
+  --theme-border-subdued: var(--color-blue-60-2);
+  --theme-text: var(--color-blue-10);
+  --theme-button: var(--color-blue-10);
+  --theme-button-text: var(--color-blue-80);
+  --theme-button-foreground: var(--color-blue-60);
+  --theme-button-background: var(--color-blue-70);
+  --theme-focused-foreground: var(--color-blue-50);
+  --theme-focused-foreground-subdued: var(--color-blue-50-5);
+}
+
+body.theme-light {
+  --theme-overlay: var(--color-black-100-4);
+  --theme-background: var(--color-white);
+  --theme-background-modal: var(--color-gray-20);
+  --theme-background-modal-footer: var(--color-gray-40);
+  --theme-background-input: var(--color-gray-10);
+  --theme-border: var(--color-gray-20);
+  --theme-border-subdued: var(--color-gray-40-2);
+  --theme-text: var(--color-black-100);
+  --theme-button: var(--color-black-100);
+  --theme-button-text: var(--color-white);
+  --theme-button-foreground: var(--color-gray-30);
+  --theme-button-background: var(--color-gray-20);
+  --theme-focused-foreground: var(--color-neon-green-50);
+  --theme-focused-foreground-subdued: var(--color-neon-green-50-5);
+}
+
+body.theme-dark {
+  --theme-overlay: var(--color-black-100-4);
+  --theme-background: var(--color-black-100);
+  --theme-background-modal: var(--color-gray-80);
+  --theme-background-modal-footer: var(--color-gray-70);
+  --theme-background-input: var(--color-gray-60);
+  --theme-border: var(--color-gray-80);
+  --theme-border-subdued: var(--color-gray-70-3);
+  --theme-text: var(--color-white);
+  --theme-button: var(--color-white);
+  --theme-button-text: var(--color-black-100);
+  --theme-button-foreground: var(--color-gray-90);
+  --theme-button-background: var(--color-gray-80);
+  --theme-focused-foreground: var(--color-daybreak-10);
+  --theme-focused-foreground-subdued: var(--color-daybreak-10-5);
+}
+
+body.theme-green {
+  --theme-overlay: var(--color-neon-green-100-4);
+  --theme-background: rgba(44, 255, 5);
+  --theme-background-modal: var(--color-neon-green-50);
+  --theme-background-modal-footer: var(--color-neon-green-50-5);
+  --theme-background-input: var(--color-neon-green-30);
+  --theme-border: var(--color-neon-green-60);
+  --theme-border-subdued: var(--color-neon-green-60-3);
+  --theme-text: var(--color-neon-green-100);
+  --theme-button: var(--color-neon-green-100);
+  --theme-button-text: var(--color-neon-green-10);
+  --theme-button-foreground: var(--color-neon-green-80);
+  --theme-button-background: var(--color-neon-green-70);
+  --theme-focused-foreground: rgba(255, 82, 243, 1);
+  --theme-focused-foreground-subdued: rgba(255, 82, 243, 0.5);
+}
+
+body.theme-black-red {
+  --theme-overlay: var(--color-red-100-4);
+  --theme-background: var(--color-black-100);
+  --theme-background-modal: var(--color-red-70);
+  --theme-background-modal-footer: var(--color-red-80);
+  --theme-background-input: var(--color-red-60);
+  --theme-border: var(--color-red-60-7);
+  --theme-border-subdued: var(--color-red-60-3);
+  --theme-text: var(--color-red-30);
+  --theme-button: var(--color-red-100);
+  --theme-button-text: var(--color-red-20);
+  --theme-button-foreground: var(--color-red-80);
+  --theme-button-background: var(--color-red-90);
+  --theme-focused-foreground: var(--color-gray-70);
+  --theme-focused-foreground-subdued: var(--color-red-70-4);
+}
+
+body.theme-black-teal {
+  --theme-overlay: var(--color-teal-100-4);
+  --theme-background: var(--color-black-100);
+  --theme-background-modal: var(--color-teal-70);
+  --theme-background-modal-footer: var(--color-teal-80);
+  --theme-background-input: var(--color-teal-60);
+  --theme-border: var(--color-teal-60-7);
+  --theme-border-subdued: var(--color-teal-60-3);
+  --theme-text: var(--color-teal-30);
+  --theme-button: var(--color-teal-100);
+  --theme-button-text: var(--color-teal-20);
+  --theme-button-foreground: var(--color-teal-80);
+  --theme-button-background: var(--color-teal-90);
+  --theme-focused-foreground: var(--color-gray-70);
+  --theme-focused-foreground-subdued: var(--color-teal-70-4);
+}
+
+body.theme-black-green {
+  --theme-overlay: var(--color-black-100-4);
+  --theme-background: var(--color-black-100);
+  --theme-background-modal: var(--color-gray-90);
+  --theme-background-modal-footer: var(--color-gray-80);
+  --theme-background-input: var(--color-gray-70);
+  --theme-border: var(--color-gray-80);
+  --theme-border-subdued: var(--color-gray-70-3);
+  --theme-text: var(--color-green-50);
+  --theme-button: var(--color-green-50);
+  --theme-button-text: var(--color-green-80);
+  --theme-button-foreground: var(--color-green-80);
+  --theme-button-background: var(--color-green-90);
+  --theme-focused-foreground: var(--color-gray-30);
+  --theme-focused-foreground-subdued: var(--color-gray-40);
+}
+
+body.font-use-berkeley-mono {
+  --font-family-mono: 'TX02Mono-Regular', sans-serif;
+}
+
+body.font-use-commit-mono {
+  --font-family-mono: 'CommitMono-Regular', sans-serif;
+}
+
+body.font-use-departure-mono {
+  --font-family-mono: 'DepartureMono-Regular', sans-serif;
+}
+
+body.font-use-fira-code {
+  --font-family-mono: 'FiraCode-Regular', sans-serif;
+}
+
+body.font-use-fragment-mono {
+  --font-family-mono: 'FragmentMono-Regular', sans-serif;
+}
+
+body.font-use-iosevka-term {
+  --font-family-mono: 'IosevkaTerm-Regular', sans-serif;
+}
+
+body.font-use-jet-brains-mono {
+  --font-family-mono: 'JetBrainsMono-Regular', sans-serif;
+}
+
+body.font-use-server-mono {
+  --font-family-mono: 'ServerMono-Regular', sans-serif;
+}
+
+body.font-use-sfmono-square {
+  --font-family-mono: 'SFMonoSquare-Regular', sans-serif;
+}
+
+#__next {
+}
+
+html,
+body {
+  --color-black-100: rgba(0, 0, 0, 1);
+  --color-black-100-1: rgba(0, 0, 0, 0.1);
+  --color-black-100-2: rgba(0, 0, 0, 0.2);
+  --color-black-100-4: rgba(0, 0, 0, 0.4);
+  --color-black-daybreak-100: rgba(4, 2, 0, 1);
+  --color-black-daybreak-100-4: rgba(4, 2, 0, 0.4);
+
+  --color-blue-10: rgba(237, 245, 255, 1);
+  --color-blue-100: rgba(0, 17, 65, 1);
+  --color-blue-20: rgba(208, 226, 255, 1);
+  --color-blue-20-1: rgba(208, 226, 255, 0.1);
+  --color-blue-20-2: rgba(208, 226, 255, 0.2);
+  --color-blue-20-5: rgba(208, 226, 255, 0.5);
+  --color-blue-30: rgba(166, 200, 255, 1);
+  --color-blue-40: rgba(120, 169, 255, 1);
+  --color-blue-50: rgba(69, 137, 255, 1);
+  --color-blue-50-5: rgba(69, 137, 255, 0.5);
+  --color-blue-60: rgba(15, 98, 254, 1);
+  --color-blue-60-2: rgba(15, 98, 254, 0.2);
+  --color-blue-70: rgba(0, 67, 206, 1);
+  --color-blue-80: rgba(0, 45, 156, 1);
+  --color-blue-80-4: rgba(0, 45, 156, 0.4);
+  --color-blue-80-6: rgba(0, 45, 156, 0.6);
+  --color-blue-90: rgba(0, 29, 108, 1);
+  --color-blue-90-6: rgba(0, 29, 108, 0.6);
+
+  --color-daybreak: rgba(255, 108, 4, 1);
+  --color-daybreak-1: rgba(255, 108, 4, 0.1);
+  --color-daybreak-10: rgba(239, 99, 0, 1);
+  --color-daybreak-10-5: rgba(239, 99, 0, 0.5);
+  --color-daybreak-2: rgba(255, 108, 4, 0.2);
+  --color-daybreak-20: rgba(220, 91, 0, 1);
+  --color-daybreak-30: rgba(200, 83, 0, 1);
+  --color-daybreak-4: rgba(255, 108, 4, 0.4);
+  --color-daybreak-40: rgba(180, 75, 0, 1);
+  --color-daybreak-40-2: rgba(180, 75, 0, 0.2);
+  --color-daybreak-50: rgba(161, 67, 0, 1);
+  --color-daybreak-60: rgba(141, 59, 0, 1);
+  --color-daybreak-70: rgba(121, 50, 0, 1);
+  --color-daybreak-70-3: rgba(121, 50, 0, 0.3);
+  --color-daybreak-80: rgba(102, 42, 0, 1);
+  --color-daybreak-90: rgba(82, 34, 0, 1);
+
+  --color-gold-30: rgba(241, 194, 27, 1);
+
+  --color-gray-10: rgba(244, 244, 244, 1);
+  --color-gray-100: rgba(22, 22, 22, 1);
+  --color-gray-20: rgba(224, 224, 224, 1);
+  --color-gray-20-7: rgba(224, 224, 224, 0.7);
+  --color-gray-30: rgba(198, 198, 198, 1);
+  --color-gray-30-7: rgba(224, 224, 224, 0.7);
+  --color-gray-40: rgba(168, 168, 168, 1);
+  --color-gray-40-2: rgba(168, 168, 168, 0.2);
+  --color-gray-50: rgba(141, 141, 141, 1);
+  --color-gray-60: rgba(111, 111, 111, 1);
+  --color-gray-70: rgba(82, 82, 82, 1);
+  --color-gray-70-3: rgba(82, 82, 82, 0.3);
+  --color-gray-70-4: rgba(82, 82, 82, 0.4);
+  --color-gray-80: rgba(57, 57, 57, 1);
+  --color-gray-80-6: rgba(57, 57, 57, 0.6);
+  --color-gray-90: rgba(38, 38, 38, 1);
+  --color-gray-90-6: rgba(38, 38, 38, 0.6);
+
+  --color-green-100: rgba(7, 25, 8, 1);
+  --color-green-100: rgba(7, 25, 8, 1);
+  --color-green-90: rgba(2, 45, 13, 1);
+  --color-green-80: rgba(4, 67, 23, 1);
+  --color-green-70: rgba(14, 96, 39, 1);
+  --color-green-60: rgba(25, 128, 56, 1);
+  --color-green-60-3: rgba(25, 128, 56, 0.3);
+  --color-green-50: rgba(36, 161, 72, 1);
+  --color-green-40: rgba(66, 190, 101, 1);
+  --color-green-30: rgba(111, 220, 140, 1);
+  --color-green-20: rgba(167, 240, 186, 1);
+  --color-green-10: rgba(222, 251, 230, 1);
+
+  --color-neon-green-10: rgba(242, 255, 233, 1);
+  --color-neon-green-100: rgba(10, 44, 2, 1);
+  --color-neon-green-100-1: rgba(10, 44, 2, 0.1);
+  --color-neon-green-100-2: rgba(10, 44, 2, 0.2);
+  --color-neon-green-100-4: rgba(10, 44, 2, 0.4);
+  --color-neon-green-20: rgba(213, 255, 191, 1);
+  --color-neon-green-30: rgba(178, 255, 148, 1);
+  --color-neon-green-40: rgba(138, 255, 104, 1);
+  --color-neon-green-50: rgba(92, 255, 59, 1);
+  --color-neon-green-50-5: rgba(92, 255, 59, 0.5);
+  --color-neon-green-60: rgba(46, 231, 29, 1);
+  --color-neon-green-60-3: rgba(46, 231, 29, 0.3);
+  --color-neon-green-70: rgba(0, 207, 0, 1);
+  --color-neon-green-70-3: rgba(0, 207, 0, 0.3);
+  --color-neon-green-70-7: rgba(0, 207, 0, 0.7);
+  --color-neon-green-80: rgba(0, 159, 0, 1);
+  --color-neon-green-80-1: rgba(0, 159, 0, 0.1);
+  --color-neon-green-80-2: rgba(0, 159, 0, 0.2);
+  --color-neon-green-80-4: rgba(0, 159, 0, 0.4);
+  --color-neon-green-90: rgba(16, 107, 2, 1);
+
+  --color-red-100: rgba(45, 7, 9, 1);
+  --color-red-100-4: rgba(45, 7, 9, 0.4);
+  --color-red-90: rgba(82, 4, 8, 1);
+  --color-red-80: rgba(117, 14, 19, 1);
+  --color-red-70: rgba(162, 25, 31, 1);
+  --color-red-60: rgba(218, 30, 40, 1);
+  --color-red-60-7: rgba(218, 30, 40, 0.7);
+  --color-red-60-3: rgba(218, 30, 40, 0.3);
+  --color-red-50: rgba(250, 77, 86, 1);
+  --color-red-40: rgba(255, 131, 137, 1);
+  --color-red-30: rgba(255, 179, 184, 1);
+  --color-red-20: rgba(255, 215, 217, 1);
+  --color-red-10: rgba(255, 241, 241, 1);
+
+  --color-teal-100: rgba(8, 26, 28, 1);
+  --color-teal-100-4: rgba(8, 26, 28, 0.4);
+  --color-teal-90: rgba(2, 43, 48, 1);
+  --color-teal-80: rgba(0, 65, 68, 1);
+  --color-teal-70: rgba(0, 93, 93, 1);
+  --color-teal-70-4: rgba(0, 93, 93, 0.4);
+  --color-teal-70-3: rgba(0, 93, 93, 0.3);
+  --color-teal-60: rgba(0, 125, 121, 1);
+  --color-teal-60-7: rgba(0, 125, 121, 0.7);
+  --color-teal-60-3: rgba(0, 125, 121, 0.3);
+  --color-teal-50: rgba(0, 157, 154, 1);
+  --color-teal-40: rgba(8, 189, 186, 1);
+  --color-teal-30: rgba(61, 219, 217, 1);
+  --color-teal-20: rgba(158, 240, 240, 1);
+  --color-teal-10: rgba(217, 251, 251, 1);
+
+  --color-white: rgba(255, 255, 255, 1);
+  --color-white-1: rgba(255, 255, 255, 0.1);
+  --color-white-2: rgba(255, 255, 255, 0.2);
+  --color-white-4: rgba(255, 255, 255, 0.4);
+
+  --font-family: -apple-system, BlinkMacSystemFont, helvetica neue, helvetica, sans-serif;
+  --font-family-mono: 'IosevkaTerm-Regular', Consolas, monaco, monospace;
+  --font-family-serif: Georgia, Times New Roman, serif;
+
+  --theme-text: var(--color-black-100);
+  --theme-line-height-base: 1.25;
+  --font-size: 20px;
+
+  --z-index-page: 1;
+  --z-index-page-select: 3;
+  --z-index-page-tooltips: 4;
+  --z-index-page-popover: 5;
+  --z-index-page-dropdown-menus: 6;
+  --z-index-page-modals: 10;
+
+  background: var(--theme-background);
+  color: var(--theme-text);
+  font-family: var(--font-family-mono);
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+
+  font-size: var(--font-size);
+  font-optical-sizing: auto;
+  font-weight: 400;
+  font-variant-numeric: tabular-nums lining-nums;
+
+  &::-webkit-scrollbar {
+    background: transparent;
+    height: calc(var(--theme-line-height-base) * 1rem);
+    width: 1ch;
+  }
+
+  &::-webkit-scrollbar-track {
+    background: var(--theme-background);
+  }
+
+  &::-webkit-scrollbar-thumb {
+    background: var(--theme-border);
+  }
+
+  &::-webkit-scrollbar-thumb:hover {
+    background: var(--theme-border);
+  }
+
+  @media (max-width: 568px) {
+    --font-size: 16px;
+  }
+}
+
+================
+File: reference/LICENSE.md
+================
+Copyright (c) 2024 INTERNET DEVELOPMENT STUDIO COMPANY
+
+Permission is hereby granted, free of charge, to any person obtaining
+a copy of this software and associated documentation files (the
+"Software"), to deal in the Software without restriction, including
+without limitation the rights to use, copy, modify, merge, publish,
+distribute, sublicense, and/or sell copies of the Software, and to
+permit persons to whom the Software is furnished to do so, subject to
+the following conditions:
+
+The above copyright notice and this permission notice shall be
+included in all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+
+================
+File: reference/package.json
+================
+{
+  "name": "INTDEV",
+  "description": "A vocation guild and great hall for webmasters. We practice the craft of designing, building, shipping, and maintaining websites, platforms, brands, and applications—end to end.",
+  "engines": {
+    "node": ">=18"
+  },
+  "license": "MIT",
+  "version": "0.0.1",
+  "scripts": {
+    "dev": "next -p 10000",
+    "build": "next build",
+    "start": "PORT=10000 next start",
+    "lint": "next lint"
+  },
+  "dependencies": {
+    "next": "^15.1.3",
+    "react": "^19.0.0",
+    "react-dom": "^19.0.0",
+    "sass": "1.83.0"
+  },
+  "devDependencies": {
+    "@types/node": "^22.10.2",
+    "@types/react": "^19.0.2",
+    "ts-node": "^10.9.2",
+    "typescript": "^5.7.2"
+  }
+}
+
+================
+File: reference/README.md
+================
+# www-internet-v2
+
+TODO
+
+```sh
+npm install
+npm run dev
+```
+
+Go to `http://localhost:10000` in your browser of choice.
+
+### Contact
+
+If you have questions ping me on Twitter, [@wwwjim](https://www.twitter.com/wwwjim). Or you can ping [@internetxstudio](https://x.com/internetxstudio).
+
+================
+File: reference/tsconfig.json
+================
+{
+  "compilerOptions": {
+    "baseUrl": ".",
+    "paths": {
+      "@root/*": [
+        "./*"
+      ],
+      "@system/*": [
+        "./system/*"
+      ],
+      "@demos/*": [
+        "./demos/*"
+      ],
+      "@common/*": [
+        "./common/*"
+      ],
+      "@data/*": [
+        "./data/*"
+      ],
+      "@components/*": [
+        "./components/*"
+      ],
+      "@pages/*": [
+        "./pages/*"
+      ],
+      "@modules/*": [
+        "./modules/*"
+      ]
+    },
+    "target": "es5",
+    "lib": [
+      "dom",
+      "dom.iterable",
+      "esnext"
+    ],
+    "allowJs": true,
+    "skipLibCheck": true,
+    "strict": false,
+    "forceConsistentCasingInFileNames": true,
+    "noEmit": true,
+    "esModuleInterop": true,
+    "module": "esnext",
+    "moduleResolution": "node",
+    "resolveJsonModule": true,
+    "isolatedModules": true,
+    "jsx": "preserve",
+    "incremental": true,
+    "plugins": [
+      {
+        "name": "next"
+      }
+    ],
+    "strictNullChecks": true
+  },
+  "exclude": [
+    "node_modules",
+    "**/*.spec.ts"
+  ],
+  "include": [
+    "next-env.d.ts",
+    "**/*.ts",
+    "**/*.tsx",
+    ".next/types/**/*.ts"
+  ]
+}
+
+================
+File: src/app/globals.css
+================
+@tailwind base;
+@tailwind components;
+@tailwind utilities;
+
+:root {
+  --background: #ffffff;
+  --foreground: #171717;
+}
+
+@media (prefers-color-scheme: dark) {
+  :root {
+    --background: #0a0a0a;
+    --foreground: #ededed;
+  }
+}
+
+body {
+  color: var(--foreground);
+  background: var(--background);
+}
+
+================
+File: src/app/layout.tsx
+================
+import './globals.css';
+// Update this import to point to your actual Providers component location
+import Providers from '../components/Providers'; 
+
+export default function layout({
+  children,
+}: Readonly<{
+  children: React.ReactNode;
+}>) {
+  return (
+    <html lang="en">
+      <body className="theme-light">
+        <Providers>
+          {children}
+        </Providers>
+      </body>
+    </html>
+  );
+}
+
+================
+File: src/app/page.tsx
+================
+// Update these imports to point to your actual component and stylesheet locations
+import DefaultLayout from '../components/page/DefaultLayout'; 
+import styles from '../components/page/root.module.scss';
+import AsciiText from '../components/examples/AsciiText';
+
+export default function Home() {
+  return (
+    <DefaultLayout previewPixelSRC="https://intdev-global.s3.us-west-2.amazonaws.com/template-app-icon.png">
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <AsciiText text="🛹" />
+        </div>
+      </div>
+    </DefaultLayout>
+  );
+}
+
+================
+File: .gitignore
+================
+# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
+
+# dependencies
+/node_modules
+/.pnp
+.pnp.*
+.yarn/*
+!.yarn/patches
+!.yarn/plugins
+!.yarn/releases
+!.yarn/versions
+
+# testing
+/coverage
+
+# next.js
+/.next/
+/out/
+
+# production
+/build
+
+# misc
+.DS_Store
+*.pem
+
+# debug
+npm-debug.log*
+yarn-debug.log*
+yarn-error.log*
+.pnpm-debug.log*
+
+# env files (can opt-in for committing if needed)
+.env*
+
+# vercel
+.vercel
+
+# typescript
+*.tsbuildinfo
+next-env.d.ts
+.aider*
+
+================
+File: eslint.config.mjs
+================
+import { dirname } from "path";
+import { fileURLToPath } from "url";
+import { FlatCompat } from "@eslint/eslintrc";
+
+const __filename = fileURLToPath(import.meta.url);
+const __dirname = dirname(__filename);
+
+const compat = new FlatCompat({
+  baseDirectory: __dirname,
+});
+
+const eslintConfig = [
+  ...compat.extends("next/core-web-vitals", "next/typescript"),
+];
+
+export default eslintConfig;
+
+================
+File: next.config.ts
+================
+import type { NextConfig } from "next";
+
+const nextConfig: NextConfig = {
+  /* config options here */
+};
+
+export default nextConfig;
+
+================
+File: package.json
+================
+{
+  "name": "adam-web",
+  "version": "0.1.0",
+  "private": true,
+  "description": "Website for Adam Delaney", // Update description
+  "scripts": {
+    "dev": "next dev", // Removed --turbopack
+    "build": "next build",
+    "start": "next start",
+    "lint": "next lint"
+  },
+  "dependencies": {
+    "next": "15.1.6",
+    "react": "^19.0.0",
+    "react-dom": "^19.0.0",
+    "sass": "^1.84.0"
+    // Add any missing dependencies from reference/package.json here
+  },
+  "devDependencies": {
+    "@eslint/eslintrc": "^3",
+    "@types/node": "^20",
+    "@types/react": "^19",
+    "@types/react-dom": "^19",
+    "eslint": "^9",
+    "eslint-config-next": "15.1.6",
+    "postcss": "^8",
+    "tailwindcss": "^3.4.1",
+    "typescript": "^5"
+  }
+}
+
+================
+File: postcss.config.mjs
+================
+/** @type {import('postcss-load-config').Config} */
+const config = {
+  plugins: {
+    tailwindcss: {},
+  },
+};
+
+export default config;
+
+================
+File: README.md
+================
+This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).
+
+## Getting Started
+
+First, run the development server:
+
+```bash
+npm run dev
+# or
+yarn dev
+# or
+pnpm dev
+# or
+bun dev
+```
+
+Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.
+
+You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.
+
+This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.
+
+## Learn More
+
+To learn more about Next.js, take a look at the following resources:
+
+- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
+- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.
+
+You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!
+
+## Deploy on Vercel
+
+The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.
+
+Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
+
+================
+File: tailwind.config.ts
+================
+import type { Config } from "tailwindcss";
+
+export default {
+  content: [
+    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
+    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
+    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
+  ],
+  theme: {
+    extend: {
+      colors: {
+        background: "var(--background)",
+        foreground: "var(--foreground)",
+      },
+    },
+  },
+  plugins: [],
+} satisfies Config;
+
+================
+File: tsconfig.json
+================
+{
+  "compilerOptions": {
+    "target": "ES2017",
+    "lib": ["dom", "dom.iterable", "esnext"],
+    "allowJs": true,
+    "skipLibCheck": true,
+    "strict": true,
+    "noEmit": true,
+    "esModuleInterop": true,
+    "module": "esnext",
+    "moduleResolution": "bundler",
+    "resolveJsonModule": true,
+    "isolatedModules": true,
+    "jsx": "preserve",
+    "incremental": true,
+    "plugins": [
+      {
+        "name": "next"
+      }
+    ],
+    "paths": {
+      "@/*": ["./src/*"]
+    }
+  },
+  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
+  "exclude": ["node_modules"]
+}
+// we need to build out adam-web - we need a simple, fully PWA, 3 page web app: home, bio, projects. https://www.reactbits.dev/text-animations/ascii-text
+
+with a nice emoji ascii skateboard hero, and a nice floating header like raycast with 'adam delaney' in the left, and in the right some nav buttons to go to bio, projects pages . react19/next15/scss and tailwind? or maybe just scss, lets do that . i want the pages to look very similar to the reference site, all components and styling and page layouts need to be the same, but the content is for adam's personal site. https://www.linkedin.com/in/adam-delaney

# 2025-02-07 23:49:11.581447
+s

# 2025-02-07 23:50:04.843785
+we need to build out adam-web - we need a simple, fully PWA, 3 page web app: home, bio, projects. https://www.reactbits.
+dev/text-animations/ascii-text 
+ 
+with a nice emoji ascii skateboard hero, and a nice floating header like raycast with 'adam delaney' in the left, and in th
+e right some nav buttons to go to bio, projects pages . react19/next15/scss and tailwind? or maybe just scss, lets do that 
+. i want the pages to look very similar to the reference site, all components and styling and page layouts need to be the s
+ame, but the content is for adam's personal site. https://www.linkedin.com/in/adam-delaney // current repo map, with reference webapp in ./reference : This file is a merged representation of the entire codebase, combining all repository files into a single document.
+Generated by Repomix on: 2025-02-08T07:50:02.440Z
+
+================================================================
+File Summary
+================================================================
+
+Purpose:
+--------
+This file contains a packed representation of the entire repository's contents.
+It is designed to be easily consumable by AI systems for analysis, code review,
+or other automated processes.
+
+File Format:
+------------
+The content is organized as follows:
+1. This summary section
+2. Repository information
+3. Directory structure
+4. Multiple file entries, each consisting of:
+  a. A separator line (================)
+  b. The file path (File: path/to/file)
+  c. Another separator line
+  d. The full contents of the file
+  e. A blank line
+
+Usage Guidelines:
+-----------------
+- This file should be treated as read-only. Any changes should be made to the
+  original repository files, not this packed version.
+- When processing this file, use the file path to distinguish
+  between different files in the repository.
+- Be aware that this file may contain sensitive information. Handle it with
+  the same level of security as you would the original repository.
+
+Notes:
+------
+- Some files may have been excluded based on .gitignore rules and Repomix's
+  configuration.
+- Binary files are not included in this packed representation. Please refer to
+  the Repository Structure section for a complete list of file paths, including
+  binary files.
+
+Additional Info:
+----------------
+
+================================================================
+Directory Structure
+================================================================
+public/
+  file.svg
+  globe.svg
+  next.svg
+  vercel.svg
+  window.svg
+reference/
+  .git/
+    hooks/
+      applypatch-msg.sample
+      commit-msg.sample
+      fsmonitor-watchman.sample
+      post-update.sample
+      pre-applypatch.sample
+      pre-commit.sample
+      pre-merge-commit.sample
+      pre-push.sample
+      pre-rebase.sample
+      pre-receive.sample
+      prepare-commit-msg.sample
+      push-to-checkout.sample
+      update.sample
+    info/
+      exclude
+    logs/
+      refs/
+        heads/
+          main
+        remotes/
+          origin/
+            HEAD
+      HEAD
+    refs/
+      heads/
+        main
+      remotes/
+        origin/
+          HEAD
+    config
+    description
+    FETCH_HEAD
+    HEAD
+    packed-refs
+  app/
+    office/
+      head.tsx
+      layout.tsx
+      page.tsx
+    head.tsx
+    layout.tsx
+    manifest.ts
+    page.tsx
+    robots.ts
+    sitemap.ts
+  common/
+    constants.ts
+    hooks.ts
+    position.ts
+    queries.ts
+    server.ts
+    utilities.ts
+  components/
+    detectors/
+      OutsideElementEvent.tsx
+    examples/
+      AS400.module.scss
+      AS400.tsx
+      DashboardRadar.module.scss
+      DashboardRadar.tsx
+      Denabase.module.scss
+      Denabase.tsx
+      MessagesInterface.tsx
+      UpdatingDataTable.tsx
+    modals/
+      ModalAlert.module.scss
+      ModalAlert.tsx
+      ModalCanvasPlatformer.module.scss
+      ModalCanvasPlatformer.tsx
+      ModalCanvasSnake.module.scss
+      ModalCanvasSnake.tsx
+      ModalChess.module.scss
+      ModalChess.tsx
+      ModalCreateAccount.module.scss
+      ModalCreateAccount.tsx
+      ModalError.module.scss
+      ModalError.tsx
+      ModalMatrixModes.module.scss
+      ModalMatrixModes.tsx
+    page/
+      DefaultActionBar.module.scss
+      DefaultActionBar.tsx
+      DefaultLayout.module.scss
+      DefaultLayout.tsx
+      ModalContext.tsx
+      root.module.scss
+    svg/
+      InternetDevelopmentLogo.tsx
+      InternetDevelopmentLogoMark.tsx
+      Sphere.tsx
+    Accordion.module.scss
+    Accordion.tsx
+    ActionBar.module.scss
+    ActionBar.tsx
+    ActionButton.module.scss
+    ActionButton.tsx
+    ActionListItem.module.scss
+    ActionListItem.tsx
+    AlertBanner.module.scss
+    AlertBanner.tsx
+    Avatar.module.scss
+    Avatar.tsx
+    Badge.module.scss
+    Badge.tsx
+    BarLoader.module.scss
+    BarLoader.tsx
+    BarProgress.module.scss
+    BarProgress.tsx
+    Block.module.scss
+    Block.tsx
+    BlockLoader.module.scss
+    BlockLoader.tsx
+    BreadCrumbs.module.scss
+    BreadCrumbs.tsx
+    Button.module.scss
+    Button.tsx
+    ButtonGroup.module.scss
+    ButtonGroup.tsx
+    Canvas.module.scss
+    Canvas.tsx
+    CanvasPlatformer.module.scss
+    CanvasPlatformer.tsx
+    CanvasSnake.module.scss
+    CanvasSnake.tsx
+    Card.module.scss
+    Card.tsx
+    CardDouble.module.scss
+    CardDouble.tsx
+    Checkbox.module.scss
+    Checkbox.tsx
+    Chessboard.module.scss
+    Chessboard.tsx
+    CodeBlock.module.scss
+    CodeBlock.tsx
+    ComboBox.module.scss
+    ComboBox.tsx
+    ContentFluid.module.scss
+    ContentFluid.tsx
+    DataTable.module.scss
+    DataTable.tsx
+    DatePicker.module.scss
+    DatePicker.tsx
+    DebugGrid.tsx
+    DefaultMetaTags.tsx
+    Dialog.module.scss
+    Dialog.tsx
+    Divider.module.scss
+    Divider.tsx
+    Drawer.module.scss
+    Drawer.tsx
+    DropdownMenu.module.scss
+    DropdownMenu.tsx
+    DropdownMenuTrigger.module.scss
+    DropdownMenuTrigger.tsx
+    Grid.module.scss
+    Grid.tsx
+    HoverComponentTrigger.module.scss
+    HoverComponentTrigger.tsx
+    Indent.module.scss
+    Indent.tsx
+    Input.module.scss
+    Input.tsx
+    ListItem.module.scss
+    ListItem.tsx
+    MatrixLoader.module.scss
+    MatrixLoader.tsx
+    Message.module.scss
+    Message.tsx
+    MessageViewer.module.scss
+    MessageViewer.tsx
+    ModalStack.module.scss
+    ModalStack.tsx
+    ModalTrigger.tsx
+    Navigation.module.scss
+    Navigation.tsx
+    NumberRangeSlider.module.scss
+    NumberRangeSlider.tsx
+    Popover.module.scss
+    Popover.tsx
+    Providers.tsx
+    RadioButton.module.scss
+    RadioButton.tsx
+    RadioButtonGroup.tsx
+    Row.module.scss
+    Row.tsx
+    RowEllipsis.module.scss
+    RowEllipsis.tsx
+    RowSpaceBetween.module.scss
+    RowSpaceBetween.tsx
+    Select.module.scss
+    Select.tsx
+    SidebarLayout.module.scss
+    SidebarLayout.tsx
+    Table.module.scss
+    Table.tsx
+    TableColumn.module.scss
+    TableColumn.tsx
+    TableRow.module.scss
+    TableRow.tsx
+    Text.module.scss
+    Text.tsx
+    TextArea.module.scss
+    TextArea.tsx
+    Tooltip.module.scss
+    Tooltip.tsx
+    TreeView.module.scss
+    TreeView.tsx
+  modules/
+    hotkeys/
+      bound-hotkeys-proxy-provider.tsx
+      hotkeys-provider.tsx
+      index.ts
+      is-hotkey-pressed.ts
+      parse-hotkeys.ts
+      types.ts
+      use-deep-equal-memo.ts
+      use-hotkeys.ts
+      use-record-hotkeys.ts
+      validators.ts
+    cors.ts
+    object-assign.ts
+    vary.ts
+  pages/
+    api/
+      index.ts
+    _app.tsx
+    _document.tsx
+  .gitignore
+  .prettierrc
+  global.scss
+  LICENSE.md
+  package.json
+  README.md
+  tsconfig.json
+src/
+  app/
+    globals.css
+    layout.tsx
+    page.tsx
+.gitignore
+eslint.config.mjs
+next.config.ts
+package.json
+postcss.config.mjs
+README.md
+tailwind.config.ts
+tsconfig.json
+
+================================================================
+Files
+================================================================
+
+================
+File: public/file.svg
+================
+<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
+
+================
+File: public/globe.svg
+================
+<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
+
+================
+File: public/next.svg
+================
+<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
+
+================
+File: public/vercel.svg
+================
+<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
+
+================
+File: public/window.svg
+================
+<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
+
+================
+File: reference/.git/hooks/applypatch-msg.sample
+================
+#!/bin/sh
+#
+# An example hook script to check the commit log message taken by
+# applypatch from an e-mail message.
+#
+# The hook should exit with non-zero status after issuing an
+# appropriate message if it wants to stop the commit.  The hook is
+# allowed to edit the commit message file.
+#
+# To enable this hook, rename this file to "applypatch-msg".
+
+. git-sh-setup
+commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
+test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
+:
+
+================
+File: reference/.git/hooks/commit-msg.sample
+================
+#!/bin/sh
+#
+# An example hook script to check the commit log message.
+# Called by "git commit" with one argument, the name of the file
+# that has the commit message.  The hook should exit with non-zero
+# status after issuing an appropriate message if it wants to stop the
+# commit.  The hook is allowed to edit the commit message file.
+#
+# To enable this hook, rename this file to "commit-msg".
+
+# Uncomment the below to add a Signed-off-by line to the message.
+# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
+# hook is more suited to it.
+#
+# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
+# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"
+
+# This example catches duplicate Signed-off-by lines.
+
+test "" = "$(grep '^Signed-off-by: ' "$1" |
+	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
+	echo >&2 Duplicate Signed-off-by lines.
+	exit 1
+}
+
+================
+File: reference/.git/hooks/fsmonitor-watchman.sample
+================
+#!/usr/bin/perl
+
+use strict;
+use warnings;
+use IPC::Open2;
+
+# An example hook script to integrate Watchman
+# (https://facebook.github.io/watchman/) with git to speed up detecting
+# new and modified files.
+#
+# The hook is passed a version (currently 2) and last update token
+# formatted as a string and outputs to stdout a new update token and
+# all files that have been modified since the update token. Paths must
+# be relative to the root of the working tree and separated by a single NUL.
+#
+# To enable this hook, rename this file to "query-watchman" and set
+# 'git config core.fsmonitor .git/hooks/query-watchman'
+#
+my ($version, $last_update_token) = @ARGV;
+
+# Uncomment for debugging
+# print STDERR "$0 $version $last_update_token\n";
+
+# Check the hook interface version
+if ($version ne 2) {
+	die "Unsupported query-fsmonitor hook version '$version'.\n" .
+	    "Falling back to scanning...\n";
+}
+
+my $git_work_tree = get_working_dir();
+
+my $retry = 1;
+
+my $json_pkg;
+eval {
+	require JSON::XS;
+	$json_pkg = "JSON::XS";
+	1;
+} or do {
+	require JSON::PP;
+	$json_pkg = "JSON::PP";
+};
+
+launch_watchman();
+
+sub launch_watchman {
+	my $o = watchman_query();
+	if (is_work_tree_watched($o)) {
+		output_result($o->{clock}, @{$o->{files}});
+	}
+}
+
+sub output_result {
+	my ($clockid, @files) = @_;
+
+	# Uncomment for debugging watchman output
+	# open (my $fh, ">", ".git/watchman-output.out");
+	# binmode $fh, ":utf8";
+	# print $fh "$clockid\n@files\n";
+	# close $fh;
+
+	binmode STDOUT, ":utf8";
+	print $clockid;
+	print "\0";
+	local $, = "\0";
+	print @files;
+}
+
+sub watchman_clock {
+	my $response = qx/watchman clock "$git_work_tree"/;
+	die "Failed to get clock id on '$git_work_tree'.\n" .
+		"Falling back to scanning...\n" if $? != 0;
+
+	return $json_pkg->new->utf8->decode($response);
+}
+
+sub watchman_query {
+	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
+	or die "open2() failed: $!\n" .
+	"Falling back to scanning...\n";
+
+	# In the query expression below we're asking for names of files that
+	# changed since $last_update_token but not from the .git folder.
+	#
+	# To accomplish this, we're using the "since" generator to use the
+	# recency index to select candidate nodes and "fields" to limit the
+	# output to file names only. Then we're using the "expression" term to
+	# further constrain the results.
+	my $last_update_line = "";
+	if (substr($last_update_token, 0, 1) eq "c") {
+		$last_update_token = "\"$last_update_token\"";
+		$last_update_line = qq[\n"since": $last_update_token,];
+	}
+	my $query = <<"	END";
+		["query", "$git_work_tree", {$last_update_line
+			"fields": ["name"],
+			"expression": ["not", ["dirname", ".git"]]
+		}]
+	END
+
+	# Uncomment for debugging the watchman query
+	# open (my $fh, ">", ".git/watchman-query.json");
+	# print $fh $query;
+	# close $fh;
+
+	print CHLD_IN $query;
+	close CHLD_IN;
+	my $response = do {local $/; <CHLD_OUT>};
+
+	# Uncomment for debugging the watch response
+	# open ($fh, ">", ".git/watchman-response.json");
+	# print $fh $response;
+	# close $fh;
+
+	die "Watchman: command returned no output.\n" .
+	"Falling back to scanning...\n" if $response eq "";
+	die "Watchman: command returned invalid output: $response\n" .
+	"Falling back to scanning...\n" unless $response =~ /^\{/;
+
+	return $json_pkg->new->utf8->decode($response);
+}
+
+sub is_work_tree_watched {
+	my ($output) = @_;
+	my $error = $output->{error};
+	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
+		$retry--;
+		my $response = qx/watchman watch "$git_work_tree"/;
+		die "Failed to make watchman watch '$git_work_tree'.\n" .
+		    "Falling back to scanning...\n" if $? != 0;
+		$output = $json_pkg->new->utf8->decode($response);
+		$error = $output->{error};
+		die "Watchman: $error.\n" .
+		"Falling back to scanning...\n" if $error;
+
+		# Uncomment for debugging watchman output
+		# open (my $fh, ">", ".git/watchman-output.out");
+		# close $fh;
+
+		# Watchman will always return all files on the first query so
+		# return the fast "everything is dirty" flag to git and do the
+		# Watchman query just to get it over with now so we won't pay
+		# the cost in git to look up each individual file.
+		my $o = watchman_clock();
+		$error = $output->{error};
+
+		die "Watchman: $error.\n" .
+		"Falling back to scanning...\n" if $error;
+
+		output_result($o->{clock}, ("/"));
+		$last_update_token = $o->{clock};
+
+		eval { launch_watchman() };
+		return 0;
+	}
+
+	die "Watchman: $error.\n" .
+	"Falling back to scanning...\n" if $error;
+
+	return 1;
+}
+
+sub get_working_dir {
+	my $working_dir;
+	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
+		$working_dir = Win32::GetCwd();
+		$working_dir =~ tr/\\/\//;
+	} else {
+		require Cwd;
+		$working_dir = Cwd::cwd();
+	}
+
+	return $working_dir;
+}
+
+================
+File: reference/.git/hooks/post-update.sample
+================
+#!/bin/sh
+#
+# An example hook script to prepare a packed repository for use over
+# dumb transports.
+#
+# To enable this hook, rename this file to "post-update".
+
+exec git update-server-info
+
+================
+File: reference/.git/hooks/pre-applypatch.sample
+================
+#!/bin/sh
+#
+# An example hook script to verify what is about to be committed
+# by applypatch from an e-mail message.
+#
+# The hook should exit with non-zero status after issuing an
+# appropriate message if it wants to stop the commit.
+#
+# To enable this hook, rename this file to "pre-applypatch".
+
+. git-sh-setup
+precommit="$(git rev-parse --git-path hooks/pre-commit)"
+test -x "$precommit" && exec "$precommit" ${1+"$@"}
+:
+
+================
+File: reference/.git/hooks/pre-commit.sample
+================
+#!/bin/sh
+#
+# An example hook script to verify what is about to be committed.
+# Called by "git commit" with no arguments.  The hook should
+# exit with non-zero status after issuing an appropriate message if
+# it wants to stop the commit.
+#
+# To enable this hook, rename this file to "pre-commit".
+
+if git rev-parse --verify HEAD >/dev/null 2>&1
+then
+	against=HEAD
+else
+	# Initial commit: diff against an empty tree object
+	against=$(git hash-object -t tree /dev/null)
+fi
+
+# If you want to allow non-ASCII filenames set this variable to true.
+allownonascii=$(git config --type=bool hooks.allownonascii)
+
+# Redirect output to stderr.
+exec 1>&2
+
+# Cross platform projects tend to avoid non-ASCII filenames; prevent
+# them from being added to the repository. We exploit the fact that the
+# printable range starts at the space character and ends with tilde.
+if [ "$allownonascii" != "true" ] &&
+	# Note that the use of brackets around a tr range is ok here, (it's
+	# even required, for portability to Solaris 10's /usr/bin/tr), since
+	# the square bracket bytes happen to fall in the designated range.
+	test $(git diff --cached --name-only --diff-filter=A -z $against |
+	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
+then
+	cat <<\EOF
+Error: Attempt to add a non-ASCII file name.
+
+This can cause problems if you want to work with people on other platforms.
+
+To be portable it is advisable to rename the file.
+
+If you know what you are doing you can disable this check using:
+
+  git config hooks.allownonascii true
+EOF
+	exit 1
+fi
+
+# If there are whitespace errors, print the offending file names and fail.
+exec git diff-index --check --cached $against --
+
+================
+File: reference/.git/hooks/pre-merge-commit.sample
+================
+#!/bin/sh
+#
+# An example hook script to verify what is about to be committed.
+# Called by "git merge" with no arguments.  The hook should
+# exit with non-zero status after issuing an appropriate message to
+# stderr if it wants to stop the merge commit.
+#
+# To enable this hook, rename this file to "pre-merge-commit".
+
+. git-sh-setup
+test -x "$GIT_DIR/hooks/pre-commit" &&
+        exec "$GIT_DIR/hooks/pre-commit"
+:
+
+================
+File: reference/.git/hooks/pre-push.sample
+================
+#!/bin/sh
+
+# An example hook script to verify what is about to be pushed.  Called by "git
+# push" after it has checked the remote status, but before anything has been
+# pushed.  If this script exits with a non-zero status nothing will be pushed.
+#
+# This hook is called with the following parameters:
+#
+# $1 -- Name of the remote to which the push is being done
+# $2 -- URL to which the push is being done
+#
+# If pushing without using a named remote those arguments will be equal.
+#
+# Information about the commits which are being pushed is supplied as lines to
+# the standard input in the form:
+#
+#   <local ref> <local oid> <remote ref> <remote oid>
+#
+# This sample shows how to prevent push of commits where the log message starts
+# with "WIP" (work in progress).
+
+remote="$1"
+url="$2"
+
+zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
+
+while read local_ref local_oid remote_ref remote_oid
+do
+	if test "$local_oid" = "$zero"
+	then
+		# Handle delete
+		:
+	else
+		if test "$remote_oid" = "$zero"
+		then
+			# New branch, examine all commits
+			range="$local_oid"
+		else
+			# Update to existing branch, examine new commits
+			range="$remote_oid..$local_oid"
+		fi
+
+		# Check for WIP commit
+		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
+		if test -n "$commit"
+		then
+			echo >&2 "Found WIP commit in $local_ref, not pushing"
+			exit 1
+		fi
+	fi
+done
+
+exit 0
+
+================
+File: reference/.git/hooks/pre-rebase.sample
+================
+#!/bin/sh
+#
+# Copyright (c) 2006, 2008 Junio C Hamano
+#
+# The "pre-rebase" hook is run just before "git rebase" starts doing
+# its job, and can prevent the command from running by exiting with
+# non-zero status.
+#
+# The hook is called with the following parameters:
+#
+# $1 -- the upstream the series was forked from.
+# $2 -- the branch being rebased (or empty when rebasing the current branch).
+#
+# This sample shows how to prevent topic branches that are already
+# merged to 'next' branch from getting rebased, because allowing it
+# would result in rebasing already published history.
+
+publish=next
+basebranch="$1"
+if test "$#" = 2
+then
+	topic="refs/heads/$2"
+else
+	topic=`git symbolic-ref HEAD` ||
+	exit 0 ;# we do not interrupt rebasing detached HEAD
+fi
+
+case "$topic" in
+refs/heads/??/*)
+	;;
+*)
+	exit 0 ;# we do not interrupt others.
+	;;
+esac
+
+# Now we are dealing with a topic branch being rebased
+# on top of master.  Is it OK to rebase it?
+
+# Does the topic really exist?
+git show-ref -q "$topic" || {
+	echo >&2 "No such branch $topic"
+	exit 1
+}
+
+# Is topic fully merged to master?
+not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
+if test -z "$not_in_master"
+then
+	echo >&2 "$topic is fully merged to master; better remove it."
+	exit 1 ;# we could allow it, but there is no point.
+fi
+
+# Is topic ever merged to next?  If so you should not be rebasing it.
+only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
+only_next_2=`git rev-list ^master           ${publish} | sort`
+if test "$only_next_1" = "$only_next_2"
+then
+	not_in_topic=`git rev-list "^$topic" master`
+	if test -z "$not_in_topic"
+	then
+		echo >&2 "$topic is already up to date with master"
+		exit 1 ;# we could allow it, but there is no point.
+	else
+		exit 0
+	fi
+else
+	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
+	/usr/bin/perl -e '
+		my $topic = $ARGV[0];
+		my $msg = "* $topic has commits already merged to public branch:\n";
+		my (%not_in_next) = map {
+			/^([0-9a-f]+) /;
+			($1 => 1);
+		} split(/\n/, $ARGV[1]);
+		for my $elem (map {
+				/^([0-9a-f]+) (.*)$/;
+				[$1 => $2];
+			} split(/\n/, $ARGV[2])) {
+			if (!exists $not_in_next{$elem->[0]}) {
+				if ($msg) {
+					print STDERR $msg;
+					undef $msg;
+				}
+				print STDERR " $elem->[1]\n";
+			}
+		}
+	' "$topic" "$not_in_next" "$not_in_master"
+	exit 1
+fi
+
+<<\DOC_END
+
+This sample hook safeguards topic branches that have been
+published from being rewound.
+
+The workflow assumed here is:
+
+ * Once a topic branch forks from "master", "master" is never
+   merged into it again (either directly or indirectly).
+
+ * Once a topic branch is fully cooked and merged into "master",
+   it is deleted.  If you need to build on top of it to correct
+   earlier mistakes, a new topic branch is created by forking at
+   the tip of the "master".  This is not strictly necessary, but
+   it makes it easier to keep your history simple.
+
+ * Whenever you need to test or publish your changes to topic
+   branches, merge them into "next" branch.
+
+The script, being an example, hardcodes the publish branch name
+to be "next", but it is trivial to make it configurable via
+$GIT_DIR/config mechanism.
+
+With this workflow, you would want to know:
+
+(1) ... if a topic branch has ever been merged to "next".  Young
+    topic branches can have stupid mistakes you would rather
+    clean up before publishing, and things that have not been
+    merged into other branches can be easily rebased without
+    affecting other people.  But once it is published, you would
+    not want to rewind it.
+
+(2) ... if a topic branch has been fully merged to "master".
+    Then you can delete it.  More importantly, you should not
+    build on top of it -- other people may already want to
+    change things related to the topic as patches against your
+    "master", so if you need further changes, it is better to
+    fork the topic (perhaps with the same name) afresh from the
+    tip of "master".
+
+Let's look at this example:
+
+		   o---o---o---o---o---o---o---o---o---o "next"
+		  /       /           /           /
+		 /   a---a---b A     /           /
+		/   /               /           /
+	       /   /   c---c---c---c B         /
+	      /   /   /             \         /
+	     /   /   /   b---b C     \       /
+	    /   /   /   /             \     /
+    ---o---o---o---o---o---o---o---o---o---o---o "master"
+
+
+A, B and C are topic branches.
+
+ * A has one fix since it was merged up to "next".
+
+ * B has finished.  It has been fully merged up to "master" and "next",
+   and is ready to be deleted.
+
+ * C has not merged to "next" at all.
+
+We would want to allow C to be rebased, refuse A, and encourage
+B to be deleted.
+
+To compute (1):
+
+	git rev-list ^master ^topic next
+	git rev-list ^master        next
+
+	if these match, topic has not merged in next at all.
+
+To compute (2):
+
+	git rev-list master..topic
+
+	if this is empty, it is fully merged to "master".
+
+DOC_END
+
+================
+File: reference/.git/hooks/pre-receive.sample
+================
+#!/bin/sh
+#
+# An example hook script to make use of push options.
+# The example simply echoes all push options that start with 'echoback='
+# and rejects all pushes when the "reject" push option is used.
+#
+# To enable this hook, rename this file to "pre-receive".
+
+if test -n "$GIT_PUSH_OPTION_COUNT"
+then
+	i=0
+	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
+	do
+		eval "value=\$GIT_PUSH_OPTION_$i"
+		case "$value" in
+		echoback=*)
+			echo "echo from the pre-receive-hook: ${value#*=}" >&2
+			;;
+		reject)
+			exit 1
+		esac
+		i=$((i + 1))
+	done
+fi
+
+================
+File: reference/.git/hooks/prepare-commit-msg.sample
+================
+#!/bin/sh
+#
+# An example hook script to prepare the commit log message.
+# Called by "git commit" with the name of the file that has the
+# commit message, followed by the description of the commit
+# message's source.  The hook's purpose is to edit the commit
+# message file.  If the hook fails with a non-zero status,
+# the commit is aborted.
+#
+# To enable this hook, rename this file to "prepare-commit-msg".
+
+# This hook includes three examples. The first one removes the
+# "# Please enter the commit message..." help message.
+#
+# The second includes the output of "git diff --name-status -r"
+# into the message, just before the "git status" output.  It is
+# commented because it doesn't cope with --amend or with squashed
+# commits.
+#
+# The third example adds a Signed-off-by line to the message, that can
+# still be edited.  This is rarely a good idea.
+
+COMMIT_MSG_FILE=$1
+COMMIT_SOURCE=$2
+SHA1=$3
+
+/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"
+
+# case "$COMMIT_SOURCE,$SHA1" in
+#  ,|template,)
+#    /usr/bin/perl -i.bak -pe '
+#       print "\n" . `git diff --cached --name-status -r`
+# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
+#  *) ;;
+# esac
+
+# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
+# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
+# if test -z "$COMMIT_SOURCE"
+# then
+#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
+# fi
+
+================
+File: reference/.git/hooks/push-to-checkout.sample
+================
+#!/bin/sh
+
+# An example hook script to update a checked-out tree on a git push.
+#
+# This hook is invoked by git-receive-pack(1) when it reacts to git
+# push and updates reference(s) in its repository, and when the push
+# tries to update the branch that is currently checked out and the
+# receive.denyCurrentBranch configuration variable is set to
+# updateInstead.
+#
+# By default, such a push is refused if the working tree and the index
+# of the remote repository has any difference from the currently
+# checked out commit; when both the working tree and the index match
+# the current commit, they are updated to match the newly pushed tip
+# of the branch. This hook is to be used to override the default
+# behaviour; however the code below reimplements the default behaviour
+# as a starting point for convenient modification.
+#
+# The hook receives the commit with which the tip of the current
+# branch is going to be updated:
+commit=$1
+
+# It can exit with a non-zero status to refuse the push (when it does
+# so, it must not modify the index or the working tree).
+die () {
+	echo >&2 "$*"
+	exit 1
+}
+
+# Or it can make any necessary changes to the working tree and to the
+# index to bring them to the desired state when the tip of the current
+# branch is updated to the new commit, and exit with a zero status.
+#
+# For example, the hook can simply run git read-tree -u -m HEAD "$1"
+# in order to emulate git fetch that is run in the reverse direction
+# with git push, as the two-tree form of git read-tree -u -m is
+# essentially the same as git switch or git checkout that switches
+# branches while keeping the local changes in the working tree that do
+# not interfere with the difference between the branches.
+
+# The below is a more-or-less exact translation to shell of the C code
+# for the default behaviour for git's push-to-checkout hook defined in
+# the push_to_deploy() function in builtin/receive-pack.c.
+#
+# Note that the hook will be executed from the repository directory,
+# not from the working tree, so if you want to perform operations on
+# the working tree, you will have to adapt your code accordingly, e.g.
+# by adding "cd .." or using relative paths.
+
+if ! git update-index -q --ignore-submodules --refresh
+then
+	die "Up-to-date check failed"
+fi
+
+if ! git diff-files --quiet --ignore-submodules --
+then
+	die "Working directory has unstaged changes"
+fi
+
+# This is a rough translation of:
+#
+#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
+if git cat-file -e HEAD 2>/dev/null
+then
+	head=HEAD
+else
+	head=$(git hash-object -t tree --stdin </dev/null)
+fi
+
+if ! git diff-index --quiet --cached --ignore-submodules $head --
+then
+	die "Working directory has staged changes"
+fi
+
+if ! git read-tree -u -m "$commit"
+then
+	die "Could not update working tree to new HEAD"
+fi
+
+================
+File: reference/.git/hooks/update.sample
+================
+#!/bin/sh
+#
+# An example hook script to block unannotated tags from entering.
+# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
+#
+# To enable this hook, rename this file to "update".
+#
+# Config
+# ------
+# hooks.allowunannotated
+#   This boolean sets whether unannotated tags will be allowed into the
+#   repository.  By default they won't be.
+# hooks.allowdeletetag
+#   This boolean sets whether deleting tags will be allowed in the
+#   repository.  By default they won't be.
+# hooks.allowmodifytag
+#   This boolean sets whether a tag may be modified after creation. By default
+#   it won't be.
+# hooks.allowdeletebranch
+#   This boolean sets whether deleting branches will be allowed in the
+#   repository.  By default they won't be.
+# hooks.denycreatebranch
+#   This boolean sets whether remotely creating branches will be denied
+#   in the repository.  By default this is allowed.
+#
+
+# --- Command line
+refname="$1"
+oldrev="$2"
+newrev="$3"
+
+# --- Safety check
+if [ -z "$GIT_DIR" ]; then
+	echo "Don't run this script from the command line." >&2
+	echo " (if you want, you could supply GIT_DIR then run" >&2
+	echo "  $0 <ref> <oldrev> <newrev>)" >&2
+	exit 1
+fi
+
+if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
+	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
+	exit 1
+fi
+
+# --- Config
+allowunannotated=$(git config --type=bool hooks.allowunannotated)
+allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
+denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
+allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
+allowmodifytag=$(git config --type=bool hooks.allowmodifytag)
+
+# check for no description
+projectdesc=$(sed -e '1q' "$GIT_DIR/description")
+case "$projectdesc" in
+"Unnamed repository"* | "")
+	echo "*** Project description file hasn't been set" >&2
+	exit 1
+	;;
+esac
+
+# --- Check types
+# if $newrev is 0000...0000, it's a commit to delete a ref.
+zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
+if [ "$newrev" = "$zero" ]; then
+	newrev_type=delete
+else
+	newrev_type=$(git cat-file -t $newrev)
+fi
+
+case "$refname","$newrev_type" in
+	refs/tags/*,commit)
+		# un-annotated tag
+		short_refname=${refname##refs/tags/}
+		if [ "$allowunannotated" != "true" ]; then
+			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
+			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
+			exit 1
+		fi
+		;;
+	refs/tags/*,delete)
+		# delete tag
+		if [ "$allowdeletetag" != "true" ]; then
+			echo "*** Deleting a tag is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	refs/tags/*,tag)
+		# annotated tag
+		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
+		then
+			echo "*** Tag '$refname' already exists." >&2
+			echo "*** Modifying a tag is not allowed in this repository." >&2
+			exit 1
+		fi
+		;;
+	refs/heads/*,commit)
+		# branch
+		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
+			echo "*** Creating a branch is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	refs/heads/*,delete)
+		# delete branch
+		if [ "$allowdeletebranch" != "true" ]; then
+			echo "*** Deleting a branch is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	refs/remotes/*,commit)
+		# tracking branch
+		;;
+	refs/remotes/*,delete)
+		# delete tracking branch
+		if [ "$allowdeletebranch" != "true" ]; then
+			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	*)
+		# Anything else (is there anything else?)
+		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
+		exit 1
+		;;
+esac
+
+# --- Finished
+exit 0
+
+================
+File: reference/.git/info/exclude
+================
+# git ls-files --others --exclude-from=.git/info/exclude
+# Lines that start with '#' are comments.
+# For a project mostly in C, the following would be a good set of
+# exclude patterns (uncomment them if you want to use them):
+# *.[oa]
+# *~
+
+================
+File: reference/.git/logs/refs/heads/main
+================
+0000000000000000000000000000000000000000 0c32f7764e928daf9473961c488e6e9a855339d2 Luke Nittmann <luke.nittmann@gmail.com> 1738221446 -0800	clone: from https://github.com/internet-development/www-internet-v2.git
+
+================
+File: reference/.git/logs/refs/remotes/origin/HEAD
+================
+0000000000000000000000000000000000000000 0c32f7764e928daf9473961c488e6e9a855339d2 Luke Nittmann <luke.nittmann@gmail.com> 1738221446 -0800	clone: from https://github.com/internet-development/www-internet-v2.git
+
+================
+File: reference/.git/logs/HEAD
+================
+0000000000000000000000000000000000000000 0c32f7764e928daf9473961c488e6e9a855339d2 Luke Nittmann <luke.nittmann@gmail.com> 1738221446 -0800	clone: from https://github.com/internet-development/www-internet-v2.git
+
+================
+File: reference/.git/refs/heads/main
+================
+0c32f7764e928daf9473961c488e6e9a855339d2
+
+================
+File: reference/.git/refs/remotes/origin/HEAD
+================
+ref: refs/remotes/origin/main
+
+================
+File: reference/.git/config
+================
+[core]
+	repositoryformatversion = 0
+	filemode = true
+	bare = false
+	logallrefupdates = true
+	ignorecase = true
+	precomposeunicode = true
+[remote "origin"]
+	url = https://github.com/internet-development/www-internet-v2.git
+	fetch = +refs/heads/*:refs/remotes/origin/*
+[branch "main"]
+	remote = origin
+	merge = refs/heads/main
+	vscode-merge-base = origin/main
+
+================
+File: reference/.git/description
+================
+Unnamed repository; edit this file 'description' to name the repository.
+
+================
+File: reference/.git/FETCH_HEAD
+================
+0c32f7764e928daf9473961c488e6e9a855339d2		branch 'main' of https://github.com/internet-development/www-internet-v2
+
+================
+File: reference/.git/HEAD
+================
+ref: refs/heads/main
+
+================
+File: reference/.git/packed-refs
+================
+# pack-refs with: peeled fully-peeled sorted 
+0c32f7764e928daf9473961c488e6e9a855339d2 refs/remotes/origin/main
+
+================
+File: reference/app/office/head.tsx
+================
+import DefaultMetaTags from '@components/DefaultMetaTags';
+
+export default async function Head({ params }) {
+  return (
+    <>
+      <DefaultMetaTags />
+    </>
+  );
+}
+
+================
+File: reference/app/office/layout.tsx
+================
+import Providers from '@components/Providers';
+
+export default function RootLayout({ children }: { children: React.ReactNode }) {
+  return (
+    <html lang="en-us">
+      <body className="theme-light">
+        <Providers>{children}</Providers>
+      </body>
+    </html>
+  );
+}
+
+================
+File: reference/app/office/page.tsx
+================
+import '@root/global.scss';
+
+import * as Constants from '@common/constants';
+import * as Utilities from '@common/utilities';
+
+import Accordion from '@components/Accordion';
+import ActionListItem from '@components/ActionListItem';
+import Canvas from '@components/Canvas';
+import DefaultLayout from '@components/page/DefaultLayout';
+import InternetDevelopmentLogo from '@components/svg/InternetDevelopmentLogo';
+import InternetDevelopmentLogoMark from '@components/svg/InternetDevelopmentLogoMark';
+import Table from '@components/Table';
+import TableRow from '@components/TableRow';
+import TableColumn from '@components/TableColumn';
+import Package from '@root/package.json';
+import styles from '@components/page/root.module.scss';
+
+export const dynamic = 'force-static';
+
+const VIDEO_URL = 'https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/03025ac3-aa78-4a21-ac3c-a465cb792d39.mp4';
+
+export async function generateMetadata({ params, searchParams }) {
+  const title = `${Package.name} - OFFICE`;
+  const description = `Learn more about our Office in Pike Place, Seattle`;
+  const url = 'https://internet.dev';
+  const handle = '@internetxstudio';
+
+  return {
+    description,
+    icons: {
+      icon: '/favicon-32x32.png',
+      shortcut: '/favicon-16x16.png',
+    },
+    metadataBase: new URL('https://internet.dev/office'),
+    openGraph: {
+      description,
+      images: [
+        {
+          url: 'https://next-s3-public.s3.us-west-2.amazonaws.com/internet-dev/intdev.png',
+          width: 1500,
+          height: 785,
+        },
+      ],
+      title,
+      type: 'website',
+      url,
+    },
+    title,
+    twitter: {
+      card: 'summary_large_image',
+      description,
+      handle,
+      images: ['https://next-s3-public.s3.us-west-2.amazonaws.com/internet-dev/intdev.png'],
+      title,
+      url,
+    },
+    url,
+  };
+}
+
+export default async function Page(props) {
+  return (
+    <DefaultLayout previewPixelSRC="https://intdev-global.s3.us-west-2.amazonaws.com/template-app-icon.png">
+      <div className={styles.row}>
+        <div className={styles.column} style={{ height: '176px', padding: 0 }}>
+          <Canvas />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <InternetDevelopmentLogo height="24px" />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <img className={styles.image} src="https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/7e6088bb-4ce2-47d9-9dfd-d658faed484d.png" />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <aside className={styles.aside}>
+            Champion Building, Pike Place
+            <br />
+            Seattle, Washington
+            <br />
+            United States of America, Earth
+          </aside>
+          <br />
+          <p className={styles.p}>We invite builders who love trying new things and learning to collaborate with us, guided by our values: everything matters, support your friends, and doing your best is more than enough.</p>
+          <br />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <img className={styles.image} src="https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/0bc8d758-d4a9-412e-aa28-1fa6e6481a9a.jpg" />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`What does the INTDEV office offer?`}>
+            <br />
+            Our space offers hardwood floors, symmetrical fiber internet, a local area network, two full kitchens, three meeting booths, a server room, lunch tables, and dedicated workstations. With 24/7 access and amenities like a color printer, shredder, scanner, gallery lounge, and triple-filtered water, we foster a collaborative environment where you can build your vision alongside like-minded peers.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Apply on Users Garden
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Manage your account
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+              Read our Office Use Agreement
+            </ActionListItem>
+            <br />
+            <br /> <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <img className={styles.image} src="https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/6dcedf7d-82d1-45db-a53e-31de509a7759.jpg" />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How do I work with INTDEV at their office?`}>
+            <br />
+            You can find an application link below or by reaching out through social. Please note that the INTDEV reserved desks are invite-only and intended for those with a genuine interest in building things together.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Apply on Users Garden
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Manage your account
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+              Read our Office Use Agreement
+            </ActionListItem>
+            <br />
+            <br /> <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <img className={styles.image} src="https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/9c524b6a-855e-4329-88cd-7bb81796fcc2.jpg" />
+          <br />
+        </div>
+      </div>
+
+      <footer className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <ActionListItem icon={`⊹`} href="https://wireframes.internet.dev/" target="_blank">
+            Explore INTDEV's open source work
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://github.com/orgs/internet-development/repositories" target="_blank">
+            Follow us on GitHub
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://www.linkedin.com/company/internet-dev" target="_blank">
+            Follow us on LinkedIn
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://www.instagram.com/internetdevelopmentstudio/" target="_blank">
+            Follow us on Instagram
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://read.cv/teams/intdev" target="_blank">
+            Follow us on Read.cv
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://x.com/internetxstudio" target="_blank">
+            Follow us on X
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+            Get our attention on Telegram
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="/">
+            Go home
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+            Manage your account
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-acceptable-use" target="_blank">
+            Read our Acceptable Use Policy
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+            Read our Office Use Agreement
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-privacy-policy" target="_blank">
+            Read our Privacy Policy
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-terms-of-service" target="_blank">
+            Read our Terms of Use
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://github.com/internet-development/www-internet-v2" target="_blank">
+            View source
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev" target="_blank">
+            Write a post
+          </ActionListItem>
+          <br />
+          Copyright © 2025. All rights reserved.
+          <br />
+          <br />
+          <br />
+        </div>
+      </footer>
+    </DefaultLayout>
+  );
+}
+
+================
+File: reference/app/head.tsx
+================
+import DefaultMetaTags from '@components/DefaultMetaTags';
+
+export default async function Head({ params }) {
+  return (
+    <>
+      <DefaultMetaTags />
+    </>
+  );
+}
+
+================
+File: reference/app/layout.tsx
+================
+import Providers from '@components/Providers';
+
+export default function RootLayout({ children }: { children: React.ReactNode }) {
+  return (
+    <html lang="en-us">
+      <body className="theme-light">
+        <Providers>{children}</Providers>
+      </body>
+    </html>
+  );
+}
+
+================
+File: reference/app/manifest.ts
+================
+import Package from '@root/package.json';
+
+import { MetadataRoute } from 'next';
+
+export default function manifest(): MetadataRoute.Manifest {
+  return {
+    background_color: '#ffffff',
+    description: Package.description,
+    display: 'standalone',
+    icons: [
+      {
+        src: '/favicon.ico',
+        sizes: 'any',
+        type: 'image/x-icon',
+      },
+    ],
+    name: Package.name,
+    short_name: Package.name,
+    start_url: '/',
+    theme_color: '#ffffff',
+  };
+}
+
+================
+File: reference/app/page.tsx
+================
+import '@root/global.scss';
+
+import * as Constants from '@common/constants';
+import * as Utilities from '@common/utilities';
+
+import Accordion from '@components/Accordion';
+import ActionListItem from '@components/ActionListItem';
+import Canvas from '@components/Canvas';
+import DefaultLayout from '@components/page/DefaultLayout';
+import InternetDevelopmentLogo from '@components/svg/InternetDevelopmentLogo';
+import InternetDevelopmentLogoMark from '@components/svg/InternetDevelopmentLogoMark';
+import Table from '@components/Table';
+import TableRow from '@components/TableRow';
+import TableColumn from '@components/TableColumn';
+import Package from '@root/package.json';
+import styles from '@components/page/root.module.scss';
+
+export const dynamic = 'force-static';
+
+const VIDEO_URL = 'https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/03025ac3-aa78-4a21-ac3c-a465cb792d39.mp4';
+
+export async function generateMetadata({ params, searchParams }) {
+  const title = Package.name;
+  const description = Package.description;
+  const url = 'https://internet.dev';
+  const handle = '@internetxstudio';
+
+  return {
+    description,
+    icons: {
+      icon: '/favicon-32x32.png',
+      shortcut: '/favicon-16x16.png',
+    },
+    metadataBase: new URL('https://internet.dev'),
+    openGraph: {
+      description,
+      images: [
+        {
+          url: 'https://next-s3-public.s3.us-west-2.amazonaws.com/internet-dev/intdev.png',
+          width: 1500,
+          height: 785,
+        },
+      ],
+      title,
+      type: 'website',
+      url,
+    },
+    title,
+    twitter: {
+      card: 'summary_large_image',
+      description,
+      handle,
+      images: ['https://next-s3-public.s3.us-west-2.amazonaws.com/internet-dev/intdev.png'],
+      title,
+      url,
+    },
+    url,
+  };
+}
+
+export default async function Page(props) {
+  return (
+    <DefaultLayout previewPixelSRC="https://intdev-global.s3.us-west-2.amazonaws.com/template-app-icon.png">
+      <div className={styles.row}>
+        <div className={styles.column} style={{ height: '176px', padding: 0 }}>
+          <Canvas />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <video className={styles.video} src={VIDEO_URL} autoPlay muted loop playsInline preload="auto">
+            Your browser does not support the video tag.
+          </video>
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <h1 className={styles.h1}>Internet Development Studio Company ("INTDEV")</h1>
+          <aside className={styles.aside}>
+            Champion Building, Pike Place
+            <br />
+            Seattle, Washington
+            <br />
+            United States of America, Earth
+          </aside>
+          <br />
+          <p className={styles.p}>An american vocation guild and great hall for webmasters. Every day we practice the craft of designing, building, shipping, and maintaining websites, platforms, brands, and applications—end to end.</p>
+          <br />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <ActionListItem icon={`⊹`} href="https://wireframes.internet.dev/" target="_blank">
+            Explore INTDEV's open source work
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+            Get our attention on Telegram
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://sacred.computer" target="_blank">
+            Go explore SRCL
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="/office">
+            Learn more about the Pike Place office
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://www.beautifulthings.xyz/" target="_blank">
+            Look at beautiful things
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+            Manage your account
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev" target="_blank">
+            Write a post
+          </ActionListItem>
+
+          <br />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`What does the Internet Development Studio Company ("INTDEV") actually do?`}>
+            <br />
+            We provide a team you can hire to get things done.
+            <br />
+            <br />
+            That team is a 6 person dedicated tiger team specializing in delivering high-performance web applications, internal tools, branding assets, presentations, static websites, LLM interfaces, illustrations, productivity applications, technical writing, and general web development services. By embedding with up to four companies at a time, we allocate a shared bandwidth of 360 hours per week to drive productivity and deliver results. It’s a process we genuinely enjoy, and every major milestone we knock out helps us grow and learn.
+            <br />
+            <br />
+            We also provide an invite-only space in Seattle for people to work alongside us, offering a collaborative environment that also serves the portfolio venture companies of{' '}
+            <a href="https://mana.inc" target="_blank">
+              Mana Industries Fund 1 LP
+            </a>{' '}
+            and contributors.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://wireframes.internet.dev/" target="_blank">
+              Explore INTDEV's open source work
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`Who did INTDEV work for in 2024?`}>
+            <br />
+            Aliaksandr Hudzilin, Bakken & Bæck, Beautiful Things, El Cap Capital, Google, Mana Industries, Microsoft, Protocol Labs and various startups.
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`Who is INTDEV working for in 2025?`}>
+            <br />
+            Microsoft
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How does an engagement with INTDEV typically feel?`}>
+            <br />
+            Imagine hiring your own team, and one that already has a well-established design and engineering culture.
+            <br />
+            <br />
+            By hiring us, you gain a team that works seamlessly in person, is highly productive, and has a proven track record. This is all made possible by the extensive successful startup experience shared across our team.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How much does it cost to hire this team?`}>
+            <br />
+            <Table>
+              <TableRow>
+                <TableColumn>ONE MONTH</TableColumn>
+                <TableColumn>$70,000 USD</TableColumn>
+              </TableRow>
+
+              <TableRow>
+                <TableColumn>THREE MONTHS</TableColumn>
+                <TableColumn>$195,000 USD</TableColumn>
+              </TableRow>
+
+              <TableRow>
+                <TableColumn>SIX MONTHS</TableColumn>
+                <TableColumn>$360,000 USD</TableColumn>
+              </TableRow>
+
+              <TableRow>
+                <TableColumn>NINE MONTHS</TableColumn>
+                <TableColumn>$495,000 USD</TableColumn>
+              </TableRow>
+
+              <TableRow>
+                <TableColumn>TWELVE MONTHS</TableColumn>
+                <TableColumn>$600,000 USD</TableColumn>
+              </TableRow>
+            </Table>
+            <br />
+            From the start, it will feel like you built this team yourself.
+            <br />
+            <br />
+            We don’t do change orders—instead, we aim to complete as much work as possible within our estimates while you have us on retainer. This approach is ideal for situations where you want to accomplish a lot efficiently.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`Why do I have to hire the full six-person team?`}>
+            <br />
+            Our studio fosters deep in-person collaboration, where we openly discuss challenges and make a concerted effort to learn and improve our skills through shared experiences.
+            <br />
+            <br />
+            This approach strengthens our team and enables us to support venture-backed companies with tight deadlines and ambitious goals. By learning from each other’s mistakes, we continually refine our work and strive to hit the mark every time.
+            <br />
+            <br />
+            Also, it should be known that, based on our prices, you're only paying the cost of a full-time employee for a much larger headcount. A lot of clients find this to be high value.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`Is there a discount if we want to work with less people from the INTDEV?`}>
+            <br />
+            No, but as a client, you are welcome to work with fewer team members if that is your preference.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How does working with the INTDEV work day to day?`}>
+            <br />
+            Here’s a glimpse of what it’s like to collaborate with our six-person team.
+            <br />
+            <br />
+            <Accordion defaultValue={true} title={`Discovery Video Call`}>
+              <br />
+              We begin with a video call to understand your goals and explore how our team can deliver results. We’re flexible with your preferred video chat platform.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`[OPTIONAL] First Meeting in Seattle, WA`}>
+              <br />
+              Join us at our Pike Place office to work alongside our team as we dive into your goals. You’re welcome to use our meeting rooms and open desks, meet other companies, and enjoy engaging conversations. We always have filtered water and are here on weekends, too.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Onboarding`}>
+              <br />
+              From day one, we integrate seamlessly into your team, bringing years of experience and familiarity with compliance requirements like NDAs. Comfortable across Linux, MacOS, and Windows, we’re happy to train your employees when needed and adapt to your existing tools and processes.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Embedding`}>
+              <br />
+              We adapt to the roles you need, whether following your direction or advocating for key features, integrating into your daily routine at whatever level you require. Comfortable with agile, waterfall, or even a “move fast and break things” approach, we’re always ready to embrace challenges.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Working in the Office`}>
+              <br />
+              We can host stand-ups and any meetings you need in our office, with meeting rooms perfect for bringing in your own customers. Sharing the space often leads to team-building, and we’re happy to host and cook for large groups with a little notice. <br />
+              <br />
+              Pike Place offers great restaurants and scenic spots for breaks, though guest parking isn’t available, so please plan accordingly. Our office features symmetrical fiber internet and quiet workspaces, and we keep our client list small to stay flexible and accommodating.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Technical Program Management`}>
+              <br />
+              We help identify your Technical Program Management needs, aligning your team around a shared goal with fresh perspectives. We guide long-term strategic decisions, define “done” from the start, and set expectations upfront. We bring experience from high-profile projects while focusing on supporting your vision and helping you achieve it.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Zero to One`}>
+              <br />
+              With over a decade of startup experience, our design partners help bring your product to market for the first time and support future launches, treating each launch as a personal milestone. We love exploring logos, drawing inspiration from our collection of books, and rely on tools like Figma, Sketch, Photoshop, and Illustrator. <br />
+              <br />
+              Our network also includes some of Seattle’s top photographers and videographers, many of whom work directly in our space.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Get in Quick`}>
+              <br />
+              When you need quick results without extra discussion, we’re ready to jump in, whether it’s tackling long-standing backlogs, handling one-off tasks, or adding missing design system components. We can deliver results without delay. <br />
+              <br />
+              We’re unfazed by technical debt, comfortable managing tricky repository forks, and always ready to take on backlog tasks—just let us know how we can help.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Tooling Investment`}>
+              <br />
+              We know a team’s identity is often shaped by the tools they use. Whether you’re looking to strengthen your current toolkit or start fresh, we can help. Our expertise spans tools like Next.js, Postgres, Figma, GSAP, and Tailwind, along with CSS dialects like CSS-in-JS and email-compliant inline styles. <br />
+              <br />
+              With one of our partners contributing to Expo (React Native), we deeply value tooling. We respect your existing tools while embracing fresh starts that energize teams and foster growth. Involve us in consulting meetings for fresh perspectives—we’re always ready to explore new technologies, including LLMs.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Launch, Maintain, and Survive`}>
+              <br />
+              Your uptime is critical, and while we can’t promise 99.9999999% uptime at scale, we specialize in keeping websites running with low effort on your part. This allows you to focus on growing your product and engaging your customers without unnecessary distractions.
+              <br />
+              <br />
+              Whether you need help with IPFS, managing VPS, consulting on on-premise solutions, or working with tools like Fly, Vercel, and Render, we’ve got you covered. With experience in GCE, GCS, AWS EC2, S3, and database backups, we’re here to ensure your systems work.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Supporting Volatility`}>
+              <br />
+              If you’re navigating changes in priorities, we offer the flexibility to help you adapt. We understand that leadership shifts happen, and we’re here to support you while keeping your team focused on what matters most. Whether starting fresh or removing what’s not working, our flexible deal structure evolves with your needs, always aligned with your goal of driving success and growth for your business.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Libraries and Documentation`}>
+              <br />
+              We value great documentation and design systems, even if they’re not always a priority for everyone. We can create clear, user-friendly documentation and develop intuitive design systems for your web products, building tools to make these processes more efficient. <br />
+              <br />
+              Whether working with tools like Scalar, GitBook, and Notion or contributing to publications, blog posts, and video tutorials, we’re happy to provide custom solutions to meet your needs.
+              <br />
+              <br />
+            </Accordion>
+            <br />
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`What is INTDEV's relationship with the University of Washington?`}>
+            <br />
+            If your department requires a website that complies with the latest legal standards, is powered by modern web tooling, and boasts a functional design, partner with us. We read 313 pages of documentation for you.
+            <br />
+            <br />
+            We admire the{' '}
+            <a href="https://www.washington.edu/" target="_blank">
+              University of Washington
+            </a>
+            ’s dedication to innovation and inclusivity, and the alumni who work in our office proudly align our mission with these values. As designers, we are committed to ensuring that every website we create is not only modern but also accessible.
+            <br />
+            <br />
+            <a href="https://www.federalregister.gov/documents/2024/04/24/2024-07758/nondiscrimination-on-the-basis-of-disability-accessibility-of-web-information-and-services-of-state" target="_blank">
+              The guidelines
+            </a>{' '}
+            released by the Department of Justice under Title II of the Americans with Disabilities Act (ADA) have set a new bar for digital accessibility, which we embrace. Effective April 24, 2024, these standards require all web content to achieve compliance by April 24, 2026.
+            <br />
+            <br />
+            <Accordion defaultValue={true} title={`Ensuring all web content and mobile applications meet the Web Content Accessibility Guidelines (WCAG) 2.1, Level AA standards.`}>
+              <br />
+              This is a cornerstone of our approach to accessibility. We achieve this through rigorous processes and meticulous attention to detail. Our team follows best practices to make sure every user has a seamless and inclusive experience.
+              <br />
+              <br />
+              <Table>
+                <TableRow>
+                  <TableColumn>Semantic HTML</TableColumn>
+                  <TableColumn>We use semantic HTML to define the structure and meaning of web content, ensuring assistive technologies can interpret and navigate the site effectively.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Keyboard Accessibility</TableColumn>
+                  <TableColumn>We ensure all features are accessible via keyboard for users who cannot use a mouse.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Color Contrast</TableColumn>
+                  <TableColumn>We employ high-contrast color schemes to ensure text is readable by users with visual impairments while adhering to UW’s brand guidelines.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Alternative Text</TableColumn>
+                  <TableColumn>We provide descriptive text for images and multimedia content, helping screen readers convey information accurately to visually impaired users.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Resizable Text</TableColumn>
+                  <TableColumn>Our designs allow for text resizing without loss of content or functionality, catering to users who need larger fonts.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Error Identification and Suggestion</TableColumn>
+                  <TableColumn>Our forms are designed to identify errors and provide suggestions for correction, improving usability for those with cognitive disabilities.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Consistent Navigation</TableColumn>
+                  <TableColumn>Our predictable navigation and layouts help users with cognitive and learning disabilities.</TableColumn>
+                </TableRow>
+              </Table>
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Providing alternative text for all visual media, including images, videos, and interactive elements.`}>
+              <br />
+              Alternative text ensures that all users, including those with visual impairments, can fully understand and engage with all content on the website.
+              <br />
+              <br />
+              <Table>
+                <TableRow>
+                  <TableColumn>Descriptive Alt Text for Images</TableColumn>
+                  <TableColumn>We provide concise and descriptive alternative text for all images, enabling screen reader users to understand the context and content of visual elements.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Detailed Descriptions for Complex Images</TableColumn>
+                  <TableColumn>For complex images such as charts, infographics, or detailed diagrams, we offer extended descriptions to convey all critical information effectively.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Captions for Videos</TableColumn>
+                  <TableColumn>All video content includes synchronized captions, ensuring that users with hearing impairments can access the information being presented.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Transcripts for Audio Content</TableColumn>
+                  <TableColumn>We provide textual transcripts for all audio content, making it accessible to users with hearing impairments and allowing for easier comprehension during listening.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Text Alternatives for Interactive Elements</TableColumn>
+                  <TableColumn>Interactive elements, such as buttons, forms, and dynamic content, come with clear text alternatives or labels that describe their function and purpose.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Accessible Icons</TableColumn>
+                  <TableColumn>We use ARIA labels or alternative text for icons and other graphical elements to ensure they communicate their meaning to assistive technologies.</TableColumn>
+                </TableRow>
+              </Table>
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Making complex navigational structures accessible with clear and user-friendly interfaces.`}>
+              <br />
+              This is a fundamental aspect of our design philosophy. We believe that every user deserves an accessible browsing experience, regardless of the complexity of the content.
+              <br />
+              <br />
+              <Table>
+                <TableRow>
+                  <TableColumn>Logical Menu Hierarchies</TableColumn>
+                  <TableColumn>We design navigation menus with logical hierarchies, ensuring that users can easily find the information they need with minimal clicks.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Descriptive Links</TableColumn>
+                  <TableColumn>All links are clearly labeled with descriptive text, so users understand where each link will take them, aiding both screen readers and visual users.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Accessible Dropdown Menus</TableColumn>
+                  <TableColumn>Our dropdown menus are designed to be keyboard-accessible and screen reader-friendly, ensuring inclusivity for all users.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Breadcrumb Navigation</TableColumn>
+                  <TableColumn>We employ breadcrumb navigation to help users understand their current location within the website and easily backtrack if necessary.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Search Functionality</TableColumn>
+                  <TableColumn>We integrate advanced search functionalities, allowing users to quickly locate specific content without navigating through multiple menus.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Consistent Layouts</TableColumn>
+                  <TableColumn>We maintain consistency in layouts and navigation across all pages, so users can predict and understand where to find information.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Skip Navigation Links</TableColumn>
+                  <TableColumn>Our skip links allow users to bypass repetitive content and navigate directly to the main content, which is particularly helpful for screen reader users.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Visual Indicators</TableColumn>
+                  <TableColumn>Clear visual indicators highlight the current page or section, helping users keep track of their navigation path.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>ARIA Landmarks</TableColumn>
+                  <TableColumn>We implement ARIA (Accessible Rich Internet Applications) landmarks to define regions of a page, making it easier for screen reader users to navigate and skip to different sections.</TableColumn>
+                </TableRow>
+              </Table>
+              <br />
+              <br />
+            </Accordion>
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How do I join INTDEV as a Webmaster?`}>
+            <br />
+            In 2025, we plan to grow our team from six to eight members. If you’re passionate about the vocation of being a Webmaster, let’s talk.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://wireframes.internet.dev/examples/features/job-posting" target="_blank">
+              View the job
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`What does the INTDEV office offer?`}>
+            <br />
+            Our space offers hardwood floors, symmetrical fiber internet, a local area network, two full kitchens, three meeting booths, a server room, lunch tables, and dedicated workstations. With 24/7 access and amenities like a color printer, shredder, scanner, gallery lounge, and triple-filtered water, we foster a collaborative environment where you can build your vision alongside like-minded peers.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Apply on Users Garden
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Manage your account
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+              Read our Office Use Agreement
+            </ActionListItem>
+            <br />
+            <br /> <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How do I work with INTDEV at their office?`}>
+            <br />
+            You can find an application link below or by reaching out through social. Please note that the INTDEV reserved desks are invite-only and intended for those with a genuine interest in building things together.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Apply on Users Garden
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Manage your account
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+              Read our Office Use Agreement
+            </ActionListItem>
+            <br />
+            <br /> <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          Use this SVG for a logo without the word “INTDEV.”
+          <br />
+          <br />
+          <InternetDevelopmentLogoMark height="48px" />
+          <br />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          Use this SVG for a logo that includes our brand name.
+          <br />
+          <br />
+          <InternetDevelopmentLogo height="48px" />
+          <br />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <footer className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <img className={styles.image} src="https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/2fb7e012-4fa9-4446-9bf4-e2c5c7e4992a.jpg" />
+          <ActionListItem icon={`⊹`} href="https://wireframes.internet.dev/" target="_blank">
+            Explore INTDEV's open source work
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://bsky.app/profile/internetstudio.bsky.social" target="_blank">
+            Follow us on Bluesky
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://github.com/orgs/internet-development/repositories" target="_blank">
+            Follow us on GitHub
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://www.linkedin.com/company/internet-dev" target="_blank">
+            Follow us on LinkedIn
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://www.instagram.com/internetdevelopmentstudio/" target="_blank">
+            Follow us on Instagram
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://read.cv/teams/intdev" target="_blank">
+            Follow us on Read.cv
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://x.com/internetxstudio" target="_blank">
+            Follow us on X
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+            Get our attention on Telegram
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://sacred.computer" target="_blank">
+            Go explore SRCL
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="/office">
+            Learn more about the Pike Place office
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+            Manage your account
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-acceptable-use" target="_blank">
+            Read our Acceptable Use Policy
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+            Read our Office Use Agreement
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-privacy-policy" target="_blank">
+            Read our Privacy Policy
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-terms-of-service" target="_blank">
+            Read our Terms of Use
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://github.com/internet-development/www-internet-v2" target="_blank">
+            View source
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev" target="_blank">
+            Write a post
+          </ActionListItem>
+          <br />
+          Copyright © 2025. All rights reserved.
+          <br />
+          <br />
+          <br />
+        </div>
+      </footer>
+    </DefaultLayout>
+  );
+}
+
+================
+File: reference/app/robots.ts
+================
+import { MetadataRoute } from 'next';
+
+export default function robots(): MetadataRoute.Robots {
+  return {
+    rules: {
+      userAgent: '*',
+      allow: '/',
+      disallow: '/api/',
+    },
+    sitemap: 'https://internet.dev/sitemap.xml',
+  };
+}
+
+================
+File: reference/app/sitemap.ts
+================
+import { MetadataRoute } from 'next';
+
+export default function sitemap(): MetadataRoute.Sitemap {
+  return [
+    {
+      url: 'https://internet.dev',
+      lastModified: new Date(),
+    },
+  ];
+}
+
+================
+File: reference/common/constants.ts
+================
+export const MAX_SIZE_BYTES = 15728640;
+
+// NOTE(jimmylee):
+// https://github.com/internet-development/apis
+// export const API = `http://localhost:10001/api`;
+export const API = `https://api.internet.dev/api`;
+
+export const Users = {
+  tiers: {
+    UNVERIFIED: 0,
+    VERIFIED: 10,
+    PAYING: 20,
+    GENERAL_CO_WORKING: 30,
+    PARTNER: 40,
+    ADMIN: 100,
+  },
+};
+
+export const Tiers = {
+  PAYING: 899,
+  GENERAL_CO_WORKING: 32900,
+  PARTNER: 279000,
+};
+
+export const Payments = {
+  899: 'PAYING',
+  32900: 'GENERAL_CO_WORKING',
+  279000: 'PARTNER',
+};
+
+export const Payouts = {
+  PAYING: 1500,
+  GENERAL_CO_WORKING: 45000,
+  PARTNER: 45000,
+};
+
+export const LANDSCAPES = [
+  ['Sahara Desert', 'The Sahara stretches across North Africa with shifting dunes that tower above the horizon. Even in its harsh sunlight and cold nights, resilient life finds a way to endure.'],
+  ['Grand Canyon', 'Carved by the Colorado River, the Grand Canyon reveals layers of ancient rock. Its chasms echo with wind and the distant calls of raptors gliding through the afternoon sky.'],
+  ['Amazon Rainforest', 'The Amazon Rainforest teems with biodiversity under a dense green canopy. Rivers and flooded plains sustain countless species, while humid air hangs heavy with the promise of storms.'],
+  ['Rocky Mountains', 'The Rockies rise like rugged spines across the continent. Snowpack feeds rivers that carve valleys where elk graze, and fir trees cling to the slopes.'],
+  ['Gobi Desert', 'The Gobi Desert rolls out in arid sweeps across northern China and southern Mongolia. Sparse grasses and hardy camels testify to its unforgiving climate.'],
+  ['Andes Mountains', 'The Andes dominate western South America with ragged peaks and hidden valleys. Llamas graze on high plateaus, and glaciers feed the rivers far below.'],
+  ['Serengeti Plains', 'The Serengeti spreads under the African sun in rolling grasslands. Wildebeests and zebras migrate in vast herds, guided by the promise of water and fresh pasture.'],
+  ['Yosemite Valley', 'Glacial forces shaped this granite cradle in California. Towering waterfalls cascade from sheer cliffs, while giant sequoias stand in quiet strength.'],
+  ['Namib Desert', 'The Namib Desert clings to the Atlantic coast of southern Africa. Rust-red dunes shift above hidden water tables where desert elephants roam.'],
+  ['Patagonia', 'Patagonia’s windswept plains and jagged peaks stretch across Argentina and Chile. Glaciers calve into turquoise lakes, and guanacos graze on hardy grasses.'],
+  ['Swiss Alps', 'The Swiss Alps rise with sharp spires of snow and ice. Mountain chalets cling to slopes where wildflowers bloom each summer in vibrant displays.'],
+  ['Himalayas', 'The Himalayas hold the world’s highest summits beneath a freezing sky. From lush foothills to lofty glaciers, this range tests life’s resilience.'],
+  ['Icelandic Highlands', 'Iceland’s interior stands stark and raw with volcanic plains, steaming vents, and glacier-fed rivers. The wind sweeps across moss-coated lava fields in lonely gusts.'],
+  ['Atacama Desert', 'The Atacama is among the driest places on Earth. Its scorched soil and salt flats see rare blooms that burst into color after elusive rains.'],
+  ['Redwood Forest', 'Coastal redwoods tower in perpetual mist along the Pacific. Their trunks, thick and ancient, cradle a hidden world of fern and moss.'],
+  ['Scottish Highlands', 'The Highlands roll in rugged hills capped by heather and stone. Lochs reflect ever-shifting skies, and the wind carries the distant clang of sheep bells.'],
+  ['Great Rift Valley', 'This massive geological trench cleaves eastern Africa, where lakes shimmer at the bottom of steep escarpments. Flamingos gather in vast flocks to feed on algae.'],
+  ['Okavango Delta', 'The Okavango spreads like a bright labyrinth of channels and wetlands in Botswana. Seasonal floods create a green haven for elephants, lions, and hippos.'],
+  ['Appalachian Mountains', 'Old and eroded, the Appalachians meander through eastern North America. Their forests host black bears, rhododendrons, and the misty quiet of forest hollows.'],
+  ['Death Valley', 'Death Valley bakes under a relentless sun, reaching some of the hottest temperatures on record. Cracked salt flats testify to evaporated lakes and lost water.'],
+  ['Dolomites', 'Jagged limestone peaks define northern Italy’s Dolomites. Alpine meadows lie below sheer cliffs, where climbers test themselves against silent stone.'],
+  ['Torres del Paine', 'Chile’s Torres del Paine juts into the southern sky with glacier-fed lakes at its base. Guanacos roam windblown plains as ice cracks overhead.'],
+  ['Lofoten Islands', 'Lofoten’s dramatic peaks rise straight from Norway’s cold seas. Fishing villages huddle along rocky shores, while gulls circle overhead in crisp air.'],
+  ['Siberian Tundra', 'The Siberian tundra spans a realm of permafrost and low shrubs. Winters stretch long and bleak, yet migratory birds still find respite here each summer.'],
+  ['Norwegian Fjords', 'Deep fjords carve into Norway’s coast where dark waters mirror towering cliffs. Small farms cling to green patches between rock and sea.'],
+  ['Bungle Bungle Range', 'These striped sandstone domes rise from the Australian outback. Gorges cut deep under a harsh sun, hiding pockets of lush vegetation.'],
+  ['Zion Canyon', 'Zion Canyon glows red and orange under the Utah sky. The Virgin River sculpts sheer walls that watch over narrow trails and hidden pools.'],
+  ['Lake Baikal', 'Lake Baikal in Siberia is the world’s deepest lake. Its waters shimmer with unmatched clarity, home to species found nowhere else on Earth.'],
+  ['Banff National Park', 'Banff crowns the Canadian Rockies with turquoise lakes and towering peaks. Grizzlies roam pine forests while glacier-fed rivers reflect untouched wilderness.'],
+  ['Wadi Rum', 'Wadi Rum’s sandstone cliffs loom in Jordan’s desert, carved by millennia of wind and time. Nomadic tribes wander under a silent, star-filled sky.'],
+  ['Cappadocia', 'Cappadocia’s whimsical rock formations rise over central Turkey’s plains. Soft stone spires hold hidden chapels and the ghosts of ancient dwellers.'],
+];
+
+export const SAMPLE_TABLE_DATA_CHANGE_ME = [
+  ['NAME', 'SYMBOL', 'PRICE', 'HOLDINGS'],
+  ['Bat', 'BAT', '$9.01', '400'],
+  ['Bear', 'BR', '$56.78', '200'],
+  ['Camel', 'CML', '$55.67', '70'],
+  ['Cheetah', 'CHT', '$13.45', '150'],
+  ['Crab', 'CRB', '$15.67', '250'],
+  ['Deer', 'DER', '$29.99', '110'],
+  ['Dolphin', 'DLP', '$77.89', '50'],
+  ['Eagle', 'EGL', '$45.67', '90'],
+  ['Falcon', 'FLC', '$40.22', '85'],
+  ['Fox', 'FOX', '$12.34', '100'],
+  ['Frog', 'FRG', '$7.89', '400'],
+  ['Giraffe', 'GRF', '$44.56', '80'],
+  ['Hedgehog', 'HDG', '$11.23', '200'],
+  ['Horse', 'HRS', '$54.32', '70'],
+  ['Kangaroo', 'KNG', '$15.67', '120'],
+  ['Koala', 'KLA', '$22.34', '150'],
+  ['Leopard', 'LPR', '$14.56', '110'],
+  ['Lemur', 'LMR', '$11.12', '320'],
+  ['Lion', 'LION', '$67.89', '80'],
+  ['Lynx', 'LNX', '$16.78', '130'],
+  ['Mouse', 'MSE', '$5.12', '500'],
+  ['Octopus', 'OCT', '$88.90', '40'],
+  ['Otter', 'OTR', '$20.21', '180'],
+  ['Owl', 'OWL', '$19.01', '160'],
+  ['Panda', 'PND', '$78.90', '55'],
+  ['Peacock', 'PCK', '$12.34', '100'],
+  ['Penguin', 'PNG', '$33.45', '90'],
+  ['Porcupine', 'PRC', '$17.89', '140'],
+  ['Rabbit', 'RBT', '$9.10', '350'],
+  ['Raccoon', 'RCC', '$18.90', '150'],
+  ['Shark', 'SHK', '$89.01', '50'],
+  ['Snake', 'SNK', '$10.11', '300'],
+  ['Squirrel', 'SQL', '$10.12', '250'],
+  ['Tiger', 'TGR', '$34.56', '120'],
+  ['Turtle', 'TRL', '$66.78', '60'],
+  ['Whale', 'WHL', '$123.45', '30'],
+  ['Wolf', 'WLF', '$23.45', '150'],
+  ['Zebra', 'ZBR', '$65.43', '60'],
+];
+
+export const CHESSBOARD_DEFAULT_POSITIONS: string[][] = [
+  ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'],
+  ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],
+  ['', '', '', '', '', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],
+  ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R'],
+];
+
+export const CHESSBOARD_BAD_BISHOP: string[][] = [
+  ['r', ' ', ' ', 'q', ' ', 'r', 'k', ''],
+  [' ', 'b', ' ', ' ', ' ', 'p', 'p', 'p'],
+  ['p', '', 'p', 'b', 'p', 'n', '', ''],
+  ['', '', 'p', 'p', '', '', '', ''],
+  ['Q', '', '', 'P', '', '', '', ''],
+  ['', '', 'P', '', 'P', 'N', 'B', ''],
+  ['P', 'P', ' ', 'N', '', 'P', 'P', 'P'],
+  ['R', ' ', ' ', ' ', 'K', ' ', ' ', 'R'],
+];
+
+export const CHESSBOARD_CHECKMATE_STEP_ONE: string[][] = [
+  [' ', ' ', ' ', '', ' ', 'r', ' ', 'r'],
+  ['p', 'b', ' ', 'n', ' ', 'p', ' ', 'k'],
+  ['', 'q', '', 'N', 'p', '', '', ''],
+  ['', 'p', 'p', 'n', 'P', '', 'Q', ''],
+  ['', 'b', 'p', 'P', 'B', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['P', 'P', ' ', ' ', ' ', 'P', 'P', 'P'],
+  ['R', ' ', ' ', ' ', ' ', 'R', 'K', ''],
+];
+
+export const CHESSBOARD_CHECKMATE_STEP_TWO: string[][] = [
+  [' ', ' ', ' ', '', ' ', 'r', ' ', 'r'],
+  ['p', 'b', ' ', 'n', ' ', ' ', ' ', 'k'],
+  ['', 'q', '', 'N', 'p', '', '', ''],
+  ['', 'p', 'p', 'n', 'P', 'p', 'Q', ''],
+  ['', 'b', 'p', 'P', 'B', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['P', 'P', ' ', ' ', ' ', 'P', 'P', 'P'],
+  ['R', ' ', ' ', ' ', ' ', 'R', 'K', ''],
+];
+
+export const CHESSBOARD_CHECKMATE_STEP_THREE: string[][] = [
+  [' ', ' ', ' ', '', ' ', 'r', ' ', 'r'],
+  ['p', 'b', ' ', 'n', ' ', ' ', ' ', 'k'],
+  ['', 'q', '', 'N', 'p', 'P', '', ''],
+  ['', 'p', 'p', 'n', '', '', 'Q', ''],
+  ['', 'b', 'p', 'P', 'B', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['P', 'P', ' ', ' ', ' ', 'P', 'P', 'P'],
+  ['R', ' ', ' ', ' ', ' ', 'R', 'K', ''],
+];
+
+================
+File: reference/common/hooks.ts
+================
+import * as React from 'react';
+
+export function useDebouncedCallback<T>(ms: number, f: (...args: T[]) => void, deps: any[]): (...args: T[]) => void {
+  let throttled = false;
+  let latestArgs: T | null = null;
+
+  const clearThrottle = () => {
+    throttled = false;
+
+    if (latestArgs !== null) {
+      f(latestArgs);
+      latestArgs = null;
+    }
+  };
+
+  return React.useCallback(
+    (args) => {
+      if (throttled) {
+        latestArgs = args;
+      } else {
+        f(args);
+
+        throttled = true;
+
+        setTimeout(clearThrottle, ms);
+      }
+    },
+    [...deps, ms]
+  );
+}
+
+================
+File: reference/common/position.ts
+================
+export type Placement = 'top' | 'bottom' | 'left' | 'right';
+
+export function calculate(triggerElement: HTMLElement, popoverElement: HTMLElement, scrollX: number = window.scrollX, scrollY: number = window.scrollY): { placement: Placement; position: { top: number; left: number } } {
+  let triggerRect;
+  let popoverRect;
+
+  if (triggerElement) {
+    triggerRect = triggerElement.getBoundingClientRect();
+  }
+
+  if (popoverElement) {
+    popoverRect = popoverElement.getBoundingClientRect();
+  }
+
+  const spaceAbove = triggerRect.top;
+  const spaceBelow = window.innerHeight - triggerRect.bottom;
+  const spaceLeft = triggerRect.left;
+  const spaceRight = window.innerWidth - triggerRect.right;
+
+  const viewportHeightThreshold = window.innerHeight * 0.4;
+  const viewportWidthThreshold = window.innerWidth * 0.4;
+
+  let placement: Placement = 'bottom';
+  let top = 0;
+  let left = 0;
+  if (!popoverRect) {
+    return { placement, position: { top: 0, left: 0 } };
+  }
+
+  if (spaceAbove >= viewportHeightThreshold && spaceAbove >= popoverRect.height) {
+    placement = 'top';
+    top = triggerRect.top + scrollY - popoverRect.height;
+    left = triggerRect.left + scrollX + (triggerRect.width - popoverRect.width) / 2;
+  } else if (spaceBelow >= viewportHeightThreshold && spaceBelow >= popoverRect.height) {
+    placement = 'bottom';
+    top = triggerRect.bottom + scrollY;
+    left = triggerRect.left + scrollX + (triggerRect.width - popoverRect.width) / 2;
+  } else if (spaceRight >= viewportWidthThreshold && spaceRight >= popoverRect.width) {
+    placement = 'right';
+    top = triggerRect.top + scrollY + (triggerRect.height - popoverRect.height) / 2;
+    left = triggerRect.right + scrollX;
+  } else if (spaceLeft >= viewportWidthThreshold && spaceLeft >= popoverRect.width) {
+    placement = 'left';
+    top = triggerRect.top + scrollY + (triggerRect.height - popoverRect.height) / 2;
+    left = triggerRect.left + scrollX - popoverRect.width;
+  } else {
+    placement = 'bottom';
+    top = triggerRect.bottom + scrollY;
+    left = triggerRect.left + scrollX + (triggerRect.width - popoverRect.width) / 2;
+  }
+
+  if (left < 0) left = 0;
+  else if (left + popoverRect.width > window.innerWidth) left = window.innerWidth - popoverRect.width;
+
+  if (top < 0) top = 0;
+  else if (top + popoverRect.height > window.innerHeight + scrollY) top = window.innerHeight + scrollY - popoverRect.height;
+
+  return { placement, position: { top, left } };
+}
+
+================
+File: reference/common/queries.ts
+================
+import * as Constants from '@common/constants';
+import * as Utilities from '@common/utilities';
+
+export async function getData({ route, key, body }, qualifier = 'data') {
+  let result;
+  try {
+    const response = await fetch(route, {
+      method: 'POST',
+      headers: { 'X-API-KEY': key, 'Content-Type': 'application/json' },
+      body: JSON.stringify(body),
+    });
+    result = await response.json();
+  } catch (e) {
+    return null;
+  }
+
+  if (!result) {
+    return null;
+  }
+
+  if (result.error) {
+    return null;
+  }
+
+  if (!result[qualifier]) {
+    return null;
+  }
+
+  return result;
+}
+
+export async function onUserListData({ key }) {
+  const route = `${Constants.API}/data`;
+  const body = {};
+  return await getData({ route, key, body });
+}
+
+export async function onUserDeleteData({ id, key }) {
+  const route = `${Constants.API}/data/delete`;
+  const body = { id };
+  return await getData({ route, key, body });
+}
+
+export async function onRefreshDocuments({ key, type, domain }) {
+  const route = `${Constants.API}/documents`;
+  const body = { type, domain };
+  return await getData({ route, key, body });
+}
+
+export async function onGetDocumentById({ id }) {
+  const route = `${Constants.API}/documents/${id}`;
+  const body = {};
+  return await getData({ route, key: null, body });
+}
+
+export async function onUserCreateDocument({ key, type, domain }) {
+  const route = `${Constants.API}/documents/create`;
+  const body = { type, domain };
+  return await getData({ route, key, body });
+}
+
+export async function onDeleteDocumentById({ id, key }) {
+  const route = `${Constants.API}/documents/delete`;
+  const body = { id };
+  return await getData({ route, key, body });
+}
+
+export async function onUpdateDocumentById({ id, key, data }) {
+  const route = `${Constants.API}/documents/update`;
+  const body = { id, data };
+  return await getData({ route, key, body });
+}
+
+export async function onPublicUserAuthenticate({ email, password }) {
+  const route = `${Constants.API}/users/authenticate`;
+  const body = { email, password };
+  return getData({ route, key: null, body }, 'user');
+}
+
+export async function onPublicUserForgotPassword({ email }) {
+  const route = `${Constants.API}/users/reset-password`;
+  const body = { email, source: 'wireframes.internet.dev' };
+  return getData({ route, key: null, body }, 'success');
+}
+
+export async function onUserChangePassword({ key, password }) {
+  const route = `${Constants.API}/users/update-viewer-password`;
+  const body = { password };
+  return getData({ route, key, body });
+}
+
+export async function onUserRegenerateAPIKey({ email, password }) {
+  const route = `${Constants.API}/users/regenerate-key`;
+  const body = { email, password };
+  return getData({ route, key: null, body }, 'user');
+}
+
+export async function onUserUnsubscribeServices({ key }) {
+  const route = `${Constants.API}/users/subscriptions/unsubscribe`;
+  const body = null;
+  return getData({ route, key, body }, 'user');
+}
+
+export async function onRefreshPosts({ key, type, user_id }) {
+  const route = `${Constants.API}/posts`;
+  const body = { type, user_id };
+  return await getData({ route, key, body });
+}
+
+export async function onUserCreatePost({ id, key, src, type }) {
+  const route = `${Constants.API}/posts/create`;
+  const body = { type, fields: { fileId: id, public: true }, src };
+  return getData({ route, key, body });
+}
+
+export async function onUserCreateThread({ fields, key, src, type }) {
+  const route = `${Constants.API}/posts/create`;
+  const body = { fields, src, type };
+  return getData({ route, key, body });
+}
+
+export async function onUserDeletePost({ id, key }) {
+  const route = `${Constants.API}/posts/delete`;
+  const body = { id };
+  return getData({ route, key, body });
+}
+
+export async function onUserListThreadReplies({ id, key, orderBy }) {
+  const route = `${Constants.API}/posts/all-thread-replies`;
+  const body = { id, orderBy };
+  return getData({ route, key, body });
+}
+
+export async function onUserListThreads({ key, orderBy }) {
+  const route = `${Constants.API}/posts/all-threads`;
+  const body = { orderBy };
+  return getData({ route, key, body });
+}
+
+export async function onUserUploadDataGCS({ domain, file, key }) {
+  let signedResult;
+  const name = file.name;
+  const type = file.type;
+  const size = file.size;
+
+  if (size > Constants.MAX_SIZE_BYTES) {
+    return { error: 'File size exceeds 15mb limit' };
+  }
+
+  try {
+    const route = `${Constants.API}/data/generate-presigned-url-gcs`;
+    const body = { domain, type, file: name, size };
+    signedResult = await getData({ route, key, body }, 'uploadURL');
+  } catch (e) {
+    return null;
+  }
+
+  try {
+    fetch(signedResult.uploadURL, {
+      method: 'PUT',
+      headers: {
+        'Content-Type': 'application/octet-stream',
+      },
+      body: file,
+    });
+  } catch (e) {
+    return null;
+  }
+
+  return signedResult;
+}
+
+export async function onUserUploadDataS3({ domain, file, key }) {
+  let signedResult;
+  const name = file.name;
+  const type = file.type;
+  const size = file.size;
+
+  if (size > Constants.MAX_SIZE_BYTES) {
+    return { error: 'File size exceeds 15mb limit' };
+  }
+
+  try {
+    const route = `${Constants.API}/data/generate-presigned-url`;
+    const body = { domain, type, file: name, size };
+    signedResult = await getData({ route, key, body }, 'uploadURL');
+  } catch (e) {
+    return null;
+  }
+
+  try {
+    fetch(signedResult.uploadURL, {
+      method: 'PUT',
+      body: file,
+    });
+  } catch (e) {
+    return null;
+  }
+
+  return signedResult;
+}
+
+================
+File: reference/common/server.ts
+================
+import * as Utilities from '@common/utilities';
+
+import Cors from '@modules/cors';
+
+// NOTE(jimmylee)
+// import aesjs from 'aes-js';
+/*
+Some endpoints on https://api.internet.dev require server-side decryption. Without it, you won’t be able to perform actions like password recovery or Google authentication. To enable these features, you’ll need to set two environment variables with the correct values, and have an active partnership with us.
+
+When we built this open-source template for learning purposes, we aimed to make it fully open and accessible. However, since we are also running a service, certain restrictions are necessary. We appreciate your understanding.
+
+API_AES_KEY=
+API_IV_KEY=
+*/
+
+/*
+export function decrypt(hex) {
+  if (Utilities.isEmpty(process.env.API_AES_KEY)) {
+    throw new Error('process.env.API_AES_KEY');
+    return;
+  }
+
+  if (Utilities.isEmpty(process.env.API_IV_KEY)) {
+    throw new Error('process.env.API_IV_KEY');
+    return;
+  }
+
+  const aesKey = aesjs.utils.utf8.toBytes(process.env.API_AES_KEY);
+  const base64IV = process.env.API_IV_KEY;
+
+  if (!base64IV) {
+    throw new Error('process.env.API_IV_KEY is undefined. Please set the environment variable.');
+  }
+
+  const ivBytes = aesjs.utils.hex.toBytes(Buffer.from(base64IV, 'base64').toString('hex'));
+  const aesCtr = new aesjs.ModeOfOperation.ctr(aesKey, new aesjs.Counter(ivBytes));
+  const encryptedBytes = aesjs.utils.hex.toBytes(hex);
+  const decryptedBytes = aesCtr.decrypt(encryptedBytes);
+  const decrypted = aesjs.utils.utf8.fromBytes(decryptedBytes);
+
+  return decrypted;
+}
+*/
+
+export function initMiddleware(middleware) {
+  return (req, res) =>
+    new Promise((resolve, reject) => {
+      middleware(req, res, (result) => {
+        if (result instanceof Error) {
+          return reject(result);
+        }
+        return resolve(result);
+      });
+    });
+}
+
+export const cors = initMiddleware(
+  Cors({
+    methods: ['GET', 'POST', 'DELETE', 'OPTIONS'],
+  })
+);
+
+export async function setup(context): Promise<{ sessionKey?: any; viewer?: Record<string, any> | null }> {
+  let viewer = null;
+  let sessionKey = context.req.cookies['sitekey'] || '';
+
+  if (!Utilities.isEmpty(sessionKey)) {
+    try {
+      const response = await fetch('https://api.internet.dev/api/users/viewer', {
+        method: 'PUT',
+        headers: { 'X-API-KEY': sessionKey, 'Content-Type': 'application/json' },
+      });
+      const result = await response.json();
+      if (result && result.viewer) {
+        viewer = result.viewer;
+      }
+    } catch (e) {}
+  }
+
+  return { sessionKey, viewer };
+}
+
+export async function tryKeyWithoutCookie(key): Promise<{ sessionKey?: any; viewer?: Record<string, any> | null }> {
+  let viewer = null;
+
+  if (!Utilities.isEmpty(key)) {
+    try {
+      const response = await fetch('https://api.internet.dev/api/users/viewer', {
+        method: 'PUT',
+        headers: { 'X-API-KEY': key, 'Content-Type': 'application/json' },
+      });
+      const result = await response.json();
+      if (result && result.viewer) {
+        viewer = result.viewer;
+      }
+    } catch (e) {}
+  }
+
+  return { sessionKey: key, viewer };
+}
+
+================
+File: reference/common/utilities.ts
+================
+const hasOwn = {}.hasOwnProperty;
+const localhostDomainRE = /^localhost[\:?\d]*(?:[^\:?\d]\S*)?$/;
+const nonLocalhostDomainRE = /^[^\s\.]+\.\S{2,}$/;
+const protocolAndDomainRE = /^(?:\w+:)?\/\/(\S+)$/;
+
+export function noop() {
+  return null;
+}
+
+export function pluralize(text: string, count: number) {
+  return count > 1 || count === 0 ? `${text}s` : text;
+}
+
+export function getOrdinalNumber(n) {
+  return n + (n > 0 ? ['th', 'st', 'nd', 'rd'][(n > 3 && n < 21) || n % 10 > 3 ? 0 : n % 10] : '');
+}
+
+// NOTE(jimmylee)
+// Stolen from: https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/deepEqual.ts
+export function deepEqual(x: any, y: any): boolean {
+  //@ts-ignore
+  return x && y && typeof x === 'object' && typeof y === 'object'
+    ? Object.keys(x).length === Object.keys(y).length &&
+        //@ts-ignore
+        Object.keys(x).reduce((isEqual, key) => isEqual && deepEqual(x[key], y[key]), true)
+    : x === y;
+}
+
+export function getDomainFromEmailWithoutAnySubdomain(email: string): string {
+  const atIndex = email.lastIndexOf('@');
+  if (atIndex === -1) {
+    return '';
+  }
+
+  const domain = email.slice(atIndex + 1);
+  const domainParts = domain.split('.');
+
+  if (domainParts.length < 2) {
+    return '';
+  }
+
+  const mainDomain = domainParts.slice(-2).join('.');
+  return mainDomain;
+}
+
+export function onHandleThemeChange(className?: string) {
+  const body = document.body;
+
+  body.classList.forEach((existingClass) => {
+    if (existingClass.startsWith('theme-')) {
+      body.classList.remove(existingClass);
+    }
+  });
+
+  if (className) {
+    body.classList.add(className);
+  } else {
+    body.classList.add('theme-light');
+  }
+}
+
+export function onHandleFontChange(className?: string) {
+  const body = document.body;
+
+  if (className) {
+    body.classList.forEach((existingClass) => {
+      if (existingClass.startsWith('font-')) {
+        body.classList.remove(existingClass);
+      }
+    });
+
+    body.classList.add(className);
+    return;
+  }
+
+  body.classList.forEach((existingClass) => {
+    if (existingClass.startsWith('font-')) {
+      body.classList.remove(existingClass);
+    }
+  });
+}
+
+export function formatDollars(value: number): string {
+  return new Intl.NumberFormat('en-US', {
+    style: 'currency',
+    currency: 'USD',
+  }).format(value);
+}
+
+export function calculatePositionWithGutter(rect, objectWidth, viewportWidth, gutter = 24) {
+  const right = viewportWidth - rect.right;
+  const top = rect.top + rect.height + gutter;
+  const side = right + objectWidth >= viewportWidth ? 'left' : 'right';
+  const adjustedRight = side === 'left' ? viewportWidth - objectWidth - gutter : right;
+  return { top, right: adjustedRight, side };
+}
+
+export function calculatePositionWithGutterById(id, objectWidth, viewportWidth, gutter?) {
+  let rect;
+  if (id) {
+    const el = document.getElementById(id);
+    if (el) {
+      rect = el.getBoundingClientRect();
+    }
+  }
+  return calculatePositionWithGutter(rect, objectWidth, viewportWidth, gutter);
+}
+
+export function leftPad(input, length) {
+  const zerosNeeded = length - input.length;
+  if (zerosNeeded <= 0) {
+    return input;
+  }
+
+  const zeros = '0'.repeat(zerosNeeded);
+
+  return zeros + input;
+}
+
+export function toDateISOString(data: string) {
+  const date = new Date(data);
+  const dayOfWeek = date.toLocaleDateString('en-US', {
+    weekday: 'long',
+  });
+  const month = date.toLocaleDateString('en-US', {
+    month: 'long',
+  });
+  const dayOfMonth = getOrdinalNumber(date.getDate());
+  const year = date.getFullYear();
+
+  const formattedDate = `${dayOfWeek}, ${month} ${dayOfMonth}, ${year}`;
+
+  return formattedDate;
+}
+
+export function elide(string, length = 140, emptyState = '...') {
+  if (isEmpty(string)) {
+    return emptyState;
+  }
+
+  if (string.length < length) {
+    return string.trim();
+  }
+
+  return `${string.substring(0, length)}...`;
+}
+
+export function bytesToSize(bytes: number, decimals: number = 2) {
+  if (bytes === 0) return '0 Bytes';
+
+  const k = 1000;
+  const dm = decimals < 0 ? 0 : decimals;
+  const sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
+
+  const i = Math.floor(Math.log(bytes) / Math.log(k));
+
+  return `${(bytes / Math.pow(k, i)).toFixed(dm)} ${sizes[i]}`;
+}
+
+export function isEmpty(text: any) {
+  // NOTE(jimmylee):
+  // If a number gets passed in, it isn't considered empty for zero.
+  if (text === 0) {
+    return false;
+  }
+
+  if (!text) {
+    return true;
+  }
+
+  if (typeof text === 'object') {
+    return true;
+  }
+
+  if (text.length === 0) {
+    return true;
+  }
+
+  text = text.toString();
+
+  return Boolean(!text.trim());
+}
+
+export function createSlug(text: any) {
+  if (isEmpty(text)) {
+    return 'untitled';
+  }
+
+  const a = 'æøåàáäâèéëêìíïîòóöôùúüûñçßÿœæŕśńṕẃǵǹḿǘẍźḧ·/_,:;';
+  const b = 'aoaaaaaeeeeiiiioooouuuuncsyoarsnpwgnmuxzh------';
+  const p = new RegExp(a.split('').join('|'), 'g');
+
+  return text
+    .toString()
+    .toLowerCase()
+    .replace(/\s+/g, '-') // Replace spaces with -
+    .replace(p, (c) => b.charAt(a.indexOf(c))) // Replace special chars
+    .replace(/&/g, '-and-') // Replace & with 'and'
+    .replace(/[^\w\-]+/g, '') // Remove all non-word chars
+    .replace(/\-\-+/g, '-') // Replace multiple - with single -
+    .replace(/^-+/, '') // Trim - from start of text
+    .replace(/-+$/, ''); // Trim - from end of text
+}
+
+export function isUrl(string: any) {
+  if (typeof string !== 'string') {
+    return false;
+  }
+
+  let match = string.match(protocolAndDomainRE);
+  if (!match) {
+    return false;
+  }
+
+  let everythingAfterProtocol = match[1];
+  if (!everythingAfterProtocol) {
+    return false;
+  }
+
+  if (localhostDomainRE.test(everythingAfterProtocol) || nonLocalhostDomainRE.test(everythingAfterProtocol)) {
+    return true;
+  }
+
+  return false;
+}
+
+export function debounce<Args extends unknown[]>(fn: (...args: Args) => void, delay: number) {
+  let timeoutID: number | undefined;
+  let lastArgs: Args | undefined;
+
+  const run = () => {
+    if (lastArgs) {
+      fn(...lastArgs);
+      lastArgs = undefined;
+    }
+  };
+
+  const debounced = (...args: Args) => {
+    clearTimeout(timeoutID);
+    lastArgs = args;
+    timeoutID = window.setTimeout(run, delay);
+  };
+
+  debounced.flush = () => {
+    clearTimeout(timeoutID);
+  };
+
+  return debounced;
+}
+
+export function timeAgo(dateInput: Date | string | number): string {
+  const date = new Date(dateInput);
+  const now = new Date();
+  const secondsPast = (now.getTime() - date.getTime()) / 1000;
+
+  if (secondsPast < 0 || isNaN(secondsPast)) {
+    return '[INVALID]';
+  }
+
+  if (secondsPast < 60) {
+    return 'Just now';
+  } else if (secondsPast < 3600) {
+    const minutes = Math.floor(secondsPast / 60);
+    return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;
+  } else if (secondsPast < 86400) {
+    const hours = Math.floor(secondsPast / 3600);
+    return `${hours} hour${hours > 1 ? 's' : ''} ago`;
+  } else if (secondsPast < 604800) {
+    const days = Math.floor(secondsPast / 86400);
+    return `${days} day${days > 1 ? 's' : ''} ago`;
+  }
+
+  const formattedDate = date.toLocaleDateString('en-US', {
+    month: '2-digit',
+    day: '2-digit',
+    year: 'numeric',
+  });
+
+  return formattedDate;
+}
+
+export function classNames(...args: any[]): string {
+  let classes: string[] = [];
+
+  for (let i = 0; i < arguments.length; i++) {
+    let arg = arguments[i];
+    if (!arg) continue;
+
+    let argType = typeof arg;
+
+    if (argType === 'string' || argType === 'number') {
+      classes.push(arg);
+    } else if (Array.isArray(arg)) {
+      if (arg.length) {
+        let inner = classNames.apply(null, arg);
+        if (inner) {
+          classes.push(inner);
+        }
+      }
+    } else if (argType === 'object') {
+      if (arg.toString !== Object.prototype.toString) {
+        classes.push(arg.toString());
+      } else {
+        for (let key in arg) {
+          if (hasOwn.call(arg, key) && arg[key]) {
+            classes.push(key);
+          }
+        }
+      }
+    }
+  }
+
+  return classes.join(' ');
+}
+
+export async function generateNonce() {
+  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
+  let result = '';
+  const charactersLength = characters.length;
+  for (let i = 0; i < 8; i++) {
+    result += characters.charAt(Math.floor(Math.random() * charactersLength));
+  }
+  return result;
+}
+
+export function filterUndefined(obj) {
+  const res = {};
+  Object.keys(obj)
+    .filter((k) => obj[k] !== undefined)
+    .forEach((k) => (res[k] = obj[k]));
+  return res;
+}
+
+export const isFocusableElement = (element: EventTarget | null): element is HTMLElement => {
+  if (!element || !(element instanceof HTMLElement)) {
+    return false;
+  }
+
+  const focusableSelectors = ['a[href]', 'button', 'input', 'select', 'textarea', '[tabindex]:not([tabindex="-1"])', '[contenteditable="true"]'];
+
+  return element.matches(focusableSelectors.join(', '));
+};
+
+export const findNextFocusable = (element: Element | null, direction: 'next' | 'previous' = 'next'): HTMLElement | null => {
+  if (!element) return null;
+
+  const focusableSelectors = ['a[href]', 'button', 'input', 'select', 'textarea', '[tabindex]:not([tabindex="-1"])', '[contenteditable="true"]'];
+
+  const focusableElements = Array.from(document.querySelectorAll<HTMLElement>(focusableSelectors.join(', ')));
+
+  const currentIndex = focusableElements.indexOf(element as HTMLElement);
+
+  if (currentIndex !== -1) {
+    const nextIndex = direction === 'next' ? (currentIndex + 1) % focusableElements.length : (currentIndex - 1 + focusableElements.length) % focusableElements.length;
+
+    return focusableElements[nextIndex];
+  }
+
+  return null;
+};
+
+export const findFocusableDescendant = (container: Element | null, currentFocused: Element | null = null, direction: 'next' | 'previous' = 'next'): HTMLElement | null => {
+  if (!container) return null;
+
+  const focusableElements = Array.from(container.querySelectorAll<HTMLElement>('a[href], button, input, select, textarea, [tabindex]:not([tabindex="-1"]), [contenteditable="true"]'));
+
+  if (focusableElements.length === 0) return null;
+
+  let index = 0;
+  if (currentFocused) {
+    const currentIndex = focusableElements.indexOf(currentFocused as HTMLElement);
+    if (currentIndex !== -1) {
+      index = direction === 'next' ? currentIndex + 1 : currentIndex - 1;
+    }
+  }
+
+  if (index >= 0 && index < focusableElements.length) {
+    return focusableElements[index];
+  }
+
+  return null;
+};
+
+================
+File: reference/components/detectors/OutsideElementEvent.tsx
+================
+import * as React from 'react';
+
+interface OutsideElementEventProps {
+  className?: string;
+  children: React.ReactNode;
+  onOutsideEvent: (event: MouseEvent | TouchEvent) => void;
+  style?: React.CSSProperties;
+}
+
+const OutsideElementEvent: React.FC<OutsideElementEventProps> = ({ className, children, onOutsideEvent, style }) => {
+  const ref = React.useRef<HTMLDivElement>(null);
+
+  const handleOutsideEvent = React.useCallback(
+    (event: MouseEvent | TouchEvent) => {
+      if (!(event.target instanceof Element)) return;
+
+      if (event.target.hasAttribute('data-detector-ignore')) {
+        return;
+      }
+
+      if (ref.current && !ref.current.contains(event.target as Node)) {
+        onOutsideEvent(event);
+      }
+    },
+    [onOutsideEvent]
+  );
+
+  React.useEffect(() => {
+    document.addEventListener('mousedown', handleOutsideEvent);
+    document.addEventListener('touchstart', handleOutsideEvent);
+
+    return () => {
+      document.removeEventListener('mousedown', handleOutsideEvent);
+      document.removeEventListener('touchstart', handleOutsideEvent);
+    };
+  }, [handleOutsideEvent]);
+
+  return (
+    <div ref={ref} className={className} style={style}>
+      {children}
+    </div>
+  );
+};
+
+export default OutsideElementEvent;
+
+================
+File: reference/components/examples/AS400.module.scss
+================
+.root {
+}
+
+================
+File: reference/components/examples/AS400.tsx
+================
+'use client';
+
+import styles from '@components/AS400.module.scss';
+
+import * as React from 'react';
+
+import Card from '@components/Card';
+import Row from '@components/Row';
+import RowSpaceBetween from '@components/RowSpaceBetween';
+import Table from '@components/Table';
+import TableRow from '@components/TableRow';
+import TableColumn from '@components/TableColumn';
+import TextArea from '@components/TextArea';
+
+type AS400Props = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const AS400 = () => {
+  return (
+    <>
+      <Card>
+        <RowSpaceBetween>
+          <span style={{ minWidth: `10ch` }}>COMMAND</span>
+          <span style={{ minWidth: `10ch` }}>Menu : ⌃+T</span>
+          <span style={{ minWidth: `10ch`, textAlign: 'right' }}>IND333</span>
+        </RowSpaceBetween>
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow style={{ textAlign: 'center' }}>
+            <TableColumn>F O O D&nbsp;&nbsp;D I S T R I B U T I O N</TableColumn>
+          </TableRow>
+          <TableRow style={{ textAlign: 'center' }}>
+            <TableColumn>- - Advance Sales Menu - -</TableColumn>
+          </TableRow>
+        </Table>
+        <br />
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow>
+            <TableColumn>1. Order Entry</TableColumn>
+            <TableColumn>13. Create Texlon/MSI Orders</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>2. Route Recap</TableColumn>
+            <TableColumn>14. Create Posting w/Scanner</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>3. Staging Ticket</TableColumn>
+            <TableColumn></TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>4. Picking Ticket</TableColumn>
+            <TableColumn>15. Order List</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>5. Order Posting</TableColumn>
+            <TableColumn>16. Order Maintenance</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>6. Bill of Lading</TableColumn>
+            <TableColumn>16. Order Hold</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>7. Load Sheets</TableColumn>
+            <TableColumn>18. Order Release</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>8. Order Entry Invoicing</TableColumn>
+            <TableColumn>19. Order Cancellation</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>9. Order Entry Confirmation</TableColumn>
+            <TableColumn>20. Order Change</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>10. Order Entry Processing</TableColumn>
+            <TableColumn>21. Unsettled Invoice Report</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>&nbsp;</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>11. Credit Memo Entry</TableColumn>
+            <TableColumn>- - Transaction Processing Menu - -</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>12. Credit Memo Processing</TableColumn>
+            <TableColumn>- - Main Menu - -</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn></TableColumn>
+            <TableColumn>24. Sign Off</TableColumn>
+          </TableRow>
+        </Table>
+        <br />
+        <br />
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow>
+            <TableColumn>Ready for option number or command</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>
+              <TextArea isBlink />
+            </TableColumn>
+          </TableRow>
+        </Table>
+      </Card>
+      <br />
+      <Card>
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;Option: 1337...&nbsp;&nbsp; Copy: US&nbsp;&nbsp;&nbsp;&nbsp;ITEM ACTIVITY INQUIRY</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>IND333</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Regn: NW</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}></TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;Item #: 6666666</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}></TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GMO HONEYDEW MELON USDA PRIME 72 OZ</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}></TableColumn>
+          </TableRow>
+        </Table>
+        <br />
+        <br />
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow>
+            <TableColumn>Warehouse</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>On Hand</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>On Order</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>In Transit</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>Total</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>W/S</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>Sell</TableColumn>
+          </TableRow>
+
+          <TableRow>
+            <TableColumn>&nbsp;</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;01 SEATTLE</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;02 PORTLAND</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;06 TUKWILA</TableColumn>
+            <TableColumn>89</TableColumn>
+            <TableColumn>162</TableColumn>
+            <TableColumn>162</TableColumn>
+            <TableColumn>413</TableColumn>
+            <TableColumn>7.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;08 KIRKLAND</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;09 ALOHA</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;10 ANCHORAGE</TableColumn>
+            <TableColumn>107</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>324</TableColumn>
+            <TableColumn>511</TableColumn>
+            <TableColumn>5.5</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;13 SILVERDALE</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;17 EUGENE</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;61 FEDERAL WAY</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;63 NE ANCHORAGE</TableColumn>
+            <TableColumn>229</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>162</TableColumn>
+            <TableColumn>391</TableColumn>
+            <TableColumn>4.5</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;64 TUMWATER</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;67 MISSOULA</TableColumn>
+            <TableColumn>201</TableColumn>
+            <TableColumn>648</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>849</TableColumn>
+            <TableColumn>5.2</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;95 TACOMA</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+        </Table>
+        <br />
+        <br />
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow>
+            <TableColumn>CF-3 Exit&nbsp;&nbsp;&nbsp;&nbsp;CF7-Next Item&nbsp;&nbsp;&nbsp;&nbsp;CF21-Print Report</TableColumn>
+          </TableRow>
+        </Table>
+      </Card>
+    </>
+  );
+};
+
+AS400.displayName = 'AS400';
+
+export default AS400;
+
+================
+File: reference/components/examples/DashboardRadar.module.scss
+================
+.customSidebar {
+  display: flex;
+  align-items: center;
+  justify-content: space-between;
+  width: 100%;
+  flex-direction: column;
+  height: calc(var(--theme-line-height-base) * (var(--font-size) * 29.5));
+}
+
+.customTop {
+  min-height: 10%;
+  height: 100%;
+}
+
+.customBottom {
+  flex-shrink: 0;
+  width: 100%;
+}
+
+.root {
+  min-width: 56ch;
+}
+
+.cross {
+  width: 9ch;
+  height: calc(var(--theme-line-height-base) * (var(--font-size) * 7));
+  margin: calc(var(--theme-line-height-base) * (var(--font-size) * 0.5)) 0 calc(var(--theme-line-height-base) * (var(--font-size) * 0.5)) 0;
+  display: flex;
+  justify-content: space-between;
+  flex-direction: column;
+}
+
+.square {
+  width: 4.3ch;
+  height: calc(var(--theme-line-height-base) * (var(--font-size) * 3.4));
+}
+
+.nw {
+  border-right: 2px solid var(--theme-text);
+  border-bottom: 2px solid var(--theme-text);
+}
+
+.ne {
+  border-left: 2px solid var(--theme-text);
+  border-bottom: 2px solid var(--theme-text);
+}
+
+.sw {
+  border-top: 2px solid var(--theme-text);
+  border-right: 2px solid var(--theme-text);
+}
+
+.se {
+  border-top: 2px solid var(--theme-text);
+  border-left: 2px solid var(--theme-text);
+}
+
+.customContent {
+  width: 100%;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  height: calc(var(--theme-line-height-base) * (var(--font-size) * 24.5));
+}
+
+================
+File: reference/components/examples/DashboardRadar.tsx
+================
+import styles from '@components/examples/DashboardRadar.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import ActionButton from '@components/ActionButton';
+import ButtonGroup from '@components/ButtonGroup';
+import Card from '@components/Card';
+import RowSpaceBetween from '@components/RowSpaceBetween';
+import SidebarLayout from '@components/SidebarLayout';
+import Sphere from '@components/svg/Sphere';
+
+const RadarMarker = (props) => {
+  return (
+    <div className={styles.cross}>
+      <RowSpaceBetween>
+        <div className={Utilities.classNames(styles.square, styles.nw)} />
+        <div className={Utilities.classNames(styles.square, styles.ne)} />
+      </RowSpaceBetween>
+      <RowSpaceBetween>
+        <div className={Utilities.classNames(styles.square, styles.sw)} />
+        <div className={Utilities.classNames(styles.square, styles.se)} />
+      </RowSpaceBetween>
+    </div>
+  );
+};
+
+const DashboardRadar = (props) => {
+  return (
+    <div className={styles.root}>
+      <SidebarLayout
+        isReversed
+        sidebar={
+          <Card>
+            <div className={styles.customSidebar}>
+              <div className={styles.customTop}>
+                TIME FROM
+                <ActionButton style={{ width: '100%' }}>11:11:11:11</ActionButton>
+                <br />
+                <br />
+                PRESENT
+                <br />
+                P.O.R.
+                <br />
+                NOSTROMO
+                <br />
+              </div>
+              <div className={styles.customBottom}>
+                HEADING
+                <br />
+                <ButtonGroup isFull items={[{ body: 'N .36' }, { body: 'E .18' }]} />
+                <br />
+                GROUND
+                <br />
+                <ActionButton rootStyle={{ width: '100%' }}>SPEED 78.26</ActionButton>
+                <br />
+                CONDITION
+                <br />
+                CODE
+                <br />
+                <ActionButton style={{ width: '100%' }}>16 S=C75C</ActionButton>
+                <ActionButton>PAST=8</ActionButton>
+                <br />
+                <br />
+                <ActionButton rootStyle={{ width: '100%' }}>System #4</ActionButton>
+                <br />
+                <br />
+                AUTODECOUNT
+                <br />
+                <br />
+                <ActionButton rootStyle={{ width: '100%', textAlign: 'right' }}>3454.94#</ActionButton>
+              </div>
+            </div>
+          </Card>
+        }
+        defaultSidebarWidth={19}
+      >
+        <Card>
+          <RowSpaceBetween>
+            <span style={{ flexShrink: 0 }}>DEORBITAL DESCENT</span>
+            <span style={{ minWidth: '10%', width: '100%', display: 'flex', justifyContent: 'flex-end' }}>
+              <span>
+                <ActionButton>COMMENCE FINAL</ActionButton>
+                <br />
+                <ActionButton>SYSTEM :0L: 76.75 :08:</ActionButton>
+              </span>
+            </span>
+          </RowSpaceBetween>
+        </Card>
+        <br />
+        <Card>
+          <RowSpaceBetween style={{ position: 'absolute', top: 0, left: `6ch`, right: `6ch` }}>
+            <RadarMarker />
+            <RadarMarker />
+          </RowSpaceBetween>
+          <div className={styles.customContent}>
+            <Sphere style={{ transform: 'translateX(24ch) rotateZ(40deg)' }} />
+          </div>
+          <RowSpaceBetween style={{ position: 'absolute', bottom: `calc(var(--theme-line-height-base) * (var(--font-size) * 0.5))`, left: `6ch`, right: `6ch` }}>
+            <RadarMarker />
+            <RadarMarker />
+          </RowSpaceBetween>
+        </Card>
+      </SidebarLayout>
+    </div>
+  );
+};
+
+export default DashboardRadar;
+
+================
+File: reference/components/examples/Denabase.module.scss
+================
+.root {
+  min-width: 68ch;
+  margin-top: calc(var(--theme-line-height-base) * 1rem);
+}
+
+.dna {
+  min-width: 71ch;
+  -webkit-text-size-adjust: 100%;
+}
+
+.tag {
+  width: 3ch;
+  height: calc(var(--theme-line-height-base) * 0.5rem);
+  flex-shrink: 0;
+  box-shadow:
+    inset 2px 0 0 var(--theme-text),
+    inset -2px 0 0 var(--theme-text),
+    inset 0 2px 0 var(--theme-text);
+}
+
+.secondaryTag {
+  width: 3ch;
+  align-self: stretch;
+  flex-shrink: 0;
+  box-shadow:
+    inset 2px 0 0 var(--theme-text),
+    inset -2px 0 0 var(--theme-text),
+    inset 0 2px 0 var(--theme-text);
+}
+
+.small {
+  width: 13ch;
+  flex-shrink: 0;
+  text-align: right;
+}
+
+.smallWithBorder {
+  width: 13ch;
+  flex-shrink: 0;
+  text-align: right;
+  box-shadow: inset 0 2px 0 var(--theme-text);
+}
+
+.smallSection {
+  width: 13ch;
+  flex-shrink: 0;
+  min-width: 10%;
+  text-align: right;
+  box-shadow: inset 0 2px 0 var(--theme-text);
+}
+
+.large {
+  width: 80%;
+  min-width: 10%;
+  text-align: right;
+}
+
+.largeWithBorder {
+  width: 80%;
+  min-width: 10%;
+  text-align: right;
+  box-shadow:
+    inset 0 2px 0 var(--theme-text),
+    inset -2px 0 0 var(--theme-text);
+}
+
+.largeSection {
+  width: 80%;
+  min-width: 10%;
+  text-align: right;
+  box-shadow:
+    inset 0 2px 0 var(--theme-text),
+    inset -2px 0 0 var(--theme-text);
+}
+
+.absoluteTag {
+  top: calc(var(--theme-line-height-base) * -0.5rem);
+  left: 0;
+  height: calc(var(--theme-line-height-base) * 0.5rem);
+  width: 14.2ch;
+  background: var(--theme-background);
+  position: absolute;
+  box-shadow:
+    inset 2px 0 0 var(--theme-text),
+    inset -2px 0 0 var(--theme-text),
+    inset 0 2px 0 var(--theme-text);
+}
+
+.box {
+  width: 7.1ch;
+  flex-shrink: 0;
+  height: calc(var(--theme-line-height-base) * 3rem);
+  display: inline-flex;
+  align-items: center;
+  justify-content: center;
+  box-shadow:
+    inset -2px 0 0 var(--theme-text),
+    inset 0 2px 0 var(--theme-text),
+    inset 0 -2px 0 var(--theme-text);
+
+  &:first-child {
+    box-shadow:
+      inset 2px 0 0 var(--theme-text),
+      inset -2px 0 0 var(--theme-text),
+      inset 0 2px 0 var(--theme-text),
+      inset 0 -2px 0 var(--theme-text);
+  }
+}
+
+================
+File: reference/components/examples/Denabase.tsx
+================
+'use client';
+
+import styles from '@components/examples/Denabase.module.scss';
+
+import * as React from 'react';
+
+import ActionButton from '@components/ActionButton';
+import Card from '@components/Card';
+import Divider from '@components/Divider';
+import Row from '@components/Row';
+import RowSpaceBetween from '@components/RowSpaceBetween';
+import SidebarLayout from '@components/SidebarLayout';
+
+const Denabase = (props) => {
+  return (
+    <>
+      <Card style={{ overflowWrap: 'break-word' }}>
+        <Row>
+          <RowSpaceBetween>
+            <ActionButton>TR5342120027455925897981</ActionButton>
+            <ActionButton>02.14.2021</ActionButton>
+          </RowSpaceBetween>
+          <Divider type="GRADIENT" />
+          <div className={styles.dna}>
+            T-CA-AA-AA-TA-TC-GG-GC-AC-AT-TA-TT-TA-TT-TG-CC-GC-TC-GG-GA-AG-TA-GA-A
+            <br />
+            A-TG-GT-AC-AT-GT-GT-TT-TA-TG-AT-TT-CT-CG-CA-GT-GA-AA-AA-GC-AA-CG-AA-C
+            <br />
+            C-TC-GC-CC-TT-AG-AT-TC-TA-TA-GC-TG-CT-CT-GA-GA-CC-GC-AC-TG-GC-AA-GC-A
+            <br />
+            G-AA-AC-TC-CG-CA-TT-CA-GG-CA-GT-CC-TC-CA-TG-CA-CT-TC-CT-GC-CT-GT-CT-G
+            <br />
+            C-TG-AA-CC-TA-TT-AT-TA-GA-GA-TG-GA-CT-GC-AG-TT-CT-CA-AT-CA-CA-CG-GA-T
+            <br />
+            C-TG-AT-AC-CT-GC-TG-GT-AT-GT-TC-CT-GA-TA-CC-CA-CA-GA-CA-GC-GC-CC-GA-A
+            <br />
+            T-TT-TG-GC-AA-CC-GA-AC-TT-CT-CA-AC-AA-AA-CC-GC-CT-AG-TT-GC-TA-AT-TT-G
+            <br />
+            G-TG-AC-CT-GA-CT-GA-AT-TG-TC-AT-TA-AA-CA-CT-CC-TG-CT-AA-GA-TG-CG-AA-G
+            <br />
+            C-TA-TT-AT-AG-TG-TT-TT-GT-AC-AG-GC-TA-TT-TT-GC-GT-GA-AA-CG-CA-AA-CG-C
+            <br />
+            G-TT-GC-AT-TT-CA-GA-AT-TC-CG-TG-CA-TA-GT-TA-TC-TC-AT-GC-CG-TG-CT-CT-T
+            <br />
+            G-AT-TA-TT-GA-CA-TA-TG-CA-GT-TC-GT-CC-TA-AT-CC-GC-GC-CT-GG-TC-TT-TA-G
+            <br />
+            T-CA-CT-AA-CC-GA-CC-CT-TA-GT-AT-TG-TT-CT-CT-CA-AC-AA-AA-TG-TG-TT-AA-A
+            <br />
+            C-CG-GC-AT-AA-TC-TG-GT-GA-TC-GG-GA-GA-TC-CA-GA-GA-AA-CA-CA-CC-TT-GG-G
+            <br />
+            C-TA-GA-TG-CC-CT-AC-AT-TA-GA-TA-AG-GG-GT-CT-AT-AC-GG-GC-GG-GG-TT-AG-T
+            <br />
+            A-CA-CC-TT-GA-GC-GT-AT-AG-GA-GA-GT-AA-CG-AG-GT-GG-TT-GT-CG-TG-GG-AG-G
+            <br />
+            A-GG-AG-TA-TG-TT-CT-CC-CT-TA-CT-AG-TT-GC-CG-AT-AA-CA-GA-TA-CT-GA-TG-T
+            <br />
+            C-TG-GT-AA-TT-GC-CA-GT-CA-TG-GT-TG-TA-GT-AG-CC-GG-GA-CC-CG-CA-GT-CT-G
+            <br />
+            G-GT-AG-CG-CC-TA-AC-AG-AT-AA-GG-GG-GC-CT-AC-TC-CC-GC-CC-TG-GT-CG-GC-C
+            <br />
+            T-GA-TC-AT-AA-AC-CT-CT-GT-AA-TA-CC-AT-GG-GC-CA-CG-TT-AG-GC-GT-CG-AT-G
+            <br />
+            C-CG-GA-CC-CA-TA-TC-TT-TA-CA-TC-AT-CT-CT-TT-CA-TA-GA-AG-TA-CC-CA-CT-T
+            <br />
+          </div>
+          <Divider type="GRADIENT" />
+        </Row>
+      </Card>
+      <br />
+      <Card>
+        <SidebarLayout
+          sidebar={
+            <Card style={{ padding: `0 0 0 0` }}>
+              <br />
+              <br />
+              <Row style={{ textAlign: 'center' }}>╳</Row>
+              <br />
+              <br />
+            </Card>
+          }
+          defaultSidebarWidth={19}
+        >
+          <Card style={{ padding: 0, marginLeft: `1ch`, minWidth: `30ch` }}>
+            <br />
+            <br />
+            <br />
+            <br />
+            <Row style={{ textAlign: 'right' }}>NO DATA</Row>
+          </Card>
+        </SidebarLayout>
+        <div className={styles.root}>
+          <RowSpaceBetween>
+            <div className={styles.tag}></div>
+            <div className={styles.small}></div>
+            <div className={styles.tag}></div>
+            <div className={styles.large}></div>
+          </RowSpaceBetween>
+          <RowSpaceBetween>
+            <div className={styles.secondaryTag}>
+              <br />
+              <br />
+            </div>
+            <div className={styles.smallSection}>
+              <br />
+              2181&nbsp;
+              <br />
+              <br />
+            </div>
+            <div className={styles.secondaryTag}></div>
+            <div className={styles.largeSection}>
+              <br />
+              UNKNOWN&nbsp;&nbsp;
+              <br />
+              <br />
+            </div>
+          </RowSpaceBetween>
+          <RowSpaceBetween>
+            <div className={styles.tag}></div>
+            <div className={styles.smallWithBorder}></div>
+            <div className={styles.tag}></div>
+            <div className={styles.largeWithBorder}></div>
+          </RowSpaceBetween>
+          <RowSpaceBetween>
+            <div className={styles.secondaryTag}>
+              <br />
+              <br />
+            </div>
+            <div className={styles.smallSection}>
+              <br />
+              DECEASED&nbsp;
+              <br />
+              <br />
+            </div>
+            <div className={styles.secondaryTag}></div>
+            <div className={styles.largeSection}>
+              <br />
+              MORRILLCOLE&nbsp;&nbsp;
+              <br />
+              <br />
+            </div>
+          </RowSpaceBetween>
+          <RowSpaceBetween style={{ position: 'relative' }}>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.absoluteTag}></div>
+          </RowSpaceBetween>
+        </div>
+      </Card>
+    </>
+  );
+};
+
+export default Denabase;
+
+================
+File: reference/components/examples/MessagesInterface.tsx
+================
+import Avatar from '@components/Avatar';
+import ActionButton from '@components/ActionButton';
+import Divider from '@components/Divider';
+import DropdownMenuTrigger from '@components/DropdownMenuTrigger';
+import Indent from '@components/Indent';
+import Input from '@components/Input';
+import Message from '@components/Message';
+import MessageViewer from '@components/MessageViewer';
+import ModalError from '@components/modals/ModalError';
+import Navigation from '@components/Navigation';
+import RowEllipsis from '@components/RowEllipsis';
+import SidebarLayout from '@components/SidebarLayout';
+
+import * as React from 'react';
+
+interface MessagesInterfaceProps extends React.HTMLAttributes<HTMLSpanElement> {}
+
+const ChatPreviewInline = (props) => {
+  return <RowEllipsis style={{ opacity: 0.5, marginBottom: `10px` }}>{props.children}</RowEllipsis>;
+};
+
+const MessagesInterface: React.FC<MessagesInterfaceProps> = () => {
+  return (
+    <div style={{ minWidth: '28ch' }}>
+      <Navigation
+        logo="✶"
+        left={
+          <>
+            <DropdownMenuTrigger
+              items={[
+                {
+                  icon: '⊹',
+                  children: 'Open',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'New Message',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Quick Look',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Close Messages',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Open Conversation in New Window',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Print...',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+              ]}
+            >
+              <ActionButton>FILE</ActionButton>
+            </DropdownMenuTrigger>
+
+            <DropdownMenuTrigger
+              items={[
+                {
+                  icon: '⊹',
+                  children: 'Undo',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Redo',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Cut',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Copy',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Paste',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Paste and Match Style',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Delete',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Select All',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Find...',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Find Next',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Find Previous',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Spelling and Grammar',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Substitutions',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Speech',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Send Message',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Reply to Last Message',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Tapback Last Message',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Edit Last Message',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Autofill',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Start Dictation',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Emoji & Symbols',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+              ]}
+            >
+              <ActionButton>EDIT</ActionButton>
+            </DropdownMenuTrigger>
+            <DropdownMenuTrigger
+              items={[
+                {
+                  icon: '⊹',
+                  children: 'Show Tab Bar',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Show All Tabs',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Make Text Bigger',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Make Text Normal Size',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Make Text Smaller',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'All Messages',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Known Senders',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Unknown Senders',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Unread Messages',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Recently Delete',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Show Sidebar',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Enter Full Screen',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+              ]}
+            >
+              <ActionButton>VIEW</ActionButton>
+            </DropdownMenuTrigger>
+          </>
+        }
+        right={
+          <>
+            <DropdownMenuTrigger
+              items={[
+                {
+                  icon: '⊹',
+                  children: 'Search',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Messages Help',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+              ]}
+            >
+              <ActionButton>HELP</ActionButton>
+            </DropdownMenuTrigger>
+          </>
+        }
+      ></Navigation>
+      <Divider type="DOUBLE" />
+      <SidebarLayout
+        defaultSidebarWidth={12}
+        isShowingHandle={true}
+        sidebar={
+          <>
+            <Avatar>
+              <Indent>
+                Arthur
+                <br />
+                <ChatPreviewInline>No, it has to be more unique</ChatPreviewInline>
+              </Indent>
+            </Avatar>
+            <Avatar>
+              <Indent>
+                Ariadne
+                <br />
+                <ChatPreviewInline>No. Just you.</ChatPreviewInline>
+              </Indent>
+            </Avatar>
+            <Avatar>
+              <Indent>
+                Eames
+                <br />
+                <ChatPreviewInline>dream a little bigger</ChatPreviewInline>
+              </Indent>
+            </Avatar>
+            <Avatar>
+              <Indent>
+                Yusef
+                <br />
+                <ChatPreviewInline>Depends on the dream.</ChatPreviewInline>
+              </Indent>
+            </Avatar>
+            <Avatar>
+              <Indent>
+                Saito
+                <br />
+                <ChatPreviewInline>I bought the airline.</ChatPreviewInline>
+              </Indent>
+            </Avatar>
+          </>
+        }
+      >
+        <Message>Why are they all looking at me?</Message>
+        <MessageViewer>Because my subconscious feels that someone else is creating this world. The more you change things, the quicker the projections start to converge on you.</MessageViewer>
+        <Message>Converge?</Message>
+        <MessageViewer>It's the foreign nature of the dreamer. They attack like white blood cells fighting an infection.</MessageViewer>
+        <Message>They're going to attack us?</Message>
+        <MessageViewer>No. Just you.</MessageViewer>
+        <br />
+        <br />
+        <Input autoComplete="off" isBlink={true} label="Message" name="test_message_interface" />
+      </SidebarLayout>
+    </div>
+  );
+};
+
+export default MessagesInterface;
+
+================
+File: reference/components/examples/UpdatingDataTable.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+import DataTable from '@components/DataTable';
+
+const UpdatingDataTable = (props) => {
+  const [tableData, setTableData] = React.useState(props.data);
+
+  React.useEffect(() => {
+    const interval = setInterval(() => {
+      setTableData((prevData) => {
+        const header = prevData[0];
+        const rows = prevData.slice(1);
+
+        const updatedRows = rows.map((row) => {
+          const currentPrice = parseFloat(row[2].replace('$', ''));
+          const currentHoldings = parseInt(row[3], 10);
+          const priceChangeFactor = 1 + (Math.random() - 0.5) * 0.1;
+          const newPrice = currentPrice * priceChangeFactor;
+          const holdingsChange = Math.floor((Math.random() - 0.5) * 20);
+          const newHoldings = Math.max(1, currentHoldings + holdingsChange);
+
+          return [row[0], row[1], `$${newPrice.toFixed(2)}`, newHoldings.toString()];
+        });
+
+        updatedRows.sort((a, b) => {
+          const priceA = parseFloat(a[2].replace('$', ''));
+          const priceB = parseFloat(b[2].replace('$', ''));
+          return priceB - priceA;
+        });
+
+        return [header, ...updatedRows];
+      });
+    }, 1000);
+
+    return () => clearInterval(interval);
+  }, []);
+
+  return (
+    <>
+      <DataTable data={tableData} />
+    </>
+  );
+};
+
+export default UpdatingDataTable;
+
+================
+File: reference/components/modals/ModalAlert.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalAlert.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalAlert.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import Card from '@components/Card';
+
+interface ModalAlertProps {
+  buttonText?: string | any;
+  message: string;
+}
+
+function ModalAlert({ message, buttonText }: ModalAlertProps) {
+  const { close } = useModals();
+
+  return (
+    <div className={styles.root}>
+      <Card title="ALERT">
+        {message}
+        <br />
+        <br />
+        <Button onClick={() => close()}>{Utilities.isEmpty(buttonText) ? 'Close' : buttonText}</Button>
+      </Card>
+    </div>
+  );
+}
+
+export default ModalAlert;
+
+================
+File: reference/components/modals/ModalCanvasPlatformer.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalCanvasPlatformer.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalCanvasPlatformer.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import CanvasPlatformer from '@components/CanvasPlatformer';
+import Card from '@components/Card';
+
+interface ModalCanvasPlatformerProps {
+  buttonText?: string | any;
+}
+
+function ModalCanvasPlatformer({ buttonText }: ModalCanvasPlatformerProps) {
+  const { close } = useModals();
+
+  return (
+    <div className={styles.root}>
+      <Card title="ALERT">
+        <CanvasPlatformer rows={12} />
+        <br />
+        <br />
+        <Button onClick={() => close()}>{Utilities.isEmpty(buttonText) ? 'Close' : buttonText}</Button>
+      </Card>
+    </div>
+  );
+}
+
+export default ModalCanvasPlatformer;
+
+================
+File: reference/components/modals/ModalCanvasSnake.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalCanvasSnake.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalCanvasSnake.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import CanvasSnake from '@components/CanvasSnake';
+import Card from '@components/Card';
+
+interface ModalCanvasSnakeProps {
+  buttonText?: string | any;
+}
+
+function ModalCanvasSnake({ buttonText }: ModalCanvasSnakeProps) {
+  const { close } = useModals();
+
+  return (
+    <div className={styles.root}>
+      <Card title="CANVAS PLATFORMER">
+        <CanvasSnake rows={12} />
+        <br />
+        <br />
+        <Button onClick={() => close()}>{Utilities.isEmpty(buttonText) ? 'Close' : buttonText}</Button>
+      </Card>
+    </div>
+  );
+}
+
+export default ModalCanvasSnake;
+
+================
+File: reference/components/modals/ModalChess.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalChess.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalChess.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useHotkeys } from '@modules/hotkeys';
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import CardDouble from '@components/CardDouble';
+import Chessboard from '@components/Chessboard';
+
+interface ModalErrorProps {
+  buttonText?: string | any;
+  board: string[][];
+  title?: string;
+}
+
+function ModalChess({ board, buttonText, title }: ModalErrorProps) {
+  const { close } = useModals();
+
+  useHotkeys('enter', () => close());
+
+  return (
+    <div className={styles.root}>
+      <CardDouble title={title} style={{ textAlign: 'center' }}>
+        <Chessboard board={board} />
+        <br />
+        <br />
+        <Button onClick={() => close()}>{Utilities.isEmpty(buttonText) ? 'CLOSE' : buttonText}</Button>
+      </CardDouble>
+    </div>
+  );
+}
+
+export default ModalChess;
+
+================
+File: reference/components/modals/ModalCreateAccount.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalCreateAccount.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalAlert.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import CardDouble from '@components/CardDouble';
+import Checkbox from '@components/Checkbox';
+import Input from '@components/Input';
+import RadioButtonGroup from '@components/RadioButtonGroup';
+
+function ModalCreateAccount() {
+  const { close } = useModals();
+
+  return (
+    <div className={styles.root}>
+      <CardDouble title="NEW ACCOUNT">
+        Create a new MakeBelieve™ account, where anything is possible at your command line in the browser.
+        <br />
+        <br />
+        <RadioButtonGroup
+          defaultValue="modal_developer"
+          options={[
+            { value: 'modal_individual', label: 'I’m using this for personal use.' },
+            { value: 'modal_developer', label: 'I’m building or creating something for work.' },
+            { value: 'modal_company', label: 'We’re using this as a team or organization.' },
+          ]}
+        />
+        <br />
+        <Input autoComplete="off" label="USERNAME" placeholder="Choose a username (e.g., SurfGirl29)" name="modal_username" />
+        <Input autoComplete="off" label="PASSWORD" placeholder="Create a password (8+ characters)" type="password" name="modal_password" />
+        <Input autoComplete="off" label="CONFIRM" placeholder="Type it again" type="password" name="modal_confirm" />
+        <br />
+        <Checkbox name="modal_terms">I agree to the Terms of Service, Data Privacy Policy, and Acceptable Use Guidelines.</Checkbox>
+        <Checkbox name="modal_goodwill">I agree not to use this service for unlawful purposes.</Checkbox>
+        <br />
+        <Button onClick={() => close()}>Create an account</Button>
+      </CardDouble>
+    </div>
+  );
+}
+
+export default ModalCreateAccount;
+
+================
+File: reference/components/modals/ModalError.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalError.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalError.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useHotkeys } from '@modules/hotkeys';
+import { useModals } from '@components/page/ModalContext';
+
+import ActionButton from '@components/ActionButton';
+import Button from '@components/Button';
+import CardDouble from '@components/CardDouble';
+import Grid from '@components/Grid';
+
+interface ModalErrorProps {
+  buttonText?: string | any;
+  message: string | any;
+  title?: string;
+}
+
+// TODO(jimmylee)
+// Enter doesn't always work for some reason.
+function ModalError({ message, buttonText, title }: ModalErrorProps) {
+  const { close } = useModals();
+
+  useHotkeys('enter', () => close());
+
+  return (
+    <div className={styles.root}>
+      <CardDouble title={title}>
+        <br />
+        {message}
+        <Grid>
+          <ul>
+            <li>
+              Press{' '}
+              <ActionButton hotkey="⏎" onClick={() => close()}>
+                ENTER
+              </ActionButton>{' '}
+              to continue.
+            </li>
+          </ul>
+        </Grid>
+      </CardDouble>
+    </div>
+  );
+}
+
+export default ModalError;
+
+================
+File: reference/components/modals/ModalMatrixModes.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalMatrixModes.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalMatrixModes.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import Card from '@components/Card';
+import MatrixLoader from '@components/MatrixLoader';
+
+interface ModalMatrixModesProps {
+  buttonText?: string | any;
+}
+
+function ModalMatrixModes({ buttonText }: ModalMatrixModesProps) {
+  const { close } = useModals();
+
+  return (
+    <div className={styles.root}>
+      <Card title="MATRIX MODES">
+        <Card title="KATAKANA DEFAULT">
+          <MatrixLoader rows={32} mode="katakana" />
+        </Card>
+        <Card title="GREEK LTR">
+          <MatrixLoader direction="left-to-right" rows={8} mode="greek" />
+        </Card>
+        <br />
+        <br />
+        <Button onClick={() => close()}>{Utilities.isEmpty(buttonText) ? 'Close' : buttonText}</Button>
+      </Card>
+    </div>
+  );
+}
+
+export default ModalMatrixModes;
+
+================
+File: reference/components/page/DefaultActionBar.module.scss
+================
+.root {
+  position: fixed;
+  top: 0;
+  left: 2ch;
+  z-index: 1;
+}
+
+================
+File: reference/components/page/DefaultActionBar.tsx
+================
+'use client';
+
+import styles from '@components/page/DefaultActionBar.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { toggleDebugGrid } from '@components/DebugGrid';
+import { useHotkeys } from '@modules/hotkeys';
+
+import ActionBar from '@components/ActionBar';
+import ButtonGroup from '@components/ButtonGroup';
+
+function isElement(target: EventTarget | null): target is Element {
+  return target instanceof Element;
+}
+
+function isHTMLElement(target: EventTarget | null): target is HTMLElement {
+  return target instanceof HTMLElement;
+}
+
+const findFocusableParent = (element: Element | null): Element | null => {
+  while (element) {
+    element = element.parentElement;
+    if (element && Utilities.isFocusableElement(element)) {
+      return element;
+    }
+  }
+  return null;
+};
+
+const findNextFocusableSibling = (element: Element, direction: 'next' | 'previous'): HTMLElement | null => {
+  let sibling = direction === 'next' ? element.nextElementSibling : element.previousElementSibling;
+
+  while (sibling) {
+    if (Utilities.isFocusableElement(sibling)) {
+      return sibling as HTMLElement;
+    }
+
+    const focusableDescendant = Utilities.findFocusableDescendant(sibling, null, direction);
+    if (focusableDescendant) {
+      return focusableDescendant;
+    }
+
+    sibling = direction === 'next' ? sibling.nextElementSibling : sibling.previousElementSibling;
+  }
+
+  return null;
+};
+
+const findNextFocusableAncestor = (element: Element, direction: 'next' | 'previous'): HTMLElement | null => {
+  let ancestor = element.parentElement;
+
+  while (ancestor) {
+    const nextFocusable = findNextFocusableSibling(ancestor, direction);
+    if (nextFocusable) {
+      return nextFocusable;
+    }
+    ancestor = ancestor.parentElement;
+  }
+
+  return null;
+};
+
+const useGlobalNavigationHotkeys = () => {
+  const onHandleSubmit = (event: KeyboardEvent) => {
+    const target = event.target;
+    if (Utilities.isFocusableElement(target)) {
+      event.preventDefault();
+      (target as HTMLElement).click();
+    }
+  };
+
+  const onHandleNextFocus = (event: KeyboardEvent) => {
+    const target = event.target;
+
+    if (Utilities.isFocusableElement(target)) {
+      event.preventDefault();
+
+      const nextFocusable = Utilities.findNextFocusable(target as Element, 'next');
+      if (nextFocusable) {
+        nextFocusable.focus();
+      }
+    }
+  };
+
+  const onHandlePreviousFocus = (event: KeyboardEvent) => {
+    const target = event.target;
+
+    if (Utilities.isFocusableElement(target)) {
+      event.preventDefault();
+
+      const previousFocusable = Utilities.findNextFocusable(target as Element, 'previous');
+      if (previousFocusable) {
+        previousFocusable.focus();
+      }
+    }
+  };
+
+  useHotkeys('ArrowDown', onHandleNextFocus);
+  useHotkeys('ArrowUp', onHandlePreviousFocus);
+  useHotkeys('ArrowRight', onHandleNextFocus);
+  useHotkeys('ArrowLeft', onHandlePreviousFocus);
+  useHotkeys('Enter', onHandleSubmit);
+  useHotkeys(' ', onHandleSubmit);
+};
+
+interface DefaultActionBarProps {
+  items?: {
+    hotkey: string;
+    onClick: () => void;
+    body: React.ReactNode;
+    items?: any;
+  }[];
+}
+
+const DefaultActionBar: React.FC<DefaultActionBarProps> = ({ items = [] }) => {
+  const [isGrid, setGrid] = React.useState(false);
+  useHotkeys('ctrl+g', () => toggleDebugGrid());
+
+  useGlobalNavigationHotkeys();
+
+  return (
+    <div className={styles.root}>
+      <ActionBar
+        items={[
+          {
+            hotkey: '⌃+O',
+            body: 'Fonts',
+            openHotkey: 'ctrl+o',
+            items: [
+              {
+                icon: '⊹',
+                children: 'Commit Mono V143 [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-commit-mono'),
+              },
+              {
+                icon: '⊹',
+                children: 'Departure Mono [MIT]',
+                onClick: () => Utilities.onHandleFontChange('font-use-departure-mono'),
+              },
+              {
+                icon: '⊹',
+                children: 'Fira Code [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-fira-code'),
+              },
+              {
+                icon: '⊹',
+                children: 'Fragment Mono [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-fragment-mono'),
+              },
+              {
+                icon: '⊹',
+                children: 'Geist Mono [OFL] [DEFAULT]',
+                onClick: () => Utilities.onHandleFontChange(''),
+              },
+              {
+                icon: '⊹',
+                children: 'Iosevka Term [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-iosevka-term'),
+              },
+              {
+                icon: '⊹',
+                children: 'JetBrains Mono [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-jet-brains-mono'),
+              },
+              {
+                icon: '⊹',
+                children: 'SFMono Square [FOSS]',
+                onClick: () => Utilities.onHandleFontChange('font-use-sfmono-square'),
+              },
+              {
+                icon: '⊹',
+                children: 'Server Mono 0.0.6 [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-server-mono'),
+              },
+              {
+                icon: '⊹',
+                children: 'TX-02 Berkeley Mono™',
+                onClick: () => Utilities.onHandleFontChange('font-use-berkeley-mono'),
+              },
+            ],
+          },
+          {
+            hotkey: '⌃+T',
+            body: 'Theme',
+            openHotkey: 'ctrl+t',
+            items: [
+              {
+                icon: '⊹',
+                children: 'Refined White [DEFAULT]',
+                onClick: () => Utilities.onHandleThemeChange(''),
+              },
+              {
+                icon: '⊹',
+                children: 'Black Midnight Vapor',
+                onClick: () => Utilities.onHandleThemeChange('theme-dark'),
+              },
+              {
+                icon: '⊹',
+                children: 'U-571 Code Red',
+                onClick: () => Utilities.onHandleThemeChange('theme-black-red'),
+              },
+              {
+                icon: '⊹',
+                children: 'Digital Bioluminescence',
+                onClick: () => Utilities.onHandleThemeChange('theme-black-teal'),
+              },
+              {
+                icon: '⊹',
+                children: 'Operation Safe Blue',
+                onClick: () => Utilities.onHandleThemeChange('theme-blue'),
+              },
+              {
+                icon: '⊹',
+                children: 'Neon Green Garden',
+                onClick: () => Utilities.onHandleThemeChange('theme-green'),
+              },
+              {
+                icon: '⊹',
+                children: 'Kirkland Signature AS/400',
+                onClick: () => Utilities.onHandleThemeChange('theme-black-green'),
+              },
+            ],
+          },
+          {
+            hotkey: '⌃+G',
+            onClick: () => {
+              toggleDebugGrid();
+            },
+            body: 'Grid',
+            selected: false,
+          },
+          ...items,
+        ]}
+      />
+    </div>
+  );
+};
+
+export default DefaultActionBar;
+
+================
+File: reference/components/page/DefaultLayout.module.scss
+================
+.body {
+  width: 100%;
+}
+
+.pixel {
+  height: 1px;
+  left: 0;
+  position: absolute;
+  top: 0;
+  width: 1px;
+}
+
+================
+File: reference/components/page/DefaultLayout.tsx
+================
+import styles from '@components/page/DefaultLayout.module.scss';
+
+import * as React from 'react';
+
+interface DefaultLayoutProps {
+  previewPixelSRC: string;
+  children?: React.ReactNode;
+}
+
+const DefaultLayout: React.FC<DefaultLayoutProps> = ({ previewPixelSRC, children }) => {
+  return (
+    <div className={styles.body}>
+      <img className={styles.pixel} src={previewPixelSRC} alt="" />
+      {children}
+    </div>
+  );
+};
+
+export default DefaultLayout;
+
+================
+File: reference/components/page/ModalContext.tsx
+================
+import * as React from 'react';
+
+export type ModalComponent<P = {}> = React.ComponentType<React.PropsWithoutRef<P>>;
+
+export interface ModalState<P = any> {
+  key: string;
+  component: ModalComponent<P>;
+  props: P;
+}
+
+interface ModalContextType {
+  modalStack: ModalState[];
+  open: <P>(component: ModalComponent<P>, props: P) => string;
+  close: (key?: string) => void;
+}
+
+const ModalContext = React.createContext<ModalContextType | null>(null);
+
+export const ModalProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
+  const [modalStack, setModalStack] = React.useState<ModalState<any>[]>([]);
+
+  const open = <P,>(component: ModalComponent<P>, props: P): string => {
+    const key = `modal-${Date.now()}-${Math.random()}`;
+
+    const newModal: ModalState<P> = { key, component, props };
+
+    setModalStack((prev) => [...prev, newModal as ModalState<any>]);
+
+    return key;
+  };
+
+  const close = (key?: string): void => {
+    setModalStack((prev) =>
+      key ? prev.filter((modal) => modal.key !== key) : prev.slice(0, -1)
+    );
+  };
+
+  return (
+    <ModalContext.Provider value={{ modalStack, open, close }}>
+      {children}
+    </ModalContext.Provider>
+  );
+};
+
+export const useModals = (): ModalContextType => {
+  const context = React.useContext(ModalContext);
+  if (!context) {
+    throw new Error('useModals must be used within a ModalProvider and use client');
+  }
+  return context;
+};
+
+================
+File: reference/components/page/root.module.scss
+================
+.row {
+  border-bottom: 1px solid var(--theme-border);
+}
+
+.column {
+  max-width: 768px;
+  padding: 0 24px 0 24px;
+  margin: 0 auto 0 auto;
+  display: block;
+  border-left: 1px solid var(--theme-border);
+  border-right: 1px solid var(--theme-border);
+}
+
+.video {
+  display: block;
+  width: 100%;
+}
+
+.h1 {
+  display: block;
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+.p {
+  display: block;
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+.aside {
+  display: block;
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+.h2 {
+  display: block;
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+.image {
+  display: block;
+  width: 100%;
+}
+
+================
+File: reference/components/svg/InternetDevelopmentLogo.tsx
+================
+export default function IntDevLogo(props) {
+  return (
+    <svg viewBox="0 0 494.25 80.29" fill="currentColor" aria-hidden {...props}>
+      <path d="m57.8,29.75h0c0,5.34,4.33,9.67,9.67,9.67h38.11c5.34,0,9.67,4.33,9.67,9.67v.54c0,5.34-4.33,9.67-9.67,9.67h-38.11c-5.34,0-9.67,4.33-9.67,9.67v.29c0,5.34-4.33,9.67-9.67,9.67H9.67c-5.34,0-9.67-4.33-9.67-9.67v-.54c0-5.34,4.33-9.67,9.67-9.67h38.11c5.34,0,9.67-4.33,9.67-9.67v-.02c0-5.34-4.33-9.67-9.67-9.67H9.67c-5.34,0-9.67-4.33-9.67-9.67v-.54c0-5.34,4.33-9.67,9.67-9.67h38.11c5.34,0,9.67-4.33,9.67-9.67v-.27c0-5.34,4.33-9.67,9.67-9.67h38.45c5.34,0,9.67,4.33,9.67,9.67v.55c0,5.34-4.33,9.67-9.67,9.67h-38.11c-5.34,0-9.67,4.33-9.67,9.67Z" />
+      <g>
+        <path d="m136.93,75.57l7.21-2.12V5.34l-7.21-2.02V0h26.69v3.32l-7,2.02v68.11l7,2.12v3.37h-26.69v-3.37Z" />
+        <path d="m182.75,14.67v58.88l7.26,2.02v3.37h-19.54v-3.37l7.31-2.02V5.24l-7.31-1.92V0h20.63l31.88,51.37V5.24l-7.31-1.92V0h19.59v3.32l-7.36,1.92v75.06h-4.72L182.75,14.67Z" />
+        <path d="m253.86,75.57l9.59-2.18V5.13h-14.25c-3.52,5.7-5.96,12.44-7.57,18.09h-2.8l2.95-23.22h55.57l3.01,23.22h-2.8c-1.66-5.65-3.89-12.39-7.41-18.09h-14.2v68.27l9.54,2.18v3.37h-31.62v-3.37Z" />
+        <path d="m304.76,75.47l7.1-1.97V5.24l-7.1-1.92V0h21.87c13.94,0,21.98,1.92,28.35,7.46,7.77,6.74,12.7,18.14,12.7,31.98s-5.23,26.75-13.32,33.43c-5.29,4.35-11.04,6.06-20.01,6.06h-29.6v-3.47Zm42.97-8.92c3.89-5.8,5.75-15.08,5.75-27.47s-1.87-20.73-5.81-26.49c-3.52-5.13-8.6-7.41-16.22-7.41h-7.1v62.51c0,4.46,2.23,6.17,8.4,6.17,6.89,0,11.56-2.23,14.98-7.31Z" />
+        <path d="m374.05,75.57l7.05-2.02V5.24l-7.05-1.92V0h48.93l1.5,22.55h-3.01c-1.4-5.55-3.42-11.77-6.22-17.31h-21.67v29.44h11.61c1.76-3.94,2.75-7.98,3.42-11.82h3.01v28.72h-3.01c-.62-3.89-1.76-7.93-3.42-11.77h-11.61v33.8h21.2c3.47-6.22,5.39-12.44,7.36-18.66h3.78l-3.37,24h-48.52v-3.37Z" />
+        <path d="m436.92,9.59c-1.5-4.61-2.9-5.75-8.66-6.27V0h31.72v3.32c-8.03.73-9.12,1.71-7.67,6.79l12.75,44.89.78.05,11.77-40.48c2.07-7.36.36-9.8-8.09-11.25V0h24.73v3.32c-7.77,1.55-9.17,3.32-11.61,11.4l-19.85,65.31h-3.21l-22.65-70.44Z" />
+      </g>
+    </svg>
+  );
+}
+
+================
+File: reference/components/svg/InternetDevelopmentLogoMark.tsx
+================
+export default function LogoMark(props) {
+  return (
+    <svg viewBox="0 0 116.29 80.29" fill="currentColor" aria-hidden {...props}>
+      <path d="m57.8,29.75h0c0,5.34,4.33,9.67,9.67,9.67h38.11c5.34,0,9.67,4.33,9.67,9.67v.54c0,5.34-4.33,9.67-9.67,9.67h-38.11c-5.34,0-9.67,4.33-9.67,9.67v.29c0,5.34-4.33,9.67-9.67,9.67H9.67c-5.34,0-9.67-4.33-9.67-9.67v-.54c0-5.34,4.33-9.67,9.67-9.67h38.11c5.34,0,9.67-4.33,9.67-9.67v-.02c0-5.34-4.33-9.67-9.67-9.67H9.67c-5.34,0-9.67-4.33-9.67-9.67v-.54c0-5.34,4.33-9.67,9.67-9.67h38.11c5.34,0,9.67-4.33,9.67-9.67v-.27c0-5.34,4.33-9.67,9.67-9.67h38.45c5.34,0,9.67,4.33,9.67,9.67v.55c0,5.34-4.33,9.67-9.67,9.67h-38.11c-5.34,0-9.67,4.33-9.67,9.67Z" />
+    </svg>
+  );
+}
+
+================
+File: reference/components/svg/Sphere.tsx
+================
+import * as React from 'react';
+
+export default function Sphere(props: { size?: number; segments?: number; style?: React.CSSProperties }) {
+  const size = props.size || 500;
+  const segments = props.segments || 6;
+  const radius = size * 0.4;
+
+  const generateSpherePoints = () => {
+    const points: { x: number; y: number }[][] = [];
+    for (let lat = 0; lat <= segments; lat++) {
+      const row: { x: number; y: number }[] = [];
+      const phi = (lat * Math.PI) / segments;
+      for (let lon = 0; lon <= segments; lon++) {
+        const theta = (lon * 2 * Math.PI) / segments;
+        const x = radius * Math.sin(phi) * Math.cos(theta);
+        const y = radius * Math.cos(phi);
+        const z = radius * Math.sin(phi) * Math.sin(theta);
+        const scale = 1 + z / (radius * 4);
+        row.push({
+          x: size / 2 + x * scale,
+          y: size / 2 + y * scale,
+        });
+      }
+      points.push(row);
+    }
+    return points;
+  };
+
+  const createPaths = () => {
+    const spherePoints = generateSpherePoints();
+    const paths: string[] = [];
+    for (let lat = 0; lat <= segments; lat++) {
+      let pathString = `M ${spherePoints[lat][0].x},${spherePoints[lat][0].y}`;
+      for (let lon = 1; lon <= segments; lon++) {
+        pathString += ` L ${spherePoints[lat][lon].x},${spherePoints[lat][lon].y}`;
+      }
+      paths.push(pathString);
+    }
+    for (let lon = 0; lon <= segments; lon++) {
+      let pathString = `M ${spherePoints[0][lon].x},${spherePoints[0][lon].y}`;
+      for (let lat = 1; lat <= segments; lat++) {
+        pathString += ` L ${spherePoints[lat][lon].x},${spherePoints[lat][lon].y}`;
+      }
+      paths.push(pathString);
+    }
+    return paths;
+  };
+
+  return (
+    <svg viewBox={`0 0 ${size} ${size}`} xmlns="http://www.w3.org/2000/svg" style={props.style}>
+      <g fill="none" stroke="currentColor" strokeWidth="1">
+        {createPaths().map((path, index) => (
+          <path key={index} d={path} vectorEffect="non-scaling-stroke" />
+        ))}
+      </g>
+    </svg>
+  );
+}
+
+================
+File: reference/components/Accordion.module.scss
+================
+.flex {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+  padding: calc(var(--theme-line-height-base) * 1rem) 0 calc(var(--theme-line-height-base) * 1rem) 0;
+
+  background: var(--theme-border-subdued);
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.icon {
+  flex-shrink: 0;
+  user-select: none;
+  cursor: pointer;
+  font-size: var(--font-size);
+  align-self: stretch;
+}
+
+.content {
+  min-width: 10%;
+  width: 100%;
+  user-select: none;
+  cursor: pointer;
+  transition: 200ms ease all;
+  transition-property: padding;
+  padding-left: 0ch;
+}
+
+.active {
+  .content {
+    padding-left: 1ch;
+  }
+
+  .icon {
+  }
+}
+
+================
+File: reference/components/Accordion.tsx
+================
+'use client';
+
+import styles from '@components/Accordion.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import Row from '@components/Row';
+
+interface AccordionProps {
+  defaultValue?: boolean;
+  title: string;
+  children?: React.ReactNode;
+}
+
+const Accordion: React.FC<AccordionProps> = ({ defaultValue = false, title, children }) => {
+  const [show, setShow] = React.useState<boolean>(defaultValue);
+  const accordionRef = React.useRef<HTMLDivElement | null>(null);
+
+  const toggleShow = (): void => {
+    setShow((prevShow) => !prevShow);
+  };
+
+  return (
+    <>
+      <Row ref={accordionRef} tabIndex={0} role="button" onClick={toggleShow} aria-expanded={show}>
+        <div className={Utilities.classNames(styles.flex, show ? styles.active : undefined)}>
+          <span className={styles.icon}>{show ? '▾' : '▸'}</span>
+          <span className={styles.content}>{title}</span>
+        </div>
+      </Row>
+      {show && <Row style={{ paddingLeft: '2ch' }}>{children}</Row>}
+    </>
+  );
+};
+
+export default Accordion;
+
+================
+File: reference/components/ActionBar.module.scss
+================
+.root {
+  background: var(--theme-background);
+  box-shadow: inset 0 0 0 1px var(--theme-border);
+}
+
+================
+File: reference/components/ActionBar.tsx
+================
+import styles from '@components/ActionBar.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import ButtonGroup from '@components/ButtonGroup';
+
+interface ActionBarItem {
+  hotkey?: string;
+  onClick?: () => void;
+  openHotkey?: string;
+  selected?: boolean;
+  body: React.ReactNode;
+  items?: any;
+}
+
+interface ActionBarProps {
+  items: ActionBarItem[];
+}
+
+const ActionBar: React.FC<ActionBarProps> = ({ items }) => {
+  return (
+    <div className={styles.root}>
+      <ButtonGroup items={items} />
+    </div>
+  );
+};
+
+export default ActionBar;
+
+================
+File: reference/components/ActionButton.module.scss
+================
+.hotkey {
+  background: var(--theme-button-foreground);
+  color: var(--theme-text);
+  cursor: pointer;
+  flex-shrink: 0;
+  font-weight: 400;
+  padding: 0 1ch 0 1ch;
+  text-indent: 0ch;
+  user-select: none;
+}
+
+.content {
+  background: var(--theme-button-background);
+  box-shadow: inset 0 0 0 2px var(--theme-button-foreground);
+  cursor: pointer;
+  flex-shrink: 0;
+  font-weight: 400;
+  padding: 0 1ch 0 1ch;
+  text-indent: 0ch;
+  text-transform: uppercase;
+  user-select: none;
+}
+
+.root {
+  display: inline-flex;
+  align-items: center;
+  justify-content: space-between;
+  cursor: pointer;
+  outline: 0;
+  border: 0;
+  margin: 0;
+  padding: 0;
+  box-sizing: border-box;
+  font-family: var(--font-family-mono);
+  font-size: var(--font-size);
+  flex-shrink: 0;
+
+  &:hover .hotkey {
+    background: var(--theme-focused-foreground);
+  }
+
+  &:hover .content {
+    box-shadow: inset 0 0 0 2px var(--theme-focused-foreground);
+  }
+
+  &:focus .hotkey {
+    background: var(--theme-focused-foreground);
+  }
+
+  &:focus .content {
+    box-shadow: inset 0 0 0 2px var(--theme-focused-foreground);
+  }
+}
+
+.selected {
+  .content {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/ActionButton.tsx
+================
+import styles from '@components/ActionButton.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface ActionButtonProps {
+  onClick?: () => void;
+  hotkey?: any;
+  children?: React.ReactNode;
+  style?: any;
+  rootStyle?: any;
+  isSelected?: boolean;
+}
+
+const ActionButton = React.forwardRef<HTMLDivElement, ActionButtonProps>(({ onClick, hotkey, children, style, rootStyle, isSelected }, ref) => {
+  return (
+    <div className={Utilities.classNames(styles.root, isSelected ? styles.selected : null)} style={rootStyle} onClick={onClick} tabIndex={0} ref={ref} role="button">
+      {Utilities.isEmpty(hotkey) ? null : <span className={styles.hotkey}>{hotkey}</span>}
+      <span className={styles.content} style={style}>
+        {children}
+      </span>
+    </div>
+  );
+});
+
+ActionButton.displayName = 'ActionButton';
+
+export default ActionButton;
+
+================
+File: reference/components/ActionListItem.module.scss
+================
+.item {
+  align-items: flex-start;
+  background: transparent;
+  color: var(--theme-text);
+  cursor: pointer;
+  display: flex;
+  justify-content: space-between;
+  outline: 0;
+  border: 0;
+  text-decoration: none;
+
+  &:visited {
+    background: transparent;
+    color: var(--theme-text);
+  }
+
+  &:hover {
+    background: transparent;
+    color: var(--theme-text);
+  }
+
+  &:hover .icon {
+    background: var(--theme-focused-foreground);
+  }
+
+  &:focus .icon {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.icon {
+  align-items: center;
+  background: var(--theme-button-foreground);
+  display: inline-flex;
+  flex-shrink: 0;
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  justify-content: center;
+  width: 3ch;
+  user-select: none;
+}
+
+.text {
+  align-items: center;
+  align-self: stretch;
+  background: var(--theme-button-background);
+  display: inline-flex;
+  justify-content: flex-start;
+  min-width: 10%;
+  padding: 0 1ch 0 1ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/ActionListItem.tsx
+================
+import styles from '@components/ActionListItem.module.scss';
+
+import * as React from 'react';
+
+interface ActionListItemProps {
+  style?: React.CSSProperties;
+  icon?: React.ReactNode;
+  children?: React.ReactNode;
+  href?: string;
+  target?: string;
+  onClick?: React.MouseEventHandler<HTMLDivElement | HTMLAnchorElement>;
+}
+
+const ActionListItem: React.FC<ActionListItemProps> = (props) => {
+  const { href, target, onClick, children, icon, style } = props;
+
+  if (href) {
+    return (
+      <a className={styles.item} href={href} target={target} style={style} tabIndex={0} role="link">
+        <figure className={styles.icon}>{icon}</figure>
+        <span className={styles.text}>{children}</span>
+      </a>
+    );
+  }
+
+  return (
+    <div className={styles.item} onClick={onClick} style={style} tabIndex={0} role="button">
+      <figure className={styles.icon}>{icon}</figure>
+      <span className={styles.text}>{children}</span>
+    </div>
+  );
+};
+
+export default ActionListItem;
+
+================
+File: reference/components/AlertBanner.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border);
+  box-shadow: 1ch 1ch 0 0 var(--theme-border-subdued);
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  font-weight: 400;
+}
+
+================
+File: reference/components/AlertBanner.tsx
+================
+import styles from '@components/AlertBanner.module.scss';
+
+import * as React from 'react';
+
+interface AlertBannerProps {
+  style?: any;
+  children?: any;
+}
+
+const AlertBanner: React.FC<AlertBannerProps> = ({ style: propStyle, ...rest }) => {
+  let style: React.CSSProperties = { ...propStyle };
+
+  return <div className={styles.root} {...rest} style={style} />;
+};
+
+export default AlertBanner;
+
+================
+File: reference/components/Avatar.module.scss
+================
+.parent {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+}
+
+.placeholder {
+  background: var(--theme-border);
+  display: inline-block;
+  width: 4ch;
+  height: calc(var(--font-size) * var(--theme-line-height-base) * 2);
+  vertical-align: bottom;
+  flex-shrink: 0;
+  position: relative;
+
+  &:hover {
+    &::before {
+      content: '';
+      top: 0;
+      left: 0;
+      right: 0;
+      bottom: 0;
+      position: absolute;
+      pointer-events: none;
+      opacity: 0.5;
+      background: var(--theme-focused-foreground);
+    }
+  }
+}
+
+.root {
+  background: unset;
+  background-size: cover;
+  background-position: 50% 50%;
+  background-repeat: no-repeat;
+  display: inline-block;
+  width: 4ch;
+  height: calc(var(--font-size) * var(--theme-line-height-base) * 2);
+  vertical-align: bottom;
+  flex-shrink: 0;
+  position: relative;
+
+  &:hover {
+    background: unset;
+    background-size: cover;
+    background-position: 50% 50%;
+    background-repeat: no-repeat;
+    &::before {
+      content: '';
+      top: 0;
+      left: 0;
+      right: 0;
+      bottom: 0;
+      position: absolute;
+      pointer-events: none;
+      opacity: 0.5;
+      background: var(--theme-focused-foreground);
+    }
+  }
+}
+
+a {
+  &.root {
+    background: unset;
+    background-size: cover;
+    background-position: 50% 50%;
+    background-repeat: no-repeat;
+    display: inline-block;
+    width: 4ch;
+    height: calc(var(--font-size) * var(--theme-line-height-base) * 2);
+    vertical-align: bottom;
+    flex-shrink: 0;
+    position: relative;
+
+    &:hover {
+      background: unset;
+      background-size: cover;
+      background-position: 50% 50%;
+      background-repeat: no-repeat;
+      &::before {
+        content: '';
+        top: 0;
+        left: 0;
+        right: 0;
+        bottom: 0;
+        position: absolute;
+        pointer-events: none;
+        opacity: 0.5;
+        background: var(--theme-focused-foreground);
+      }
+    }
+
+    &:focus {
+      background: unset;
+      background-size: cover;
+      background-position: 50% 50%;
+      background-repeat: no-repeat;
+      outline: 0;
+
+      &::before {
+        content: '';
+        top: 0;
+        left: 0;
+        right: 0;
+        bottom: 0;
+        position: absolute;
+        pointer-events: none;
+        opacity: 0.5;
+        background: var(--theme-focused-foreground);
+      }
+    }
+  }
+}
+
+.right {
+  min-width: 10%;
+  width: 100%;
+  background: var(--theme-foreground);
+}
+
+================
+File: reference/components/Avatar.tsx
+================
+import styles from '@components/Avatar.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface AvatarProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'style' | 'className' | 'children'> {
+  src?: string;
+  href?: string;
+  target?: string;
+  style?: React.CSSProperties;
+  children?: React.ReactNode;
+}
+
+const Avatar: React.FC<AvatarProps> = (props) => {
+  const { src, style: propStyle, href, target, children, ...rest } = props;
+
+  const backgroundStyle = src ? { backgroundImage: `url(${src})` } : {};
+
+  const combinedStyle = { ...propStyle, ...backgroundStyle };
+
+  let avatarElement: React.ReactElement;
+
+  if (href) {
+    avatarElement = <a className={Utilities.classNames(src ? styles.root : styles.placeholder)} style={combinedStyle} href={href} target={target} tabIndex={0} role="link" />;
+  } else {
+    avatarElement = <figure className={Utilities.classNames(src ? styles.root : styles.placeholder)} style={combinedStyle} />;
+  }
+
+  if (!children) {
+    return avatarElement;
+  }
+
+  return (
+    <div className={styles.parent} {...rest}>
+      {avatarElement}
+      <span className={styles.right}>{children}</span>
+    </div>
+  );
+};
+
+export default Avatar;
+
+================
+File: reference/components/Badge.module.scss
+================
+.root {
+  display: inline-block;
+  vertical-align: top;
+  text-align: center;
+  font-weight: 400;
+  margin: 0;
+  outline: 0;
+  border: 0;
+  font-family: var(--font-family-mono);
+  min-height: calc(var(--theme-line-height-base) * var(--font-size));
+  text-transform: uppercase;
+  transition: 200ms ease all;
+  background: var(--theme-border);
+  padding: 0 1ch 0 1ch;
+}
+
+================
+File: reference/components/Badge.tsx
+================
+'use client';
+
+import styles from '@components/Badge.module.scss';
+
+import * as React from 'react';
+
+interface BadgeProps extends React.HTMLAttributes<HTMLSpanElement> {
+  children?: React.ReactNode;
+}
+
+const Badge: React.FC<BadgeProps> = ({ children, ...rest }) => {
+  return (
+    <span className={styles.root} {...rest}>
+      {children}
+    </span>
+  );
+};
+
+export default Badge;
+
+================
+File: reference/components/BarLoader.module.scss
+================
+.root {
+  background: var(--theme-border);
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  white-space: nowrap;
+  text-align: left;
+  vertical-align: bottom;
+  display: block;
+}
+
+.bar {
+  background: linear-gradient(to right, transparent, var(--theme-text));
+  height: 100%;
+  width: 0%;
+  transition: width 0.1s linear;
+}
+
+================
+File: reference/components/BarLoader.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+import styles from '@components/BarLoader.module.scss';
+
+interface BarLoaderProps {
+  intervalRate?: number;
+  progress?: number;
+}
+
+const BarLoader: React.FC<BarLoaderProps> = ({ intervalRate, progress }) => {
+  const [currentProgress, setCurrentProgress] = React.useState<number>(progress || 0);
+
+  React.useEffect(() => {
+    if (progress !== undefined) {
+      setCurrentProgress(progress);
+      return;
+    }
+
+    if (!intervalRate) return;
+
+    const interval = setInterval(() => {
+      setCurrentProgress((prev) => (prev + 10) % 110);
+    }, intervalRate);
+
+    return () => clearInterval(interval);
+  }, [intervalRate, progress]);
+
+  return (
+    <div className={styles.root}>
+      <div
+        className={styles.bar}
+        style={{
+          width: `${Math.min(currentProgress, 100)}%`,
+        }}
+      ></div>
+    </div>
+  );
+};
+
+export default BarLoader;
+
+================
+File: reference/components/BarProgress.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border-subdued);
+  white-space: nowrap;
+  text-align: left;
+  vertical-align: bottom;
+  overflow: hidden;
+  position: relative;
+}
+
+.measure {
+  visibility: hidden;
+  position: absolute;
+  pointer-events: none;
+}
+
+================
+File: reference/components/BarProgress.tsx
+================
+'use client';
+
+import styles from '@components/BarProgress.module.scss';
+
+import * as React from 'react';
+
+interface BarProgressProps {
+  intervalRate?: number;
+  progress?: number;
+  fillChar?: string;
+}
+
+const BarProgress: React.FC<BarProgressProps> = ({ intervalRate, progress, fillChar = '░' }) => {
+  const [currentProgress, setCurrentProgress] = React.useState(progress ?? 0);
+  const [containerWidth, setContainerWidth] = React.useState(0);
+  const [charWidth, setCharWidth] = React.useState(0);
+
+  const containerRef = React.useRef<HTMLDivElement>(null);
+  const measureRef = React.useRef<HTMLSpanElement>(null);
+
+  React.useEffect(() => {
+    if (typeof progress === 'number') {
+      setCurrentProgress(progress);
+      return;
+    }
+    if (!intervalRate) return;
+    const interval = setInterval(() => {
+      setCurrentProgress((prev) => (prev + 10) % 110);
+    }, intervalRate);
+    return () => clearInterval(interval);
+  }, [intervalRate, progress]);
+
+  React.useLayoutEffect(() => {
+    if (!measureRef.current) return;
+    const rect = measureRef.current.getBoundingClientRect();
+    if (rect.width > 0) {
+      setCharWidth(rect.width);
+    } else {
+      requestAnimationFrame(() => {
+        const retryRect = measureRef.current?.getBoundingClientRect();
+        if (retryRect && retryRect.width > 0) {
+          setCharWidth(retryRect.width);
+        }
+      });
+    }
+  }, [fillChar]);
+
+  React.useEffect(() => {
+    if (!containerRef.current) return;
+    const observer = new ResizeObserver((entries) => {
+      for (const entry of entries) {
+        const { width } = entry.contentRect;
+        setContainerWidth(width);
+      }
+    });
+    observer.observe(containerRef.current);
+    return () => observer.disconnect();
+  }, []);
+
+  const cappedProgress = Math.min(currentProgress, 100);
+
+  let maxChars = 10;
+  if (charWidth > 0 && containerWidth > 0) {
+    maxChars = Math.max(1, Math.floor(containerWidth / charWidth));
+  }
+
+  const filledChars = Math.round((cappedProgress / 100) * maxChars);
+  const barStr = fillChar.repeat(filledChars);
+
+  return (
+    <div className={styles.root} ref={containerRef} aria-valuenow={cappedProgress} aria-valuemin={0} aria-valuemax={100} role="progressbar">
+      <span ref={measureRef} className={styles.measure}>
+        {fillChar}
+      </span>
+      {barStr}
+    </div>
+  );
+};
+
+export default BarProgress;
+
+================
+File: reference/components/Block.module.scss
+================
+.block {
+  display: inline-block;
+  width: 1ch;
+  background: var(--theme-text);
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  vertical-align: bottom;
+  flex-shrink: 0;
+}
+
+================
+File: reference/components/Block.tsx
+================
+import styles from '@components/Block.module.scss';
+
+import * as React from 'react';
+
+interface BlockProps extends React.HTMLAttributes<HTMLSpanElement> {
+  children?: React.ReactNode;
+}
+
+const Block: React.FC<BlockProps> = ({ children, ...rest }) => {
+  return (
+    <span className={styles.block} {...rest}>
+      {children}
+    </span>
+  );
+};
+
+export default Block;
+
+================
+File: reference/components/BlockLoader.module.scss
+================
+.root {
+  display: inline-block;
+  width: 1ch;
+  color: inherit;
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  vertical-align: bottom;
+}
+
+================
+File: reference/components/BlockLoader.tsx
+================
+'use client';
+
+import styles from '@components/BlockLoader.module.scss';
+
+import * as React from 'react';
+
+const SEQUENCES = [
+  ['⠁', '⠂', '⠄', '⡀', '⢀', '⠠', '⠐', '⠈'],
+  ['⣾', '⣽', '⣻', '⢿', '⡿', '⣟', '⣯', '⣷'],
+  ['▖', '▘', '▝', '▗'],
+  ['▁', '▂', '▃', '▄', '▅', '▆', '▇', '█', '▇', '▆', '▅', '▄', '▃', '▁'],
+  ['▉', '▊', '▋', '▌', '▍', '▎', '▏', '▎', '▍', '▌', '▋', '▊', '▉'],
+  ['←', '↖', '↑', '↗', '→', '↘', '↓', '↙'],
+  ['┤', '┘', '┴', '└', '├', '┌', '┬', '┐'],
+  ['◢', '◣', '◤', '◥'],
+  ['◰', '◳', '◲', '◱'],
+  ['◴', '◷', '◶', '◵'],
+  ['◐', '◓', '◑', '◒'],
+];
+
+interface BlockLoaderProps extends Omit<React.HTMLAttributes<HTMLSpanElement>, 'children'> {
+  mode?: number;
+}
+
+const BlockLoader: React.FC<BlockLoaderProps> = ({ mode = 0 }) => {
+  if (!SEQUENCES[mode]) {
+    return <span className={styles.block}>�</span>;
+  }
+
+  const [index, setIndex] = React.useState(0);
+  const intervalRef = React.useRef<number | null>(null);
+  const indexLength = SEQUENCES[mode].length;
+
+  React.useEffect(() => {
+    if (intervalRef.current) {
+      clearInterval(intervalRef.current);
+    }
+
+    intervalRef.current = window.setInterval(() => {
+      setIndex((prevIndex) => (prevIndex + 1) % indexLength);
+    }, 100);
+
+    return () => {
+      if (intervalRef.current) {
+        clearInterval(intervalRef.current);
+      }
+    };
+  }, [indexLength]);
+
+  return <span className={styles.root}>{SEQUENCES[mode][index]}</span>;
+};
+
+export default BlockLoader;
+
+================
+File: reference/components/BreadCrumbs.module.scss
+================
+.root {
+  display: inline-block;
+}
+
+.line {
+  display: inline-block;
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+}
+
+.link {
+  display: inline-block;
+  color: var(--theme-text);
+  outline: 0;
+  border: 0;
+  text-decoration: none;
+  background: var(--theme-border);
+
+  &:hover {
+    color: var(--theme-text);
+    background: var(--theme-focused-foreground);
+  }
+  
+  &:visited {
+    color: var(--theme-text);
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.symbol {
+  min-width: 1ch;
+  display: inline-block;
+  margin: 0 1ch 0 1ch;
+}
+
+================
+File: reference/components/BreadCrumbs.tsx
+================
+import styles from '@components/BreadCrumbs.module.scss';
+
+import * as React from 'react';
+
+interface BreadCrumbsItem {
+  url?: string;
+  name: string;
+}
+
+interface BreadCrumbsProps {
+  items: BreadCrumbsItem[];
+}
+
+const BreadCrumbs: React.FC<BreadCrumbsProps> = ({ items }) => {
+  return (
+    <nav aria-label="breadcrumb" className={styles.root}>
+      {items.map((item, index) => {
+        const linkElement = (
+          <a className={styles.link} href={item.url} target="_blank" tabIndex={0} role="link">
+            {item.name}
+          </a>
+        );
+
+        return (
+          <span className={styles.line} key={index}>
+            {index === items.length - 1 ? <span>{linkElement}</span> : linkElement}
+            {index < items.length - 1 && <span className={styles.symbol}> ❯ </span>}
+          </span>
+        );
+      })}
+    </nav>
+  );
+};
+
+export default BreadCrumbs;
+
+================
+File: reference/components/Button.module.scss
+================
+.root {
+  vertical-align: top;
+  display: inline-block;
+  font-weight: 400;
+  text-align: center;
+  margin: 0;
+  outline: 0;
+  border: 0;
+  font-family: var(--font-family-mono);
+  width: 100%;
+  font-size: var(--font-size);
+  line-height: calc(var(--theme-line-height-base) * 2em);
+  min-height: calc(var(--theme-line-height-base) * (var(--font-size) * 2));
+  padding: 0 2ch 0 2ch;
+  text-transform: uppercase;
+  letter-spacing: 1px;
+  transition: 200ms ease all;
+}
+
+.primary {
+  background: var(--theme-button);
+  color: var(--theme-button-text);
+  cursor: pointer;
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.secondary {
+  background: var(--theme-background);
+  color: var(--theme-text);
+  box-shadow: inset 0 0 0 1px var(--theme-border);
+  cursor: pointer;
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+    box-shadow: inset 0 0 0 1px transparent;
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    box-shadow: inset 0 0 0 1px transparent;
+  }
+}
+
+.disabled {
+  background: var(--theme-button-background);
+  color: var(--theme-button-foreground);
+  cursor: not-allowed;
+}
+
+================
+File: reference/components/Button.tsx
+================
+'use client';
+
+import styles from '@components/Button.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
+  theme?: 'PRIMARY' | 'SECONDARY';
+  isDisabled?: boolean;
+  children?: React.ReactNode;
+}
+
+const Button: React.FC<ButtonProps> = ({ theme = 'PRIMARY', isDisabled, children, ...rest }) => {
+  let classNames = Utilities.classNames(styles.root, styles.primary);
+
+  if (theme === 'SECONDARY') {
+    classNames = Utilities.classNames(styles.root, styles.secondary);
+  }
+
+  if (isDisabled) {
+    classNames = Utilities.classNames(styles.root, styles.disabled);
+
+    return <div className={classNames}>{children}</div>;
+  }
+
+  return (
+    <button className={classNames} role="button" tabIndex={0} disabled={isDisabled} {...rest}>
+      {children}
+    </button>
+  );
+};
+
+export default Button;
+
+================
+File: reference/components/ButtonGroup.module.scss
+================
+.root {
+}
+
+.full {
+  display: grid;
+  grid-template-columns: repeat(auto-fit, minmax(60px, 1fr));
+  white-space: nowrap;
+}
+
+================
+File: reference/components/ButtonGroup.tsx
+================
+'use client';
+
+import styles from '@components/ButtonGroup.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import ActionButton from '@components/ActionButton';
+import DropdownMenuTrigger from '@components/DropdownMenuTrigger';
+
+const ButtonGroup = (props) => {
+  if (!props.items) {
+    return null;
+  }
+
+  return (
+    <div className={Utilities.classNames(styles.root, props.isFull ? styles.full : null)}>
+      {props.items.map((each) => {
+        if (each.items) {
+          return (
+            <DropdownMenuTrigger key={each.body} items={each.items} hotkey={each.openHotkey}>
+              <ActionButton hotkey={each.hotkey} isSelected={each.selected}>
+                {each.body}
+              </ActionButton>
+            </DropdownMenuTrigger>
+          );
+        }
+
+        return (
+          <ActionButton key={each.body} onClick={each.onClick} hotkey={each.hotkey} isSelected={each.selected}>
+            {each.body}
+          </ActionButton>
+        );
+      })}
+    </div>
+  );
+};
+
+export default ButtonGroup;
+
+================
+File: reference/components/Canvas.module.scss
+================
+.canvas {
+  grid-row-start: 1;
+  grid-column-start: 1;
+  margin: 0;
+  padding: 0;
+  width: 100%;
+  min-height: 100%;
+  max-height: 288px;
+}
+
+================
+File: reference/components/Canvas.tsx
+================
+'use client';
+
+import styles from '@components/Canvas.module.scss';
+
+import * as React from 'react';
+
+type WebGLContextResult = {
+  gl: WebGLRenderingContext | WebGL2RenderingContext;
+  ext: {
+    internalFormat: number;
+    internalFormatRG: number;
+    formatRG: number;
+    texType: number;
+  };
+  support_linear_float: boolean | null;
+};
+
+var config = {
+  TEXTURE_DOWNSAMPLE: 1,
+  DENSITY_DISSIPATION: 0.991,
+  VELOCITY_DISSIPATION: 0.9992,
+  PRESSURE_DISSIPATION: 0.8,
+  PRESSURE_ITERATIONS: 16,
+  CURL: 12,
+  SPLAT_RADIUS: 0.12,
+  SPEED: 0.01,
+};
+
+export default function BlueCanvasComponent(props) {
+  const canvasRef = React.useRef<HTMLCanvasElement>(null);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    canvas.width = canvas.clientWidth;
+    canvas.height = canvas.clientHeight;
+
+    let splatStack: any[] = [];
+
+    const { gl, ext, support_linear_float } = getWebGLContext(canvas);
+
+    function getWebGLContext(canvas: HTMLCanvasElement): WebGLContextResult {
+      const params = {
+        alpha: false,
+        depth: false,
+        stencil: false,
+        antialias: true,
+      };
+
+      let gl: WebGLRenderingContext | WebGL2RenderingContext | null = canvas.getContext('webgl2', params) as WebGL2RenderingContext | null;
+
+      const isWebGL2 = !!gl;
+
+      if (!isWebGL2) {
+        gl = (canvas.getContext('webgl', params) || canvas.getContext('experimental-webgl', params)) as WebGLRenderingContext | null;
+      }
+
+      if (!gl) throw new Error('WebGL not supported');
+
+      const halfFloat = gl.getExtension('OES_texture_half_float');
+      let support_linear_float = gl.getExtension('OES_texture_half_float_linear');
+
+      if (isWebGL2) {
+        gl.getExtension('EXT_color_buffer_float');
+        support_linear_float = gl.getExtension('OES_texture_float_linear');
+      }
+
+      const internalFormat = isWebGL2 ? (gl as WebGL2RenderingContext).RGBA16F : gl.RGBA;
+      const internalFormatRG = isWebGL2 ? (gl as WebGL2RenderingContext).RG16F : gl.RGBA;
+      const formatRG = isWebGL2 ? (gl as WebGL2RenderingContext).RG : gl.RGBA;
+      const texType = isWebGL2 ? (gl as WebGL2RenderingContext).HALF_FLOAT : halfFloat?.HALF_FLOAT_OES || gl.UNSIGNED_BYTE;
+
+      return {
+        gl: gl as WebGLRenderingContext,
+        ext: {
+          internalFormat,
+          internalFormatRG,
+          formatRG,
+          texType,
+        },
+        support_linear_float: !!support_linear_float,
+      };
+    }
+
+    class GLProgram {
+      program: WebGLProgram;
+      uniforms: { [key: string]: WebGLUniformLocation | null };
+
+      constructor(vertexShader: WebGLShader, fragmentShader: WebGLShader) {
+        this.uniforms = {};
+        this.program = gl.createProgram()!;
+
+        gl.attachShader(this.program, vertexShader);
+        gl.attachShader(this.program, fragmentShader);
+        gl.linkProgram(this.program);
+
+        if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {
+          throw new Error(gl.getProgramInfoLog(this.program) || 'Program failed to link');
+        }
+
+        const uniformCount = gl.getProgramParameter(this.program, gl.ACTIVE_UNIFORMS);
+        for (let i = 0; i < uniformCount; i++) {
+          const uniformName = gl.getActiveUniform(this.program, i)!.name;
+          this.uniforms[uniformName] = gl.getUniformLocation(this.program, uniformName);
+        }
+      }
+
+      bind() {
+        gl.useProgram(this.program);
+      }
+    }
+
+    function compileShader(type: number, source: string): WebGLShader {
+      const shader = gl.createShader(type)!;
+      gl.shaderSource(shader, source);
+      gl.compileShader(shader);
+
+      if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
+        throw new Error(gl.getShaderInfoLog(shader) || 'Shader compilation failed');
+      }
+
+      return shader;
+    }
+
+    var baseVertexShader = compileShader(gl.VERTEX_SHADER, 'precision highp float; precision mediump sampler2D; attribute vec2 aPosition; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform vec2 texelSize; void main () {     vUv = aPosition * 0.5 + 0.5;     vL = vUv - vec2(texelSize.x, 0.0);     vR = vUv + vec2(texelSize.x, 0.0);     vT = vUv + vec2(0.0, texelSize.y);     vB = vUv - vec2(0.0, texelSize.y);     gl_Position = vec4(aPosition, 0.0, 1.0); }');
+    var clearShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; uniform sampler2D uTexture; uniform float value; void main () {     gl_FragColor = value * texture2D(uTexture, vUv); }');
+    var displayShader = compileShader(
+      gl.FRAGMENT_SHADER,
+      `
+  precision highp float;
+  precision mediump sampler2D;
+  varying vec2 vUv;
+  uniform sampler2D uTexture;
+  void main () {
+    float density = texture2D(uTexture, vUv).r;
+    vec3 splatColor = vec3(1.0, 1.0, 1.0);
+    vec3 backgroundColor = vec3(0.8, 0.8, 0.8);
+    vec3 color = mix(backgroundColor, splatColor, density);
+    gl_FragColor = vec4(color, 1.0);
+  }
+  `
+    );
+    var splatShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; uniform sampler2D uTarget; uniform float aspectRatio; uniform vec3 color; uniform vec2 point; uniform float radius; void main () {     vec2 p = vUv - point.xy;     p.x *= aspectRatio;     vec3 splat = exp(-dot(p, p) / radius) * color;     vec3 base = texture2D(uTarget, vUv).xyz;     gl_FragColor = vec4(base + splat, 1.0); }');
+    var advectionManualFilteringShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; uniform sampler2D uVelocity; uniform sampler2D uSource; uniform vec2 texelSize; uniform float dt; uniform float dissipation; vec4 bilerp (in sampler2D sam, in vec2 p) {     vec4 st;     st.xy = floor(p - 0.5) + 0.5;     st.zw = st.xy + 1.0;     vec4 uv = st * texelSize.xyxy;     vec4 a = texture2D(sam, uv.xy);     vec4 b = texture2D(sam, uv.zy);     vec4 c = texture2D(sam, uv.xw);     vec4 d = texture2D(sam, uv.zw);     vec2 f = p - st.xy;     return mix(mix(a, b, f.x), mix(c, d, f.x), f.y); } void main () {     vec2 coord = gl_FragCoord.xy - dt * texture2D(uVelocity, vUv).xy;     gl_FragColor = dissipation * bilerp(uSource, coord);     gl_FragColor.a = 1.0; }');
+    var advectionShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; uniform sampler2D uVelocity; uniform sampler2D uSource; uniform vec2 texelSize; uniform float dt; uniform float dissipation; void main () {     vec2 coord = vUv - dt * texture2D(uVelocity, vUv).xy * texelSize;     gl_FragColor = dissipation * texture2D(uSource, coord); }');
+    var divergenceShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform sampler2D uVelocity; vec2 sampleVelocity (in vec2 uv) {     vec2 multiplier = vec2(1.0, 1.0);     if (uv.x < 0.0) { uv.x = 0.0; multiplier.x = -1.0; }     if (uv.x > 1.0) { uv.x = 1.0; multiplier.x = -1.0; }     if (uv.y < 0.0) { uv.y = 0.0; multiplier.y = -1.0; }     if (uv.y > 1.0) { uv.y = 1.0; multiplier.y = -1.0; }     return multiplier * texture2D(uVelocity, uv).xy; } void main () {     float L = sampleVelocity(vL).x;     float R = sampleVelocity(vR).x;     float T = sampleVelocity(vT).y;     float B = sampleVelocity(vB).y;     float div = 0.5 * (R - L + T - B);     gl_FragColor = vec4(div, 0.0, 0.0, 1.0); }');
+    var curlShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform sampler2D uVelocity; void main () {     float L = texture2D(uVelocity, vL).y;     float R = texture2D(uVelocity, vR).y;     float T = texture2D(uVelocity, vT).x;     float B = texture2D(uVelocity, vB).x;     float vorticity = R - L - T + B;     gl_FragColor = vec4(vorticity, 0.0, 0.0, 1.0); }');
+    var vorticityShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform sampler2D uVelocity; uniform sampler2D uCurl; uniform float curl; uniform float dt; void main () {     float L = texture2D(uCurl, vL).y;     float R = texture2D(uCurl, vR).y;     float T = texture2D(uCurl, vT).x;     float B = texture2D(uCurl, vB).x;     float C = texture2D(uCurl, vUv).x;     vec2 force = vec2(abs(T) - abs(B), abs(R) - abs(L));     force *= 1.0 / length(force + 0.00001) * curl * C;     vec2 vel = texture2D(uVelocity, vUv).xy;     gl_FragColor = vec4(vel + force * dt, 0.0, 1.0); }');
+    var pressureShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform sampler2D uPressure; uniform sampler2D uDivergence; vec2 boundary (in vec2 uv) {     uv = min(max(uv, 0.0), 1.0);     return uv; } void main () {     float L = texture2D(uPressure, boundary(vL)).x;     float R = texture2D(uPressure, boundary(vR)).x;     float T = texture2D(uPressure, boundary(vT)).x;     float B = texture2D(uPressure, boundary(vB)).x;     float C = texture2D(uPressure, vUv).x;     float divergence = texture2D(uDivergence, vUv).x;     float pressure = (L + R + B + T - divergence) * 0.25;     gl_FragColor = vec4(pressure, 0.0, 0.0, 1.0); }');
+    var gradientSubtractShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform sampler2D uPressure; uniform sampler2D uVelocity; vec2 boundary (in vec2 uv) {     uv = min(max(uv, 0.0), 1.0);     return uv; } void main () {     float L = texture2D(uPressure, boundary(vL)).x;     float R = texture2D(uPressure, boundary(vR)).x;     float T = texture2D(uPressure, boundary(vT)).x;     float B = texture2D(uPressure, boundary(vB)).x;     vec2 velocity = texture2D(uVelocity, vUv).xy;     velocity.xy -= vec2(R - L, T - B);     gl_FragColor = vec4(velocity, 0.0, 1.0); }');
+
+    let textureWidth: number = 0;
+    let textureHeight: number = 0;
+
+    let density: { first: any[]; second: any[]; swap: () => void } | undefined;
+    let velocity: { first: any[]; second: any[]; swap: () => void } | undefined;
+    let divergence: any[] | undefined;
+    let curl: any[] | undefined;
+    let pressure: { first: any[]; second: any[]; swap: () => void } | undefined;
+
+    initFramebuffers();
+
+    var clearProgram = new GLProgram(baseVertexShader, clearShader);
+    var displayProgram = new GLProgram(baseVertexShader, displayShader);
+    var splatProgram = new GLProgram(baseVertexShader, splatShader);
+    var advectionProgram = new GLProgram(baseVertexShader, support_linear_float ? advectionShader : advectionManualFilteringShader);
+    var divergenceProgram = new GLProgram(baseVertexShader, divergenceShader);
+    var curlProgram = new GLProgram(baseVertexShader, curlShader);
+    var vorticityProgram = new GLProgram(baseVertexShader, vorticityShader);
+    var pressureProgram = new GLProgram(baseVertexShader, pressureShader);
+    var gradienSubtractProgram = new GLProgram(baseVertexShader, gradientSubtractShader);
+
+    function initFramebuffers() {
+      textureWidth = gl.drawingBufferWidth >> config.TEXTURE_DOWNSAMPLE;
+      textureHeight = gl.drawingBufferHeight >> config.TEXTURE_DOWNSAMPLE;
+
+      var iFormat = ext.internalFormat;
+      var iFormatRG = ext.internalFormatRG;
+      var formatRG = ext.formatRG;
+      var texType = ext.texType;
+
+      density = createDoubleFBO(0, textureWidth, textureHeight, iFormat, gl.RGBA, texType, support_linear_float ? gl.LINEAR : gl.NEAREST);
+      velocity = createDoubleFBO(2, textureWidth, textureHeight, iFormatRG, formatRG, texType, support_linear_float ? gl.LINEAR : gl.NEAREST);
+      divergence = createFBO(4, textureWidth, textureHeight, iFormatRG, formatRG, texType, gl.NEAREST);
+      curl = createFBO(5, textureWidth, textureHeight, iFormatRG, formatRG, texType, gl.NEAREST);
+      pressure = createDoubleFBO(6, textureWidth, textureHeight, iFormatRG, formatRG, texType, gl.NEAREST);
+    }
+
+    function createFBO(texId, w, h, internalFormat, format, type, param) {
+      gl.activeTexture(gl.TEXTURE0 + texId);
+
+      var texture = gl.createTexture();
+
+      gl.bindTexture(gl.TEXTURE_2D, texture);
+      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, param);
+      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, param);
+      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
+      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
+      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, w, h, 0, format, type, null);
+
+      var fbo = gl.createFramebuffer();
+
+      gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
+      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
+      gl.viewport(0, 0, w, h);
+      gl.clear(gl.COLOR_BUFFER_BIT);
+
+      return [texture, fbo, texId];
+    }
+
+    function createDoubleFBO(texId, w, h, internalFormat, format, type, param) {
+      var fbo1 = createFBO(texId, w, h, internalFormat, format, type, param);
+      var fbo2 = createFBO(texId + 1, w, h, internalFormat, format, type, param);
+
+      return {
+        get first() {
+          return fbo1;
+        },
+        get second() {
+          return fbo2;
+        },
+        swap: function swap() {
+          var temp = fbo1;
+
+          fbo1 = fbo2;
+          fbo2 = temp;
+        },
+      };
+    }
+
+    const blit = (() => {
+      const vertexData = new Float32Array([-1, -1, -1, 1, 1, 1, 1, -1]);
+      const elementData = new Uint16Array([0, 1, 2, 0, 2, 3]);
+
+      gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());
+      gl.bufferData(gl.ARRAY_BUFFER, vertexData, gl.STATIC_DRAW);
+      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer());
+      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, elementData, gl.STATIC_DRAW);
+      gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);
+      gl.enableVertexAttribArray(0);
+
+      return (destination: WebGLFramebuffer | null) => {
+        gl.bindFramebuffer(gl.FRAMEBUFFER, destination);
+        gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);
+      };
+    })();
+
+    var lastTime = Date.now();
+    let timeAccumulator = 0;
+
+    update();
+
+    function splat(x: number, y: number, dx: number, dy: number) {
+      if (!velocity) return;
+      if (!canvas) return;
+      if (!density) return;
+
+      splatProgram.bind();
+      gl.uniform1i(splatProgram.uniforms.uTarget, velocity.first[2]);
+      gl.uniform1f(splatProgram.uniforms.aspectRatio, canvas.width / canvas.height);
+      gl.uniform2f(splatProgram.uniforms.point, x / canvas.width, 1.0 - y / canvas.height);
+      gl.uniform3f(splatProgram.uniforms.color, dx, -dy, 1.0);
+      gl.uniform1f(splatProgram.uniforms.radius, config.SPLAT_RADIUS);
+      blit(velocity.second[1]);
+      velocity.swap();
+
+      gl.uniform1i(splatProgram.uniforms.uTarget, density.first[2]);
+
+      gl.uniform3f(splatProgram.uniforms.color, 0.9, 0.9, 0.9);
+      blit(density.second[1]);
+      density.swap();
+    }
+
+    function update() {
+      resizeCanvas();
+
+      const dt = Math.min((Date.now() - lastTime) / 1000, 0.016);
+      lastTime = Date.now();
+
+      gl.viewport(0, 0, textureWidth, textureHeight);
+
+      timeAccumulator += dt;
+
+      if (canvas) {
+        if (timeAccumulator >= config.SPEED) {
+          timeAccumulator = 0;
+          // splat(canvas.width * 0.5, canvas.height, 0, 48 * 8);
+          splat(0, canvas.height, canvas.width * 0.3, 8);
+        }
+      }
+
+      advectionProgram.bind();
+
+      if (!velocity) return;
+      if (!density) return;
+      if (!curl) return;
+      if (!divergence) return;
+      if (!pressure) return;
+
+      gl.uniform2f(advectionProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(advectionProgram.uniforms.uVelocity, velocity.first[2]);
+      gl.uniform1i(advectionProgram.uniforms.uSource, velocity.first[2]);
+      gl.uniform1f(advectionProgram.uniforms.dt, dt);
+      gl.uniform1f(advectionProgram.uniforms.dissipation, config.VELOCITY_DISSIPATION);
+      blit(velocity.second[1]);
+      velocity.swap();
+
+      gl.uniform1i(advectionProgram.uniforms.uVelocity, velocity.first[2]);
+
+      gl.uniform1i(advectionProgram.uniforms.uSource, density.first[2]);
+      gl.uniform1f(advectionProgram.uniforms.dissipation, config.DENSITY_DISSIPATION);
+      blit(density.second[1]);
+      density.swap();
+
+      curlProgram.bind();
+      gl.uniform2f(curlProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(curlProgram.uniforms.uVelocity, velocity.first[2]);
+      blit(curl[1]);
+
+      vorticityProgram.bind();
+      gl.uniform2f(vorticityProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(vorticityProgram.uniforms.uVelocity, velocity.first[2]);
+      gl.uniform1i(vorticityProgram.uniforms.uCurl, curl[2]);
+      gl.uniform1f(vorticityProgram.uniforms.curl, config.CURL);
+      gl.uniform1f(vorticityProgram.uniforms.dt, dt);
+      blit(velocity.second[1]);
+      velocity.swap();
+
+      divergenceProgram.bind();
+      gl.uniform2f(divergenceProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(divergenceProgram.uniforms.uVelocity, velocity.first[2]);
+      blit(divergence[1]);
+
+      clearProgram.bind();
+
+      var pressureTexId = pressure.first[2];
+
+      gl.activeTexture(gl.TEXTURE0 + pressureTexId);
+      gl.bindTexture(gl.TEXTURE_2D, pressure.first[0]);
+      gl.uniform1i(clearProgram.uniforms.uTexture, pressureTexId);
+      gl.uniform1f(clearProgram.uniforms.value, config.PRESSURE_DISSIPATION);
+      blit(pressure.second[1]);
+      pressure.swap();
+
+      pressureProgram.bind();
+      gl.uniform2f(pressureProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(pressureProgram.uniforms.uDivergence, divergence[2]);
+      pressureTexId = pressure.first[2];
+      gl.activeTexture(gl.TEXTURE0 + pressureTexId);
+
+      for (var _i = 0; _i < config.PRESSURE_ITERATIONS; _i++) {
+        gl.bindTexture(gl.TEXTURE_2D, pressure.first[0]);
+        gl.uniform1i(pressureProgram.uniforms.uPressure, pressureTexId);
+        blit(pressure.second[1]);
+        pressure.swap();
+      }
+
+      gradienSubtractProgram.bind();
+      gl.uniform2f(gradienSubtractProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(gradienSubtractProgram.uniforms.uPressure, pressure.first[2]);
+      gl.uniform1i(gradienSubtractProgram.uniforms.uVelocity, velocity.first[2]);
+      blit(velocity.second[1]);
+      velocity.swap();
+
+      gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
+      displayProgram.bind();
+      gl.uniform1i(displayProgram.uniforms.uTexture, density.first[2]);
+      blit(null);
+
+      requestAnimationFrame(update);
+    }
+
+    function resizeCanvas() {
+      if (!canvas) return;
+
+      (canvas.width !== canvas.clientWidth || canvas.height !== canvas.clientHeight) && ((canvas.width = canvas.clientWidth), (canvas.height = canvas.clientHeight), initFramebuffers());
+    }
+  }, []);
+
+  return <canvas className={styles.canvas} ref={canvasRef} style={props.style} />;
+}
+
+================
+File: reference/components/CanvasPlatformer.module.scss
+================
+.container {
+  width: 100%;
+  height: auto;
+  position: relative;
+}
+
+.root {
+  display: block;
+  width: 100%;
+  background: transparent;
+
+  &:focus {
+    outline: 0;
+    box-shadow: inset 0 0 0 1px var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/CanvasPlatformer.tsx
+================
+'use client';
+
+import styles from '@components/CanvasPlatformer.module.scss';
+
+import * as React from 'react';
+
+import ActionButton from '@components/ActionButton';
+
+interface PlatformerProps {
+  rows?: number;
+}
+
+// TODO(jimmylee)
+// Move these constants into a separate file
+// Dynamically compute these constants since we're going to
+// Support t-shirt sizes for the system.
+const LINE_HEIGHT = 20;
+const CHARACTER_WIDTH = 9.6;
+const GRAVITY = 0.3;
+const MOVE_SPEED = 2;
+const JUMP_SPEED = -6;
+const FRICTION = 0.85;
+
+interface Position {
+  x: number;
+  y: number;
+}
+
+interface Keys {
+  left: boolean;
+  right: boolean;
+  jump: boolean;
+}
+
+interface Block {
+  x: number;
+  y: number;
+}
+
+const CanvasPlatformer: React.FC<PlatformerProps> = ({ rows = 25 }) => {
+  const canvasRef = React.useRef<HTMLCanvasElement>(null);
+  const [focused, setFocused] = React.useState(false);
+
+  const positionRef = React.useRef<Position>({ x: 50, y: 0 });
+  const velocityRef = React.useRef<Position>({ x: 0, y: 0 });
+  const keysRef = React.useRef<Keys>({ left: false, right: false, jump: false });
+  const platformBlocksRef = React.useRef<Block[]>([]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+    const parent = canvas.parentElement;
+    if (!parent) return;
+
+    const resizeCanvas = () => {
+      const parentWidth = parent.clientWidth;
+      const canvasHeight = rows * LINE_HEIGHT;
+      canvas.width = parentWidth;
+      canvas.height = canvasHeight;
+      const platformY = canvas.height - LINE_HEIGHT * 2;
+      positionRef.current.y = platformY - LINE_HEIGHT;
+      platformBlocksRef.current = [];
+      const numBlocks = Math.floor(parentWidth / CHARACTER_WIDTH);
+      for (let i = 0; i < numBlocks; i++) {
+        platformBlocksRef.current.push({ x: i * CHARACTER_WIDTH, y: platformY });
+      }
+    };
+
+    resizeCanvas();
+    window.addEventListener('resize', resizeCanvas);
+    return () => {
+      window.removeEventListener('resize', resizeCanvas);
+    };
+  }, [rows]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const handleFocus = () => setFocused(true);
+    const handleBlur = () => {
+      setFocused(false);
+      keysRef.current = { left: false, right: false, jump: false };
+    };
+
+    canvas.tabIndex = 0;
+    canvas.addEventListener('focus', handleFocus);
+    canvas.addEventListener('blur', handleBlur);
+
+    const handleClick = (e: MouseEvent) => {
+      const rect = canvas.getBoundingClientRect();
+      const x = Math.floor((e.clientX - rect.left) / CHARACTER_WIDTH) * CHARACTER_WIDTH;
+      const y = Math.floor((e.clientY - rect.top) / LINE_HEIGHT) * LINE_HEIGHT;
+      const blocks = platformBlocksRef.current;
+      const existingIndex = blocks.findIndex((b) => b.x === x && b.y === y);
+      if (existingIndex !== -1) {
+        blocks.splice(existingIndex, 1);
+      } else {
+        blocks.push({ x, y });
+      }
+    };
+
+    canvas.addEventListener('click', handleClick);
+
+    return () => {
+      canvas.removeEventListener('focus', handleFocus);
+      canvas.removeEventListener('blur', handleBlur);
+      canvas.removeEventListener('click', handleClick);
+    };
+  }, []);
+
+  React.useEffect(() => {
+    const handleKeyDown = (e: KeyboardEvent) => {
+      if (!focused) return;
+      if (e.key === 'ArrowLeft' || e.key === 'ArrowRight' || e.code === 'Space') {
+        e.preventDefault();
+        e.stopPropagation();
+      }
+      if (e.key === 'ArrowLeft') keysRef.current.left = true;
+      if (e.key === 'ArrowRight') keysRef.current.right = true;
+      if (e.code === 'Space') keysRef.current.jump = true;
+    };
+
+    const handleKeyUp = (e: KeyboardEvent) => {
+      if (!focused) return;
+      if (e.key === 'ArrowLeft' || e.key === 'ArrowRight' || e.code === 'Space') {
+        e.preventDefault();
+        e.stopPropagation();
+      }
+      if (e.key === 'ArrowLeft') keysRef.current.left = false;
+      if (e.key === 'ArrowRight') keysRef.current.right = false;
+      if (e.code === 'Space') keysRef.current.jump = false;
+    };
+
+    window.addEventListener('keydown', handleKeyDown, { capture: true });
+    window.addEventListener('keyup', handleKeyUp, { capture: true });
+
+    return () => {
+      window.removeEventListener('keydown', handleKeyDown, { capture: true });
+      window.removeEventListener('keyup', handleKeyUp, { capture: true });
+    };
+  }, [focused]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+    const ctx = canvas.getContext('2d');
+    if (!ctx) return;
+
+    const loop = () => {
+      const w = canvas.width;
+      const h = canvas.height;
+      ctx.clearRect(0, 0, w, h);
+
+      const pos = positionRef.current;
+      const vel = velocityRef.current;
+      const keys = keysRef.current;
+      const blocks = platformBlocksRef.current;
+
+      const themeBorderColor = getComputedStyle(document.body).getPropertyValue('--theme-border').trim();
+      const themeTextColor = getComputedStyle(document.body).getPropertyValue('--theme-text').trim();
+
+      ctx.fillStyle = themeBorderColor;
+      for (const b of blocks) {
+        ctx.fillRect(b.x, b.y, CHARACTER_WIDTH, LINE_HEIGHT);
+      }
+
+      if (keys.left) vel.x = -MOVE_SPEED;
+      else if (keys.right) vel.x = MOVE_SPEED;
+      else {
+        vel.x *= FRICTION;
+        if (Math.abs(vel.x) < 0.1) vel.x = 0;
+      }
+
+      const oldY = pos.y;
+      vel.y += GRAVITY;
+      pos.x += vel.x;
+      pos.y += vel.y;
+
+      if (pos.x < 0) pos.x = 0;
+      if (pos.x > w - CHARACTER_WIDTH) pos.x = w - CHARACTER_WIDTH;
+
+      let groundY = h;
+      for (const b of blocks) {
+        const horizontallyOverlapping = pos.x + CHARACTER_WIDTH > b.x && pos.x < b.x + CHARACTER_WIDTH;
+        if (horizontallyOverlapping && oldY + LINE_HEIGHT <= b.y && pos.y + LINE_HEIGHT >= b.y) {
+          if (b.y < groundY) groundY = b.y;
+        }
+      }
+
+      if (pos.y + LINE_HEIGHT > groundY) {
+        pos.y = groundY - LINE_HEIGHT;
+        vel.y = 0;
+        if (keys.jump) vel.y = JUMP_SPEED;
+      }
+
+      ctx.fillStyle = themeTextColor;
+      ctx.fillRect(pos.x, pos.y, CHARACTER_WIDTH, LINE_HEIGHT);
+
+      requestAnimationFrame(loop);
+    };
+
+    requestAnimationFrame(loop);
+  }, []);
+
+  const handleJumpClick = () => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+    const pos = positionRef.current;
+    const vel = velocityRef.current;
+    let w = canvas.width;
+    let h = canvas.height;
+    let groundY = h;
+    for (const b of platformBlocksRef.current) {
+      const horizontallyOverlapping = pos.x + CHARACTER_WIDTH > b.x && pos.x < b.x + CHARACTER_WIDTH;
+      if (horizontallyOverlapping && pos.y + LINE_HEIGHT <= b.y) {
+        if (b.y < groundY) groundY = b.y;
+      }
+    }
+    if (pos.y + LINE_HEIGHT >= groundY) vel.y = JUMP_SPEED;
+  };
+
+  const handleLeftClick = () => {
+    const pos = positionRef.current;
+    pos.x -= CHARACTER_WIDTH;
+    if (pos.x < 0) pos.x = 0;
+  };
+
+  const handleRightClick = () => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+    const pos = positionRef.current;
+    pos.x += CHARACTER_WIDTH;
+    if (pos.x > canvas.width - CHARACTER_WIDTH) pos.x = canvas.width - CHARACTER_WIDTH;
+  };
+
+  return (
+    <>
+      <ActionButton hotkey="␣" onClick={handleJumpClick}>
+        Jump
+      </ActionButton>
+      <ActionButton hotkey="←" onClick={handleLeftClick}>
+        Left
+      </ActionButton>
+      <ActionButton hotkey="→" onClick={handleRightClick}>
+        Right
+      </ActionButton>
+      <div className={styles.container}>
+        <canvas className={styles.root} ref={canvasRef} />
+      </div>
+    </>
+  );
+};
+
+export default CanvasPlatformer;
+
+================
+File: reference/components/CanvasSnake.module.scss
+================
+.container {
+  width: 100%;
+  height: auto;
+  position: relative;
+}
+
+.root {
+  display: block;
+  width: 100%;
+  background: transparent;
+
+  &:focus {
+    outline: 0;
+    box-shadow: inset 0 0 0 1px var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/CanvasSnake.tsx
+================
+'use client';
+
+import styles from '@components/CanvasSnake.module.scss';
+
+import * as React from 'react';
+
+import ActionButton from '@components/ActionButton';
+
+interface SnakeProps {
+  rows?: number;
+}
+
+// TODO(jimmylee)
+// Move these constants into a separate file
+// Dynamically compute these constants since we're going to
+// Support t-shirt sizes for the system.
+const LINE_HEIGHT = 20;
+const CHARACTER_WIDTH = 9.6;
+
+interface Position {
+  x: number;
+  y: number;
+}
+
+type Direction = 'UP' | 'DOWN' | 'LEFT' | 'RIGHT';
+
+const CanvasSnake = ({ rows = 25 }: SnakeProps) => {
+  const canvasRef = React.useRef<HTMLCanvasElement>(null);
+  const [focused, setFocused] = React.useState(false);
+  const directionRef = React.useRef<Direction>('RIGHT');
+  const snakeRef = React.useRef<Position[]>([]);
+  const fruitRef = React.useRef<Position>({ x: 0, y: 0 });
+  const gridWidthRef = React.useRef<number>(0);
+  const gridHeightRef = React.useRef<number>(0);
+  const lastMoveTimeRef = React.useRef<number>(0);
+  const moveInterval = 150;
+  const animationFrameRef = React.useRef<number | null>(null);
+
+  const reset = React.useCallback(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const w = canvas.width;
+    const h = canvas.height;
+    const gridWidth = Math.floor(w / CHARACTER_WIDTH);
+    const gridHeight = Math.floor(h / LINE_HEIGHT);
+
+    gridWidthRef.current = gridWidth;
+    gridHeightRef.current = gridHeight;
+
+    const startX = Math.floor(gridWidth / 2);
+    const startY = Math.floor(gridHeight / 2);
+
+    snakeRef.current = [
+      { x: startX - 13, y: startY },
+      { x: startX - 12, y: startY },
+      { x: startX - 11, y: startY },
+      { x: startX - 10, y: startY },
+      { x: startX - 9, y: startY },
+      { x: startX - 8, y: startY },
+      { x: startX - 7, y: startY },
+      { x: startX - 6, y: startY },
+      { x: startX - 5, y: startY },
+      { x: startX - 4, y: startY },
+      { x: startX - 3, y: startY },
+      { x: startX - 2, y: startY },
+      { x: startX - 1, y: startY },
+      { x: startX, y: startY },
+    ];
+
+    directionRef.current = 'RIGHT';
+
+    fruitRef.current = {
+      x: Math.floor(Math.random() * gridWidth),
+      y: Math.floor(Math.random() * gridHeight),
+    };
+
+    lastMoveTimeRef.current = performance.now();
+  }, []);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const parent = canvas.parentElement;
+    if (!parent) return;
+
+    const onHandleResizeCanvas = () => {
+      const parentWidth = parent.clientWidth;
+      const canvasHeight = rows * LINE_HEIGHT;
+      canvas.width = parentWidth;
+      canvas.height = canvasHeight;
+      reset();
+    };
+
+    onHandleResizeCanvas();
+    window.addEventListener('resize', onHandleResizeCanvas);
+    return () => {
+      window.removeEventListener('resize', onHandleResizeCanvas);
+    };
+  }, [rows, reset]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const onHandleFocus = () => {
+      setFocused(true);
+    };
+    const onHandleBlur = () => {
+      setFocused(false);
+    };
+
+    canvas.tabIndex = 0;
+    canvas.addEventListener('focus', onHandleFocus);
+    canvas.addEventListener('blur', onHandleBlur);
+
+    return () => {
+      canvas.removeEventListener('focus', onHandleFocus);
+      canvas.removeEventListener('blur', onHandleBlur);
+    };
+  }, []);
+
+  React.useEffect(() => {
+    const handleKeyDown = (e: KeyboardEvent) => {
+      if (!focused) return;
+      if (e.key === 'ArrowLeft' || e.key === 'ArrowRight' || e.key === 'ArrowUp' || e.key === 'ArrowDown') {
+        e.preventDefault();
+        e.stopPropagation();
+      }
+      const currentDir = directionRef.current;
+      if (e.key === 'ArrowLeft' && currentDir !== 'RIGHT') directionRef.current = 'LEFT';
+      if (e.key === 'ArrowRight' && currentDir !== 'LEFT') directionRef.current = 'RIGHT';
+      if (e.key === 'ArrowUp' && currentDir !== 'DOWN') directionRef.current = 'UP';
+      if (e.key === 'ArrowDown' && currentDir !== 'UP') directionRef.current = 'DOWN';
+    };
+
+    window.addEventListener('keydown', handleKeyDown, { capture: true });
+    return () => {
+      window.removeEventListener('keydown', handleKeyDown, { capture: true });
+    };
+  }, [focused]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const ctx = canvas.getContext('2d');
+    if (!ctx) return;
+
+    const themeBorderColor = getComputedStyle(document.body).getPropertyValue('--theme-text').trim();
+    const themeTextColor = getComputedStyle(document.body).getPropertyValue('--theme-focused-foreground').trim();
+
+    const moveSnake = () => {
+      const snake = snakeRef.current;
+      const dir = directionRef.current;
+      const head = snake[snake.length - 1];
+      let newHead: Position = { x: head.x, y: head.y };
+      if (dir === 'LEFT') newHead.x -= 1;
+      if (dir === 'RIGHT') newHead.x += 1;
+      if (dir === 'UP') newHead.y -= 1;
+      if (dir === 'DOWN') newHead.y += 1;
+      if (newHead.x < 0 || newHead.x >= gridWidthRef.current || newHead.y < 0 || newHead.y >= gridHeightRef.current) {
+        reset();
+        return;
+      }
+      for (const seg of snake) {
+        if (seg.x === newHead.x && seg.y === newHead.y) {
+          reset();
+          return;
+        }
+      }
+      snake.push(newHead);
+      if (newHead.x === fruitRef.current.x && newHead.y === fruitRef.current.y) {
+        placeTarget();
+      } else {
+        snake.shift();
+      }
+    };
+
+    const placeTarget = () => {
+      const snake = snakeRef.current;
+      const gridW = gridWidthRef.current;
+      const gridH = gridHeightRef.current;
+      let fruitPos: Position;
+      while (true) {
+        fruitPos = {
+          x: Math.floor(Math.random() * gridW),
+          y: Math.floor(Math.random() * gridH),
+        };
+        if (!snake.some((s) => s.x === fruitPos.x && s.y === fruitPos.y)) break;
+      }
+      fruitRef.current = fruitPos;
+    };
+
+    const loop = (time: number) => {
+      if (!ctx) return;
+      if (!focused) return;
+
+      const w = canvas.width;
+      const h = canvas.height;
+
+      ctx.clearRect(0, 0, w, h);
+      ctx.fillStyle = themeTextColor;
+      ctx.fillRect(fruitRef.current.x * CHARACTER_WIDTH, fruitRef.current.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+      ctx.fillStyle = themeBorderColor;
+      for (const segment of snakeRef.current) {
+        ctx.fillRect(segment.x * CHARACTER_WIDTH, segment.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+      }
+      if (time - lastMoveTimeRef.current > moveInterval) {
+        moveSnake();
+        lastMoveTimeRef.current = time;
+      }
+      animationFrameRef.current = requestAnimationFrame(loop);
+    };
+
+    if (focused && animationFrameRef.current === null) {
+      animationFrameRef.current = requestAnimationFrame(loop);
+    }
+
+    return () => {
+      if (animationFrameRef.current !== null) {
+        cancelAnimationFrame(animationFrameRef.current);
+        animationFrameRef.current = null;
+      }
+    };
+  }, [focused, reset]);
+
+  React.useEffect(() => {
+    if (!focused) {
+      if (animationFrameRef.current !== null) {
+        cancelAnimationFrame(animationFrameRef.current);
+        animationFrameRef.current = null;
+      }
+
+      return;
+    }
+
+    if (animationFrameRef.current === null && canvasRef.current) {
+      animationFrameRef.current = requestAnimationFrame((time) => {
+        const canvas = canvasRef.current;
+        if (!canvas) return;
+
+        const ctx = canvas.getContext('2d');
+        if (!ctx) return;
+
+        const themeBorderColor = getComputedStyle(document.body).getPropertyValue('--theme-border').trim();
+        const themeTextColor = getComputedStyle(document.body).getPropertyValue('--theme-text').trim();
+
+        ctx.clearRect(0, 0, canvas.width, canvas.height);
+        ctx.fillStyle = themeBorderColor;
+        ctx.fillRect(fruitRef.current.x * CHARACTER_WIDTH, fruitRef.current.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+        ctx.fillStyle = themeTextColor;
+
+        for (const segment of snakeRef.current) {
+          ctx.fillRect(segment.x * CHARACTER_WIDTH, segment.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+        }
+
+        lastMoveTimeRef.current = time;
+        animationFrameRef.current = requestAnimationFrame(loop);
+
+        function loop(time: number) {
+          if (!focused) return;
+          if (!ctx) return;
+          if (!canvas) return;
+
+          ctx.clearRect(0, 0, canvas.width, canvas.height);
+          ctx.fillStyle = themeBorderColor;
+          ctx.fillRect(fruitRef.current.x * CHARACTER_WIDTH, fruitRef.current.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+          ctx.fillStyle = themeTextColor;
+          for (const segment of snakeRef.current) {
+            ctx.fillRect(segment.x * CHARACTER_WIDTH, segment.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+          }
+          if (time - lastMoveTimeRef.current > moveInterval) {
+            moveSnake();
+            lastMoveTimeRef.current = time;
+          }
+          animationFrameRef.current = requestAnimationFrame(loop);
+        }
+
+        const moveSnake = () => {
+          const snake = snakeRef.current;
+          const dir = directionRef.current;
+          const head = snake[snake.length - 1];
+          let newHead: Position = { x: head.x, y: head.y };
+          if (dir === 'LEFT') newHead.x -= 1;
+          if (dir === 'RIGHT') newHead.x += 1;
+          if (dir === 'UP') newHead.y -= 1;
+          if (dir === 'DOWN') newHead.y += 1;
+          if (newHead.x < 0 || newHead.x >= gridWidthRef.current || newHead.y < 0 || newHead.y >= gridHeightRef.current) {
+            reset();
+            return;
+          }
+
+          for (const seg of snake) {
+            if (seg.x === newHead.x && seg.y === newHead.y) {
+              reset();
+              return;
+            }
+          }
+
+          snake.push(newHead);
+          if (newHead.x === fruitRef.current.x && newHead.y === fruitRef.current.y) {
+            placeTarget();
+          } else {
+            snake.shift();
+          }
+        };
+
+        const placeTarget = () => {
+          const snake = snakeRef.current;
+          const gridW = gridWidthRef.current;
+          const gridH = gridHeightRef.current;
+          let fruitPos: Position;
+          while (true) {
+            fruitPos = {
+              x: Math.floor(Math.random() * gridW),
+              y: Math.floor(Math.random() * gridH),
+            };
+            if (!snake.some((s) => s.x === fruitPos.x && s.y === fruitPos.y)) break;
+          }
+          fruitRef.current = fruitPos;
+        };
+      });
+    }
+  }, [focused, reset]);
+
+  const onHandleClickUp = () => {
+    if (directionRef.current !== 'DOWN') directionRef.current = 'UP';
+  };
+  const onHandleClickDown = () => {
+    if (directionRef.current !== 'UP') directionRef.current = 'DOWN';
+  };
+  const onHandleClickLeft = () => {
+    if (directionRef.current !== 'RIGHT') directionRef.current = 'LEFT';
+  };
+  const onHandleClickRight = () => {
+    if (directionRef.current !== 'LEFT') directionRef.current = 'RIGHT';
+  };
+
+  return (
+    <>
+      <ActionButton hotkey="↑" onClick={onHandleClickUp}>
+        Up
+      </ActionButton>
+      <ActionButton hotkey="↓" onClick={onHandleClickDown}>
+        Down
+      </ActionButton>
+      <ActionButton hotkey="←" onClick={onHandleClickLeft}>
+        Left
+      </ActionButton>
+      <ActionButton hotkey="→" onClick={onHandleClickRight}>
+        Right
+      </ActionButton>
+      <div className={styles.container}>
+        <canvas className={styles.root} ref={canvasRef} />
+      </div>
+    </>
+  );
+};
+
+export default CanvasSnake;
+
+================
+File: reference/components/Card.module.scss
+================
+.card {
+  position: relative;
+  display: block;
+  padding-top: 0;
+  padding-left: 0;
+  padding-right: 0;
+  padding-bottom: 0;
+  white-space: prewrap;
+}
+
+.children {
+  box-shadow:
+    inset 2px 0 0 0 var(--theme-text),
+    inset -2px 0 0 0 var(--theme-text),
+    inset 0 -2px 0 0 var(--theme-text);
+  display: block;
+  padding-top: calc(var(--theme-line-height-base) * 0.5rem);
+  padding-left: 2ch;
+  padding-right: 2ch;
+  padding-bottom: calc(var(--theme-line-height-base) * 1rem);
+  overflow-x: auto;
+  overflow-y: hidden;
+
+  &::-webkit-scrollbar {
+    display: none;
+  }
+
+  scrollbar-width: none;
+}
+
+.action {
+  display: flex;
+  align-items: flex-end;
+  justify-content: space-between;
+}
+
+.left {
+  min-width: 10%;
+  width: 100%;
+  box-shadow:
+    inset 2px 0 0 0 var(--theme-text),
+    inset 0 2px 0 0 var(--theme-text);
+  padding: calc((var(--font-size) * 0.5) * var(--theme-line-height-base)) 2ch 0px 1ch;
+}
+
+.leftCorner {
+  flex-shrink: 0;
+  box-shadow:
+    inset 2px 0 0 0 var(--theme-text),
+    inset 0 2px 0 0 var(--theme-text);
+  padding: calc((var(--font-size) * 0.5) * var(--theme-line-height-base)) 1ch 0px 1ch;
+}
+
+.right {
+  min-width: 10%;
+  width: 100%;
+  box-shadow:
+    inset -2px 0 0 0 var(--theme-text),
+    inset 0 2px 0 0 var(--theme-text);
+  padding: calc((var(--font-size) * 0.5) * var(--theme-line-height-base)) 2ch 0px 1ch;
+}
+
+.rightCorner {
+  flex-shrink: 0;
+  box-shadow:
+    inset -2px 0 0 0 var(--theme-text),
+    inset 0 2px 0 0 var(--theme-text);
+  padding: calc((var(--font-size) * 0.5) * var(--theme-line-height-base)) 1ch 0px 1ch;
+}
+
+.title {
+  flex-shrink: 0;
+  padding: 0 1ch 0 1ch;
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+================
+File: reference/components/Card.tsx
+================
+import styles from '@components/Card.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface CardProps extends React.HTMLAttributes<HTMLDivElement> {
+  children?: React.ReactNode;
+  title?: string | any;
+  mode?: string | any;
+}
+
+const Card: React.FC<CardProps> = ({ children, mode, title, style, ...rest }) => {
+  let titleElement = (
+    <header className={styles.action}>
+      <div className={styles.left} aria-hidden="true"></div>
+      {title ? <h2 className={styles.title}>{title}</h2> : null}
+      <div className={styles.right} aria-hidden="true"></div>
+    </header>
+  );
+
+  if (mode === 'left') {
+    titleElement = (
+      <header className={styles.action}>
+        <div className={styles.leftCorner} aria-hidden="true"></div>
+        <h2 className={styles.title}>{title}</h2>
+        <div className={styles.right} aria-hidden="true"></div>
+      </header>
+    );
+  }
+
+  if (mode === 'right') {
+    titleElement = (
+      <header className={styles.action}>
+        <div className={styles.left} aria-hidden="true"></div>
+        <h2 className={styles.title}>{title}</h2>
+        <div className={styles.rightCorner} aria-hidden="true"></div>
+      </header>
+    );
+  }
+
+  return (
+    <article className={styles.card} style={style}>
+      {titleElement}
+      <section className={styles.children}>{children}</section>
+    </article>
+  );
+};
+
+export default Card;
+
+================
+File: reference/components/CardDouble.module.scss
+================
+.card {
+  --card-double-border-width: 6px;
+  --card-double-half-gutter: (var(--font-size) * 0.5);
+  --card-double-top-gutter: 6px;
+
+  position: relative;
+  display: block;
+  padding-top: 0;
+  padding-right: 0;
+  padding-left: 0;
+  padding-bottom: 0;
+}
+
+.children {
+  border-left: var(--card-double-border-width) solid var(--theme-text);
+  border-left-style: double;
+  border-bottom: var(--card-double-border-width) solid var(--theme-text);
+  border-bottom-style: double;
+  border-right: var(--card-double-border-width) solid var(--theme-text);
+  border-right-style: double;
+  display: block;
+  padding-top: calc(var(--theme-line-height-base) * 0.5rem);
+  padding-left: calc(2ch - var(--card-double-border-width));
+  padding-right: calc(2ch - var(--card-double-border-width));
+  padding-bottom: calc(var(--theme-line-height-base) * 1rem - var(--card-double-border-width));
+
+  overflow-x: auto;
+  overflow-y: hidden;
+
+  &::-webkit-scrollbar {
+    display: none;
+  }
+
+  scrollbar-width: none;
+}
+
+.action {
+  display: flex;
+  align-items: flex-end;
+  justify-content: space-between;
+}
+
+.left {
+  min-width: 10%;
+  width: 100%;
+  border-top: var(--card-double-border-width) solid var(--theme-text);
+  border-top-style: double;
+  border-left: var(--card-double-border-width) solid var(--theme-text);
+  border-left-style: double;
+  padding: calc(var(--card-double-top-gutter) * var(--theme-line-height-base)) 2ch 0px 1ch;
+}
+
+.leftCorner {
+  flex-shrink: 0;
+  border-top: var(--card-double-border-width) solid var(--theme-text);
+  border-top-style: double;
+  border-left: var(--card-double-border-width) solid var(--theme-text);
+  border-left-style: double;
+  padding: calc(var(--card-double-top-gutter) * var(--theme-line-height-base)) calc(1ch - 6px) 0px 1ch;
+}
+
+.right {
+  min-width: 10%;
+  width: 100%;
+  border-top: var(--card-double-border-width) solid var(--theme-text);
+  border-top-style: double;
+  border-right: var(--card-double-border-width) solid var(--theme-text);
+  border-right-style: double;
+  padding: calc(var(--card-double-top-gutter) * var(--theme-line-height-base)) 2ch 0px 1ch;
+}
+
+.rightCorner {
+  flex-shrink: 0;
+  border-top: var(--card-double-border-width) solid var(--theme-text);
+  border-top-style: double;
+  border-right: var(--card-double-border-width) solid var(--theme-text);
+  border-right-style: double;
+  padding: calc(var(--card-double-top-gutter) * var(--theme-line-height-base)) 1ch 0px calc(1ch - 6px);
+}
+
+.title {
+  flex-shrink: 0;
+  padding: 0 1ch 0 1ch;
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+================
+File: reference/components/CardDouble.tsx
+================
+import styles from '@components/CardDouble.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface CardProps extends React.HTMLAttributes<HTMLDivElement> {
+  children?: React.ReactNode;
+  title?: string | any;
+  mode?: string | any;
+  style?: any;
+}
+
+const CardDouble: React.FC<CardProps> = ({ children, mode, title, style, ...rest }) => {
+  let titleElement = (
+    <header className={styles.action}>
+      <div className={styles.left} aria-hidden="true"></div>
+      <h2 className={styles.title}>{title}</h2>
+      <div className={styles.right} aria-hidden="true"></div>
+    </header>
+  );
+
+  if (mode === 'left') {
+    titleElement = (
+      <header className={styles.action}>
+        <div className={styles.leftCorner} aria-hidden="true"></div>
+        <h2 className={styles.title}>{title}</h2>
+        <div className={styles.right} aria-hidden="true"></div>
+      </header>
+    );
+  }
+
+  if (mode === 'right') {
+    titleElement = (
+      <header className={styles.action}>
+        <div className={styles.left} aria-hidden="true"></div>
+        <h2 className={styles.title}>{title}</h2>
+        <div className={styles.rightCorner} aria-hidden="true"></div>
+      </header>
+    );
+  }
+
+  return (
+    <article className={styles.card}>
+      {titleElement}
+      <section className={styles.children}>
+        <section className={styles.borderChildren} style={style}>
+          {children}
+        </section>
+      </section>
+    </article>
+  );
+};
+
+export default CardDouble;
+
+================
+File: reference/components/Checkbox.module.scss
+================
+.section {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+
+  .right {
+    padding-bottom: calc(8px * var(--theme-line-height-base));
+    box-shadow: inset 0 1px 0 0 var(--theme-border-subdued);
+  }
+
+  &:last-child {
+    .right {
+      padding-bottom: 0;
+    }
+  }
+}
+
+.checked {
+}
+
+.focused {
+  .figure {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.relative {
+  position: relative;
+  flex-shrink: 0;
+  display: inline-block;
+  vertical-align: baseline;
+}
+
+.figure {
+  width: 100%;
+  height: 100%;
+  cursor: pointer;
+  color: var(--theme-text);
+  background: var(--theme-button-foreground);
+  align-self: stretch;
+  display: inline-block;
+  padding: 0 1ch 0 1ch;
+}
+
+.right {
+  background: var(--theme-button-background);
+  min-width: 10%;
+  width: 100%;
+  align-self: stretch;
+}
+
+.input {
+  top: 0;
+  left: 0;
+  opacity: 0;
+  position: absolute;
+  width: 1px;
+  height: 1px;
+}
+
+================
+File: reference/components/Checkbox.tsx
+================
+'use client';
+
+import styles from '@components/Checkbox.module.scss';
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface CheckboxProps {
+  style?: React.CSSProperties;
+  checkboxStyle?: React.CSSProperties;
+  name: string;
+  defaultChecked?: boolean;
+  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;
+  tabIndex?: number;
+  children?: React.ReactNode;
+}
+
+const Checkbox: React.FC<CheckboxProps> = ({ style, name, defaultChecked = false, onChange, children }) => {
+  const checkboxId = `${name}-checkbox`;
+  const inputRef = React.useRef<HTMLInputElement>(null);
+
+  const [isChecked, setIsChecked] = React.useState(defaultChecked);
+  const [isFocused, setIsFocused] = React.useState(false);
+
+  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
+    switch (event.key) {
+      case 'Enter':
+        event.preventDefault();
+        inputRef.current?.click();
+        break;
+      case 'ArrowUp':
+      case 'ArrowLeft': {
+        event.preventDefault();
+        const previousFocusable = Utilities.findNextFocusable(document.activeElement, 'previous');
+        previousFocusable?.focus();
+        break;
+      }
+      case 'ArrowDown':
+      case 'ArrowRight': {
+        event.preventDefault();
+        const nextFocusable = Utilities.findNextFocusable(document.activeElement, 'next');
+        nextFocusable?.focus();
+        break;
+      }
+      default:
+        break;
+    }
+  };
+
+  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
+    const newCheckedStatus = event.target.checked;
+    setIsChecked(newCheckedStatus);
+    if (onChange) {
+      onChange(event);
+    }
+  };
+
+  const handleFocus = () => setIsFocused(true);
+  const handleBlur = () => setIsFocused(false);
+
+  return (
+    <div
+      className={Utilities.classNames(styles.section, {
+        [styles.checked]: isChecked,
+        [styles.focused]: isFocused,
+      })}
+      style={style}
+    >
+      <div className={styles.relative}>
+        <input className={styles.input} id={checkboxId} type="checkbox" name={name} defaultChecked={defaultChecked} onChange={handleChange} onKeyDown={handleKeyDown} onFocus={handleFocus} onBlur={handleBlur} tabIndex={0} ref={inputRef} />
+        <label className={styles.figure} htmlFor={checkboxId}>
+          {isChecked ? '╳' : '\u00A0'}
+        </label>
+      </div>
+      <div className={styles.right}>&nbsp;&nbsp;{children}</div>
+    </div>
+  );
+};
+
+export default Checkbox;
+
+================
+File: reference/components/Chessboard.module.scss
+================
+.board {
+  display: inline-table;
+  border-collapse: collapse;
+}
+
+.corner {
+  width: 1ch;
+  height: calc(var(--theme-line-height-base) * 1rem);
+}
+
+.cell {
+  width: 1ch;
+  height: calc(var(--theme-line-height-base) * 1rem);
+  background-color: var(--theme-border-subdued);
+  text-align: center;
+  vertical-align: middle;
+}
+
+.square {
+  height: calc(var(--theme-line-height-base) * 2rem);
+  text-align: center;
+  vertical-align: middle;
+  width: 3ch;
+}
+
+.dark {
+  background-color: var(--theme-focused-foreground);
+}
+
+.light {
+  background-color: var(--theme-focused-foreground-subdued);
+}
+
+.symbol {
+  font-size: 40px;
+  line-height: calc(var(--theme-line-height-base) * 2rem);
+}
+
+================
+File: reference/components/Chessboard.tsx
+================
+'use client';
+
+import styles from '@components/Chessboard.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+const FILE = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];
+const RANK = [8, 7, 6, 5, 4, 3, 2, 1];
+
+const getPieceSymbol = (piece: string) => {
+  const mapping: Record<string, string> = {
+    K: '♔',
+    Q: '♕',
+    R: '♖',
+    B: '♗',
+    N: '♘',
+    P: '♙',
+    k: '♚',
+    q: '♛',
+    r: '♜',
+    b: '♝',
+    n: '♞',
+    p: '♟',
+  };
+  return mapping[piece] || '';
+};
+
+interface ChessboardProps {
+  board: string[][];
+}
+
+const Chessboard: React.FC<ChessboardProps> = ({ board }) => {
+  return (
+    <table className={styles.board}>
+      <tbody>
+        <tr>
+          <td className={styles.corner}></td>
+          {FILE.map((file) => (
+            <td key={file} className={styles.cell}>
+              {file}
+            </td>
+          ))}
+        </tr>
+        {RANK.map((rank, rowIndex) => (
+          <tr key={rank}>
+            <td className={styles.cell}>{rank}</td>
+            {FILE.map((_, colIndex) => {
+              const isDark = (rowIndex + colIndex) % 2 === 0;
+              const squareClass = isDark ? styles.dark : styles.light;
+              return (
+                <td key={colIndex} className={Utilities.classNames(styles.square, squareClass)}>
+                  <span className={styles.symbol}>{getPieceSymbol(board[rowIndex][colIndex])}</span>
+                </td>
+              );
+            })}
+          </tr>
+        ))}
+      </tbody>
+    </table>
+  );
+};
+
+export default Chessboard;
+
+================
+File: reference/components/CodeBlock.module.scss
+================
+.root {
+  display: block;
+  font-weight: 400;
+  overflow: auto;
+  font-family: inherit;
+  background: var(--theme-border-subdued);
+
+  &::-webkit-scrollbar {
+    display: none;
+  }
+
+  scrollbar-width: none;
+}
+
+.line {
+  display: flex;
+  justify-content: space-between;
+  align-items: flex-start;
+}
+
+.number {
+  display: inline-flex;
+  width: 3ch;
+  text-align: right;
+  padding-right: 1ch;
+  user-select: none;
+  background: var(--theme-background);
+  opacity: 0.5;
+}
+
+.content {
+  min-width: 10%;
+  width: 100%;
+  white-space: pre;
+  background: var(--theme-border-subdued);
+  padding-left: 2ch;
+}
+
+================
+File: reference/components/CodeBlock.tsx
+================
+'use client';
+
+import styles from '@components/CodeBlock.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface CodeBlockProps extends React.HTMLAttributes<HTMLPreElement> {
+  children?: React.ReactNode;
+}
+
+const CodeBlock = React.forwardRef<HTMLPreElement, CodeBlockProps>(({ children, ...rest }, ref) => {
+  return (
+    <pre className={styles.root} ref={ref} {...rest}>
+      {String(children)
+        .split('\n')
+        .map((line, index) => (
+          <div key={index} className={styles.line}>
+            <span className={styles.number}>{Utilities.leftPad(String(index + 1), 3)}</span>
+            <span className={styles.content}>{line}</span>
+          </div>
+        ))}
+    </pre>
+  );
+});
+
+CodeBlock.displayName = 'CodeBlock';
+
+export default CodeBlock;
+
+================
+File: reference/components/ComboBox.module.scss
+================
+.root {
+  padding: 0;
+}
+
+================
+File: reference/components/ComboBox.tsx
+================
+'use client';
+
+import styles from '@components/ComboBox.module.scss';
+
+import * as React from 'react';
+
+import AlertBanner from '@components/AlertBanner';
+import ButtonGroup from '@components/ButtonGroup';
+import CardDouble from '@components/CardDouble';
+import Input from '@components/Input';
+
+interface ComboBoxProps {
+  data: string[][];
+  label?: string;
+}
+
+function ComboBox({ data, label }: ComboBoxProps) {
+  const [searchTerm, setSearchTerm] = React.useState('');
+
+  const filtered = React.useMemo(() => {
+    const sliced = data.slice(1);
+    if (!searchTerm) return [];
+    return sliced.filter((entry) => entry[0].toLowerCase().includes(searchTerm.toLowerCase()));
+  }, [data, searchTerm]);
+
+  const displayed = React.useMemo(() => {
+    const sliced = data.slice(1);
+    if (filtered.length >= 5) return filtered.slice(0, 5);
+    if (filtered.length === 0 && searchTerm) return sliced.slice(0, 5);
+    if (filtered.length > 0 && filtered.length < 5) {
+      const needed = 5 - filtered.length;
+      const remainder = sliced.filter((entry) => !filtered.includes(entry));
+      return [...filtered, ...remainder.slice(0, needed)];
+    }
+    return sliced.slice(0, 5);
+  }, [filtered, data, searchTerm]);
+
+  const handleChange = React.useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
+    setSearchTerm(e.target.value);
+  }, []);
+
+  return (
+    <>
+      <div className={styles.root}>
+        <Input autoComplete="off" isBlink label={label} name="input_test_blink" value={searchTerm} onChange={handleChange} />
+      </div>
+      {displayed.map((entry) => (
+        <CardDouble key={entry[0]} title={entry[0]}>
+          <AlertBanner>{entry[1]}</AlertBanner>
+          <br />
+          <ButtonGroup isFull items={[{ body: 'FAVORITE' }, { body: 'DONATE' }, { body: 'LEARN MORE' }]} />
+        </CardDouble>
+      ))}
+    </>
+  );
+}
+
+export default ComboBox;
+
+================
+File: reference/components/ContentFluid.module.scss
+================
+.root {
+  display: block;
+  min-width: 10%;
+  width: 100%;
+  align-self: stretch;
+}
+
+================
+File: reference/components/ContentFluid.tsx
+================
+import styles from '@components/ContentFluid.module.scss';
+
+import * as React from 'react';
+
+interface ContentFluidProps extends React.HTMLAttributes<HTMLSpanElement> {
+  children?: React.ReactNode;
+}
+
+const ContentFluid: React.FC<ContentFluidProps> = ({ children, ...rest }) => {
+  return <div className={styles.root}>{children}</div>;
+};
+
+export default ContentFluid;
+
+================
+File: reference/components/DataTable.module.scss
+================
+.root {
+  position: relative;
+  width: 100%;
+  border-spacing: 0px;
+  max-width: 64ch;
+}
+
+.body {
+}
+
+.row {
+  transition: transform 0.5s ease;
+  border-spacing: 0px;
+
+  &:first-child {
+    font-weight: 400;
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    outline: 0;
+  }
+}
+
+.column {
+  border: 0;
+  outline: 0;
+  padding-right: 1ch;
+  transition: background-color 0.5s ease;
+}
+
+.changed {
+  animation: flash 2000ms ease;
+}
+
+@keyframes flash {
+  0% {
+    background-color: var(--theme-focused-foreground-subdued);
+  }
+  100% {
+    background-color: transparent;
+  }
+}
+
+================
+File: reference/components/DataTable.tsx
+================
+'use client';
+
+import styles from '@components/DataTable.module.scss';
+
+import * as React from 'react';
+
+interface TableProps {
+  data: string[][];
+}
+
+interface RGBAColor {
+  r: number;
+  g: number;
+  b: number;
+  a: number;
+}
+
+const BASE_FOREGROUND_RGBA: RGBAColor = { r: 98, g: 98, b: 98, a: 0.5 };
+const BASE_BACKGROUND_RGBA: RGBAColor = { r: 168, g: 168, b: 168, a: 0.5 };
+const ALPHA = 0.45;
+
+function interpolateColor(color1: RGBAColor, color2: RGBAColor, factor: number): RGBAColor {
+  return {
+    r: Math.round(color1.r + factor * (color2.r - color1.r)),
+    g: Math.round(color1.g + factor * (color2.g - color1.g)),
+    b: Math.round(color1.b + factor * (color2.b - color1.b)),
+    a: color1.a + factor * (color2.a - color1.a),
+  };
+}
+
+const DataTable: React.FC<TableProps> = ({ data }) => {
+  const tableRef = React.useRef<HTMLTableElement>(null);
+  const prevDataRef = React.useRef<string[][]>(data);
+
+  React.useEffect(() => {
+    const rows = tableRef.current?.querySelectorAll<HTMLTableRowElement>('tr') || [];
+    for (let i = 1; i < data.length; i++) {
+      const cells = rows[i]?.querySelectorAll<HTMLTableCellElement>('td');
+      if (!cells) continue;
+      for (let j = 0; j < data[i].length; j++) {
+        const cell = cells[j];
+        const changed = prevDataRef.current[i]?.[j] !== data[i][j];
+        if (cell && changed) {
+          cell.classList.remove(styles.changed);
+          void cell.offsetWidth;
+          cell.classList.add(styles.changed);
+        }
+      }
+    }
+    prevDataRef.current = data;
+  }, [data]);
+
+  const handleKeyDown = (event: React.KeyboardEvent<HTMLTableElement>) => {
+    const activeElement = document.activeElement;
+    if (!activeElement) return;
+    switch (event.key) {
+      case 'Enter':
+        event.preventDefault();
+        if (activeElement instanceof HTMLTableCellElement) {
+          activeElement.click();
+        }
+        break;
+      case 'ArrowUp':
+      case 'ArrowDown':
+      case 'ArrowLeft':
+      case 'ArrowRight':
+        event.preventDefault();
+        if (!(activeElement instanceof HTMLTableCellElement)) return;
+        const direction = event.key === 'ArrowUp' || event.key === 'ArrowLeft' ? 'previous' : 'next';
+        const allCells = Array.from(tableRef.current?.querySelectorAll<HTMLTableCellElement>('td') || []);
+        const currentIndex = allCells.indexOf(activeElement);
+        if (currentIndex === -1) return;
+        let nextIndex = direction === 'next' ? currentIndex + 1 : currentIndex - 1;
+        if (direction === 'previous') {
+          if (nextIndex < 0) nextIndex = allCells.length - 1;
+        } else {
+          if (nextIndex >= allCells.length) nextIndex = 0;
+        }
+        allCells[nextIndex].focus();
+        break;
+    }
+  };
+
+  const targetColorHeader: RGBAColor = { r: 255, g: 255, b: 255, a: ALPHA };
+  const targetColorData: RGBAColor = { r: 255, g: 255, b: 255, a: ALPHA };
+
+  return (
+    <table className={styles.root} ref={tableRef} onKeyDown={handleKeyDown}>
+      <tbody className={styles.body}>
+        {data.map((row, rowIndex) => (
+          <tr key={rowIndex} className={styles.row} tabIndex={0} onClick={() => alert('testing')}>
+            {row.map((cellContent, colIndex) => {
+              let backgroundColor: string;
+              if (rowIndex === 0) {
+                const lightnessFactor = row.length > 1 ? colIndex / (row.length - 1) : 0;
+                const newColor = interpolateColor(BASE_FOREGROUND_RGBA, targetColorHeader, lightnessFactor);
+                backgroundColor = `rgba(${newColor.r}, ${newColor.g}, ${newColor.b}, ${newColor.a.toFixed(2)})`;
+              } else {
+                const numRows = data.length - 1;
+                const maxIndexSum = numRows - 1 + (row.length - 1) || 1;
+                const indexSum = rowIndex - 1 + colIndex;
+                const lightnessFactor = indexSum / maxIndexSum;
+                const newColor = interpolateColor(BASE_BACKGROUND_RGBA, targetColorData, lightnessFactor);
+                backgroundColor = `rgba(${newColor.r}, ${newColor.g}, ${newColor.b}, ${newColor.a.toFixed(2)})`;
+              }
+              return (
+                <td key={colIndex} className={styles.column} style={{ backgroundColor }}>
+                  {cellContent}
+                </td>
+              );
+            })}
+          </tr>
+        ))}
+      </tbody>
+    </table>
+  );
+};
+
+export default DataTable;
+
+================
+File: reference/components/DatePicker.module.scss
+================
+.root {
+  display: inline-block;
+  user-select: none;
+}
+
+.controls {
+  align-items: center;
+  background: var(--theme-border);
+  display: flex;
+  justify-content: space-between;
+}
+
+.button {
+  align-self: stretch;
+  background: none;
+  border: none;
+  color: var(--theme-text);
+  cursor: pointer;
+  display: inline-block;
+  line-height: calc(var(--theme-line-height-base) * 1em);
+  margin: 0;
+  outline: 0;
+  padding: 0 1ch 0 1ch;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    outline: 0;
+  }
+}
+
+.date {
+  min-width: 10%;
+  padding: 0 1ch 0 1ch;
+  text-align: left;
+  width: 100%;
+}
+
+.header {
+  background: var(--theme-border);
+  display: grid;
+  grid-template-columns: repeat(7, 1fr);
+  text-align: center;
+}
+
+.days {
+  background: var(--theme-border-subdued);
+  display: grid;
+  grid-template-columns: repeat(7, 1fr);
+  grid-template-rows: repeat(6, min-content);
+  align-items: start;
+  min-height: calc(var(--theme-line-height-base) * 6em);
+}
+
+.cell {
+  outline: none;
+  padding: 0 1ch 0 1ch;
+  text-align: center;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/DatePicker.tsx
+================
+'use client';
+
+import styles from '@components/DatePicker.module.scss';
+
+import * as React from 'react';
+
+interface DatePickerProps {
+  year?: number;
+  month?: number;
+}
+
+const WEEKDAYS = ['SU', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA'];
+
+const MONTH_NAMES = [
+  'January', 'February', 'March', 'April', 'May', 'June',
+  'July', 'August', 'September', 'October', 'November', 'December'
+];
+
+const MAX_CELLS = 42;
+
+const DatePicker: React.FC<DatePickerProps> = ({ year, month }) => {
+  const today = new Date();
+  const [currentYear, setYear] = React.useState(year || today.getFullYear());
+  const [currentMonth, setMonth] = React.useState(month || today.getMonth() + 1);
+
+  const first = new Date(currentYear, currentMonth - 1, 1);
+  const startingWeekday = first.getDay();
+  const daysInMonth = new Date(currentYear, currentMonth, 0).getDate();
+
+  const cells: React.ReactNode[] = [];
+
+  for (let i = 0; i < startingWeekday; i++) {
+    cells.push(<div key={`empty-start-${i}`} className={styles.dayCell} />);
+  }
+
+  for (let day = 1; day <= daysInMonth; day++) {
+    const presentationDay = String(day).padStart(2, '0');
+    cells.push(
+      <div
+        key={day}
+        className={styles.cell}
+        tabIndex={0}
+        aria-label={`${currentYear}-${String(currentMonth).padStart(2, '0')}-${presentationDay}`}
+      >
+        {presentationDay}
+      </div>
+    );
+  }
+
+  while (cells.length < MAX_CELLS) {
+    cells.push(<div key={`empty-end-${cells.length}`} className={styles.dayCell} />);
+  }
+
+  const onSwitchPreviousMonth = () => {
+    let newMonth = currentMonth - 1;
+    let newYear = currentYear;
+    if (newMonth < 1) {
+      newMonth = 12;
+      newYear--;
+    }
+    setMonth(newMonth);
+    setYear(newYear);
+  };
+
+  const onSwitchNextMonth = () => {
+    let newMonth = currentMonth + 1;
+    let newYear = currentYear;
+    if (newMonth > 12) {
+      newMonth = 1;
+      newYear++;
+    }
+    setMonth(newMonth);
+    setYear(newYear);
+  };
+
+  return (
+    <div className={styles.root}>
+      <div className={styles.controls}>
+        <button type="button" className={styles.button} onClick={onSwitchPreviousMonth} aria-label="Previous month">
+          ▲
+        </button>
+        <div className={styles.date}>
+          {currentYear} {MONTH_NAMES[currentMonth - 1].toUpperCase()}
+        </div>
+        <button type="button" className={styles.button} onClick={onSwitchNextMonth} aria-label="Next month">
+          ▼
+        </button>
+      </div>
+      <div className={styles.header}>
+        {WEEKDAYS.map((day) => (
+          <div key={day} className={styles.cell}>
+            {day}
+          </div>
+        ))}
+      </div>
+      <div className={styles.days}>{cells}</div>
+    </div>
+  );
+};
+
+export default DatePicker;
+
+================
+File: reference/components/DebugGrid.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+const DebugGrid: React.FC = () => {
+  React.useEffect(() => {
+    const debugGrid = document.createElement('div');
+    let isVisible = false;
+
+    const setGridHeight = () => {
+      debugGrid.style.height = `${document.documentElement.scrollHeight}px`;
+    };
+
+    Object.assign(debugGrid.style, {
+      position: 'absolute',
+      top: '0',
+      left: '0',
+      right: '0',
+      zIndex: '-1',
+      margin: '0',
+      backgroundImage: `
+        repeating-linear-gradient(var(--theme-border) 0 1px, transparent 1px 100%),
+        repeating-linear-gradient(90deg, var(--theme-border) 0 1px, transparent 1px 100%)
+      `,
+      backgroundSize: '1ch 1.25rem',
+      pointerEvents: 'none',
+      display: 'none',
+    });
+
+    document.body.appendChild(debugGrid);
+    setGridHeight();
+
+    const toggleDebugGrid = () => {
+      isVisible = !isVisible;
+      debugGrid.style.display = isVisible ? 'block' : 'none';
+    };
+
+    const handleDebugGridToggle = () => toggleDebugGrid();
+
+    const observer = new ResizeObserver(() => {
+      setGridHeight();
+    });
+    observer.observe(document.documentElement);
+
+    window.addEventListener('debugGridToggle', handleDebugGridToggle);
+    window.addEventListener('resize', setGridHeight);
+
+    return () => {
+      document.body.removeChild(debugGrid);
+      window.removeEventListener('resize', setGridHeight);
+      window.removeEventListener('debugGridToggle', handleDebugGridToggle);
+      observer.disconnect();
+    };
+  }, []);
+
+  return null;
+};
+
+export const toggleDebugGrid = (): void => {
+  window.dispatchEvent(new CustomEvent('debugGridToggle'));
+};
+
+export default DebugGrid;
+
+================
+File: reference/components/DefaultMetaTags.tsx
+================
+export default function DefaultMetaTags() {
+  return (
+    <>
+      <meta httpEquiv="content-language" content="en-us" />
+      <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0" />
+      <link rel="icon" type="image/png" sizes="32x32" href="/favicon-16x16.png" />
+      <link rel="icon" type="image/png" sizes="16x16" href="/favicon-32x32.png" />
+      <link rel="shortcut icon" href="/favicon.ico" />
+    </>
+  );
+}
+
+================
+File: reference/components/Dialog.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border);
+  box-shadow: 1ch 1ch 0 0 var(--theme-border-subdued);
+  font-weight: 400;
+  max-width: 56ch;
+  min-width: 24ch;
+  margin: 0;
+  padding: 0;
+}
+
+.header {
+  background: var(--theme-text);
+  color: var(--theme-background);
+  text-align: center;
+  margin: 0;
+  padding: 0;
+  display: block;
+}
+
+.message {
+  display: block;
+  margin: 0;
+  text-align: center;
+  padding: 0 2ch 0 2ch;
+}
+
+.actions {
+  display: flex;
+  justify-content: space-between;
+  align-items: center;
+  max-width: 24ch;
+  margin: 0 auto 0 auto;
+  padding: 0 2ch 0 2ch;
+}
+
+================
+File: reference/components/Dialog.tsx
+================
+import styles from '@components/Dialog.module.scss';
+
+import * as React from 'react';
+
+import Block from '@components/Block';
+import Button from '@components/Button';
+
+interface DialogProps {
+  title?: React.ReactNode;
+  children?: React.ReactNode;
+  style?: React.CSSProperties;
+  onConfirm?: () => void;
+  onCancel?: () => void;
+}
+
+const Dialog: React.FC<DialogProps> = ({ title, children, style, onConfirm, onCancel }) => {
+  const titleId = React.useId();
+  const descId = React.useId();
+
+  return (
+    <div className={styles.root} style={style} role="dialog" aria-modal="true" aria-labelledby={titleId} aria-describedby={descId}>
+      <header className={styles.header}>{title}</header>
+      <br />
+      <article className={styles.message} id={descId}>
+        {children}
+      </article>
+      <br />
+      <div className={styles.actions}>
+        <Button theme="SECONDARY" onClick={onConfirm}>
+          OK
+        </Button>
+        <Block style={{ opacity: 0 }} />
+        <Button theme="SECONDARY" onClick={onCancel}>
+          Cancel
+        </Button>
+      </div>
+      <br />
+    </div>
+  );
+};
+
+export default Dialog;
+
+================
+File: reference/components/Divider.module.scss
+================
+.gradient {
+  background: linear-gradient(to right, transparent, var(--theme-border), transparent);
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  width: 100%;
+}
+
+.divider {
+  align-items: center;
+  border: 0;
+  display: flex;
+  flex-direction: column;
+  flex-shrink: 0;
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  justify-content: center;
+  outline: 0;
+  width: 100%;
+}
+
+.line {
+  background: var(--theme-text);
+  display: block;
+  flex-shrink: 0;
+  height: 2px;
+  width: 100%;
+}
+
+================
+File: reference/components/Divider.tsx
+================
+import styles from '@components/Divider.module.scss';
+
+import * as React from 'react';
+
+interface DividerProps extends React.HTMLAttributes<HTMLSpanElement> {
+  children?: React.ReactNode;
+  type?: string | any;
+  style?: any;
+}
+
+const Divider: React.FC<DividerProps> = ({ children, style, type }) => {
+  if (type === 'GRADIENT') {
+    return <div className={styles.gradient} style={style} />;
+  }
+
+  if (type === 'DOUBLE') {
+    return (
+      <div className={styles.divider} style={style}>
+        <div className={styles.line} style={{ marginBottom: `2px` }} />
+        <div className={styles.line} />
+      </div>
+    );
+  }
+
+  return (
+    <div className={styles.divider} style={style}>
+      <div className={styles.line} />
+    </div>
+  );
+};
+
+export default Divider;
+
+================
+File: reference/components/Drawer.module.scss
+================
+@keyframes fadeInLeft {
+  from {
+    opacity: 0;
+  }
+  to {
+    opacity: 1;
+  }
+}
+
+.root {
+  align-self: stretch;
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+}
+
+.side {
+  animation: fadeInLeft 0.2s ease-out;
+  min-width: 10%;
+  width: 100%;
+  align-self: stretch;
+  min-width: 22ch;
+}
+
+.right {
+  flex-shrink: 0;
+  align-self: stretch;
+  background: var(--theme-background-input);
+  display: flex;
+  align-items: center;
+  width: 3ch;
+}
+
+.action {
+  display: inline-flex;
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  font-size: var(--font-size);
+  user-select: none;
+  cursor: pointer;
+  color: var(--theme-text);
+  background: var(--theme-button-foreground);
+  flex-shrink: 0;
+  align-items: center;
+  justify-content: center;
+  border: 0;
+  outline: 0;
+  margin: 0;
+  padding: 0;
+  width: 100%;
+
+  &:focus {
+    border: 0;
+    outline: 0;
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/Drawer.tsx
+================
+'use client';
+
+import styles from '@components/Drawer.module.scss';
+
+import * as React from 'react';
+
+interface DrawerProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'defaultValue'> {
+  children?: React.ReactNode;
+  defaultValue?: boolean;
+}
+
+const Drawer: React.FC<DrawerProps> = ({ children, defaultValue = false, ...rest }) => {
+  const [expand, setExpand] = React.useState<boolean>(defaultValue);
+
+  return (
+    <div className={styles.root} {...rest}>
+      {expand ? <div className={styles.side}>{children}</div> : null}
+      <div className={styles.right}>
+        <button className={styles.action} onClick={() => setExpand(!expand)}>
+          {expand ? '⭠' : '⭢'}
+        </button>
+      </div>
+    </div>
+  );
+};
+
+export default Drawer;
+
+================
+File: reference/components/DropdownMenu.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border);
+  font-weight: 400;
+}
+
+.footer {
+  background: var(--theme-background-modal-footer);
+  padding: calc(var(--font-size) * 0.5 * var(--theme-line-height-base)) 1ch calc(var(--font-size) * 0.5 * var(--theme-line-height-base)) 1ch;
+}
+
+================
+File: reference/components/DropdownMenu.tsx
+================
+import styles from '@components/DropdownMenu.module.scss';
+
+import * as React from 'react';
+
+import ActionButton from '@components/ActionButton';
+import ActionListItem from '@components/ActionListItem';
+import ModalTrigger from '@components/ModalTrigger';
+
+import { useHotkeys } from '@modules/hotkeys';
+
+interface DropdownMenuItemProps {
+  children: React.ReactNode;
+  icon?: React.ReactNode;
+  href?: string;
+  target?: string;
+  onClick?: () => void;
+  modal?: any;
+  modalProps?: Record<string, unknown>;
+}
+
+interface DropdownMenuProps extends React.HTMLAttributes<HTMLDivElement> {
+  onClose?: (event?: MouseEvent | TouchEvent | KeyboardEvent) => void;
+  items?: DropdownMenuItemProps[];
+}
+
+const DropdownMenu = React.forwardRef<HTMLDivElement, DropdownMenuProps>((props, ref) => {
+  const { onClose, items, style, ...rest } = props;
+
+  const handleHotkey = () => {
+    if (onClose) onClose();
+  };
+
+  useHotkeys('space', handleHotkey);
+
+  return (
+    <div ref={ref} className={styles.root} style={style} {...rest}>
+      {items &&
+        items.map((each, index) => {
+          if (each.modal) {
+            return (
+              <ModalTrigger key={`action-items-${index}`} modal={each.modal} modalProps={each.modalProps}>
+                <ActionListItem children={each.children} icon={each.icon} />
+              </ModalTrigger>
+            );
+          }
+
+          return (
+            <ActionListItem
+              key={`action-items-${index}`}
+              children={each.children}
+              icon={each.icon}
+              href={each.href}
+              target={each.target}
+              onClick={() => {
+                if (each.onClick) {
+                  each.onClick();
+                }
+
+                if (onClose) {
+                  onClose();
+                }
+              }}
+            />
+          );
+        })}
+
+      <footer className={styles.footer}>
+        Press space to{' '}
+        <ActionButton
+          hotkey="␣"
+          onClick={() => {
+            if (onClose) onClose();
+          }}
+        >
+          Close
+        </ActionButton>
+      </footer>
+    </div>
+  );
+});
+
+DropdownMenu.displayName = 'DropdownMenu';
+
+export default DropdownMenu;
+
+================
+File: reference/components/DropdownMenuTrigger.module.scss
+================
+.root {
+  display: inline-block;
+  position: relative;
+}
+
+================
+File: reference/components/DropdownMenuTrigger.tsx
+================
+'use client';
+
+import styles from '@components/DropdownMenuTrigger.module.scss';
+
+import * as Position from '@common/position';
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import DropdownMenu from '@components/DropdownMenu';
+import OutsideElementEvent from '@components/detectors/OutsideElementEvent';
+
+import { createPortal } from 'react-dom';
+import { useHotkeys } from '@modules/hotkeys';
+
+interface DropdownMenuTriggerProps {
+  children: React.ReactElement<React.HTMLAttributes<HTMLElement>>;
+  items: any;
+  hotkey?: string;
+}
+
+function DropdownMenuTrigger({ children, items, hotkey }: DropdownMenuTriggerProps) {
+  const [open, setOpen] = React.useState(false);
+  const [focusChildren, setFocusChildren] = React.useState(false);
+  const [willClose, setWillClose] = React.useState(false);
+  const [placement, setPlacement] = React.useState<Position.Placement>('bottom');
+  const [position, setPosition] = React.useState<{ top: number; left: number }>({ top: 0, left: 0 });
+
+  const triggerRef = React.useRef<HTMLElement>(null);
+  const elementRef = React.useRef<HTMLDivElement>(null);
+
+  const onClick = React.useCallback((event: React.MouseEvent) => {
+    event.preventDefault();
+    setOpen(true);
+  }, []);
+
+  const onOutsideEvent = React.useCallback(() => setOpen(false), []);
+  const onClose = React.useCallback(() => setWillClose(true), []);
+
+  if (hotkey) {
+    useHotkeys(hotkey, () => {
+      setOpen(!open);
+    });
+  }
+
+  React.useEffect(() => {
+    if (focusChildren) {
+      const element = elementRef.current;
+      if (element) {
+        const firstFocusable = Utilities.findFocusableDescendant(element);
+        if (firstFocusable) {
+          firstFocusable.focus();
+        } else {
+          element.focus();
+        }
+      }
+      setFocusChildren(false);
+    }
+  }, [focusChildren]);
+
+  React.useEffect(() => {
+    if (willClose) {
+      setOpen(false);
+      setWillClose(false);
+    }
+  }, [willClose]);
+
+  React.useEffect(() => {
+    if (!open || !triggerRef.current || !elementRef.current) return;
+
+    const updatePosition = () => {
+      const { placement, position } = Position.calculate(triggerRef.current!, elementRef.current!);
+      setPlacement(placement);
+      setPosition(position);
+    };
+
+    updatePosition();
+    setFocusChildren(true);
+
+    const handleResizeOrScroll = () => updatePosition();
+    const observer = new MutationObserver(() => updatePosition());
+    observer.observe(document.body, { attributes: true, childList: true, subtree: true });
+
+    window.addEventListener('resize', handleResizeOrScroll);
+    window.addEventListener('scroll', handleResizeOrScroll, true);
+
+    return () => {
+      window.removeEventListener('resize', handleResizeOrScroll);
+      window.removeEventListener('scroll', handleResizeOrScroll, true);
+      observer.disconnect();
+    };
+  }, [open]);
+
+  const element = open
+    ? createPortal(
+        <OutsideElementEvent onOutsideEvent={onOutsideEvent}>
+          <DropdownMenu
+            onClose={onClose}
+            ref={elementRef}
+            items={items}
+            style={{
+              position: 'absolute',
+              top: `${position.top}px`,
+              left: `${position.left}px`,
+              zIndex: `var(--z-index-page-dropdown-menus)`,
+            }}
+            role="dialog"
+            aria-modal="true"
+          />
+        </OutsideElementEvent>,
+        document.body
+      )
+    : null;
+
+  return (
+    <div className={styles.root}>
+      {React.cloneElement(children, {
+        tabIndex: 0,
+        onClick,
+        // @ts-ignore
+        ref: triggerRef,
+      })}
+      {element}
+    </div>
+  );
+}
+
+export default DropdownMenuTrigger;
+
+================
+File: reference/components/Grid.module.scss
+================
+.grid {
+  display: block;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+}
+
+================
+File: reference/components/Grid.tsx
+================
+import styles from '@components/Grid.module.scss';
+
+import * as React from 'react';
+
+interface GridProps extends React.HTMLAttributes<HTMLDivElement> {
+  children?: React.ReactNode;
+}
+
+const Grid: React.FC<GridProps> = ({ children, ...rest }) => {
+  return (
+    <div className={styles.grid} {...rest}>
+      {children}
+    </div>
+  );
+};
+
+export default Grid;
+
+================
+File: reference/components/HoverComponentTrigger.module.scss
+================
+.root {
+  display: inline-block;
+  position: relative;
+}
+
+================
+File: reference/components/HoverComponentTrigger.tsx
+================
+'use client';
+
+import styles from '@components/HoverComponentTrigger.module.scss';
+
+import * as React from 'react';
+import * as Position from '@common/position';
+
+import OutsideElementEvent from '@components/detectors/OutsideElementEvent';
+import Popover from '@components/Popover';
+import Tooltip from '@components/Tooltip';
+
+import { createPortal } from 'react-dom';
+
+interface HoverComponentTriggerProps {
+  children: React.ReactElement<React.HTMLAttributes<HTMLElement>>;
+  text: string;
+  component: 'popover' | 'tooltip';
+}
+
+function HoverComponentTrigger({ children, text, component }: HoverComponentTriggerProps) {
+  const [open, setOpen] = React.useState(false);
+  const [placement, setPlacement] = React.useState<Position.Placement>('bottom');
+  const [position, setPosition] = React.useState<{ top: number; left: number }>({ top: 0, left: 0 });
+
+  const triggerRef = React.useRef<HTMLDivElement>(null);
+  const popoverRef = React.useRef<HTMLDivElement>(null);
+
+  const onMouseEnter = () => setOpen(true);
+  const onClick = () => setOpen(true);
+  const onHandleFocus = () => setOpen(true);
+  const onOutsideEvent = () => setOpen(false);
+
+  React.useEffect(() => {
+    if (!open || !triggerRef.current || !popoverRef.current) return;
+
+    const updatePosition = () => {
+      const { placement, position } = Position.calculate(triggerRef.current!, popoverRef.current!);
+      setPlacement(placement);
+      setPosition(position);
+    };
+
+    updatePosition();
+
+    const handleResizeOrScroll = () => updatePosition();
+
+    const mutationObserver = new MutationObserver(() => updatePosition());
+    mutationObserver.observe(document.body, { attributes: true, childList: true, subtree: true });
+
+    window.addEventListener('resize', handleResizeOrScroll);
+    window.addEventListener('scroll', handleResizeOrScroll, true);
+
+    return () => {
+      window.removeEventListener('resize', handleResizeOrScroll);
+      window.removeEventListener('scroll', handleResizeOrScroll, true);
+      mutationObserver.disconnect();
+    };
+  }, [open]);
+
+  const renderComponent = () => {
+    if (component === 'popover') {
+      return (
+        <Popover
+          ref={popoverRef}
+          style={{
+            position: 'absolute',
+            top: `${position.top}px`,
+            left: `${position.left}px`,
+            zIndex: `var(--z-index-page-popover)`,
+          }}
+          role="dialog"
+          aria-modal="true"
+        >
+          {text}
+        </Popover>
+      );
+    } else if (component === 'tooltip') {
+      return (
+        <Tooltip
+          ref={popoverRef}
+          style={{
+            position: 'absolute',
+            top: `${position.top}px`,
+            left: `${position.left}px`,
+            zIndex: `var(--z-index-page-tooltip)`,
+          }}
+        >
+          {text}
+        </Tooltip>
+      );
+    }
+    return null;
+  };
+
+  const popoverElement = open ? createPortal(<OutsideElementEvent onOutsideEvent={onOutsideEvent}>{renderComponent()}</OutsideElementEvent>, document.body) : null;
+
+  return (
+    <div ref={triggerRef} className={styles.root} data-detector-ignore onMouseEnter={onMouseEnter} onClick={onClick} onFocus={onHandleFocus}>
+      {React.cloneElement(children, {
+        tabIndex: 0,
+      })}
+      {popoverElement}
+    </div>
+  );
+}
+
+export default HoverComponentTrigger;
+
+================
+File: reference/components/Indent.module.scss
+================
+.root {
+  display: block;
+  padding: 0 0 0 1ch;
+}
+
+================
+File: reference/components/Indent.tsx
+================
+import styles from '@components/Indent.module.scss';
+
+import * as React from 'react';
+
+interface IndentProps extends React.HTMLAttributes<HTMLDivElement> {
+  children?: React.ReactNode;
+}
+
+const Indent: React.FC<IndentProps> = ({ children, ...rest }) => {
+  return (
+    <div className={styles.root} {...rest}>
+      {children}
+    </div>
+  );
+};
+
+export default Indent;
+
+================
+File: reference/components/Input.module.scss
+================
+.root {
+  position: relative;
+  display: block;
+}
+
+.label {
+  background: var(--theme-border);
+  display: block;
+}
+
+.placeholder {
+  font-style: italic;
+  color: var(--theme-overlay);
+}
+
+.displayed {
+  overflow: hidden;
+  white-space: nowrap;
+  pointer-events: none;
+  overflow-wrap: anywhere;
+  background: var(--theme-background-input);
+  box-shadow: inset 0 0 0 2px var(--theme-border);
+}
+
+.focused {
+  .block {
+    background: var(--theme-focused-foreground);
+  }
+
+  .placeholder {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+@keyframes blink {
+  50% {
+    opacity: 0;
+  }
+}
+
+.blink {
+  animation: blink 1s step-start 0s infinite;
+}
+
+.block {
+  display: inline-block;
+  min-width: 1ch;
+  background: var(--theme-text);
+  color: var(--theme-background);
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  vertical-align: bottom;
+}
+
+.inputContainer {
+  position: relative;
+  display: block;
+}
+
+.hidden {
+  position: absolute;
+  top: 0;
+  left: 0;
+  width: 100%;
+  color: transparent;
+  background: transparent;
+  caret-color: transparent;
+  border: none;
+  outline: none;
+  overflow: hidden;
+  padding: 0;
+  margin: 0;
+  line-height: var(--theme-line-height-base);
+  font-size: var(--font-size);
+  font-family: inherit;
+
+  &:-webkit-autofill {
+    -webkit-box-shadow: 0 0 0px 1000px var(--theme-focused-foreground) inset;
+  }
+}
+
+================
+File: reference/components/Input.tsx
+================
+'use client';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import styles from '@components/Input.module.scss';
+
+type InputProps = React.InputHTMLAttributes<HTMLInputElement> & {
+  caretChars?: string | any;
+  label?: string | any;
+  isBlink?: boolean;
+};
+
+function Input({ caretChars, isBlink = true, label, placeholder, onChange, type, id, ...rest }: InputProps) {
+  const generatedId = React.useId();
+  const inputId = id || generatedId;
+
+  const inputRef = React.useRef<HTMLInputElement | null>(null);
+  const [text, setText] = React.useState<string>(rest.defaultValue?.toString() || rest.value?.toString() || '');
+  const [isFocused, setIsFocused] = React.useState<boolean>(false);
+  const [selectionStart, setSelectionStart] = React.useState<number>(text.length);
+
+  const lastFocusDirectionRef = React.useRef<'up' | 'down' | null>(null);
+
+  React.useEffect(() => {
+    if (rest.value !== undefined) {
+      const val = rest.value.toString();
+      setText(val);
+      setSelectionStart(val.length);
+    }
+  }, [rest.value]);
+
+  const onHandleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
+    const value = e.target.value;
+    setText(value);
+    if (onChange) {
+      onChange(e);
+    }
+    setSelectionStart(e.target.selectionStart ?? value.length);
+  };
+
+  const onHandleFocus = () => {
+    setIsFocused(true);
+    if (!inputRef.current) return;
+
+    if (lastFocusDirectionRef.current === 'down') {
+      setSelectionStart(text.length);
+      inputRef.current.setSelectionRange(text.length, text.length);
+    } else if (lastFocusDirectionRef.current === 'up') {
+      setSelectionStart(0);
+      inputRef.current.setSelectionRange(0, 0);
+    }
+  };
+
+  const onHandleBlur = () => {
+    setIsFocused(false);
+  };
+
+  const onHandleSelect = (e: React.SyntheticEvent<HTMLInputElement>) => {
+    const inputEl = e.currentTarget as HTMLInputElement;
+    setSelectionStart(inputEl.selectionStart ?? text.length);
+  };
+
+  const onHandleClick = (e: React.MouseEvent<HTMLInputElement>) => {
+    const inputEl = e.currentTarget as HTMLInputElement;
+    inputEl.focus();
+    setSelectionStart(inputEl.selectionStart ?? text.length);
+  };
+
+  const onHandleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
+    if (e.key === 'ArrowUp') {
+      e.preventDefault();
+      lastFocusDirectionRef.current = 'up';
+      const previousFocusable = Utilities.findNextFocusable(document.activeElement, 'previous');
+      previousFocusable?.focus();
+    } else if (e.key === 'ArrowDown') {
+      e.preventDefault();
+      lastFocusDirectionRef.current = 'down';
+      const nextFocusable = Utilities.findNextFocusable(document.activeElement, 'next');
+      nextFocusable?.focus();
+    }
+  };
+
+  const isPlaceholderVisible = !text && placeholder;
+  const containerClasses = Utilities.classNames(styles.root, isFocused && styles.focused);
+
+  const maskText = (t: string) => (type === 'password' ? '•'.repeat(t.length) : t);
+
+  const beforeCaretText = isPlaceholderVisible ? placeholder ?? '' : maskText(text.substring(0, selectionStart));
+  const afterCaretText = isPlaceholderVisible ? '' : maskText(text.substring(selectionStart));
+
+  return (
+    <div className={containerClasses}>
+      {label && (
+        <label htmlFor={inputId} className={styles.label}>
+          {label}
+        </label>
+      )}
+      <div className={styles.inputContainer}>
+        <div className={Utilities.classNames(styles.displayed, isPlaceholderVisible && styles.placeholder)}>
+          {beforeCaretText}
+          {!isPlaceholderVisible && <span className={Utilities.classNames(styles.block, isBlink && styles.blink)}>{caretChars || ''}</span>}
+          {!isPlaceholderVisible && afterCaretText}
+        </div>
+        <input id={inputId} ref={inputRef} className={styles.hidden} value={text} aria-placeholder={placeholder} type={type} onFocus={onHandleFocus} onBlur={onHandleBlur} onChange={onHandleChange} onSelect={onHandleSelect} onClick={onHandleClick} onKeyDown={onHandleKeyDown} {...rest} />
+      </div>
+    </div>
+  );
+}
+
+export default Input;
+
+================
+File: reference/components/ListItem.module.scss
+================
+.root {
+  padding-left: 1ch;
+
+  &:focus {
+    outline: 0;
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/ListItem.tsx
+================
+'use client';
+
+import styles from '@components/ListItem.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+const ListItem = ({ children }) => {
+  const itemRef = React.useRef<HTMLLIElement>(null);
+
+  const handleKeyDown = (event: React.KeyboardEvent<HTMLLIElement>) => {
+    switch (event.key) {
+      case 'Enter':
+        event.preventDefault();
+        itemRef.current?.click();
+        break;
+      case 'ArrowUp':
+      case 'ArrowLeft': {
+        event.preventDefault();
+        const previousFocusable = Utilities.findNextFocusable(document.activeElement, 'previous');
+        previousFocusable?.focus();
+        break;
+      }
+      case 'ArrowDown':
+      case 'ArrowRight': {
+        event.preventDefault();
+        const nextFocusable = Utilities.findNextFocusable(document.activeElement, 'next');
+        nextFocusable?.focus();
+        break;
+      }
+      default:
+        break;
+    }
+  };
+
+  return (
+    <li className={styles.root} tabIndex={0} ref={itemRef} onKeyDown={handleKeyDown}>
+      {children}
+    </li>
+  );
+};
+
+export default ListItem;
+
+================
+File: reference/components/MatrixLoader.module.scss
+================
+.container {
+  width: 100%;
+  height: auto;
+  position: relative;
+}
+
+.root {
+  display: block;
+  width: 100%;
+  background: transparent;
+}
+
+================
+File: reference/components/MatrixLoader.tsx
+================
+'use client';
+
+import styles from '@components/MatrixLoader.module.scss';
+
+import * as React from 'react';
+
+interface MatrixLoaderProps {
+  rows?: number;
+  direction?: undefined | 'top-to-bottom' | 'left-to-right';
+  mode?: undefined | 'greek' | 'katakana';
+}
+
+// TODO(jimmylee)
+// Move these constants into a separate file
+// Dynamically compute these constants since we're going to
+// Support t-shirt sizes for the system.
+const LINE_HEIGHT = 20;
+const CHARACTER_WIDTH = 9.6;
+
+function onTextGeneration({ mode = 'greek' }) {
+  if (mode === 'greek') {
+    const isUppercase = Math.random() < 0.5;
+
+    return String.fromCharCode(isUppercase ? 0x0391 + Math.floor(Math.random() * (0x03a9 - 0x0391 + 1)) : 0x03b1 + Math.floor(Math.random() * (0x03c9 - 0x03b1 + 1)));
+  }
+
+  if (mode === 'katakana') {
+    const japaneseRanges = [{ start: 0x30a0, end: 0x30ff }];
+
+    const allJapaneseCharacters = japaneseRanges.flatMap((range) => Array.from({ length: range.end - range.start + 1 }, (_, i) => range.start + i));
+
+    const randomJapaneseCharacter = allJapaneseCharacters[Math.floor(Math.random() * allJapaneseCharacters.length)];
+    return String.fromCharCode(randomJapaneseCharacter);
+  }
+
+  return '0';
+}
+
+const MatrixLoader: React.FC<MatrixLoaderProps> = ({ rows = 25, direction = 'top-to-bottom', mode = 'greek' }) => {
+  const canvasRef = React.useRef<HTMLCanvasElement>(null);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const parent = canvas.parentElement;
+    if (!parent) return;
+
+    const resizeCanvas = () => {
+      const parentWidth = parent.clientWidth;
+      const parentHeight = rows * LINE_HEIGHT;
+
+      const dpr = window.devicePixelRatio || 1;
+
+      canvas.style.width = parentWidth + 'px';
+      canvas.style.height = parentHeight + 'px';
+      canvas.width = Math.floor(parentWidth * dpr);
+      canvas.height = Math.floor(parentHeight * dpr);
+
+      const ctx = canvas.getContext('2d');
+      if (ctx) {
+        ctx.scale(dpr, dpr);
+      }
+    };
+
+    resizeCanvas();
+
+    window.addEventListener('resize', resizeCanvas);
+
+    return () => {
+      window.removeEventListener('resize', resizeCanvas);
+    };
+  }, [rows]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+    const ctx = canvas.getContext('2d');
+    if (!ctx) return;
+
+    let interval: number;
+
+    const drawMatrix = () => {
+      const w = canvas.width;
+      const h = canvas.height;
+
+      if (direction === 'top-to-bottom') {
+        const cols = Math.floor(w / CHARACTER_WIDTH);
+        const ypos: number[] = Array(cols).fill(0);
+
+        const matrix = () => {
+          const themeTextColor = getComputedStyle(document.body).getPropertyValue('--theme-text').trim();
+          const fontFamily = getComputedStyle(document.body).getPropertyValue('--font-family-mono').trim();
+
+          ctx.globalCompositeOperation = 'destination-out';
+          ctx.fillStyle = 'rgba(255, 255, 255, 0.05)';
+          ctx.fillRect(0, 0, w, h);
+          ctx.textBaseline = 'top';
+          ctx.font = `16px ${fontFamily}`;
+
+          ctx.globalCompositeOperation = 'source-over';
+
+          ypos.forEach((y, ind) => {
+            const text = onTextGeneration({ mode });
+            const x = ind * CHARACTER_WIDTH;
+
+            ctx.fillStyle = themeTextColor;
+            ctx.fillText(text, x, y);
+
+            if (y > h + Math.random() * 10000) {
+              ypos[ind] = 0;
+            } else {
+              ypos[ind] = y + LINE_HEIGHT;
+            }
+          });
+        };
+
+        interval = window.setInterval(matrix, 50);
+      } else if (direction === 'left-to-right') {
+        const totalRows = rows; // Use rows directly for total rows
+        const xpos: number[] = Array(totalRows).fill(0);
+
+        const matrix = () => {
+          const themeTextColor = getComputedStyle(document.body).getPropertyValue('--theme-text').trim();
+          const fontFamily = getComputedStyle(document.body).getPropertyValue('--font-family-mono').trim();
+
+          ctx.globalCompositeOperation = 'destination-out';
+          ctx.fillStyle = 'rgba(255, 255, 255, 0.05)';
+          ctx.fillRect(0, 0, w, h);
+          ctx.textBaseline = 'top';
+          ctx.font = `16px ${fontFamily}`;
+
+          ctx.globalCompositeOperation = 'source-over';
+
+          xpos.forEach((x, ind) => {
+            const text = onTextGeneration({ mode });
+            const y = ind * LINE_HEIGHT;
+
+            ctx.fillStyle = themeTextColor;
+            ctx.fillText(text, x, y);
+
+            if (x > w + Math.random() * 10000) {
+              xpos[ind] = 0;
+            } else {
+              xpos[ind] = x + CHARACTER_WIDTH;
+            }
+          });
+        };
+
+        interval = window.setInterval(matrix, 50);
+      }
+    };
+
+    drawMatrix();
+
+    return () => {
+      window.clearInterval(interval);
+    };
+  }, [rows, direction, mode]);
+
+  return (
+    <div className={styles.container}>
+      <canvas className={styles.root} ref={canvasRef} />
+    </div>
+  );
+};
+
+export default MatrixLoader;
+
+================
+File: reference/components/Message.module.scss
+================
+.message {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+  margin-bottom: calc(var(--font-size) * var(--theme-line-height-base));
+
+  &:last-child {
+    margin-bottom: 0px;
+  }
+}
+
+.left {
+  align-self: stretch;
+  flex-shrink: 0;
+  display: flex;
+  align-items: flex-end;
+  position: relative;
+}
+
+.triangle {
+  display: inline-block;
+  width: 0;
+  height: 0;
+  border-top: calc((var(--font-size) * var(--theme-line-height-base)) / 2) solid transparent;
+  border-bottom: calc((var(--font-size) * var(--theme-line-height-base)) / 2) solid transparent;
+  border-right: 1ch solid var(--theme-border);
+  margin-bottom: calc((var(--font-size) * var(--theme-line-height-base)) / 2);
+}
+
+.right {
+  min-width: 10%;
+  width: 100%;
+  text-align: left;
+}
+
+.bubble {
+  padding: calc(8px * var(--theme-line-height-base)) 1ch calc(8px * var(--theme-line-height-base)) 1ch;
+  background: var(--theme-border);
+  display: inline-block;
+  box-shadow: 1ch 1ch 0 0 var(--theme-border-subdued);
+}
+
+================
+File: reference/components/Message.tsx
+================
+import styles from '@components/Message.module.scss';
+
+export default function Message(props) {
+  return (
+    <div className={styles.message}>
+      <div className={styles.left}>
+        <figure className={styles.triangle} />
+      </div>
+      <div className={styles.right}>
+        <div className={styles.bubble}>{props.children}</div>
+      </div>
+    </div>
+  );
+}
+
+================
+File: reference/components/MessageViewer.module.scss
+================
+.message {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+  margin-bottom: calc(var(--font-size) * var(--theme-line-height-base));
+}
+
+.bubble {
+  display: inline-block;
+  background: var(--theme-focused-foreground);
+  padding: calc(8px * var(--theme-line-height-base)) 1ch calc(8px * var(--theme-line-height-base)) 1ch;
+}
+
+.left {
+  min-width: 10%;
+  width: 100%;
+  text-align: right;
+}
+
+.right {
+  align-self: stretch;
+  flex-shrink: 0;
+  display: flex;
+  align-items: flex-end;
+}
+
+.triangle {
+  display: inline-block;
+  width: 0;
+  height: 0;
+  border-top: calc((var(--font-size) * var(--theme-line-height-base)) / 2) solid transparent;
+  border-bottom: calc((var(--font-size) * var(--theme-line-height-base)) / 2) solid transparent;
+  border-left: 1ch solid var(--theme-focused-foreground);
+  margin-bottom: calc((var(--font-size) * var(--theme-line-height-base)) / 2);
+}
+
+================
+File: reference/components/MessageViewer.tsx
+================
+import styles from '@components/MessageViewer.module.scss';
+
+export default function MessageViewer(props) {
+  return (
+    <div className={styles.message}>
+      <div className={styles.left}>
+        <div className={styles.bubble}>{props.children}</div>
+      </div>
+      <div className={styles.right}>
+        <figure className={styles.triangle} />
+      </div>
+    </div>
+  );
+}
+
+================
+File: reference/components/ModalStack.module.scss
+================
+.root {
+  align-items: center;
+  bottom: 0;
+  display: flex;
+  justify-content: center;
+  left: 0;
+  pointer-events: none;
+  position: fixed;
+  right: 0;
+  top: 0;
+  z-index: var(--z-index-page-modals);
+}
+
+.item {
+  pointer-events: auto;
+  position: absolute;
+  transition:
+    opacity 0.2s ease,
+    transform 0.4s ease;
+}
+
+================
+File: reference/components/ModalStack.tsx
+================
+'use client';
+
+import styles from '@components/ModalStack.module.scss';
+
+import * as React from 'react';
+
+import { useModals } from '@components/page/ModalContext';
+
+interface ModalStackProps {}
+
+const ModalStack: React.FC<ModalStackProps> = () => {
+  const { modalStack } = useModals();
+
+  const totalModals = modalStack.length;
+
+  return (
+    <div className={styles.root}>
+      {modalStack.map((modalState, index) => {
+        const { key, component: ModalComponent, props } = modalState;
+
+        const offsetFromLast = totalModals - 1 - index;
+        const translateY = -offsetFromLast * 40;
+        const blur = offsetFromLast * 1.1;
+
+        return (
+          <div
+            key={key}
+            className={styles.item}
+            style={{
+              zIndex: 10 + index,
+              transform: `translateY(${translateY}px)`,
+              filter: `blur(${blur}px)`,
+            }}
+          >
+            <ModalComponent {...props} />
+          </div>
+        );
+      })}
+    </div>
+  );
+};
+
+export default ModalStack;
+
+================
+File: reference/components/ModalTrigger.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+import { useModals } from '@components/page/ModalContext';
+
+interface ModalTriggerProps {
+  children: React.ReactElement<{ onClick?: React.MouseEventHandler }>;
+  modal: React.ComponentType<any>;
+  modalProps?: Record<string, any>;
+}
+
+function ModalTrigger({ children, modal, modalProps = {} }: ModalTriggerProps) {
+  const { open } = useModals();
+
+  const onHandleOpenModal = () => {
+    open(modal, modalProps);
+  };
+
+  return React.cloneElement(children, {
+    onClick: onHandleOpenModal,
+  });
+}
+
+export default ModalTrigger;
+
+================
+File: reference/components/Navigation.module.scss
+================
+.root {
+  display: flex;
+  align-items: center;
+  justify-content: space-between;
+  background: var(--theme-border);
+}
+
+.logo {
+  flex-shrink: 0;
+  padding: 0 1ch 0 1ch;
+  display: inline-flex;
+  color: var(--theme-text);
+  background: var(--theme-border);
+  text-decoration: none;
+  border: 0;
+  outline: 0;
+  border-radius: 0;
+  margin: 0;
+  font-size: var(--font-size);
+
+  &:visited {
+    color: var(--theme-text);
+  }
+
+  &:hover {
+    color: var(--theme-text);
+    background: var(--theme-focused-foreground);
+  }
+
+  &:focus {
+    outline: 0;
+    border: 0;
+    margin: 0;
+    padding: 0 1ch 0 1ch;
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.left {
+  flex-shrink: 0;
+}
+
+.children {
+  min-width: 10%;
+  width: 100%;
+}
+
+.right {
+  flex-shrink: 0;
+}
+
+================
+File: reference/components/Navigation.tsx
+================
+'use client';
+
+import styles from '@components/Navigation.module.scss';
+
+import * as React from 'react';
+
+interface NavigationProps extends React.HTMLAttributes<HTMLElement> {
+  children?: React.ReactNode;
+  logoHref?: string;
+  logoTarget?: React.HTMLAttributeAnchorTarget;
+  onClickLogo?: React.MouseEventHandler<HTMLButtonElement>;
+  logo?: React.ReactNode;
+  left?: React.ReactNode;
+  right?: React.ReactNode;
+}
+
+const Navigation: React.FC<NavigationProps> = ({ children, logoHref, logoTarget, onClickLogo, logo, left, right }) => {
+  let logoElement = <button className={styles.logo}>{logo}</button>;
+
+  if (onClickLogo) {
+    logoElement = (
+      <button className={styles.logo} onClick={onClickLogo}>
+        {logo}
+      </button>
+    );
+  }
+
+  if (logoHref) {
+    logoElement = (
+      <a href={logoHref} className={styles.logo} target={logoTarget}>
+        {logo}
+      </a>
+    );
+  }
+
+  return (
+    <nav className={styles.root}>
+      {logoElement}
+      <section className={styles.left}>{left}</section>
+      <section className={styles.children}>{children}</section>
+      <section className={styles.right}>{right}</section>
+    </nav>
+  );
+};
+
+export default Navigation;
+
+================
+File: reference/components/NumberRangeSlider.module.scss
+================
+.root {
+  display: flex;
+  align-items: center;
+  justify-content: space-between;
+}
+
+.amount {
+  flex-shrink: 0;
+  background: var(--theme-text);
+  color: var(--theme-background);
+  font-weight: 400;
+  padding: 0 1ch 0 1ch;
+}
+
+.slider {
+  border-radius: 0;
+  display: block;
+  margin: 0;
+  padding: 0;
+  width: 100%;
+  min-width: 10%;
+
+  -webkit-appearance: none;
+  -moz-appearance: none;
+  appearance: none;
+
+  background: var(--theme-border-subdued);
+
+  &:focus {
+    background: linear-gradient(to right, transparent, var(--theme-focused-foreground));
+    outline: none;
+  }
+
+  &:hover {
+    background: linear-gradient(to right, transparent, var(--theme-focused-foreground));
+    cursor: pointer;
+  }
+
+  &::-webkit-slider-thumb {
+    -webkit-appearance: none;
+    appearance: none;
+    font-size: var(--font-size);
+    width: 1ch;
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: var(--theme-button-foreground);
+    vertical-align: bottom;
+    cursor: pointer;
+    border-radius: 0;
+  }
+
+  /* Customizing the track */
+  &::-webkit-slider-runnable-track {
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: var(--theme-border-subdued);
+    border-radius: 0;
+  }
+
+  &::-moz-range-thumb {
+    -moz-appearance: none;
+    appearance: none;
+    font-size: var(--font-size);
+    width: 1ch;
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: var(--theme-button-foreground);
+    vertical-align: bottom;
+    cursor: pointer;
+    border: none;
+    border-radius: 0;
+  }
+
+  &::-moz-range-track {
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: var(--theme-border-subdued);
+    border-radius: 0;
+  }
+
+  &::-ms-thumb {
+    appearance: none;
+    font-size: var(--font-size);
+    width: 1ch;
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: var(--theme-button-foreground);
+    vertical-align: bottom;
+    cursor: pointer;
+    border: none;
+    border-radius: 0;
+  }
+
+  &::-ms-track {
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: transparent;
+    border-color: transparent;
+    color: transparent;
+  }
+
+  &::-ms-fill-lower {
+    background: var(--theme-border-subdued);
+  }
+
+  &::-ms-fill-upper {
+    background: var(--theme-border-subdued);
+  }
+}
+
+================
+File: reference/components/NumberRangeSlider.tsx
+================
+'use client';
+
+import styles from '@components/NumberRangeSlider.module.scss';
+
+import * as React from 'react';
+
+interface RangerProps {
+  defaultValue?: number;
+  max?: number;
+  min?: number;
+  step?: number;
+}
+
+const NumberRangeSlider: React.FC<RangerProps> = ({ defaultValue = 0, max = 5000, min = 0, step = 1 }) => {
+  const sliderRef = React.useRef<HTMLInputElement>(null);
+  const [displayValue, setDisplayValue] = React.useState<number>(defaultValue);
+
+  const maxDigits = max.toString().length;
+
+  const padValue = (value: number): string => {
+    return value.toString().padStart(maxDigits, '0');
+  };
+
+  React.useEffect(() => {
+    if (sliderRef.current) {
+      sliderRef.current.value = String(defaultValue);
+    }
+    setDisplayValue(defaultValue);
+  }, [defaultValue]);
+
+  const scrub = (event: React.ChangeEvent<HTMLInputElement>): void => {
+    const value = parseInt(event.target.value, 10);
+    setDisplayValue(value);
+  };
+
+  return (
+    <div className={styles.root}>
+      <label className={styles.left}>
+        <div className={styles.amount}>{padValue(displayValue)}</div>
+      </label>
+      <input className={styles.slider} defaultValue={defaultValue} max={max} min={min} onChange={scrub} ref={sliderRef} role="slider" step={step} tabIndex={0} type="range" />
+    </div>
+  );
+};
+
+export default NumberRangeSlider;
+
+================
+File: reference/components/Popover.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  font-weight: 400;
+}
+
+================
+File: reference/components/Popover.tsx
+================
+import styles from '@components/Popover.module.scss';
+
+import * as React from 'react';
+
+interface PopoverProps extends React.HTMLAttributes<HTMLDivElement> {}
+
+const Popover = React.forwardRef<HTMLDivElement, PopoverProps>(({ style: propStyle, ...rest }, ref) => {
+  const style: React.CSSProperties = { ...propStyle };
+
+  return <div ref={ref} className={styles.root} {...rest} style={style} />;
+});
+
+Popover.displayName = 'Popover';
+
+export default Popover;
+
+================
+File: reference/components/Providers.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+import { ModalProvider } from '@components/page/ModalContext';
+
+interface ProvidersProps {
+  children: React.ReactNode;
+}
+
+const Providers: React.FC<ProvidersProps> = ({ children }) => {
+  return <ModalProvider>{children}</ModalProvider>;
+};
+
+export default Providers;
+
+================
+File: reference/components/RadioButton.module.scss
+================
+.section {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+  position: relative;
+
+  .right {
+    padding-bottom: calc(8px * var(--theme-line-height-base));
+    box-shadow: inset 0 1px 0 0 var(--theme-border-subdued);
+  }
+
+  &:last-child {
+    .right {
+      padding-bottom: 0;
+    }
+  }
+}
+
+.figure {
+  display: inline-flex;
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  cursor: pointer;
+  color: var(--theme-text);
+  background: var(--theme-button-foreground);
+  width: 3ch;
+  align-items: center;
+  justify-content: center;
+}
+
+.selected {
+  .figure {
+    background: var(--theme-text);
+  }
+}
+
+.dot {
+  display: inline-block;
+  width: 1ch;
+  height: 1ch;
+  background: var(--theme-background);
+  transform: rotate(45deg);
+  vertical-align: middle;
+}
+
+.focused {
+  .figure {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.relative {
+  flex-shrink: 0;
+  display: inline-block;
+  vertical-align: baseline;
+}
+
+.right {
+  background: var(--theme-button-background);
+  min-width: 10%;
+  width: 100%;
+  align-self: stretch;
+}
+
+.input {
+  position: absolute;
+  height: 1px;
+  width: 1px;
+  opacity: 0;
+  background: transparent;
+  border: 0;
+  outline: 0;
+  margin: 0;
+  padding: 0;
+}
+
+================
+File: reference/components/RadioButton.tsx
+================
+import styles from '@components/RadioButton.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface RadioButtonProps {
+  style?: React.CSSProperties;
+  name: string;
+  value: string;
+  selected?: boolean;
+  onSelect?: (value: string) => void;
+  children?: React.ReactNode;
+}
+
+const RadioButton: React.FC<RadioButtonProps> = ({ style, name, value, selected = false, onSelect, children }) => {
+  const radioId = `${name}-${value}-radio`;
+  const [isFocused, setIsFocused] = React.useState(false);
+
+  const handleFocus = () => setIsFocused(true);
+  const handleBlur = () => setIsFocused(false);
+
+  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
+    switch (event.key) {
+      case 'Enter':
+        event.preventDefault();
+        onSelect?.(value);
+        break;
+      case 'ArrowUp':
+      case 'ArrowLeft':
+        event.preventDefault();
+        Utilities.findNextFocusable(document.activeElement, 'previous')?.focus();
+        break;
+      case 'Tab':
+      case 'ArrowDown':
+      case 'ArrowRight':
+        event.preventDefault();
+        Utilities.findNextFocusable(document.activeElement, 'next')?.focus();
+        break;
+      default:
+        break;
+    }
+  };
+
+  const handleChange = () => {
+    onSelect?.(value);
+  };
+
+  return (
+    <div
+      className={Utilities.classNames(styles.section, {
+        [styles.focused]: isFocused,
+        [styles.selected]: selected,
+      })}
+      style={style}
+    >
+      <input className={styles.input} id={radioId} type="radio" name={name} value={value} checked={selected} onFocus={handleFocus} onBlur={handleBlur} onKeyDown={handleKeyDown} onChange={handleChange} />
+      <div className={styles.relative}>
+        <label className={styles.figure} htmlFor={radioId}>
+          {selected ? <span aria-hidden="true" className={styles.dot} /> : null}
+        </label>
+      </div>
+      <div className={styles.right}>&nbsp;&nbsp;{children}</div>
+    </div>
+  );
+};
+
+export default RadioButton;
+
+================
+File: reference/components/RadioButtonGroup.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+import RadioButton from '@components/RadioButton';
+
+interface RadioButtonGroupProps {
+  options: { value: string; label: string }[];
+  defaultValue?: string;
+}
+
+const RadioButtonGroup: React.FC<RadioButtonGroupProps> = ({ options, defaultValue = '' }) => {
+  const [selectedValue, setSelectedValue] = React.useState<string>(defaultValue);
+
+  const handleSelect = (value: string) => {
+    setSelectedValue(value);
+  };
+
+  return (
+    <>
+      {options.map((option) => (
+        <RadioButton key={option.value} name="example" value={option.value} selected={selectedValue === option.value} onSelect={handleSelect}>
+          {option.label}
+        </RadioButton>
+      ))}
+    </>
+  );
+};
+
+export default RadioButtonGroup;
+
+================
+File: reference/components/Row.module.scss
+================
+.row {
+  display: block;
+  outline: 0;
+  border: 0;
+  transition: 200ms ease background;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/Row.tsx
+================
+'use client';
+
+import styles from '@components/Row.module.scss';
+
+import * as React from 'react';
+
+type RowProps = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const Row = React.forwardRef<HTMLElement, RowProps>(({ children, ...rest }, ref) => {
+  return (
+    <section className={styles.row} ref={ref} {...rest}>
+      {children}
+    </section>
+  );
+});
+
+Row.displayName = 'Row';
+
+export default Row;
+
+================
+File: reference/components/RowEllipsis.module.scss
+================
+.row {
+  display: block;
+  outline: 0;
+  border: 0;
+  transition: 200ms ease background;
+  white-space: nowrap;
+  overflow: hidden;
+  text-overflow: ellipsis;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/RowEllipsis.tsx
+================
+'use client';
+
+import styles from '@components/RowEllipsis.module.scss';
+
+import * as React from 'react';
+
+type RowEllipsisProps = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const RowEllipsis = React.forwardRef<HTMLElement, RowEllipsisProps>(({ children, ...rest }, ref) => {
+  return (
+    <section className={styles.row} ref={ref} {...rest}>
+      {children}
+    </section>
+  );
+});
+
+RowEllipsis.displayName = 'RowEllipsis';
+
+export default RowEllipsis;
+
+================
+File: reference/components/RowSpaceBetween.module.scss
+================
+.row {
+  display: flex;
+  justify-content: space-between;
+  outline: 0;
+  border: 0;
+  transition: 200ms ease background;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/RowSpaceBetween.tsx
+================
+'use client';
+
+import styles from '@components/RowSpaceBetween.module.scss';
+
+import * as React from 'react';
+
+type RowSpaceBetweenProps = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const RowSpaceBetween = React.forwardRef<HTMLElement, RowSpaceBetweenProps>(({ children, ...rest }, ref) => {
+  return (
+    <section className={styles.row} ref={ref} {...rest}>
+      {children}
+    </section>
+  );
+});
+
+RowSpaceBetween.displayName = 'RowSpaceBetween';
+
+export default RowSpaceBetween;
+
+================
+File: reference/components/Select.module.scss
+================
+.select {
+  align-items: flex-start;
+  cursor: default;
+  display: flex;
+  justify-content: space-between;
+  outline: none;
+  position: relative;
+  z-index: var(--z-index-page-select);
+}
+
+.control {
+  align-self: stretch;
+  background: var(--theme-button-foreground);
+  cursor: pointer;
+  flex-shrink: 0;
+  padding: 0 1ch 0 1ch;
+
+  &.focused {
+    background: var(--theme-text);
+    color: var(--theme-background);
+  }
+}
+
+.display {
+  background: var(--theme-border);
+  border: 0;
+  color: var(--theme-text);
+  cursor: pointer;
+  font-family: var(--font-family-mono);
+  font-size: var(--font-size);
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+  margin: 0;
+  min-width: 10%;
+  outline: 0;
+  padding: 0;
+  padding-left: 3ch;
+  text-align: left;
+  user-select: none;
+  width: 100%;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    border: 0;
+    outline: 0;
+  }
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.menu {
+  background-color: var(--theme-border-subdued);
+  left: 3ch;
+  list-style-type: none;
+  padding: 0;
+  right: 0;
+  z-index: var(--z-index-page-select);
+}
+
+.item {
+  border: 0;
+  cursor: pointer;
+  outline: 0;
+  padding-left: 6ch;
+  user-select: none;
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    border: 0;
+    outline: 0;
+  }
+}
+
+================
+File: reference/components/Select.tsx
+================
+'use client';
+
+import styles from '@components/Select.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface SelectProps {
+  name: string;
+  options: string[];
+  placeholder?: string;
+  defaultValue?: string;
+  onChange?: (selectedValue: string) => void;
+}
+
+const Select: React.FC<SelectProps> = ({ name, options, placeholder, defaultValue = '', onChange }) => {
+  const [isOpen, setIsOpen] = React.useState(false);
+  const [index, setIndex] = React.useState(-1);
+  const [selectedValue, setSelectedValue] = React.useState(defaultValue);
+
+  const containerRef = React.useRef<HTMLButtonElement | null>(null);
+
+  const handleOpen = () => {
+    setIsOpen(true);
+    const currentIndex = options.indexOf(selectedValue);
+    setIndex(currentIndex >= 0 ? currentIndex : 0);
+  };
+
+  const handleClose = () => {
+    setIsOpen(false);
+    setIndex(-1);
+
+    if (containerRef && containerRef.current) {
+      containerRef.current?.focus();
+    }
+  };
+
+  const handleSelect = (value: string) => {
+    setSelectedValue(value);
+    onChange?.(value);
+    handleClose();
+  };
+
+  return (
+    <>
+      <section className={styles.select}>
+        <figure
+          className={Utilities.classNames(isOpen ? styles.focused : null, styles.control)}
+          onClick={() => {
+            isOpen ? handleClose() : handleOpen();
+          }}
+        >
+          ▼
+        </figure>
+        <button
+          className={styles.display}
+          ref={containerRef}
+          tabIndex={0}
+          onClick={() => {
+            isOpen ? handleClose() : handleOpen();
+          }}
+          aria-haspopup="listbox"
+          aria-expanded={isOpen}
+        >
+          {selectedValue || placeholder}
+        </button>
+      </section>
+
+      {isOpen && (
+        <ul className={styles.menu} role="listbox">
+          {options.map((option, idx) => {
+            return (
+              <li key={option} role="option" tabIndex={0} className={Utilities.classNames(styles.item)} onClick={() => handleSelect(option)}>
+                {option}
+              </li>
+            );
+          })}
+        </ul>
+      )}
+    </>
+  );
+};
+
+export default Select;
+
+================
+File: reference/components/SidebarLayout.module.scss
+================
+.root {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+  white-space: pre-wrap;
+}
+
+.sidebar {
+  align-self: stretch;
+  flex-shrink: 0;
+  width: 20ch;
+}
+
+.handle {
+  align-self: stretch;
+  flex-shrink: 0;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  width: 3ch;
+  outline: 0;
+  border: 0;
+  cursor: col-resize;
+
+  &:hover {
+    .line {
+      background: var(--theme-focused-foreground);
+    }
+  }
+
+  &:focus {
+    outline: 0;
+    border: 0;
+
+    .line {
+      background: var(--theme-focused-foreground);
+    }
+  }
+}
+
+.line {
+  align-self: stretch;
+  width: 2px;
+  background: var(--theme-text);
+
+  &:first-child {
+    margin-left: 1px;
+    margin-right: 2px;
+  }
+}
+
+.content {
+  min-width: 10%;
+  width: 100%;
+}
+
+================
+File: reference/components/SidebarLayout.tsx
+================
+'use client';
+
+import styles from '@components/SidebarLayout.module.scss';
+import * as React from 'react';
+
+interface SidebarLayoutProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'defaultValue'> {
+  children?: React.ReactNode;
+  sidebar?: React.ReactNode;
+  defaultSidebarWidth?: number;
+  isShowingHandle?: boolean;
+  isReversed?: boolean;
+}
+
+const LINE_HEIGHT = 20;
+const CHARACTER_WIDTH = 9.6;
+
+const SidebarLayout: React.FC<SidebarLayoutProps> = ({ defaultSidebarWidth = 20, children, sidebar, isShowingHandle = false, isReversed = false, ...rest }) => {
+  const [sidebarWidth, setSidebarWidth] = React.useState(defaultSidebarWidth);
+  const handleRef = React.useRef<HTMLDivElement>(null);
+
+  const handleMouseDown = (event: React.MouseEvent<HTMLDivElement>) => {
+    const startX = event.clientX;
+    const startWidth = sidebarWidth;
+
+    const onMouseMove = (moveEvent: MouseEvent) => {
+      const deltaX = moveEvent.clientX - startX;
+      const increment = Math.round(deltaX / CHARACTER_WIDTH);
+      setSidebarWidth(Math.max(CHARACTER_WIDTH, startWidth + increment));
+    };
+
+    const onMouseUp = () => {
+      document.removeEventListener('mousemove', onMouseMove);
+      document.removeEventListener('mouseup', onMouseUp);
+    };
+
+    document.addEventListener('mousemove', onMouseMove);
+    document.addEventListener('mouseup', onMouseUp);
+  };
+
+  if (isReversed) {
+    return (
+      <div className={styles.root} {...rest}>
+        <div className={styles.content}>{children}</div>
+        &nbsp;
+        <div
+          className={styles.sidebar}
+          style={{
+            width: `${sidebarWidth}ch`,
+          }}
+        >
+          {sidebar}
+        </div>
+      </div>
+    );
+  }
+
+  return (
+    <div className={styles.root} {...rest}>
+      <div
+        className={styles.sidebar}
+        style={{
+          width: `${sidebarWidth}ch`,
+        }}
+      >
+        {sidebar}
+      </div>
+      {isShowingHandle ? (
+        <div className={styles.handle} ref={handleRef} role="button" tabIndex={0} onMouseDown={handleMouseDown} style={isShowingHandle ? {} : { width: `0.5ch` }}>
+          <>
+            <div className={styles.line} />
+            <div className={styles.line} />
+          </>
+        </div>
+      ) : null}
+      <div className={styles.content}>{children}</div>
+    </div>
+  );
+};
+
+export default SidebarLayout;
+
+================
+File: reference/components/Table.module.scss
+================
+.root {
+  border: 0;
+  outline: 0;
+  margin: 0;
+  padding: 0;
+  position: relative;
+  width: 100%;
+  border-spacing: 0px;
+  -webkit-text-size-adjust: 100%;
+}
+
+.body {
+}
+
+================
+File: reference/components/Table.tsx
+================
+'use client';
+
+import styles from '@components/Table.module.scss';
+
+import * as React from 'react';
+
+type TableProps = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const Table = ({ children, ...rest }) => {
+  return (
+    <table className={styles.root} {...rest}>
+      <tbody className={styles.body}>{children}</tbody>
+    </table>
+  );
+};
+
+Table.displayName = 'Table';
+
+export default Table;
+
+================
+File: reference/components/TableColumn.module.scss
+================
+.root {
+  border: 0;
+  outline: 0;
+  margin: 0;
+  padding: 0;
+  transition: background-color 0.5s ease;
+  padding-left: 1ch;
+  font-size: var(--font-size);
+  flex-shrink: 0;
+  -webkit-text-size-adjust: 100%;
+
+  &:first-child {
+    padding-left: 0px;
+  }
+}
+
+================
+File: reference/components/TableColumn.tsx
+================
+'use client';
+
+import styles from '@components/TableColumn.module.scss';
+
+import * as React from 'react';
+
+type TableColumnProps = React.HTMLAttributes<HTMLTableCellElement> & {
+  children?: React.ReactNode;
+};
+
+const TableColumn: React.FC<TableColumnProps> = ({ children, ...rest }) => {
+  return (
+    <td className={styles.root} {...rest}>
+      {children}
+    </td>
+  );
+};
+
+TableColumn.displayName = 'TableColumn';
+
+export default TableColumn;
+
+================
+File: reference/components/TableRow.module.scss
+================
+.root {
+  border: 0;
+  outline: 0;
+  margin: 0;
+  padding: 0;
+
+  transition: transform 0.5s ease;
+  border-spacing: 0px;
+  -webkit-text-size-adjust: 100%;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    outline: 0;
+  }
+}
+
+================
+File: reference/components/TableRow.tsx
+================
+'use client';
+
+import styles from '@components/TableRow.module.scss';
+
+import * as React from 'react';
+
+type TableRowProps = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const TableRow = ({ children, ...rest }) => {
+  return (
+    <tr className={styles.root} tabIndex={0} {...rest}>
+      {children}
+    </tr>
+  );
+};
+
+TableRow.displayName = 'TableRow';
+
+export default TableRow;
+
+================
+File: reference/components/Text.module.scss
+================
+.text {
+  white-space: pre-wrap;
+  overflow-wrap: break-word;
+}
+
+================
+File: reference/components/Text.tsx
+================
+import styles from '@components/Text.module.scss';
+
+import * as React from 'react';
+
+interface TextProps extends React.HTMLAttributes<HTMLParagraphElement> {
+  children?: React.ReactNode;
+}
+
+const Text: React.FC<TextProps> = ({ children, ...rest }) => {
+  return (
+    <p className={styles.text} {...rest}>
+      {children}
+    </p>
+  );
+};
+
+export default Text;
+
+================
+File: reference/components/TextArea.module.scss
+================
+.root {
+  position: relative;
+}
+
+.placeholder {
+  opacity: 0.7;
+  font-style: italic;
+}
+
+.displayed {
+  white-space: pre-wrap;
+  word-wrap: break-word;
+  pointer-events: none;
+  overflow-wrap: anywhere;
+}
+
+.hidden {
+  white-space: pre-wrap;
+  word-wrap: break-word;
+  pointer-events: none;
+  overflow-wrap: anywhere;
+  position: absolute;
+  visibility: hidden;
+  width: 100%;
+  overflow: auto;
+}
+
+.focused {
+  .block {
+    background: var(--theme-focused-foreground);
+  }
+
+  .placeholder {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+@keyframes blink {
+  50% {
+    opacity: 0;
+  }
+}
+
+.blink {
+  animation: blink 1s step-start 0s infinite;
+}
+
+.block {
+  display: inline-block;
+  min-width: 1ch;
+  background: var(--theme-text);
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  vertical-align: bottom;
+}
+
+.hiddenElement {
+  position: absolute;
+  top: 0;
+  left: 0;
+  width: 100%;
+  height: 100%;
+  color: transparent;
+  background: transparent;
+  caret-color: transparent;
+  border: none;
+  resize: none;
+  outline: none;
+  overflow: hidden;
+  padding: 0;
+  margin: 0;
+  line-height: var(--theme-line-height-base);
+  font-size: var(--font-size);
+  font-family: inherit;
+}
+
+================
+File: reference/components/TextArea.tsx
+================
+'use client';
+
+import styles from '@components/TextArea.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+type TextAreaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement> & {
+  autoPlay?: string;
+  autoPlaySpeedMS?: number;
+  isBlink?: boolean;
+};
+function TextArea({ autoPlay, autoPlaySpeedMS = 40, isBlink, placeholder, onChange, ...rest }: TextAreaProps) {
+  const textAreaRef = React.useRef<HTMLTextAreaElement | null>(null);
+  const measurementRef = React.useRef<HTMLDivElement | null>(null);
+
+  const [text, setText] = React.useState<string>(rest.defaultValue?.toString() || rest.value?.toString() || '');
+  const [isAutoPlaying, setIsAutoPlaying] = React.useState<boolean>(!!autoPlay);
+  const [isFocused, setIsFocused] = React.useState<boolean>(false);
+  const [selectionStart, setSelectionStart] = React.useState<number>(0);
+
+  const autoPlayIntervalRef = React.useRef<NodeJS.Timeout | null>(null);
+  const autoPlayIndexRef = React.useRef<number>(0);
+
+  const [currentLineIndex, setCurrentLineIndex] = React.useState<number>(0);
+  const [totalLines, setTotalLines] = React.useState<number>(0);
+
+  React.useEffect(() => {
+    if (textAreaRef.current && isFocused) {
+      textAreaRef.current.setSelectionRange(selectionStart, selectionStart);
+    }
+  }, [selectionStart, isFocused]);
+
+  React.useEffect(() => {
+    if (rest.value !== undefined) {
+      const val = rest.value.toString();
+      setText(val);
+      setIsAutoPlaying(false);
+      if (autoPlayIntervalRef.current) {
+        clearInterval(autoPlayIntervalRef.current);
+      }
+      setSelectionStart(val.length);
+    }
+  }, [rest.value]);
+
+  React.useEffect(() => {
+    if (autoPlay && !rest.value && !rest.defaultValue) {
+      setIsAutoPlaying(true);
+      autoPlayIndexRef.current = 0;
+      setText('');
+      if (autoPlayIntervalRef.current) clearInterval(autoPlayIntervalRef.current);
+
+      autoPlayIntervalRef.current = setInterval(() => {
+        autoPlayIndexRef.current++;
+        if (!autoPlay) return;
+        if (autoPlayIndexRef.current > autoPlay.length) {
+          setIsAutoPlaying(false);
+          clearInterval(autoPlayIntervalRef.current!);
+          return;
+        }
+        const newText = autoPlay.slice(0, autoPlayIndexRef.current);
+        setText(newText);
+        setSelectionStart(newText.length);
+      }, autoPlaySpeedMS);
+    }
+
+    return () => {
+      if (autoPlayIntervalRef.current) clearInterval(autoPlayIntervalRef.current);
+    };
+  }, [autoPlay, rest.value, rest.defaultValue]);
+
+  const resizeTextArea = React.useCallback(() => {
+    if (!textAreaRef.current) return;
+    textAreaRef.current.style.height = 'auto';
+    textAreaRef.current.style.height = `${textAreaRef.current.scrollHeight}px`;
+  }, []);
+
+  React.useEffect(() => {
+    resizeTextArea();
+    window.addEventListener('resize', resizeTextArea);
+    return () => window.removeEventListener('resize', resizeTextArea);
+  }, [resizeTextArea]);
+
+  const onHandleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
+    const value = e.target.value;
+    setText(value);
+    setIsAutoPlaying(false);
+    if (autoPlayIntervalRef.current) {
+      clearInterval(autoPlayIntervalRef.current);
+    }
+    resizeTextArea();
+    if (onChange) {
+      onChange(e);
+    }
+    setSelectionStart(e.target.selectionStart ?? 0);
+  };
+
+  const onHandleSelect = (e: React.SyntheticEvent<HTMLTextAreaElement>) => {
+    const textarea = e.currentTarget as HTMLTextAreaElement;
+    setSelectionStart(textarea.selectionStart);
+  };
+
+  const onHandleFocus = () => {
+    setIsFocused(true);
+    if (textAreaRef.current) {
+      setSelectionStart(textAreaRef.current.selectionStart);
+    }
+  };
+
+  const onHandleBlur = () => {
+    setIsFocused(false);
+  };
+
+  const onHandleClick = (e: React.MouseEvent<HTMLTextAreaElement>) => {
+    const textarea = e.currentTarget as HTMLTextAreaElement;
+    textarea.focus();
+    setSelectionStart(textarea.selectionStart);
+  };
+
+  React.useLayoutEffect(() => {
+    if (!measurementRef.current) return;
+
+    const measurementEl = measurementRef.current;
+    const computedStyle = window.getComputedStyle(measurementEl);
+    const lineHeightStr = computedStyle.lineHeight;
+    let lineHeight = 20;
+    if (lineHeightStr.endsWith('px')) {
+      lineHeight = parseFloat(lineHeightStr);
+    }
+
+    const countLines = (content: string) => {
+      measurementEl.textContent = content || '\u00A0';
+      const height = measurementEl.offsetHeight;
+      return Math.round(height / lineHeight);
+    };
+
+    const displayString = text || placeholder || '';
+
+    const textBeforeCaret = text.substring(0, selectionStart);
+    const textAfterCaret = text.substring(selectionStart);
+
+    const total = countLines(displayString);
+    setTotalLines(total > 0 ? total - 1 : 0);
+
+    const currentLines = countLines(textBeforeCaret);
+    setCurrentLineIndex(currentLines > 0 ? currentLines - 1 : 0);
+  }, [text, selectionStart, placeholder]);
+
+  const onHandleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
+    if (e.key === 'ArrowUp' && currentLineIndex === 0) {
+      e.preventDefault();
+      const previousFocusable = Utilities.findNextFocusable(document.activeElement, 'previous');
+      previousFocusable?.focus();
+    } else if (e.key === 'ArrowDown' && currentLineIndex === totalLines) {
+      e.preventDefault();
+      const nextFocusable = Utilities.findNextFocusable(document.activeElement, 'next');
+      nextFocusable?.focus();
+    }
+  };
+
+  const isPlaceholderVisible = !text && placeholder;
+
+  const containerClasses = Utilities.classNames(styles.root, isFocused && styles.focused);
+
+  return (
+    <div className={containerClasses}>
+      <div className={Utilities.classNames(styles.displayed, isPlaceholderVisible && styles.placeholder)}>
+        {isPlaceholderVisible ? placeholder : text.substring(0, selectionStart)}
+        {!isPlaceholderVisible && <span className={Utilities.classNames(styles.block, isBlink && styles.blink)}></span>}
+        {!isPlaceholderVisible && text.substring(selectionStart)}
+      </div>
+
+      <div ref={measurementRef} className={styles.hidden}></div>
+
+      <textarea className={styles.hiddenElement} ref={textAreaRef} value={text} aria-placeholder={placeholder} onFocus={onHandleFocus} onBlur={onHandleBlur} onKeyDown={onHandleKeyDown} onChange={onHandleChange} onSelect={onHandleSelect} onClick={onHandleClick} {...rest} />
+    </div>
+  );
+}
+
+export default TextArea;
+
+================
+File: reference/components/Tooltip.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border);
+  box-shadow: 0.5ch 0.5ch 0 0 var(--theme-border-subdued);
+  font-weight: 400;
+  max-width: 24ch;
+}
+
+================
+File: reference/components/Tooltip.tsx
+================
+import styles from '@components/Tooltip.module.scss';
+
+import * as React from 'react';
+
+interface TooltipProps extends React.HTMLAttributes<HTMLDivElement> {}
+
+const Tooltip = React.forwardRef<HTMLDivElement, TooltipProps>(({ style: propStyle, ...rest }, ref) => {
+  const style: React.CSSProperties = { ...propStyle };
+
+  return <div ref={ref} className={styles.root} {...rest} style={style} />;
+});
+
+Tooltip.displayName = 'Tooltip';
+
+export default Tooltip;
+
+================
+File: reference/components/TreeView.module.scss
+================
+.root {
+  white-space: nowrap;
+  -webkit-text-size-adjust: 100%;
+}
+
+.item {
+  cursor: pointer;
+
+  &:focus {
+    outline: 0;
+    border: 0;
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.empty {
+  opacity: 0.5;
+}
+
+================
+File: reference/components/TreeView.tsx
+================
+'use client';
+
+import styles from '@components/TreeView.module.scss';
+
+import * as React from 'react';
+
+interface TreeViewProps {
+  children?: React.ReactNode;
+  defaultValue?: boolean;
+  depth?: number;
+  isFile?: boolean;
+  isLastChild?: boolean;
+  isRoot?: boolean;
+  parentLines?: boolean[];
+  style?: any;
+  title: string;
+}
+
+const TreeView: React.FC<TreeViewProps> = ({ defaultValue = false, title, children, depth = 0, isFile = false, isRoot = false, isLastChild = false, style, parentLines = [] }) => {
+  const [show, setShow] = React.useState<boolean>(defaultValue);
+
+  const onToggleShow = (): void => {
+    if (!isFile) setShow((prevShow) => !prevShow);
+  };
+
+  const hasChildren = React.Children.count(children) > 0;
+  const isEmptyFolder = !isFile && !hasChildren;
+
+  const spacing = parentLines.map((line) => (line ? '│ . ' : '. . ')).join('');
+  const endPrefix = isLastChild ? '└───' : '├───';
+  const prefix = `${spacing}${endPrefix}`;
+  const icon = isFile ? ' ' : show ? '╦ ' : '╤ ';
+
+  const updatedParentLines = [...parentLines, !isLastChild];
+
+  return (
+    <div className={styles.root} style={style}>
+      <div tabIndex={0} role="button" onClick={onToggleShow} className={styles.item} aria-expanded={show}>
+        {prefix}
+        {icon}
+        {title}
+      </div>
+      {show && hasChildren && (
+        <div>
+          {React.Children.map(children, (child, index) =>
+            React.isValidElement(child)
+              ? React.cloneElement(child as React.ReactElement<TreeViewProps>, {
+                  depth: depth + 1,
+                  isLastChild: index === React.Children.count(children) - 1,
+                  parentLines: updatedParentLines,
+                })
+              : child
+          )}
+        </div>
+      )}
+    </div>
+  );
+};
+
+export default TreeView;
+
+================
+File: reference/modules/hotkeys/bound-hotkeys-proxy-provider.tsx
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/BoundHotkeysProxyProvider.tsx
+
+import { createContext, ReactNode, useContext } from 'react'
+import { Hotkey } from '@modules/hotkeys/types'
+
+type BoundHotkeysProxyProviderType = {
+  addHotkey: (hotkey: Hotkey) => void
+  removeHotkey: (hotkey: Hotkey) => void
+}
+
+const BoundHotkeysProxyProvider = createContext<BoundHotkeysProxyProviderType | undefined>(undefined)
+
+export const useBoundHotkeysProxy = () => {
+  return useContext(BoundHotkeysProxyProvider)
+}
+
+interface Props {
+  children: ReactNode
+  addHotkey: (hotkey: Hotkey) => void
+  removeHotkey: (hotkey: Hotkey) => void
+}
+
+export default function BoundHotkeysProxyProviderProvider({ addHotkey, removeHotkey, children }: Props) {
+  return (
+    <BoundHotkeysProxyProvider.Provider value={{ addHotkey, removeHotkey }}>
+      {children}
+    </BoundHotkeysProxyProvider.Provider>
+  )
+}
+
+================
+File: reference/modules/hotkeys/hotkeys-provider.tsx
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/HotkeysProvider.tsx
+import { Hotkey } from '@modules/hotkeys/types'
+import { createContext, ReactNode, useState, useContext, useCallback } from 'react'
+import BoundHotkeysProxyProviderProvider from '@modules/hotkeys/bound-hotkeys-proxy-provider'
+
+import * as Utilities from '@common/utilities';
+
+export type HotkeysContextType = {
+  hotkeys: ReadonlyArray<Hotkey>
+  enabledScopes: string[]
+  toggleScope: (scope: string) => void
+  enableScope: (scope: string) => void
+  disableScope: (scope: string) => void
+}
+
+// The context is only needed for special features like global scoping, so we use a graceful default fallback
+const HotkeysContext = createContext<HotkeysContextType>({
+  hotkeys: [],
+  enabledScopes: [], // This array has to be empty instead of containing '*' as default, to check if the provider is set or not
+  toggleScope: () => {},
+  enableScope: () => {},
+  disableScope: () => {},
+})
+
+export const useHotkeysContext = () => {
+  return useContext(HotkeysContext)
+}
+
+interface Props {
+  initiallyActiveScopes?: string[]
+  children: ReactNode
+}
+
+export const HotkeysProvider = ({ initiallyActiveScopes = ['*'], children }: Props) => {
+  const [internalActiveScopes, setInternalActiveScopes] = useState(
+    initiallyActiveScopes?.length > 0 ? initiallyActiveScopes : ['*']
+  )
+  const [boundHotkeys, setBoundHotkeys] = useState<Hotkey[]>([])
+
+  const enableScope = useCallback((scope: string) => {
+    setInternalActiveScopes((prev) => {
+      if (prev.includes('*')) {
+        return [scope]
+      }
+
+      return Array.from(new Set([...prev, scope]))
+    })
+  }, [])
+
+  const disableScope = useCallback((scope: string) => {
+    setInternalActiveScopes((prev) => {
+      if (prev.filter((s) => s !== scope).length === 0) {
+        return ['*']
+      } else {
+        return prev.filter((s) => s !== scope)
+      }
+    })
+  }, [])
+
+  const toggleScope = useCallback((scope: string) => {
+    setInternalActiveScopes((prev) => {
+      if (prev.includes(scope)) {
+        if (prev.filter((s) => s !== scope).length === 0) {
+          return ['*']
+        } else {
+          return prev.filter((s) => s !== scope)
+        }
+      } else {
+        if (prev.includes('*')) {
+          return [scope]
+        }
+
+        return Array.from(new Set([...prev, scope]))
+      }
+    })
+  }, [])
+
+  const addBoundHotkey = useCallback((hotkey: Hotkey) => {
+    setBoundHotkeys((prev) => [...prev, hotkey])
+  }, [])
+
+  const removeBoundHotkey = useCallback((hotkey: Hotkey) => {
+    setBoundHotkeys((prev) => prev.filter((h) => !Utilities.deepEqual(h, hotkey)))
+  }, [])
+
+  return (
+    <HotkeysContext.Provider
+      value={{ enabledScopes: internalActiveScopes, hotkeys: boundHotkeys, enableScope, disableScope, toggleScope }}
+    >
+      <BoundHotkeysProxyProviderProvider addHotkey={addBoundHotkey} removeHotkey={removeBoundHotkey}>
+        {children}
+      </BoundHotkeysProxyProviderProvider>
+    </HotkeysContext.Provider>
+  )
+}
+
+================
+File: reference/modules/hotkeys/index.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/index.ts
+
+import useHotkeys from '@modules/hotkeys/use-hotkeys'
+import type { Options, Keys, HotkeyCallback } from '@modules/hotkeys/types'
+import { HotkeysProvider, useHotkeysContext } from '@modules/hotkeys/hotkeys-provider'
+import { isHotkeyPressed } from '@modules/hotkeys/is-hotkey-pressed'
+import useRecordHotkeys from '@modules/hotkeys/use-record-hotkeys'
+
+export {
+  useHotkeys,
+  useRecordHotkeys,
+  useHotkeysContext,
+  isHotkeyPressed,
+  HotkeysProvider,
+  Options,
+  Keys,
+  HotkeyCallback,
+}
+
+================
+File: reference/modules/hotkeys/is-hotkey-pressed.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/isHotkeyPressed.ts
+
+import { isHotkeyModifier, mapKey } from '@modules/hotkeys/parse-hotkeys'
+;(() => {
+  if (typeof document !== 'undefined') {
+    document.addEventListener('keydown', (e) => {
+      if (e.key === undefined) {
+        // Synthetic event (e.g., Chrome autofill).  Ignore.
+        return
+      }
+
+      pushToCurrentlyPressedKeys([mapKey(e.key), mapKey(e.code)])
+    })
+
+    document.addEventListener('keyup', (e) => {
+      if (e.key === undefined) {
+        // Synthetic event (e.g., Chrome autofill).  Ignore.
+        return
+      }
+
+      removeFromCurrentlyPressedKeys([mapKey(e.key), mapKey(e.code)])
+    })
+  }
+
+  if (typeof window !== 'undefined') {
+    window.addEventListener('blur', () => {
+      currentlyPressedKeys.clear()
+    })
+  }
+})()
+
+const currentlyPressedKeys: Set<string> = new Set<string>()
+
+// https://github.com/microsoft/TypeScript/issues/17002
+export function isReadonlyArray(value: unknown): value is readonly unknown[] {
+  return Array.isArray(value)
+}
+
+export function isHotkeyPressed(key: string | readonly string[], splitKey = ','): boolean {
+  const hotkeyArray = isReadonlyArray(key) ? key : key.split(splitKey)
+
+  return hotkeyArray.every((hotkey) => currentlyPressedKeys.has(hotkey.trim().toLowerCase()))
+}
+
+export function pushToCurrentlyPressedKeys(key: string | string[]): void {
+  const hotkeyArray = Array.isArray(key) ? key : [key]
+
+  /*
+  Due to a weird behavior on macOS we need to clear the set if the user pressed down the meta key and presses another key.
+  https://stackoverflow.com/questions/11818637/why-does-javascript-drop-keyup-events-when-the-metakey-is-pressed-on-mac-browser
+  Otherwise the set will hold all ever pressed keys while the meta key is down which leads to wrong results.
+   */
+  if (currentlyPressedKeys.has('meta')) {
+    currentlyPressedKeys.forEach((key) => !isHotkeyModifier(key) && currentlyPressedKeys.delete(key.toLowerCase()))
+  }
+
+  hotkeyArray.forEach((hotkey) => currentlyPressedKeys.add(hotkey.toLowerCase()))
+}
+
+export function removeFromCurrentlyPressedKeys(key: string | string[]): void {
+  const hotkeyArray = Array.isArray(key) ? key : [key]
+
+  /*
+  Due to a weird behavior on macOS we need to clear the set if the user pressed down the meta key and presses another key.
+  https://stackoverflow.com/questions/11818637/why-does-javascript-drop-keyup-events-when-the-metakey-is-pressed-on-mac-browser
+  Otherwise the set will hold all ever pressed keys while the meta key is down which leads to wrong results.
+   */
+  if (key === 'meta') {
+    currentlyPressedKeys.clear()
+  } else {
+    hotkeyArray.forEach((hotkey) => currentlyPressedKeys.delete(hotkey.toLowerCase()))
+  }
+}
+
+================
+File: reference/modules/hotkeys/parse-hotkeys.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/parseHotkeys.ts
+
+import { Hotkey, KeyboardModifiers } from '@modules/hotkeys/types'
+
+const reservedModifierKeywords = ['shift', 'alt', 'meta', 'mod', 'ctrl']
+
+const mappedKeys: Record<string, string> = {
+  esc: 'escape',
+  return: 'enter',
+  '.': 'period',
+  ',': 'comma',
+  '-': 'slash',
+  ' ': 'space',
+  '`': 'backquote',
+  '#': 'backslash',
+  '+': 'bracketright',
+  ShiftLeft: 'shift',
+  ShiftRight: 'shift',
+  AltLeft: 'alt',
+  AltRight: 'alt',
+  MetaLeft: 'meta',
+  MetaRight: 'meta',
+  OSLeft: 'meta',
+  OSRight: 'meta',
+  ControlLeft: 'ctrl',
+  ControlRight: 'ctrl',
+}
+
+export function mapKey(key?: string): string {
+  return ((key && mappedKeys[key]) || key || '')
+    .trim()
+    .toLowerCase()
+    .replace(/key|digit|numpad|arrow/, '')
+}
+
+export function isHotkeyModifier(key: string) {
+  return reservedModifierKeywords.includes(key)
+}
+
+export function parseKeysHookInput(keys: string, splitKey = ','): string[] {
+  return keys.split(splitKey)
+}
+
+export function parseHotkey(hotkey: string, combinationKey = '+', description?: string): Hotkey {
+  const keys = hotkey
+    .toLocaleLowerCase()
+    .split(combinationKey)
+    .map((k) => mapKey(k))
+
+  const modifiers: KeyboardModifiers = {
+    alt: keys.includes('alt'),
+    ctrl: keys.includes('ctrl') || keys.includes('control'),
+    shift: keys.includes('shift'),
+    meta: keys.includes('meta'),
+    mod: keys.includes('mod'),
+  }
+
+  const singleCharKeys = keys.filter((k) => !reservedModifierKeywords.includes(k))
+
+  return {
+    ...modifiers,
+    keys: singleCharKeys,
+    description,
+    hotkey,
+  }
+}
+
+================
+File: reference/modules/hotkeys/types.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/types.ts
+import type { DependencyList } from 'react'
+
+export type FormTags = 'input' | 'textarea' | 'select' | 'INPUT' | 'TEXTAREA' | 'SELECT'
+export type Keys = string | readonly string[]
+export type Scopes = string | readonly string[]
+
+export type RefType<T> = T | null
+
+export type KeyboardModifiers = {
+  alt?: boolean
+  ctrl?: boolean
+  meta?: boolean
+  shift?: boolean
+  mod?: boolean
+}
+
+export type Hotkey = KeyboardModifiers & {
+  keys?: readonly string[]
+  scopes?: Scopes
+  description?: string
+  hotkey: string
+}
+
+export type HotkeysEvent = Hotkey
+
+export type HotkeyCallback = (keyboardEvent: KeyboardEvent, hotkeysEvent: HotkeysEvent) => void
+
+export type Trigger = boolean | ((keyboardEvent: KeyboardEvent, hotkeysEvent: HotkeysEvent) => boolean)
+
+export type Options = {
+  enabled?: Trigger // Main setting that determines if the hotkey is enabled or not. (Default: true)
+  enableOnFormTags?: readonly FormTags[] | boolean // Enable hotkeys on a list of tags. (Default: false)
+  enableOnContentEditable?: boolean // Enable hotkeys on tags with contentEditable props. (Default: false)
+  ignoreEventWhen?: (e: KeyboardEvent) => boolean // Ignore evenets based on a condition (Default: undefined)
+  combinationKey?: string // Character to split keys in hotkeys combinations. (Default: +)
+  splitKey?: string // Character to separate different hotkeys. (Default: ,)
+  scopes?: Scopes // Scope
+  keyup?: boolean // Trigger on keyup event? (Default: undefined)
+  keydown?: boolean // Trigger on keydown event? (Default: true)
+  preventDefault?: Trigger // Prevent default browser behavior? (Default: false)
+  description?: string // Use this option to describe what the hotkey does. (Default: undefined)
+  document?: Document // Listen to events on the document instead of the window. (Default: false)
+  ignoreModifiers?: boolean // Ignore modifiers when matching hotkeys. (Default: false)
+}
+
+export type OptionsOrDependencyArray = Options | DependencyList
+
+================
+File: reference/modules/hotkeys/use-deep-equal-memo.ts
+================
+import { useRef } from 'react'
+
+import * as Utilities from '@common/utilities';
+
+export default function useDeepEqualMemo<T>(value: T) {
+  const ref = useRef<T | undefined>(undefined)
+
+  if (!Utilities.deepEqual(ref.current, value)) {
+    ref.current = value
+  }
+
+  return ref.current
+}
+
+================
+File: reference/modules/hotkeys/use-hotkeys.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/useHotkeys.ts
+
+import { HotkeyCallback, Keys, Options, OptionsOrDependencyArray, RefType } from '@modules/hotkeys/types'
+import { DependencyList, RefCallback, useCallback, useEffect, useState, useLayoutEffect, useRef } from 'react'
+import { mapKey, parseHotkey, parseKeysHookInput } from '@modules/hotkeys/parse-hotkeys'
+import {
+  isHotkeyEnabled,
+  isHotkeyEnabledOnTag,
+  isHotkeyMatchingKeyboardEvent,
+  isKeyboardEventTriggeredByInput,
+  isScopeActive,
+  maybePreventDefault,
+} from '@modules/hotkeys/validators'
+import { useHotkeysContext } from '@modules/hotkeys/hotkeys-provider'
+import { useBoundHotkeysProxy } from '@modules/hotkeys/bound-hotkeys-proxy-provider'
+import useDeepEqualMemo from '@modules/hotkeys/use-deep-equal-memo'
+import { isReadonlyArray, pushToCurrentlyPressedKeys, removeFromCurrentlyPressedKeys } from '@modules/hotkeys/is-hotkey-pressed'
+
+const stopPropagation = (e: KeyboardEvent): void => {
+  e.stopPropagation()
+  e.preventDefault()
+  e.stopImmediatePropagation()
+}
+
+const useSafeLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect
+
+export default function useHotkeys<T extends HTMLElement>(
+  keys: Keys,
+  callback: HotkeyCallback,
+  options?: OptionsOrDependencyArray,
+  dependencies?: OptionsOrDependencyArray
+) {
+  const [ref, setRef] = useState<RefType<T>>(null)
+  const hasTriggeredRef = useRef(false)
+
+  const _options: Options | undefined = !(options instanceof Array)
+    ? (options as Options)
+    : !(dependencies instanceof Array)
+    ? (dependencies as Options)
+    : undefined
+  const _keys: string = isReadonlyArray(keys) ? keys.join(_options?.splitKey) : keys
+  const _deps: DependencyList | undefined =
+    options instanceof Array ? options : dependencies instanceof Array ? dependencies : undefined
+
+  const memoisedCB = useCallback(callback, _deps ?? [])
+  const cbRef = useRef<HotkeyCallback>(memoisedCB)
+
+  if (_deps) {
+    cbRef.current = memoisedCB
+  } else {
+    cbRef.current = callback
+  }
+
+  const memoisedOptions = useDeepEqualMemo(_options)
+
+  const { enabledScopes } = useHotkeysContext()
+  const proxy = useBoundHotkeysProxy()
+
+  useSafeLayoutEffect(() => {
+    if (memoisedOptions?.enabled === false || !isScopeActive(enabledScopes, memoisedOptions?.scopes)) {
+      return
+    }
+
+    const listener = (e: KeyboardEvent, isKeyUp = false) => {
+      if (isKeyboardEventTriggeredByInput(e) && !isHotkeyEnabledOnTag(e, memoisedOptions?.enableOnFormTags)) {
+        return
+      }
+
+      // TODO: SINCE THE EVENT IS NOW ATTACHED TO THE REF, THE ACTIVE ELEMENT CAN NEVER BE INSIDE THE REF. THE HOTKEY ONLY TRIGGERS IF THE
+      // REF IS THE ACTIVE ELEMENT. THIS IS A PROBLEM SINCE FOCUSED SUB COMPONENTS WON'T TRIGGER THE HOTKEY.
+      if (ref !== null) {
+        const rootNode = ref.getRootNode()
+        if (
+          (rootNode instanceof Document || rootNode instanceof ShadowRoot) &&
+          rootNode.activeElement !== ref &&
+          !ref.contains(rootNode.activeElement)
+        ) {
+          stopPropagation(e)
+          return
+        }
+      }
+
+      if ((e.target as HTMLElement)?.isContentEditable && !memoisedOptions?.enableOnContentEditable) {
+        return
+      }
+
+      parseKeysHookInput(_keys, memoisedOptions?.splitKey).forEach((key) => {
+        const hotkey = parseHotkey(key, memoisedOptions?.combinationKey)
+
+        if (isHotkeyMatchingKeyboardEvent(e, hotkey, memoisedOptions?.ignoreModifiers) || hotkey.keys?.includes('*')) {
+          if (memoisedOptions?.ignoreEventWhen?.(e)) {
+            return
+          }
+
+          if (isKeyUp && hasTriggeredRef.current) {
+            return
+          }
+
+          maybePreventDefault(e, hotkey, memoisedOptions?.preventDefault)
+
+          if (!isHotkeyEnabled(e, hotkey, memoisedOptions?.enabled)) {
+            stopPropagation(e)
+
+            return
+          }
+
+          // Execute the user callback for that hotkey
+          cbRef.current(e, hotkey)
+
+          if (!isKeyUp) {
+            hasTriggeredRef.current = true
+          }
+        }
+      })
+    }
+
+    const handleKeyDown = (event: KeyboardEvent) => {
+      if (event.key === undefined) {
+        // Synthetic event (e.g., Chrome autofill).  Ignore.
+        return
+      }
+
+      pushToCurrentlyPressedKeys(mapKey(event.code))
+
+      if ((memoisedOptions?.keydown === undefined && memoisedOptions?.keyup !== true) || memoisedOptions?.keydown) {
+        listener(event)
+      }
+    }
+
+    const handleKeyUp = (event: KeyboardEvent) => {
+      if (event.key === undefined) {
+        // Synthetic event (e.g., Chrome autofill).  Ignore.
+        return
+      }
+
+      removeFromCurrentlyPressedKeys(mapKey(event.code))
+
+      hasTriggeredRef.current = false
+
+      if (memoisedOptions?.keyup) {
+        listener(event, true)
+      }
+    }
+
+    const domNode = ref || _options?.document || document
+
+    // @ts-ignore
+    domNode.addEventListener('keyup', handleKeyUp)
+    // @ts-ignore
+    domNode.addEventListener('keydown', handleKeyDown)
+
+    if (proxy) {
+      parseKeysHookInput(_keys, memoisedOptions?.splitKey).forEach((key) =>
+        proxy.addHotkey(parseHotkey(key, memoisedOptions?.combinationKey, memoisedOptions?.description))
+      )
+    }
+
+    return () => {
+      // @ts-ignore
+      domNode.removeEventListener('keyup', handleKeyUp)
+      // @ts-ignore
+      domNode.removeEventListener('keydown', handleKeyDown)
+
+      if (proxy) {
+        parseKeysHookInput(_keys, memoisedOptions?.splitKey).forEach((key) =>
+          proxy.removeHotkey(parseHotkey(key, memoisedOptions?.combinationKey, memoisedOptions?.description))
+        )
+      }
+    }
+  }, [ref, _keys, memoisedOptions, enabledScopes])
+
+  return setRef as RefCallback<T>
+}
+
+================
+File: reference/modules/hotkeys/use-record-hotkeys.ts
+================
+import { useCallback, useState } from 'react'
+import { mapKey } from '@modules/hotkeys/parse-hotkeys'
+
+export default function useRecordHotkeys() {
+  const [keys, setKeys] = useState(new Set<string>())
+  const [isRecording, setIsRecording] = useState(false)
+
+  const handler = useCallback((event: KeyboardEvent) => {
+    if (event.key === undefined) {
+      // Synthetic event (e.g., Chrome autofill).  Ignore.
+      return
+    }
+
+    event.preventDefault()
+    event.stopPropagation()
+
+    setKeys((prev) => {
+      const newKeys = new Set(prev)
+
+      newKeys.add(mapKey(event.code))
+
+      return newKeys
+    })
+  }, [])
+
+  const stop = useCallback(() => {
+    if (typeof document !== 'undefined') {
+      document.removeEventListener('keydown', handler)
+
+      setIsRecording(false)
+    }
+  }, [handler])
+
+  const start = useCallback(() => {
+    setKeys(new Set<string>())
+
+    if (typeof document !== 'undefined') {
+      stop()
+
+      document.addEventListener('keydown', handler)
+
+      setIsRecording(true)
+    }
+  }, [handler, stop])
+
+  const resetKeys = useCallback(() => {
+    setKeys(new Set<string>())
+  }, [])
+
+  return [keys, { start, stop, resetKeys, isRecording }] as const
+}
+
+================
+File: reference/modules/hotkeys/validators.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/validators.ts
+
+import { FormTags, Hotkey, Scopes, Trigger } from '@modules/hotkeys/types'
+import { isHotkeyPressed, isReadonlyArray } from '@modules/hotkeys/is-hotkey-pressed'
+import { mapKey } from '@modules/hotkeys/parse-hotkeys'
+
+export function maybePreventDefault(e: KeyboardEvent, hotkey: Hotkey, preventDefault?: Trigger): void {
+  if ((typeof preventDefault === 'function' && preventDefault(e, hotkey)) || preventDefault === true) {
+    e.preventDefault()
+  }
+}
+
+export function isHotkeyEnabled(e: KeyboardEvent, hotkey: Hotkey, enabled?: Trigger): boolean {
+  if (typeof enabled === 'function') {
+    return enabled(e, hotkey)
+  }
+
+  return enabled === true || enabled === undefined
+}
+
+export function isKeyboardEventTriggeredByInput(ev: KeyboardEvent): boolean {
+  return isHotkeyEnabledOnTag(ev, ['input', 'textarea', 'select'])
+}
+
+export function isHotkeyEnabledOnTag(
+  event: KeyboardEvent,
+  enabledOnTags: readonly FormTags[] | boolean = false
+): boolean {
+  const {target, composed} = event;
+
+  let targetTagName: string | null = null
+
+  if (isCustomElement(target as HTMLElement) && composed) {
+    targetTagName = event.composedPath()[0] && (event.composedPath()[0] as HTMLElement).tagName;
+  } else {
+    targetTagName = target && (target as HTMLElement).tagName;
+  }
+
+  if (isReadonlyArray(enabledOnTags)) {
+    return Boolean(
+      targetTagName && enabledOnTags && enabledOnTags.some((tag) => tag.toLowerCase() === targetTagName?.toLowerCase())
+    )
+  }
+
+  return Boolean(targetTagName && enabledOnTags && enabledOnTags)
+}
+
+export function isCustomElement(element: HTMLElement): boolean {
+  // We just do a basic check w/o any complex RegEx or validation against the list of legacy names containing a hyphen,
+  // as none of them is likely to be an event target, and it won't hurt anyway if we miss.
+  // see: https://html.spec.whatwg.org/multipage/custom-elements.html#prod-potentialcustomelementname
+  return !!element.tagName && !element.tagName.startsWith("-") && element.tagName.includes("-");
+}
+
+export function isScopeActive(activeScopes: string[], scopes?: Scopes): boolean {
+  if (activeScopes.length === 0 && scopes) {
+    console.warn(
+      'A hotkey has the "scopes" option set, however no active scopes were found. If you want to use the global scopes feature, you need to wrap your app in a <HotkeysProvider>'
+    )
+
+    return true
+  }
+
+  if (!scopes) {
+    return true
+  }
+
+  return activeScopes.some((scope) => scopes.includes(scope)) || activeScopes.includes('*')
+}
+
+export const isHotkeyMatchingKeyboardEvent = (e: KeyboardEvent, hotkey: Hotkey, ignoreModifiers = false): boolean => {
+  const { alt, meta, mod, shift, ctrl, keys } = hotkey
+  const { key: pressedKeyUppercase, code, ctrlKey, metaKey, shiftKey, altKey } = e
+
+  const keyCode = mapKey(code)
+  const pressedKey = pressedKeyUppercase.toLowerCase()
+
+  if (
+    !keys?.includes(keyCode) &&
+    !keys?.includes(pressedKey) &&
+    !['ctrl', 'control', 'unknown', 'meta', 'alt', 'shift', 'os'].includes(keyCode)
+  ) {
+    return false
+  }
+
+  if (!ignoreModifiers) {
+    // We check the pressed keys for compatibility with the keyup event. In keyup events the modifier flags are not set.
+    if (alt === !altKey && pressedKey !== 'alt') {
+      return false
+    }
+
+    if (shift === !shiftKey && pressedKey !== 'shift') {
+      return false
+    }
+
+    // Mod is a special key name that is checking for meta on macOS and ctrl on other platforms
+    if (mod) {
+      if (!metaKey && !ctrlKey) {
+        return false
+      }
+    } else {
+      if (meta === !metaKey && pressedKey !== 'meta' && pressedKey !== 'os') {
+        return false
+      }
+
+      if (ctrl === !ctrlKey && pressedKey !== 'ctrl' && pressedKey !== 'control') {
+        return false
+      }
+    }
+  }
+
+  // All modifiers are correct, now check the key
+  // If the key is set, we check for the key
+  if (keys && keys.length === 1 && (keys.includes(pressedKey) || keys.includes(keyCode))) {
+    return true
+  } else if (keys) {
+    // Check if all keys are present in pressedDownKeys set
+    return isHotkeyPressed(keys)
+  } else if (!keys) {
+    // If the key is not set, we only listen for modifiers, that check went alright, so we return true
+    return true
+  }
+
+  // There is nothing that matches.
+  return false
+}
+
+================
+File: reference/modules/cors.ts
+================
+// @ts-nocheck
+
+'use strict';
+
+import assign from '@modules/object-assign';
+import vary from '@modules/vary';
+
+var defaults = {
+  origin: '*',
+  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
+  preflightContinue: false,
+  optionsSuccessStatus: 204,
+};
+
+function isString(s) {
+  return typeof s === 'string' || s instanceof String;
+}
+
+function isOriginAllowed(origin, allowedOrigin) {
+  if (Array.isArray(allowedOrigin)) {
+    for (var i = 0; i < allowedOrigin.length; ++i) {
+      if (isOriginAllowed(origin, allowedOrigin[i])) {
+        return true;
+      }
+    }
+    return false;
+  } else if (isString(allowedOrigin)) {
+    return origin === allowedOrigin;
+  } else if (allowedOrigin instanceof RegExp) {
+    return allowedOrigin.test(origin);
+  } else {
+    return !!allowedOrigin;
+  }
+}
+
+function configureOrigin(options, req) {
+  var requestOrigin = req.headers.origin,
+    headers = [],
+    isAllowed;
+
+  if (!options.origin || options.origin === '*') {
+    // allow any origin
+    headers.push([
+      {
+        key: 'Access-Control-Allow-Origin',
+        value: '*',
+      },
+    ]);
+  } else if (isString(options.origin)) {
+    // fixed origin
+    headers.push([
+      {
+        key: 'Access-Control-Allow-Origin',
+        value: options.origin,
+      },
+    ]);
+    headers.push([
+      {
+        key: 'Vary',
+        value: 'Origin',
+      },
+    ]);
+  } else {
+    isAllowed = isOriginAllowed(requestOrigin, options.origin);
+    // reflect origin
+    headers.push([
+      {
+        key: 'Access-Control-Allow-Origin',
+        value: isAllowed ? requestOrigin : false,
+      },
+    ]);
+    headers.push([
+      {
+        key: 'Vary',
+        value: 'Origin',
+      },
+    ]);
+  }
+
+  return headers;
+}
+
+function configureMethods(options) {
+  var methods = options.methods;
+  if (methods.join) {
+    methods = options.methods.join(','); // .methods is an array, so turn it into a string
+  }
+  return {
+    key: 'Access-Control-Allow-Methods',
+    value: methods,
+  };
+}
+
+function configureCredentials(options) {
+  if (options.credentials === true) {
+    return {
+      key: 'Access-Control-Allow-Credentials',
+      value: 'true',
+    };
+  }
+  return null;
+}
+
+function configureAllowedHeaders(options, req) {
+  var allowedHeaders = options.allowedHeaders || options.headers;
+  var headers = [];
+
+  if (!allowedHeaders) {
+    allowedHeaders = req.headers['access-control-request-headers']; // .headers wasn't specified, so reflect the request headers
+    headers.push([
+      {
+        key: 'Vary',
+        value: 'Access-Control-Request-Headers',
+      },
+    ]);
+  } else if (allowedHeaders.join) {
+    allowedHeaders = allowedHeaders.join(','); // .headers is an array, so turn it into a string
+  }
+  if (allowedHeaders && allowedHeaders.length) {
+    headers.push([
+      {
+        key: 'Access-Control-Allow-Headers',
+        value: allowedHeaders,
+      },
+    ]);
+  }
+
+  return headers;
+}
+
+function configureExposedHeaders(options) {
+  var headers = options.exposedHeaders;
+  if (!headers) {
+    return null;
+  } else if (headers.join) {
+    headers = headers.join(','); // .headers is an array, so turn it into a string
+  }
+  if (headers && headers.length) {
+    return {
+      key: 'Access-Control-Expose-Headers',
+      value: headers,
+    };
+  }
+  return null;
+}
+
+function configureMaxAge(options) {
+  var maxAge = (typeof options.maxAge === 'number' || options.maxAge) && options.maxAge.toString();
+  if (maxAge && maxAge.length) {
+    return {
+      key: 'Access-Control-Max-Age',
+      value: maxAge,
+    };
+  }
+  return null;
+}
+
+function applyHeaders(headers, res) {
+  for (var i = 0, n = headers.length; i < n; i++) {
+    var header = headers[i];
+    if (header) {
+      if (Array.isArray(header)) {
+        applyHeaders(header, res);
+      } else if (header.key === 'Vary' && header.value) {
+        vary(res, header.value);
+      } else if (header.value) {
+        res.setHeader(header.key, header.value);
+      }
+    }
+  }
+}
+
+function cors(options, req, res, next) {
+  var headers = [],
+    method = req.method && req.method.toUpperCase && req.method.toUpperCase();
+
+  if (method === 'OPTIONS') {
+    // preflight
+    headers.push(configureOrigin(options, req));
+    headers.push(configureCredentials(options));
+    headers.push(configureMethods(options));
+    headers.push(configureAllowedHeaders(options, req));
+    headers.push(configureMaxAge(options));
+    headers.push(configureExposedHeaders(options));
+    applyHeaders(headers, res);
+
+    if (options.preflightContinue) {
+      next();
+    } else {
+      // Safari (and potentially other browsers) need content-length 0,
+      //   for 204 or they just hang waiting for a body
+      res.statusCode = options.optionsSuccessStatus;
+      res.setHeader('Content-Length', '0');
+      res.end();
+    }
+  } else {
+    // actual response
+    headers.push(configureOrigin(options, req));
+    headers.push(configureCredentials(options));
+    headers.push(configureExposedHeaders(options));
+    applyHeaders(headers, res);
+    next();
+  }
+}
+
+function middlewareWrapper(o) {
+  // if options are static (either via defaults or custom options passed in), wrap in a function
+  var optionsCallback = null;
+  if (typeof o === 'function') {
+    optionsCallback = o;
+  } else {
+    optionsCallback = function (req, cb) {
+      cb(null, o);
+    };
+  }
+
+  return function corsMiddleware(req, res, next) {
+    optionsCallback(req, function (err, options) {
+      if (err) {
+        next(err);
+      } else {
+        var corsOptions = assign({}, defaults, options);
+        var originCallback = null;
+        if (corsOptions.origin && typeof corsOptions.origin === 'function') {
+          originCallback = corsOptions.origin;
+        } else if (corsOptions.origin) {
+          originCallback = function (origin, cb) {
+            cb(null, corsOptions.origin);
+          };
+        }
+
+        if (originCallback) {
+          originCallback(req.headers.origin, function (err2, origin) {
+            if (err2 || !origin) {
+              next(err2);
+            } else {
+              corsOptions.origin = origin;
+              cors(corsOptions, req, res, next);
+            }
+          });
+        } else {
+          next();
+        }
+      }
+    });
+  };
+}
+
+export default middlewareWrapper;
+
+================
+File: reference/modules/object-assign.ts
+================
+// @ts-nocheck
+
+/*
+object-assign
+(c) Sindre Sorhus
+@license MIT
+*/
+
+'use strict';
+
+/* eslint-disable no-unused-vars */
+var getOwnPropertySymbols = Object.getOwnPropertySymbols;
+var hasOwnProperty = Object.prototype.hasOwnProperty;
+var propIsEnumerable = Object.prototype.propertyIsEnumerable;
+
+function toObject(val) {
+  if (val === null || val === undefined) {
+    throw new TypeError('Object.assign cannot be called with null or undefined');
+  }
+
+  return Object(val);
+}
+
+function shouldUseNative() {
+  try {
+    if (!Object.assign) {
+      return false;
+    }
+
+    // Detect buggy property enumeration order in older V8 versions.
+
+    // https://bugs.chromium.org/p/v8/issues/detail?id=4118
+    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
+    // @ts-ignore
+    test1[5] = 'de';
+    if (Object.getOwnPropertyNames(test1)[0] === '5') {
+      return false;
+    }
+
+    // https://bugs.chromium.org/p/v8/issues/detail?id=3056
+    var test2 = {};
+    for (var i = 0; i < 10; i++) {
+      test2['_' + String.fromCharCode(i)] = i;
+    }
+    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
+      return test2[n];
+    });
+    if (order2.join('') !== '0123456789') {
+      return false;
+    }
+
+    // https://bugs.chromium.org/p/v8/issues/detail?id=3056
+    var test3 = {};
+    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
+      test3[letter] = letter;
+    });
+    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
+      return false;
+    }
+
+    return true;
+  } catch (err) {
+    // We don't expect any of the above to throw, but better to be safe.
+    return false;
+  }
+}
+
+const assign = shouldUseNative()
+  ? Object.assign
+  : function (target, source) {
+      var from;
+      var to = toObject(target);
+      var symbols;
+
+      for (var s = 1; s < arguments.length; s++) {
+        from = Object(arguments[s]);
+
+        for (var key in from) {
+          if (hasOwnProperty.call(from, key)) {
+            to[key] = from[key];
+          }
+        }
+
+        if (getOwnPropertySymbols) {
+          symbols = getOwnPropertySymbols(from);
+          for (var i = 0; i < symbols.length; i++) {
+            if (propIsEnumerable.call(from, symbols[i])) {
+              to[symbols[i]] = from[symbols[i]];
+            }
+          }
+        }
+      }
+
+      return to;
+    };
+
+export default assign;
+
+================
+File: reference/modules/vary.ts
+================
+// @ts-nocheck
+
+/*!
+ * vary
+ * Copyright(c) 2014-2017 Douglas Christopher Wilson
+ * MIT Licensed
+ */
+
+'use strict';
+
+/**
+ * RegExp to match field-name in RFC 7230 sec 3.2
+ *
+ * field-name    = token
+ * token         = 1*tchar
+ * tchar         = "!" / "#" / "$" / "%" / "&" / "'" / "*"
+ *               / "+" / "-" / "." / "^" / "_" / "`" / "|" / "~"
+ *               / DIGIT / ALPHA
+ *               ; any VCHAR, except delimiters
+ */
+
+var FIELD_NAME_REGEXP = /^[!#$%&'*+\-.^_`|~0-9A-Za-z]+$/;
+
+/**
+ * Append a field to a vary header.
+ *
+ * @param {String} header
+ * @param {String|Array} field
+ * @return {String}
+ * @public
+ */
+
+function append(header, field) {
+  if (typeof header !== 'string') {
+    throw new TypeError('header argument is required');
+  }
+
+  if (!field) {
+    throw new TypeError('field argument is required');
+  }
+
+  // get fields array
+  var fields = !Array.isArray(field) ? parse(String(field)) : field;
+
+  // assert on invalid field names
+  for (var j = 0; j < fields.length; j++) {
+    if (!FIELD_NAME_REGEXP.test(fields[j])) {
+      throw new TypeError('field argument contains an invalid header name');
+    }
+  }
+
+  // existing, unspecified vary
+  if (header === '*') {
+    return header;
+  }
+
+  // enumerate current values
+  var val = header;
+  var vals = parse(header.toLowerCase());
+
+  // unspecified vary
+  if (fields.indexOf('*') !== -1 || vals.indexOf('*') !== -1) {
+    return '*';
+  }
+
+  for (var i = 0; i < fields.length; i++) {
+    var fld = fields[i].toLowerCase();
+
+    // append value (case-preserving)
+    if (vals.indexOf(fld) === -1) {
+      vals.push(fld);
+      val = val ? val + ', ' + fields[i] : fields[i];
+    }
+  }
+
+  return val;
+}
+
+/**
+ * Parse a vary header into an array.
+ *
+ * @param {String} header
+ * @return {Array}
+ * @private
+ */
+
+function parse(header) {
+  var end = 0;
+  var list = [];
+  var start = 0;
+
+  // gather tokens
+  for (var i = 0, len = header.length; i < len; i++) {
+    switch (header.charCodeAt(i)) {
+      case 0x20 /*   */:
+        if (start === end) {
+          start = end = i + 1;
+        }
+        break;
+      case 0x2c /* , */:
+        list.push(header.substring(start, end));
+        start = end = i + 1;
+        break;
+      default:
+        end = i + 1;
+        break;
+    }
+  }
+
+  // final token
+  list.push(header.substring(start, end));
+
+  return list;
+}
+
+/**
+ * Mark that a request is varied on a header field.
+ *
+ * @param {Object} res
+ * @param {String|Array} field
+ * @public
+ */
+
+function vary(res, field) {
+  if (!res || !res.getHeader || !res.setHeader) {
+    // quack quack
+    throw new TypeError('res argument is required');
+  }
+
+  // get existing header
+  var val = res.getHeader('Vary') || '';
+  var header = Array.isArray(val) ? val.join(', ') : String(val);
+
+  // set new header
+  if ((val = append(header, field))) {
+    res.setHeader('Vary', val);
+  }
+}
+
+export default vary;
+
+================
+File: reference/pages/api/index.ts
+================
+import * as Server from '@common/server';
+import * as Constants from '@common/constants';
+
+export default async function apiIndex(req, res) {
+  await Server.cors(req, res);
+
+  res.json({
+    success: true,
+    message: 'hey there, friend.',
+  });
+}
+
+================
+File: reference/pages/_app.tsx
+================
+import '@root/global.scss';
+
+import * as React from 'react';
+
+import Providers from '@components/Providers';
+
+function MyApp({ Component, pageProps }) {
+  return (
+    <Providers>
+      <Component {...pageProps} />
+    </Providers>
+  );
+}
+
+export default MyApp;
+
+================
+File: reference/pages/_document.tsx
+================
+import Document, { Html, Head, Main, NextScript } from 'next/document';
+
+export default class MyDocument extends Document {
+  render() {
+    return (
+      <Html>
+        <Head />
+        <body className="theme-light">
+          <Main />
+          <NextScript />
+        </body>
+      </Html>
+    );
+  }
+}
+
+================
+File: reference/.gitignore
+================
+.next
+.nova
+.env
+.env.local
+.env-custom-development
+.env-development
+.env-textile
+.env-production
+.DS_STORE
+DS_STORE
+yarn.lock
+node_modules
+dist
+analytics.txt
+package-lock.json
+
+/**/*/.DS_STORE
+/**/*/node_modules
+/**/*/.next
+/**/*/.data
+
+================
+File: reference/.prettierrc
+================
+{
+  "printWidth": 9999,
+  "tabWidth": 2,
+  "useTabs": false,
+  "semi": true,
+  "singleQuote": true,
+  "trailingComma": "es5",
+  "bracketSpacing": true,
+  "jsxBracketSameLine": false,
+  "arrowParens": "always",
+  "requirePragma": false,
+  "insertPragma": false,
+  "proseWrap": "preserve",
+  "parser": "babel-ts",
+  "overrides": [
+    {
+      "files": "*.js",
+      "options": {
+        "parser": "babel"
+      }
+    }
+  ]
+}
+
+================
+File: reference/global.scss
+================
+@font-face {
+  font-family: 'IosevkaTerm-Regular';
+  src: url('https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/6397be61-3ea4-459d-8a3e-fd95168cb214.woff2') format('woff2');
+}
+
+a,
+abbr,
+acronym,
+address,
+applet,
+article,
+aside,
+audio,
+b,
+big,
+blockquote,
+body,
+canvas,
+caption,
+center,
+cite,
+code,
+dd,
+del,
+details,
+dfn,
+div,
+dl,
+dt,
+embed,
+em,
+figure,
+figcaption,
+fieldset,
+footer,
+form,
+h1,
+h2,
+h3,
+h4,
+h5,
+h6,
+header,
+hgroup,
+html,
+i,
+iframe,
+img,
+ins,
+kbd,
+label,
+legend,
+li,
+mark,
+menu,
+nav,
+object,
+ol,
+output,
+p,
+pre,
+q,
+ruby,
+s,
+samp,
+section,
+small,
+span,
+strike,
+strong,
+sub,
+summary,
+sup,
+table,
+tbody,
+td,
+tfoot,
+th,
+thead,
+time,
+tr,
+tt,
+u,
+ul,
+var,
+video {
+  border: 0;
+  box-sizing: border-box;
+  margin: 0;
+  padding: 0;
+  vertical-align: baseline;
+}
+
+a {
+  background: var(--theme-border-subdued);
+  color: var(--theme-text);
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+    color: var(--theme-text);
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    color: var(--theme-text);
+    outline: 0;
+  }
+}
+
+ul {
+  list-style-position: inside;
+  list-style-type: '▪';
+  text-indent: -1ch;
+}
+
+ol {
+  list-style-type: '';
+  list-style-position: inside;
+  counter-reset: cupcake;
+  text-indent: -1ch;
+}
+
+ul ul,
+ul ol,
+ol ul,
+ol ol {
+  padding-left: 2ch;
+}
+
+ol li {
+  padding-left: 1ch;
+  counter-increment: cupcake;
+}
+
+ul li:before {
+  content: ' ';
+  display: inline-block;
+  width: 1ch;
+  height: 0;
+  visibility: hidden;
+}
+
+ol li:before {
+  content: counters(cupcake, '.') '. ';
+}
+
+article,
+aside,
+details,
+figcaption,
+figure,
+footer,
+header,
+hgroup,
+menu,
+nav,
+section {
+  display: block;
+}
+
+body.theme-blue {
+  --theme-overlay: var(--color-blue-20-5);
+  --theme-background: var(--color-blue-80);
+  --theme-background-modal: var(--color-blue-70);
+  --theme-background-modal-footer: var(--color-blue-90);
+  --theme-background-input: var(--color-blue-60);
+  --theme-border: var(--color-blue-70);
+  --theme-border-subdued: var(--color-blue-60-2);
+  --theme-text: var(--color-blue-10);
+  --theme-button: var(--color-blue-10);
+  --theme-button-text: var(--color-blue-80);
+  --theme-button-foreground: var(--color-blue-60);
+  --theme-button-background: var(--color-blue-70);
+  --theme-focused-foreground: var(--color-blue-50);
+  --theme-focused-foreground-subdued: var(--color-blue-50-5);
+}
+
+body.theme-light {
+  --theme-overlay: var(--color-black-100-4);
+  --theme-background: var(--color-white);
+  --theme-background-modal: var(--color-gray-20);
+  --theme-background-modal-footer: var(--color-gray-40);
+  --theme-background-input: var(--color-gray-10);
+  --theme-border: var(--color-gray-20);
+  --theme-border-subdued: var(--color-gray-40-2);
+  --theme-text: var(--color-black-100);
+  --theme-button: var(--color-black-100);
+  --theme-button-text: var(--color-white);
+  --theme-button-foreground: var(--color-gray-30);
+  --theme-button-background: var(--color-gray-20);
+  --theme-focused-foreground: var(--color-neon-green-50);
+  --theme-focused-foreground-subdued: var(--color-neon-green-50-5);
+}
+
+body.theme-dark {
+  --theme-overlay: var(--color-black-100-4);
+  --theme-background: var(--color-black-100);
+  --theme-background-modal: var(--color-gray-80);
+  --theme-background-modal-footer: var(--color-gray-70);
+  --theme-background-input: var(--color-gray-60);
+  --theme-border: var(--color-gray-80);
+  --theme-border-subdued: var(--color-gray-70-3);
+  --theme-text: var(--color-white);
+  --theme-button: var(--color-white);
+  --theme-button-text: var(--color-black-100);
+  --theme-button-foreground: var(--color-gray-90);
+  --theme-button-background: var(--color-gray-80);
+  --theme-focused-foreground: var(--color-daybreak-10);
+  --theme-focused-foreground-subdued: var(--color-daybreak-10-5);
+}
+
+body.theme-green {
+  --theme-overlay: var(--color-neon-green-100-4);
+  --theme-background: rgba(44, 255, 5);
+  --theme-background-modal: var(--color-neon-green-50);
+  --theme-background-modal-footer: var(--color-neon-green-50-5);
+  --theme-background-input: var(--color-neon-green-30);
+  --theme-border: var(--color-neon-green-60);
+  --theme-border-subdued: var(--color-neon-green-60-3);
+  --theme-text: var(--color-neon-green-100);
+  --theme-button: var(--color-neon-green-100);
+  --theme-button-text: var(--color-neon-green-10);
+  --theme-button-foreground: var(--color-neon-green-80);
+  --theme-button-background: var(--color-neon-green-70);
+  --theme-focused-foreground: rgba(255, 82, 243, 1);
+  --theme-focused-foreground-subdued: rgba(255, 82, 243, 0.5);
+}
+
+body.theme-black-red {
+  --theme-overlay: var(--color-red-100-4);
+  --theme-background: var(--color-black-100);
+  --theme-background-modal: var(--color-red-70);
+  --theme-background-modal-footer: var(--color-red-80);
+  --theme-background-input: var(--color-red-60);
+  --theme-border: var(--color-red-60-7);
+  --theme-border-subdued: var(--color-red-60-3);
+  --theme-text: var(--color-red-30);
+  --theme-button: var(--color-red-100);
+  --theme-button-text: var(--color-red-20);
+  --theme-button-foreground: var(--color-red-80);
+  --theme-button-background: var(--color-red-90);
+  --theme-focused-foreground: var(--color-gray-70);
+  --theme-focused-foreground-subdued: var(--color-red-70-4);
+}
+
+body.theme-black-teal {
+  --theme-overlay: var(--color-teal-100-4);
+  --theme-background: var(--color-black-100);
+  --theme-background-modal: var(--color-teal-70);
+  --theme-background-modal-footer: var(--color-teal-80);
+  --theme-background-input: var(--color-teal-60);
+  --theme-border: var(--color-teal-60-7);
+  --theme-border-subdued: var(--color-teal-60-3);
+  --theme-text: var(--color-teal-30);
+  --theme-button: var(--color-teal-100);
+  --theme-button-text: var(--color-teal-20);
+  --theme-button-foreground: var(--color-teal-80);
+  --theme-button-background: var(--color-teal-90);
+  --theme-focused-foreground: var(--color-gray-70);
+  --theme-focused-foreground-subdued: var(--color-teal-70-4);
+}
+
+body.theme-black-green {
+  --theme-overlay: var(--color-black-100-4);
+  --theme-background: var(--color-black-100);
+  --theme-background-modal: var(--color-gray-90);
+  --theme-background-modal-footer: var(--color-gray-80);
+  --theme-background-input: var(--color-gray-70);
+  --theme-border: var(--color-gray-80);
+  --theme-border-subdued: var(--color-gray-70-3);
+  --theme-text: var(--color-green-50);
+  --theme-button: var(--color-green-50);
+  --theme-button-text: var(--color-green-80);
+  --theme-button-foreground: var(--color-green-80);
+  --theme-button-background: var(--color-green-90);
+  --theme-focused-foreground: var(--color-gray-30);
+  --theme-focused-foreground-subdued: var(--color-gray-40);
+}
+
+body.font-use-berkeley-mono {
+  --font-family-mono: 'TX02Mono-Regular', sans-serif;
+}
+
+body.font-use-commit-mono {
+  --font-family-mono: 'CommitMono-Regular', sans-serif;
+}
+
+body.font-use-departure-mono {
+  --font-family-mono: 'DepartureMono-Regular', sans-serif;
+}
+
+body.font-use-fira-code {
+  --font-family-mono: 'FiraCode-Regular', sans-serif;
+}
+
+body.font-use-fragment-mono {
+  --font-family-mono: 'FragmentMono-Regular', sans-serif;
+}
+
+body.font-use-iosevka-term {
+  --font-family-mono: 'IosevkaTerm-Regular', sans-serif;
+}
+
+body.font-use-jet-brains-mono {
+  --font-family-mono: 'JetBrainsMono-Regular', sans-serif;
+}
+
+body.font-use-server-mono {
+  --font-family-mono: 'ServerMono-Regular', sans-serif;
+}
+
+body.font-use-sfmono-square {
+  --font-family-mono: 'SFMonoSquare-Regular', sans-serif;
+}
+
+#__next {
+}
+
+html,
+body {
+  --color-black-100: rgba(0, 0, 0, 1);
+  --color-black-100-1: rgba(0, 0, 0, 0.1);
+  --color-black-100-2: rgba(0, 0, 0, 0.2);
+  --color-black-100-4: rgba(0, 0, 0, 0.4);
+  --color-black-daybreak-100: rgba(4, 2, 0, 1);
+  --color-black-daybreak-100-4: rgba(4, 2, 0, 0.4);
+
+  --color-blue-10: rgba(237, 245, 255, 1);
+  --color-blue-100: rgba(0, 17, 65, 1);
+  --color-blue-20: rgba(208, 226, 255, 1);
+  --color-blue-20-1: rgba(208, 226, 255, 0.1);
+  --color-blue-20-2: rgba(208, 226, 255, 0.2);
+  --color-blue-20-5: rgba(208, 226, 255, 0.5);
+  --color-blue-30: rgba(166, 200, 255, 1);
+  --color-blue-40: rgba(120, 169, 255, 1);
+  --color-blue-50: rgba(69, 137, 255, 1);
+  --color-blue-50-5: rgba(69, 137, 255, 0.5);
+  --color-blue-60: rgba(15, 98, 254, 1);
+  --color-blue-60-2: rgba(15, 98, 254, 0.2);
+  --color-blue-70: rgba(0, 67, 206, 1);
+  --color-blue-80: rgba(0, 45, 156, 1);
+  --color-blue-80-4: rgba(0, 45, 156, 0.4);
+  --color-blue-80-6: rgba(0, 45, 156, 0.6);
+  --color-blue-90: rgba(0, 29, 108, 1);
+  --color-blue-90-6: rgba(0, 29, 108, 0.6);
+
+  --color-daybreak: rgba(255, 108, 4, 1);
+  --color-daybreak-1: rgba(255, 108, 4, 0.1);
+  --color-daybreak-10: rgba(239, 99, 0, 1);
+  --color-daybreak-10-5: rgba(239, 99, 0, 0.5);
+  --color-daybreak-2: rgba(255, 108, 4, 0.2);
+  --color-daybreak-20: rgba(220, 91, 0, 1);
+  --color-daybreak-30: rgba(200, 83, 0, 1);
+  --color-daybreak-4: rgba(255, 108, 4, 0.4);
+  --color-daybreak-40: rgba(180, 75, 0, 1);
+  --color-daybreak-40-2: rgba(180, 75, 0, 0.2);
+  --color-daybreak-50: rgba(161, 67, 0, 1);
+  --color-daybreak-60: rgba(141, 59, 0, 1);
+  --color-daybreak-70: rgba(121, 50, 0, 1);
+  --color-daybreak-70-3: rgba(121, 50, 0, 0.3);
+  --color-daybreak-80: rgba(102, 42, 0, 1);
+  --color-daybreak-90: rgba(82, 34, 0, 1);
+
+  --color-gold-30: rgba(241, 194, 27, 1);
+
+  --color-gray-10: rgba(244, 244, 244, 1);
+  --color-gray-100: rgba(22, 22, 22, 1);
+  --color-gray-20: rgba(224, 224, 224, 1);
+  --color-gray-20-7: rgba(224, 224, 224, 0.7);
+  --color-gray-30: rgba(198, 198, 198, 1);
+  --color-gray-30-7: rgba(224, 224, 224, 0.7);
+  --color-gray-40: rgba(168, 168, 168, 1);
+  --color-gray-40-2: rgba(168, 168, 168, 0.2);
+  --color-gray-50: rgba(141, 141, 141, 1);
+  --color-gray-60: rgba(111, 111, 111, 1);
+  --color-gray-70: rgba(82, 82, 82, 1);
+  --color-gray-70-3: rgba(82, 82, 82, 0.3);
+  --color-gray-70-4: rgba(82, 82, 82, 0.4);
+  --color-gray-80: rgba(57, 57, 57, 1);
+  --color-gray-80-6: rgba(57, 57, 57, 0.6);
+  --color-gray-90: rgba(38, 38, 38, 1);
+  --color-gray-90-6: rgba(38, 38, 38, 0.6);
+
+  --color-green-100: rgba(7, 25, 8, 1);
+  --color-green-100: rgba(7, 25, 8, 1);
+  --color-green-90: rgba(2, 45, 13, 1);
+  --color-green-80: rgba(4, 67, 23, 1);
+  --color-green-70: rgba(14, 96, 39, 1);
+  --color-green-60: rgba(25, 128, 56, 1);
+  --color-green-60-3: rgba(25, 128, 56, 0.3);
+  --color-green-50: rgba(36, 161, 72, 1);
+  --color-green-40: rgba(66, 190, 101, 1);
+  --color-green-30: rgba(111, 220, 140, 1);
+  --color-green-20: rgba(167, 240, 186, 1);
+  --color-green-10: rgba(222, 251, 230, 1);
+
+  --color-neon-green-10: rgba(242, 255, 233, 1);
+  --color-neon-green-100: rgba(10, 44, 2, 1);
+  --color-neon-green-100-1: rgba(10, 44, 2, 0.1);
+  --color-neon-green-100-2: rgba(10, 44, 2, 0.2);
+  --color-neon-green-100-4: rgba(10, 44, 2, 0.4);
+  --color-neon-green-20: rgba(213, 255, 191, 1);
+  --color-neon-green-30: rgba(178, 255, 148, 1);
+  --color-neon-green-40: rgba(138, 255, 104, 1);
+  --color-neon-green-50: rgba(92, 255, 59, 1);
+  --color-neon-green-50-5: rgba(92, 255, 59, 0.5);
+  --color-neon-green-60: rgba(46, 231, 29, 1);
+  --color-neon-green-60-3: rgba(46, 231, 29, 0.3);
+  --color-neon-green-70: rgba(0, 207, 0, 1);
+  --color-neon-green-70-3: rgba(0, 207, 0, 0.3);
+  --color-neon-green-70-7: rgba(0, 207, 0, 0.7);
+  --color-neon-green-80: rgba(0, 159, 0, 1);
+  --color-neon-green-80-1: rgba(0, 159, 0, 0.1);
+  --color-neon-green-80-2: rgba(0, 159, 0, 0.2);
+  --color-neon-green-80-4: rgba(0, 159, 0, 0.4);
+  --color-neon-green-90: rgba(16, 107, 2, 1);
+
+  --color-red-100: rgba(45, 7, 9, 1);
+  --color-red-100-4: rgba(45, 7, 9, 0.4);
+  --color-red-90: rgba(82, 4, 8, 1);
+  --color-red-80: rgba(117, 14, 19, 1);
+  --color-red-70: rgba(162, 25, 31, 1);
+  --color-red-60: rgba(218, 30, 40, 1);
+  --color-red-60-7: rgba(218, 30, 40, 0.7);
+  --color-red-60-3: rgba(218, 30, 40, 0.3);
+  --color-red-50: rgba(250, 77, 86, 1);
+  --color-red-40: rgba(255, 131, 137, 1);
+  --color-red-30: rgba(255, 179, 184, 1);
+  --color-red-20: rgba(255, 215, 217, 1);
+  --color-red-10: rgba(255, 241, 241, 1);
+
+  --color-teal-100: rgba(8, 26, 28, 1);
+  --color-teal-100-4: rgba(8, 26, 28, 0.4);
+  --color-teal-90: rgba(2, 43, 48, 1);
+  --color-teal-80: rgba(0, 65, 68, 1);
+  --color-teal-70: rgba(0, 93, 93, 1);
+  --color-teal-70-4: rgba(0, 93, 93, 0.4);
+  --color-teal-70-3: rgba(0, 93, 93, 0.3);
+  --color-teal-60: rgba(0, 125, 121, 1);
+  --color-teal-60-7: rgba(0, 125, 121, 0.7);
+  --color-teal-60-3: rgba(0, 125, 121, 0.3);
+  --color-teal-50: rgba(0, 157, 154, 1);
+  --color-teal-40: rgba(8, 189, 186, 1);
+  --color-teal-30: rgba(61, 219, 217, 1);
+  --color-teal-20: rgba(158, 240, 240, 1);
+  --color-teal-10: rgba(217, 251, 251, 1);
+
+  --color-white: rgba(255, 255, 255, 1);
+  --color-white-1: rgba(255, 255, 255, 0.1);
+  --color-white-2: rgba(255, 255, 255, 0.2);
+  --color-white-4: rgba(255, 255, 255, 0.4);
+
+  --font-family: -apple-system, BlinkMacSystemFont, helvetica neue, helvetica, sans-serif;
+  --font-family-mono: 'IosevkaTerm-Regular', Consolas, monaco, monospace;
+  --font-family-serif: Georgia, Times New Roman, serif;
+
+  --theme-text: var(--color-black-100);
+  --theme-line-height-base: 1.25;
+  --font-size: 20px;
+
+  --z-index-page: 1;
+  --z-index-page-select: 3;
+  --z-index-page-tooltips: 4;
+  --z-index-page-popover: 5;
+  --z-index-page-dropdown-menus: 6;
+  --z-index-page-modals: 10;
+
+  background: var(--theme-background);
+  color: var(--theme-text);
+  font-family: var(--font-family-mono);
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+
+  font-size: var(--font-size);
+  font-optical-sizing: auto;
+  font-weight: 400;
+  font-variant-numeric: tabular-nums lining-nums;
+
+  &::-webkit-scrollbar {
+    background: transparent;
+    height: calc(var(--theme-line-height-base) * 1rem);
+    width: 1ch;
+  }
+
+  &::-webkit-scrollbar-track {
+    background: var(--theme-background);
+  }
+
+  &::-webkit-scrollbar-thumb {
+    background: var(--theme-border);
+  }
+
+  &::-webkit-scrollbar-thumb:hover {
+    background: var(--theme-border);
+  }
+
+  @media (max-width: 568px) {
+    --font-size: 16px;
+  }
+}
+
+================
+File: reference/LICENSE.md
+================
+Copyright (c) 2024 INTERNET DEVELOPMENT STUDIO COMPANY
+
+Permission is hereby granted, free of charge, to any person obtaining
+a copy of this software and associated documentation files (the
+"Software"), to deal in the Software without restriction, including
+without limitation the rights to use, copy, modify, merge, publish,
+distribute, sublicense, and/or sell copies of the Software, and to
+permit persons to whom the Software is furnished to do so, subject to
+the following conditions:
+
+The above copyright notice and this permission notice shall be
+included in all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+
+================
+File: reference/package.json
+================
+{
+  "name": "INTDEV",
+  "description": "A vocation guild and great hall for webmasters. We practice the craft of designing, building, shipping, and maintaining websites, platforms, brands, and applications—end to end.",
+  "engines": {
+    "node": ">=18"
+  },
+  "license": "MIT",
+  "version": "0.0.1",
+  "scripts": {
+    "dev": "next -p 10000",
+    "build": "next build",
+    "start": "PORT=10000 next start",
+    "lint": "next lint"
+  },
+  "dependencies": {
+    "next": "^15.1.3",
+    "react": "^19.0.0",
+    "react-dom": "^19.0.0",
+    "sass": "1.83.0"
+  },
+  "devDependencies": {
+    "@types/node": "^22.10.2",
+    "@types/react": "^19.0.2",
+    "ts-node": "^10.9.2",
+    "typescript": "^5.7.2"
+  }
+}
+
+================
+File: reference/README.md
+================
+# www-internet-v2
+
+TODO
+
+```sh
+npm install
+npm run dev
+```
+
+Go to `http://localhost:10000` in your browser of choice.
+
+### Contact
+
+If you have questions ping me on Twitter, [@wwwjim](https://www.twitter.com/wwwjim). Or you can ping [@internetxstudio](https://x.com/internetxstudio).
+
+================
+File: reference/tsconfig.json
+================
+{
+  "compilerOptions": {
+    "baseUrl": ".",
+    "paths": {
+      "@root/*": [
+        "./*"
+      ],
+      "@system/*": [
+        "./system/*"
+      ],
+      "@demos/*": [
+        "./demos/*"
+      ],
+      "@common/*": [
+        "./common/*"
+      ],
+      "@data/*": [
+        "./data/*"
+      ],
+      "@components/*": [
+        "./components/*"
+      ],
+      "@pages/*": [
+        "./pages/*"
+      ],
+      "@modules/*": [
+        "./modules/*"
+      ]
+    },
+    "target": "es5",
+    "lib": [
+      "dom",
+      "dom.iterable",
+      "esnext"
+    ],
+    "allowJs": true,
+    "skipLibCheck": true,
+    "strict": false,
+    "forceConsistentCasingInFileNames": true,
+    "noEmit": true,
+    "esModuleInterop": true,
+    "module": "esnext",
+    "moduleResolution": "node",
+    "resolveJsonModule": true,
+    "isolatedModules": true,
+    "jsx": "preserve",
+    "incremental": true,
+    "plugins": [
+      {
+        "name": "next"
+      }
+    ],
+    "strictNullChecks": true
+  },
+  "exclude": [
+    "node_modules",
+    "**/*.spec.ts"
+  ],
+  "include": [
+    "next-env.d.ts",
+    "**/*.ts",
+    "**/*.tsx",
+    ".next/types/**/*.ts"
+  ]
+}
+
+================
+File: src/app/globals.css
+================
+@tailwind base;
+@tailwind components;
+@tailwind utilities;
+
+:root {
+  --background: #ffffff;
+  --foreground: #171717;
+}
+
+@media (prefers-color-scheme: dark) {
+  :root {
+    --background: #0a0a0a;
+    --foreground: #ededed;
+  }
+}
+
+body {
+  color: var(--foreground);
+  background: var(--background);
+}
+
+================
+File: src/app/layout.tsx
+================
+import './globals.css';
+// Update this import to point to your actual Providers component location
+import Providers from '../components/Providers'; 
+
+export default function layout({
+  children,
+}: Readonly<{
+  children: React.ReactNode;
+}>) {
+  return (
+    <html lang="en">
+      <body className="theme-light">
+        <Providers>
+          {children}
+        </Providers>
+      </body>
+    </html>
+  );
+}
+
+================
+File: src/app/page.tsx
+================
+// Update these imports to point to your actual component and stylesheet locations
+import DefaultLayout from '../components/page/DefaultLayout'; 
+import styles from '../components/page/root.module.scss';
+import AsciiText from '../components/examples/AsciiText';
+
+export default function Home() {
+  return (
+    <DefaultLayout previewPixelSRC="https://intdev-global.s3.us-west-2.amazonaws.com/template-app-icon.png">
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <AsciiText text="🛹" />
+        </div>
+      </div>
+    </DefaultLayout>
+  );
+}
+
+================
+File: .gitignore
+================
+# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
+
+# dependencies
+/node_modules
+/.pnp
+.pnp.*
+.yarn/*
+!.yarn/patches
+!.yarn/plugins
+!.yarn/releases
+!.yarn/versions
+
+# testing
+/coverage
+
+# next.js
+/.next/
+/out/
+
+# production
+/build
+
+# misc
+.DS_Store
+*.pem
+
+# debug
+npm-debug.log*
+yarn-debug.log*
+yarn-error.log*
+.pnpm-debug.log*
+
+# env files (can opt-in for committing if needed)
+.env*
+
+# vercel
+.vercel
+
+# typescript
+*.tsbuildinfo
+next-env.d.ts
+.aider*
+
+================
+File: eslint.config.mjs
+================
+import { dirname } from "path";
+import { fileURLToPath } from "url";
+import { FlatCompat } from "@eslint/eslintrc";
+
+const __filename = fileURLToPath(import.meta.url);
+const __dirname = dirname(__filename);
+
+const compat = new FlatCompat({
+  baseDirectory: __dirname,
+});
+
+const eslintConfig = [
+  ...compat.extends("next/core-web-vitals", "next/typescript"),
+];
+
+export default eslintConfig;
+
+================
+File: next.config.ts
+================
+import type { NextConfig } from "next";
+
+const nextConfig: NextConfig = {
+  /* config options here */
+};
+
+export default nextConfig;
+
+================
+File: package.json
+================
+{
+  "name": "adam-web",
+  "version": "0.1.0",
+  "private": true,
+  "description": "Website for Adam Delaney", // Update description
+  "scripts": {
+    "dev": "next dev", // Removed --turbopack
+    "build": "next build",
+    "start": "next start",
+    "lint": "next lint"
+  },
+  "dependencies": {
+    "next": "15.1.6",
+    "react": "^19.0.0",
+    "react-dom": "^19.0.0",
+    "sass": "^1.84.0"
+    // Add any missing dependencies from reference/package.json here
+  },
+  "devDependencies": {
+    "@eslint/eslintrc": "^3",
+    "@types/node": "^20",
+    "@types/react": "^19",
+    "@types/react-dom": "^19",
+    "eslint": "^9",
+    "eslint-config-next": "15.1.6",
+    "postcss": "^8",
+    "tailwindcss": "^3.4.1",
+    "typescript": "^5"
+  }
+}
+
+================
+File: postcss.config.mjs
+================
+/** @type {import('postcss-load-config').Config} */
+const config = {
+  plugins: {
+    tailwindcss: {},
+  },
+};
+
+export default config;
+
+================
+File: README.md
+================
+This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).
+
+## Getting Started
+
+First, run the development server:
+
+```bash
+npm run dev
+# or
+yarn dev
+# or
+pnpm dev
+# or
+bun dev
+```
+
+Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.
+
+You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.
+
+This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.
+
+## Learn More
+
+To learn more about Next.js, take a look at the following resources:
+
+- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
+- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.
+
+You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!
+
+## Deploy on Vercel
+
+The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.
+
+Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
+
+================
+File: tailwind.config.ts
+================
+import type { Config } from "tailwindcss";
+
+export default {
+  content: [
+    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
+    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
+    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
+  ],
+  theme: {
+    extend: {
+      colors: {
+        background: "var(--background)",
+        foreground: "var(--foreground)",
+      },
+    },
+  },
+  plugins: [],
+} satisfies Config;
+
+================
+File: tsconfig.json
+================
+{
+  "compilerOptions": {
+    "target": "ES2017",
+    "lib": ["dom", "dom.iterable", "esnext"],
+    "allowJs": true,
+    "skipLibCheck": true,
+    "strict": true,
+    "noEmit": true,
+    "esModuleInterop": true,
+    "module": "esnext",
+    "moduleResolution": "bundler",
+    "resolveJsonModule": true,
+    "isolatedModules": true,
+    "jsx": "preserve",
+    "incremental": true,
+    "plugins": [
+      {
+        "name": "next"
+      }
+    ],
+    "paths": {
+      "@/*": ["./src/*"]
+    }
+  },
+  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
+  "exclude": ["node_modules"]
+}
+

# 2025-02-07 23:50:06.788194
+s

# 2025-02-07 23:50:12.340974
+y

# 2025-02-07 23:57:43.932330
+we need to build out adam-web - we need a simple, fully PWA, 3 page web app: home, bio, projects. https://www.reactbits.
+dev/text-animations/ascii-text 
+ 
+with a nice emoji ascii skateboard hero, and a nice floating header like raycast with 'adam delaney' in the left, and in th
+e right some nav buttons to go to bio, projects pages . react19/next15/scss and tailwind? or maybe just scss, lets do that 
+. i want the pages to look very similar to the reference site, all components and styling and page layouts need to be the s
+ame, but the content is for adam's personal site. https://www.linkedin.com/in/adam-delaney // current repo map, with reference webapp in ./reference : This file is a merged representation of the entire codebase, combining all repository files into a single document.
+Generated by Repomix on: 2025-02-08T07:50:02.440Z
+
+================================================================
+File Summary
+================================================================
+
+Purpose:
+--------
+This file contains a packed representation of the entire repository's contents.
+It is designed to be easily consumable by AI systems for analysis, code review,
+or other automated processes.
+
+File Format:
+------------
+The content is organized as follows:
+1. This summary section
+2. Repository information
+3. Directory structure
+4. Multiple file entries, each consisting of:
+  a. A separator line (================)
+  b. The file path (File: path/to/file)
+  c. Another separator line
+  d. The full contents of the file
+  e. A blank line
+
+Usage Guidelines:
+-----------------
+- This file should be treated as read-only. Any changes should be made to the
+  original repository files, not this packed version.
+- When processing this file, use the file path to distinguish
+  between different files in the repository.
+- Be aware that this file may contain sensitive information. Handle it with
+  the same level of security as you would the original repository.
+
+Notes:
+------
+- Some files may have been excluded based on .gitignore rules and Repomix's
+  configuration.
+- Binary files are not included in this packed representation. Please refer to
+  the Repository Structure section for a complete list of file paths, including
+  binary files.
+
+Additional Info:
+----------------
+
+================================================================
+Directory Structure
+================================================================
+public/
+  file.svg
+  globe.svg
+  next.svg
+  vercel.svg
+  window.svg
+reference/
+  .git/
+    hooks/
+      applypatch-msg.sample
+      commit-msg.sample
+      fsmonitor-watchman.sample
+      post-update.sample
+      pre-applypatch.sample
+      pre-commit.sample
+      pre-merge-commit.sample
+      pre-push.sample
+      pre-rebase.sample
+      pre-receive.sample
+      prepare-commit-msg.sample
+      push-to-checkout.sample
+      update.sample
+    info/
+      exclude
+    logs/
+      refs/
+        heads/
+          main
+        remotes/
+          origin/
+            HEAD
+      HEAD
+    refs/
+      heads/
+        main
+      remotes/
+        origin/
+          HEAD
+    config
+    description
+    FETCH_HEAD
+    HEAD
+    packed-refs
+  app/
+    office/
+      head.tsx
+      layout.tsx
+      page.tsx
+    head.tsx
+    layout.tsx
+    manifest.ts
+    page.tsx
+    robots.ts
+    sitemap.ts
+  common/
+    constants.ts
+    hooks.ts
+    position.ts
+    queries.ts
+    server.ts
+    utilities.ts
+  components/
+    detectors/
+      OutsideElementEvent.tsx
+    examples/
+      AS400.module.scss
+      AS400.tsx
+      DashboardRadar.module.scss
+      DashboardRadar.tsx
+      Denabase.module.scss
+      Denabase.tsx
+      MessagesInterface.tsx
+      UpdatingDataTable.tsx
+    modals/
+      ModalAlert.module.scss
+      ModalAlert.tsx
+      ModalCanvasPlatformer.module.scss
+      ModalCanvasPlatformer.tsx
+      ModalCanvasSnake.module.scss
+      ModalCanvasSnake.tsx
+      ModalChess.module.scss
+      ModalChess.tsx
+      ModalCreateAccount.module.scss
+      ModalCreateAccount.tsx
+      ModalError.module.scss
+      ModalError.tsx
+      ModalMatrixModes.module.scss
+      ModalMatrixModes.tsx
+    page/
+      DefaultActionBar.module.scss
+      DefaultActionBar.tsx
+      DefaultLayout.module.scss
+      DefaultLayout.tsx
+      ModalContext.tsx
+      root.module.scss
+    svg/
+      InternetDevelopmentLogo.tsx
+      InternetDevelopmentLogoMark.tsx
+      Sphere.tsx
+    Accordion.module.scss
+    Accordion.tsx
+    ActionBar.module.scss
+    ActionBar.tsx
+    ActionButton.module.scss
+    ActionButton.tsx
+    ActionListItem.module.scss
+    ActionListItem.tsx
+    AlertBanner.module.scss
+    AlertBanner.tsx
+    Avatar.module.scss
+    Avatar.tsx
+    Badge.module.scss
+    Badge.tsx
+    BarLoader.module.scss
+    BarLoader.tsx
+    BarProgress.module.scss
+    BarProgress.tsx
+    Block.module.scss
+    Block.tsx
+    BlockLoader.module.scss
+    BlockLoader.tsx
+    BreadCrumbs.module.scss
+    BreadCrumbs.tsx
+    Button.module.scss
+    Button.tsx
+    ButtonGroup.module.scss
+    ButtonGroup.tsx
+    Canvas.module.scss
+    Canvas.tsx
+    CanvasPlatformer.module.scss
+    CanvasPlatformer.tsx
+    CanvasSnake.module.scss
+    CanvasSnake.tsx
+    Card.module.scss
+    Card.tsx
+    CardDouble.module.scss
+    CardDouble.tsx
+    Checkbox.module.scss
+    Checkbox.tsx
+    Chessboard.module.scss
+    Chessboard.tsx
+    CodeBlock.module.scss
+    CodeBlock.tsx
+    ComboBox.module.scss
+    ComboBox.tsx
+    ContentFluid.module.scss
+    ContentFluid.tsx
+    DataTable.module.scss
+    DataTable.tsx
+    DatePicker.module.scss
+    DatePicker.tsx
+    DebugGrid.tsx
+    DefaultMetaTags.tsx
+    Dialog.module.scss
+    Dialog.tsx
+    Divider.module.scss
+    Divider.tsx
+    Drawer.module.scss
+    Drawer.tsx
+    DropdownMenu.module.scss
+    DropdownMenu.tsx
+    DropdownMenuTrigger.module.scss
+    DropdownMenuTrigger.tsx
+    Grid.module.scss
+    Grid.tsx
+    HoverComponentTrigger.module.scss
+    HoverComponentTrigger.tsx
+    Indent.module.scss
+    Indent.tsx
+    Input.module.scss
+    Input.tsx
+    ListItem.module.scss
+    ListItem.tsx
+    MatrixLoader.module.scss
+    MatrixLoader.tsx
+    Message.module.scss
+    Message.tsx
+    MessageViewer.module.scss
+    MessageViewer.tsx
+    ModalStack.module.scss
+    ModalStack.tsx
+    ModalTrigger.tsx
+    Navigation.module.scss
+    Navigation.tsx
+    NumberRangeSlider.module.scss
+    NumberRangeSlider.tsx
+    Popover.module.scss
+    Popover.tsx
+    Providers.tsx
+    RadioButton.module.scss
+    RadioButton.tsx
+    RadioButtonGroup.tsx
+    Row.module.scss
+    Row.tsx
+    RowEllipsis.module.scss
+    RowEllipsis.tsx
+    RowSpaceBetween.module.scss
+    RowSpaceBetween.tsx
+    Select.module.scss
+    Select.tsx
+    SidebarLayout.module.scss
+    SidebarLayout.tsx
+    Table.module.scss
+    Table.tsx
+    TableColumn.module.scss
+    TableColumn.tsx
+    TableRow.module.scss
+    TableRow.tsx
+    Text.module.scss
+    Text.tsx
+    TextArea.module.scss
+    TextArea.tsx
+    Tooltip.module.scss
+    Tooltip.tsx
+    TreeView.module.scss
+    TreeView.tsx
+  modules/
+    hotkeys/
+      bound-hotkeys-proxy-provider.tsx
+      hotkeys-provider.tsx
+      index.ts
+      is-hotkey-pressed.ts
+      parse-hotkeys.ts
+      types.ts
+      use-deep-equal-memo.ts
+      use-hotkeys.ts
+      use-record-hotkeys.ts
+      validators.ts
+    cors.ts
+    object-assign.ts
+    vary.ts
+  pages/
+    api/
+      index.ts
+    _app.tsx
+    _document.tsx
+  .gitignore
+  .prettierrc
+  global.scss
+  LICENSE.md
+  package.json
+  README.md
+  tsconfig.json
+src/
+  app/
+    globals.css
+    layout.tsx
+    page.tsx
+.gitignore
+eslint.config.mjs
+next.config.ts
+package.json
+postcss.config.mjs
+README.md
+tailwind.config.ts
+tsconfig.json
+
+================================================================
+Files
+================================================================
+
+================
+File: public/file.svg
+================
+<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
+
+================
+File: public/globe.svg
+================
+<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
+
+================
+File: public/next.svg
+================
+<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
+
+================
+File: public/vercel.svg
+================
+<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
+
+================
+File: public/window.svg
+================
+<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
+
+================
+File: reference/.git/hooks/applypatch-msg.sample
+================
+#!/bin/sh
+#
+# An example hook script to check the commit log message taken by
+# applypatch from an e-mail message.
+#
+# The hook should exit with non-zero status after issuing an
+# appropriate message if it wants to stop the commit.  The hook is
+# allowed to edit the commit message file.
+#
+# To enable this hook, rename this file to "applypatch-msg".
+
+. git-sh-setup
+commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
+test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
+:
+
+================
+File: reference/.git/hooks/commit-msg.sample
+================
+#!/bin/sh
+#
+# An example hook script to check the commit log message.
+# Called by "git commit" with one argument, the name of the file
+# that has the commit message.  The hook should exit with non-zero
+# status after issuing an appropriate message if it wants to stop the
+# commit.  The hook is allowed to edit the commit message file.
+#
+# To enable this hook, rename this file to "commit-msg".
+
+# Uncomment the below to add a Signed-off-by line to the message.
+# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
+# hook is more suited to it.
+#
+# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
+# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"
+
+# This example catches duplicate Signed-off-by lines.
+
+test "" = "$(grep '^Signed-off-by: ' "$1" |
+	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
+	echo >&2 Duplicate Signed-off-by lines.
+	exit 1
+}
+
+================
+File: reference/.git/hooks/fsmonitor-watchman.sample
+================
+#!/usr/bin/perl
+
+use strict;
+use warnings;
+use IPC::Open2;
+
+# An example hook script to integrate Watchman
+# (https://facebook.github.io/watchman/) with git to speed up detecting
+# new and modified files.
+#
+# The hook is passed a version (currently 2) and last update token
+# formatted as a string and outputs to stdout a new update token and
+# all files that have been modified since the update token. Paths must
+# be relative to the root of the working tree and separated by a single NUL.
+#
+# To enable this hook, rename this file to "query-watchman" and set
+# 'git config core.fsmonitor .git/hooks/query-watchman'
+#
+my ($version, $last_update_token) = @ARGV;
+
+# Uncomment for debugging
+# print STDERR "$0 $version $last_update_token\n";
+
+# Check the hook interface version
+if ($version ne 2) {
+	die "Unsupported query-fsmonitor hook version '$version'.\n" .
+	    "Falling back to scanning...\n";
+}
+
+my $git_work_tree = get_working_dir();
+
+my $retry = 1;
+
+my $json_pkg;
+eval {
+	require JSON::XS;
+	$json_pkg = "JSON::XS";
+	1;
+} or do {
+	require JSON::PP;
+	$json_pkg = "JSON::PP";
+};
+
+launch_watchman();
+
+sub launch_watchman {
+	my $o = watchman_query();
+	if (is_work_tree_watched($o)) {
+		output_result($o->{clock}, @{$o->{files}});
+	}
+}
+
+sub output_result {
+	my ($clockid, @files) = @_;
+
+	# Uncomment for debugging watchman output
+	# open (my $fh, ">", ".git/watchman-output.out");
+	# binmode $fh, ":utf8";
+	# print $fh "$clockid\n@files\n";
+	# close $fh;
+
+	binmode STDOUT, ":utf8";
+	print $clockid;
+	print "\0";
+	local $, = "\0";
+	print @files;
+}
+
+sub watchman_clock {
+	my $response = qx/watchman clock "$git_work_tree"/;
+	die "Failed to get clock id on '$git_work_tree'.\n" .
+		"Falling back to scanning...\n" if $? != 0;
+
+	return $json_pkg->new->utf8->decode($response);
+}
+
+sub watchman_query {
+	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
+	or die "open2() failed: $!\n" .
+	"Falling back to scanning...\n";
+
+	# In the query expression below we're asking for names of files that
+	# changed since $last_update_token but not from the .git folder.
+	#
+	# To accomplish this, we're using the "since" generator to use the
+	# recency index to select candidate nodes and "fields" to limit the
+	# output to file names only. Then we're using the "expression" term to
+	# further constrain the results.
+	my $last_update_line = "";
+	if (substr($last_update_token, 0, 1) eq "c") {
+		$last_update_token = "\"$last_update_token\"";
+		$last_update_line = qq[\n"since": $last_update_token,];
+	}
+	my $query = <<"	END";
+		["query", "$git_work_tree", {$last_update_line
+			"fields": ["name"],
+			"expression": ["not", ["dirname", ".git"]]
+		}]
+	END
+
+	# Uncomment for debugging the watchman query
+	# open (my $fh, ">", ".git/watchman-query.json");
+	# print $fh $query;
+	# close $fh;
+
+	print CHLD_IN $query;
+	close CHLD_IN;
+	my $response = do {local $/; <CHLD_OUT>};
+
+	# Uncomment for debugging the watch response
+	# open ($fh, ">", ".git/watchman-response.json");
+	# print $fh $response;
+	# close $fh;
+
+	die "Watchman: command returned no output.\n" .
+	"Falling back to scanning...\n" if $response eq "";
+	die "Watchman: command returned invalid output: $response\n" .
+	"Falling back to scanning...\n" unless $response =~ /^\{/;
+
+	return $json_pkg->new->utf8->decode($response);
+}
+
+sub is_work_tree_watched {
+	my ($output) = @_;
+	my $error = $output->{error};
+	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
+		$retry--;
+		my $response = qx/watchman watch "$git_work_tree"/;
+		die "Failed to make watchman watch '$git_work_tree'.\n" .
+		    "Falling back to scanning...\n" if $? != 0;
+		$output = $json_pkg->new->utf8->decode($response);
+		$error = $output->{error};
+		die "Watchman: $error.\n" .
+		"Falling back to scanning...\n" if $error;
+
+		# Uncomment for debugging watchman output
+		# open (my $fh, ">", ".git/watchman-output.out");
+		# close $fh;
+
+		# Watchman will always return all files on the first query so
+		# return the fast "everything is dirty" flag to git and do the
+		# Watchman query just to get it over with now so we won't pay
+		# the cost in git to look up each individual file.
+		my $o = watchman_clock();
+		$error = $output->{error};
+
+		die "Watchman: $error.\n" .
+		"Falling back to scanning...\n" if $error;
+
+		output_result($o->{clock}, ("/"));
+		$last_update_token = $o->{clock};
+
+		eval { launch_watchman() };
+		return 0;
+	}
+
+	die "Watchman: $error.\n" .
+	"Falling back to scanning...\n" if $error;
+
+	return 1;
+}
+
+sub get_working_dir {
+	my $working_dir;
+	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
+		$working_dir = Win32::GetCwd();
+		$working_dir =~ tr/\\/\//;
+	} else {
+		require Cwd;
+		$working_dir = Cwd::cwd();
+	}
+
+	return $working_dir;
+}
+
+================
+File: reference/.git/hooks/post-update.sample
+================
+#!/bin/sh
+#
+# An example hook script to prepare a packed repository for use over
+# dumb transports.
+#
+# To enable this hook, rename this file to "post-update".
+
+exec git update-server-info
+
+================
+File: reference/.git/hooks/pre-applypatch.sample
+================
+#!/bin/sh
+#
+# An example hook script to verify what is about to be committed
+# by applypatch from an e-mail message.
+#
+# The hook should exit with non-zero status after issuing an
+# appropriate message if it wants to stop the commit.
+#
+# To enable this hook, rename this file to "pre-applypatch".
+
+. git-sh-setup
+precommit="$(git rev-parse --git-path hooks/pre-commit)"
+test -x "$precommit" && exec "$precommit" ${1+"$@"}
+:
+
+================
+File: reference/.git/hooks/pre-commit.sample
+================
+#!/bin/sh
+#
+# An example hook script to verify what is about to be committed.
+# Called by "git commit" with no arguments.  The hook should
+# exit with non-zero status after issuing an appropriate message if
+# it wants to stop the commit.
+#
+# To enable this hook, rename this file to "pre-commit".
+
+if git rev-parse --verify HEAD >/dev/null 2>&1
+then
+	against=HEAD
+else
+	# Initial commit: diff against an empty tree object
+	against=$(git hash-object -t tree /dev/null)
+fi
+
+# If you want to allow non-ASCII filenames set this variable to true.
+allownonascii=$(git config --type=bool hooks.allownonascii)
+
+# Redirect output to stderr.
+exec 1>&2
+
+# Cross platform projects tend to avoid non-ASCII filenames; prevent
+# them from being added to the repository. We exploit the fact that the
+# printable range starts at the space character and ends with tilde.
+if [ "$allownonascii" != "true" ] &&
+	# Note that the use of brackets around a tr range is ok here, (it's
+	# even required, for portability to Solaris 10's /usr/bin/tr), since
+	# the square bracket bytes happen to fall in the designated range.
+	test $(git diff --cached --name-only --diff-filter=A -z $against |
+	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
+then
+	cat <<\EOF
+Error: Attempt to add a non-ASCII file name.
+
+This can cause problems if you want to work with people on other platforms.
+
+To be portable it is advisable to rename the file.
+
+If you know what you are doing you can disable this check using:
+
+  git config hooks.allownonascii true
+EOF
+	exit 1
+fi
+
+# If there are whitespace errors, print the offending file names and fail.
+exec git diff-index --check --cached $against --
+
+================
+File: reference/.git/hooks/pre-merge-commit.sample
+================
+#!/bin/sh
+#
+# An example hook script to verify what is about to be committed.
+# Called by "git merge" with no arguments.  The hook should
+# exit with non-zero status after issuing an appropriate message to
+# stderr if it wants to stop the merge commit.
+#
+# To enable this hook, rename this file to "pre-merge-commit".
+
+. git-sh-setup
+test -x "$GIT_DIR/hooks/pre-commit" &&
+        exec "$GIT_DIR/hooks/pre-commit"
+:
+
+================
+File: reference/.git/hooks/pre-push.sample
+================
+#!/bin/sh
+
+# An example hook script to verify what is about to be pushed.  Called by "git
+# push" after it has checked the remote status, but before anything has been
+# pushed.  If this script exits with a non-zero status nothing will be pushed.
+#
+# This hook is called with the following parameters:
+#
+# $1 -- Name of the remote to which the push is being done
+# $2 -- URL to which the push is being done
+#
+# If pushing without using a named remote those arguments will be equal.
+#
+# Information about the commits which are being pushed is supplied as lines to
+# the standard input in the form:
+#
+#   <local ref> <local oid> <remote ref> <remote oid>
+#
+# This sample shows how to prevent push of commits where the log message starts
+# with "WIP" (work in progress).
+
+remote="$1"
+url="$2"
+
+zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
+
+while read local_ref local_oid remote_ref remote_oid
+do
+	if test "$local_oid" = "$zero"
+	then
+		# Handle delete
+		:
+	else
+		if test "$remote_oid" = "$zero"
+		then
+			# New branch, examine all commits
+			range="$local_oid"
+		else
+			# Update to existing branch, examine new commits
+			range="$remote_oid..$local_oid"
+		fi
+
+		# Check for WIP commit
+		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
+		if test -n "$commit"
+		then
+			echo >&2 "Found WIP commit in $local_ref, not pushing"
+			exit 1
+		fi
+	fi
+done
+
+exit 0
+
+================
+File: reference/.git/hooks/pre-rebase.sample
+================
+#!/bin/sh
+#
+# Copyright (c) 2006, 2008 Junio C Hamano
+#
+# The "pre-rebase" hook is run just before "git rebase" starts doing
+# its job, and can prevent the command from running by exiting with
+# non-zero status.
+#
+# The hook is called with the following parameters:
+#
+# $1 -- the upstream the series was forked from.
+# $2 -- the branch being rebased (or empty when rebasing the current branch).
+#
+# This sample shows how to prevent topic branches that are already
+# merged to 'next' branch from getting rebased, because allowing it
+# would result in rebasing already published history.
+
+publish=next
+basebranch="$1"
+if test "$#" = 2
+then
+	topic="refs/heads/$2"
+else
+	topic=`git symbolic-ref HEAD` ||
+	exit 0 ;# we do not interrupt rebasing detached HEAD
+fi
+
+case "$topic" in
+refs/heads/??/*)
+	;;
+*)
+	exit 0 ;# we do not interrupt others.
+	;;
+esac
+
+# Now we are dealing with a topic branch being rebased
+# on top of master.  Is it OK to rebase it?
+
+# Does the topic really exist?
+git show-ref -q "$topic" || {
+	echo >&2 "No such branch $topic"
+	exit 1
+}
+
+# Is topic fully merged to master?
+not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
+if test -z "$not_in_master"
+then
+	echo >&2 "$topic is fully merged to master; better remove it."
+	exit 1 ;# we could allow it, but there is no point.
+fi
+
+# Is topic ever merged to next?  If so you should not be rebasing it.
+only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
+only_next_2=`git rev-list ^master           ${publish} | sort`
+if test "$only_next_1" = "$only_next_2"
+then
+	not_in_topic=`git rev-list "^$topic" master`
+	if test -z "$not_in_topic"
+	then
+		echo >&2 "$topic is already up to date with master"
+		exit 1 ;# we could allow it, but there is no point.
+	else
+		exit 0
+	fi
+else
+	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
+	/usr/bin/perl -e '
+		my $topic = $ARGV[0];
+		my $msg = "* $topic has commits already merged to public branch:\n";
+		my (%not_in_next) = map {
+			/^([0-9a-f]+) /;
+			($1 => 1);
+		} split(/\n/, $ARGV[1]);
+		for my $elem (map {
+				/^([0-9a-f]+) (.*)$/;
+				[$1 => $2];
+			} split(/\n/, $ARGV[2])) {
+			if (!exists $not_in_next{$elem->[0]}) {
+				if ($msg) {
+					print STDERR $msg;
+					undef $msg;
+				}
+				print STDERR " $elem->[1]\n";
+			}
+		}
+	' "$topic" "$not_in_next" "$not_in_master"
+	exit 1
+fi
+
+<<\DOC_END
+
+This sample hook safeguards topic branches that have been
+published from being rewound.
+
+The workflow assumed here is:
+
+ * Once a topic branch forks from "master", "master" is never
+   merged into it again (either directly or indirectly).
+
+ * Once a topic branch is fully cooked and merged into "master",
+   it is deleted.  If you need to build on top of it to correct
+   earlier mistakes, a new topic branch is created by forking at
+   the tip of the "master".  This is not strictly necessary, but
+   it makes it easier to keep your history simple.
+
+ * Whenever you need to test or publish your changes to topic
+   branches, merge them into "next" branch.
+
+The script, being an example, hardcodes the publish branch name
+to be "next", but it is trivial to make it configurable via
+$GIT_DIR/config mechanism.
+
+With this workflow, you would want to know:
+
+(1) ... if a topic branch has ever been merged to "next".  Young
+    topic branches can have stupid mistakes you would rather
+    clean up before publishing, and things that have not been
+    merged into other branches can be easily rebased without
+    affecting other people.  But once it is published, you would
+    not want to rewind it.
+
+(2) ... if a topic branch has been fully merged to "master".
+    Then you can delete it.  More importantly, you should not
+    build on top of it -- other people may already want to
+    change things related to the topic as patches against your
+    "master", so if you need further changes, it is better to
+    fork the topic (perhaps with the same name) afresh from the
+    tip of "master".
+
+Let's look at this example:
+
+		   o---o---o---o---o---o---o---o---o---o "next"
+		  /       /           /           /
+		 /   a---a---b A     /           /
+		/   /               /           /
+	       /   /   c---c---c---c B         /
+	      /   /   /             \         /
+	     /   /   /   b---b C     \       /
+	    /   /   /   /             \     /
+    ---o---o---o---o---o---o---o---o---o---o---o "master"
+
+
+A, B and C are topic branches.
+
+ * A has one fix since it was merged up to "next".
+
+ * B has finished.  It has been fully merged up to "master" and "next",
+   and is ready to be deleted.
+
+ * C has not merged to "next" at all.
+
+We would want to allow C to be rebased, refuse A, and encourage
+B to be deleted.
+
+To compute (1):
+
+	git rev-list ^master ^topic next
+	git rev-list ^master        next
+
+	if these match, topic has not merged in next at all.
+
+To compute (2):
+
+	git rev-list master..topic
+
+	if this is empty, it is fully merged to "master".
+
+DOC_END
+
+================
+File: reference/.git/hooks/pre-receive.sample
+================
+#!/bin/sh
+#
+# An example hook script to make use of push options.
+# The example simply echoes all push options that start with 'echoback='
+# and rejects all pushes when the "reject" push option is used.
+#
+# To enable this hook, rename this file to "pre-receive".
+
+if test -n "$GIT_PUSH_OPTION_COUNT"
+then
+	i=0
+	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
+	do
+		eval "value=\$GIT_PUSH_OPTION_$i"
+		case "$value" in
+		echoback=*)
+			echo "echo from the pre-receive-hook: ${value#*=}" >&2
+			;;
+		reject)
+			exit 1
+		esac
+		i=$((i + 1))
+	done
+fi
+
+================
+File: reference/.git/hooks/prepare-commit-msg.sample
+================
+#!/bin/sh
+#
+# An example hook script to prepare the commit log message.
+# Called by "git commit" with the name of the file that has the
+# commit message, followed by the description of the commit
+# message's source.  The hook's purpose is to edit the commit
+# message file.  If the hook fails with a non-zero status,
+# the commit is aborted.
+#
+# To enable this hook, rename this file to "prepare-commit-msg".
+
+# This hook includes three examples. The first one removes the
+# "# Please enter the commit message..." help message.
+#
+# The second includes the output of "git diff --name-status -r"
+# into the message, just before the "git status" output.  It is
+# commented because it doesn't cope with --amend or with squashed
+# commits.
+#
+# The third example adds a Signed-off-by line to the message, that can
+# still be edited.  This is rarely a good idea.
+
+COMMIT_MSG_FILE=$1
+COMMIT_SOURCE=$2
+SHA1=$3
+
+/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"
+
+# case "$COMMIT_SOURCE,$SHA1" in
+#  ,|template,)
+#    /usr/bin/perl -i.bak -pe '
+#       print "\n" . `git diff --cached --name-status -r`
+# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
+#  *) ;;
+# esac
+
+# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
+# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
+# if test -z "$COMMIT_SOURCE"
+# then
+#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
+# fi
+
+================
+File: reference/.git/hooks/push-to-checkout.sample
+================
+#!/bin/sh
+
+# An example hook script to update a checked-out tree on a git push.
+#
+# This hook is invoked by git-receive-pack(1) when it reacts to git
+# push and updates reference(s) in its repository, and when the push
+# tries to update the branch that is currently checked out and the
+# receive.denyCurrentBranch configuration variable is set to
+# updateInstead.
+#
+# By default, such a push is refused if the working tree and the index
+# of the remote repository has any difference from the currently
+# checked out commit; when both the working tree and the index match
+# the current commit, they are updated to match the newly pushed tip
+# of the branch. This hook is to be used to override the default
+# behaviour; however the code below reimplements the default behaviour
+# as a starting point for convenient modification.
+#
+# The hook receives the commit with which the tip of the current
+# branch is going to be updated:
+commit=$1
+
+# It can exit with a non-zero status to refuse the push (when it does
+# so, it must not modify the index or the working tree).
+die () {
+	echo >&2 "$*"
+	exit 1
+}
+
+# Or it can make any necessary changes to the working tree and to the
+# index to bring them to the desired state when the tip of the current
+# branch is updated to the new commit, and exit with a zero status.
+#
+# For example, the hook can simply run git read-tree -u -m HEAD "$1"
+# in order to emulate git fetch that is run in the reverse direction
+# with git push, as the two-tree form of git read-tree -u -m is
+# essentially the same as git switch or git checkout that switches
+# branches while keeping the local changes in the working tree that do
+# not interfere with the difference between the branches.
+
+# The below is a more-or-less exact translation to shell of the C code
+# for the default behaviour for git's push-to-checkout hook defined in
+# the push_to_deploy() function in builtin/receive-pack.c.
+#
+# Note that the hook will be executed from the repository directory,
+# not from the working tree, so if you want to perform operations on
+# the working tree, you will have to adapt your code accordingly, e.g.
+# by adding "cd .." or using relative paths.
+
+if ! git update-index -q --ignore-submodules --refresh
+then
+	die "Up-to-date check failed"
+fi
+
+if ! git diff-files --quiet --ignore-submodules --
+then
+	die "Working directory has unstaged changes"
+fi
+
+# This is a rough translation of:
+#
+#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
+if git cat-file -e HEAD 2>/dev/null
+then
+	head=HEAD
+else
+	head=$(git hash-object -t tree --stdin </dev/null)
+fi
+
+if ! git diff-index --quiet --cached --ignore-submodules $head --
+then
+	die "Working directory has staged changes"
+fi
+
+if ! git read-tree -u -m "$commit"
+then
+	die "Could not update working tree to new HEAD"
+fi
+
+================
+File: reference/.git/hooks/update.sample
+================
+#!/bin/sh
+#
+# An example hook script to block unannotated tags from entering.
+# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
+#
+# To enable this hook, rename this file to "update".
+#
+# Config
+# ------
+# hooks.allowunannotated
+#   This boolean sets whether unannotated tags will be allowed into the
+#   repository.  By default they won't be.
+# hooks.allowdeletetag
+#   This boolean sets whether deleting tags will be allowed in the
+#   repository.  By default they won't be.
+# hooks.allowmodifytag
+#   This boolean sets whether a tag may be modified after creation. By default
+#   it won't be.
+# hooks.allowdeletebranch
+#   This boolean sets whether deleting branches will be allowed in the
+#   repository.  By default they won't be.
+# hooks.denycreatebranch
+#   This boolean sets whether remotely creating branches will be denied
+#   in the repository.  By default this is allowed.
+#
+
+# --- Command line
+refname="$1"
+oldrev="$2"
+newrev="$3"
+
+# --- Safety check
+if [ -z "$GIT_DIR" ]; then
+	echo "Don't run this script from the command line." >&2
+	echo " (if you want, you could supply GIT_DIR then run" >&2
+	echo "  $0 <ref> <oldrev> <newrev>)" >&2
+	exit 1
+fi
+
+if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
+	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
+	exit 1
+fi
+
+# --- Config
+allowunannotated=$(git config --type=bool hooks.allowunannotated)
+allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
+denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
+allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
+allowmodifytag=$(git config --type=bool hooks.allowmodifytag)
+
+# check for no description
+projectdesc=$(sed -e '1q' "$GIT_DIR/description")
+case "$projectdesc" in
+"Unnamed repository"* | "")
+	echo "*** Project description file hasn't been set" >&2
+	exit 1
+	;;
+esac
+
+# --- Check types
+# if $newrev is 0000...0000, it's a commit to delete a ref.
+zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
+if [ "$newrev" = "$zero" ]; then
+	newrev_type=delete
+else
+	newrev_type=$(git cat-file -t $newrev)
+fi
+
+case "$refname","$newrev_type" in
+	refs/tags/*,commit)
+		# un-annotated tag
+		short_refname=${refname##refs/tags/}
+		if [ "$allowunannotated" != "true" ]; then
+			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
+			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
+			exit 1
+		fi
+		;;
+	refs/tags/*,delete)
+		# delete tag
+		if [ "$allowdeletetag" != "true" ]; then
+			echo "*** Deleting a tag is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	refs/tags/*,tag)
+		# annotated tag
+		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
+		then
+			echo "*** Tag '$refname' already exists." >&2
+			echo "*** Modifying a tag is not allowed in this repository." >&2
+			exit 1
+		fi
+		;;
+	refs/heads/*,commit)
+		# branch
+		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
+			echo "*** Creating a branch is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	refs/heads/*,delete)
+		# delete branch
+		if [ "$allowdeletebranch" != "true" ]; then
+			echo "*** Deleting a branch is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	refs/remotes/*,commit)
+		# tracking branch
+		;;
+	refs/remotes/*,delete)
+		# delete tracking branch
+		if [ "$allowdeletebranch" != "true" ]; then
+			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	*)
+		# Anything else (is there anything else?)
+		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
+		exit 1
+		;;
+esac
+
+# --- Finished
+exit 0
+
+================
+File: reference/.git/info/exclude
+================
+# git ls-files --others --exclude-from=.git/info/exclude
+# Lines that start with '#' are comments.
+# For a project mostly in C, the following would be a good set of
+# exclude patterns (uncomment them if you want to use them):
+# *.[oa]
+# *~
+
+================
+File: reference/.git/logs/refs/heads/main
+================
+0000000000000000000000000000000000000000 0c32f7764e928daf9473961c488e6e9a855339d2 Luke Nittmann <luke.nittmann@gmail.com> 1738221446 -0800	clone: from https://github.com/internet-development/www-internet-v2.git
+
+================
+File: reference/.git/logs/refs/remotes/origin/HEAD
+================
+0000000000000000000000000000000000000000 0c32f7764e928daf9473961c488e6e9a855339d2 Luke Nittmann <luke.nittmann@gmail.com> 1738221446 -0800	clone: from https://github.com/internet-development/www-internet-v2.git
+
+================
+File: reference/.git/logs/HEAD
+================
+0000000000000000000000000000000000000000 0c32f7764e928daf9473961c488e6e9a855339d2 Luke Nittmann <luke.nittmann@gmail.com> 1738221446 -0800	clone: from https://github.com/internet-development/www-internet-v2.git
+
+================
+File: reference/.git/refs/heads/main
+================
+0c32f7764e928daf9473961c488e6e9a855339d2
+
+================
+File: reference/.git/refs/remotes/origin/HEAD
+================
+ref: refs/remotes/origin/main
+
+================
+File: reference/.git/config
+================
+[core]
+	repositoryformatversion = 0
+	filemode = true
+	bare = false
+	logallrefupdates = true
+	ignorecase = true
+	precomposeunicode = true
+[remote "origin"]
+	url = https://github.com/internet-development/www-internet-v2.git
+	fetch = +refs/heads/*:refs/remotes/origin/*
+[branch "main"]
+	remote = origin
+	merge = refs/heads/main
+	vscode-merge-base = origin/main
+
+================
+File: reference/.git/description
+================
+Unnamed repository; edit this file 'description' to name the repository.
+
+================
+File: reference/.git/FETCH_HEAD
+================
+0c32f7764e928daf9473961c488e6e9a855339d2		branch 'main' of https://github.com/internet-development/www-internet-v2
+
+================
+File: reference/.git/HEAD
+================
+ref: refs/heads/main
+
+================
+File: reference/.git/packed-refs
+================
+# pack-refs with: peeled fully-peeled sorted 
+0c32f7764e928daf9473961c488e6e9a855339d2 refs/remotes/origin/main
+
+================
+File: reference/app/office/head.tsx
+================
+import DefaultMetaTags from '@components/DefaultMetaTags';
+
+export default async function Head({ params }) {
+  return (
+    <>
+      <DefaultMetaTags />
+    </>
+  );
+}
+
+================
+File: reference/app/office/layout.tsx
+================
+import Providers from '@components/Providers';
+
+export default function RootLayout({ children }: { children: React.ReactNode }) {
+  return (
+    <html lang="en-us">
+      <body className="theme-light">
+        <Providers>{children}</Providers>
+      </body>
+    </html>
+  );
+}
+
+================
+File: reference/app/office/page.tsx
+================
+import '@root/global.scss';
+
+import * as Constants from '@common/constants';
+import * as Utilities from '@common/utilities';
+
+import Accordion from '@components/Accordion';
+import ActionListItem from '@components/ActionListItem';
+import Canvas from '@components/Canvas';
+import DefaultLayout from '@components/page/DefaultLayout';
+import InternetDevelopmentLogo from '@components/svg/InternetDevelopmentLogo';
+import InternetDevelopmentLogoMark from '@components/svg/InternetDevelopmentLogoMark';
+import Table from '@components/Table';
+import TableRow from '@components/TableRow';
+import TableColumn from '@components/TableColumn';
+import Package from '@root/package.json';
+import styles from '@components/page/root.module.scss';
+
+export const dynamic = 'force-static';
+
+const VIDEO_URL = 'https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/03025ac3-aa78-4a21-ac3c-a465cb792d39.mp4';
+
+export async function generateMetadata({ params, searchParams }) {
+  const title = `${Package.name} - OFFICE`;
+  const description = `Learn more about our Office in Pike Place, Seattle`;
+  const url = 'https://internet.dev';
+  const handle = '@internetxstudio';
+
+  return {
+    description,
+    icons: {
+      icon: '/favicon-32x32.png',
+      shortcut: '/favicon-16x16.png',
+    },
+    metadataBase: new URL('https://internet.dev/office'),
+    openGraph: {
+      description,
+      images: [
+        {
+          url: 'https://next-s3-public.s3.us-west-2.amazonaws.com/internet-dev/intdev.png',
+          width: 1500,
+          height: 785,
+        },
+      ],
+      title,
+      type: 'website',
+      url,
+    },
+    title,
+    twitter: {
+      card: 'summary_large_image',
+      description,
+      handle,
+      images: ['https://next-s3-public.s3.us-west-2.amazonaws.com/internet-dev/intdev.png'],
+      title,
+      url,
+    },
+    url,
+  };
+}
+
+export default async function Page(props) {
+  return (
+    <DefaultLayout previewPixelSRC="https://intdev-global.s3.us-west-2.amazonaws.com/template-app-icon.png">
+      <div className={styles.row}>
+        <div className={styles.column} style={{ height: '176px', padding: 0 }}>
+          <Canvas />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <InternetDevelopmentLogo height="24px" />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <img className={styles.image} src="https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/7e6088bb-4ce2-47d9-9dfd-d658faed484d.png" />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <aside className={styles.aside}>
+            Champion Building, Pike Place
+            <br />
+            Seattle, Washington
+            <br />
+            United States of America, Earth
+          </aside>
+          <br />
+          <p className={styles.p}>We invite builders who love trying new things and learning to collaborate with us, guided by our values: everything matters, support your friends, and doing your best is more than enough.</p>
+          <br />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <img className={styles.image} src="https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/0bc8d758-d4a9-412e-aa28-1fa6e6481a9a.jpg" />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`What does the INTDEV office offer?`}>
+            <br />
+            Our space offers hardwood floors, symmetrical fiber internet, a local area network, two full kitchens, three meeting booths, a server room, lunch tables, and dedicated workstations. With 24/7 access and amenities like a color printer, shredder, scanner, gallery lounge, and triple-filtered water, we foster a collaborative environment where you can build your vision alongside like-minded peers.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Apply on Users Garden
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Manage your account
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+              Read our Office Use Agreement
+            </ActionListItem>
+            <br />
+            <br /> <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <img className={styles.image} src="https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/6dcedf7d-82d1-45db-a53e-31de509a7759.jpg" />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How do I work with INTDEV at their office?`}>
+            <br />
+            You can find an application link below or by reaching out through social. Please note that the INTDEV reserved desks are invite-only and intended for those with a genuine interest in building things together.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Apply on Users Garden
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Manage your account
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+              Read our Office Use Agreement
+            </ActionListItem>
+            <br />
+            <br /> <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <img className={styles.image} src="https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/9c524b6a-855e-4329-88cd-7bb81796fcc2.jpg" />
+          <br />
+        </div>
+      </div>
+
+      <footer className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <ActionListItem icon={`⊹`} href="https://wireframes.internet.dev/" target="_blank">
+            Explore INTDEV's open source work
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://github.com/orgs/internet-development/repositories" target="_blank">
+            Follow us on GitHub
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://www.linkedin.com/company/internet-dev" target="_blank">
+            Follow us on LinkedIn
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://www.instagram.com/internetdevelopmentstudio/" target="_blank">
+            Follow us on Instagram
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://read.cv/teams/intdev" target="_blank">
+            Follow us on Read.cv
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://x.com/internetxstudio" target="_blank">
+            Follow us on X
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+            Get our attention on Telegram
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="/">
+            Go home
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+            Manage your account
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-acceptable-use" target="_blank">
+            Read our Acceptable Use Policy
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+            Read our Office Use Agreement
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-privacy-policy" target="_blank">
+            Read our Privacy Policy
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-terms-of-service" target="_blank">
+            Read our Terms of Use
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://github.com/internet-development/www-internet-v2" target="_blank">
+            View source
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev" target="_blank">
+            Write a post
+          </ActionListItem>
+          <br />
+          Copyright © 2025. All rights reserved.
+          <br />
+          <br />
+          <br />
+        </div>
+      </footer>
+    </DefaultLayout>
+  );
+}
+
+================
+File: reference/app/head.tsx
+================
+import DefaultMetaTags from '@components/DefaultMetaTags';
+
+export default async function Head({ params }) {
+  return (
+    <>
+      <DefaultMetaTags />
+    </>
+  );
+}
+
+================
+File: reference/app/layout.tsx
+================
+import Providers from '@components/Providers';
+
+export default function RootLayout({ children }: { children: React.ReactNode }) {
+  return (
+    <html lang="en-us">
+      <body className="theme-light">
+        <Providers>{children}</Providers>
+      </body>
+    </html>
+  );
+}
+
+================
+File: reference/app/manifest.ts
+================
+import Package from '@root/package.json';
+
+import { MetadataRoute } from 'next';
+
+export default function manifest(): MetadataRoute.Manifest {
+  return {
+    background_color: '#ffffff',
+    description: Package.description,
+    display: 'standalone',
+    icons: [
+      {
+        src: '/favicon.ico',
+        sizes: 'any',
+        type: 'image/x-icon',
+      },
+    ],
+    name: Package.name,
+    short_name: Package.name,
+    start_url: '/',
+    theme_color: '#ffffff',
+  };
+}
+
+================
+File: reference/app/page.tsx
+================
+import '@root/global.scss';
+
+import * as Constants from '@common/constants';
+import * as Utilities from '@common/utilities';
+
+import Accordion from '@components/Accordion';
+import ActionListItem from '@components/ActionListItem';
+import Canvas from '@components/Canvas';
+import DefaultLayout from '@components/page/DefaultLayout';
+import InternetDevelopmentLogo from '@components/svg/InternetDevelopmentLogo';
+import InternetDevelopmentLogoMark from '@components/svg/InternetDevelopmentLogoMark';
+import Table from '@components/Table';
+import TableRow from '@components/TableRow';
+import TableColumn from '@components/TableColumn';
+import Package from '@root/package.json';
+import styles from '@components/page/root.module.scss';
+
+export const dynamic = 'force-static';
+
+const VIDEO_URL = 'https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/03025ac3-aa78-4a21-ac3c-a465cb792d39.mp4';
+
+export async function generateMetadata({ params, searchParams }) {
+  const title = Package.name;
+  const description = Package.description;
+  const url = 'https://internet.dev';
+  const handle = '@internetxstudio';
+
+  return {
+    description,
+    icons: {
+      icon: '/favicon-32x32.png',
+      shortcut: '/favicon-16x16.png',
+    },
+    metadataBase: new URL('https://internet.dev'),
+    openGraph: {
+      description,
+      images: [
+        {
+          url: 'https://next-s3-public.s3.us-west-2.amazonaws.com/internet-dev/intdev.png',
+          width: 1500,
+          height: 785,
+        },
+      ],
+      title,
+      type: 'website',
+      url,
+    },
+    title,
+    twitter: {
+      card: 'summary_large_image',
+      description,
+      handle,
+      images: ['https://next-s3-public.s3.us-west-2.amazonaws.com/internet-dev/intdev.png'],
+      title,
+      url,
+    },
+    url,
+  };
+}
+
+export default async function Page(props) {
+  return (
+    <DefaultLayout previewPixelSRC="https://intdev-global.s3.us-west-2.amazonaws.com/template-app-icon.png">
+      <div className={styles.row}>
+        <div className={styles.column} style={{ height: '176px', padding: 0 }}>
+          <Canvas />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <video className={styles.video} src={VIDEO_URL} autoPlay muted loop playsInline preload="auto">
+            Your browser does not support the video tag.
+          </video>
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <h1 className={styles.h1}>Internet Development Studio Company ("INTDEV")</h1>
+          <aside className={styles.aside}>
+            Champion Building, Pike Place
+            <br />
+            Seattle, Washington
+            <br />
+            United States of America, Earth
+          </aside>
+          <br />
+          <p className={styles.p}>An american vocation guild and great hall for webmasters. Every day we practice the craft of designing, building, shipping, and maintaining websites, platforms, brands, and applications—end to end.</p>
+          <br />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <ActionListItem icon={`⊹`} href="https://wireframes.internet.dev/" target="_blank">
+            Explore INTDEV's open source work
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+            Get our attention on Telegram
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://sacred.computer" target="_blank">
+            Go explore SRCL
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="/office">
+            Learn more about the Pike Place office
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://www.beautifulthings.xyz/" target="_blank">
+            Look at beautiful things
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+            Manage your account
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev" target="_blank">
+            Write a post
+          </ActionListItem>
+
+          <br />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`What does the Internet Development Studio Company ("INTDEV") actually do?`}>
+            <br />
+            We provide a team you can hire to get things done.
+            <br />
+            <br />
+            That team is a 6 person dedicated tiger team specializing in delivering high-performance web applications, internal tools, branding assets, presentations, static websites, LLM interfaces, illustrations, productivity applications, technical writing, and general web development services. By embedding with up to four companies at a time, we allocate a shared bandwidth of 360 hours per week to drive productivity and deliver results. It’s a process we genuinely enjoy, and every major milestone we knock out helps us grow and learn.
+            <br />
+            <br />
+            We also provide an invite-only space in Seattle for people to work alongside us, offering a collaborative environment that also serves the portfolio venture companies of{' '}
+            <a href="https://mana.inc" target="_blank">
+              Mana Industries Fund 1 LP
+            </a>{' '}
+            and contributors.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://wireframes.internet.dev/" target="_blank">
+              Explore INTDEV's open source work
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`Who did INTDEV work for in 2024?`}>
+            <br />
+            Aliaksandr Hudzilin, Bakken & Bæck, Beautiful Things, El Cap Capital, Google, Mana Industries, Microsoft, Protocol Labs and various startups.
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`Who is INTDEV working for in 2025?`}>
+            <br />
+            Microsoft
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How does an engagement with INTDEV typically feel?`}>
+            <br />
+            Imagine hiring your own team, and one that already has a well-established design and engineering culture.
+            <br />
+            <br />
+            By hiring us, you gain a team that works seamlessly in person, is highly productive, and has a proven track record. This is all made possible by the extensive successful startup experience shared across our team.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How much does it cost to hire this team?`}>
+            <br />
+            <Table>
+              <TableRow>
+                <TableColumn>ONE MONTH</TableColumn>
+                <TableColumn>$70,000 USD</TableColumn>
+              </TableRow>
+
+              <TableRow>
+                <TableColumn>THREE MONTHS</TableColumn>
+                <TableColumn>$195,000 USD</TableColumn>
+              </TableRow>
+
+              <TableRow>
+                <TableColumn>SIX MONTHS</TableColumn>
+                <TableColumn>$360,000 USD</TableColumn>
+              </TableRow>
+
+              <TableRow>
+                <TableColumn>NINE MONTHS</TableColumn>
+                <TableColumn>$495,000 USD</TableColumn>
+              </TableRow>
+
+              <TableRow>
+                <TableColumn>TWELVE MONTHS</TableColumn>
+                <TableColumn>$600,000 USD</TableColumn>
+              </TableRow>
+            </Table>
+            <br />
+            From the start, it will feel like you built this team yourself.
+            <br />
+            <br />
+            We don’t do change orders—instead, we aim to complete as much work as possible within our estimates while you have us on retainer. This approach is ideal for situations where you want to accomplish a lot efficiently.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`Why do I have to hire the full six-person team?`}>
+            <br />
+            Our studio fosters deep in-person collaboration, where we openly discuss challenges and make a concerted effort to learn and improve our skills through shared experiences.
+            <br />
+            <br />
+            This approach strengthens our team and enables us to support venture-backed companies with tight deadlines and ambitious goals. By learning from each other’s mistakes, we continually refine our work and strive to hit the mark every time.
+            <br />
+            <br />
+            Also, it should be known that, based on our prices, you're only paying the cost of a full-time employee for a much larger headcount. A lot of clients find this to be high value.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`Is there a discount if we want to work with less people from the INTDEV?`}>
+            <br />
+            No, but as a client, you are welcome to work with fewer team members if that is your preference.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How does working with the INTDEV work day to day?`}>
+            <br />
+            Here’s a glimpse of what it’s like to collaborate with our six-person team.
+            <br />
+            <br />
+            <Accordion defaultValue={true} title={`Discovery Video Call`}>
+              <br />
+              We begin with a video call to understand your goals and explore how our team can deliver results. We’re flexible with your preferred video chat platform.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`[OPTIONAL] First Meeting in Seattle, WA`}>
+              <br />
+              Join us at our Pike Place office to work alongside our team as we dive into your goals. You’re welcome to use our meeting rooms and open desks, meet other companies, and enjoy engaging conversations. We always have filtered water and are here on weekends, too.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Onboarding`}>
+              <br />
+              From day one, we integrate seamlessly into your team, bringing years of experience and familiarity with compliance requirements like NDAs. Comfortable across Linux, MacOS, and Windows, we’re happy to train your employees when needed and adapt to your existing tools and processes.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Embedding`}>
+              <br />
+              We adapt to the roles you need, whether following your direction or advocating for key features, integrating into your daily routine at whatever level you require. Comfortable with agile, waterfall, or even a “move fast and break things” approach, we’re always ready to embrace challenges.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Working in the Office`}>
+              <br />
+              We can host stand-ups and any meetings you need in our office, with meeting rooms perfect for bringing in your own customers. Sharing the space often leads to team-building, and we’re happy to host and cook for large groups with a little notice. <br />
+              <br />
+              Pike Place offers great restaurants and scenic spots for breaks, though guest parking isn’t available, so please plan accordingly. Our office features symmetrical fiber internet and quiet workspaces, and we keep our client list small to stay flexible and accommodating.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Technical Program Management`}>
+              <br />
+              We help identify your Technical Program Management needs, aligning your team around a shared goal with fresh perspectives. We guide long-term strategic decisions, define “done” from the start, and set expectations upfront. We bring experience from high-profile projects while focusing on supporting your vision and helping you achieve it.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Zero to One`}>
+              <br />
+              With over a decade of startup experience, our design partners help bring your product to market for the first time and support future launches, treating each launch as a personal milestone. We love exploring logos, drawing inspiration from our collection of books, and rely on tools like Figma, Sketch, Photoshop, and Illustrator. <br />
+              <br />
+              Our network also includes some of Seattle’s top photographers and videographers, many of whom work directly in our space.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Get in Quick`}>
+              <br />
+              When you need quick results without extra discussion, we’re ready to jump in, whether it’s tackling long-standing backlogs, handling one-off tasks, or adding missing design system components. We can deliver results without delay. <br />
+              <br />
+              We’re unfazed by technical debt, comfortable managing tricky repository forks, and always ready to take on backlog tasks—just let us know how we can help.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Tooling Investment`}>
+              <br />
+              We know a team’s identity is often shaped by the tools they use. Whether you’re looking to strengthen your current toolkit or start fresh, we can help. Our expertise spans tools like Next.js, Postgres, Figma, GSAP, and Tailwind, along with CSS dialects like CSS-in-JS and email-compliant inline styles. <br />
+              <br />
+              With one of our partners contributing to Expo (React Native), we deeply value tooling. We respect your existing tools while embracing fresh starts that energize teams and foster growth. Involve us in consulting meetings for fresh perspectives—we’re always ready to explore new technologies, including LLMs.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Launch, Maintain, and Survive`}>
+              <br />
+              Your uptime is critical, and while we can’t promise 99.9999999% uptime at scale, we specialize in keeping websites running with low effort on your part. This allows you to focus on growing your product and engaging your customers without unnecessary distractions.
+              <br />
+              <br />
+              Whether you need help with IPFS, managing VPS, consulting on on-premise solutions, or working with tools like Fly, Vercel, and Render, we’ve got you covered. With experience in GCE, GCS, AWS EC2, S3, and database backups, we’re here to ensure your systems work.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Supporting Volatility`}>
+              <br />
+              If you’re navigating changes in priorities, we offer the flexibility to help you adapt. We understand that leadership shifts happen, and we’re here to support you while keeping your team focused on what matters most. Whether starting fresh or removing what’s not working, our flexible deal structure evolves with your needs, always aligned with your goal of driving success and growth for your business.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Libraries and Documentation`}>
+              <br />
+              We value great documentation and design systems, even if they’re not always a priority for everyone. We can create clear, user-friendly documentation and develop intuitive design systems for your web products, building tools to make these processes more efficient. <br />
+              <br />
+              Whether working with tools like Scalar, GitBook, and Notion or contributing to publications, blog posts, and video tutorials, we’re happy to provide custom solutions to meet your needs.
+              <br />
+              <br />
+            </Accordion>
+            <br />
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`What is INTDEV's relationship with the University of Washington?`}>
+            <br />
+            If your department requires a website that complies with the latest legal standards, is powered by modern web tooling, and boasts a functional design, partner with us. We read 313 pages of documentation for you.
+            <br />
+            <br />
+            We admire the{' '}
+            <a href="https://www.washington.edu/" target="_blank">
+              University of Washington
+            </a>
+            ’s dedication to innovation and inclusivity, and the alumni who work in our office proudly align our mission with these values. As designers, we are committed to ensuring that every website we create is not only modern but also accessible.
+            <br />
+            <br />
+            <a href="https://www.federalregister.gov/documents/2024/04/24/2024-07758/nondiscrimination-on-the-basis-of-disability-accessibility-of-web-information-and-services-of-state" target="_blank">
+              The guidelines
+            </a>{' '}
+            released by the Department of Justice under Title II of the Americans with Disabilities Act (ADA) have set a new bar for digital accessibility, which we embrace. Effective April 24, 2024, these standards require all web content to achieve compliance by April 24, 2026.
+            <br />
+            <br />
+            <Accordion defaultValue={true} title={`Ensuring all web content and mobile applications meet the Web Content Accessibility Guidelines (WCAG) 2.1, Level AA standards.`}>
+              <br />
+              This is a cornerstone of our approach to accessibility. We achieve this through rigorous processes and meticulous attention to detail. Our team follows best practices to make sure every user has a seamless and inclusive experience.
+              <br />
+              <br />
+              <Table>
+                <TableRow>
+                  <TableColumn>Semantic HTML</TableColumn>
+                  <TableColumn>We use semantic HTML to define the structure and meaning of web content, ensuring assistive technologies can interpret and navigate the site effectively.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Keyboard Accessibility</TableColumn>
+                  <TableColumn>We ensure all features are accessible via keyboard for users who cannot use a mouse.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Color Contrast</TableColumn>
+                  <TableColumn>We employ high-contrast color schemes to ensure text is readable by users with visual impairments while adhering to UW’s brand guidelines.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Alternative Text</TableColumn>
+                  <TableColumn>We provide descriptive text for images and multimedia content, helping screen readers convey information accurately to visually impaired users.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Resizable Text</TableColumn>
+                  <TableColumn>Our designs allow for text resizing without loss of content or functionality, catering to users who need larger fonts.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Error Identification and Suggestion</TableColumn>
+                  <TableColumn>Our forms are designed to identify errors and provide suggestions for correction, improving usability for those with cognitive disabilities.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Consistent Navigation</TableColumn>
+                  <TableColumn>Our predictable navigation and layouts help users with cognitive and learning disabilities.</TableColumn>
+                </TableRow>
+              </Table>
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Providing alternative text for all visual media, including images, videos, and interactive elements.`}>
+              <br />
+              Alternative text ensures that all users, including those with visual impairments, can fully understand and engage with all content on the website.
+              <br />
+              <br />
+              <Table>
+                <TableRow>
+                  <TableColumn>Descriptive Alt Text for Images</TableColumn>
+                  <TableColumn>We provide concise and descriptive alternative text for all images, enabling screen reader users to understand the context and content of visual elements.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Detailed Descriptions for Complex Images</TableColumn>
+                  <TableColumn>For complex images such as charts, infographics, or detailed diagrams, we offer extended descriptions to convey all critical information effectively.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Captions for Videos</TableColumn>
+                  <TableColumn>All video content includes synchronized captions, ensuring that users with hearing impairments can access the information being presented.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Transcripts for Audio Content</TableColumn>
+                  <TableColumn>We provide textual transcripts for all audio content, making it accessible to users with hearing impairments and allowing for easier comprehension during listening.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Text Alternatives for Interactive Elements</TableColumn>
+                  <TableColumn>Interactive elements, such as buttons, forms, and dynamic content, come with clear text alternatives or labels that describe their function and purpose.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Accessible Icons</TableColumn>
+                  <TableColumn>We use ARIA labels or alternative text for icons and other graphical elements to ensure they communicate their meaning to assistive technologies.</TableColumn>
+                </TableRow>
+              </Table>
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Making complex navigational structures accessible with clear and user-friendly interfaces.`}>
+              <br />
+              This is a fundamental aspect of our design philosophy. We believe that every user deserves an accessible browsing experience, regardless of the complexity of the content.
+              <br />
+              <br />
+              <Table>
+                <TableRow>
+                  <TableColumn>Logical Menu Hierarchies</TableColumn>
+                  <TableColumn>We design navigation menus with logical hierarchies, ensuring that users can easily find the information they need with minimal clicks.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Descriptive Links</TableColumn>
+                  <TableColumn>All links are clearly labeled with descriptive text, so users understand where each link will take them, aiding both screen readers and visual users.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Accessible Dropdown Menus</TableColumn>
+                  <TableColumn>Our dropdown menus are designed to be keyboard-accessible and screen reader-friendly, ensuring inclusivity for all users.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Breadcrumb Navigation</TableColumn>
+                  <TableColumn>We employ breadcrumb navigation to help users understand their current location within the website and easily backtrack if necessary.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Search Functionality</TableColumn>
+                  <TableColumn>We integrate advanced search functionalities, allowing users to quickly locate specific content without navigating through multiple menus.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Consistent Layouts</TableColumn>
+                  <TableColumn>We maintain consistency in layouts and navigation across all pages, so users can predict and understand where to find information.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Skip Navigation Links</TableColumn>
+                  <TableColumn>Our skip links allow users to bypass repetitive content and navigate directly to the main content, which is particularly helpful for screen reader users.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Visual Indicators</TableColumn>
+                  <TableColumn>Clear visual indicators highlight the current page or section, helping users keep track of their navigation path.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>ARIA Landmarks</TableColumn>
+                  <TableColumn>We implement ARIA (Accessible Rich Internet Applications) landmarks to define regions of a page, making it easier for screen reader users to navigate and skip to different sections.</TableColumn>
+                </TableRow>
+              </Table>
+              <br />
+              <br />
+            </Accordion>
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How do I join INTDEV as a Webmaster?`}>
+            <br />
+            In 2025, we plan to grow our team from six to eight members. If you’re passionate about the vocation of being a Webmaster, let’s talk.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://wireframes.internet.dev/examples/features/job-posting" target="_blank">
+              View the job
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`What does the INTDEV office offer?`}>
+            <br />
+            Our space offers hardwood floors, symmetrical fiber internet, a local area network, two full kitchens, three meeting booths, a server room, lunch tables, and dedicated workstations. With 24/7 access and amenities like a color printer, shredder, scanner, gallery lounge, and triple-filtered water, we foster a collaborative environment where you can build your vision alongside like-minded peers.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Apply on Users Garden
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Manage your account
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+              Read our Office Use Agreement
+            </ActionListItem>
+            <br />
+            <br /> <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How do I work with INTDEV at their office?`}>
+            <br />
+            You can find an application link below or by reaching out through social. Please note that the INTDEV reserved desks are invite-only and intended for those with a genuine interest in building things together.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Apply on Users Garden
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Manage your account
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+              Read our Office Use Agreement
+            </ActionListItem>
+            <br />
+            <br /> <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          Use this SVG for a logo without the word “INTDEV.”
+          <br />
+          <br />
+          <InternetDevelopmentLogoMark height="48px" />
+          <br />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          Use this SVG for a logo that includes our brand name.
+          <br />
+          <br />
+          <InternetDevelopmentLogo height="48px" />
+          <br />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <footer className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <img className={styles.image} src="https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/2fb7e012-4fa9-4446-9bf4-e2c5c7e4992a.jpg" />
+          <ActionListItem icon={`⊹`} href="https://wireframes.internet.dev/" target="_blank">
+            Explore INTDEV's open source work
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://bsky.app/profile/internetstudio.bsky.social" target="_blank">
+            Follow us on Bluesky
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://github.com/orgs/internet-development/repositories" target="_blank">
+            Follow us on GitHub
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://www.linkedin.com/company/internet-dev" target="_blank">
+            Follow us on LinkedIn
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://www.instagram.com/internetdevelopmentstudio/" target="_blank">
+            Follow us on Instagram
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://read.cv/teams/intdev" target="_blank">
+            Follow us on Read.cv
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://x.com/internetxstudio" target="_blank">
+            Follow us on X
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+            Get our attention on Telegram
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://sacred.computer" target="_blank">
+            Go explore SRCL
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="/office">
+            Learn more about the Pike Place office
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+            Manage your account
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-acceptable-use" target="_blank">
+            Read our Acceptable Use Policy
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+            Read our Office Use Agreement
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-privacy-policy" target="_blank">
+            Read our Privacy Policy
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-terms-of-service" target="_blank">
+            Read our Terms of Use
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://github.com/internet-development/www-internet-v2" target="_blank">
+            View source
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev" target="_blank">
+            Write a post
+          </ActionListItem>
+          <br />
+          Copyright © 2025. All rights reserved.
+          <br />
+          <br />
+          <br />
+        </div>
+      </footer>
+    </DefaultLayout>
+  );
+}
+
+================
+File: reference/app/robots.ts
+================
+import { MetadataRoute } from 'next';
+
+export default function robots(): MetadataRoute.Robots {
+  return {
+    rules: {
+      userAgent: '*',
+      allow: '/',
+      disallow: '/api/',
+    },
+    sitemap: 'https://internet.dev/sitemap.xml',
+  };
+}
+
+================
+File: reference/app/sitemap.ts
+================
+import { MetadataRoute } from 'next';
+
+export default function sitemap(): MetadataRoute.Sitemap {
+  return [
+    {
+      url: 'https://internet.dev',
+      lastModified: new Date(),
+    },
+  ];
+}
+
+================
+File: reference/common/constants.ts
+================
+export const MAX_SIZE_BYTES = 15728640;
+
+// NOTE(jimmylee):
+// https://github.com/internet-development/apis
+// export const API = `http://localhost:10001/api`;
+export const API = `https://api.internet.dev/api`;
+
+export const Users = {
+  tiers: {
+    UNVERIFIED: 0,
+    VERIFIED: 10,
+    PAYING: 20,
+    GENERAL_CO_WORKING: 30,
+    PARTNER: 40,
+    ADMIN: 100,
+  },
+};
+
+export const Tiers = {
+  PAYING: 899,
+  GENERAL_CO_WORKING: 32900,
+  PARTNER: 279000,
+};
+
+export const Payments = {
+  899: 'PAYING',
+  32900: 'GENERAL_CO_WORKING',
+  279000: 'PARTNER',
+};
+
+export const Payouts = {
+  PAYING: 1500,
+  GENERAL_CO_WORKING: 45000,
+  PARTNER: 45000,
+};
+
+export const LANDSCAPES = [
+  ['Sahara Desert', 'The Sahara stretches across North Africa with shifting dunes that tower above the horizon. Even in its harsh sunlight and cold nights, resilient life finds a way to endure.'],
+  ['Grand Canyon', 'Carved by the Colorado River, the Grand Canyon reveals layers of ancient rock. Its chasms echo with wind and the distant calls of raptors gliding through the afternoon sky.'],
+  ['Amazon Rainforest', 'The Amazon Rainforest teems with biodiversity under a dense green canopy. Rivers and flooded plains sustain countless species, while humid air hangs heavy with the promise of storms.'],
+  ['Rocky Mountains', 'The Rockies rise like rugged spines across the continent. Snowpack feeds rivers that carve valleys where elk graze, and fir trees cling to the slopes.'],
+  ['Gobi Desert', 'The Gobi Desert rolls out in arid sweeps across northern China and southern Mongolia. Sparse grasses and hardy camels testify to its unforgiving climate.'],
+  ['Andes Mountains', 'The Andes dominate western South America with ragged peaks and hidden valleys. Llamas graze on high plateaus, and glaciers feed the rivers far below.'],
+  ['Serengeti Plains', 'The Serengeti spreads under the African sun in rolling grasslands. Wildebeests and zebras migrate in vast herds, guided by the promise of water and fresh pasture.'],
+  ['Yosemite Valley', 'Glacial forces shaped this granite cradle in California. Towering waterfalls cascade from sheer cliffs, while giant sequoias stand in quiet strength.'],
+  ['Namib Desert', 'The Namib Desert clings to the Atlantic coast of southern Africa. Rust-red dunes shift above hidden water tables where desert elephants roam.'],
+  ['Patagonia', 'Patagonia’s windswept plains and jagged peaks stretch across Argentina and Chile. Glaciers calve into turquoise lakes, and guanacos graze on hardy grasses.'],
+  ['Swiss Alps', 'The Swiss Alps rise with sharp spires of snow and ice. Mountain chalets cling to slopes where wildflowers bloom each summer in vibrant displays.'],
+  ['Himalayas', 'The Himalayas hold the world’s highest summits beneath a freezing sky. From lush foothills to lofty glaciers, this range tests life’s resilience.'],
+  ['Icelandic Highlands', 'Iceland’s interior stands stark and raw with volcanic plains, steaming vents, and glacier-fed rivers. The wind sweeps across moss-coated lava fields in lonely gusts.'],
+  ['Atacama Desert', 'The Atacama is among the driest places on Earth. Its scorched soil and salt flats see rare blooms that burst into color after elusive rains.'],
+  ['Redwood Forest', 'Coastal redwoods tower in perpetual mist along the Pacific. Their trunks, thick and ancient, cradle a hidden world of fern and moss.'],
+  ['Scottish Highlands', 'The Highlands roll in rugged hills capped by heather and stone. Lochs reflect ever-shifting skies, and the wind carries the distant clang of sheep bells.'],
+  ['Great Rift Valley', 'This massive geological trench cleaves eastern Africa, where lakes shimmer at the bottom of steep escarpments. Flamingos gather in vast flocks to feed on algae.'],
+  ['Okavango Delta', 'The Okavango spreads like a bright labyrinth of channels and wetlands in Botswana. Seasonal floods create a green haven for elephants, lions, and hippos.'],
+  ['Appalachian Mountains', 'Old and eroded, the Appalachians meander through eastern North America. Their forests host black bears, rhododendrons, and the misty quiet of forest hollows.'],
+  ['Death Valley', 'Death Valley bakes under a relentless sun, reaching some of the hottest temperatures on record. Cracked salt flats testify to evaporated lakes and lost water.'],
+  ['Dolomites', 'Jagged limestone peaks define northern Italy’s Dolomites. Alpine meadows lie below sheer cliffs, where climbers test themselves against silent stone.'],
+  ['Torres del Paine', 'Chile’s Torres del Paine juts into the southern sky with glacier-fed lakes at its base. Guanacos roam windblown plains as ice cracks overhead.'],
+  ['Lofoten Islands', 'Lofoten’s dramatic peaks rise straight from Norway’s cold seas. Fishing villages huddle along rocky shores, while gulls circle overhead in crisp air.'],
+  ['Siberian Tundra', 'The Siberian tundra spans a realm of permafrost and low shrubs. Winters stretch long and bleak, yet migratory birds still find respite here each summer.'],
+  ['Norwegian Fjords', 'Deep fjords carve into Norway’s coast where dark waters mirror towering cliffs. Small farms cling to green patches between rock and sea.'],
+  ['Bungle Bungle Range', 'These striped sandstone domes rise from the Australian outback. Gorges cut deep under a harsh sun, hiding pockets of lush vegetation.'],
+  ['Zion Canyon', 'Zion Canyon glows red and orange under the Utah sky. The Virgin River sculpts sheer walls that watch over narrow trails and hidden pools.'],
+  ['Lake Baikal', 'Lake Baikal in Siberia is the world’s deepest lake. Its waters shimmer with unmatched clarity, home to species found nowhere else on Earth.'],
+  ['Banff National Park', 'Banff crowns the Canadian Rockies with turquoise lakes and towering peaks. Grizzlies roam pine forests while glacier-fed rivers reflect untouched wilderness.'],
+  ['Wadi Rum', 'Wadi Rum’s sandstone cliffs loom in Jordan’s desert, carved by millennia of wind and time. Nomadic tribes wander under a silent, star-filled sky.'],
+  ['Cappadocia', 'Cappadocia’s whimsical rock formations rise over central Turkey’s plains. Soft stone spires hold hidden chapels and the ghosts of ancient dwellers.'],
+];
+
+export const SAMPLE_TABLE_DATA_CHANGE_ME = [
+  ['NAME', 'SYMBOL', 'PRICE', 'HOLDINGS'],
+  ['Bat', 'BAT', '$9.01', '400'],
+  ['Bear', 'BR', '$56.78', '200'],
+  ['Camel', 'CML', '$55.67', '70'],
+  ['Cheetah', 'CHT', '$13.45', '150'],
+  ['Crab', 'CRB', '$15.67', '250'],
+  ['Deer', 'DER', '$29.99', '110'],
+  ['Dolphin', 'DLP', '$77.89', '50'],
+  ['Eagle', 'EGL', '$45.67', '90'],
+  ['Falcon', 'FLC', '$40.22', '85'],
+  ['Fox', 'FOX', '$12.34', '100'],
+  ['Frog', 'FRG', '$7.89', '400'],
+  ['Giraffe', 'GRF', '$44.56', '80'],
+  ['Hedgehog', 'HDG', '$11.23', '200'],
+  ['Horse', 'HRS', '$54.32', '70'],
+  ['Kangaroo', 'KNG', '$15.67', '120'],
+  ['Koala', 'KLA', '$22.34', '150'],
+  ['Leopard', 'LPR', '$14.56', '110'],
+  ['Lemur', 'LMR', '$11.12', '320'],
+  ['Lion', 'LION', '$67.89', '80'],
+  ['Lynx', 'LNX', '$16.78', '130'],
+  ['Mouse', 'MSE', '$5.12', '500'],
+  ['Octopus', 'OCT', '$88.90', '40'],
+  ['Otter', 'OTR', '$20.21', '180'],
+  ['Owl', 'OWL', '$19.01', '160'],
+  ['Panda', 'PND', '$78.90', '55'],
+  ['Peacock', 'PCK', '$12.34', '100'],
+  ['Penguin', 'PNG', '$33.45', '90'],
+  ['Porcupine', 'PRC', '$17.89', '140'],
+  ['Rabbit', 'RBT', '$9.10', '350'],
+  ['Raccoon', 'RCC', '$18.90', '150'],
+  ['Shark', 'SHK', '$89.01', '50'],
+  ['Snake', 'SNK', '$10.11', '300'],
+  ['Squirrel', 'SQL', '$10.12', '250'],
+  ['Tiger', 'TGR', '$34.56', '120'],
+  ['Turtle', 'TRL', '$66.78', '60'],
+  ['Whale', 'WHL', '$123.45', '30'],
+  ['Wolf', 'WLF', '$23.45', '150'],
+  ['Zebra', 'ZBR', '$65.43', '60'],
+];
+
+export const CHESSBOARD_DEFAULT_POSITIONS: string[][] = [
+  ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'],
+  ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],
+  ['', '', '', '', '', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],
+  ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R'],
+];
+
+export const CHESSBOARD_BAD_BISHOP: string[][] = [
+  ['r', ' ', ' ', 'q', ' ', 'r', 'k', ''],
+  [' ', 'b', ' ', ' ', ' ', 'p', 'p', 'p'],
+  ['p', '', 'p', 'b', 'p', 'n', '', ''],
+  ['', '', 'p', 'p', '', '', '', ''],
+  ['Q', '', '', 'P', '', '', '', ''],
+  ['', '', 'P', '', 'P', 'N', 'B', ''],
+  ['P', 'P', ' ', 'N', '', 'P', 'P', 'P'],
+  ['R', ' ', ' ', ' ', 'K', ' ', ' ', 'R'],
+];
+
+export const CHESSBOARD_CHECKMATE_STEP_ONE: string[][] = [
+  [' ', ' ', ' ', '', ' ', 'r', ' ', 'r'],
+  ['p', 'b', ' ', 'n', ' ', 'p', ' ', 'k'],
+  ['', 'q', '', 'N', 'p', '', '', ''],
+  ['', 'p', 'p', 'n', 'P', '', 'Q', ''],
+  ['', 'b', 'p', 'P', 'B', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['P', 'P', ' ', ' ', ' ', 'P', 'P', 'P'],
+  ['R', ' ', ' ', ' ', ' ', 'R', 'K', ''],
+];
+
+export const CHESSBOARD_CHECKMATE_STEP_TWO: string[][] = [
+  [' ', ' ', ' ', '', ' ', 'r', ' ', 'r'],
+  ['p', 'b', ' ', 'n', ' ', ' ', ' ', 'k'],
+  ['', 'q', '', 'N', 'p', '', '', ''],
+  ['', 'p', 'p', 'n', 'P', 'p', 'Q', ''],
+  ['', 'b', 'p', 'P', 'B', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['P', 'P', ' ', ' ', ' ', 'P', 'P', 'P'],
+  ['R', ' ', ' ', ' ', ' ', 'R', 'K', ''],
+];
+
+export const CHESSBOARD_CHECKMATE_STEP_THREE: string[][] = [
+  [' ', ' ', ' ', '', ' ', 'r', ' ', 'r'],
+  ['p', 'b', ' ', 'n', ' ', ' ', ' ', 'k'],
+  ['', 'q', '', 'N', 'p', 'P', '', ''],
+  ['', 'p', 'p', 'n', '', '', 'Q', ''],
+  ['', 'b', 'p', 'P', 'B', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['P', 'P', ' ', ' ', ' ', 'P', 'P', 'P'],
+  ['R', ' ', ' ', ' ', ' ', 'R', 'K', ''],
+];
+
+================
+File: reference/common/hooks.ts
+================
+import * as React from 'react';
+
+export function useDebouncedCallback<T>(ms: number, f: (...args: T[]) => void, deps: any[]): (...args: T[]) => void {
+  let throttled = false;
+  let latestArgs: T | null = null;
+
+  const clearThrottle = () => {
+    throttled = false;
+
+    if (latestArgs !== null) {
+      f(latestArgs);
+      latestArgs = null;
+    }
+  };
+
+  return React.useCallback(
+    (args) => {
+      if (throttled) {
+        latestArgs = args;
+      } else {
+        f(args);
+
+        throttled = true;
+
+        setTimeout(clearThrottle, ms);
+      }
+    },
+    [...deps, ms]
+  );
+}
+
+================
+File: reference/common/position.ts
+================
+export type Placement = 'top' | 'bottom' | 'left' | 'right';
+
+export function calculate(triggerElement: HTMLElement, popoverElement: HTMLElement, scrollX: number = window.scrollX, scrollY: number = window.scrollY): { placement: Placement; position: { top: number; left: number } } {
+  let triggerRect;
+  let popoverRect;
+
+  if (triggerElement) {
+    triggerRect = triggerElement.getBoundingClientRect();
+  }
+
+  if (popoverElement) {
+    popoverRect = popoverElement.getBoundingClientRect();
+  }
+
+  const spaceAbove = triggerRect.top;
+  const spaceBelow = window.innerHeight - triggerRect.bottom;
+  const spaceLeft = triggerRect.left;
+  const spaceRight = window.innerWidth - triggerRect.right;
+
+  const viewportHeightThreshold = window.innerHeight * 0.4;
+  const viewportWidthThreshold = window.innerWidth * 0.4;
+
+  let placement: Placement = 'bottom';
+  let top = 0;
+  let left = 0;
+  if (!popoverRect) {
+    return { placement, position: { top: 0, left: 0 } };
+  }
+
+  if (spaceAbove >= viewportHeightThreshold && spaceAbove >= popoverRect.height) {
+    placement = 'top';
+    top = triggerRect.top + scrollY - popoverRect.height;
+    left = triggerRect.left + scrollX + (triggerRect.width - popoverRect.width) / 2;
+  } else if (spaceBelow >= viewportHeightThreshold && spaceBelow >= popoverRect.height) {
+    placement = 'bottom';
+    top = triggerRect.bottom + scrollY;
+    left = triggerRect.left + scrollX + (triggerRect.width - popoverRect.width) / 2;
+  } else if (spaceRight >= viewportWidthThreshold && spaceRight >= popoverRect.width) {
+    placement = 'right';
+    top = triggerRect.top + scrollY + (triggerRect.height - popoverRect.height) / 2;
+    left = triggerRect.right + scrollX;
+  } else if (spaceLeft >= viewportWidthThreshold && spaceLeft >= popoverRect.width) {
+    placement = 'left';
+    top = triggerRect.top + scrollY + (triggerRect.height - popoverRect.height) / 2;
+    left = triggerRect.left + scrollX - popoverRect.width;
+  } else {
+    placement = 'bottom';
+    top = triggerRect.bottom + scrollY;
+    left = triggerRect.left + scrollX + (triggerRect.width - popoverRect.width) / 2;
+  }
+
+  if (left < 0) left = 0;
+  else if (left + popoverRect.width > window.innerWidth) left = window.innerWidth - popoverRect.width;
+
+  if (top < 0) top = 0;
+  else if (top + popoverRect.height > window.innerHeight + scrollY) top = window.innerHeight + scrollY - popoverRect.height;
+
+  return { placement, position: { top, left } };
+}
+
+================
+File: reference/common/queries.ts
+================
+import * as Constants from '@common/constants';
+import * as Utilities from '@common/utilities';
+
+export async function getData({ route, key, body }, qualifier = 'data') {
+  let result;
+  try {
+    const response = await fetch(route, {
+      method: 'POST',
+      headers: { 'X-API-KEY': key, 'Content-Type': 'application/json' },
+      body: JSON.stringify(body),
+    });
+    result = await response.json();
+  } catch (e) {
+    return null;
+  }
+
+  if (!result) {
+    return null;
+  }
+
+  if (result.error) {
+    return null;
+  }
+
+  if (!result[qualifier]) {
+    return null;
+  }
+
+  return result;
+}
+
+export async function onUserListData({ key }) {
+  const route = `${Constants.API}/data`;
+  const body = {};
+  return await getData({ route, key, body });
+}
+
+export async function onUserDeleteData({ id, key }) {
+  const route = `${Constants.API}/data/delete`;
+  const body = { id };
+  return await getData({ route, key, body });
+}
+
+export async function onRefreshDocuments({ key, type, domain }) {
+  const route = `${Constants.API}/documents`;
+  const body = { type, domain };
+  return await getData({ route, key, body });
+}
+
+export async function onGetDocumentById({ id }) {
+  const route = `${Constants.API}/documents/${id}`;
+  const body = {};
+  return await getData({ route, key: null, body });
+}
+
+export async function onUserCreateDocument({ key, type, domain }) {
+  const route = `${Constants.API}/documents/create`;
+  const body = { type, domain };
+  return await getData({ route, key, body });
+}
+
+export async function onDeleteDocumentById({ id, key }) {
+  const route = `${Constants.API}/documents/delete`;
+  const body = { id };
+  return await getData({ route, key, body });
+}
+
+export async function onUpdateDocumentById({ id, key, data }) {
+  const route = `${Constants.API}/documents/update`;
+  const body = { id, data };
+  return await getData({ route, key, body });
+}
+
+export async function onPublicUserAuthenticate({ email, password }) {
+  const route = `${Constants.API}/users/authenticate`;
+  const body = { email, password };
+  return getData({ route, key: null, body }, 'user');
+}
+
+export async function onPublicUserForgotPassword({ email }) {
+  const route = `${Constants.API}/users/reset-password`;
+  const body = { email, source: 'wireframes.internet.dev' };
+  return getData({ route, key: null, body }, 'success');
+}
+
+export async function onUserChangePassword({ key, password }) {
+  const route = `${Constants.API}/users/update-viewer-password`;
+  const body = { password };
+  return getData({ route, key, body });
+}
+
+export async function onUserRegenerateAPIKey({ email, password }) {
+  const route = `${Constants.API}/users/regenerate-key`;
+  const body = { email, password };
+  return getData({ route, key: null, body }, 'user');
+}
+
+export async function onUserUnsubscribeServices({ key }) {
+  const route = `${Constants.API}/users/subscriptions/unsubscribe`;
+  const body = null;
+  return getData({ route, key, body }, 'user');
+}
+
+export async function onRefreshPosts({ key, type, user_id }) {
+  const route = `${Constants.API}/posts`;
+  const body = { type, user_id };
+  return await getData({ route, key, body });
+}
+
+export async function onUserCreatePost({ id, key, src, type }) {
+  const route = `${Constants.API}/posts/create`;
+  const body = { type, fields: { fileId: id, public: true }, src };
+  return getData({ route, key, body });
+}
+
+export async function onUserCreateThread({ fields, key, src, type }) {
+  const route = `${Constants.API}/posts/create`;
+  const body = { fields, src, type };
+  return getData({ route, key, body });
+}
+
+export async function onUserDeletePost({ id, key }) {
+  const route = `${Constants.API}/posts/delete`;
+  const body = { id };
+  return getData({ route, key, body });
+}
+
+export async function onUserListThreadReplies({ id, key, orderBy }) {
+  const route = `${Constants.API}/posts/all-thread-replies`;
+  const body = { id, orderBy };
+  return getData({ route, key, body });
+}
+
+export async function onUserListThreads({ key, orderBy }) {
+  const route = `${Constants.API}/posts/all-threads`;
+  const body = { orderBy };
+  return getData({ route, key, body });
+}
+
+export async function onUserUploadDataGCS({ domain, file, key }) {
+  let signedResult;
+  const name = file.name;
+  const type = file.type;
+  const size = file.size;
+
+  if (size > Constants.MAX_SIZE_BYTES) {
+    return { error: 'File size exceeds 15mb limit' };
+  }
+
+  try {
+    const route = `${Constants.API}/data/generate-presigned-url-gcs`;
+    const body = { domain, type, file: name, size };
+    signedResult = await getData({ route, key, body }, 'uploadURL');
+  } catch (e) {
+    return null;
+  }
+
+  try {
+    fetch(signedResult.uploadURL, {
+      method: 'PUT',
+      headers: {
+        'Content-Type': 'application/octet-stream',
+      },
+      body: file,
+    });
+  } catch (e) {
+    return null;
+  }
+
+  return signedResult;
+}
+
+export async function onUserUploadDataS3({ domain, file, key }) {
+  let signedResult;
+  const name = file.name;
+  const type = file.type;
+  const size = file.size;
+
+  if (size > Constants.MAX_SIZE_BYTES) {
+    return { error: 'File size exceeds 15mb limit' };
+  }
+
+  try {
+    const route = `${Constants.API}/data/generate-presigned-url`;
+    const body = { domain, type, file: name, size };
+    signedResult = await getData({ route, key, body }, 'uploadURL');
+  } catch (e) {
+    return null;
+  }
+
+  try {
+    fetch(signedResult.uploadURL, {
+      method: 'PUT',
+      body: file,
+    });
+  } catch (e) {
+    return null;
+  }
+
+  return signedResult;
+}
+
+================
+File: reference/common/server.ts
+================
+import * as Utilities from '@common/utilities';
+
+import Cors from '@modules/cors';
+
+// NOTE(jimmylee)
+// import aesjs from 'aes-js';
+/*
+Some endpoints on https://api.internet.dev require server-side decryption. Without it, you won’t be able to perform actions like password recovery or Google authentication. To enable these features, you’ll need to set two environment variables with the correct values, and have an active partnership with us.
+
+When we built this open-source template for learning purposes, we aimed to make it fully open and accessible. However, since we are also running a service, certain restrictions are necessary. We appreciate your understanding.
+
+API_AES_KEY=
+API_IV_KEY=
+*/
+
+/*
+export function decrypt(hex) {
+  if (Utilities.isEmpty(process.env.API_AES_KEY)) {
+    throw new Error('process.env.API_AES_KEY');
+    return;
+  }
+
+  if (Utilities.isEmpty(process.env.API_IV_KEY)) {
+    throw new Error('process.env.API_IV_KEY');
+    return;
+  }
+
+  const aesKey = aesjs.utils.utf8.toBytes(process.env.API_AES_KEY);
+  const base64IV = process.env.API_IV_KEY;
+
+  if (!base64IV) {
+    throw new Error('process.env.API_IV_KEY is undefined. Please set the environment variable.');
+  }
+
+  const ivBytes = aesjs.utils.hex.toBytes(Buffer.from(base64IV, 'base64').toString('hex'));
+  const aesCtr = new aesjs.ModeOfOperation.ctr(aesKey, new aesjs.Counter(ivBytes));
+  const encryptedBytes = aesjs.utils.hex.toBytes(hex);
+  const decryptedBytes = aesCtr.decrypt(encryptedBytes);
+  const decrypted = aesjs.utils.utf8.fromBytes(decryptedBytes);
+
+  return decrypted;
+}
+*/
+
+export function initMiddleware(middleware) {
+  return (req, res) =>
+    new Promise((resolve, reject) => {
+      middleware(req, res, (result) => {
+        if (result instanceof Error) {
+          return reject(result);
+        }
+        return resolve(result);
+      });
+    });
+}
+
+export const cors = initMiddleware(
+  Cors({
+    methods: ['GET', 'POST', 'DELETE', 'OPTIONS'],
+  })
+);
+
+export async function setup(context): Promise<{ sessionKey?: any; viewer?: Record<string, any> | null }> {
+  let viewer = null;
+  let sessionKey = context.req.cookies['sitekey'] || '';
+
+  if (!Utilities.isEmpty(sessionKey)) {
+    try {
+      const response = await fetch('https://api.internet.dev/api/users/viewer', {
+        method: 'PUT',
+        headers: { 'X-API-KEY': sessionKey, 'Content-Type': 'application/json' },
+      });
+      const result = await response.json();
+      if (result && result.viewer) {
+        viewer = result.viewer;
+      }
+    } catch (e) {}
+  }
+
+  return { sessionKey, viewer };
+}
+
+export async function tryKeyWithoutCookie(key): Promise<{ sessionKey?: any; viewer?: Record<string, any> | null }> {
+  let viewer = null;
+
+  if (!Utilities.isEmpty(key)) {
+    try {
+      const response = await fetch('https://api.internet.dev/api/users/viewer', {
+        method: 'PUT',
+        headers: { 'X-API-KEY': key, 'Content-Type': 'application/json' },
+      });
+      const result = await response.json();
+      if (result && result.viewer) {
+        viewer = result.viewer;
+      }
+    } catch (e) {}
+  }
+
+  return { sessionKey: key, viewer };
+}
+
+================
+File: reference/common/utilities.ts
+================
+const hasOwn = {}.hasOwnProperty;
+const localhostDomainRE = /^localhost[\:?\d]*(?:[^\:?\d]\S*)?$/;
+const nonLocalhostDomainRE = /^[^\s\.]+\.\S{2,}$/;
+const protocolAndDomainRE = /^(?:\w+:)?\/\/(\S+)$/;
+
+export function noop() {
+  return null;
+}
+
+export function pluralize(text: string, count: number) {
+  return count > 1 || count === 0 ? `${text}s` : text;
+}
+
+export function getOrdinalNumber(n) {
+  return n + (n > 0 ? ['th', 'st', 'nd', 'rd'][(n > 3 && n < 21) || n % 10 > 3 ? 0 : n % 10] : '');
+}
+
+// NOTE(jimmylee)
+// Stolen from: https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/deepEqual.ts
+export function deepEqual(x: any, y: any): boolean {
+  //@ts-ignore
+  return x && y && typeof x === 'object' && typeof y === 'object'
+    ? Object.keys(x).length === Object.keys(y).length &&
+        //@ts-ignore
+        Object.keys(x).reduce((isEqual, key) => isEqual && deepEqual(x[key], y[key]), true)
+    : x === y;
+}
+
+export function getDomainFromEmailWithoutAnySubdomain(email: string): string {
+  const atIndex = email.lastIndexOf('@');
+  if (atIndex === -1) {
+    return '';
+  }
+
+  const domain = email.slice(atIndex + 1);
+  const domainParts = domain.split('.');
+
+  if (domainParts.length < 2) {
+    return '';
+  }
+
+  const mainDomain = domainParts.slice(-2).join('.');
+  return mainDomain;
+}
+
+export function onHandleThemeChange(className?: string) {
+  const body = document.body;
+
+  body.classList.forEach((existingClass) => {
+    if (existingClass.startsWith('theme-')) {
+      body.classList.remove(existingClass);
+    }
+  });
+
+  if (className) {
+    body.classList.add(className);
+  } else {
+    body.classList.add('theme-light');
+  }
+}
+
+export function onHandleFontChange(className?: string) {
+  const body = document.body;
+
+  if (className) {
+    body.classList.forEach((existingClass) => {
+      if (existingClass.startsWith('font-')) {
+        body.classList.remove(existingClass);
+      }
+    });
+
+    body.classList.add(className);
+    return;
+  }
+
+  body.classList.forEach((existingClass) => {
+    if (existingClass.startsWith('font-')) {
+      body.classList.remove(existingClass);
+    }
+  });
+}
+
+export function formatDollars(value: number): string {
+  return new Intl.NumberFormat('en-US', {
+    style: 'currency',
+    currency: 'USD',
+  }).format(value);
+}
+
+export function calculatePositionWithGutter(rect, objectWidth, viewportWidth, gutter = 24) {
+  const right = viewportWidth - rect.right;
+  const top = rect.top + rect.height + gutter;
+  const side = right + objectWidth >= viewportWidth ? 'left' : 'right';
+  const adjustedRight = side === 'left' ? viewportWidth - objectWidth - gutter : right;
+  return { top, right: adjustedRight, side };
+}
+
+export function calculatePositionWithGutterById(id, objectWidth, viewportWidth, gutter?) {
+  let rect;
+  if (id) {
+    const el = document.getElementById(id);
+    if (el) {
+      rect = el.getBoundingClientRect();
+    }
+  }
+  return calculatePositionWithGutter(rect, objectWidth, viewportWidth, gutter);
+}
+
+export function leftPad(input, length) {
+  const zerosNeeded = length - input.length;
+  if (zerosNeeded <= 0) {
+    return input;
+  }
+
+  const zeros = '0'.repeat(zerosNeeded);
+
+  return zeros + input;
+}
+
+export function toDateISOString(data: string) {
+  const date = new Date(data);
+  const dayOfWeek = date.toLocaleDateString('en-US', {
+    weekday: 'long',
+  });
+  const month = date.toLocaleDateString('en-US', {
+    month: 'long',
+  });
+  const dayOfMonth = getOrdinalNumber(date.getDate());
+  const year = date.getFullYear();
+
+  const formattedDate = `${dayOfWeek}, ${month} ${dayOfMonth}, ${year}`;
+
+  return formattedDate;
+}
+
+export function elide(string, length = 140, emptyState = '...') {
+  if (isEmpty(string)) {
+    return emptyState;
+  }
+
+  if (string.length < length) {
+    return string.trim();
+  }
+
+  return `${string.substring(0, length)}...`;
+}
+
+export function bytesToSize(bytes: number, decimals: number = 2) {
+  if (bytes === 0) return '0 Bytes';
+
+  const k = 1000;
+  const dm = decimals < 0 ? 0 : decimals;
+  const sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
+
+  const i = Math.floor(Math.log(bytes) / Math.log(k));
+
+  return `${(bytes / Math.pow(k, i)).toFixed(dm)} ${sizes[i]}`;
+}
+
+export function isEmpty(text: any) {
+  // NOTE(jimmylee):
+  // If a number gets passed in, it isn't considered empty for zero.
+  if (text === 0) {
+    return false;
+  }
+
+  if (!text) {
+    return true;
+  }
+
+  if (typeof text === 'object') {
+    return true;
+  }
+
+  if (text.length === 0) {
+    return true;
+  }
+
+  text = text.toString();
+
+  return Boolean(!text.trim());
+}
+
+export function createSlug(text: any) {
+  if (isEmpty(text)) {
+    return 'untitled';
+  }
+
+  const a = 'æøåàáäâèéëêìíïîòóöôùúüûñçßÿœæŕśńṕẃǵǹḿǘẍźḧ·/_,:;';
+  const b = 'aoaaaaaeeeeiiiioooouuuuncsyoarsnpwgnmuxzh------';
+  const p = new RegExp(a.split('').join('|'), 'g');
+
+  return text
+    .toString()
+    .toLowerCase()
+    .replace(/\s+/g, '-') // Replace spaces with -
+    .replace(p, (c) => b.charAt(a.indexOf(c))) // Replace special chars
+    .replace(/&/g, '-and-') // Replace & with 'and'
+    .replace(/[^\w\-]+/g, '') // Remove all non-word chars
+    .replace(/\-\-+/g, '-') // Replace multiple - with single -
+    .replace(/^-+/, '') // Trim - from start of text
+    .replace(/-+$/, ''); // Trim - from end of text
+}
+
+export function isUrl(string: any) {
+  if (typeof string !== 'string') {
+    return false;
+  }
+
+  let match = string.match(protocolAndDomainRE);
+  if (!match) {
+    return false;
+  }
+
+  let everythingAfterProtocol = match[1];
+  if (!everythingAfterProtocol) {
+    return false;
+  }
+
+  if (localhostDomainRE.test(everythingAfterProtocol) || nonLocalhostDomainRE.test(everythingAfterProtocol)) {
+    return true;
+  }
+
+  return false;
+}
+
+export function debounce<Args extends unknown[]>(fn: (...args: Args) => void, delay: number) {
+  let timeoutID: number | undefined;
+  let lastArgs: Args | undefined;
+
+  const run = () => {
+    if (lastArgs) {
+      fn(...lastArgs);
+      lastArgs = undefined;
+    }
+  };
+
+  const debounced = (...args: Args) => {
+    clearTimeout(timeoutID);
+    lastArgs = args;
+    timeoutID = window.setTimeout(run, delay);
+  };
+
+  debounced.flush = () => {
+    clearTimeout(timeoutID);
+  };
+
+  return debounced;
+}
+
+export function timeAgo(dateInput: Date | string | number): string {
+  const date = new Date(dateInput);
+  const now = new Date();
+  const secondsPast = (now.getTime() - date.getTime()) / 1000;
+
+  if (secondsPast < 0 || isNaN(secondsPast)) {
+    return '[INVALID]';
+  }
+
+  if (secondsPast < 60) {
+    return 'Just now';
+  } else if (secondsPast < 3600) {
+    const minutes = Math.floor(secondsPast / 60);
+    return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;
+  } else if (secondsPast < 86400) {
+    const hours = Math.floor(secondsPast / 3600);
+    return `${hours} hour${hours > 1 ? 's' : ''} ago`;
+  } else if (secondsPast < 604800) {
+    const days = Math.floor(secondsPast / 86400);
+    return `${days} day${days > 1 ? 's' : ''} ago`;
+  }
+
+  const formattedDate = date.toLocaleDateString('en-US', {
+    month: '2-digit',
+    day: '2-digit',
+    year: 'numeric',
+  });
+
+  return formattedDate;
+}
+
+export function classNames(...args: any[]): string {
+  let classes: string[] = [];
+
+  for (let i = 0; i < arguments.length; i++) {
+    let arg = arguments[i];
+    if (!arg) continue;
+
+    let argType = typeof arg;
+
+    if (argType === 'string' || argType === 'number') {
+      classes.push(arg);
+    } else if (Array.isArray(arg)) {
+      if (arg.length) {
+        let inner = classNames.apply(null, arg);
+        if (inner) {
+          classes.push(inner);
+        }
+      }
+    } else if (argType === 'object') {
+      if (arg.toString !== Object.prototype.toString) {
+        classes.push(arg.toString());
+      } else {
+        for (let key in arg) {
+          if (hasOwn.call(arg, key) && arg[key]) {
+            classes.push(key);
+          }
+        }
+      }
+    }
+  }
+
+  return classes.join(' ');
+}
+
+export async function generateNonce() {
+  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
+  let result = '';
+  const charactersLength = characters.length;
+  for (let i = 0; i < 8; i++) {
+    result += characters.charAt(Math.floor(Math.random() * charactersLength));
+  }
+  return result;
+}
+
+export function filterUndefined(obj) {
+  const res = {};
+  Object.keys(obj)
+    .filter((k) => obj[k] !== undefined)
+    .forEach((k) => (res[k] = obj[k]));
+  return res;
+}
+
+export const isFocusableElement = (element: EventTarget | null): element is HTMLElement => {
+  if (!element || !(element instanceof HTMLElement)) {
+    return false;
+  }
+
+  const focusableSelectors = ['a[href]', 'button', 'input', 'select', 'textarea', '[tabindex]:not([tabindex="-1"])', '[contenteditable="true"]'];
+
+  return element.matches(focusableSelectors.join(', '));
+};
+
+export const findNextFocusable = (element: Element | null, direction: 'next' | 'previous' = 'next'): HTMLElement | null => {
+  if (!element) return null;
+
+  const focusableSelectors = ['a[href]', 'button', 'input', 'select', 'textarea', '[tabindex]:not([tabindex="-1"])', '[contenteditable="true"]'];
+
+  const focusableElements = Array.from(document.querySelectorAll<HTMLElement>(focusableSelectors.join(', ')));
+
+  const currentIndex = focusableElements.indexOf(element as HTMLElement);
+
+  if (currentIndex !== -1) {
+    const nextIndex = direction === 'next' ? (currentIndex + 1) % focusableElements.length : (currentIndex - 1 + focusableElements.length) % focusableElements.length;
+
+    return focusableElements[nextIndex];
+  }
+
+  return null;
+};
+
+export const findFocusableDescendant = (container: Element | null, currentFocused: Element | null = null, direction: 'next' | 'previous' = 'next'): HTMLElement | null => {
+  if (!container) return null;
+
+  const focusableElements = Array.from(container.querySelectorAll<HTMLElement>('a[href], button, input, select, textarea, [tabindex]:not([tabindex="-1"]), [contenteditable="true"]'));
+
+  if (focusableElements.length === 0) return null;
+
+  let index = 0;
+  if (currentFocused) {
+    const currentIndex = focusableElements.indexOf(currentFocused as HTMLElement);
+    if (currentIndex !== -1) {
+      index = direction === 'next' ? currentIndex + 1 : currentIndex - 1;
+    }
+  }
+
+  if (index >= 0 && index < focusableElements.length) {
+    return focusableElements[index];
+  }
+
+  return null;
+};
+
+================
+File: reference/components/detectors/OutsideElementEvent.tsx
+================
+import * as React from 'react';
+
+interface OutsideElementEventProps {
+  className?: string;
+  children: React.ReactNode;
+  onOutsideEvent: (event: MouseEvent | TouchEvent) => void;
+  style?: React.CSSProperties;
+}
+
+const OutsideElementEvent: React.FC<OutsideElementEventProps> = ({ className, children, onOutsideEvent, style }) => {
+  const ref = React.useRef<HTMLDivElement>(null);
+
+  const handleOutsideEvent = React.useCallback(
+    (event: MouseEvent | TouchEvent) => {
+      if (!(event.target instanceof Element)) return;
+
+      if (event.target.hasAttribute('data-detector-ignore')) {
+        return;
+      }
+
+      if (ref.current && !ref.current.contains(event.target as Node)) {
+        onOutsideEvent(event);
+      }
+    },
+    [onOutsideEvent]
+  );
+
+  React.useEffect(() => {
+    document.addEventListener('mousedown', handleOutsideEvent);
+    document.addEventListener('touchstart', handleOutsideEvent);
+
+    return () => {
+      document.removeEventListener('mousedown', handleOutsideEvent);
+      document.removeEventListener('touchstart', handleOutsideEvent);
+    };
+  }, [handleOutsideEvent]);
+
+  return (
+    <div ref={ref} className={className} style={style}>
+      {children}
+    </div>
+  );
+};
+
+export default OutsideElementEvent;
+
+================
+File: reference/components/examples/AS400.module.scss
+================
+.root {
+}
+
+================
+File: reference/components/examples/AS400.tsx
+================
+'use client';
+
+import styles from '@components/AS400.module.scss';
+
+import * as React from 'react';
+
+import Card from '@components/Card';
+import Row from '@components/Row';
+import RowSpaceBetween from '@components/RowSpaceBetween';
+import Table from '@components/Table';
+import TableRow from '@components/TableRow';
+import TableColumn from '@components/TableColumn';
+import TextArea from '@components/TextArea';
+
+type AS400Props = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const AS400 = () => {
+  return (
+    <>
+      <Card>
+        <RowSpaceBetween>
+          <span style={{ minWidth: `10ch` }}>COMMAND</span>
+          <span style={{ minWidth: `10ch` }}>Menu : ⌃+T</span>
+          <span style={{ minWidth: `10ch`, textAlign: 'right' }}>IND333</span>
+        </RowSpaceBetween>
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow style={{ textAlign: 'center' }}>
+            <TableColumn>F O O D&nbsp;&nbsp;D I S T R I B U T I O N</TableColumn>
+          </TableRow>
+          <TableRow style={{ textAlign: 'center' }}>
+            <TableColumn>- - Advance Sales Menu - -</TableColumn>
+          </TableRow>
+        </Table>
+        <br />
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow>
+            <TableColumn>1. Order Entry</TableColumn>
+            <TableColumn>13. Create Texlon/MSI Orders</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>2. Route Recap</TableColumn>
+            <TableColumn>14. Create Posting w/Scanner</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>3. Staging Ticket</TableColumn>
+            <TableColumn></TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>4. Picking Ticket</TableColumn>
+            <TableColumn>15. Order List</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>5. Order Posting</TableColumn>
+            <TableColumn>16. Order Maintenance</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>6. Bill of Lading</TableColumn>
+            <TableColumn>16. Order Hold</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>7. Load Sheets</TableColumn>
+            <TableColumn>18. Order Release</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>8. Order Entry Invoicing</TableColumn>
+            <TableColumn>19. Order Cancellation</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>9. Order Entry Confirmation</TableColumn>
+            <TableColumn>20. Order Change</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>10. Order Entry Processing</TableColumn>
+            <TableColumn>21. Unsettled Invoice Report</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>&nbsp;</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>11. Credit Memo Entry</TableColumn>
+            <TableColumn>- - Transaction Processing Menu - -</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>12. Credit Memo Processing</TableColumn>
+            <TableColumn>- - Main Menu - -</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn></TableColumn>
+            <TableColumn>24. Sign Off</TableColumn>
+          </TableRow>
+        </Table>
+        <br />
+        <br />
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow>
+            <TableColumn>Ready for option number or command</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>
+              <TextArea isBlink />
+            </TableColumn>
+          </TableRow>
+        </Table>
+      </Card>
+      <br />
+      <Card>
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;Option: 1337...&nbsp;&nbsp; Copy: US&nbsp;&nbsp;&nbsp;&nbsp;ITEM ACTIVITY INQUIRY</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>IND333</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Regn: NW</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}></TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;Item #: 6666666</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}></TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GMO HONEYDEW MELON USDA PRIME 72 OZ</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}></TableColumn>
+          </TableRow>
+        </Table>
+        <br />
+        <br />
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow>
+            <TableColumn>Warehouse</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>On Hand</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>On Order</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>In Transit</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>Total</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>W/S</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>Sell</TableColumn>
+          </TableRow>
+
+          <TableRow>
+            <TableColumn>&nbsp;</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;01 SEATTLE</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;02 PORTLAND</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;06 TUKWILA</TableColumn>
+            <TableColumn>89</TableColumn>
+            <TableColumn>162</TableColumn>
+            <TableColumn>162</TableColumn>
+            <TableColumn>413</TableColumn>
+            <TableColumn>7.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;08 KIRKLAND</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;09 ALOHA</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;10 ANCHORAGE</TableColumn>
+            <TableColumn>107</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>324</TableColumn>
+            <TableColumn>511</TableColumn>
+            <TableColumn>5.5</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;13 SILVERDALE</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;17 EUGENE</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;61 FEDERAL WAY</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;63 NE ANCHORAGE</TableColumn>
+            <TableColumn>229</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>162</TableColumn>
+            <TableColumn>391</TableColumn>
+            <TableColumn>4.5</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;64 TUMWATER</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;67 MISSOULA</TableColumn>
+            <TableColumn>201</TableColumn>
+            <TableColumn>648</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>849</TableColumn>
+            <TableColumn>5.2</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;95 TACOMA</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+        </Table>
+        <br />
+        <br />
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow>
+            <TableColumn>CF-3 Exit&nbsp;&nbsp;&nbsp;&nbsp;CF7-Next Item&nbsp;&nbsp;&nbsp;&nbsp;CF21-Print Report</TableColumn>
+          </TableRow>
+        </Table>
+      </Card>
+    </>
+  );
+};
+
+AS400.displayName = 'AS400';
+
+export default AS400;
+
+================
+File: reference/components/examples/DashboardRadar.module.scss
+================
+.customSidebar {
+  display: flex;
+  align-items: center;
+  justify-content: space-between;
+  width: 100%;
+  flex-direction: column;
+  height: calc(var(--theme-line-height-base) * (var(--font-size) * 29.5));
+}
+
+.customTop {
+  min-height: 10%;
+  height: 100%;
+}
+
+.customBottom {
+  flex-shrink: 0;
+  width: 100%;
+}
+
+.root {
+  min-width: 56ch;
+}
+
+.cross {
+  width: 9ch;
+  height: calc(var(--theme-line-height-base) * (var(--font-size) * 7));
+  margin: calc(var(--theme-line-height-base) * (var(--font-size) * 0.5)) 0 calc(var(--theme-line-height-base) * (var(--font-size) * 0.5)) 0;
+  display: flex;
+  justify-content: space-between;
+  flex-direction: column;
+}
+
+.square {
+  width: 4.3ch;
+  height: calc(var(--theme-line-height-base) * (var(--font-size) * 3.4));
+}
+
+.nw {
+  border-right: 2px solid var(--theme-text);
+  border-bottom: 2px solid var(--theme-text);
+}
+
+.ne {
+  border-left: 2px solid var(--theme-text);
+  border-bottom: 2px solid var(--theme-text);
+}
+
+.sw {
+  border-top: 2px solid var(--theme-text);
+  border-right: 2px solid var(--theme-text);
+}
+
+.se {
+  border-top: 2px solid var(--theme-text);
+  border-left: 2px solid var(--theme-text);
+}
+
+.customContent {
+  width: 100%;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  height: calc(var(--theme-line-height-base) * (var(--font-size) * 24.5));
+}
+
+================
+File: reference/components/examples/DashboardRadar.tsx
+================
+import styles from '@components/examples/DashboardRadar.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import ActionButton from '@components/ActionButton';
+import ButtonGroup from '@components/ButtonGroup';
+import Card from '@components/Card';
+import RowSpaceBetween from '@components/RowSpaceBetween';
+import SidebarLayout from '@components/SidebarLayout';
+import Sphere from '@components/svg/Sphere';
+
+const RadarMarker = (props) => {
+  return (
+    <div className={styles.cross}>
+      <RowSpaceBetween>
+        <div className={Utilities.classNames(styles.square, styles.nw)} />
+        <div className={Utilities.classNames(styles.square, styles.ne)} />
+      </RowSpaceBetween>
+      <RowSpaceBetween>
+        <div className={Utilities.classNames(styles.square, styles.sw)} />
+        <div className={Utilities.classNames(styles.square, styles.se)} />
+      </RowSpaceBetween>
+    </div>
+  );
+};
+
+const DashboardRadar = (props) => {
+  return (
+    <div className={styles.root}>
+      <SidebarLayout
+        isReversed
+        sidebar={
+          <Card>
+            <div className={styles.customSidebar}>
+              <div className={styles.customTop}>
+                TIME FROM
+                <ActionButton style={{ width: '100%' }}>11:11:11:11</ActionButton>
+                <br />
+                <br />
+                PRESENT
+                <br />
+                P.O.R.
+                <br />
+                NOSTROMO
+                <br />
+              </div>
+              <div className={styles.customBottom}>
+                HEADING
+                <br />
+                <ButtonGroup isFull items={[{ body: 'N .36' }, { body: 'E .18' }]} />
+                <br />
+                GROUND
+                <br />
+                <ActionButton rootStyle={{ width: '100%' }}>SPEED 78.26</ActionButton>
+                <br />
+                CONDITION
+                <br />
+                CODE
+                <br />
+                <ActionButton style={{ width: '100%' }}>16 S=C75C</ActionButton>
+                <ActionButton>PAST=8</ActionButton>
+                <br />
+                <br />
+                <ActionButton rootStyle={{ width: '100%' }}>System #4</ActionButton>
+                <br />
+                <br />
+                AUTODECOUNT
+                <br />
+                <br />
+                <ActionButton rootStyle={{ width: '100%', textAlign: 'right' }}>3454.94#</ActionButton>
+              </div>
+            </div>
+          </Card>
+        }
+        defaultSidebarWidth={19}
+      >
+        <Card>
+          <RowSpaceBetween>
+            <span style={{ flexShrink: 0 }}>DEORBITAL DESCENT</span>
+            <span style={{ minWidth: '10%', width: '100%', display: 'flex', justifyContent: 'flex-end' }}>
+              <span>
+                <ActionButton>COMMENCE FINAL</ActionButton>
+                <br />
+                <ActionButton>SYSTEM :0L: 76.75 :08:</ActionButton>
+              </span>
+            </span>
+          </RowSpaceBetween>
+        </Card>
+        <br />
+        <Card>
+          <RowSpaceBetween style={{ position: 'absolute', top: 0, left: `6ch`, right: `6ch` }}>
+            <RadarMarker />
+            <RadarMarker />
+          </RowSpaceBetween>
+          <div className={styles.customContent}>
+            <Sphere style={{ transform: 'translateX(24ch) rotateZ(40deg)' }} />
+          </div>
+          <RowSpaceBetween style={{ position: 'absolute', bottom: `calc(var(--theme-line-height-base) * (var(--font-size) * 0.5))`, left: `6ch`, right: `6ch` }}>
+            <RadarMarker />
+            <RadarMarker />
+          </RowSpaceBetween>
+        </Card>
+      </SidebarLayout>
+    </div>
+  );
+};
+
+export default DashboardRadar;
+
+================
+File: reference/components/examples/Denabase.module.scss
+================
+.root {
+  min-width: 68ch;
+  margin-top: calc(var(--theme-line-height-base) * 1rem);
+}
+
+.dna {
+  min-width: 71ch;
+  -webkit-text-size-adjust: 100%;
+}
+
+.tag {
+  width: 3ch;
+  height: calc(var(--theme-line-height-base) * 0.5rem);
+  flex-shrink: 0;
+  box-shadow:
+    inset 2px 0 0 var(--theme-text),
+    inset -2px 0 0 var(--theme-text),
+    inset 0 2px 0 var(--theme-text);
+}
+
+.secondaryTag {
+  width: 3ch;
+  align-self: stretch;
+  flex-shrink: 0;
+  box-shadow:
+    inset 2px 0 0 var(--theme-text),
+    inset -2px 0 0 var(--theme-text),
+    inset 0 2px 0 var(--theme-text);
+}
+
+.small {
+  width: 13ch;
+  flex-shrink: 0;
+  text-align: right;
+}
+
+.smallWithBorder {
+  width: 13ch;
+  flex-shrink: 0;
+  text-align: right;
+  box-shadow: inset 0 2px 0 var(--theme-text);
+}
+
+.smallSection {
+  width: 13ch;
+  flex-shrink: 0;
+  min-width: 10%;
+  text-align: right;
+  box-shadow: inset 0 2px 0 var(--theme-text);
+}
+
+.large {
+  width: 80%;
+  min-width: 10%;
+  text-align: right;
+}
+
+.largeWithBorder {
+  width: 80%;
+  min-width: 10%;
+  text-align: right;
+  box-shadow:
+    inset 0 2px 0 var(--theme-text),
+    inset -2px 0 0 var(--theme-text);
+}
+
+.largeSection {
+  width: 80%;
+  min-width: 10%;
+  text-align: right;
+  box-shadow:
+    inset 0 2px 0 var(--theme-text),
+    inset -2px 0 0 var(--theme-text);
+}
+
+.absoluteTag {
+  top: calc(var(--theme-line-height-base) * -0.5rem);
+  left: 0;
+  height: calc(var(--theme-line-height-base) * 0.5rem);
+  width: 14.2ch;
+  background: var(--theme-background);
+  position: absolute;
+  box-shadow:
+    inset 2px 0 0 var(--theme-text),
+    inset -2px 0 0 var(--theme-text),
+    inset 0 2px 0 var(--theme-text);
+}
+
+.box {
+  width: 7.1ch;
+  flex-shrink: 0;
+  height: calc(var(--theme-line-height-base) * 3rem);
+  display: inline-flex;
+  align-items: center;
+  justify-content: center;
+  box-shadow:
+    inset -2px 0 0 var(--theme-text),
+    inset 0 2px 0 var(--theme-text),
+    inset 0 -2px 0 var(--theme-text);
+
+  &:first-child {
+    box-shadow:
+      inset 2px 0 0 var(--theme-text),
+      inset -2px 0 0 var(--theme-text),
+      inset 0 2px 0 var(--theme-text),
+      inset 0 -2px 0 var(--theme-text);
+  }
+}
+
+================
+File: reference/components/examples/Denabase.tsx
+================
+'use client';
+
+import styles from '@components/examples/Denabase.module.scss';
+
+import * as React from 'react';
+
+import ActionButton from '@components/ActionButton';
+import Card from '@components/Card';
+import Divider from '@components/Divider';
+import Row from '@components/Row';
+import RowSpaceBetween from '@components/RowSpaceBetween';
+import SidebarLayout from '@components/SidebarLayout';
+
+const Denabase = (props) => {
+  return (
+    <>
+      <Card style={{ overflowWrap: 'break-word' }}>
+        <Row>
+          <RowSpaceBetween>
+            <ActionButton>TR5342120027455925897981</ActionButton>
+            <ActionButton>02.14.2021</ActionButton>
+          </RowSpaceBetween>
+          <Divider type="GRADIENT" />
+          <div className={styles.dna}>
+            T-CA-AA-AA-TA-TC-GG-GC-AC-AT-TA-TT-TA-TT-TG-CC-GC-TC-GG-GA-AG-TA-GA-A
+            <br />
+            A-TG-GT-AC-AT-GT-GT-TT-TA-TG-AT-TT-CT-CG-CA-GT-GA-AA-AA-GC-AA-CG-AA-C
+            <br />
+            C-TC-GC-CC-TT-AG-AT-TC-TA-TA-GC-TG-CT-CT-GA-GA-CC-GC-AC-TG-GC-AA-GC-A
+            <br />
+            G-AA-AC-TC-CG-CA-TT-CA-GG-CA-GT-CC-TC-CA-TG-CA-CT-TC-CT-GC-CT-GT-CT-G
+            <br />
+            C-TG-AA-CC-TA-TT-AT-TA-GA-GA-TG-GA-CT-GC-AG-TT-CT-CA-AT-CA-CA-CG-GA-T
+            <br />
+            C-TG-AT-AC-CT-GC-TG-GT-AT-GT-TC-CT-GA-TA-CC-CA-CA-GA-CA-GC-GC-CC-GA-A
+            <br />
+            T-TT-TG-GC-AA-CC-GA-AC-TT-CT-CA-AC-AA-AA-CC-GC-CT-AG-TT-GC-TA-AT-TT-G
+            <br />
+            G-TG-AC-CT-GA-CT-GA-AT-TG-TC-AT-TA-AA-CA-CT-CC-TG-CT-AA-GA-TG-CG-AA-G
+            <br />
+            C-TA-TT-AT-AG-TG-TT-TT-GT-AC-AG-GC-TA-TT-TT-GC-GT-GA-AA-CG-CA-AA-CG-C
+            <br />
+            G-TT-GC-AT-TT-CA-GA-AT-TC-CG-TG-CA-TA-GT-TA-TC-TC-AT-GC-CG-TG-CT-CT-T
+            <br />
+            G-AT-TA-TT-GA-CA-TA-TG-CA-GT-TC-GT-CC-TA-AT-CC-GC-GC-CT-GG-TC-TT-TA-G
+            <br />
+            T-CA-CT-AA-CC-GA-CC-CT-TA-GT-AT-TG-TT-CT-CT-CA-AC-AA-AA-TG-TG-TT-AA-A
+            <br />
+            C-CG-GC-AT-AA-TC-TG-GT-GA-TC-GG-GA-GA-TC-CA-GA-GA-AA-CA-CA-CC-TT-GG-G
+            <br />
+            C-TA-GA-TG-CC-CT-AC-AT-TA-GA-TA-AG-GG-GT-CT-AT-AC-GG-GC-GG-GG-TT-AG-T
+            <br />
+            A-CA-CC-TT-GA-GC-GT-AT-AG-GA-GA-GT-AA-CG-AG-GT-GG-TT-GT-CG-TG-GG-AG-G
+            <br />
+            A-GG-AG-TA-TG-TT-CT-CC-CT-TA-CT-AG-TT-GC-CG-AT-AA-CA-GA-TA-CT-GA-TG-T
+            <br />
+            C-TG-GT-AA-TT-GC-CA-GT-CA-TG-GT-TG-TA-GT-AG-CC-GG-GA-CC-CG-CA-GT-CT-G
+            <br />
+            G-GT-AG-CG-CC-TA-AC-AG-AT-AA-GG-GG-GC-CT-AC-TC-CC-GC-CC-TG-GT-CG-GC-C
+            <br />
+            T-GA-TC-AT-AA-AC-CT-CT-GT-AA-TA-CC-AT-GG-GC-CA-CG-TT-AG-GC-GT-CG-AT-G
+            <br />
+            C-CG-GA-CC-CA-TA-TC-TT-TA-CA-TC-AT-CT-CT-TT-CA-TA-GA-AG-TA-CC-CA-CT-T
+            <br />
+          </div>
+          <Divider type="GRADIENT" />
+        </Row>
+      </Card>
+      <br />
+      <Card>
+        <SidebarLayout
+          sidebar={
+            <Card style={{ padding: `0 0 0 0` }}>
+              <br />
+              <br />
+              <Row style={{ textAlign: 'center' }}>╳</Row>
+              <br />
+              <br />
+            </Card>
+          }
+          defaultSidebarWidth={19}
+        >
+          <Card style={{ padding: 0, marginLeft: `1ch`, minWidth: `30ch` }}>
+            <br />
+            <br />
+            <br />
+            <br />
+            <Row style={{ textAlign: 'right' }}>NO DATA</Row>
+          </Card>
+        </SidebarLayout>
+        <div className={styles.root}>
+          <RowSpaceBetween>
+            <div className={styles.tag}></div>
+            <div className={styles.small}></div>
+            <div className={styles.tag}></div>
+            <div className={styles.large}></div>
+          </RowSpaceBetween>
+          <RowSpaceBetween>
+            <div className={styles.secondaryTag}>
+              <br />
+              <br />
+            </div>
+            <div className={styles.smallSection}>
+              <br />
+              2181&nbsp;
+              <br />
+              <br />
+            </div>
+            <div className={styles.secondaryTag}></div>
+            <div className={styles.largeSection}>
+              <br />
+              UNKNOWN&nbsp;&nbsp;
+              <br />
+              <br />
+            </div>
+          </RowSpaceBetween>
+          <RowSpaceBetween>
+            <div className={styles.tag}></div>
+            <div className={styles.smallWithBorder}></div>
+            <div className={styles.tag}></div>
+            <div className={styles.largeWithBorder}></div>
+          </RowSpaceBetween>
+          <RowSpaceBetween>
+            <div className={styles.secondaryTag}>
+              <br />
+              <br />
+            </div>
+            <div className={styles.smallSection}>
+              <br />
+              DECEASED&nbsp;
+              <br />
+              <br />
+            </div>
+            <div className={styles.secondaryTag}></div>
+            <div className={styles.largeSection}>
+              <br />
+              MORRILLCOLE&nbsp;&nbsp;
+              <br />
+              <br />
+            </div>
+          </RowSpaceBetween>
+          <RowSpaceBetween style={{ position: 'relative' }}>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.absoluteTag}></div>
+          </RowSpaceBetween>
+        </div>
+      </Card>
+    </>
+  );
+};
+
+export default Denabase;
+
+================
+File: reference/components/examples/MessagesInterface.tsx
+================
+import Avatar from '@components/Avatar';
+import ActionButton from '@components/ActionButton';
+import Divider from '@components/Divider';
+import DropdownMenuTrigger from '@components/DropdownMenuTrigger';
+import Indent from '@components/Indent';
+import Input from '@components/Input';
+import Message from '@components/Message';
+import MessageViewer from '@components/MessageViewer';
+import ModalError from '@components/modals/ModalError';
+import Navigation from '@components/Navigation';
+import RowEllipsis from '@components/RowEllipsis';
+import SidebarLayout from '@components/SidebarLayout';
+
+import * as React from 'react';
+
+interface MessagesInterfaceProps extends React.HTMLAttributes<HTMLSpanElement> {}
+
+const ChatPreviewInline = (props) => {
+  return <RowEllipsis style={{ opacity: 0.5, marginBottom: `10px` }}>{props.children}</RowEllipsis>;
+};
+
+const MessagesInterface: React.FC<MessagesInterfaceProps> = () => {
+  return (
+    <div style={{ minWidth: '28ch' }}>
+      <Navigation
+        logo="✶"
+        left={
+          <>
+            <DropdownMenuTrigger
+              items={[
+                {
+                  icon: '⊹',
+                  children: 'Open',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'New Message',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Quick Look',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Close Messages',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Open Conversation in New Window',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Print...',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+              ]}
+            >
+              <ActionButton>FILE</ActionButton>
+            </DropdownMenuTrigger>
+
+            <DropdownMenuTrigger
+              items={[
+                {
+                  icon: '⊹',
+                  children: 'Undo',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Redo',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Cut',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Copy',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Paste',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Paste and Match Style',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Delete',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Select All',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Find...',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Find Next',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Find Previous',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Spelling and Grammar',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Substitutions',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Speech',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Send Message',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Reply to Last Message',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Tapback Last Message',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Edit Last Message',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Autofill',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Start Dictation',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Emoji & Symbols',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+              ]}
+            >
+              <ActionButton>EDIT</ActionButton>
+            </DropdownMenuTrigger>
+            <DropdownMenuTrigger
+              items={[
+                {
+                  icon: '⊹',
+                  children: 'Show Tab Bar',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Show All Tabs',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Make Text Bigger',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Make Text Normal Size',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Make Text Smaller',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'All Messages',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Known Senders',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Unknown Senders',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Unread Messages',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Recently Delete',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Show Sidebar',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Enter Full Screen',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+              ]}
+            >
+              <ActionButton>VIEW</ActionButton>
+            </DropdownMenuTrigger>
+          </>
+        }
+        right={
+          <>
+            <DropdownMenuTrigger
+              items={[
+                {
+                  icon: '⊹',
+                  children: 'Search',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Messages Help',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+              ]}
+            >
+              <ActionButton>HELP</ActionButton>
+            </DropdownMenuTrigger>
+          </>
+        }
+      ></Navigation>
+      <Divider type="DOUBLE" />
+      <SidebarLayout
+        defaultSidebarWidth={12}
+        isShowingHandle={true}
+        sidebar={
+          <>
+            <Avatar>
+              <Indent>
+                Arthur
+                <br />
+                <ChatPreviewInline>No, it has to be more unique</ChatPreviewInline>
+              </Indent>
+            </Avatar>
+            <Avatar>
+              <Indent>
+                Ariadne
+                <br />
+                <ChatPreviewInline>No. Just you.</ChatPreviewInline>
+              </Indent>
+            </Avatar>
+            <Avatar>
+              <Indent>
+                Eames
+                <br />
+                <ChatPreviewInline>dream a little bigger</ChatPreviewInline>
+              </Indent>
+            </Avatar>
+            <Avatar>
+              <Indent>
+                Yusef
+                <br />
+                <ChatPreviewInline>Depends on the dream.</ChatPreviewInline>
+              </Indent>
+            </Avatar>
+            <Avatar>
+              <Indent>
+                Saito
+                <br />
+                <ChatPreviewInline>I bought the airline.</ChatPreviewInline>
+              </Indent>
+            </Avatar>
+          </>
+        }
+      >
+        <Message>Why are they all looking at me?</Message>
+        <MessageViewer>Because my subconscious feels that someone else is creating this world. The more you change things, the quicker the projections start to converge on you.</MessageViewer>
+        <Message>Converge?</Message>
+        <MessageViewer>It's the foreign nature of the dreamer. They attack like white blood cells fighting an infection.</MessageViewer>
+        <Message>They're going to attack us?</Message>
+        <MessageViewer>No. Just you.</MessageViewer>
+        <br />
+        <br />
+        <Input autoComplete="off" isBlink={true} label="Message" name="test_message_interface" />
+      </SidebarLayout>
+    </div>
+  );
+};
+
+export default MessagesInterface;
+
+================
+File: reference/components/examples/UpdatingDataTable.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+import DataTable from '@components/DataTable';
+
+const UpdatingDataTable = (props) => {
+  const [tableData, setTableData] = React.useState(props.data);
+
+  React.useEffect(() => {
+    const interval = setInterval(() => {
+      setTableData((prevData) => {
+        const header = prevData[0];
+        const rows = prevData.slice(1);
+
+        const updatedRows = rows.map((row) => {
+          const currentPrice = parseFloat(row[2].replace('$', ''));
+          const currentHoldings = parseInt(row[3], 10);
+          const priceChangeFactor = 1 + (Math.random() - 0.5) * 0.1;
+          const newPrice = currentPrice * priceChangeFactor;
+          const holdingsChange = Math.floor((Math.random() - 0.5) * 20);
+          const newHoldings = Math.max(1, currentHoldings + holdingsChange);
+
+          return [row[0], row[1], `$${newPrice.toFixed(2)}`, newHoldings.toString()];
+        });
+
+        updatedRows.sort((a, b) => {
+          const priceA = parseFloat(a[2].replace('$', ''));
+          const priceB = parseFloat(b[2].replace('$', ''));
+          return priceB - priceA;
+        });
+
+        return [header, ...updatedRows];
+      });
+    }, 1000);
+
+    return () => clearInterval(interval);
+  }, []);
+
+  return (
+    <>
+      <DataTable data={tableData} />
+    </>
+  );
+};
+
+export default UpdatingDataTable;
+
+================
+File: reference/components/modals/ModalAlert.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalAlert.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalAlert.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import Card from '@components/Card';
+
+interface ModalAlertProps {
+  buttonText?: string | any;
+  message: string;
+}
+
+function ModalAlert({ message, buttonText }: ModalAlertProps) {
+  const { close } = useModals();
+
+  return (
+    <div className={styles.root}>
+      <Card title="ALERT">
+        {message}
+        <br />
+        <br />
+        <Button onClick={() => close()}>{Utilities.isEmpty(buttonText) ? 'Close' : buttonText}</Button>
+      </Card>
+    </div>
+  );
+}
+
+export default ModalAlert;
+
+================
+File: reference/components/modals/ModalCanvasPlatformer.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalCanvasPlatformer.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalCanvasPlatformer.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import CanvasPlatformer from '@components/CanvasPlatformer';
+import Card from '@components/Card';
+
+interface ModalCanvasPlatformerProps {
+  buttonText?: string | any;
+}
+
+function ModalCanvasPlatformer({ buttonText }: ModalCanvasPlatformerProps) {
+  const { close } = useModals();
+
+  return (
+    <div className={styles.root}>
+      <Card title="ALERT">
+        <CanvasPlatformer rows={12} />
+        <br />
+        <br />
+        <Button onClick={() => close()}>{Utilities.isEmpty(buttonText) ? 'Close' : buttonText}</Button>
+      </Card>
+    </div>
+  );
+}
+
+export default ModalCanvasPlatformer;
+
+================
+File: reference/components/modals/ModalCanvasSnake.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalCanvasSnake.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalCanvasSnake.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import CanvasSnake from '@components/CanvasSnake';
+import Card from '@components/Card';
+
+interface ModalCanvasSnakeProps {
+  buttonText?: string | any;
+}
+
+function ModalCanvasSnake({ buttonText }: ModalCanvasSnakeProps) {
+  const { close } = useModals();
+
+  return (
+    <div className={styles.root}>
+      <Card title="CANVAS PLATFORMER">
+        <CanvasSnake rows={12} />
+        <br />
+        <br />
+        <Button onClick={() => close()}>{Utilities.isEmpty(buttonText) ? 'Close' : buttonText}</Button>
+      </Card>
+    </div>
+  );
+}
+
+export default ModalCanvasSnake;
+
+================
+File: reference/components/modals/ModalChess.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalChess.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalChess.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useHotkeys } from '@modules/hotkeys';
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import CardDouble from '@components/CardDouble';
+import Chessboard from '@components/Chessboard';
+
+interface ModalErrorProps {
+  buttonText?: string | any;
+  board: string[][];
+  title?: string;
+}
+
+function ModalChess({ board, buttonText, title }: ModalErrorProps) {
+  const { close } = useModals();
+
+  useHotkeys('enter', () => close());
+
+  return (
+    <div className={styles.root}>
+      <CardDouble title={title} style={{ textAlign: 'center' }}>
+        <Chessboard board={board} />
+        <br />
+        <br />
+        <Button onClick={() => close()}>{Utilities.isEmpty(buttonText) ? 'CLOSE' : buttonText}</Button>
+      </CardDouble>
+    </div>
+  );
+}
+
+export default ModalChess;
+
+================
+File: reference/components/modals/ModalCreateAccount.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalCreateAccount.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalAlert.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import CardDouble from '@components/CardDouble';
+import Checkbox from '@components/Checkbox';
+import Input from '@components/Input';
+import RadioButtonGroup from '@components/RadioButtonGroup';
+
+function ModalCreateAccount() {
+  const { close } = useModals();
+
+  return (
+    <div className={styles.root}>
+      <CardDouble title="NEW ACCOUNT">
+        Create a new MakeBelieve™ account, where anything is possible at your command line in the browser.
+        <br />
+        <br />
+        <RadioButtonGroup
+          defaultValue="modal_developer"
+          options={[
+            { value: 'modal_individual', label: 'I’m using this for personal use.' },
+            { value: 'modal_developer', label: 'I’m building or creating something for work.' },
+            { value: 'modal_company', label: 'We’re using this as a team or organization.' },
+          ]}
+        />
+        <br />
+        <Input autoComplete="off" label="USERNAME" placeholder="Choose a username (e.g., SurfGirl29)" name="modal_username" />
+        <Input autoComplete="off" label="PASSWORD" placeholder="Create a password (8+ characters)" type="password" name="modal_password" />
+        <Input autoComplete="off" label="CONFIRM" placeholder="Type it again" type="password" name="modal_confirm" />
+        <br />
+        <Checkbox name="modal_terms">I agree to the Terms of Service, Data Privacy Policy, and Acceptable Use Guidelines.</Checkbox>
+        <Checkbox name="modal_goodwill">I agree not to use this service for unlawful purposes.</Checkbox>
+        <br />
+        <Button onClick={() => close()}>Create an account</Button>
+      </CardDouble>
+    </div>
+  );
+}
+
+export default ModalCreateAccount;
+
+================
+File: reference/components/modals/ModalError.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalError.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalError.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useHotkeys } from '@modules/hotkeys';
+import { useModals } from '@components/page/ModalContext';
+
+import ActionButton from '@components/ActionButton';
+import Button from '@components/Button';
+import CardDouble from '@components/CardDouble';
+import Grid from '@components/Grid';
+
+interface ModalErrorProps {
+  buttonText?: string | any;
+  message: string | any;
+  title?: string;
+}
+
+// TODO(jimmylee)
+// Enter doesn't always work for some reason.
+function ModalError({ message, buttonText, title }: ModalErrorProps) {
+  const { close } = useModals();
+
+  useHotkeys('enter', () => close());
+
+  return (
+    <div className={styles.root}>
+      <CardDouble title={title}>
+        <br />
+        {message}
+        <Grid>
+          <ul>
+            <li>
+              Press{' '}
+              <ActionButton hotkey="⏎" onClick={() => close()}>
+                ENTER
+              </ActionButton>{' '}
+              to continue.
+            </li>
+          </ul>
+        </Grid>
+      </CardDouble>
+    </div>
+  );
+}
+
+export default ModalError;
+
+================
+File: reference/components/modals/ModalMatrixModes.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalMatrixModes.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalMatrixModes.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import Card from '@components/Card';
+import MatrixLoader from '@components/MatrixLoader';
+
+interface ModalMatrixModesProps {
+  buttonText?: string | any;
+}
+
+function ModalMatrixModes({ buttonText }: ModalMatrixModesProps) {
+  const { close } = useModals();
+
+  return (
+    <div className={styles.root}>
+      <Card title="MATRIX MODES">
+        <Card title="KATAKANA DEFAULT">
+          <MatrixLoader rows={32} mode="katakana" />
+        </Card>
+        <Card title="GREEK LTR">
+          <MatrixLoader direction="left-to-right" rows={8} mode="greek" />
+        </Card>
+        <br />
+        <br />
+        <Button onClick={() => close()}>{Utilities.isEmpty(buttonText) ? 'Close' : buttonText}</Button>
+      </Card>
+    </div>
+  );
+}
+
+export default ModalMatrixModes;
+
+================
+File: reference/components/page/DefaultActionBar.module.scss
+================
+.root {
+  position: fixed;
+  top: 0;
+  left: 2ch;
+  z-index: 1;
+}
+
+================
+File: reference/components/page/DefaultActionBar.tsx
+================
+'use client';
+
+import styles from '@components/page/DefaultActionBar.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { toggleDebugGrid } from '@components/DebugGrid';
+import { useHotkeys } from '@modules/hotkeys';
+
+import ActionBar from '@components/ActionBar';
+import ButtonGroup from '@components/ButtonGroup';
+
+function isElement(target: EventTarget | null): target is Element {
+  return target instanceof Element;
+}
+
+function isHTMLElement(target: EventTarget | null): target is HTMLElement {
+  return target instanceof HTMLElement;
+}
+
+const findFocusableParent = (element: Element | null): Element | null => {
+  while (element) {
+    element = element.parentElement;
+    if (element && Utilities.isFocusableElement(element)) {
+      return element;
+    }
+  }
+  return null;
+};
+
+const findNextFocusableSibling = (element: Element, direction: 'next' | 'previous'): HTMLElement | null => {
+  let sibling = direction === 'next' ? element.nextElementSibling : element.previousElementSibling;
+
+  while (sibling) {
+    if (Utilities.isFocusableElement(sibling)) {
+      return sibling as HTMLElement;
+    }
+
+    const focusableDescendant = Utilities.findFocusableDescendant(sibling, null, direction);
+    if (focusableDescendant) {
+      return focusableDescendant;
+    }
+
+    sibling = direction === 'next' ? sibling.nextElementSibling : sibling.previousElementSibling;
+  }
+
+  return null;
+};
+
+const findNextFocusableAncestor = (element: Element, direction: 'next' | 'previous'): HTMLElement | null => {
+  let ancestor = element.parentElement;
+
+  while (ancestor) {
+    const nextFocusable = findNextFocusableSibling(ancestor, direction);
+    if (nextFocusable) {
+      return nextFocusable;
+    }
+    ancestor = ancestor.parentElement;
+  }
+
+  return null;
+};
+
+const useGlobalNavigationHotkeys = () => {
+  const onHandleSubmit = (event: KeyboardEvent) => {
+    const target = event.target;
+    if (Utilities.isFocusableElement(target)) {
+      event.preventDefault();
+      (target as HTMLElement).click();
+    }
+  };
+
+  const onHandleNextFocus = (event: KeyboardEvent) => {
+    const target = event.target;
+
+    if (Utilities.isFocusableElement(target)) {
+      event.preventDefault();
+
+      const nextFocusable = Utilities.findNextFocusable(target as Element, 'next');
+      if (nextFocusable) {
+        nextFocusable.focus();
+      }
+    }
+  };
+
+  const onHandlePreviousFocus = (event: KeyboardEvent) => {
+    const target = event.target;
+
+    if (Utilities.isFocusableElement(target)) {
+      event.preventDefault();
+
+      const previousFocusable = Utilities.findNextFocusable(target as Element, 'previous');
+      if (previousFocusable) {
+        previousFocusable.focus();
+      }
+    }
+  };
+
+  useHotkeys('ArrowDown', onHandleNextFocus);
+  useHotkeys('ArrowUp', onHandlePreviousFocus);
+  useHotkeys('ArrowRight', onHandleNextFocus);
+  useHotkeys('ArrowLeft', onHandlePreviousFocus);
+  useHotkeys('Enter', onHandleSubmit);
+  useHotkeys(' ', onHandleSubmit);
+};
+
+interface DefaultActionBarProps {
+  items?: {
+    hotkey: string;
+    onClick: () => void;
+    body: React.ReactNode;
+    items?: any;
+  }[];
+}
+
+const DefaultActionBar: React.FC<DefaultActionBarProps> = ({ items = [] }) => {
+  const [isGrid, setGrid] = React.useState(false);
+  useHotkeys('ctrl+g', () => toggleDebugGrid());
+
+  useGlobalNavigationHotkeys();
+
+  return (
+    <div className={styles.root}>
+      <ActionBar
+        items={[
+          {
+            hotkey: '⌃+O',
+            body: 'Fonts',
+            openHotkey: 'ctrl+o',
+            items: [
+              {
+                icon: '⊹',
+                children: 'Commit Mono V143 [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-commit-mono'),
+              },
+              {
+                icon: '⊹',
+                children: 'Departure Mono [MIT]',
+                onClick: () => Utilities.onHandleFontChange('font-use-departure-mono'),
+              },
+              {
+                icon: '⊹',
+                children: 'Fira Code [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-fira-code'),
+              },
+              {
+                icon: '⊹',
+                children: 'Fragment Mono [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-fragment-mono'),
+              },
+              {
+                icon: '⊹',
+                children: 'Geist Mono [OFL] [DEFAULT]',
+                onClick: () => Utilities.onHandleFontChange(''),
+              },
+              {
+                icon: '⊹',
+                children: 'Iosevka Term [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-iosevka-term'),
+              },
+              {
+                icon: '⊹',
+                children: 'JetBrains Mono [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-jet-brains-mono'),
+              },
+              {
+                icon: '⊹',
+                children: 'SFMono Square [FOSS]',
+                onClick: () => Utilities.onHandleFontChange('font-use-sfmono-square'),
+              },
+              {
+                icon: '⊹',
+                children: 'Server Mono 0.0.6 [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-server-mono'),
+              },
+              {
+                icon: '⊹',
+                children: 'TX-02 Berkeley Mono™',
+                onClick: () => Utilities.onHandleFontChange('font-use-berkeley-mono'),
+              },
+            ],
+          },
+          {
+            hotkey: '⌃+T',
+            body: 'Theme',
+            openHotkey: 'ctrl+t',
+            items: [
+              {
+                icon: '⊹',
+                children: 'Refined White [DEFAULT]',
+                onClick: () => Utilities.onHandleThemeChange(''),
+              },
+              {
+                icon: '⊹',
+                children: 'Black Midnight Vapor',
+                onClick: () => Utilities.onHandleThemeChange('theme-dark'),
+              },
+              {
+                icon: '⊹',
+                children: 'U-571 Code Red',
+                onClick: () => Utilities.onHandleThemeChange('theme-black-red'),
+              },
+              {
+                icon: '⊹',
+                children: 'Digital Bioluminescence',
+                onClick: () => Utilities.onHandleThemeChange('theme-black-teal'),
+              },
+              {
+                icon: '⊹',
+                children: 'Operation Safe Blue',
+                onClick: () => Utilities.onHandleThemeChange('theme-blue'),
+              },
+              {
+                icon: '⊹',
+                children: 'Neon Green Garden',
+                onClick: () => Utilities.onHandleThemeChange('theme-green'),
+              },
+              {
+                icon: '⊹',
+                children: 'Kirkland Signature AS/400',
+                onClick: () => Utilities.onHandleThemeChange('theme-black-green'),
+              },
+            ],
+          },
+          {
+            hotkey: '⌃+G',
+            onClick: () => {
+              toggleDebugGrid();
+            },
+            body: 'Grid',
+            selected: false,
+          },
+          ...items,
+        ]}
+      />
+    </div>
+  );
+};
+
+export default DefaultActionBar;
+
+================
+File: reference/components/page/DefaultLayout.module.scss
+================
+.body {
+  width: 100%;
+}
+
+.pixel {
+  height: 1px;
+  left: 0;
+  position: absolute;
+  top: 0;
+  width: 1px;
+}
+
+================
+File: reference/components/page/DefaultLayout.tsx
+================
+import styles from '@components/page/DefaultLayout.module.scss';
+
+import * as React from 'react';
+
+interface DefaultLayoutProps {
+  previewPixelSRC: string;
+  children?: React.ReactNode;
+}
+
+const DefaultLayout: React.FC<DefaultLayoutProps> = ({ previewPixelSRC, children }) => {
+  return (
+    <div className={styles.body}>
+      <img className={styles.pixel} src={previewPixelSRC} alt="" />
+      {children}
+    </div>
+  );
+};
+
+export default DefaultLayout;
+
+================
+File: reference/components/page/ModalContext.tsx
+================
+import * as React from 'react';
+
+export type ModalComponent<P = {}> = React.ComponentType<React.PropsWithoutRef<P>>;
+
+export interface ModalState<P = any> {
+  key: string;
+  component: ModalComponent<P>;
+  props: P;
+}
+
+interface ModalContextType {
+  modalStack: ModalState[];
+  open: <P>(component: ModalComponent<P>, props: P) => string;
+  close: (key?: string) => void;
+}
+
+const ModalContext = React.createContext<ModalContextType | null>(null);
+
+export const ModalProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
+  const [modalStack, setModalStack] = React.useState<ModalState<any>[]>([]);
+
+  const open = <P,>(component: ModalComponent<P>, props: P): string => {
+    const key = `modal-${Date.now()}-${Math.random()}`;
+
+    const newModal: ModalState<P> = { key, component, props };
+
+    setModalStack((prev) => [...prev, newModal as ModalState<any>]);
+
+    return key;
+  };
+
+  const close = (key?: string): void => {
+    setModalStack((prev) =>
+      key ? prev.filter((modal) => modal.key !== key) : prev.slice(0, -1)
+    );
+  };
+
+  return (
+    <ModalContext.Provider value={{ modalStack, open, close }}>
+      {children}
+    </ModalContext.Provider>
+  );
+};
+
+export const useModals = (): ModalContextType => {
+  const context = React.useContext(ModalContext);
+  if (!context) {
+    throw new Error('useModals must be used within a ModalProvider and use client');
+  }
+  return context;
+};
+
+================
+File: reference/components/page/root.module.scss
+================
+.row {
+  border-bottom: 1px solid var(--theme-border);
+}
+
+.column {
+  max-width: 768px;
+  padding: 0 24px 0 24px;
+  margin: 0 auto 0 auto;
+  display: block;
+  border-left: 1px solid var(--theme-border);
+  border-right: 1px solid var(--theme-border);
+}
+
+.video {
+  display: block;
+  width: 100%;
+}
+
+.h1 {
+  display: block;
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+.p {
+  display: block;
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+.aside {
+  display: block;
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+.h2 {
+  display: block;
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+.image {
+  display: block;
+  width: 100%;
+}
+
+================
+File: reference/components/svg/InternetDevelopmentLogo.tsx
+================
+export default function IntDevLogo(props) {
+  return (
+    <svg viewBox="0 0 494.25 80.29" fill="currentColor" aria-hidden {...props}>
+      <path d="m57.8,29.75h0c0,5.34,4.33,9.67,9.67,9.67h38.11c5.34,0,9.67,4.33,9.67,9.67v.54c0,5.34-4.33,9.67-9.67,9.67h-38.11c-5.34,0-9.67,4.33-9.67,9.67v.29c0,5.34-4.33,9.67-9.67,9.67H9.67c-5.34,0-9.67-4.33-9.67-9.67v-.54c0-5.34,4.33-9.67,9.67-9.67h38.11c5.34,0,9.67-4.33,9.67-9.67v-.02c0-5.34-4.33-9.67-9.67-9.67H9.67c-5.34,0-9.67-4.33-9.67-9.67v-.54c0-5.34,4.33-9.67,9.67-9.67h38.11c5.34,0,9.67-4.33,9.67-9.67v-.27c0-5.34,4.33-9.67,9.67-9.67h38.45c5.34,0,9.67,4.33,9.67,9.67v.55c0,5.34-4.33,9.67-9.67,9.67h-38.11c-5.34,0-9.67,4.33-9.67,9.67Z" />
+      <g>
+        <path d="m136.93,75.57l7.21-2.12V5.34l-7.21-2.02V0h26.69v3.32l-7,2.02v68.11l7,2.12v3.37h-26.69v-3.37Z" />
+        <path d="m182.75,14.67v58.88l7.26,2.02v3.37h-19.54v-3.37l7.31-2.02V5.24l-7.31-1.92V0h20.63l31.88,51.37V5.24l-7.31-1.92V0h19.59v3.32l-7.36,1.92v75.06h-4.72L182.75,14.67Z" />
+        <path d="m253.86,75.57l9.59-2.18V5.13h-14.25c-3.52,5.7-5.96,12.44-7.57,18.09h-2.8l2.95-23.22h55.57l3.01,23.22h-2.8c-1.66-5.65-3.89-12.39-7.41-18.09h-14.2v68.27l9.54,2.18v3.37h-31.62v-3.37Z" />
+        <path d="m304.76,75.47l7.1-1.97V5.24l-7.1-1.92V0h21.87c13.94,0,21.98,1.92,28.35,7.46,7.77,6.74,12.7,18.14,12.7,31.98s-5.23,26.75-13.32,33.43c-5.29,4.35-11.04,6.06-20.01,6.06h-29.6v-3.47Zm42.97-8.92c3.89-5.8,5.75-15.08,5.75-27.47s-1.87-20.73-5.81-26.49c-3.52-5.13-8.6-7.41-16.22-7.41h-7.1v62.51c0,4.46,2.23,6.17,8.4,6.17,6.89,0,11.56-2.23,14.98-7.31Z" />
+        <path d="m374.05,75.57l7.05-2.02V5.24l-7.05-1.92V0h48.93l1.5,22.55h-3.01c-1.4-5.55-3.42-11.77-6.22-17.31h-21.67v29.44h11.61c1.76-3.94,2.75-7.98,3.42-11.82h3.01v28.72h-3.01c-.62-3.89-1.76-7.93-3.42-11.77h-11.61v33.8h21.2c3.47-6.22,5.39-12.44,7.36-18.66h3.78l-3.37,24h-48.52v-3.37Z" />
+        <path d="m436.92,9.59c-1.5-4.61-2.9-5.75-8.66-6.27V0h31.72v3.32c-8.03.73-9.12,1.71-7.67,6.79l12.75,44.89.78.05,11.77-40.48c2.07-7.36.36-9.8-8.09-11.25V0h24.73v3.32c-7.77,1.55-9.17,3.32-11.61,11.4l-19.85,65.31h-3.21l-22.65-70.44Z" />
+      </g>
+    </svg>
+  );
+}
+
+================
+File: reference/components/svg/InternetDevelopmentLogoMark.tsx
+================
+export default function LogoMark(props) {
+  return (
+    <svg viewBox="0 0 116.29 80.29" fill="currentColor" aria-hidden {...props}>
+      <path d="m57.8,29.75h0c0,5.34,4.33,9.67,9.67,9.67h38.11c5.34,0,9.67,4.33,9.67,9.67v.54c0,5.34-4.33,9.67-9.67,9.67h-38.11c-5.34,0-9.67,4.33-9.67,9.67v.29c0,5.34-4.33,9.67-9.67,9.67H9.67c-5.34,0-9.67-4.33-9.67-9.67v-.54c0-5.34,4.33-9.67,9.67-9.67h38.11c5.34,0,9.67-4.33,9.67-9.67v-.02c0-5.34-4.33-9.67-9.67-9.67H9.67c-5.34,0-9.67-4.33-9.67-9.67v-.54c0-5.34,4.33-9.67,9.67-9.67h38.11c5.34,0,9.67-4.33,9.67-9.67v-.27c0-5.34,4.33-9.67,9.67-9.67h38.45c5.34,0,9.67,4.33,9.67,9.67v.55c0,5.34-4.33,9.67-9.67,9.67h-38.11c-5.34,0-9.67,4.33-9.67,9.67Z" />
+    </svg>
+  );
+}
+
+================
+File: reference/components/svg/Sphere.tsx
+================
+import * as React from 'react';
+
+export default function Sphere(props: { size?: number; segments?: number; style?: React.CSSProperties }) {
+  const size = props.size || 500;
+  const segments = props.segments || 6;
+  const radius = size * 0.4;
+
+  const generateSpherePoints = () => {
+    const points: { x: number; y: number }[][] = [];
+    for (let lat = 0; lat <= segments; lat++) {
+      const row: { x: number; y: number }[] = [];
+      const phi = (lat * Math.PI) / segments;
+      for (let lon = 0; lon <= segments; lon++) {
+        const theta = (lon * 2 * Math.PI) / segments;
+        const x = radius * Math.sin(phi) * Math.cos(theta);
+        const y = radius * Math.cos(phi);
+        const z = radius * Math.sin(phi) * Math.sin(theta);
+        const scale = 1 + z / (radius * 4);
+        row.push({
+          x: size / 2 + x * scale,
+          y: size / 2 + y * scale,
+        });
+      }
+      points.push(row);
+    }
+    return points;
+  };
+
+  const createPaths = () => {
+    const spherePoints = generateSpherePoints();
+    const paths: string[] = [];
+    for (let lat = 0; lat <= segments; lat++) {
+      let pathString = `M ${spherePoints[lat][0].x},${spherePoints[lat][0].y}`;
+      for (let lon = 1; lon <= segments; lon++) {
+        pathString += ` L ${spherePoints[lat][lon].x},${spherePoints[lat][lon].y}`;
+      }
+      paths.push(pathString);
+    }
+    for (let lon = 0; lon <= segments; lon++) {
+      let pathString = `M ${spherePoints[0][lon].x},${spherePoints[0][lon].y}`;
+      for (let lat = 1; lat <= segments; lat++) {
+        pathString += ` L ${spherePoints[lat][lon].x},${spherePoints[lat][lon].y}`;
+      }
+      paths.push(pathString);
+    }
+    return paths;
+  };
+
+  return (
+    <svg viewBox={`0 0 ${size} ${size}`} xmlns="http://www.w3.org/2000/svg" style={props.style}>
+      <g fill="none" stroke="currentColor" strokeWidth="1">
+        {createPaths().map((path, index) => (
+          <path key={index} d={path} vectorEffect="non-scaling-stroke" />
+        ))}
+      </g>
+    </svg>
+  );
+}
+
+================
+File: reference/components/Accordion.module.scss
+================
+.flex {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+  padding: calc(var(--theme-line-height-base) * 1rem) 0 calc(var(--theme-line-height-base) * 1rem) 0;
+
+  background: var(--theme-border-subdued);
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.icon {
+  flex-shrink: 0;
+  user-select: none;
+  cursor: pointer;
+  font-size: var(--font-size);
+  align-self: stretch;
+}
+
+.content {
+  min-width: 10%;
+  width: 100%;
+  user-select: none;
+  cursor: pointer;
+  transition: 200ms ease all;
+  transition-property: padding;
+  padding-left: 0ch;
+}
+
+.active {
+  .content {
+    padding-left: 1ch;
+  }
+
+  .icon {
+  }
+}
+
+================
+File: reference/components/Accordion.tsx
+================
+'use client';
+
+import styles from '@components/Accordion.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import Row from '@components/Row';
+
+interface AccordionProps {
+  defaultValue?: boolean;
+  title: string;
+  children?: React.ReactNode;
+}
+
+const Accordion: React.FC<AccordionProps> = ({ defaultValue = false, title, children }) => {
+  const [show, setShow] = React.useState<boolean>(defaultValue);
+  const accordionRef = React.useRef<HTMLDivElement | null>(null);
+
+  const toggleShow = (): void => {
+    setShow((prevShow) => !prevShow);
+  };
+
+  return (
+    <>
+      <Row ref={accordionRef} tabIndex={0} role="button" onClick={toggleShow} aria-expanded={show}>
+        <div className={Utilities.classNames(styles.flex, show ? styles.active : undefined)}>
+          <span className={styles.icon}>{show ? '▾' : '▸'}</span>
+          <span className={styles.content}>{title}</span>
+        </div>
+      </Row>
+      {show && <Row style={{ paddingLeft: '2ch' }}>{children}</Row>}
+    </>
+  );
+};
+
+export default Accordion;
+
+================
+File: reference/components/ActionBar.module.scss
+================
+.root {
+  background: var(--theme-background);
+  box-shadow: inset 0 0 0 1px var(--theme-border);
+}
+
+================
+File: reference/components/ActionBar.tsx
+================
+import styles from '@components/ActionBar.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import ButtonGroup from '@components/ButtonGroup';
+
+interface ActionBarItem {
+  hotkey?: string;
+  onClick?: () => void;
+  openHotkey?: string;
+  selected?: boolean;
+  body: React.ReactNode;
+  items?: any;
+}
+
+interface ActionBarProps {
+  items: ActionBarItem[];
+}
+
+const ActionBar: React.FC<ActionBarProps> = ({ items }) => {
+  return (
+    <div className={styles.root}>
+      <ButtonGroup items={items} />
+    </div>
+  );
+};
+
+export default ActionBar;
+
+================
+File: reference/components/ActionButton.module.scss
+================
+.hotkey {
+  background: var(--theme-button-foreground);
+  color: var(--theme-text);
+  cursor: pointer;
+  flex-shrink: 0;
+  font-weight: 400;
+  padding: 0 1ch 0 1ch;
+  text-indent: 0ch;
+  user-select: none;
+}
+
+.content {
+  background: var(--theme-button-background);
+  box-shadow: inset 0 0 0 2px var(--theme-button-foreground);
+  cursor: pointer;
+  flex-shrink: 0;
+  font-weight: 400;
+  padding: 0 1ch 0 1ch;
+  text-indent: 0ch;
+  text-transform: uppercase;
+  user-select: none;
+}
+
+.root {
+  display: inline-flex;
+  align-items: center;
+  justify-content: space-between;
+  cursor: pointer;
+  outline: 0;
+  border: 0;
+  margin: 0;
+  padding: 0;
+  box-sizing: border-box;
+  font-family: var(--font-family-mono);
+  font-size: var(--font-size);
+  flex-shrink: 0;
+
+  &:hover .hotkey {
+    background: var(--theme-focused-foreground);
+  }
+
+  &:hover .content {
+    box-shadow: inset 0 0 0 2px var(--theme-focused-foreground);
+  }
+
+  &:focus .hotkey {
+    background: var(--theme-focused-foreground);
+  }
+
+  &:focus .content {
+    box-shadow: inset 0 0 0 2px var(--theme-focused-foreground);
+  }
+}
+
+.selected {
+  .content {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/ActionButton.tsx
+================
+import styles from '@components/ActionButton.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface ActionButtonProps {
+  onClick?: () => void;
+  hotkey?: any;
+  children?: React.ReactNode;
+  style?: any;
+  rootStyle?: any;
+  isSelected?: boolean;
+}
+
+const ActionButton = React.forwardRef<HTMLDivElement, ActionButtonProps>(({ onClick, hotkey, children, style, rootStyle, isSelected }, ref) => {
+  return (
+    <div className={Utilities.classNames(styles.root, isSelected ? styles.selected : null)} style={rootStyle} onClick={onClick} tabIndex={0} ref={ref} role="button">
+      {Utilities.isEmpty(hotkey) ? null : <span className={styles.hotkey}>{hotkey}</span>}
+      <span className={styles.content} style={style}>
+        {children}
+      </span>
+    </div>
+  );
+});
+
+ActionButton.displayName = 'ActionButton';
+
+export default ActionButton;
+
+================
+File: reference/components/ActionListItem.module.scss
+================
+.item {
+  align-items: flex-start;
+  background: transparent;
+  color: var(--theme-text);
+  cursor: pointer;
+  display: flex;
+  justify-content: space-between;
+  outline: 0;
+  border: 0;
+  text-decoration: none;
+
+  &:visited {
+    background: transparent;
+    color: var(--theme-text);
+  }
+
+  &:hover {
+    background: transparent;
+    color: var(--theme-text);
+  }
+
+  &:hover .icon {
+    background: var(--theme-focused-foreground);
+  }
+
+  &:focus .icon {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.icon {
+  align-items: center;
+  background: var(--theme-button-foreground);
+  display: inline-flex;
+  flex-shrink: 0;
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  justify-content: center;
+  width: 3ch;
+  user-select: none;
+}
+
+.text {
+  align-items: center;
+  align-self: stretch;
+  background: var(--theme-button-background);
+  display: inline-flex;
+  justify-content: flex-start;
+  min-width: 10%;
+  padding: 0 1ch 0 1ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/ActionListItem.tsx
+================
+import styles from '@components/ActionListItem.module.scss';
+
+import * as React from 'react';
+
+interface ActionListItemProps {
+  style?: React.CSSProperties;
+  icon?: React.ReactNode;
+  children?: React.ReactNode;
+  href?: string;
+  target?: string;
+  onClick?: React.MouseEventHandler<HTMLDivElement | HTMLAnchorElement>;
+}
+
+const ActionListItem: React.FC<ActionListItemProps> = (props) => {
+  const { href, target, onClick, children, icon, style } = props;
+
+  if (href) {
+    return (
+      <a className={styles.item} href={href} target={target} style={style} tabIndex={0} role="link">
+        <figure className={styles.icon}>{icon}</figure>
+        <span className={styles.text}>{children}</span>
+      </a>
+    );
+  }
+
+  return (
+    <div className={styles.item} onClick={onClick} style={style} tabIndex={0} role="button">
+      <figure className={styles.icon}>{icon}</figure>
+      <span className={styles.text}>{children}</span>
+    </div>
+  );
+};
+
+export default ActionListItem;
+
+================
+File: reference/components/AlertBanner.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border);
+  box-shadow: 1ch 1ch 0 0 var(--theme-border-subdued);
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  font-weight: 400;
+}
+
+================
+File: reference/components/AlertBanner.tsx
+================
+import styles from '@components/AlertBanner.module.scss';
+
+import * as React from 'react';
+
+interface AlertBannerProps {
+  style?: any;
+  children?: any;
+}
+
+const AlertBanner: React.FC<AlertBannerProps> = ({ style: propStyle, ...rest }) => {
+  let style: React.CSSProperties = { ...propStyle };
+
+  return <div className={styles.root} {...rest} style={style} />;
+};
+
+export default AlertBanner;
+
+================
+File: reference/components/Avatar.module.scss
+================
+.parent {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+}
+
+.placeholder {
+  background: var(--theme-border);
+  display: inline-block;
+  width: 4ch;
+  height: calc(var(--font-size) * var(--theme-line-height-base) * 2);
+  vertical-align: bottom;
+  flex-shrink: 0;
+  position: relative;
+
+  &:hover {
+    &::before {
+      content: '';
+      top: 0;
+      left: 0;
+      right: 0;
+      bottom: 0;
+      position: absolute;
+      pointer-events: none;
+      opacity: 0.5;
+      background: var(--theme-focused-foreground);
+    }
+  }
+}
+
+.root {
+  background: unset;
+  background-size: cover;
+  background-position: 50% 50%;
+  background-repeat: no-repeat;
+  display: inline-block;
+  width: 4ch;
+  height: calc(var(--font-size) * var(--theme-line-height-base) * 2);
+  vertical-align: bottom;
+  flex-shrink: 0;
+  position: relative;
+
+  &:hover {
+    background: unset;
+    background-size: cover;
+    background-position: 50% 50%;
+    background-repeat: no-repeat;
+    &::before {
+      content: '';
+      top: 0;
+      left: 0;
+      right: 0;
+      bottom: 0;
+      position: absolute;
+      pointer-events: none;
+      opacity: 0.5;
+      background: var(--theme-focused-foreground);
+    }
+  }
+}
+
+a {
+  &.root {
+    background: unset;
+    background-size: cover;
+    background-position: 50% 50%;
+    background-repeat: no-repeat;
+    display: inline-block;
+    width: 4ch;
+    height: calc(var(--font-size) * var(--theme-line-height-base) * 2);
+    vertical-align: bottom;
+    flex-shrink: 0;
+    position: relative;
+
+    &:hover {
+      background: unset;
+      background-size: cover;
+      background-position: 50% 50%;
+      background-repeat: no-repeat;
+      &::before {
+        content: '';
+        top: 0;
+        left: 0;
+        right: 0;
+        bottom: 0;
+        position: absolute;
+        pointer-events: none;
+        opacity: 0.5;
+        background: var(--theme-focused-foreground);
+      }
+    }
+
+    &:focus {
+      background: unset;
+      background-size: cover;
+      background-position: 50% 50%;
+      background-repeat: no-repeat;
+      outline: 0;
+
+      &::before {
+        content: '';
+        top: 0;
+        left: 0;
+        right: 0;
+        bottom: 0;
+        position: absolute;
+        pointer-events: none;
+        opacity: 0.5;
+        background: var(--theme-focused-foreground);
+      }
+    }
+  }
+}
+
+.right {
+  min-width: 10%;
+  width: 100%;
+  background: var(--theme-foreground);
+}
+
+================
+File: reference/components/Avatar.tsx
+================
+import styles from '@components/Avatar.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface AvatarProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'style' | 'className' | 'children'> {
+  src?: string;
+  href?: string;
+  target?: string;
+  style?: React.CSSProperties;
+  children?: React.ReactNode;
+}
+
+const Avatar: React.FC<AvatarProps> = (props) => {
+  const { src, style: propStyle, href, target, children, ...rest } = props;
+
+  const backgroundStyle = src ? { backgroundImage: `url(${src})` } : {};
+
+  const combinedStyle = { ...propStyle, ...backgroundStyle };
+
+  let avatarElement: React.ReactElement;
+
+  if (href) {
+    avatarElement = <a className={Utilities.classNames(src ? styles.root : styles.placeholder)} style={combinedStyle} href={href} target={target} tabIndex={0} role="link" />;
+  } else {
+    avatarElement = <figure className={Utilities.classNames(src ? styles.root : styles.placeholder)} style={combinedStyle} />;
+  }
+
+  if (!children) {
+    return avatarElement;
+  }
+
+  return (
+    <div className={styles.parent} {...rest}>
+      {avatarElement}
+      <span className={styles.right}>{children}</span>
+    </div>
+  );
+};
+
+export default Avatar;
+
+================
+File: reference/components/Badge.module.scss
+================
+.root {
+  display: inline-block;
+  vertical-align: top;
+  text-align: center;
+  font-weight: 400;
+  margin: 0;
+  outline: 0;
+  border: 0;
+  font-family: var(--font-family-mono);
+  min-height: calc(var(--theme-line-height-base) * var(--font-size));
+  text-transform: uppercase;
+  transition: 200ms ease all;
+  background: var(--theme-border);
+  padding: 0 1ch 0 1ch;
+}
+
+================
+File: reference/components/Badge.tsx
+================
+'use client';
+
+import styles from '@components/Badge.module.scss';
+
+import * as React from 'react';
+
+interface BadgeProps extends React.HTMLAttributes<HTMLSpanElement> {
+  children?: React.ReactNode;
+}
+
+const Badge: React.FC<BadgeProps> = ({ children, ...rest }) => {
+  return (
+    <span className={styles.root} {...rest}>
+      {children}
+    </span>
+  );
+};
+
+export default Badge;
+
+================
+File: reference/components/BarLoader.module.scss
+================
+.root {
+  background: var(--theme-border);
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  white-space: nowrap;
+  text-align: left;
+  vertical-align: bottom;
+  display: block;
+}
+
+.bar {
+  background: linear-gradient(to right, transparent, var(--theme-text));
+  height: 100%;
+  width: 0%;
+  transition: width 0.1s linear;
+}
+
+================
+File: reference/components/BarLoader.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+import styles from '@components/BarLoader.module.scss';
+
+interface BarLoaderProps {
+  intervalRate?: number;
+  progress?: number;
+}
+
+const BarLoader: React.FC<BarLoaderProps> = ({ intervalRate, progress }) => {
+  const [currentProgress, setCurrentProgress] = React.useState<number>(progress || 0);
+
+  React.useEffect(() => {
+    if (progress !== undefined) {
+      setCurrentProgress(progress);
+      return;
+    }
+
+    if (!intervalRate) return;
+
+    const interval = setInterval(() => {
+      setCurrentProgress((prev) => (prev + 10) % 110);
+    }, intervalRate);
+
+    return () => clearInterval(interval);
+  }, [intervalRate, progress]);
+
+  return (
+    <div className={styles.root}>
+      <div
+        className={styles.bar}
+        style={{
+          width: `${Math.min(currentProgress, 100)}%`,
+        }}
+      ></div>
+    </div>
+  );
+};
+
+export default BarLoader;
+
+================
+File: reference/components/BarProgress.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border-subdued);
+  white-space: nowrap;
+  text-align: left;
+  vertical-align: bottom;
+  overflow: hidden;
+  position: relative;
+}
+
+.measure {
+  visibility: hidden;
+  position: absolute;
+  pointer-events: none;
+}
+
+================
+File: reference/components/BarProgress.tsx
+================
+'use client';
+
+import styles from '@components/BarProgress.module.scss';
+
+import * as React from 'react';
+
+interface BarProgressProps {
+  intervalRate?: number;
+  progress?: number;
+  fillChar?: string;
+}
+
+const BarProgress: React.FC<BarProgressProps> = ({ intervalRate, progress, fillChar = '░' }) => {
+  const [currentProgress, setCurrentProgress] = React.useState(progress ?? 0);
+  const [containerWidth, setContainerWidth] = React.useState(0);
+  const [charWidth, setCharWidth] = React.useState(0);
+
+  const containerRef = React.useRef<HTMLDivElement>(null);
+  const measureRef = React.useRef<HTMLSpanElement>(null);
+
+  React.useEffect(() => {
+    if (typeof progress === 'number') {
+      setCurrentProgress(progress);
+      return;
+    }
+    if (!intervalRate) return;
+    const interval = setInterval(() => {
+      setCurrentProgress((prev) => (prev + 10) % 110);
+    }, intervalRate);
+    return () => clearInterval(interval);
+  }, [intervalRate, progress]);
+
+  React.useLayoutEffect(() => {
+    if (!measureRef.current) return;
+    const rect = measureRef.current.getBoundingClientRect();
+    if (rect.width > 0) {
+      setCharWidth(rect.width);
+    } else {
+      requestAnimationFrame(() => {
+        const retryRect = measureRef.current?.getBoundingClientRect();
+        if (retryRect && retryRect.width > 0) {
+          setCharWidth(retryRect.width);
+        }
+      });
+    }
+  }, [fillChar]);
+
+  React.useEffect(() => {
+    if (!containerRef.current) return;
+    const observer = new ResizeObserver((entries) => {
+      for (const entry of entries) {
+        const { width } = entry.contentRect;
+        setContainerWidth(width);
+      }
+    });
+    observer.observe(containerRef.current);
+    return () => observer.disconnect();
+  }, []);
+
+  const cappedProgress = Math.min(currentProgress, 100);
+
+  let maxChars = 10;
+  if (charWidth > 0 && containerWidth > 0) {
+    maxChars = Math.max(1, Math.floor(containerWidth / charWidth));
+  }
+
+  const filledChars = Math.round((cappedProgress / 100) * maxChars);
+  const barStr = fillChar.repeat(filledChars);
+
+  return (
+    <div className={styles.root} ref={containerRef} aria-valuenow={cappedProgress} aria-valuemin={0} aria-valuemax={100} role="progressbar">
+      <span ref={measureRef} className={styles.measure}>
+        {fillChar}
+      </span>
+      {barStr}
+    </div>
+  );
+};
+
+export default BarProgress;
+
+================
+File: reference/components/Block.module.scss
+================
+.block {
+  display: inline-block;
+  width: 1ch;
+  background: var(--theme-text);
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  vertical-align: bottom;
+  flex-shrink: 0;
+}
+
+================
+File: reference/components/Block.tsx
+================
+import styles from '@components/Block.module.scss';
+
+import * as React from 'react';
+
+interface BlockProps extends React.HTMLAttributes<HTMLSpanElement> {
+  children?: React.ReactNode;
+}
+
+const Block: React.FC<BlockProps> = ({ children, ...rest }) => {
+  return (
+    <span className={styles.block} {...rest}>
+      {children}
+    </span>
+  );
+};
+
+export default Block;
+
+================
+File: reference/components/BlockLoader.module.scss
+================
+.root {
+  display: inline-block;
+  width: 1ch;
+  color: inherit;
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  vertical-align: bottom;
+}
+
+================
+File: reference/components/BlockLoader.tsx
+================
+'use client';
+
+import styles from '@components/BlockLoader.module.scss';
+
+import * as React from 'react';
+
+const SEQUENCES = [
+  ['⠁', '⠂', '⠄', '⡀', '⢀', '⠠', '⠐', '⠈'],
+  ['⣾', '⣽', '⣻', '⢿', '⡿', '⣟', '⣯', '⣷'],
+  ['▖', '▘', '▝', '▗'],
+  ['▁', '▂', '▃', '▄', '▅', '▆', '▇', '█', '▇', '▆', '▅', '▄', '▃', '▁'],
+  ['▉', '▊', '▋', '▌', '▍', '▎', '▏', '▎', '▍', '▌', '▋', '▊', '▉'],
+  ['←', '↖', '↑', '↗', '→', '↘', '↓', '↙'],
+  ['┤', '┘', '┴', '└', '├', '┌', '┬', '┐'],
+  ['◢', '◣', '◤', '◥'],
+  ['◰', '◳', '◲', '◱'],
+  ['◴', '◷', '◶', '◵'],
+  ['◐', '◓', '◑', '◒'],
+];
+
+interface BlockLoaderProps extends Omit<React.HTMLAttributes<HTMLSpanElement>, 'children'> {
+  mode?: number;
+}
+
+const BlockLoader: React.FC<BlockLoaderProps> = ({ mode = 0 }) => {
+  if (!SEQUENCES[mode]) {
+    return <span className={styles.block}>�</span>;
+  }
+
+  const [index, setIndex] = React.useState(0);
+  const intervalRef = React.useRef<number | null>(null);
+  const indexLength = SEQUENCES[mode].length;
+
+  React.useEffect(() => {
+    if (intervalRef.current) {
+      clearInterval(intervalRef.current);
+    }
+
+    intervalRef.current = window.setInterval(() => {
+      setIndex((prevIndex) => (prevIndex + 1) % indexLength);
+    }, 100);
+
+    return () => {
+      if (intervalRef.current) {
+        clearInterval(intervalRef.current);
+      }
+    };
+  }, [indexLength]);
+
+  return <span className={styles.root}>{SEQUENCES[mode][index]}</span>;
+};
+
+export default BlockLoader;
+
+================
+File: reference/components/BreadCrumbs.module.scss
+================
+.root {
+  display: inline-block;
+}
+
+.line {
+  display: inline-block;
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+}
+
+.link {
+  display: inline-block;
+  color: var(--theme-text);
+  outline: 0;
+  border: 0;
+  text-decoration: none;
+  background: var(--theme-border);
+
+  &:hover {
+    color: var(--theme-text);
+    background: var(--theme-focused-foreground);
+  }
+  
+  &:visited {
+    color: var(--theme-text);
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.symbol {
+  min-width: 1ch;
+  display: inline-block;
+  margin: 0 1ch 0 1ch;
+}
+
+================
+File: reference/components/BreadCrumbs.tsx
+================
+import styles from '@components/BreadCrumbs.module.scss';
+
+import * as React from 'react';
+
+interface BreadCrumbsItem {
+  url?: string;
+  name: string;
+}
+
+interface BreadCrumbsProps {
+  items: BreadCrumbsItem[];
+}
+
+const BreadCrumbs: React.FC<BreadCrumbsProps> = ({ items }) => {
+  return (
+    <nav aria-label="breadcrumb" className={styles.root}>
+      {items.map((item, index) => {
+        const linkElement = (
+          <a className={styles.link} href={item.url} target="_blank" tabIndex={0} role="link">
+            {item.name}
+          </a>
+        );
+
+        return (
+          <span className={styles.line} key={index}>
+            {index === items.length - 1 ? <span>{linkElement}</span> : linkElement}
+            {index < items.length - 1 && <span className={styles.symbol}> ❯ </span>}
+          </span>
+        );
+      })}
+    </nav>
+  );
+};
+
+export default BreadCrumbs;
+
+================
+File: reference/components/Button.module.scss
+================
+.root {
+  vertical-align: top;
+  display: inline-block;
+  font-weight: 400;
+  text-align: center;
+  margin: 0;
+  outline: 0;
+  border: 0;
+  font-family: var(--font-family-mono);
+  width: 100%;
+  font-size: var(--font-size);
+  line-height: calc(var(--theme-line-height-base) * 2em);
+  min-height: calc(var(--theme-line-height-base) * (var(--font-size) * 2));
+  padding: 0 2ch 0 2ch;
+  text-transform: uppercase;
+  letter-spacing: 1px;
+  transition: 200ms ease all;
+}
+
+.primary {
+  background: var(--theme-button);
+  color: var(--theme-button-text);
+  cursor: pointer;
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.secondary {
+  background: var(--theme-background);
+  color: var(--theme-text);
+  box-shadow: inset 0 0 0 1px var(--theme-border);
+  cursor: pointer;
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+    box-shadow: inset 0 0 0 1px transparent;
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    box-shadow: inset 0 0 0 1px transparent;
+  }
+}
+
+.disabled {
+  background: var(--theme-button-background);
+  color: var(--theme-button-foreground);
+  cursor: not-allowed;
+}
+
+================
+File: reference/components/Button.tsx
+================
+'use client';
+
+import styles from '@components/Button.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
+  theme?: 'PRIMARY' | 'SECONDARY';
+  isDisabled?: boolean;
+  children?: React.ReactNode;
+}
+
+const Button: React.FC<ButtonProps> = ({ theme = 'PRIMARY', isDisabled, children, ...rest }) => {
+  let classNames = Utilities.classNames(styles.root, styles.primary);
+
+  if (theme === 'SECONDARY') {
+    classNames = Utilities.classNames(styles.root, styles.secondary);
+  }
+
+  if (isDisabled) {
+    classNames = Utilities.classNames(styles.root, styles.disabled);
+
+    return <div className={classNames}>{children}</div>;
+  }
+
+  return (
+    <button className={classNames} role="button" tabIndex={0} disabled={isDisabled} {...rest}>
+      {children}
+    </button>
+  );
+};
+
+export default Button;
+
+================
+File: reference/components/ButtonGroup.module.scss
+================
+.root {
+}
+
+.full {
+  display: grid;
+  grid-template-columns: repeat(auto-fit, minmax(60px, 1fr));
+  white-space: nowrap;
+}
+
+================
+File: reference/components/ButtonGroup.tsx
+================
+'use client';
+
+import styles from '@components/ButtonGroup.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import ActionButton from '@components/ActionButton';
+import DropdownMenuTrigger from '@components/DropdownMenuTrigger';
+
+const ButtonGroup = (props) => {
+  if (!props.items) {
+    return null;
+  }
+
+  return (
+    <div className={Utilities.classNames(styles.root, props.isFull ? styles.full : null)}>
+      {props.items.map((each) => {
+        if (each.items) {
+          return (
+            <DropdownMenuTrigger key={each.body} items={each.items} hotkey={each.openHotkey}>
+              <ActionButton hotkey={each.hotkey} isSelected={each.selected}>
+                {each.body}
+              </ActionButton>
+            </DropdownMenuTrigger>
+          );
+        }
+
+        return (
+          <ActionButton key={each.body} onClick={each.onClick} hotkey={each.hotkey} isSelected={each.selected}>
+            {each.body}
+          </ActionButton>
+        );
+      })}
+    </div>
+  );
+};
+
+export default ButtonGroup;
+
+================
+File: reference/components/Canvas.module.scss
+================
+.canvas {
+  grid-row-start: 1;
+  grid-column-start: 1;
+  margin: 0;
+  padding: 0;
+  width: 100%;
+  min-height: 100%;
+  max-height: 288px;
+}
+
+================
+File: reference/components/Canvas.tsx
+================
+'use client';
+
+import styles from '@components/Canvas.module.scss';
+
+import * as React from 'react';
+
+type WebGLContextResult = {
+  gl: WebGLRenderingContext | WebGL2RenderingContext;
+  ext: {
+    internalFormat: number;
+    internalFormatRG: number;
+    formatRG: number;
+    texType: number;
+  };
+  support_linear_float: boolean | null;
+};
+
+var config = {
+  TEXTURE_DOWNSAMPLE: 1,
+  DENSITY_DISSIPATION: 0.991,
+  VELOCITY_DISSIPATION: 0.9992,
+  PRESSURE_DISSIPATION: 0.8,
+  PRESSURE_ITERATIONS: 16,
+  CURL: 12,
+  SPLAT_RADIUS: 0.12,
+  SPEED: 0.01,
+};
+
+export default function BlueCanvasComponent(props) {
+  const canvasRef = React.useRef<HTMLCanvasElement>(null);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    canvas.width = canvas.clientWidth;
+    canvas.height = canvas.clientHeight;
+
+    let splatStack: any[] = [];
+
+    const { gl, ext, support_linear_float } = getWebGLContext(canvas);
+
+    function getWebGLContext(canvas: HTMLCanvasElement): WebGLContextResult {
+      const params = {
+        alpha: false,
+        depth: false,
+        stencil: false,
+        antialias: true,
+      };
+
+      let gl: WebGLRenderingContext | WebGL2RenderingContext | null = canvas.getContext('webgl2', params) as WebGL2RenderingContext | null;
+
+      const isWebGL2 = !!gl;
+
+      if (!isWebGL2) {
+        gl = (canvas.getContext('webgl', params) || canvas.getContext('experimental-webgl', params)) as WebGLRenderingContext | null;
+      }
+
+      if (!gl) throw new Error('WebGL not supported');
+
+      const halfFloat = gl.getExtension('OES_texture_half_float');
+      let support_linear_float = gl.getExtension('OES_texture_half_float_linear');
+
+      if (isWebGL2) {
+        gl.getExtension('EXT_color_buffer_float');
+        support_linear_float = gl.getExtension('OES_texture_float_linear');
+      }
+
+      const internalFormat = isWebGL2 ? (gl as WebGL2RenderingContext).RGBA16F : gl.RGBA;
+      const internalFormatRG = isWebGL2 ? (gl as WebGL2RenderingContext).RG16F : gl.RGBA;
+      const formatRG = isWebGL2 ? (gl as WebGL2RenderingContext).RG : gl.RGBA;
+      const texType = isWebGL2 ? (gl as WebGL2RenderingContext).HALF_FLOAT : halfFloat?.HALF_FLOAT_OES || gl.UNSIGNED_BYTE;
+
+      return {
+        gl: gl as WebGLRenderingContext,
+        ext: {
+          internalFormat,
+          internalFormatRG,
+          formatRG,
+          texType,
+        },
+        support_linear_float: !!support_linear_float,
+      };
+    }
+
+    class GLProgram {
+      program: WebGLProgram;
+      uniforms: { [key: string]: WebGLUniformLocation | null };
+
+      constructor(vertexShader: WebGLShader, fragmentShader: WebGLShader) {
+        this.uniforms = {};
+        this.program = gl.createProgram()!;
+
+        gl.attachShader(this.program, vertexShader);
+        gl.attachShader(this.program, fragmentShader);
+        gl.linkProgram(this.program);
+
+        if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {
+          throw new Error(gl.getProgramInfoLog(this.program) || 'Program failed to link');
+        }
+
+        const uniformCount = gl.getProgramParameter(this.program, gl.ACTIVE_UNIFORMS);
+        for (let i = 0; i < uniformCount; i++) {
+          const uniformName = gl.getActiveUniform(this.program, i)!.name;
+          this.uniforms[uniformName] = gl.getUniformLocation(this.program, uniformName);
+        }
+      }
+
+      bind() {
+        gl.useProgram(this.program);
+      }
+    }
+
+    function compileShader(type: number, source: string): WebGLShader {
+      const shader = gl.createShader(type)!;
+      gl.shaderSource(shader, source);
+      gl.compileShader(shader);
+
+      if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
+        throw new Error(gl.getShaderInfoLog(shader) || 'Shader compilation failed');
+      }
+
+      return shader;
+    }
+
+    var baseVertexShader = compileShader(gl.VERTEX_SHADER, 'precision highp float; precision mediump sampler2D; attribute vec2 aPosition; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform vec2 texelSize; void main () {     vUv = aPosition * 0.5 + 0.5;     vL = vUv - vec2(texelSize.x, 0.0);     vR = vUv + vec2(texelSize.x, 0.0);     vT = vUv + vec2(0.0, texelSize.y);     vB = vUv - vec2(0.0, texelSize.y);     gl_Position = vec4(aPosition, 0.0, 1.0); }');
+    var clearShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; uniform sampler2D uTexture; uniform float value; void main () {     gl_FragColor = value * texture2D(uTexture, vUv); }');
+    var displayShader = compileShader(
+      gl.FRAGMENT_SHADER,
+      `
+  precision highp float;
+  precision mediump sampler2D;
+  varying vec2 vUv;
+  uniform sampler2D uTexture;
+  void main () {
+    float density = texture2D(uTexture, vUv).r;
+    vec3 splatColor = vec3(1.0, 1.0, 1.0);
+    vec3 backgroundColor = vec3(0.8, 0.8, 0.8);
+    vec3 color = mix(backgroundColor, splatColor, density);
+    gl_FragColor = vec4(color, 1.0);
+  }
+  `
+    );
+    var splatShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; uniform sampler2D uTarget; uniform float aspectRatio; uniform vec3 color; uniform vec2 point; uniform float radius; void main () {     vec2 p = vUv - point.xy;     p.x *= aspectRatio;     vec3 splat = exp(-dot(p, p) / radius) * color;     vec3 base = texture2D(uTarget, vUv).xyz;     gl_FragColor = vec4(base + splat, 1.0); }');
+    var advectionManualFilteringShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; uniform sampler2D uVelocity; uniform sampler2D uSource; uniform vec2 texelSize; uniform float dt; uniform float dissipation; vec4 bilerp (in sampler2D sam, in vec2 p) {     vec4 st;     st.xy = floor(p - 0.5) + 0.5;     st.zw = st.xy + 1.0;     vec4 uv = st * texelSize.xyxy;     vec4 a = texture2D(sam, uv.xy);     vec4 b = texture2D(sam, uv.zy);     vec4 c = texture2D(sam, uv.xw);     vec4 d = texture2D(sam, uv.zw);     vec2 f = p - st.xy;     return mix(mix(a, b, f.x), mix(c, d, f.x), f.y); } void main () {     vec2 coord = gl_FragCoord.xy - dt * texture2D(uVelocity, vUv).xy;     gl_FragColor = dissipation * bilerp(uSource, coord);     gl_FragColor.a = 1.0; }');
+    var advectionShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; uniform sampler2D uVelocity; uniform sampler2D uSource; uniform vec2 texelSize; uniform float dt; uniform float dissipation; void main () {     vec2 coord = vUv - dt * texture2D(uVelocity, vUv).xy * texelSize;     gl_FragColor = dissipation * texture2D(uSource, coord); }');
+    var divergenceShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform sampler2D uVelocity; vec2 sampleVelocity (in vec2 uv) {     vec2 multiplier = vec2(1.0, 1.0);     if (uv.x < 0.0) { uv.x = 0.0; multiplier.x = -1.0; }     if (uv.x > 1.0) { uv.x = 1.0; multiplier.x = -1.0; }     if (uv.y < 0.0) { uv.y = 0.0; multiplier.y = -1.0; }     if (uv.y > 1.0) { uv.y = 1.0; multiplier.y = -1.0; }     return multiplier * texture2D(uVelocity, uv).xy; } void main () {     float L = sampleVelocity(vL).x;     float R = sampleVelocity(vR).x;     float T = sampleVelocity(vT).y;     float B = sampleVelocity(vB).y;     float div = 0.5 * (R - L + T - B);     gl_FragColor = vec4(div, 0.0, 0.0, 1.0); }');
+    var curlShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform sampler2D uVelocity; void main () {     float L = texture2D(uVelocity, vL).y;     float R = texture2D(uVelocity, vR).y;     float T = texture2D(uVelocity, vT).x;     float B = texture2D(uVelocity, vB).x;     float vorticity = R - L - T + B;     gl_FragColor = vec4(vorticity, 0.0, 0.0, 1.0); }');
+    var vorticityShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform sampler2D uVelocity; uniform sampler2D uCurl; uniform float curl; uniform float dt; void main () {     float L = texture2D(uCurl, vL).y;     float R = texture2D(uCurl, vR).y;     float T = texture2D(uCurl, vT).x;     float B = texture2D(uCurl, vB).x;     float C = texture2D(uCurl, vUv).x;     vec2 force = vec2(abs(T) - abs(B), abs(R) - abs(L));     force *= 1.0 / length(force + 0.00001) * curl * C;     vec2 vel = texture2D(uVelocity, vUv).xy;     gl_FragColor = vec4(vel + force * dt, 0.0, 1.0); }');
+    var pressureShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform sampler2D uPressure; uniform sampler2D uDivergence; vec2 boundary (in vec2 uv) {     uv = min(max(uv, 0.0), 1.0);     return uv; } void main () {     float L = texture2D(uPressure, boundary(vL)).x;     float R = texture2D(uPressure, boundary(vR)).x;     float T = texture2D(uPressure, boundary(vT)).x;     float B = texture2D(uPressure, boundary(vB)).x;     float C = texture2D(uPressure, vUv).x;     float divergence = texture2D(uDivergence, vUv).x;     float pressure = (L + R + B + T - divergence) * 0.25;     gl_FragColor = vec4(pressure, 0.0, 0.0, 1.0); }');
+    var gradientSubtractShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform sampler2D uPressure; uniform sampler2D uVelocity; vec2 boundary (in vec2 uv) {     uv = min(max(uv, 0.0), 1.0);     return uv; } void main () {     float L = texture2D(uPressure, boundary(vL)).x;     float R = texture2D(uPressure, boundary(vR)).x;     float T = texture2D(uPressure, boundary(vT)).x;     float B = texture2D(uPressure, boundary(vB)).x;     vec2 velocity = texture2D(uVelocity, vUv).xy;     velocity.xy -= vec2(R - L, T - B);     gl_FragColor = vec4(velocity, 0.0, 1.0); }');
+
+    let textureWidth: number = 0;
+    let textureHeight: number = 0;
+
+    let density: { first: any[]; second: any[]; swap: () => void } | undefined;
+    let velocity: { first: any[]; second: any[]; swap: () => void } | undefined;
+    let divergence: any[] | undefined;
+    let curl: any[] | undefined;
+    let pressure: { first: any[]; second: any[]; swap: () => void } | undefined;
+
+    initFramebuffers();
+
+    var clearProgram = new GLProgram(baseVertexShader, clearShader);
+    var displayProgram = new GLProgram(baseVertexShader, displayShader);
+    var splatProgram = new GLProgram(baseVertexShader, splatShader);
+    var advectionProgram = new GLProgram(baseVertexShader, support_linear_float ? advectionShader : advectionManualFilteringShader);
+    var divergenceProgram = new GLProgram(baseVertexShader, divergenceShader);
+    var curlProgram = new GLProgram(baseVertexShader, curlShader);
+    var vorticityProgram = new GLProgram(baseVertexShader, vorticityShader);
+    var pressureProgram = new GLProgram(baseVertexShader, pressureShader);
+    var gradienSubtractProgram = new GLProgram(baseVertexShader, gradientSubtractShader);
+
+    function initFramebuffers() {
+      textureWidth = gl.drawingBufferWidth >> config.TEXTURE_DOWNSAMPLE;
+      textureHeight = gl.drawingBufferHeight >> config.TEXTURE_DOWNSAMPLE;
+
+      var iFormat = ext.internalFormat;
+      var iFormatRG = ext.internalFormatRG;
+      var formatRG = ext.formatRG;
+      var texType = ext.texType;
+
+      density = createDoubleFBO(0, textureWidth, textureHeight, iFormat, gl.RGBA, texType, support_linear_float ? gl.LINEAR : gl.NEAREST);
+      velocity = createDoubleFBO(2, textureWidth, textureHeight, iFormatRG, formatRG, texType, support_linear_float ? gl.LINEAR : gl.NEAREST);
+      divergence = createFBO(4, textureWidth, textureHeight, iFormatRG, formatRG, texType, gl.NEAREST);
+      curl = createFBO(5, textureWidth, textureHeight, iFormatRG, formatRG, texType, gl.NEAREST);
+      pressure = createDoubleFBO(6, textureWidth, textureHeight, iFormatRG, formatRG, texType, gl.NEAREST);
+    }
+
+    function createFBO(texId, w, h, internalFormat, format, type, param) {
+      gl.activeTexture(gl.TEXTURE0 + texId);
+
+      var texture = gl.createTexture();
+
+      gl.bindTexture(gl.TEXTURE_2D, texture);
+      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, param);
+      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, param);
+      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
+      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
+      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, w, h, 0, format, type, null);
+
+      var fbo = gl.createFramebuffer();
+
+      gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
+      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
+      gl.viewport(0, 0, w, h);
+      gl.clear(gl.COLOR_BUFFER_BIT);
+
+      return [texture, fbo, texId];
+    }
+
+    function createDoubleFBO(texId, w, h, internalFormat, format, type, param) {
+      var fbo1 = createFBO(texId, w, h, internalFormat, format, type, param);
+      var fbo2 = createFBO(texId + 1, w, h, internalFormat, format, type, param);
+
+      return {
+        get first() {
+          return fbo1;
+        },
+        get second() {
+          return fbo2;
+        },
+        swap: function swap() {
+          var temp = fbo1;
+
+          fbo1 = fbo2;
+          fbo2 = temp;
+        },
+      };
+    }
+
+    const blit = (() => {
+      const vertexData = new Float32Array([-1, -1, -1, 1, 1, 1, 1, -1]);
+      const elementData = new Uint16Array([0, 1, 2, 0, 2, 3]);
+
+      gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());
+      gl.bufferData(gl.ARRAY_BUFFER, vertexData, gl.STATIC_DRAW);
+      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer());
+      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, elementData, gl.STATIC_DRAW);
+      gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);
+      gl.enableVertexAttribArray(0);
+
+      return (destination: WebGLFramebuffer | null) => {
+        gl.bindFramebuffer(gl.FRAMEBUFFER, destination);
+        gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);
+      };
+    })();
+
+    var lastTime = Date.now();
+    let timeAccumulator = 0;
+
+    update();
+
+    function splat(x: number, y: number, dx: number, dy: number) {
+      if (!velocity) return;
+      if (!canvas) return;
+      if (!density) return;
+
+      splatProgram.bind();
+      gl.uniform1i(splatProgram.uniforms.uTarget, velocity.first[2]);
+      gl.uniform1f(splatProgram.uniforms.aspectRatio, canvas.width / canvas.height);
+      gl.uniform2f(splatProgram.uniforms.point, x / canvas.width, 1.0 - y / canvas.height);
+      gl.uniform3f(splatProgram.uniforms.color, dx, -dy, 1.0);
+      gl.uniform1f(splatProgram.uniforms.radius, config.SPLAT_RADIUS);
+      blit(velocity.second[1]);
+      velocity.swap();
+
+      gl.uniform1i(splatProgram.uniforms.uTarget, density.first[2]);
+
+      gl.uniform3f(splatProgram.uniforms.color, 0.9, 0.9, 0.9);
+      blit(density.second[1]);
+      density.swap();
+    }
+
+    function update() {
+      resizeCanvas();
+
+      const dt = Math.min((Date.now() - lastTime) / 1000, 0.016);
+      lastTime = Date.now();
+
+      gl.viewport(0, 0, textureWidth, textureHeight);
+
+      timeAccumulator += dt;
+
+      if (canvas) {
+        if (timeAccumulator >= config.SPEED) {
+          timeAccumulator = 0;
+          // splat(canvas.width * 0.5, canvas.height, 0, 48 * 8);
+          splat(0, canvas.height, canvas.width * 0.3, 8);
+        }
+      }
+
+      advectionProgram.bind();
+
+      if (!velocity) return;
+      if (!density) return;
+      if (!curl) return;
+      if (!divergence) return;
+      if (!pressure) return;
+
+      gl.uniform2f(advectionProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(advectionProgram.uniforms.uVelocity, velocity.first[2]);
+      gl.uniform1i(advectionProgram.uniforms.uSource, velocity.first[2]);
+      gl.uniform1f(advectionProgram.uniforms.dt, dt);
+      gl.uniform1f(advectionProgram.uniforms.dissipation, config.VELOCITY_DISSIPATION);
+      blit(velocity.second[1]);
+      velocity.swap();
+
+      gl.uniform1i(advectionProgram.uniforms.uVelocity, velocity.first[2]);
+
+      gl.uniform1i(advectionProgram.uniforms.uSource, density.first[2]);
+      gl.uniform1f(advectionProgram.uniforms.dissipation, config.DENSITY_DISSIPATION);
+      blit(density.second[1]);
+      density.swap();
+
+      curlProgram.bind();
+      gl.uniform2f(curlProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(curlProgram.uniforms.uVelocity, velocity.first[2]);
+      blit(curl[1]);
+
+      vorticityProgram.bind();
+      gl.uniform2f(vorticityProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(vorticityProgram.uniforms.uVelocity, velocity.first[2]);
+      gl.uniform1i(vorticityProgram.uniforms.uCurl, curl[2]);
+      gl.uniform1f(vorticityProgram.uniforms.curl, config.CURL);
+      gl.uniform1f(vorticityProgram.uniforms.dt, dt);
+      blit(velocity.second[1]);
+      velocity.swap();
+
+      divergenceProgram.bind();
+      gl.uniform2f(divergenceProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(divergenceProgram.uniforms.uVelocity, velocity.first[2]);
+      blit(divergence[1]);
+
+      clearProgram.bind();
+
+      var pressureTexId = pressure.first[2];
+
+      gl.activeTexture(gl.TEXTURE0 + pressureTexId);
+      gl.bindTexture(gl.TEXTURE_2D, pressure.first[0]);
+      gl.uniform1i(clearProgram.uniforms.uTexture, pressureTexId);
+      gl.uniform1f(clearProgram.uniforms.value, config.PRESSURE_DISSIPATION);
+      blit(pressure.second[1]);
+      pressure.swap();
+
+      pressureProgram.bind();
+      gl.uniform2f(pressureProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(pressureProgram.uniforms.uDivergence, divergence[2]);
+      pressureTexId = pressure.first[2];
+      gl.activeTexture(gl.TEXTURE0 + pressureTexId);
+
+      for (var _i = 0; _i < config.PRESSURE_ITERATIONS; _i++) {
+        gl.bindTexture(gl.TEXTURE_2D, pressure.first[0]);
+        gl.uniform1i(pressureProgram.uniforms.uPressure, pressureTexId);
+        blit(pressure.second[1]);
+        pressure.swap();
+      }
+
+      gradienSubtractProgram.bind();
+      gl.uniform2f(gradienSubtractProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(gradienSubtractProgram.uniforms.uPressure, pressure.first[2]);
+      gl.uniform1i(gradienSubtractProgram.uniforms.uVelocity, velocity.first[2]);
+      blit(velocity.second[1]);
+      velocity.swap();
+
+      gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
+      displayProgram.bind();
+      gl.uniform1i(displayProgram.uniforms.uTexture, density.first[2]);
+      blit(null);
+
+      requestAnimationFrame(update);
+    }
+
+    function resizeCanvas() {
+      if (!canvas) return;
+
+      (canvas.width !== canvas.clientWidth || canvas.height !== canvas.clientHeight) && ((canvas.width = canvas.clientWidth), (canvas.height = canvas.clientHeight), initFramebuffers());
+    }
+  }, []);
+
+  return <canvas className={styles.canvas} ref={canvasRef} style={props.style} />;
+}
+
+================
+File: reference/components/CanvasPlatformer.module.scss
+================
+.container {
+  width: 100%;
+  height: auto;
+  position: relative;
+}
+
+.root {
+  display: block;
+  width: 100%;
+  background: transparent;
+
+  &:focus {
+    outline: 0;
+    box-shadow: inset 0 0 0 1px var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/CanvasPlatformer.tsx
+================
+'use client';
+
+import styles from '@components/CanvasPlatformer.module.scss';
+
+import * as React from 'react';
+
+import ActionButton from '@components/ActionButton';
+
+interface PlatformerProps {
+  rows?: number;
+}
+
+// TODO(jimmylee)
+// Move these constants into a separate file
+// Dynamically compute these constants since we're going to
+// Support t-shirt sizes for the system.
+const LINE_HEIGHT = 20;
+const CHARACTER_WIDTH = 9.6;
+const GRAVITY = 0.3;
+const MOVE_SPEED = 2;
+const JUMP_SPEED = -6;
+const FRICTION = 0.85;
+
+interface Position {
+  x: number;
+  y: number;
+}
+
+interface Keys {
+  left: boolean;
+  right: boolean;
+  jump: boolean;
+}
+
+interface Block {
+  x: number;
+  y: number;
+}
+
+const CanvasPlatformer: React.FC<PlatformerProps> = ({ rows = 25 }) => {
+  const canvasRef = React.useRef<HTMLCanvasElement>(null);
+  const [focused, setFocused] = React.useState(false);
+
+  const positionRef = React.useRef<Position>({ x: 50, y: 0 });
+  const velocityRef = React.useRef<Position>({ x: 0, y: 0 });
+  const keysRef = React.useRef<Keys>({ left: false, right: false, jump: false });
+  const platformBlocksRef = React.useRef<Block[]>([]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+    const parent = canvas.parentElement;
+    if (!parent) return;
+
+    const resizeCanvas = () => {
+      const parentWidth = parent.clientWidth;
+      const canvasHeight = rows * LINE_HEIGHT;
+      canvas.width = parentWidth;
+      canvas.height = canvasHeight;
+      const platformY = canvas.height - LINE_HEIGHT * 2;
+      positionRef.current.y = platformY - LINE_HEIGHT;
+      platformBlocksRef.current = [];
+      const numBlocks = Math.floor(parentWidth / CHARACTER_WIDTH);
+      for (let i = 0; i < numBlocks; i++) {
+        platformBlocksRef.current.push({ x: i * CHARACTER_WIDTH, y: platformY });
+      }
+    };
+
+    resizeCanvas();
+    window.addEventListener('resize', resizeCanvas);
+    return () => {
+      window.removeEventListener('resize', resizeCanvas);
+    };
+  }, [rows]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const handleFocus = () => setFocused(true);
+    const handleBlur = () => {
+      setFocused(false);
+      keysRef.current = { left: false, right: false, jump: false };
+    };
+
+    canvas.tabIndex = 0;
+    canvas.addEventListener('focus', handleFocus);
+    canvas.addEventListener('blur', handleBlur);
+
+    const handleClick = (e: MouseEvent) => {
+      const rect = canvas.getBoundingClientRect();
+      const x = Math.floor((e.clientX - rect.left) / CHARACTER_WIDTH) * CHARACTER_WIDTH;
+      const y = Math.floor((e.clientY - rect.top) / LINE_HEIGHT) * LINE_HEIGHT;
+      const blocks = platformBlocksRef.current;
+      const existingIndex = blocks.findIndex((b) => b.x === x && b.y === y);
+      if (existingIndex !== -1) {
+        blocks.splice(existingIndex, 1);
+      } else {
+        blocks.push({ x, y });
+      }
+    };
+
+    canvas.addEventListener('click', handleClick);
+
+    return () => {
+      canvas.removeEventListener('focus', handleFocus);
+      canvas.removeEventListener('blur', handleBlur);
+      canvas.removeEventListener('click', handleClick);
+    };
+  }, []);
+
+  React.useEffect(() => {
+    const handleKeyDown = (e: KeyboardEvent) => {
+      if (!focused) return;
+      if (e.key === 'ArrowLeft' || e.key === 'ArrowRight' || e.code === 'Space') {
+        e.preventDefault();
+        e.stopPropagation();
+      }
+      if (e.key === 'ArrowLeft') keysRef.current.left = true;
+      if (e.key === 'ArrowRight') keysRef.current.right = true;
+      if (e.code === 'Space') keysRef.current.jump = true;
+    };
+
+    const handleKeyUp = (e: KeyboardEvent) => {
+      if (!focused) return;
+      if (e.key === 'ArrowLeft' || e.key === 'ArrowRight' || e.code === 'Space') {
+        e.preventDefault();
+        e.stopPropagation();
+      }
+      if (e.key === 'ArrowLeft') keysRef.current.left = false;
+      if (e.key === 'ArrowRight') keysRef.current.right = false;
+      if (e.code === 'Space') keysRef.current.jump = false;
+    };
+
+    window.addEventListener('keydown', handleKeyDown, { capture: true });
+    window.addEventListener('keyup', handleKeyUp, { capture: true });
+
+    return () => {
+      window.removeEventListener('keydown', handleKeyDown, { capture: true });
+      window.removeEventListener('keyup', handleKeyUp, { capture: true });
+    };
+  }, [focused]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+    const ctx = canvas.getContext('2d');
+    if (!ctx) return;
+
+    const loop = () => {
+      const w = canvas.width;
+      const h = canvas.height;
+      ctx.clearRect(0, 0, w, h);
+
+      const pos = positionRef.current;
+      const vel = velocityRef.current;
+      const keys = keysRef.current;
+      const blocks = platformBlocksRef.current;
+
+      const themeBorderColor = getComputedStyle(document.body).getPropertyValue('--theme-border').trim();
+      const themeTextColor = getComputedStyle(document.body).getPropertyValue('--theme-text').trim();
+
+      ctx.fillStyle = themeBorderColor;
+      for (const b of blocks) {
+        ctx.fillRect(b.x, b.y, CHARACTER_WIDTH, LINE_HEIGHT);
+      }
+
+      if (keys.left) vel.x = -MOVE_SPEED;
+      else if (keys.right) vel.x = MOVE_SPEED;
+      else {
+        vel.x *= FRICTION;
+        if (Math.abs(vel.x) < 0.1) vel.x = 0;
+      }
+
+      const oldY = pos.y;
+      vel.y += GRAVITY;
+      pos.x += vel.x;
+      pos.y += vel.y;
+
+      if (pos.x < 0) pos.x = 0;
+      if (pos.x > w - CHARACTER_WIDTH) pos.x = w - CHARACTER_WIDTH;
+
+      let groundY = h;
+      for (const b of blocks) {
+        const horizontallyOverlapping = pos.x + CHARACTER_WIDTH > b.x && pos.x < b.x + CHARACTER_WIDTH;
+        if (horizontallyOverlapping && oldY + LINE_HEIGHT <= b.y && pos.y + LINE_HEIGHT >= b.y) {
+          if (b.y < groundY) groundY = b.y;
+        }
+      }
+
+      if (pos.y + LINE_HEIGHT > groundY) {
+        pos.y = groundY - LINE_HEIGHT;
+        vel.y = 0;
+        if (keys.jump) vel.y = JUMP_SPEED;
+      }
+
+      ctx.fillStyle = themeTextColor;
+      ctx.fillRect(pos.x, pos.y, CHARACTER_WIDTH, LINE_HEIGHT);
+
+      requestAnimationFrame(loop);
+    };
+
+    requestAnimationFrame(loop);
+  }, []);
+
+  const handleJumpClick = () => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+    const pos = positionRef.current;
+    const vel = velocityRef.current;
+    let w = canvas.width;
+    let h = canvas.height;
+    let groundY = h;
+    for (const b of platformBlocksRef.current) {
+      const horizontallyOverlapping = pos.x + CHARACTER_WIDTH > b.x && pos.x < b.x + CHARACTER_WIDTH;
+      if (horizontallyOverlapping && pos.y + LINE_HEIGHT <= b.y) {
+        if (b.y < groundY) groundY = b.y;
+      }
+    }
+    if (pos.y + LINE_HEIGHT >= groundY) vel.y = JUMP_SPEED;
+  };
+
+  const handleLeftClick = () => {
+    const pos = positionRef.current;
+    pos.x -= CHARACTER_WIDTH;
+    if (pos.x < 0) pos.x = 0;
+  };
+
+  const handleRightClick = () => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+    const pos = positionRef.current;
+    pos.x += CHARACTER_WIDTH;
+    if (pos.x > canvas.width - CHARACTER_WIDTH) pos.x = canvas.width - CHARACTER_WIDTH;
+  };
+
+  return (
+    <>
+      <ActionButton hotkey="␣" onClick={handleJumpClick}>
+        Jump
+      </ActionButton>
+      <ActionButton hotkey="←" onClick={handleLeftClick}>
+        Left
+      </ActionButton>
+      <ActionButton hotkey="→" onClick={handleRightClick}>
+        Right
+      </ActionButton>
+      <div className={styles.container}>
+        <canvas className={styles.root} ref={canvasRef} />
+      </div>
+    </>
+  );
+};
+
+export default CanvasPlatformer;
+
+================
+File: reference/components/CanvasSnake.module.scss
+================
+.container {
+  width: 100%;
+  height: auto;
+  position: relative;
+}
+
+.root {
+  display: block;
+  width: 100%;
+  background: transparent;
+
+  &:focus {
+    outline: 0;
+    box-shadow: inset 0 0 0 1px var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/CanvasSnake.tsx
+================
+'use client';
+
+import styles from '@components/CanvasSnake.module.scss';
+
+import * as React from 'react';
+
+import ActionButton from '@components/ActionButton';
+
+interface SnakeProps {
+  rows?: number;
+}
+
+// TODO(jimmylee)
+// Move these constants into a separate file
+// Dynamically compute these constants since we're going to
+// Support t-shirt sizes for the system.
+const LINE_HEIGHT = 20;
+const CHARACTER_WIDTH = 9.6;
+
+interface Position {
+  x: number;
+  y: number;
+}
+
+type Direction = 'UP' | 'DOWN' | 'LEFT' | 'RIGHT';
+
+const CanvasSnake = ({ rows = 25 }: SnakeProps) => {
+  const canvasRef = React.useRef<HTMLCanvasElement>(null);
+  const [focused, setFocused] = React.useState(false);
+  const directionRef = React.useRef<Direction>('RIGHT');
+  const snakeRef = React.useRef<Position[]>([]);
+  const fruitRef = React.useRef<Position>({ x: 0, y: 0 });
+  const gridWidthRef = React.useRef<number>(0);
+  const gridHeightRef = React.useRef<number>(0);
+  const lastMoveTimeRef = React.useRef<number>(0);
+  const moveInterval = 150;
+  const animationFrameRef = React.useRef<number | null>(null);
+
+  const reset = React.useCallback(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const w = canvas.width;
+    const h = canvas.height;
+    const gridWidth = Math.floor(w / CHARACTER_WIDTH);
+    const gridHeight = Math.floor(h / LINE_HEIGHT);
+
+    gridWidthRef.current = gridWidth;
+    gridHeightRef.current = gridHeight;
+
+    const startX = Math.floor(gridWidth / 2);
+    const startY = Math.floor(gridHeight / 2);
+
+    snakeRef.current = [
+      { x: startX - 13, y: startY },
+      { x: startX - 12, y: startY },
+      { x: startX - 11, y: startY },
+      { x: startX - 10, y: startY },
+      { x: startX - 9, y: startY },
+      { x: startX - 8, y: startY },
+      { x: startX - 7, y: startY },
+      { x: startX - 6, y: startY },
+      { x: startX - 5, y: startY },
+      { x: startX - 4, y: startY },
+      { x: startX - 3, y: startY },
+      { x: startX - 2, y: startY },
+      { x: startX - 1, y: startY },
+      { x: startX, y: startY },
+    ];
+
+    directionRef.current = 'RIGHT';
+
+    fruitRef.current = {
+      x: Math.floor(Math.random() * gridWidth),
+      y: Math.floor(Math.random() * gridHeight),
+    };
+
+    lastMoveTimeRef.current = performance.now();
+  }, []);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const parent = canvas.parentElement;
+    if (!parent) return;
+
+    const onHandleResizeCanvas = () => {
+      const parentWidth = parent.clientWidth;
+      const canvasHeight = rows * LINE_HEIGHT;
+      canvas.width = parentWidth;
+      canvas.height = canvasHeight;
+      reset();
+    };
+
+    onHandleResizeCanvas();
+    window.addEventListener('resize', onHandleResizeCanvas);
+    return () => {
+      window.removeEventListener('resize', onHandleResizeCanvas);
+    };
+  }, [rows, reset]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const onHandleFocus = () => {
+      setFocused(true);
+    };
+    const onHandleBlur = () => {
+      setFocused(false);
+    };
+
+    canvas.tabIndex = 0;
+    canvas.addEventListener('focus', onHandleFocus);
+    canvas.addEventListener('blur', onHandleBlur);
+
+    return () => {
+      canvas.removeEventListener('focus', onHandleFocus);
+      canvas.removeEventListener('blur', onHandleBlur);
+    };
+  }, []);
+
+  React.useEffect(() => {
+    const handleKeyDown = (e: KeyboardEvent) => {
+      if (!focused) return;
+      if (e.key === 'ArrowLeft' || e.key === 'ArrowRight' || e.key === 'ArrowUp' || e.key === 'ArrowDown') {
+        e.preventDefault();
+        e.stopPropagation();
+      }
+      const currentDir = directionRef.current;
+      if (e.key === 'ArrowLeft' && currentDir !== 'RIGHT') directionRef.current = 'LEFT';
+      if (e.key === 'ArrowRight' && currentDir !== 'LEFT') directionRef.current = 'RIGHT';
+      if (e.key === 'ArrowUp' && currentDir !== 'DOWN') directionRef.current = 'UP';
+      if (e.key === 'ArrowDown' && currentDir !== 'UP') directionRef.current = 'DOWN';
+    };
+
+    window.addEventListener('keydown', handleKeyDown, { capture: true });
+    return () => {
+      window.removeEventListener('keydown', handleKeyDown, { capture: true });
+    };
+  }, [focused]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const ctx = canvas.getContext('2d');
+    if (!ctx) return;
+
+    const themeBorderColor = getComputedStyle(document.body).getPropertyValue('--theme-text').trim();
+    const themeTextColor = getComputedStyle(document.body).getPropertyValue('--theme-focused-foreground').trim();
+
+    const moveSnake = () => {
+      const snake = snakeRef.current;
+      const dir = directionRef.current;
+      const head = snake[snake.length - 1];
+      let newHead: Position = { x: head.x, y: head.y };
+      if (dir === 'LEFT') newHead.x -= 1;
+      if (dir === 'RIGHT') newHead.x += 1;
+      if (dir === 'UP') newHead.y -= 1;
+      if (dir === 'DOWN') newHead.y += 1;
+      if (newHead.x < 0 || newHead.x >= gridWidthRef.current || newHead.y < 0 || newHead.y >= gridHeightRef.current) {
+        reset();
+        return;
+      }
+      for (const seg of snake) {
+        if (seg.x === newHead.x && seg.y === newHead.y) {
+          reset();
+          return;
+        }
+      }
+      snake.push(newHead);
+      if (newHead.x === fruitRef.current.x && newHead.y === fruitRef.current.y) {
+        placeTarget();
+      } else {
+        snake.shift();
+      }
+    };
+
+    const placeTarget = () => {
+      const snake = snakeRef.current;
+      const gridW = gridWidthRef.current;
+      const gridH = gridHeightRef.current;
+      let fruitPos: Position;
+      while (true) {
+        fruitPos = {
+          x: Math.floor(Math.random() * gridW),
+          y: Math.floor(Math.random() * gridH),
+        };
+        if (!snake.some((s) => s.x === fruitPos.x && s.y === fruitPos.y)) break;
+      }
+      fruitRef.current = fruitPos;
+    };
+
+    const loop = (time: number) => {
+      if (!ctx) return;
+      if (!focused) return;
+
+      const w = canvas.width;
+      const h = canvas.height;
+
+      ctx.clearRect(0, 0, w, h);
+      ctx.fillStyle = themeTextColor;
+      ctx.fillRect(fruitRef.current.x * CHARACTER_WIDTH, fruitRef.current.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+      ctx.fillStyle = themeBorderColor;
+      for (const segment of snakeRef.current) {
+        ctx.fillRect(segment.x * CHARACTER_WIDTH, segment.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+      }
+      if (time - lastMoveTimeRef.current > moveInterval) {
+        moveSnake();
+        lastMoveTimeRef.current = time;
+      }
+      animationFrameRef.current = requestAnimationFrame(loop);
+    };
+
+    if (focused && animationFrameRef.current === null) {
+      animationFrameRef.current = requestAnimationFrame(loop);
+    }
+
+    return () => {
+      if (animationFrameRef.current !== null) {
+        cancelAnimationFrame(animationFrameRef.current);
+        animationFrameRef.current = null;
+      }
+    };
+  }, [focused, reset]);
+
+  React.useEffect(() => {
+    if (!focused) {
+      if (animationFrameRef.current !== null) {
+        cancelAnimationFrame(animationFrameRef.current);
+        animationFrameRef.current = null;
+      }
+
+      return;
+    }
+
+    if (animationFrameRef.current === null && canvasRef.current) {
+      animationFrameRef.current = requestAnimationFrame((time) => {
+        const canvas = canvasRef.current;
+        if (!canvas) return;
+
+        const ctx = canvas.getContext('2d');
+        if (!ctx) return;
+
+        const themeBorderColor = getComputedStyle(document.body).getPropertyValue('--theme-border').trim();
+        const themeTextColor = getComputedStyle(document.body).getPropertyValue('--theme-text').trim();
+
+        ctx.clearRect(0, 0, canvas.width, canvas.height);
+        ctx.fillStyle = themeBorderColor;
+        ctx.fillRect(fruitRef.current.x * CHARACTER_WIDTH, fruitRef.current.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+        ctx.fillStyle = themeTextColor;
+
+        for (const segment of snakeRef.current) {
+          ctx.fillRect(segment.x * CHARACTER_WIDTH, segment.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+        }
+
+        lastMoveTimeRef.current = time;
+        animationFrameRef.current = requestAnimationFrame(loop);
+
+        function loop(time: number) {
+          if (!focused) return;
+          if (!ctx) return;
+          if (!canvas) return;
+
+          ctx.clearRect(0, 0, canvas.width, canvas.height);
+          ctx.fillStyle = themeBorderColor;
+          ctx.fillRect(fruitRef.current.x * CHARACTER_WIDTH, fruitRef.current.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+          ctx.fillStyle = themeTextColor;
+          for (const segment of snakeRef.current) {
+            ctx.fillRect(segment.x * CHARACTER_WIDTH, segment.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+          }
+          if (time - lastMoveTimeRef.current > moveInterval) {
+            moveSnake();
+            lastMoveTimeRef.current = time;
+          }
+          animationFrameRef.current = requestAnimationFrame(loop);
+        }
+
+        const moveSnake = () => {
+          const snake = snakeRef.current;
+          const dir = directionRef.current;
+          const head = snake[snake.length - 1];
+          let newHead: Position = { x: head.x, y: head.y };
+          if (dir === 'LEFT') newHead.x -= 1;
+          if (dir === 'RIGHT') newHead.x += 1;
+          if (dir === 'UP') newHead.y -= 1;
+          if (dir === 'DOWN') newHead.y += 1;
+          if (newHead.x < 0 || newHead.x >= gridWidthRef.current || newHead.y < 0 || newHead.y >= gridHeightRef.current) {
+            reset();
+            return;
+          }
+
+          for (const seg of snake) {
+            if (seg.x === newHead.x && seg.y === newHead.y) {
+              reset();
+              return;
+            }
+          }
+
+          snake.push(newHead);
+          if (newHead.x === fruitRef.current.x && newHead.y === fruitRef.current.y) {
+            placeTarget();
+          } else {
+            snake.shift();
+          }
+        };
+
+        const placeTarget = () => {
+          const snake = snakeRef.current;
+          const gridW = gridWidthRef.current;
+          const gridH = gridHeightRef.current;
+          let fruitPos: Position;
+          while (true) {
+            fruitPos = {
+              x: Math.floor(Math.random() * gridW),
+              y: Math.floor(Math.random() * gridH),
+            };
+            if (!snake.some((s) => s.x === fruitPos.x && s.y === fruitPos.y)) break;
+          }
+          fruitRef.current = fruitPos;
+        };
+      });
+    }
+  }, [focused, reset]);
+
+  const onHandleClickUp = () => {
+    if (directionRef.current !== 'DOWN') directionRef.current = 'UP';
+  };
+  const onHandleClickDown = () => {
+    if (directionRef.current !== 'UP') directionRef.current = 'DOWN';
+  };
+  const onHandleClickLeft = () => {
+    if (directionRef.current !== 'RIGHT') directionRef.current = 'LEFT';
+  };
+  const onHandleClickRight = () => {
+    if (directionRef.current !== 'LEFT') directionRef.current = 'RIGHT';
+  };
+
+  return (
+    <>
+      <ActionButton hotkey="↑" onClick={onHandleClickUp}>
+        Up
+      </ActionButton>
+      <ActionButton hotkey="↓" onClick={onHandleClickDown}>
+        Down
+      </ActionButton>
+      <ActionButton hotkey="←" onClick={onHandleClickLeft}>
+        Left
+      </ActionButton>
+      <ActionButton hotkey="→" onClick={onHandleClickRight}>
+        Right
+      </ActionButton>
+      <div className={styles.container}>
+        <canvas className={styles.root} ref={canvasRef} />
+      </div>
+    </>
+  );
+};
+
+export default CanvasSnake;
+
+================
+File: reference/components/Card.module.scss
+================
+.card {
+  position: relative;
+  display: block;
+  padding-top: 0;
+  padding-left: 0;
+  padding-right: 0;
+  padding-bottom: 0;
+  white-space: prewrap;
+}
+
+.children {
+  box-shadow:
+    inset 2px 0 0 0 var(--theme-text),
+    inset -2px 0 0 0 var(--theme-text),
+    inset 0 -2px 0 0 var(--theme-text);
+  display: block;
+  padding-top: calc(var(--theme-line-height-base) * 0.5rem);
+  padding-left: 2ch;
+  padding-right: 2ch;
+  padding-bottom: calc(var(--theme-line-height-base) * 1rem);
+  overflow-x: auto;
+  overflow-y: hidden;
+
+  &::-webkit-scrollbar {
+    display: none;
+  }
+
+  scrollbar-width: none;
+}
+
+.action {
+  display: flex;
+  align-items: flex-end;
+  justify-content: space-between;
+}
+
+.left {
+  min-width: 10%;
+  width: 100%;
+  box-shadow:
+    inset 2px 0 0 0 var(--theme-text),
+    inset 0 2px 0 0 var(--theme-text);
+  padding: calc((var(--font-size) * 0.5) * var(--theme-line-height-base)) 2ch 0px 1ch;
+}
+
+.leftCorner {
+  flex-shrink: 0;
+  box-shadow:
+    inset 2px 0 0 0 var(--theme-text),
+    inset 0 2px 0 0 var(--theme-text);
+  padding: calc((var(--font-size) * 0.5) * var(--theme-line-height-base)) 1ch 0px 1ch;
+}
+
+.right {
+  min-width: 10%;
+  width: 100%;
+  box-shadow:
+    inset -2px 0 0 0 var(--theme-text),
+    inset 0 2px 0 0 var(--theme-text);
+  padding: calc((var(--font-size) * 0.5) * var(--theme-line-height-base)) 2ch 0px 1ch;
+}
+
+.rightCorner {
+  flex-shrink: 0;
+  box-shadow:
+    inset -2px 0 0 0 var(--theme-text),
+    inset 0 2px 0 0 var(--theme-text);
+  padding: calc((var(--font-size) * 0.5) * var(--theme-line-height-base)) 1ch 0px 1ch;
+}
+
+.title {
+  flex-shrink: 0;
+  padding: 0 1ch 0 1ch;
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+================
+File: reference/components/Card.tsx
+================
+import styles from '@components/Card.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface CardProps extends React.HTMLAttributes<HTMLDivElement> {
+  children?: React.ReactNode;
+  title?: string | any;
+  mode?: string | any;
+}
+
+const Card: React.FC<CardProps> = ({ children, mode, title, style, ...rest }) => {
+  let titleElement = (
+    <header className={styles.action}>
+      <div className={styles.left} aria-hidden="true"></div>
+      {title ? <h2 className={styles.title}>{title}</h2> : null}
+      <div className={styles.right} aria-hidden="true"></div>
+    </header>
+  );
+
+  if (mode === 'left') {
+    titleElement = (
+      <header className={styles.action}>
+        <div className={styles.leftCorner} aria-hidden="true"></div>
+        <h2 className={styles.title}>{title}</h2>
+        <div className={styles.right} aria-hidden="true"></div>
+      </header>
+    );
+  }
+
+  if (mode === 'right') {
+    titleElement = (
+      <header className={styles.action}>
+        <div className={styles.left} aria-hidden="true"></div>
+        <h2 className={styles.title}>{title}</h2>
+        <div className={styles.rightCorner} aria-hidden="true"></div>
+      </header>
+    );
+  }
+
+  return (
+    <article className={styles.card} style={style}>
+      {titleElement}
+      <section className={styles.children}>{children}</section>
+    </article>
+  );
+};
+
+export default Card;
+
+================
+File: reference/components/CardDouble.module.scss
+================
+.card {
+  --card-double-border-width: 6px;
+  --card-double-half-gutter: (var(--font-size) * 0.5);
+  --card-double-top-gutter: 6px;
+
+  position: relative;
+  display: block;
+  padding-top: 0;
+  padding-right: 0;
+  padding-left: 0;
+  padding-bottom: 0;
+}
+
+.children {
+  border-left: var(--card-double-border-width) solid var(--theme-text);
+  border-left-style: double;
+  border-bottom: var(--card-double-border-width) solid var(--theme-text);
+  border-bottom-style: double;
+  border-right: var(--card-double-border-width) solid var(--theme-text);
+  border-right-style: double;
+  display: block;
+  padding-top: calc(var(--theme-line-height-base) * 0.5rem);
+  padding-left: calc(2ch - var(--card-double-border-width));
+  padding-right: calc(2ch - var(--card-double-border-width));
+  padding-bottom: calc(var(--theme-line-height-base) * 1rem - var(--card-double-border-width));
+
+  overflow-x: auto;
+  overflow-y: hidden;
+
+  &::-webkit-scrollbar {
+    display: none;
+  }
+
+  scrollbar-width: none;
+}
+
+.action {
+  display: flex;
+  align-items: flex-end;
+  justify-content: space-between;
+}
+
+.left {
+  min-width: 10%;
+  width: 100%;
+  border-top: var(--card-double-border-width) solid var(--theme-text);
+  border-top-style: double;
+  border-left: var(--card-double-border-width) solid var(--theme-text);
+  border-left-style: double;
+  padding: calc(var(--card-double-top-gutter) * var(--theme-line-height-base)) 2ch 0px 1ch;
+}
+
+.leftCorner {
+  flex-shrink: 0;
+  border-top: var(--card-double-border-width) solid var(--theme-text);
+  border-top-style: double;
+  border-left: var(--card-double-border-width) solid var(--theme-text);
+  border-left-style: double;
+  padding: calc(var(--card-double-top-gutter) * var(--theme-line-height-base)) calc(1ch - 6px) 0px 1ch;
+}
+
+.right {
+  min-width: 10%;
+  width: 100%;
+  border-top: var(--card-double-border-width) solid var(--theme-text);
+  border-top-style: double;
+  border-right: var(--card-double-border-width) solid var(--theme-text);
+  border-right-style: double;
+  padding: calc(var(--card-double-top-gutter) * var(--theme-line-height-base)) 2ch 0px 1ch;
+}
+
+.rightCorner {
+  flex-shrink: 0;
+  border-top: var(--card-double-border-width) solid var(--theme-text);
+  border-top-style: double;
+  border-right: var(--card-double-border-width) solid var(--theme-text);
+  border-right-style: double;
+  padding: calc(var(--card-double-top-gutter) * var(--theme-line-height-base)) 1ch 0px calc(1ch - 6px);
+}
+
+.title {
+  flex-shrink: 0;
+  padding: 0 1ch 0 1ch;
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+================
+File: reference/components/CardDouble.tsx
+================
+import styles from '@components/CardDouble.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface CardProps extends React.HTMLAttributes<HTMLDivElement> {
+  children?: React.ReactNode;
+  title?: string | any;
+  mode?: string | any;
+  style?: any;
+}
+
+const CardDouble: React.FC<CardProps> = ({ children, mode, title, style, ...rest }) => {
+  let titleElement = (
+    <header className={styles.action}>
+      <div className={styles.left} aria-hidden="true"></div>
+      <h2 className={styles.title}>{title}</h2>
+      <div className={styles.right} aria-hidden="true"></div>
+    </header>
+  );
+
+  if (mode === 'left') {
+    titleElement = (
+      <header className={styles.action}>
+        <div className={styles.leftCorner} aria-hidden="true"></div>
+        <h2 className={styles.title}>{title}</h2>
+        <div className={styles.right} aria-hidden="true"></div>
+      </header>
+    );
+  }
+
+  if (mode === 'right') {
+    titleElement = (
+      <header className={styles.action}>
+        <div className={styles.left} aria-hidden="true"></div>
+        <h2 className={styles.title}>{title}</h2>
+        <div className={styles.rightCorner} aria-hidden="true"></div>
+      </header>
+    );
+  }
+
+  return (
+    <article className={styles.card}>
+      {titleElement}
+      <section className={styles.children}>
+        <section className={styles.borderChildren} style={style}>
+          {children}
+        </section>
+      </section>
+    </article>
+  );
+};
+
+export default CardDouble;
+
+================
+File: reference/components/Checkbox.module.scss
+================
+.section {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+
+  .right {
+    padding-bottom: calc(8px * var(--theme-line-height-base));
+    box-shadow: inset 0 1px 0 0 var(--theme-border-subdued);
+  }
+
+  &:last-child {
+    .right {
+      padding-bottom: 0;
+    }
+  }
+}
+
+.checked {
+}
+
+.focused {
+  .figure {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.relative {
+  position: relative;
+  flex-shrink: 0;
+  display: inline-block;
+  vertical-align: baseline;
+}
+
+.figure {
+  width: 100%;
+  height: 100%;
+  cursor: pointer;
+  color: var(--theme-text);
+  background: var(--theme-button-foreground);
+  align-self: stretch;
+  display: inline-block;
+  padding: 0 1ch 0 1ch;
+}
+
+.right {
+  background: var(--theme-button-background);
+  min-width: 10%;
+  width: 100%;
+  align-self: stretch;
+}
+
+.input {
+  top: 0;
+  left: 0;
+  opacity: 0;
+  position: absolute;
+  width: 1px;
+  height: 1px;
+}
+
+================
+File: reference/components/Checkbox.tsx
+================
+'use client';
+
+import styles from '@components/Checkbox.module.scss';
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface CheckboxProps {
+  style?: React.CSSProperties;
+  checkboxStyle?: React.CSSProperties;
+  name: string;
+  defaultChecked?: boolean;
+  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;
+  tabIndex?: number;
+  children?: React.ReactNode;
+}
+
+const Checkbox: React.FC<CheckboxProps> = ({ style, name, defaultChecked = false, onChange, children }) => {
+  const checkboxId = `${name}-checkbox`;
+  const inputRef = React.useRef<HTMLInputElement>(null);
+
+  const [isChecked, setIsChecked] = React.useState(defaultChecked);
+  const [isFocused, setIsFocused] = React.useState(false);
+
+  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
+    switch (event.key) {
+      case 'Enter':
+        event.preventDefault();
+        inputRef.current?.click();
+        break;
+      case 'ArrowUp':
+      case 'ArrowLeft': {
+        event.preventDefault();
+        const previousFocusable = Utilities.findNextFocusable(document.activeElement, 'previous');
+        previousFocusable?.focus();
+        break;
+      }
+      case 'ArrowDown':
+      case 'ArrowRight': {
+        event.preventDefault();
+        const nextFocusable = Utilities.findNextFocusable(document.activeElement, 'next');
+        nextFocusable?.focus();
+        break;
+      }
+      default:
+        break;
+    }
+  };
+
+  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
+    const newCheckedStatus = event.target.checked;
+    setIsChecked(newCheckedStatus);
+    if (onChange) {
+      onChange(event);
+    }
+  };
+
+  const handleFocus = () => setIsFocused(true);
+  const handleBlur = () => setIsFocused(false);
+
+  return (
+    <div
+      className={Utilities.classNames(styles.section, {
+        [styles.checked]: isChecked,
+        [styles.focused]: isFocused,
+      })}
+      style={style}
+    >
+      <div className={styles.relative}>
+        <input className={styles.input} id={checkboxId} type="checkbox" name={name} defaultChecked={defaultChecked} onChange={handleChange} onKeyDown={handleKeyDown} onFocus={handleFocus} onBlur={handleBlur} tabIndex={0} ref={inputRef} />
+        <label className={styles.figure} htmlFor={checkboxId}>
+          {isChecked ? '╳' : '\u00A0'}
+        </label>
+      </div>
+      <div className={styles.right}>&nbsp;&nbsp;{children}</div>
+    </div>
+  );
+};
+
+export default Checkbox;
+
+================
+File: reference/components/Chessboard.module.scss
+================
+.board {
+  display: inline-table;
+  border-collapse: collapse;
+}
+
+.corner {
+  width: 1ch;
+  height: calc(var(--theme-line-height-base) * 1rem);
+}
+
+.cell {
+  width: 1ch;
+  height: calc(var(--theme-line-height-base) * 1rem);
+  background-color: var(--theme-border-subdued);
+  text-align: center;
+  vertical-align: middle;
+}
+
+.square {
+  height: calc(var(--theme-line-height-base) * 2rem);
+  text-align: center;
+  vertical-align: middle;
+  width: 3ch;
+}
+
+.dark {
+  background-color: var(--theme-focused-foreground);
+}
+
+.light {
+  background-color: var(--theme-focused-foreground-subdued);
+}
+
+.symbol {
+  font-size: 40px;
+  line-height: calc(var(--theme-line-height-base) * 2rem);
+}
+
+================
+File: reference/components/Chessboard.tsx
+================
+'use client';
+
+import styles from '@components/Chessboard.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+const FILE = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];
+const RANK = [8, 7, 6, 5, 4, 3, 2, 1];
+
+const getPieceSymbol = (piece: string) => {
+  const mapping: Record<string, string> = {
+    K: '♔',
+    Q: '♕',
+    R: '♖',
+    B: '♗',
+    N: '♘',
+    P: '♙',
+    k: '♚',
+    q: '♛',
+    r: '♜',
+    b: '♝',
+    n: '♞',
+    p: '♟',
+  };
+  return mapping[piece] || '';
+};
+
+interface ChessboardProps {
+  board: string[][];
+}
+
+const Chessboard: React.FC<ChessboardProps> = ({ board }) => {
+  return (
+    <table className={styles.board}>
+      <tbody>
+        <tr>
+          <td className={styles.corner}></td>
+          {FILE.map((file) => (
+            <td key={file} className={styles.cell}>
+              {file}
+            </td>
+          ))}
+        </tr>
+        {RANK.map((rank, rowIndex) => (
+          <tr key={rank}>
+            <td className={styles.cell}>{rank}</td>
+            {FILE.map((_, colIndex) => {
+              const isDark = (rowIndex + colIndex) % 2 === 0;
+              const squareClass = isDark ? styles.dark : styles.light;
+              return (
+                <td key={colIndex} className={Utilities.classNames(styles.square, squareClass)}>
+                  <span className={styles.symbol}>{getPieceSymbol(board[rowIndex][colIndex])}</span>
+                </td>
+              );
+            })}
+          </tr>
+        ))}
+      </tbody>
+    </table>
+  );
+};
+
+export default Chessboard;
+
+================
+File: reference/components/CodeBlock.module.scss
+================
+.root {
+  display: block;
+  font-weight: 400;
+  overflow: auto;
+  font-family: inherit;
+  background: var(--theme-border-subdued);
+
+  &::-webkit-scrollbar {
+    display: none;
+  }
+
+  scrollbar-width: none;
+}
+
+.line {
+  display: flex;
+  justify-content: space-between;
+  align-items: flex-start;
+}
+
+.number {
+  display: inline-flex;
+  width: 3ch;
+  text-align: right;
+  padding-right: 1ch;
+  user-select: none;
+  background: var(--theme-background);
+  opacity: 0.5;
+}
+
+.content {
+  min-width: 10%;
+  width: 100%;
+  white-space: pre;
+  background: var(--theme-border-subdued);
+  padding-left: 2ch;
+}
+
+================
+File: reference/components/CodeBlock.tsx
+================
+'use client';
+
+import styles from '@components/CodeBlock.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface CodeBlockProps extends React.HTMLAttributes<HTMLPreElement> {
+  children?: React.ReactNode;
+}
+
+const CodeBlock = React.forwardRef<HTMLPreElement, CodeBlockProps>(({ children, ...rest }, ref) => {
+  return (
+    <pre className={styles.root} ref={ref} {...rest}>
+      {String(children)
+        .split('\n')
+        .map((line, index) => (
+          <div key={index} className={styles.line}>
+            <span className={styles.number}>{Utilities.leftPad(String(index + 1), 3)}</span>
+            <span className={styles.content}>{line}</span>
+          </div>
+        ))}
+    </pre>
+  );
+});
+
+CodeBlock.displayName = 'CodeBlock';
+
+export default CodeBlock;
+
+================
+File: reference/components/ComboBox.module.scss
+================
+.root {
+  padding: 0;
+}
+
+================
+File: reference/components/ComboBox.tsx
+================
+'use client';
+
+import styles from '@components/ComboBox.module.scss';
+
+import * as React from 'react';
+
+import AlertBanner from '@components/AlertBanner';
+import ButtonGroup from '@components/ButtonGroup';
+import CardDouble from '@components/CardDouble';
+import Input from '@components/Input';
+
+interface ComboBoxProps {
+  data: string[][];
+  label?: string;
+}
+
+function ComboBox({ data, label }: ComboBoxProps) {
+  const [searchTerm, setSearchTerm] = React.useState('');
+
+  const filtered = React.useMemo(() => {
+    const sliced = data.slice(1);
+    if (!searchTerm) return [];
+    return sliced.filter((entry) => entry[0].toLowerCase().includes(searchTerm.toLowerCase()));
+  }, [data, searchTerm]);
+
+  const displayed = React.useMemo(() => {
+    const sliced = data.slice(1);
+    if (filtered.length >= 5) return filtered.slice(0, 5);
+    if (filtered.length === 0 && searchTerm) return sliced.slice(0, 5);
+    if (filtered.length > 0 && filtered.length < 5) {
+      const needed = 5 - filtered.length;
+      const remainder = sliced.filter((entry) => !filtered.includes(entry));
+      return [...filtered, ...remainder.slice(0, needed)];
+    }
+    return sliced.slice(0, 5);
+  }, [filtered, data, searchTerm]);
+
+  const handleChange = React.useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
+    setSearchTerm(e.target.value);
+  }, []);
+
+  return (
+    <>
+      <div className={styles.root}>
+        <Input autoComplete="off" isBlink label={label} name="input_test_blink" value={searchTerm} onChange={handleChange} />
+      </div>
+      {displayed.map((entry) => (
+        <CardDouble key={entry[0]} title={entry[0]}>
+          <AlertBanner>{entry[1]}</AlertBanner>
+          <br />
+          <ButtonGroup isFull items={[{ body: 'FAVORITE' }, { body: 'DONATE' }, { body: 'LEARN MORE' }]} />
+        </CardDouble>
+      ))}
+    </>
+  );
+}
+
+export default ComboBox;
+
+================
+File: reference/components/ContentFluid.module.scss
+================
+.root {
+  display: block;
+  min-width: 10%;
+  width: 100%;
+  align-self: stretch;
+}
+
+================
+File: reference/components/ContentFluid.tsx
+================
+import styles from '@components/ContentFluid.module.scss';
+
+import * as React from 'react';
+
+interface ContentFluidProps extends React.HTMLAttributes<HTMLSpanElement> {
+  children?: React.ReactNode;
+}
+
+const ContentFluid: React.FC<ContentFluidProps> = ({ children, ...rest }) => {
+  return <div className={styles.root}>{children}</div>;
+};
+
+export default ContentFluid;
+
+================
+File: reference/components/DataTable.module.scss
+================
+.root {
+  position: relative;
+  width: 100%;
+  border-spacing: 0px;
+  max-width: 64ch;
+}
+
+.body {
+}
+
+.row {
+  transition: transform 0.5s ease;
+  border-spacing: 0px;
+
+  &:first-child {
+    font-weight: 400;
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    outline: 0;
+  }
+}
+
+.column {
+  border: 0;
+  outline: 0;
+  padding-right: 1ch;
+  transition: background-color 0.5s ease;
+}
+
+.changed {
+  animation: flash 2000ms ease;
+}
+
+@keyframes flash {
+  0% {
+    background-color: var(--theme-focused-foreground-subdued);
+  }
+  100% {
+    background-color: transparent;
+  }
+}
+
+================
+File: reference/components/DataTable.tsx
+================
+'use client';
+
+import styles from '@components/DataTable.module.scss';
+
+import * as React from 'react';
+
+interface TableProps {
+  data: string[][];
+}
+
+interface RGBAColor {
+  r: number;
+  g: number;
+  b: number;
+  a: number;
+}
+
+const BASE_FOREGROUND_RGBA: RGBAColor = { r: 98, g: 98, b: 98, a: 0.5 };
+const BASE_BACKGROUND_RGBA: RGBAColor = { r: 168, g: 168, b: 168, a: 0.5 };
+const ALPHA = 0.45;
+
+function interpolateColor(color1: RGBAColor, color2: RGBAColor, factor: number): RGBAColor {
+  return {
+    r: Math.round(color1.r + factor * (color2.r - color1.r)),
+    g: Math.round(color1.g + factor * (color2.g - color1.g)),
+    b: Math.round(color1.b + factor * (color2.b - color1.b)),
+    a: color1.a + factor * (color2.a - color1.a),
+  };
+}
+
+const DataTable: React.FC<TableProps> = ({ data }) => {
+  const tableRef = React.useRef<HTMLTableElement>(null);
+  const prevDataRef = React.useRef<string[][]>(data);
+
+  React.useEffect(() => {
+    const rows = tableRef.current?.querySelectorAll<HTMLTableRowElement>('tr') || [];
+    for (let i = 1; i < data.length; i++) {
+      const cells = rows[i]?.querySelectorAll<HTMLTableCellElement>('td');
+      if (!cells) continue;
+      for (let j = 0; j < data[i].length; j++) {
+        const cell = cells[j];
+        const changed = prevDataRef.current[i]?.[j] !== data[i][j];
+        if (cell && changed) {
+          cell.classList.remove(styles.changed);
+          void cell.offsetWidth;
+          cell.classList.add(styles.changed);
+        }
+      }
+    }
+    prevDataRef.current = data;
+  }, [data]);
+
+  const handleKeyDown = (event: React.KeyboardEvent<HTMLTableElement>) => {
+    const activeElement = document.activeElement;
+    if (!activeElement) return;
+    switch (event.key) {
+      case 'Enter':
+        event.preventDefault();
+        if (activeElement instanceof HTMLTableCellElement) {
+          activeElement.click();
+        }
+        break;
+      case 'ArrowUp':
+      case 'ArrowDown':
+      case 'ArrowLeft':
+      case 'ArrowRight':
+        event.preventDefault();
+        if (!(activeElement instanceof HTMLTableCellElement)) return;
+        const direction = event.key === 'ArrowUp' || event.key === 'ArrowLeft' ? 'previous' : 'next';
+        const allCells = Array.from(tableRef.current?.querySelectorAll<HTMLTableCellElement>('td') || []);
+        const currentIndex = allCells.indexOf(activeElement);
+        if (currentIndex === -1) return;
+        let nextIndex = direction === 'next' ? currentIndex + 1 : currentIndex - 1;
+        if (direction === 'previous') {
+          if (nextIndex < 0) nextIndex = allCells.length - 1;
+        } else {
+          if (nextIndex >= allCells.length) nextIndex = 0;
+        }
+        allCells[nextIndex].focus();
+        break;
+    }
+  };
+
+  const targetColorHeader: RGBAColor = { r: 255, g: 255, b: 255, a: ALPHA };
+  const targetColorData: RGBAColor = { r: 255, g: 255, b: 255, a: ALPHA };
+
+  return (
+    <table className={styles.root} ref={tableRef} onKeyDown={handleKeyDown}>
+      <tbody className={styles.body}>
+        {data.map((row, rowIndex) => (
+          <tr key={rowIndex} className={styles.row} tabIndex={0} onClick={() => alert('testing')}>
+            {row.map((cellContent, colIndex) => {
+              let backgroundColor: string;
+              if (rowIndex === 0) {
+                const lightnessFactor = row.length > 1 ? colIndex / (row.length - 1) : 0;
+                const newColor = interpolateColor(BASE_FOREGROUND_RGBA, targetColorHeader, lightnessFactor);
+                backgroundColor = `rgba(${newColor.r}, ${newColor.g}, ${newColor.b}, ${newColor.a.toFixed(2)})`;
+              } else {
+                const numRows = data.length - 1;
+                const maxIndexSum = numRows - 1 + (row.length - 1) || 1;
+                const indexSum = rowIndex - 1 + colIndex;
+                const lightnessFactor = indexSum / maxIndexSum;
+                const newColor = interpolateColor(BASE_BACKGROUND_RGBA, targetColorData, lightnessFactor);
+                backgroundColor = `rgba(${newColor.r}, ${newColor.g}, ${newColor.b}, ${newColor.a.toFixed(2)})`;
+              }
+              return (
+                <td key={colIndex} className={styles.column} style={{ backgroundColor }}>
+                  {cellContent}
+                </td>
+              );
+            })}
+          </tr>
+        ))}
+      </tbody>
+    </table>
+  );
+};
+
+export default DataTable;
+
+================
+File: reference/components/DatePicker.module.scss
+================
+.root {
+  display: inline-block;
+  user-select: none;
+}
+
+.controls {
+  align-items: center;
+  background: var(--theme-border);
+  display: flex;
+  justify-content: space-between;
+}
+
+.button {
+  align-self: stretch;
+  background: none;
+  border: none;
+  color: var(--theme-text);
+  cursor: pointer;
+  display: inline-block;
+  line-height: calc(var(--theme-line-height-base) * 1em);
+  margin: 0;
+  outline: 0;
+  padding: 0 1ch 0 1ch;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    outline: 0;
+  }
+}
+
+.date {
+  min-width: 10%;
+  padding: 0 1ch 0 1ch;
+  text-align: left;
+  width: 100%;
+}
+
+.header {
+  background: var(--theme-border);
+  display: grid;
+  grid-template-columns: repeat(7, 1fr);
+  text-align: center;
+}
+
+.days {
+  background: var(--theme-border-subdued);
+  display: grid;
+  grid-template-columns: repeat(7, 1fr);
+  grid-template-rows: repeat(6, min-content);
+  align-items: start;
+  min-height: calc(var(--theme-line-height-base) * 6em);
+}
+
+.cell {
+  outline: none;
+  padding: 0 1ch 0 1ch;
+  text-align: center;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/DatePicker.tsx
+================
+'use client';
+
+import styles from '@components/DatePicker.module.scss';
+
+import * as React from 'react';
+
+interface DatePickerProps {
+  year?: number;
+  month?: number;
+}
+
+const WEEKDAYS = ['SU', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA'];
+
+const MONTH_NAMES = [
+  'January', 'February', 'March', 'April', 'May', 'June',
+  'July', 'August', 'September', 'October', 'November', 'December'
+];
+
+const MAX_CELLS = 42;
+
+const DatePicker: React.FC<DatePickerProps> = ({ year, month }) => {
+  const today = new Date();
+  const [currentYear, setYear] = React.useState(year || today.getFullYear());
+  const [currentMonth, setMonth] = React.useState(month || today.getMonth() + 1);
+
+  const first = new Date(currentYear, currentMonth - 1, 1);
+  const startingWeekday = first.getDay();
+  const daysInMonth = new Date(currentYear, currentMonth, 0).getDate();
+
+  const cells: React.ReactNode[] = [];
+
+  for (let i = 0; i < startingWeekday; i++) {
+    cells.push(<div key={`empty-start-${i}`} className={styles.dayCell} />);
+  }
+
+  for (let day = 1; day <= daysInMonth; day++) {
+    const presentationDay = String(day).padStart(2, '0');
+    cells.push(
+      <div
+        key={day}
+        className={styles.cell}
+        tabIndex={0}
+        aria-label={`${currentYear}-${String(currentMonth).padStart(2, '0')}-${presentationDay}`}
+      >
+        {presentationDay}
+      </div>
+    );
+  }
+
+  while (cells.length < MAX_CELLS) {
+    cells.push(<div key={`empty-end-${cells.length}`} className={styles.dayCell} />);
+  }
+
+  const onSwitchPreviousMonth = () => {
+    let newMonth = currentMonth - 1;
+    let newYear = currentYear;
+    if (newMonth < 1) {
+      newMonth = 12;
+      newYear--;
+    }
+    setMonth(newMonth);
+    setYear(newYear);
+  };
+
+  const onSwitchNextMonth = () => {
+    let newMonth = currentMonth + 1;
+    let newYear = currentYear;
+    if (newMonth > 12) {
+      newMonth = 1;
+      newYear++;
+    }
+    setMonth(newMonth);
+    setYear(newYear);
+  };
+
+  return (
+    <div className={styles.root}>
+      <div className={styles.controls}>
+        <button type="button" className={styles.button} onClick={onSwitchPreviousMonth} aria-label="Previous month">
+          ▲
+        </button>
+        <div className={styles.date}>
+          {currentYear} {MONTH_NAMES[currentMonth - 1].toUpperCase()}
+        </div>
+        <button type="button" className={styles.button} onClick={onSwitchNextMonth} aria-label="Next month">
+          ▼
+        </button>
+      </div>
+      <div className={styles.header}>
+        {WEEKDAYS.map((day) => (
+          <div key={day} className={styles.cell}>
+            {day}
+          </div>
+        ))}
+      </div>
+      <div className={styles.days}>{cells}</div>
+    </div>
+  );
+};
+
+export default DatePicker;
+
+================
+File: reference/components/DebugGrid.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+const DebugGrid: React.FC = () => {
+  React.useEffect(() => {
+    const debugGrid = document.createElement('div');
+    let isVisible = false;
+
+    const setGridHeight = () => {
+      debugGrid.style.height = `${document.documentElement.scrollHeight}px`;
+    };
+
+    Object.assign(debugGrid.style, {
+      position: 'absolute',
+      top: '0',
+      left: '0',
+      right: '0',
+      zIndex: '-1',
+      margin: '0',
+      backgroundImage: `
+        repeating-linear-gradient(var(--theme-border) 0 1px, transparent 1px 100%),
+        repeating-linear-gradient(90deg, var(--theme-border) 0 1px, transparent 1px 100%)
+      `,
+      backgroundSize: '1ch 1.25rem',
+      pointerEvents: 'none',
+      display: 'none',
+    });
+
+    document.body.appendChild(debugGrid);
+    setGridHeight();
+
+    const toggleDebugGrid = () => {
+      isVisible = !isVisible;
+      debugGrid.style.display = isVisible ? 'block' : 'none';
+    };
+
+    const handleDebugGridToggle = () => toggleDebugGrid();
+
+    const observer = new ResizeObserver(() => {
+      setGridHeight();
+    });
+    observer.observe(document.documentElement);
+
+    window.addEventListener('debugGridToggle', handleDebugGridToggle);
+    window.addEventListener('resize', setGridHeight);
+
+    return () => {
+      document.body.removeChild(debugGrid);
+      window.removeEventListener('resize', setGridHeight);
+      window.removeEventListener('debugGridToggle', handleDebugGridToggle);
+      observer.disconnect();
+    };
+  }, []);
+
+  return null;
+};
+
+export const toggleDebugGrid = (): void => {
+  window.dispatchEvent(new CustomEvent('debugGridToggle'));
+};
+
+export default DebugGrid;
+
+================
+File: reference/components/DefaultMetaTags.tsx
+================
+export default function DefaultMetaTags() {
+  return (
+    <>
+      <meta httpEquiv="content-language" content="en-us" />
+      <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0" />
+      <link rel="icon" type="image/png" sizes="32x32" href="/favicon-16x16.png" />
+      <link rel="icon" type="image/png" sizes="16x16" href="/favicon-32x32.png" />
+      <link rel="shortcut icon" href="/favicon.ico" />
+    </>
+  );
+}
+
+================
+File: reference/components/Dialog.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border);
+  box-shadow: 1ch 1ch 0 0 var(--theme-border-subdued);
+  font-weight: 400;
+  max-width: 56ch;
+  min-width: 24ch;
+  margin: 0;
+  padding: 0;
+}
+
+.header {
+  background: var(--theme-text);
+  color: var(--theme-background);
+  text-align: center;
+  margin: 0;
+  padding: 0;
+  display: block;
+}
+
+.message {
+  display: block;
+  margin: 0;
+  text-align: center;
+  padding: 0 2ch 0 2ch;
+}
+
+.actions {
+  display: flex;
+  justify-content: space-between;
+  align-items: center;
+  max-width: 24ch;
+  margin: 0 auto 0 auto;
+  padding: 0 2ch 0 2ch;
+}
+
+================
+File: reference/components/Dialog.tsx
+================
+import styles from '@components/Dialog.module.scss';
+
+import * as React from 'react';
+
+import Block from '@components/Block';
+import Button from '@components/Button';
+
+interface DialogProps {
+  title?: React.ReactNode;
+  children?: React.ReactNode;
+  style?: React.CSSProperties;
+  onConfirm?: () => void;
+  onCancel?: () => void;
+}
+
+const Dialog: React.FC<DialogProps> = ({ title, children, style, onConfirm, onCancel }) => {
+  const titleId = React.useId();
+  const descId = React.useId();
+
+  return (
+    <div className={styles.root} style={style} role="dialog" aria-modal="true" aria-labelledby={titleId} aria-describedby={descId}>
+      <header className={styles.header}>{title}</header>
+      <br />
+      <article className={styles.message} id={descId}>
+        {children}
+      </article>
+      <br />
+      <div className={styles.actions}>
+        <Button theme="SECONDARY" onClick={onConfirm}>
+          OK
+        </Button>
+        <Block style={{ opacity: 0 }} />
+        <Button theme="SECONDARY" onClick={onCancel}>
+          Cancel
+        </Button>
+      </div>
+      <br />
+    </div>
+  );
+};
+
+export default Dialog;
+
+================
+File: reference/components/Divider.module.scss
+================
+.gradient {
+  background: linear-gradient(to right, transparent, var(--theme-border), transparent);
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  width: 100%;
+}
+
+.divider {
+  align-items: center;
+  border: 0;
+  display: flex;
+  flex-direction: column;
+  flex-shrink: 0;
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  justify-content: center;
+  outline: 0;
+  width: 100%;
+}
+
+.line {
+  background: var(--theme-text);
+  display: block;
+  flex-shrink: 0;
+  height: 2px;
+  width: 100%;
+}
+
+================
+File: reference/components/Divider.tsx
+================
+import styles from '@components/Divider.module.scss';
+
+import * as React from 'react';
+
+interface DividerProps extends React.HTMLAttributes<HTMLSpanElement> {
+  children?: React.ReactNode;
+  type?: string | any;
+  style?: any;
+}
+
+const Divider: React.FC<DividerProps> = ({ children, style, type }) => {
+  if (type === 'GRADIENT') {
+    return <div className={styles.gradient} style={style} />;
+  }
+
+  if (type === 'DOUBLE') {
+    return (
+      <div className={styles.divider} style={style}>
+        <div className={styles.line} style={{ marginBottom: `2px` }} />
+        <div className={styles.line} />
+      </div>
+    );
+  }
+
+  return (
+    <div className={styles.divider} style={style}>
+      <div className={styles.line} />
+    </div>
+  );
+};
+
+export default Divider;
+
+================
+File: reference/components/Drawer.module.scss
+================
+@keyframes fadeInLeft {
+  from {
+    opacity: 0;
+  }
+  to {
+    opacity: 1;
+  }
+}
+
+.root {
+  align-self: stretch;
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+}
+
+.side {
+  animation: fadeInLeft 0.2s ease-out;
+  min-width: 10%;
+  width: 100%;
+  align-self: stretch;
+  min-width: 22ch;
+}
+
+.right {
+  flex-shrink: 0;
+  align-self: stretch;
+  background: var(--theme-background-input);
+  display: flex;
+  align-items: center;
+  width: 3ch;
+}
+
+.action {
+  display: inline-flex;
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  font-size: var(--font-size);
+  user-select: none;
+  cursor: pointer;
+  color: var(--theme-text);
+  background: var(--theme-button-foreground);
+  flex-shrink: 0;
+  align-items: center;
+  justify-content: center;
+  border: 0;
+  outline: 0;
+  margin: 0;
+  padding: 0;
+  width: 100%;
+
+  &:focus {
+    border: 0;
+    outline: 0;
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/Drawer.tsx
+================
+'use client';
+
+import styles from '@components/Drawer.module.scss';
+
+import * as React from 'react';
+
+interface DrawerProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'defaultValue'> {
+  children?: React.ReactNode;
+  defaultValue?: boolean;
+}
+
+const Drawer: React.FC<DrawerProps> = ({ children, defaultValue = false, ...rest }) => {
+  const [expand, setExpand] = React.useState<boolean>(defaultValue);
+
+  return (
+    <div className={styles.root} {...rest}>
+      {expand ? <div className={styles.side}>{children}</div> : null}
+      <div className={styles.right}>
+        <button className={styles.action} onClick={() => setExpand(!expand)}>
+          {expand ? '⭠' : '⭢'}
+        </button>
+      </div>
+    </div>
+  );
+};
+
+export default Drawer;
+
+================
+File: reference/components/DropdownMenu.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border);
+  font-weight: 400;
+}
+
+.footer {
+  background: var(--theme-background-modal-footer);
+  padding: calc(var(--font-size) * 0.5 * var(--theme-line-height-base)) 1ch calc(var(--font-size) * 0.5 * var(--theme-line-height-base)) 1ch;
+}
+
+================
+File: reference/components/DropdownMenu.tsx
+================
+import styles from '@components/DropdownMenu.module.scss';
+
+import * as React from 'react';
+
+import ActionButton from '@components/ActionButton';
+import ActionListItem from '@components/ActionListItem';
+import ModalTrigger from '@components/ModalTrigger';
+
+import { useHotkeys } from '@modules/hotkeys';
+
+interface DropdownMenuItemProps {
+  children: React.ReactNode;
+  icon?: React.ReactNode;
+  href?: string;
+  target?: string;
+  onClick?: () => void;
+  modal?: any;
+  modalProps?: Record<string, unknown>;
+}
+
+interface DropdownMenuProps extends React.HTMLAttributes<HTMLDivElement> {
+  onClose?: (event?: MouseEvent | TouchEvent | KeyboardEvent) => void;
+  items?: DropdownMenuItemProps[];
+}
+
+const DropdownMenu = React.forwardRef<HTMLDivElement, DropdownMenuProps>((props, ref) => {
+  const { onClose, items, style, ...rest } = props;
+
+  const handleHotkey = () => {
+    if (onClose) onClose();
+  };
+
+  useHotkeys('space', handleHotkey);
+
+  return (
+    <div ref={ref} className={styles.root} style={style} {...rest}>
+      {items &&
+        items.map((each, index) => {
+          if (each.modal) {
+            return (
+              <ModalTrigger key={`action-items-${index}`} modal={each.modal} modalProps={each.modalProps}>
+                <ActionListItem children={each.children} icon={each.icon} />
+              </ModalTrigger>
+            );
+          }
+
+          return (
+            <ActionListItem
+              key={`action-items-${index}`}
+              children={each.children}
+              icon={each.icon}
+              href={each.href}
+              target={each.target}
+              onClick={() => {
+                if (each.onClick) {
+                  each.onClick();
+                }
+
+                if (onClose) {
+                  onClose();
+                }
+              }}
+            />
+          );
+        })}
+
+      <footer className={styles.footer}>
+        Press space to{' '}
+        <ActionButton
+          hotkey="␣"
+          onClick={() => {
+            if (onClose) onClose();
+          }}
+        >
+          Close
+        </ActionButton>
+      </footer>
+    </div>
+  );
+});
+
+DropdownMenu.displayName = 'DropdownMenu';
+
+export default DropdownMenu;
+
+================
+File: reference/components/DropdownMenuTrigger.module.scss
+================
+.root {
+  display: inline-block;
+  position: relative;
+}
+
+================
+File: reference/components/DropdownMenuTrigger.tsx
+================
+'use client';
+
+import styles from '@components/DropdownMenuTrigger.module.scss';
+
+import * as Position from '@common/position';
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import DropdownMenu from '@components/DropdownMenu';
+import OutsideElementEvent from '@components/detectors/OutsideElementEvent';
+
+import { createPortal } from 'react-dom';
+import { useHotkeys } from '@modules/hotkeys';
+
+interface DropdownMenuTriggerProps {
+  children: React.ReactElement<React.HTMLAttributes<HTMLElement>>;
+  items: any;
+  hotkey?: string;
+}
+
+function DropdownMenuTrigger({ children, items, hotkey }: DropdownMenuTriggerProps) {
+  const [open, setOpen] = React.useState(false);
+  const [focusChildren, setFocusChildren] = React.useState(false);
+  const [willClose, setWillClose] = React.useState(false);
+  const [placement, setPlacement] = React.useState<Position.Placement>('bottom');
+  const [position, setPosition] = React.useState<{ top: number; left: number }>({ top: 0, left: 0 });
+
+  const triggerRef = React.useRef<HTMLElement>(null);
+  const elementRef = React.useRef<HTMLDivElement>(null);
+
+  const onClick = React.useCallback((event: React.MouseEvent) => {
+    event.preventDefault();
+    setOpen(true);
+  }, []);
+
+  const onOutsideEvent = React.useCallback(() => setOpen(false), []);
+  const onClose = React.useCallback(() => setWillClose(true), []);
+
+  if (hotkey) {
+    useHotkeys(hotkey, () => {
+      setOpen(!open);
+    });
+  }
+
+  React.useEffect(() => {
+    if (focusChildren) {
+      const element = elementRef.current;
+      if (element) {
+        const firstFocusable = Utilities.findFocusableDescendant(element);
+        if (firstFocusable) {
+          firstFocusable.focus();
+        } else {
+          element.focus();
+        }
+      }
+      setFocusChildren(false);
+    }
+  }, [focusChildren]);
+
+  React.useEffect(() => {
+    if (willClose) {
+      setOpen(false);
+      setWillClose(false);
+    }
+  }, [willClose]);
+
+  React.useEffect(() => {
+    if (!open || !triggerRef.current || !elementRef.current) return;
+
+    const updatePosition = () => {
+      const { placement, position } = Position.calculate(triggerRef.current!, elementRef.current!);
+      setPlacement(placement);
+      setPosition(position);
+    };
+
+    updatePosition();
+    setFocusChildren(true);
+
+    const handleResizeOrScroll = () => updatePosition();
+    const observer = new MutationObserver(() => updatePosition());
+    observer.observe(document.body, { attributes: true, childList: true, subtree: true });
+
+    window.addEventListener('resize', handleResizeOrScroll);
+    window.addEventListener('scroll', handleResizeOrScroll, true);
+
+    return () => {
+      window.removeEventListener('resize', handleResizeOrScroll);
+      window.removeEventListener('scroll', handleResizeOrScroll, true);
+      observer.disconnect();
+    };
+  }, [open]);
+
+  const element = open
+    ? createPortal(
+        <OutsideElementEvent onOutsideEvent={onOutsideEvent}>
+          <DropdownMenu
+            onClose={onClose}
+            ref={elementRef}
+            items={items}
+            style={{
+              position: 'absolute',
+              top: `${position.top}px`,
+              left: `${position.left}px`,
+              zIndex: `var(--z-index-page-dropdown-menus)`,
+            }}
+            role="dialog"
+            aria-modal="true"
+          />
+        </OutsideElementEvent>,
+        document.body
+      )
+    : null;
+
+  return (
+    <div className={styles.root}>
+      {React.cloneElement(children, {
+        tabIndex: 0,
+        onClick,
+        // @ts-ignore
+        ref: triggerRef,
+      })}
+      {element}
+    </div>
+  );
+}
+
+export default DropdownMenuTrigger;
+
+================
+File: reference/components/Grid.module.scss
+================
+.grid {
+  display: block;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+}
+
+================
+File: reference/components/Grid.tsx
+================
+import styles from '@components/Grid.module.scss';
+
+import * as React from 'react';
+
+interface GridProps extends React.HTMLAttributes<HTMLDivElement> {
+  children?: React.ReactNode;
+}
+
+const Grid: React.FC<GridProps> = ({ children, ...rest }) => {
+  return (
+    <div className={styles.grid} {...rest}>
+      {children}
+    </div>
+  );
+};
+
+export default Grid;
+
+================
+File: reference/components/HoverComponentTrigger.module.scss
+================
+.root {
+  display: inline-block;
+  position: relative;
+}
+
+================
+File: reference/components/HoverComponentTrigger.tsx
+================
+'use client';
+
+import styles from '@components/HoverComponentTrigger.module.scss';
+
+import * as React from 'react';
+import * as Position from '@common/position';
+
+import OutsideElementEvent from '@components/detectors/OutsideElementEvent';
+import Popover from '@components/Popover';
+import Tooltip from '@components/Tooltip';
+
+import { createPortal } from 'react-dom';
+
+interface HoverComponentTriggerProps {
+  children: React.ReactElement<React.HTMLAttributes<HTMLElement>>;
+  text: string;
+  component: 'popover' | 'tooltip';
+}
+
+function HoverComponentTrigger({ children, text, component }: HoverComponentTriggerProps) {
+  const [open, setOpen] = React.useState(false);
+  const [placement, setPlacement] = React.useState<Position.Placement>('bottom');
+  const [position, setPosition] = React.useState<{ top: number; left: number }>({ top: 0, left: 0 });
+
+  const triggerRef = React.useRef<HTMLDivElement>(null);
+  const popoverRef = React.useRef<HTMLDivElement>(null);
+
+  const onMouseEnter = () => setOpen(true);
+  const onClick = () => setOpen(true);
+  const onHandleFocus = () => setOpen(true);
+  const onOutsideEvent = () => setOpen(false);
+
+  React.useEffect(() => {
+    if (!open || !triggerRef.current || !popoverRef.current) return;
+
+    const updatePosition = () => {
+      const { placement, position } = Position.calculate(triggerRef.current!, popoverRef.current!);
+      setPlacement(placement);
+      setPosition(position);
+    };
+
+    updatePosition();
+
+    const handleResizeOrScroll = () => updatePosition();
+
+    const mutationObserver = new MutationObserver(() => updatePosition());
+    mutationObserver.observe(document.body, { attributes: true, childList: true, subtree: true });
+
+    window.addEventListener('resize', handleResizeOrScroll);
+    window.addEventListener('scroll', handleResizeOrScroll, true);
+
+    return () => {
+      window.removeEventListener('resize', handleResizeOrScroll);
+      window.removeEventListener('scroll', handleResizeOrScroll, true);
+      mutationObserver.disconnect();
+    };
+  }, [open]);
+
+  const renderComponent = () => {
+    if (component === 'popover') {
+      return (
+        <Popover
+          ref={popoverRef}
+          style={{
+            position: 'absolute',
+            top: `${position.top}px`,
+            left: `${position.left}px`,
+            zIndex: `var(--z-index-page-popover)`,
+          }}
+          role="dialog"
+          aria-modal="true"
+        >
+          {text}
+        </Popover>
+      );
+    } else if (component === 'tooltip') {
+      return (
+        <Tooltip
+          ref={popoverRef}
+          style={{
+            position: 'absolute',
+            top: `${position.top}px`,
+            left: `${position.left}px`,
+            zIndex: `var(--z-index-page-tooltip)`,
+          }}
+        >
+          {text}
+        </Tooltip>
+      );
+    }
+    return null;
+  };
+
+  const popoverElement = open ? createPortal(<OutsideElementEvent onOutsideEvent={onOutsideEvent}>{renderComponent()}</OutsideElementEvent>, document.body) : null;
+
+  return (
+    <div ref={triggerRef} className={styles.root} data-detector-ignore onMouseEnter={onMouseEnter} onClick={onClick} onFocus={onHandleFocus}>
+      {React.cloneElement(children, {
+        tabIndex: 0,
+      })}
+      {popoverElement}
+    </div>
+  );
+}
+
+export default HoverComponentTrigger;
+
+================
+File: reference/components/Indent.module.scss
+================
+.root {
+  display: block;
+  padding: 0 0 0 1ch;
+}
+
+================
+File: reference/components/Indent.tsx
+================
+import styles from '@components/Indent.module.scss';
+
+import * as React from 'react';
+
+interface IndentProps extends React.HTMLAttributes<HTMLDivElement> {
+  children?: React.ReactNode;
+}
+
+const Indent: React.FC<IndentProps> = ({ children, ...rest }) => {
+  return (
+    <div className={styles.root} {...rest}>
+      {children}
+    </div>
+  );
+};
+
+export default Indent;
+
+================
+File: reference/components/Input.module.scss
+================
+.root {
+  position: relative;
+  display: block;
+}
+
+.label {
+  background: var(--theme-border);
+  display: block;
+}
+
+.placeholder {
+  font-style: italic;
+  color: var(--theme-overlay);
+}
+
+.displayed {
+  overflow: hidden;
+  white-space: nowrap;
+  pointer-events: none;
+  overflow-wrap: anywhere;
+  background: var(--theme-background-input);
+  box-shadow: inset 0 0 0 2px var(--theme-border);
+}
+
+.focused {
+  .block {
+    background: var(--theme-focused-foreground);
+  }
+
+  .placeholder {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+@keyframes blink {
+  50% {
+    opacity: 0;
+  }
+}
+
+.blink {
+  animation: blink 1s step-start 0s infinite;
+}
+
+.block {
+  display: inline-block;
+  min-width: 1ch;
+  background: var(--theme-text);
+  color: var(--theme-background);
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  vertical-align: bottom;
+}
+
+.inputContainer {
+  position: relative;
+  display: block;
+}
+
+.hidden {
+  position: absolute;
+  top: 0;
+  left: 0;
+  width: 100%;
+  color: transparent;
+  background: transparent;
+  caret-color: transparent;
+  border: none;
+  outline: none;
+  overflow: hidden;
+  padding: 0;
+  margin: 0;
+  line-height: var(--theme-line-height-base);
+  font-size: var(--font-size);
+  font-family: inherit;
+
+  &:-webkit-autofill {
+    -webkit-box-shadow: 0 0 0px 1000px var(--theme-focused-foreground) inset;
+  }
+}
+
+================
+File: reference/components/Input.tsx
+================
+'use client';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import styles from '@components/Input.module.scss';
+
+type InputProps = React.InputHTMLAttributes<HTMLInputElement> & {
+  caretChars?: string | any;
+  label?: string | any;
+  isBlink?: boolean;
+};
+
+function Input({ caretChars, isBlink = true, label, placeholder, onChange, type, id, ...rest }: InputProps) {
+  const generatedId = React.useId();
+  const inputId = id || generatedId;
+
+  const inputRef = React.useRef<HTMLInputElement | null>(null);
+  const [text, setText] = React.useState<string>(rest.defaultValue?.toString() || rest.value?.toString() || '');
+  const [isFocused, setIsFocused] = React.useState<boolean>(false);
+  const [selectionStart, setSelectionStart] = React.useState<number>(text.length);
+
+  const lastFocusDirectionRef = React.useRef<'up' | 'down' | null>(null);
+
+  React.useEffect(() => {
+    if (rest.value !== undefined) {
+      const val = rest.value.toString();
+      setText(val);
+      setSelectionStart(val.length);
+    }
+  }, [rest.value]);
+
+  const onHandleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
+    const value = e.target.value;
+    setText(value);
+    if (onChange) {
+      onChange(e);
+    }
+    setSelectionStart(e.target.selectionStart ?? value.length);
+  };
+
+  const onHandleFocus = () => {
+    setIsFocused(true);
+    if (!inputRef.current) return;
+
+    if (lastFocusDirectionRef.current === 'down') {
+      setSelectionStart(text.length);
+      inputRef.current.setSelectionRange(text.length, text.length);
+    } else if (lastFocusDirectionRef.current === 'up') {
+      setSelectionStart(0);
+      inputRef.current.setSelectionRange(0, 0);
+    }
+  };
+
+  const onHandleBlur = () => {
+    setIsFocused(false);
+  };
+
+  const onHandleSelect = (e: React.SyntheticEvent<HTMLInputElement>) => {
+    const inputEl = e.currentTarget as HTMLInputElement;
+    setSelectionStart(inputEl.selectionStart ?? text.length);
+  };
+
+  const onHandleClick = (e: React.MouseEvent<HTMLInputElement>) => {
+    const inputEl = e.currentTarget as HTMLInputElement;
+    inputEl.focus();
+    setSelectionStart(inputEl.selectionStart ?? text.length);
+  };
+
+  const onHandleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
+    if (e.key === 'ArrowUp') {
+      e.preventDefault();
+      lastFocusDirectionRef.current = 'up';
+      const previousFocusable = Utilities.findNextFocusable(document.activeElement, 'previous');
+      previousFocusable?.focus();
+    } else if (e.key === 'ArrowDown') {
+      e.preventDefault();
+      lastFocusDirectionRef.current = 'down';
+      const nextFocusable = Utilities.findNextFocusable(document.activeElement, 'next');
+      nextFocusable?.focus();
+    }
+  };
+
+  const isPlaceholderVisible = !text && placeholder;
+  const containerClasses = Utilities.classNames(styles.root, isFocused && styles.focused);
+
+  const maskText = (t: string) => (type === 'password' ? '•'.repeat(t.length) : t);
+
+  const beforeCaretText = isPlaceholderVisible ? placeholder ?? '' : maskText(text.substring(0, selectionStart));
+  const afterCaretText = isPlaceholderVisible ? '' : maskText(text.substring(selectionStart));
+
+  return (
+    <div className={containerClasses}>
+      {label && (
+        <label htmlFor={inputId} className={styles.label}>
+          {label}
+        </label>
+      )}
+      <div className={styles.inputContainer}>
+        <div className={Utilities.classNames(styles.displayed, isPlaceholderVisible && styles.placeholder)}>
+          {beforeCaretText}
+          {!isPlaceholderVisible && <span className={Utilities.classNames(styles.block, isBlink && styles.blink)}>{caretChars || ''}</span>}
+          {!isPlaceholderVisible && afterCaretText}
+        </div>
+        <input id={inputId} ref={inputRef} className={styles.hidden} value={text} aria-placeholder={placeholder} type={type} onFocus={onHandleFocus} onBlur={onHandleBlur} onChange={onHandleChange} onSelect={onHandleSelect} onClick={onHandleClick} onKeyDown={onHandleKeyDown} {...rest} />
+      </div>
+    </div>
+  );
+}
+
+export default Input;
+
+================
+File: reference/components/ListItem.module.scss
+================
+.root {
+  padding-left: 1ch;
+
+  &:focus {
+    outline: 0;
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/ListItem.tsx
+================
+'use client';
+
+import styles from '@components/ListItem.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+const ListItem = ({ children }) => {
+  const itemRef = React.useRef<HTMLLIElement>(null);
+
+  const handleKeyDown = (event: React.KeyboardEvent<HTMLLIElement>) => {
+    switch (event.key) {
+      case 'Enter':
+        event.preventDefault();
+        itemRef.current?.click();
+        break;
+      case 'ArrowUp':
+      case 'ArrowLeft': {
+        event.preventDefault();
+        const previousFocusable = Utilities.findNextFocusable(document.activeElement, 'previous');
+        previousFocusable?.focus();
+        break;
+      }
+      case 'ArrowDown':
+      case 'ArrowRight': {
+        event.preventDefault();
+        const nextFocusable = Utilities.findNextFocusable(document.activeElement, 'next');
+        nextFocusable?.focus();
+        break;
+      }
+      default:
+        break;
+    }
+  };
+
+  return (
+    <li className={styles.root} tabIndex={0} ref={itemRef} onKeyDown={handleKeyDown}>
+      {children}
+    </li>
+  );
+};
+
+export default ListItem;
+
+================
+File: reference/components/MatrixLoader.module.scss
+================
+.container {
+  width: 100%;
+  height: auto;
+  position: relative;
+}
+
+.root {
+  display: block;
+  width: 100%;
+  background: transparent;
+}
+
+================
+File: reference/components/MatrixLoader.tsx
+================
+'use client';
+
+import styles from '@components/MatrixLoader.module.scss';
+
+import * as React from 'react';
+
+interface MatrixLoaderProps {
+  rows?: number;
+  direction?: undefined | 'top-to-bottom' | 'left-to-right';
+  mode?: undefined | 'greek' | 'katakana';
+}
+
+// TODO(jimmylee)
+// Move these constants into a separate file
+// Dynamically compute these constants since we're going to
+// Support t-shirt sizes for the system.
+const LINE_HEIGHT = 20;
+const CHARACTER_WIDTH = 9.6;
+
+function onTextGeneration({ mode = 'greek' }) {
+  if (mode === 'greek') {
+    const isUppercase = Math.random() < 0.5;
+
+    return String.fromCharCode(isUppercase ? 0x0391 + Math.floor(Math.random() * (0x03a9 - 0x0391 + 1)) : 0x03b1 + Math.floor(Math.random() * (0x03c9 - 0x03b1 + 1)));
+  }
+
+  if (mode === 'katakana') {
+    const japaneseRanges = [{ start: 0x30a0, end: 0x30ff }];
+
+    const allJapaneseCharacters = japaneseRanges.flatMap((range) => Array.from({ length: range.end - range.start + 1 }, (_, i) => range.start + i));
+
+    const randomJapaneseCharacter = allJapaneseCharacters[Math.floor(Math.random() * allJapaneseCharacters.length)];
+    return String.fromCharCode(randomJapaneseCharacter);
+  }
+
+  return '0';
+}
+
+const MatrixLoader: React.FC<MatrixLoaderProps> = ({ rows = 25, direction = 'top-to-bottom', mode = 'greek' }) => {
+  const canvasRef = React.useRef<HTMLCanvasElement>(null);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const parent = canvas.parentElement;
+    if (!parent) return;
+
+    const resizeCanvas = () => {
+      const parentWidth = parent.clientWidth;
+      const parentHeight = rows * LINE_HEIGHT;
+
+      const dpr = window.devicePixelRatio || 1;
+
+      canvas.style.width = parentWidth + 'px';
+      canvas.style.height = parentHeight + 'px';
+      canvas.width = Math.floor(parentWidth * dpr);
+      canvas.height = Math.floor(parentHeight * dpr);
+
+      const ctx = canvas.getContext('2d');
+      if (ctx) {
+        ctx.scale(dpr, dpr);
+      }
+    };
+
+    resizeCanvas();
+
+    window.addEventListener('resize', resizeCanvas);
+
+    return () => {
+      window.removeEventListener('resize', resizeCanvas);
+    };
+  }, [rows]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+    const ctx = canvas.getContext('2d');
+    if (!ctx) return;
+
+    let interval: number;
+
+    const drawMatrix = () => {
+      const w = canvas.width;
+      const h = canvas.height;
+
+      if (direction === 'top-to-bottom') {
+        const cols = Math.floor(w / CHARACTER_WIDTH);
+        const ypos: number[] = Array(cols).fill(0);
+
+        const matrix = () => {
+          const themeTextColor = getComputedStyle(document.body).getPropertyValue('--theme-text').trim();
+          const fontFamily = getComputedStyle(document.body).getPropertyValue('--font-family-mono').trim();
+
+          ctx.globalCompositeOperation = 'destination-out';
+          ctx.fillStyle = 'rgba(255, 255, 255, 0.05)';
+          ctx.fillRect(0, 0, w, h);
+          ctx.textBaseline = 'top';
+          ctx.font = `16px ${fontFamily}`;
+
+          ctx.globalCompositeOperation = 'source-over';
+
+          ypos.forEach((y, ind) => {
+            const text = onTextGeneration({ mode });
+            const x = ind * CHARACTER_WIDTH;
+
+            ctx.fillStyle = themeTextColor;
+            ctx.fillText(text, x, y);
+
+            if (y > h + Math.random() * 10000) {
+              ypos[ind] = 0;
+            } else {
+              ypos[ind] = y + LINE_HEIGHT;
+            }
+          });
+        };
+
+        interval = window.setInterval(matrix, 50);
+      } else if (direction === 'left-to-right') {
+        const totalRows = rows; // Use rows directly for total rows
+        const xpos: number[] = Array(totalRows).fill(0);
+
+        const matrix = () => {
+          const themeTextColor = getComputedStyle(document.body).getPropertyValue('--theme-text').trim();
+          const fontFamily = getComputedStyle(document.body).getPropertyValue('--font-family-mono').trim();
+
+          ctx.globalCompositeOperation = 'destination-out';
+          ctx.fillStyle = 'rgba(255, 255, 255, 0.05)';
+          ctx.fillRect(0, 0, w, h);
+          ctx.textBaseline = 'top';
+          ctx.font = `16px ${fontFamily}`;
+
+          ctx.globalCompositeOperation = 'source-over';
+
+          xpos.forEach((x, ind) => {
+            const text = onTextGeneration({ mode });
+            const y = ind * LINE_HEIGHT;
+
+            ctx.fillStyle = themeTextColor;
+            ctx.fillText(text, x, y);
+
+            if (x > w + Math.random() * 10000) {
+              xpos[ind] = 0;
+            } else {
+              xpos[ind] = x + CHARACTER_WIDTH;
+            }
+          });
+        };
+
+        interval = window.setInterval(matrix, 50);
+      }
+    };
+
+    drawMatrix();
+
+    return () => {
+      window.clearInterval(interval);
+    };
+  }, [rows, direction, mode]);
+
+  return (
+    <div className={styles.container}>
+      <canvas className={styles.root} ref={canvasRef} />
+    </div>
+  );
+};
+
+export default MatrixLoader;
+
+================
+File: reference/components/Message.module.scss
+================
+.message {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+  margin-bottom: calc(var(--font-size) * var(--theme-line-height-base));
+
+  &:last-child {
+    margin-bottom: 0px;
+  }
+}
+
+.left {
+  align-self: stretch;
+  flex-shrink: 0;
+  display: flex;
+  align-items: flex-end;
+  position: relative;
+}
+
+.triangle {
+  display: inline-block;
+  width: 0;
+  height: 0;
+  border-top: calc((var(--font-size) * var(--theme-line-height-base)) / 2) solid transparent;
+  border-bottom: calc((var(--font-size) * var(--theme-line-height-base)) / 2) solid transparent;
+  border-right: 1ch solid var(--theme-border);
+  margin-bottom: calc((var(--font-size) * var(--theme-line-height-base)) / 2);
+}
+
+.right {
+  min-width: 10%;
+  width: 100%;
+  text-align: left;
+}
+
+.bubble {
+  padding: calc(8px * var(--theme-line-height-base)) 1ch calc(8px * var(--theme-line-height-base)) 1ch;
+  background: var(--theme-border);
+  display: inline-block;
+  box-shadow: 1ch 1ch 0 0 var(--theme-border-subdued);
+}
+
+================
+File: reference/components/Message.tsx
+================
+import styles from '@components/Message.module.scss';
+
+export default function Message(props) {
+  return (
+    <div className={styles.message}>
+      <div className={styles.left}>
+        <figure className={styles.triangle} />
+      </div>
+      <div className={styles.right}>
+        <div className={styles.bubble}>{props.children}</div>
+      </div>
+    </div>
+  );
+}
+
+================
+File: reference/components/MessageViewer.module.scss
+================
+.message {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+  margin-bottom: calc(var(--font-size) * var(--theme-line-height-base));
+}
+
+.bubble {
+  display: inline-block;
+  background: var(--theme-focused-foreground);
+  padding: calc(8px * var(--theme-line-height-base)) 1ch calc(8px * var(--theme-line-height-base)) 1ch;
+}
+
+.left {
+  min-width: 10%;
+  width: 100%;
+  text-align: right;
+}
+
+.right {
+  align-self: stretch;
+  flex-shrink: 0;
+  display: flex;
+  align-items: flex-end;
+}
+
+.triangle {
+  display: inline-block;
+  width: 0;
+  height: 0;
+  border-top: calc((var(--font-size) * var(--theme-line-height-base)) / 2) solid transparent;
+  border-bottom: calc((var(--font-size) * var(--theme-line-height-base)) / 2) solid transparent;
+  border-left: 1ch solid var(--theme-focused-foreground);
+  margin-bottom: calc((var(--font-size) * var(--theme-line-height-base)) / 2);
+}
+
+================
+File: reference/components/MessageViewer.tsx
+================
+import styles from '@components/MessageViewer.module.scss';
+
+export default function MessageViewer(props) {
+  return (
+    <div className={styles.message}>
+      <div className={styles.left}>
+        <div className={styles.bubble}>{props.children}</div>
+      </div>
+      <div className={styles.right}>
+        <figure className={styles.triangle} />
+      </div>
+    </div>
+  );
+}
+
+================
+File: reference/components/ModalStack.module.scss
+================
+.root {
+  align-items: center;
+  bottom: 0;
+  display: flex;
+  justify-content: center;
+  left: 0;
+  pointer-events: none;
+  position: fixed;
+  right: 0;
+  top: 0;
+  z-index: var(--z-index-page-modals);
+}
+
+.item {
+  pointer-events: auto;
+  position: absolute;
+  transition:
+    opacity 0.2s ease,
+    transform 0.4s ease;
+}
+
+================
+File: reference/components/ModalStack.tsx
+================
+'use client';
+
+import styles from '@components/ModalStack.module.scss';
+
+import * as React from 'react';
+
+import { useModals } from '@components/page/ModalContext';
+
+interface ModalStackProps {}
+
+const ModalStack: React.FC<ModalStackProps> = () => {
+  const { modalStack } = useModals();
+
+  const totalModals = modalStack.length;
+
+  return (
+    <div className={styles.root}>
+      {modalStack.map((modalState, index) => {
+        const { key, component: ModalComponent, props } = modalState;
+
+        const offsetFromLast = totalModals - 1 - index;
+        const translateY = -offsetFromLast * 40;
+        const blur = offsetFromLast * 1.1;
+
+        return (
+          <div
+            key={key}
+            className={styles.item}
+            style={{
+              zIndex: 10 + index,
+              transform: `translateY(${translateY}px)`,
+              filter: `blur(${blur}px)`,
+            }}
+          >
+            <ModalComponent {...props} />
+          </div>
+        );
+      })}
+    </div>
+  );
+};
+
+export default ModalStack;
+
+================
+File: reference/components/ModalTrigger.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+import { useModals } from '@components/page/ModalContext';
+
+interface ModalTriggerProps {
+  children: React.ReactElement<{ onClick?: React.MouseEventHandler }>;
+  modal: React.ComponentType<any>;
+  modalProps?: Record<string, any>;
+}
+
+function ModalTrigger({ children, modal, modalProps = {} }: ModalTriggerProps) {
+  const { open } = useModals();
+
+  const onHandleOpenModal = () => {
+    open(modal, modalProps);
+  };
+
+  return React.cloneElement(children, {
+    onClick: onHandleOpenModal,
+  });
+}
+
+export default ModalTrigger;
+
+================
+File: reference/components/Navigation.module.scss
+================
+.root {
+  display: flex;
+  align-items: center;
+  justify-content: space-between;
+  background: var(--theme-border);
+}
+
+.logo {
+  flex-shrink: 0;
+  padding: 0 1ch 0 1ch;
+  display: inline-flex;
+  color: var(--theme-text);
+  background: var(--theme-border);
+  text-decoration: none;
+  border: 0;
+  outline: 0;
+  border-radius: 0;
+  margin: 0;
+  font-size: var(--font-size);
+
+  &:visited {
+    color: var(--theme-text);
+  }
+
+  &:hover {
+    color: var(--theme-text);
+    background: var(--theme-focused-foreground);
+  }
+
+  &:focus {
+    outline: 0;
+    border: 0;
+    margin: 0;
+    padding: 0 1ch 0 1ch;
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.left {
+  flex-shrink: 0;
+}
+
+.children {
+  min-width: 10%;
+  width: 100%;
+}
+
+.right {
+  flex-shrink: 0;
+}
+
+================
+File: reference/components/Navigation.tsx
+================
+'use client';
+
+import styles from '@components/Navigation.module.scss';
+
+import * as React from 'react';
+
+interface NavigationProps extends React.HTMLAttributes<HTMLElement> {
+  children?: React.ReactNode;
+  logoHref?: string;
+  logoTarget?: React.HTMLAttributeAnchorTarget;
+  onClickLogo?: React.MouseEventHandler<HTMLButtonElement>;
+  logo?: React.ReactNode;
+  left?: React.ReactNode;
+  right?: React.ReactNode;
+}
+
+const Navigation: React.FC<NavigationProps> = ({ children, logoHref, logoTarget, onClickLogo, logo, left, right }) => {
+  let logoElement = <button className={styles.logo}>{logo}</button>;
+
+  if (onClickLogo) {
+    logoElement = (
+      <button className={styles.logo} onClick={onClickLogo}>
+        {logo}
+      </button>
+    );
+  }
+
+  if (logoHref) {
+    logoElement = (
+      <a href={logoHref} className={styles.logo} target={logoTarget}>
+        {logo}
+      </a>
+    );
+  }
+
+  return (
+    <nav className={styles.root}>
+      {logoElement}
+      <section className={styles.left}>{left}</section>
+      <section className={styles.children}>{children}</section>
+      <section className={styles.right}>{right}</section>
+    </nav>
+  );
+};
+
+export default Navigation;
+
+================
+File: reference/components/NumberRangeSlider.module.scss
+================
+.root {
+  display: flex;
+  align-items: center;
+  justify-content: space-between;
+}
+
+.amount {
+  flex-shrink: 0;
+  background: var(--theme-text);
+  color: var(--theme-background);
+  font-weight: 400;
+  padding: 0 1ch 0 1ch;
+}
+
+.slider {
+  border-radius: 0;
+  display: block;
+  margin: 0;
+  padding: 0;
+  width: 100%;
+  min-width: 10%;
+
+  -webkit-appearance: none;
+  -moz-appearance: none;
+  appearance: none;
+
+  background: var(--theme-border-subdued);
+
+  &:focus {
+    background: linear-gradient(to right, transparent, var(--theme-focused-foreground));
+    outline: none;
+  }
+
+  &:hover {
+    background: linear-gradient(to right, transparent, var(--theme-focused-foreground));
+    cursor: pointer;
+  }
+
+  &::-webkit-slider-thumb {
+    -webkit-appearance: none;
+    appearance: none;
+    font-size: var(--font-size);
+    width: 1ch;
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: var(--theme-button-foreground);
+    vertical-align: bottom;
+    cursor: pointer;
+    border-radius: 0;
+  }
+
+  /* Customizing the track */
+  &::-webkit-slider-runnable-track {
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: var(--theme-border-subdued);
+    border-radius: 0;
+  }
+
+  &::-moz-range-thumb {
+    -moz-appearance: none;
+    appearance: none;
+    font-size: var(--font-size);
+    width: 1ch;
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: var(--theme-button-foreground);
+    vertical-align: bottom;
+    cursor: pointer;
+    border: none;
+    border-radius: 0;
+  }
+
+  &::-moz-range-track {
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: var(--theme-border-subdued);
+    border-radius: 0;
+  }
+
+  &::-ms-thumb {
+    appearance: none;
+    font-size: var(--font-size);
+    width: 1ch;
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: var(--theme-button-foreground);
+    vertical-align: bottom;
+    cursor: pointer;
+    border: none;
+    border-radius: 0;
+  }
+
+  &::-ms-track {
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: transparent;
+    border-color: transparent;
+    color: transparent;
+  }
+
+  &::-ms-fill-lower {
+    background: var(--theme-border-subdued);
+  }
+
+  &::-ms-fill-upper {
+    background: var(--theme-border-subdued);
+  }
+}
+
+================
+File: reference/components/NumberRangeSlider.tsx
+================
+'use client';
+
+import styles from '@components/NumberRangeSlider.module.scss';
+
+import * as React from 'react';
+
+interface RangerProps {
+  defaultValue?: number;
+  max?: number;
+  min?: number;
+  step?: number;
+}
+
+const NumberRangeSlider: React.FC<RangerProps> = ({ defaultValue = 0, max = 5000, min = 0, step = 1 }) => {
+  const sliderRef = React.useRef<HTMLInputElement>(null);
+  const [displayValue, setDisplayValue] = React.useState<number>(defaultValue);
+
+  const maxDigits = max.toString().length;
+
+  const padValue = (value: number): string => {
+    return value.toString().padStart(maxDigits, '0');
+  };
+
+  React.useEffect(() => {
+    if (sliderRef.current) {
+      sliderRef.current.value = String(defaultValue);
+    }
+    setDisplayValue(defaultValue);
+  }, [defaultValue]);
+
+  const scrub = (event: React.ChangeEvent<HTMLInputElement>): void => {
+    const value = parseInt(event.target.value, 10);
+    setDisplayValue(value);
+  };
+
+  return (
+    <div className={styles.root}>
+      <label className={styles.left}>
+        <div className={styles.amount}>{padValue(displayValue)}</div>
+      </label>
+      <input className={styles.slider} defaultValue={defaultValue} max={max} min={min} onChange={scrub} ref={sliderRef} role="slider" step={step} tabIndex={0} type="range" />
+    </div>
+  );
+};
+
+export default NumberRangeSlider;
+
+================
+File: reference/components/Popover.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  font-weight: 400;
+}
+
+================
+File: reference/components/Popover.tsx
+================
+import styles from '@components/Popover.module.scss';
+
+import * as React from 'react';
+
+interface PopoverProps extends React.HTMLAttributes<HTMLDivElement> {}
+
+const Popover = React.forwardRef<HTMLDivElement, PopoverProps>(({ style: propStyle, ...rest }, ref) => {
+  const style: React.CSSProperties = { ...propStyle };
+
+  return <div ref={ref} className={styles.root} {...rest} style={style} />;
+});
+
+Popover.displayName = 'Popover';
+
+export default Popover;
+
+================
+File: reference/components/Providers.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+import { ModalProvider } from '@components/page/ModalContext';
+
+interface ProvidersProps {
+  children: React.ReactNode;
+}
+
+const Providers: React.FC<ProvidersProps> = ({ children }) => {
+  return <ModalProvider>{children}</ModalProvider>;
+};
+
+export default Providers;
+
+================
+File: reference/components/RadioButton.module.scss
+================
+.section {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+  position: relative;
+
+  .right {
+    padding-bottom: calc(8px * var(--theme-line-height-base));
+    box-shadow: inset 0 1px 0 0 var(--theme-border-subdued);
+  }
+
+  &:last-child {
+    .right {
+      padding-bottom: 0;
+    }
+  }
+}
+
+.figure {
+  display: inline-flex;
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  cursor: pointer;
+  color: var(--theme-text);
+  background: var(--theme-button-foreground);
+  width: 3ch;
+  align-items: center;
+  justify-content: center;
+}
+
+.selected {
+  .figure {
+    background: var(--theme-text);
+  }
+}
+
+.dot {
+  display: inline-block;
+  width: 1ch;
+  height: 1ch;
+  background: var(--theme-background);
+  transform: rotate(45deg);
+  vertical-align: middle;
+}
+
+.focused {
+  .figure {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.relative {
+  flex-shrink: 0;
+  display: inline-block;
+  vertical-align: baseline;
+}
+
+.right {
+  background: var(--theme-button-background);
+  min-width: 10%;
+  width: 100%;
+  align-self: stretch;
+}
+
+.input {
+  position: absolute;
+  height: 1px;
+  width: 1px;
+  opacity: 0;
+  background: transparent;
+  border: 0;
+  outline: 0;
+  margin: 0;
+  padding: 0;
+}
+
+================
+File: reference/components/RadioButton.tsx
+================
+import styles from '@components/RadioButton.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface RadioButtonProps {
+  style?: React.CSSProperties;
+  name: string;
+  value: string;
+  selected?: boolean;
+  onSelect?: (value: string) => void;
+  children?: React.ReactNode;
+}
+
+const RadioButton: React.FC<RadioButtonProps> = ({ style, name, value, selected = false, onSelect, children }) => {
+  const radioId = `${name}-${value}-radio`;
+  const [isFocused, setIsFocused] = React.useState(false);
+
+  const handleFocus = () => setIsFocused(true);
+  const handleBlur = () => setIsFocused(false);
+
+  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
+    switch (event.key) {
+      case 'Enter':
+        event.preventDefault();
+        onSelect?.(value);
+        break;
+      case 'ArrowUp':
+      case 'ArrowLeft':
+        event.preventDefault();
+        Utilities.findNextFocusable(document.activeElement, 'previous')?.focus();
+        break;
+      case 'Tab':
+      case 'ArrowDown':
+      case 'ArrowRight':
+        event.preventDefault();
+        Utilities.findNextFocusable(document.activeElement, 'next')?.focus();
+        break;
+      default:
+        break;
+    }
+  };
+
+  const handleChange = () => {
+    onSelect?.(value);
+  };
+
+  return (
+    <div
+      className={Utilities.classNames(styles.section, {
+        [styles.focused]: isFocused,
+        [styles.selected]: selected,
+      })}
+      style={style}
+    >
+      <input className={styles.input} id={radioId} type="radio" name={name} value={value} checked={selected} onFocus={handleFocus} onBlur={handleBlur} onKeyDown={handleKeyDown} onChange={handleChange} />
+      <div className={styles.relative}>
+        <label className={styles.figure} htmlFor={radioId}>
+          {selected ? <span aria-hidden="true" className={styles.dot} /> : null}
+        </label>
+      </div>
+      <div className={styles.right}>&nbsp;&nbsp;{children}</div>
+    </div>
+  );
+};
+
+export default RadioButton;
+
+================
+File: reference/components/RadioButtonGroup.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+import RadioButton from '@components/RadioButton';
+
+interface RadioButtonGroupProps {
+  options: { value: string; label: string }[];
+  defaultValue?: string;
+}
+
+const RadioButtonGroup: React.FC<RadioButtonGroupProps> = ({ options, defaultValue = '' }) => {
+  const [selectedValue, setSelectedValue] = React.useState<string>(defaultValue);
+
+  const handleSelect = (value: string) => {
+    setSelectedValue(value);
+  };
+
+  return (
+    <>
+      {options.map((option) => (
+        <RadioButton key={option.value} name="example" value={option.value} selected={selectedValue === option.value} onSelect={handleSelect}>
+          {option.label}
+        </RadioButton>
+      ))}
+    </>
+  );
+};
+
+export default RadioButtonGroup;
+
+================
+File: reference/components/Row.module.scss
+================
+.row {
+  display: block;
+  outline: 0;
+  border: 0;
+  transition: 200ms ease background;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/Row.tsx
+================
+'use client';
+
+import styles from '@components/Row.module.scss';
+
+import * as React from 'react';
+
+type RowProps = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const Row = React.forwardRef<HTMLElement, RowProps>(({ children, ...rest }, ref) => {
+  return (
+    <section className={styles.row} ref={ref} {...rest}>
+      {children}
+    </section>
+  );
+});
+
+Row.displayName = 'Row';
+
+export default Row;
+
+================
+File: reference/components/RowEllipsis.module.scss
+================
+.row {
+  display: block;
+  outline: 0;
+  border: 0;
+  transition: 200ms ease background;
+  white-space: nowrap;
+  overflow: hidden;
+  text-overflow: ellipsis;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/RowEllipsis.tsx
+================
+'use client';
+
+import styles from '@components/RowEllipsis.module.scss';
+
+import * as React from 'react';
+
+type RowEllipsisProps = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const RowEllipsis = React.forwardRef<HTMLElement, RowEllipsisProps>(({ children, ...rest }, ref) => {
+  return (
+    <section className={styles.row} ref={ref} {...rest}>
+      {children}
+    </section>
+  );
+});
+
+RowEllipsis.displayName = 'RowEllipsis';
+
+export default RowEllipsis;
+
+================
+File: reference/components/RowSpaceBetween.module.scss
+================
+.row {
+  display: flex;
+  justify-content: space-between;
+  outline: 0;
+  border: 0;
+  transition: 200ms ease background;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/RowSpaceBetween.tsx
+================
+'use client';
+
+import styles from '@components/RowSpaceBetween.module.scss';
+
+import * as React from 'react';
+
+type RowSpaceBetweenProps = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const RowSpaceBetween = React.forwardRef<HTMLElement, RowSpaceBetweenProps>(({ children, ...rest }, ref) => {
+  return (
+    <section className={styles.row} ref={ref} {...rest}>
+      {children}
+    </section>
+  );
+});
+
+RowSpaceBetween.displayName = 'RowSpaceBetween';
+
+export default RowSpaceBetween;
+
+================
+File: reference/components/Select.module.scss
+================
+.select {
+  align-items: flex-start;
+  cursor: default;
+  display: flex;
+  justify-content: space-between;
+  outline: none;
+  position: relative;
+  z-index: var(--z-index-page-select);
+}
+
+.control {
+  align-self: stretch;
+  background: var(--theme-button-foreground);
+  cursor: pointer;
+  flex-shrink: 0;
+  padding: 0 1ch 0 1ch;
+
+  &.focused {
+    background: var(--theme-text);
+    color: var(--theme-background);
+  }
+}
+
+.display {
+  background: var(--theme-border);
+  border: 0;
+  color: var(--theme-text);
+  cursor: pointer;
+  font-family: var(--font-family-mono);
+  font-size: var(--font-size);
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+  margin: 0;
+  min-width: 10%;
+  outline: 0;
+  padding: 0;
+  padding-left: 3ch;
+  text-align: left;
+  user-select: none;
+  width: 100%;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    border: 0;
+    outline: 0;
+  }
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.menu {
+  background-color: var(--theme-border-subdued);
+  left: 3ch;
+  list-style-type: none;
+  padding: 0;
+  right: 0;
+  z-index: var(--z-index-page-select);
+}
+
+.item {
+  border: 0;
+  cursor: pointer;
+  outline: 0;
+  padding-left: 6ch;
+  user-select: none;
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    border: 0;
+    outline: 0;
+  }
+}
+
+================
+File: reference/components/Select.tsx
+================
+'use client';
+
+import styles from '@components/Select.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface SelectProps {
+  name: string;
+  options: string[];
+  placeholder?: string;
+  defaultValue?: string;
+  onChange?: (selectedValue: string) => void;
+}
+
+const Select: React.FC<SelectProps> = ({ name, options, placeholder, defaultValue = '', onChange }) => {
+  const [isOpen, setIsOpen] = React.useState(false);
+  const [index, setIndex] = React.useState(-1);
+  const [selectedValue, setSelectedValue] = React.useState(defaultValue);
+
+  const containerRef = React.useRef<HTMLButtonElement | null>(null);
+
+  const handleOpen = () => {
+    setIsOpen(true);
+    const currentIndex = options.indexOf(selectedValue);
+    setIndex(currentIndex >= 0 ? currentIndex : 0);
+  };
+
+  const handleClose = () => {
+    setIsOpen(false);
+    setIndex(-1);
+
+    if (containerRef && containerRef.current) {
+      containerRef.current?.focus();
+    }
+  };
+
+  const handleSelect = (value: string) => {
+    setSelectedValue(value);
+    onChange?.(value);
+    handleClose();
+  };
+
+  return (
+    <>
+      <section className={styles.select}>
+        <figure
+          className={Utilities.classNames(isOpen ? styles.focused : null, styles.control)}
+          onClick={() => {
+            isOpen ? handleClose() : handleOpen();
+          }}
+        >
+          ▼
+        </figure>
+        <button
+          className={styles.display}
+          ref={containerRef}
+          tabIndex={0}
+          onClick={() => {
+            isOpen ? handleClose() : handleOpen();
+          }}
+          aria-haspopup="listbox"
+          aria-expanded={isOpen}
+        >
+          {selectedValue || placeholder}
+        </button>
+      </section>
+
+      {isOpen && (
+        <ul className={styles.menu} role="listbox">
+          {options.map((option, idx) => {
+            return (
+              <li key={option} role="option" tabIndex={0} className={Utilities.classNames(styles.item)} onClick={() => handleSelect(option)}>
+                {option}
+              </li>
+            );
+          })}
+        </ul>
+      )}
+    </>
+  );
+};
+
+export default Select;
+
+================
+File: reference/components/SidebarLayout.module.scss
+================
+.root {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+  white-space: pre-wrap;
+}
+
+.sidebar {
+  align-self: stretch;
+  flex-shrink: 0;
+  width: 20ch;
+}
+
+.handle {
+  align-self: stretch;
+  flex-shrink: 0;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  width: 3ch;
+  outline: 0;
+  border: 0;
+  cursor: col-resize;
+
+  &:hover {
+    .line {
+      background: var(--theme-focused-foreground);
+    }
+  }
+
+  &:focus {
+    outline: 0;
+    border: 0;
+
+    .line {
+      background: var(--theme-focused-foreground);
+    }
+  }
+}
+
+.line {
+  align-self: stretch;
+  width: 2px;
+  background: var(--theme-text);
+
+  &:first-child {
+    margin-left: 1px;
+    margin-right: 2px;
+  }
+}
+
+.content {
+  min-width: 10%;
+  width: 100%;
+}
+
+================
+File: reference/components/SidebarLayout.tsx
+================
+'use client';
+
+import styles from '@components/SidebarLayout.module.scss';
+import * as React from 'react';
+
+interface SidebarLayoutProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'defaultValue'> {
+  children?: React.ReactNode;
+  sidebar?: React.ReactNode;
+  defaultSidebarWidth?: number;
+  isShowingHandle?: boolean;
+  isReversed?: boolean;
+}
+
+const LINE_HEIGHT = 20;
+const CHARACTER_WIDTH = 9.6;
+
+const SidebarLayout: React.FC<SidebarLayoutProps> = ({ defaultSidebarWidth = 20, children, sidebar, isShowingHandle = false, isReversed = false, ...rest }) => {
+  const [sidebarWidth, setSidebarWidth] = React.useState(defaultSidebarWidth);
+  const handleRef = React.useRef<HTMLDivElement>(null);
+
+  const handleMouseDown = (event: React.MouseEvent<HTMLDivElement>) => {
+    const startX = event.clientX;
+    const startWidth = sidebarWidth;
+
+    const onMouseMove = (moveEvent: MouseEvent) => {
+      const deltaX = moveEvent.clientX - startX;
+      const increment = Math.round(deltaX / CHARACTER_WIDTH);
+      setSidebarWidth(Math.max(CHARACTER_WIDTH, startWidth + increment));
+    };
+
+    const onMouseUp = () => {
+      document.removeEventListener('mousemove', onMouseMove);
+      document.removeEventListener('mouseup', onMouseUp);
+    };
+
+    document.addEventListener('mousemove', onMouseMove);
+    document.addEventListener('mouseup', onMouseUp);
+  };
+
+  if (isReversed) {
+    return (
+      <div className={styles.root} {...rest}>
+        <div className={styles.content}>{children}</div>
+        &nbsp;
+        <div
+          className={styles.sidebar}
+          style={{
+            width: `${sidebarWidth}ch`,
+          }}
+        >
+          {sidebar}
+        </div>
+      </div>
+    );
+  }
+
+  return (
+    <div className={styles.root} {...rest}>
+      <div
+        className={styles.sidebar}
+        style={{
+          width: `${sidebarWidth}ch`,
+        }}
+      >
+        {sidebar}
+      </div>
+      {isShowingHandle ? (
+        <div className={styles.handle} ref={handleRef} role="button" tabIndex={0} onMouseDown={handleMouseDown} style={isShowingHandle ? {} : { width: `0.5ch` }}>
+          <>
+            <div className={styles.line} />
+            <div className={styles.line} />
+          </>
+        </div>
+      ) : null}
+      <div className={styles.content}>{children}</div>
+    </div>
+  );
+};
+
+export default SidebarLayout;
+
+================
+File: reference/components/Table.module.scss
+================
+.root {
+  border: 0;
+  outline: 0;
+  margin: 0;
+  padding: 0;
+  position: relative;
+  width: 100%;
+  border-spacing: 0px;
+  -webkit-text-size-adjust: 100%;
+}
+
+.body {
+}
+
+================
+File: reference/components/Table.tsx
+================
+'use client';
+
+import styles from '@components/Table.module.scss';
+
+import * as React from 'react';
+
+type TableProps = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const Table = ({ children, ...rest }) => {
+  return (
+    <table className={styles.root} {...rest}>
+      <tbody className={styles.body}>{children}</tbody>
+    </table>
+  );
+};
+
+Table.displayName = 'Table';
+
+export default Table;
+
+================
+File: reference/components/TableColumn.module.scss
+================
+.root {
+  border: 0;
+  outline: 0;
+  margin: 0;
+  padding: 0;
+  transition: background-color 0.5s ease;
+  padding-left: 1ch;
+  font-size: var(--font-size);
+  flex-shrink: 0;
+  -webkit-text-size-adjust: 100%;
+
+  &:first-child {
+    padding-left: 0px;
+  }
+}
+
+================
+File: reference/components/TableColumn.tsx
+================
+'use client';
+
+import styles from '@components/TableColumn.module.scss';
+
+import * as React from 'react';
+
+type TableColumnProps = React.HTMLAttributes<HTMLTableCellElement> & {
+  children?: React.ReactNode;
+};
+
+const TableColumn: React.FC<TableColumnProps> = ({ children, ...rest }) => {
+  return (
+    <td className={styles.root} {...rest}>
+      {children}
+    </td>
+  );
+};
+
+TableColumn.displayName = 'TableColumn';
+
+export default TableColumn;
+
+================
+File: reference/components/TableRow.module.scss
+================
+.root {
+  border: 0;
+  outline: 0;
+  margin: 0;
+  padding: 0;
+
+  transition: transform 0.5s ease;
+  border-spacing: 0px;
+  -webkit-text-size-adjust: 100%;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    outline: 0;
+  }
+}
+
+================
+File: reference/components/TableRow.tsx
+================
+'use client';
+
+import styles from '@components/TableRow.module.scss';
+
+import * as React from 'react';
+
+type TableRowProps = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const TableRow = ({ children, ...rest }) => {
+  return (
+    <tr className={styles.root} tabIndex={0} {...rest}>
+      {children}
+    </tr>
+  );
+};
+
+TableRow.displayName = 'TableRow';
+
+export default TableRow;
+
+================
+File: reference/components/Text.module.scss
+================
+.text {
+  white-space: pre-wrap;
+  overflow-wrap: break-word;
+}
+
+================
+File: reference/components/Text.tsx
+================
+import styles from '@components/Text.module.scss';
+
+import * as React from 'react';
+
+interface TextProps extends React.HTMLAttributes<HTMLParagraphElement> {
+  children?: React.ReactNode;
+}
+
+const Text: React.FC<TextProps> = ({ children, ...rest }) => {
+  return (
+    <p className={styles.text} {...rest}>
+      {children}
+    </p>
+  );
+};
+
+export default Text;
+
+================
+File: reference/components/TextArea.module.scss
+================
+.root {
+  position: relative;
+}
+
+.placeholder {
+  opacity: 0.7;
+  font-style: italic;
+}
+
+.displayed {
+  white-space: pre-wrap;
+  word-wrap: break-word;
+  pointer-events: none;
+  overflow-wrap: anywhere;
+}
+
+.hidden {
+  white-space: pre-wrap;
+  word-wrap: break-word;
+  pointer-events: none;
+  overflow-wrap: anywhere;
+  position: absolute;
+  visibility: hidden;
+  width: 100%;
+  overflow: auto;
+}
+
+.focused {
+  .block {
+    background: var(--theme-focused-foreground);
+  }
+
+  .placeholder {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+@keyframes blink {
+  50% {
+    opacity: 0;
+  }
+}
+
+.blink {
+  animation: blink 1s step-start 0s infinite;
+}
+
+.block {
+  display: inline-block;
+  min-width: 1ch;
+  background: var(--theme-text);
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  vertical-align: bottom;
+}
+
+.hiddenElement {
+  position: absolute;
+  top: 0;
+  left: 0;
+  width: 100%;
+  height: 100%;
+  color: transparent;
+  background: transparent;
+  caret-color: transparent;
+  border: none;
+  resize: none;
+  outline: none;
+  overflow: hidden;
+  padding: 0;
+  margin: 0;
+  line-height: var(--theme-line-height-base);
+  font-size: var(--font-size);
+  font-family: inherit;
+}
+
+================
+File: reference/components/TextArea.tsx
+================
+'use client';
+
+import styles from '@components/TextArea.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+type TextAreaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement> & {
+  autoPlay?: string;
+  autoPlaySpeedMS?: number;
+  isBlink?: boolean;
+};
+function TextArea({ autoPlay, autoPlaySpeedMS = 40, isBlink, placeholder, onChange, ...rest }: TextAreaProps) {
+  const textAreaRef = React.useRef<HTMLTextAreaElement | null>(null);
+  const measurementRef = React.useRef<HTMLDivElement | null>(null);
+
+  const [text, setText] = React.useState<string>(rest.defaultValue?.toString() || rest.value?.toString() || '');
+  const [isAutoPlaying, setIsAutoPlaying] = React.useState<boolean>(!!autoPlay);
+  const [isFocused, setIsFocused] = React.useState<boolean>(false);
+  const [selectionStart, setSelectionStart] = React.useState<number>(0);
+
+  const autoPlayIntervalRef = React.useRef<NodeJS.Timeout | null>(null);
+  const autoPlayIndexRef = React.useRef<number>(0);
+
+  const [currentLineIndex, setCurrentLineIndex] = React.useState<number>(0);
+  const [totalLines, setTotalLines] = React.useState<number>(0);
+
+  React.useEffect(() => {
+    if (textAreaRef.current && isFocused) {
+      textAreaRef.current.setSelectionRange(selectionStart, selectionStart);
+    }
+  }, [selectionStart, isFocused]);
+
+  React.useEffect(() => {
+    if (rest.value !== undefined) {
+      const val = rest.value.toString();
+      setText(val);
+      setIsAutoPlaying(false);
+      if (autoPlayIntervalRef.current) {
+        clearInterval(autoPlayIntervalRef.current);
+      }
+      setSelectionStart(val.length);
+    }
+  }, [rest.value]);
+
+  React.useEffect(() => {
+    if (autoPlay && !rest.value && !rest.defaultValue) {
+      setIsAutoPlaying(true);
+      autoPlayIndexRef.current = 0;
+      setText('');
+      if (autoPlayIntervalRef.current) clearInterval(autoPlayIntervalRef.current);
+
+      autoPlayIntervalRef.current = setInterval(() => {
+        autoPlayIndexRef.current++;
+        if (!autoPlay) return;
+        if (autoPlayIndexRef.current > autoPlay.length) {
+          setIsAutoPlaying(false);
+          clearInterval(autoPlayIntervalRef.current!);
+          return;
+        }
+        const newText = autoPlay.slice(0, autoPlayIndexRef.current);
+        setText(newText);
+        setSelectionStart(newText.length);
+      }, autoPlaySpeedMS);
+    }
+
+    return () => {
+      if (autoPlayIntervalRef.current) clearInterval(autoPlayIntervalRef.current);
+    };
+  }, [autoPlay, rest.value, rest.defaultValue]);
+
+  const resizeTextArea = React.useCallback(() => {
+    if (!textAreaRef.current) return;
+    textAreaRef.current.style.height = 'auto';
+    textAreaRef.current.style.height = `${textAreaRef.current.scrollHeight}px`;
+  }, []);
+
+  React.useEffect(() => {
+    resizeTextArea();
+    window.addEventListener('resize', resizeTextArea);
+    return () => window.removeEventListener('resize', resizeTextArea);
+  }, [resizeTextArea]);
+
+  const onHandleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
+    const value = e.target.value;
+    setText(value);
+    setIsAutoPlaying(false);
+    if (autoPlayIntervalRef.current) {
+      clearInterval(autoPlayIntervalRef.current);
+    }
+    resizeTextArea();
+    if (onChange) {
+      onChange(e);
+    }
+    setSelectionStart(e.target.selectionStart ?? 0);
+  };
+
+  const onHandleSelect = (e: React.SyntheticEvent<HTMLTextAreaElement>) => {
+    const textarea = e.currentTarget as HTMLTextAreaElement;
+    setSelectionStart(textarea.selectionStart);
+  };
+
+  const onHandleFocus = () => {
+    setIsFocused(true);
+    if (textAreaRef.current) {
+      setSelectionStart(textAreaRef.current.selectionStart);
+    }
+  };
+
+  const onHandleBlur = () => {
+    setIsFocused(false);
+  };
+
+  const onHandleClick = (e: React.MouseEvent<HTMLTextAreaElement>) => {
+    const textarea = e.currentTarget as HTMLTextAreaElement;
+    textarea.focus();
+    setSelectionStart(textarea.selectionStart);
+  };
+
+  React.useLayoutEffect(() => {
+    if (!measurementRef.current) return;
+
+    const measurementEl = measurementRef.current;
+    const computedStyle = window.getComputedStyle(measurementEl);
+    const lineHeightStr = computedStyle.lineHeight;
+    let lineHeight = 20;
+    if (lineHeightStr.endsWith('px')) {
+      lineHeight = parseFloat(lineHeightStr);
+    }
+
+    const countLines = (content: string) => {
+      measurementEl.textContent = content || '\u00A0';
+      const height = measurementEl.offsetHeight;
+      return Math.round(height / lineHeight);
+    };
+
+    const displayString = text || placeholder || '';
+
+    const textBeforeCaret = text.substring(0, selectionStart);
+    const textAfterCaret = text.substring(selectionStart);
+
+    const total = countLines(displayString);
+    setTotalLines(total > 0 ? total - 1 : 0);
+
+    const currentLines = countLines(textBeforeCaret);
+    setCurrentLineIndex(currentLines > 0 ? currentLines - 1 : 0);
+  }, [text, selectionStart, placeholder]);
+
+  const onHandleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
+    if (e.key === 'ArrowUp' && currentLineIndex === 0) {
+      e.preventDefault();
+      const previousFocusable = Utilities.findNextFocusable(document.activeElement, 'previous');
+      previousFocusable?.focus();
+    } else if (e.key === 'ArrowDown' && currentLineIndex === totalLines) {
+      e.preventDefault();
+      const nextFocusable = Utilities.findNextFocusable(document.activeElement, 'next');
+      nextFocusable?.focus();
+    }
+  };
+
+  const isPlaceholderVisible = !text && placeholder;
+
+  const containerClasses = Utilities.classNames(styles.root, isFocused && styles.focused);
+
+  return (
+    <div className={containerClasses}>
+      <div className={Utilities.classNames(styles.displayed, isPlaceholderVisible && styles.placeholder)}>
+        {isPlaceholderVisible ? placeholder : text.substring(0, selectionStart)}
+        {!isPlaceholderVisible && <span className={Utilities.classNames(styles.block, isBlink && styles.blink)}></span>}
+        {!isPlaceholderVisible && text.substring(selectionStart)}
+      </div>
+
+      <div ref={measurementRef} className={styles.hidden}></div>
+
+      <textarea className={styles.hiddenElement} ref={textAreaRef} value={text} aria-placeholder={placeholder} onFocus={onHandleFocus} onBlur={onHandleBlur} onKeyDown={onHandleKeyDown} onChange={onHandleChange} onSelect={onHandleSelect} onClick={onHandleClick} {...rest} />
+    </div>
+  );
+}
+
+export default TextArea;
+
+================
+File: reference/components/Tooltip.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border);
+  box-shadow: 0.5ch 0.5ch 0 0 var(--theme-border-subdued);
+  font-weight: 400;
+  max-width: 24ch;
+}
+
+================
+File: reference/components/Tooltip.tsx
+================
+import styles from '@components/Tooltip.module.scss';
+
+import * as React from 'react';
+
+interface TooltipProps extends React.HTMLAttributes<HTMLDivElement> {}
+
+const Tooltip = React.forwardRef<HTMLDivElement, TooltipProps>(({ style: propStyle, ...rest }, ref) => {
+  const style: React.CSSProperties = { ...propStyle };
+
+  return <div ref={ref} className={styles.root} {...rest} style={style} />;
+});
+
+Tooltip.displayName = 'Tooltip';
+
+export default Tooltip;
+
+================
+File: reference/components/TreeView.module.scss
+================
+.root {
+  white-space: nowrap;
+  -webkit-text-size-adjust: 100%;
+}
+
+.item {
+  cursor: pointer;
+
+  &:focus {
+    outline: 0;
+    border: 0;
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.empty {
+  opacity: 0.5;
+}
+
+================
+File: reference/components/TreeView.tsx
+================
+'use client';
+
+import styles from '@components/TreeView.module.scss';
+
+import * as React from 'react';
+
+interface TreeViewProps {
+  children?: React.ReactNode;
+  defaultValue?: boolean;
+  depth?: number;
+  isFile?: boolean;
+  isLastChild?: boolean;
+  isRoot?: boolean;
+  parentLines?: boolean[];
+  style?: any;
+  title: string;
+}
+
+const TreeView: React.FC<TreeViewProps> = ({ defaultValue = false, title, children, depth = 0, isFile = false, isRoot = false, isLastChild = false, style, parentLines = [] }) => {
+  const [show, setShow] = React.useState<boolean>(defaultValue);
+
+  const onToggleShow = (): void => {
+    if (!isFile) setShow((prevShow) => !prevShow);
+  };
+
+  const hasChildren = React.Children.count(children) > 0;
+  const isEmptyFolder = !isFile && !hasChildren;
+
+  const spacing = parentLines.map((line) => (line ? '│ . ' : '. . ')).join('');
+  const endPrefix = isLastChild ? '└───' : '├───';
+  const prefix = `${spacing}${endPrefix}`;
+  const icon = isFile ? ' ' : show ? '╦ ' : '╤ ';
+
+  const updatedParentLines = [...parentLines, !isLastChild];
+
+  return (
+    <div className={styles.root} style={style}>
+      <div tabIndex={0} role="button" onClick={onToggleShow} className={styles.item} aria-expanded={show}>
+        {prefix}
+        {icon}
+        {title}
+      </div>
+      {show && hasChildren && (
+        <div>
+          {React.Children.map(children, (child, index) =>
+            React.isValidElement(child)
+              ? React.cloneElement(child as React.ReactElement<TreeViewProps>, {
+                  depth: depth + 1,
+                  isLastChild: index === React.Children.count(children) - 1,
+                  parentLines: updatedParentLines,
+                })
+              : child
+          )}
+        </div>
+      )}
+    </div>
+  );
+};
+
+export default TreeView;
+
+================
+File: reference/modules/hotkeys/bound-hotkeys-proxy-provider.tsx
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/BoundHotkeysProxyProvider.tsx
+
+import { createContext, ReactNode, useContext } from 'react'
+import { Hotkey } from '@modules/hotkeys/types'
+
+type BoundHotkeysProxyProviderType = {
+  addHotkey: (hotkey: Hotkey) => void
+  removeHotkey: (hotkey: Hotkey) => void
+}
+
+const BoundHotkeysProxyProvider = createContext<BoundHotkeysProxyProviderType | undefined>(undefined)
+
+export const useBoundHotkeysProxy = () => {
+  return useContext(BoundHotkeysProxyProvider)
+}
+
+interface Props {
+  children: ReactNode
+  addHotkey: (hotkey: Hotkey) => void
+  removeHotkey: (hotkey: Hotkey) => void
+}
+
+export default function BoundHotkeysProxyProviderProvider({ addHotkey, removeHotkey, children }: Props) {
+  return (
+    <BoundHotkeysProxyProvider.Provider value={{ addHotkey, removeHotkey }}>
+      {children}
+    </BoundHotkeysProxyProvider.Provider>
+  )
+}
+
+================
+File: reference/modules/hotkeys/hotkeys-provider.tsx
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/HotkeysProvider.tsx
+import { Hotkey } from '@modules/hotkeys/types'
+import { createContext, ReactNode, useState, useContext, useCallback } from 'react'
+import BoundHotkeysProxyProviderProvider from '@modules/hotkeys/bound-hotkeys-proxy-provider'
+
+import * as Utilities from '@common/utilities';
+
+export type HotkeysContextType = {
+  hotkeys: ReadonlyArray<Hotkey>
+  enabledScopes: string[]
+  toggleScope: (scope: string) => void
+  enableScope: (scope: string) => void
+  disableScope: (scope: string) => void
+}
+
+// The context is only needed for special features like global scoping, so we use a graceful default fallback
+const HotkeysContext = createContext<HotkeysContextType>({
+  hotkeys: [],
+  enabledScopes: [], // This array has to be empty instead of containing '*' as default, to check if the provider is set or not
+  toggleScope: () => {},
+  enableScope: () => {},
+  disableScope: () => {},
+})
+
+export const useHotkeysContext = () => {
+  return useContext(HotkeysContext)
+}
+
+interface Props {
+  initiallyActiveScopes?: string[]
+  children: ReactNode
+}
+
+export const HotkeysProvider = ({ initiallyActiveScopes = ['*'], children }: Props) => {
+  const [internalActiveScopes, setInternalActiveScopes] = useState(
+    initiallyActiveScopes?.length > 0 ? initiallyActiveScopes : ['*']
+  )
+  const [boundHotkeys, setBoundHotkeys] = useState<Hotkey[]>([])
+
+  const enableScope = useCallback((scope: string) => {
+    setInternalActiveScopes((prev) => {
+      if (prev.includes('*')) {
+        return [scope]
+      }
+
+      return Array.from(new Set([...prev, scope]))
+    })
+  }, [])
+
+  const disableScope = useCallback((scope: string) => {
+    setInternalActiveScopes((prev) => {
+      if (prev.filter((s) => s !== scope).length === 0) {
+        return ['*']
+      } else {
+        return prev.filter((s) => s !== scope)
+      }
+    })
+  }, [])
+
+  const toggleScope = useCallback((scope: string) => {
+    setInternalActiveScopes((prev) => {
+      if (prev.includes(scope)) {
+        if (prev.filter((s) => s !== scope).length === 0) {
+          return ['*']
+        } else {
+          return prev.filter((s) => s !== scope)
+        }
+      } else {
+        if (prev.includes('*')) {
+          return [scope]
+        }
+
+        return Array.from(new Set([...prev, scope]))
+      }
+    })
+  }, [])
+
+  const addBoundHotkey = useCallback((hotkey: Hotkey) => {
+    setBoundHotkeys((prev) => [...prev, hotkey])
+  }, [])
+
+  const removeBoundHotkey = useCallback((hotkey: Hotkey) => {
+    setBoundHotkeys((prev) => prev.filter((h) => !Utilities.deepEqual(h, hotkey)))
+  }, [])
+
+  return (
+    <HotkeysContext.Provider
+      value={{ enabledScopes: internalActiveScopes, hotkeys: boundHotkeys, enableScope, disableScope, toggleScope }}
+    >
+      <BoundHotkeysProxyProviderProvider addHotkey={addBoundHotkey} removeHotkey={removeBoundHotkey}>
+        {children}
+      </BoundHotkeysProxyProviderProvider>
+    </HotkeysContext.Provider>
+  )
+}
+
+================
+File: reference/modules/hotkeys/index.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/index.ts
+
+import useHotkeys from '@modules/hotkeys/use-hotkeys'
+import type { Options, Keys, HotkeyCallback } from '@modules/hotkeys/types'
+import { HotkeysProvider, useHotkeysContext } from '@modules/hotkeys/hotkeys-provider'
+import { isHotkeyPressed } from '@modules/hotkeys/is-hotkey-pressed'
+import useRecordHotkeys from '@modules/hotkeys/use-record-hotkeys'
+
+export {
+  useHotkeys,
+  useRecordHotkeys,
+  useHotkeysContext,
+  isHotkeyPressed,
+  HotkeysProvider,
+  Options,
+  Keys,
+  HotkeyCallback,
+}
+
+================
+File: reference/modules/hotkeys/is-hotkey-pressed.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/isHotkeyPressed.ts
+
+import { isHotkeyModifier, mapKey } from '@modules/hotkeys/parse-hotkeys'
+;(() => {
+  if (typeof document !== 'undefined') {
+    document.addEventListener('keydown', (e) => {
+      if (e.key === undefined) {
+        // Synthetic event (e.g., Chrome autofill).  Ignore.
+        return
+      }
+
+      pushToCurrentlyPressedKeys([mapKey(e.key), mapKey(e.code)])
+    })
+
+    document.addEventListener('keyup', (e) => {
+      if (e.key === undefined) {
+        // Synthetic event (e.g., Chrome autofill).  Ignore.
+        return
+      }
+
+      removeFromCurrentlyPressedKeys([mapKey(e.key), mapKey(e.code)])
+    })
+  }
+
+  if (typeof window !== 'undefined') {
+    window.addEventListener('blur', () => {
+      currentlyPressedKeys.clear()
+    })
+  }
+})()
+
+const currentlyPressedKeys: Set<string> = new Set<string>()
+
+// https://github.com/microsoft/TypeScript/issues/17002
+export function isReadonlyArray(value: unknown): value is readonly unknown[] {
+  return Array.isArray(value)
+}
+
+export function isHotkeyPressed(key: string | readonly string[], splitKey = ','): boolean {
+  const hotkeyArray = isReadonlyArray(key) ? key : key.split(splitKey)
+
+  return hotkeyArray.every((hotkey) => currentlyPressedKeys.has(hotkey.trim().toLowerCase()))
+}
+
+export function pushToCurrentlyPressedKeys(key: string | string[]): void {
+  const hotkeyArray = Array.isArray(key) ? key : [key]
+
+  /*
+  Due to a weird behavior on macOS we need to clear the set if the user pressed down the meta key and presses another key.
+  https://stackoverflow.com/questions/11818637/why-does-javascript-drop-keyup-events-when-the-metakey-is-pressed-on-mac-browser
+  Otherwise the set will hold all ever pressed keys while the meta key is down which leads to wrong results.
+   */
+  if (currentlyPressedKeys.has('meta')) {
+    currentlyPressedKeys.forEach((key) => !isHotkeyModifier(key) && currentlyPressedKeys.delete(key.toLowerCase()))
+  }
+
+  hotkeyArray.forEach((hotkey) => currentlyPressedKeys.add(hotkey.toLowerCase()))
+}
+
+export function removeFromCurrentlyPressedKeys(key: string | string[]): void {
+  const hotkeyArray = Array.isArray(key) ? key : [key]
+
+  /*
+  Due to a weird behavior on macOS we need to clear the set if the user pressed down the meta key and presses another key.
+  https://stackoverflow.com/questions/11818637/why-does-javascript-drop-keyup-events-when-the-metakey-is-pressed-on-mac-browser
+  Otherwise the set will hold all ever pressed keys while the meta key is down which leads to wrong results.
+   */
+  if (key === 'meta') {
+    currentlyPressedKeys.clear()
+  } else {
+    hotkeyArray.forEach((hotkey) => currentlyPressedKeys.delete(hotkey.toLowerCase()))
+  }
+}
+
+================
+File: reference/modules/hotkeys/parse-hotkeys.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/parseHotkeys.ts
+
+import { Hotkey, KeyboardModifiers } from '@modules/hotkeys/types'
+
+const reservedModifierKeywords = ['shift', 'alt', 'meta', 'mod', 'ctrl']
+
+const mappedKeys: Record<string, string> = {
+  esc: 'escape',
+  return: 'enter',
+  '.': 'period',
+  ',': 'comma',
+  '-': 'slash',
+  ' ': 'space',
+  '`': 'backquote',
+  '#': 'backslash',
+  '+': 'bracketright',
+  ShiftLeft: 'shift',
+  ShiftRight: 'shift',
+  AltLeft: 'alt',
+  AltRight: 'alt',
+  MetaLeft: 'meta',
+  MetaRight: 'meta',
+  OSLeft: 'meta',
+  OSRight: 'meta',
+  ControlLeft: 'ctrl',
+  ControlRight: 'ctrl',
+}
+
+export function mapKey(key?: string): string {
+  return ((key && mappedKeys[key]) || key || '')
+    .trim()
+    .toLowerCase()
+    .replace(/key|digit|numpad|arrow/, '')
+}
+
+export function isHotkeyModifier(key: string) {
+  return reservedModifierKeywords.includes(key)
+}
+
+export function parseKeysHookInput(keys: string, splitKey = ','): string[] {
+  return keys.split(splitKey)
+}
+
+export function parseHotkey(hotkey: string, combinationKey = '+', description?: string): Hotkey {
+  const keys = hotkey
+    .toLocaleLowerCase()
+    .split(combinationKey)
+    .map((k) => mapKey(k))
+
+  const modifiers: KeyboardModifiers = {
+    alt: keys.includes('alt'),
+    ctrl: keys.includes('ctrl') || keys.includes('control'),
+    shift: keys.includes('shift'),
+    meta: keys.includes('meta'),
+    mod: keys.includes('mod'),
+  }
+
+  const singleCharKeys = keys.filter((k) => !reservedModifierKeywords.includes(k))
+
+  return {
+    ...modifiers,
+    keys: singleCharKeys,
+    description,
+    hotkey,
+  }
+}
+
+================
+File: reference/modules/hotkeys/types.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/types.ts
+import type { DependencyList } from 'react'
+
+export type FormTags = 'input' | 'textarea' | 'select' | 'INPUT' | 'TEXTAREA' | 'SELECT'
+export type Keys = string | readonly string[]
+export type Scopes = string | readonly string[]
+
+export type RefType<T> = T | null
+
+export type KeyboardModifiers = {
+  alt?: boolean
+  ctrl?: boolean
+  meta?: boolean
+  shift?: boolean
+  mod?: boolean
+}
+
+export type Hotkey = KeyboardModifiers & {
+  keys?: readonly string[]
+  scopes?: Scopes
+  description?: string
+  hotkey: string
+}
+
+export type HotkeysEvent = Hotkey
+
+export type HotkeyCallback = (keyboardEvent: KeyboardEvent, hotkeysEvent: HotkeysEvent) => void
+
+export type Trigger = boolean | ((keyboardEvent: KeyboardEvent, hotkeysEvent: HotkeysEvent) => boolean)
+
+export type Options = {
+  enabled?: Trigger // Main setting that determines if the hotkey is enabled or not. (Default: true)
+  enableOnFormTags?: readonly FormTags[] | boolean // Enable hotkeys on a list of tags. (Default: false)
+  enableOnContentEditable?: boolean // Enable hotkeys on tags with contentEditable props. (Default: false)
+  ignoreEventWhen?: (e: KeyboardEvent) => boolean // Ignore evenets based on a condition (Default: undefined)
+  combinationKey?: string // Character to split keys in hotkeys combinations. (Default: +)
+  splitKey?: string // Character to separate different hotkeys. (Default: ,)
+  scopes?: Scopes // Scope
+  keyup?: boolean // Trigger on keyup event? (Default: undefined)
+  keydown?: boolean // Trigger on keydown event? (Default: true)
+  preventDefault?: Trigger // Prevent default browser behavior? (Default: false)
+  description?: string // Use this option to describe what the hotkey does. (Default: undefined)
+  document?: Document // Listen to events on the document instead of the window. (Default: false)
+  ignoreModifiers?: boolean // Ignore modifiers when matching hotkeys. (Default: false)
+}
+
+export type OptionsOrDependencyArray = Options | DependencyList
+
+================
+File: reference/modules/hotkeys/use-deep-equal-memo.ts
+================
+import { useRef } from 'react'
+
+import * as Utilities from '@common/utilities';
+
+export default function useDeepEqualMemo<T>(value: T) {
+  const ref = useRef<T | undefined>(undefined)
+
+  if (!Utilities.deepEqual(ref.current, value)) {
+    ref.current = value
+  }
+
+  return ref.current
+}
+
+================
+File: reference/modules/hotkeys/use-hotkeys.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/useHotkeys.ts
+
+import { HotkeyCallback, Keys, Options, OptionsOrDependencyArray, RefType } from '@modules/hotkeys/types'
+import { DependencyList, RefCallback, useCallback, useEffect, useState, useLayoutEffect, useRef } from 'react'
+import { mapKey, parseHotkey, parseKeysHookInput } from '@modules/hotkeys/parse-hotkeys'
+import {
+  isHotkeyEnabled,
+  isHotkeyEnabledOnTag,
+  isHotkeyMatchingKeyboardEvent,
+  isKeyboardEventTriggeredByInput,
+  isScopeActive,
+  maybePreventDefault,
+} from '@modules/hotkeys/validators'
+import { useHotkeysContext } from '@modules/hotkeys/hotkeys-provider'
+import { useBoundHotkeysProxy } from '@modules/hotkeys/bound-hotkeys-proxy-provider'
+import useDeepEqualMemo from '@modules/hotkeys/use-deep-equal-memo'
+import { isReadonlyArray, pushToCurrentlyPressedKeys, removeFromCurrentlyPressedKeys } from '@modules/hotkeys/is-hotkey-pressed'
+
+const stopPropagation = (e: KeyboardEvent): void => {
+  e.stopPropagation()
+  e.preventDefault()
+  e.stopImmediatePropagation()
+}
+
+const useSafeLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect
+
+export default function useHotkeys<T extends HTMLElement>(
+  keys: Keys,
+  callback: HotkeyCallback,
+  options?: OptionsOrDependencyArray,
+  dependencies?: OptionsOrDependencyArray
+) {
+  const [ref, setRef] = useState<RefType<T>>(null)
+  const hasTriggeredRef = useRef(false)
+
+  const _options: Options | undefined = !(options instanceof Array)
+    ? (options as Options)
+    : !(dependencies instanceof Array)
+    ? (dependencies as Options)
+    : undefined
+  const _keys: string = isReadonlyArray(keys) ? keys.join(_options?.splitKey) : keys
+  const _deps: DependencyList | undefined =
+    options instanceof Array ? options : dependencies instanceof Array ? dependencies : undefined
+
+  const memoisedCB = useCallback(callback, _deps ?? [])
+  const cbRef = useRef<HotkeyCallback>(memoisedCB)
+
+  if (_deps) {
+    cbRef.current = memoisedCB
+  } else {
+    cbRef.current = callback
+  }
+
+  const memoisedOptions = useDeepEqualMemo(_options)
+
+  const { enabledScopes } = useHotkeysContext()
+  const proxy = useBoundHotkeysProxy()
+
+  useSafeLayoutEffect(() => {
+    if (memoisedOptions?.enabled === false || !isScopeActive(enabledScopes, memoisedOptions?.scopes)) {
+      return
+    }
+
+    const listener = (e: KeyboardEvent, isKeyUp = false) => {
+      if (isKeyboardEventTriggeredByInput(e) && !isHotkeyEnabledOnTag(e, memoisedOptions?.enableOnFormTags)) {
+        return
+      }
+
+      // TODO: SINCE THE EVENT IS NOW ATTACHED TO THE REF, THE ACTIVE ELEMENT CAN NEVER BE INSIDE THE REF. THE HOTKEY ONLY TRIGGERS IF THE
+      // REF IS THE ACTIVE ELEMENT. THIS IS A PROBLEM SINCE FOCUSED SUB COMPONENTS WON'T TRIGGER THE HOTKEY.
+      if (ref !== null) {
+        const rootNode = ref.getRootNode()
+        if (
+          (rootNode instanceof Document || rootNode instanceof ShadowRoot) &&
+          rootNode.activeElement !== ref &&
+          !ref.contains(rootNode.activeElement)
+        ) {
+          stopPropagation(e)
+          return
+        }
+      }
+
+      if ((e.target as HTMLElement)?.isContentEditable && !memoisedOptions?.enableOnContentEditable) {
+        return
+      }
+
+      parseKeysHookInput(_keys, memoisedOptions?.splitKey).forEach((key) => {
+        const hotkey = parseHotkey(key, memoisedOptions?.combinationKey)
+
+        if (isHotkeyMatchingKeyboardEvent(e, hotkey, memoisedOptions?.ignoreModifiers) || hotkey.keys?.includes('*')) {
+          if (memoisedOptions?.ignoreEventWhen?.(e)) {
+            return
+          }
+
+          if (isKeyUp && hasTriggeredRef.current) {
+            return
+          }
+
+          maybePreventDefault(e, hotkey, memoisedOptions?.preventDefault)
+
+          if (!isHotkeyEnabled(e, hotkey, memoisedOptions?.enabled)) {
+            stopPropagation(e)
+
+            return
+          }
+
+          // Execute the user callback for that hotkey
+          cbRef.current(e, hotkey)
+
+          if (!isKeyUp) {
+            hasTriggeredRef.current = true
+          }
+        }
+      })
+    }
+
+    const handleKeyDown = (event: KeyboardEvent) => {
+      if (event.key === undefined) {
+        // Synthetic event (e.g., Chrome autofill).  Ignore.
+        return
+      }
+
+      pushToCurrentlyPressedKeys(mapKey(event.code))
+
+      if ((memoisedOptions?.keydown === undefined && memoisedOptions?.keyup !== true) || memoisedOptions?.keydown) {
+        listener(event)
+      }
+    }
+
+    const handleKeyUp = (event: KeyboardEvent) => {
+      if (event.key === undefined) {
+        // Synthetic event (e.g., Chrome autofill).  Ignore.
+        return
+      }
+
+      removeFromCurrentlyPressedKeys(mapKey(event.code))
+
+      hasTriggeredRef.current = false
+
+      if (memoisedOptions?.keyup) {
+        listener(event, true)
+      }
+    }
+
+    const domNode = ref || _options?.document || document
+
+    // @ts-ignore
+    domNode.addEventListener('keyup', handleKeyUp)
+    // @ts-ignore
+    domNode.addEventListener('keydown', handleKeyDown)
+
+    if (proxy) {
+      parseKeysHookInput(_keys, memoisedOptions?.splitKey).forEach((key) =>
+        proxy.addHotkey(parseHotkey(key, memoisedOptions?.combinationKey, memoisedOptions?.description))
+      )
+    }
+
+    return () => {
+      // @ts-ignore
+      domNode.removeEventListener('keyup', handleKeyUp)
+      // @ts-ignore
+      domNode.removeEventListener('keydown', handleKeyDown)
+
+      if (proxy) {
+        parseKeysHookInput(_keys, memoisedOptions?.splitKey).forEach((key) =>
+          proxy.removeHotkey(parseHotkey(key, memoisedOptions?.combinationKey, memoisedOptions?.description))
+        )
+      }
+    }
+  }, [ref, _keys, memoisedOptions, enabledScopes])
+
+  return setRef as RefCallback<T>
+}
+
+================
+File: reference/modules/hotkeys/use-record-hotkeys.ts
+================
+import { useCallback, useState } from 'react'
+import { mapKey } from '@modules/hotkeys/parse-hotkeys'
+
+export default function useRecordHotkeys() {
+  const [keys, setKeys] = useState(new Set<string>())
+  const [isRecording, setIsRecording] = useState(false)
+
+  const handler = useCallback((event: KeyboardEvent) => {
+    if (event.key === undefined) {
+      // Synthetic event (e.g., Chrome autofill).  Ignore.
+      return
+    }
+
+    event.preventDefault()
+    event.stopPropagation()
+
+    setKeys((prev) => {
+      const newKeys = new Set(prev)
+
+      newKeys.add(mapKey(event.code))
+
+      return newKeys
+    })
+  }, [])
+
+  const stop = useCallback(() => {
+    if (typeof document !== 'undefined') {
+      document.removeEventListener('keydown', handler)
+
+      setIsRecording(false)
+    }
+  }, [handler])
+
+  const start = useCallback(() => {
+    setKeys(new Set<string>())
+
+    if (typeof document !== 'undefined') {
+      stop()
+
+      document.addEventListener('keydown', handler)
+
+      setIsRecording(true)
+    }
+  }, [handler, stop])
+
+  const resetKeys = useCallback(() => {
+    setKeys(new Set<string>())
+  }, [])
+
+  return [keys, { start, stop, resetKeys, isRecording }] as const
+}
+
+================
+File: reference/modules/hotkeys/validators.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/validators.ts
+
+import { FormTags, Hotkey, Scopes, Trigger } from '@modules/hotkeys/types'
+import { isHotkeyPressed, isReadonlyArray } from '@modules/hotkeys/is-hotkey-pressed'
+import { mapKey } from '@modules/hotkeys/parse-hotkeys'
+
+export function maybePreventDefault(e: KeyboardEvent, hotkey: Hotkey, preventDefault?: Trigger): void {
+  if ((typeof preventDefault === 'function' && preventDefault(e, hotkey)) || preventDefault === true) {
+    e.preventDefault()
+  }
+}
+
+export function isHotkeyEnabled(e: KeyboardEvent, hotkey: Hotkey, enabled?: Trigger): boolean {
+  if (typeof enabled === 'function') {
+    return enabled(e, hotkey)
+  }
+
+  return enabled === true || enabled === undefined
+}
+
+export function isKeyboardEventTriggeredByInput(ev: KeyboardEvent): boolean {
+  return isHotkeyEnabledOnTag(ev, ['input', 'textarea', 'select'])
+}
+
+export function isHotkeyEnabledOnTag(
+  event: KeyboardEvent,
+  enabledOnTags: readonly FormTags[] | boolean = false
+): boolean {
+  const {target, composed} = event;
+
+  let targetTagName: string | null = null
+
+  if (isCustomElement(target as HTMLElement) && composed) {
+    targetTagName = event.composedPath()[0] && (event.composedPath()[0] as HTMLElement).tagName;
+  } else {
+    targetTagName = target && (target as HTMLElement).tagName;
+  }
+
+  if (isReadonlyArray(enabledOnTags)) {
+    return Boolean(
+      targetTagName && enabledOnTags && enabledOnTags.some((tag) => tag.toLowerCase() === targetTagName?.toLowerCase())
+    )
+  }
+
+  return Boolean(targetTagName && enabledOnTags && enabledOnTags)
+}
+
+export function isCustomElement(element: HTMLElement): boolean {
+  // We just do a basic check w/o any complex RegEx or validation against the list of legacy names containing a hyphen,
+  // as none of them is likely to be an event target, and it won't hurt anyway if we miss.
+  // see: https://html.spec.whatwg.org/multipage/custom-elements.html#prod-potentialcustomelementname
+  return !!element.tagName && !element.tagName.startsWith("-") && element.tagName.includes("-");
+}
+
+export function isScopeActive(activeScopes: string[], scopes?: Scopes): boolean {
+  if (activeScopes.length === 0 && scopes) {
+    console.warn(
+      'A hotkey has the "scopes" option set, however no active scopes were found. If you want to use the global scopes feature, you need to wrap your app in a <HotkeysProvider>'
+    )
+
+    return true
+  }
+
+  if (!scopes) {
+    return true
+  }
+
+  return activeScopes.some((scope) => scopes.includes(scope)) || activeScopes.includes('*')
+}
+
+export const isHotkeyMatchingKeyboardEvent = (e: KeyboardEvent, hotkey: Hotkey, ignoreModifiers = false): boolean => {
+  const { alt, meta, mod, shift, ctrl, keys } = hotkey
+  const { key: pressedKeyUppercase, code, ctrlKey, metaKey, shiftKey, altKey } = e
+
+  const keyCode = mapKey(code)
+  const pressedKey = pressedKeyUppercase.toLowerCase()
+
+  if (
+    !keys?.includes(keyCode) &&
+    !keys?.includes(pressedKey) &&
+    !['ctrl', 'control', 'unknown', 'meta', 'alt', 'shift', 'os'].includes(keyCode)
+  ) {
+    return false
+  }
+
+  if (!ignoreModifiers) {
+    // We check the pressed keys for compatibility with the keyup event. In keyup events the modifier flags are not set.
+    if (alt === !altKey && pressedKey !== 'alt') {
+      return false
+    }
+
+    if (shift === !shiftKey && pressedKey !== 'shift') {
+      return false
+    }
+
+    // Mod is a special key name that is checking for meta on macOS and ctrl on other platforms
+    if (mod) {
+      if (!metaKey && !ctrlKey) {
+        return false
+      }
+    } else {
+      if (meta === !metaKey && pressedKey !== 'meta' && pressedKey !== 'os') {
+        return false
+      }
+
+      if (ctrl === !ctrlKey && pressedKey !== 'ctrl' && pressedKey !== 'control') {
+        return false
+      }
+    }
+  }
+
+  // All modifiers are correct, now check the key
+  // If the key is set, we check for the key
+  if (keys && keys.length === 1 && (keys.includes(pressedKey) || keys.includes(keyCode))) {
+    return true
+  } else if (keys) {
+    // Check if all keys are present in pressedDownKeys set
+    return isHotkeyPressed(keys)
+  } else if (!keys) {
+    // If the key is not set, we only listen for modifiers, that check went alright, so we return true
+    return true
+  }
+
+  // There is nothing that matches.
+  return false
+}
+
+================
+File: reference/modules/cors.ts
+================
+// @ts-nocheck
+
+'use strict';
+
+import assign from '@modules/object-assign';
+import vary from '@modules/vary';
+
+var defaults = {
+  origin: '*',
+  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
+  preflightContinue: false,
+  optionsSuccessStatus: 204,
+};
+
+function isString(s) {
+  return typeof s === 'string' || s instanceof String;
+}
+
+function isOriginAllowed(origin, allowedOrigin) {
+  if (Array.isArray(allowedOrigin)) {
+    for (var i = 0; i < allowedOrigin.length; ++i) {
+      if (isOriginAllowed(origin, allowedOrigin[i])) {
+        return true;
+      }
+    }
+    return false;
+  } else if (isString(allowedOrigin)) {
+    return origin === allowedOrigin;
+  } else if (allowedOrigin instanceof RegExp) {
+    return allowedOrigin.test(origin);
+  } else {
+    return !!allowedOrigin;
+  }
+}
+
+function configureOrigin(options, req) {
+  var requestOrigin = req.headers.origin,
+    headers = [],
+    isAllowed;
+
+  if (!options.origin || options.origin === '*') {
+    // allow any origin
+    headers.push([
+      {
+        key: 'Access-Control-Allow-Origin',
+        value: '*',
+      },
+    ]);
+  } else if (isString(options.origin)) {
+    // fixed origin
+    headers.push([
+      {
+        key: 'Access-Control-Allow-Origin',
+        value: options.origin,
+      },
+    ]);
+    headers.push([
+      {
+        key: 'Vary',
+        value: 'Origin',
+      },
+    ]);
+  } else {
+    isAllowed = isOriginAllowed(requestOrigin, options.origin);
+    // reflect origin
+    headers.push([
+      {
+        key: 'Access-Control-Allow-Origin',
+        value: isAllowed ? requestOrigin : false,
+      },
+    ]);
+    headers.push([
+      {
+        key: 'Vary',
+        value: 'Origin',
+      },
+    ]);
+  }
+
+  return headers;
+}
+
+function configureMethods(options) {
+  var methods = options.methods;
+  if (methods.join) {
+    methods = options.methods.join(','); // .methods is an array, so turn it into a string
+  }
+  return {
+    key: 'Access-Control-Allow-Methods',
+    value: methods,
+  };
+}
+
+function configureCredentials(options) {
+  if (options.credentials === true) {
+    return {
+      key: 'Access-Control-Allow-Credentials',
+      value: 'true',
+    };
+  }
+  return null;
+}
+
+function configureAllowedHeaders(options, req) {
+  var allowedHeaders = options.allowedHeaders || options.headers;
+  var headers = [];
+
+  if (!allowedHeaders) {
+    allowedHeaders = req.headers['access-control-request-headers']; // .headers wasn't specified, so reflect the request headers
+    headers.push([
+      {
+        key: 'Vary',
+        value: 'Access-Control-Request-Headers',
+      },
+    ]);
+  } else if (allowedHeaders.join) {
+    allowedHeaders = allowedHeaders.join(','); // .headers is an array, so turn it into a string
+  }
+  if (allowedHeaders && allowedHeaders.length) {
+    headers.push([
+      {
+        key: 'Access-Control-Allow-Headers',
+        value: allowedHeaders,
+      },
+    ]);
+  }
+
+  return headers;
+}
+
+function configureExposedHeaders(options) {
+  var headers = options.exposedHeaders;
+  if (!headers) {
+    return null;
+  } else if (headers.join) {
+    headers = headers.join(','); // .headers is an array, so turn it into a string
+  }
+  if (headers && headers.length) {
+    return {
+      key: 'Access-Control-Expose-Headers',
+      value: headers,
+    };
+  }
+  return null;
+}
+
+function configureMaxAge(options) {
+  var maxAge = (typeof options.maxAge === 'number' || options.maxAge) && options.maxAge.toString();
+  if (maxAge && maxAge.length) {
+    return {
+      key: 'Access-Control-Max-Age',
+      value: maxAge,
+    };
+  }
+  return null;
+}
+
+function applyHeaders(headers, res) {
+  for (var i = 0, n = headers.length; i < n; i++) {
+    var header = headers[i];
+    if (header) {
+      if (Array.isArray(header)) {
+        applyHeaders(header, res);
+      } else if (header.key === 'Vary' && header.value) {
+        vary(res, header.value);
+      } else if (header.value) {
+        res.setHeader(header.key, header.value);
+      }
+    }
+  }
+}
+
+function cors(options, req, res, next) {
+  var headers = [],
+    method = req.method && req.method.toUpperCase && req.method.toUpperCase();
+
+  if (method === 'OPTIONS') {
+    // preflight
+    headers.push(configureOrigin(options, req));
+    headers.push(configureCredentials(options));
+    headers.push(configureMethods(options));
+    headers.push(configureAllowedHeaders(options, req));
+    headers.push(configureMaxAge(options));
+    headers.push(configureExposedHeaders(options));
+    applyHeaders(headers, res);
+
+    if (options.preflightContinue) {
+      next();
+    } else {
+      // Safari (and potentially other browsers) need content-length 0,
+      //   for 204 or they just hang waiting for a body
+      res.statusCode = options.optionsSuccessStatus;
+      res.setHeader('Content-Length', '0');
+      res.end();
+    }
+  } else {
+    // actual response
+    headers.push(configureOrigin(options, req));
+    headers.push(configureCredentials(options));
+    headers.push(configureExposedHeaders(options));
+    applyHeaders(headers, res);
+    next();
+  }
+}
+
+function middlewareWrapper(o) {
+  // if options are static (either via defaults or custom options passed in), wrap in a function
+  var optionsCallback = null;
+  if (typeof o === 'function') {
+    optionsCallback = o;
+  } else {
+    optionsCallback = function (req, cb) {
+      cb(null, o);
+    };
+  }
+
+  return function corsMiddleware(req, res, next) {
+    optionsCallback(req, function (err, options) {
+      if (err) {
+        next(err);
+      } else {
+        var corsOptions = assign({}, defaults, options);
+        var originCallback = null;
+        if (corsOptions.origin && typeof corsOptions.origin === 'function') {
+          originCallback = corsOptions.origin;
+        } else if (corsOptions.origin) {
+          originCallback = function (origin, cb) {
+            cb(null, corsOptions.origin);
+          };
+        }
+
+        if (originCallback) {
+          originCallback(req.headers.origin, function (err2, origin) {
+            if (err2 || !origin) {
+              next(err2);
+            } else {
+              corsOptions.origin = origin;
+              cors(corsOptions, req, res, next);
+            }
+          });
+        } else {
+          next();
+        }
+      }
+    });
+  };
+}
+
+export default middlewareWrapper;
+
+================
+File: reference/modules/object-assign.ts
+================
+// @ts-nocheck
+
+/*
+object-assign
+(c) Sindre Sorhus
+@license MIT
+*/
+
+'use strict';
+
+/* eslint-disable no-unused-vars */
+var getOwnPropertySymbols = Object.getOwnPropertySymbols;
+var hasOwnProperty = Object.prototype.hasOwnProperty;
+var propIsEnumerable = Object.prototype.propertyIsEnumerable;
+
+function toObject(val) {
+  if (val === null || val === undefined) {
+    throw new TypeError('Object.assign cannot be called with null or undefined');
+  }
+
+  return Object(val);
+}
+
+function shouldUseNative() {
+  try {
+    if (!Object.assign) {
+      return false;
+    }
+
+    // Detect buggy property enumeration order in older V8 versions.
+
+    // https://bugs.chromium.org/p/v8/issues/detail?id=4118
+    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
+    // @ts-ignore
+    test1[5] = 'de';
+    if (Object.getOwnPropertyNames(test1)[0] === '5') {
+      return false;
+    }
+
+    // https://bugs.chromium.org/p/v8/issues/detail?id=3056
+    var test2 = {};
+    for (var i = 0; i < 10; i++) {
+      test2['_' + String.fromCharCode(i)] = i;
+    }
+    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
+      return test2[n];
+    });
+    if (order2.join('') !== '0123456789') {
+      return false;
+    }
+
+    // https://bugs.chromium.org/p/v8/issues/detail?id=3056
+    var test3 = {};
+    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
+      test3[letter] = letter;
+    });
+    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
+      return false;
+    }
+
+    return true;
+  } catch (err) {
+    // We don't expect any of the above to throw, but better to be safe.
+    return false;
+  }
+}
+
+const assign = shouldUseNative()
+  ? Object.assign
+  : function (target, source) {
+      var from;
+      var to = toObject(target);
+      var symbols;
+
+      for (var s = 1; s < arguments.length; s++) {
+        from = Object(arguments[s]);
+
+        for (var key in from) {
+          if (hasOwnProperty.call(from, key)) {
+            to[key] = from[key];
+          }
+        }
+
+        if (getOwnPropertySymbols) {
+          symbols = getOwnPropertySymbols(from);
+          for (var i = 0; i < symbols.length; i++) {
+            if (propIsEnumerable.call(from, symbols[i])) {
+              to[symbols[i]] = from[symbols[i]];
+            }
+          }
+        }
+      }
+
+      return to;
+    };
+
+export default assign;
+
+================
+File: reference/modules/vary.ts
+================
+// @ts-nocheck
+
+/*!
+ * vary
+ * Copyright(c) 2014-2017 Douglas Christopher Wilson
+ * MIT Licensed
+ */
+
+'use strict';
+
+/**
+ * RegExp to match field-name in RFC 7230 sec 3.2
+ *
+ * field-name    = token
+ * token         = 1*tchar
+ * tchar         = "!" / "#" / "$" / "%" / "&" / "'" / "*"
+ *               / "+" / "-" / "." / "^" / "_" / "`" / "|" / "~"
+ *               / DIGIT / ALPHA
+ *               ; any VCHAR, except delimiters
+ */
+
+var FIELD_NAME_REGEXP = /^[!#$%&'*+\-.^_`|~0-9A-Za-z]+$/;
+
+/**
+ * Append a field to a vary header.
+ *
+ * @param {String} header
+ * @param {String|Array} field
+ * @return {String}
+ * @public
+ */
+
+function append(header, field) {
+  if (typeof header !== 'string') {
+    throw new TypeError('header argument is required');
+  }
+
+  if (!field) {
+    throw new TypeError('field argument is required');
+  }
+
+  // get fields array
+  var fields = !Array.isArray(field) ? parse(String(field)) : field;
+
+  // assert on invalid field names
+  for (var j = 0; j < fields.length; j++) {
+    if (!FIELD_NAME_REGEXP.test(fields[j])) {
+      throw new TypeError('field argument contains an invalid header name');
+    }
+  }
+
+  // existing, unspecified vary
+  if (header === '*') {
+    return header;
+  }
+
+  // enumerate current values
+  var val = header;
+  var vals = parse(header.toLowerCase());
+
+  // unspecified vary
+  if (fields.indexOf('*') !== -1 || vals.indexOf('*') !== -1) {
+    return '*';
+  }
+
+  for (var i = 0; i < fields.length; i++) {
+    var fld = fields[i].toLowerCase();
+
+    // append value (case-preserving)
+    if (vals.indexOf(fld) === -1) {
+      vals.push(fld);
+      val = val ? val + ', ' + fields[i] : fields[i];
+    }
+  }
+
+  return val;
+}
+
+/**
+ * Parse a vary header into an array.
+ *
+ * @param {String} header
+ * @return {Array}
+ * @private
+ */
+
+function parse(header) {
+  var end = 0;
+  var list = [];
+  var start = 0;
+
+  // gather tokens
+  for (var i = 0, len = header.length; i < len; i++) {
+    switch (header.charCodeAt(i)) {
+      case 0x20 /*   */:
+        if (start === end) {
+          start = end = i + 1;
+        }
+        break;
+      case 0x2c /* , */:
+        list.push(header.substring(start, end));
+        start = end = i + 1;
+        break;
+      default:
+        end = i + 1;
+        break;
+    }
+  }
+
+  // final token
+  list.push(header.substring(start, end));
+
+  return list;
+}
+
+/**
+ * Mark that a request is varied on a header field.
+ *
+ * @param {Object} res
+ * @param {String|Array} field
+ * @public
+ */
+
+function vary(res, field) {
+  if (!res || !res.getHeader || !res.setHeader) {
+    // quack quack
+    throw new TypeError('res argument is required');
+  }
+
+  // get existing header
+  var val = res.getHeader('Vary') || '';
+  var header = Array.isArray(val) ? val.join(', ') : String(val);
+
+  // set new header
+  if ((val = append(header, field))) {
+    res.setHeader('Vary', val);
+  }
+}
+
+export default vary;
+
+================
+File: reference/pages/api/index.ts
+================
+import * as Server from '@common/server';
+import * as Constants from '@common/constants';
+
+export default async function apiIndex(req, res) {
+  await Server.cors(req, res);
+
+  res.json({
+    success: true,
+    message: 'hey there, friend.',
+  });
+}
+
+================
+File: reference/pages/_app.tsx
+================
+import '@root/global.scss';
+
+import * as React from 'react';
+
+import Providers from '@components/Providers';
+
+function MyApp({ Component, pageProps }) {
+  return (
+    <Providers>
+      <Component {...pageProps} />
+    </Providers>
+  );
+}
+
+export default MyApp;
+
+================
+File: reference/pages/_document.tsx
+================
+import Document, { Html, Head, Main, NextScript } from 'next/document';
+
+export default class MyDocument extends Document {
+  render() {
+    return (
+      <Html>
+        <Head />
+        <body className="theme-light">
+          <Main />
+          <NextScript />
+        </body>
+      </Html>
+    );
+  }
+}
+
+================
+File: reference/.gitignore
+================
+.next
+.nova
+.env
+.env.local
+.env-custom-development
+.env-development
+.env-textile
+.env-production
+.DS_STORE
+DS_STORE
+yarn.lock
+node_modules
+dist
+analytics.txt
+package-lock.json
+
+/**/*/.DS_STORE
+/**/*/node_modules
+/**/*/.next
+/**/*/.data
+
+================
+File: reference/.prettierrc
+================
+{
+  "printWidth": 9999,
+  "tabWidth": 2,
+  "useTabs": false,
+  "semi": true,
+  "singleQuote": true,
+  "trailingComma": "es5",
+  "bracketSpacing": true,
+  "jsxBracketSameLine": false,
+  "arrowParens": "always",
+  "requirePragma": false,
+  "insertPragma": false,
+  "proseWrap": "preserve",
+  "parser": "babel-ts",
+  "overrides": [
+    {
+      "files": "*.js",
+      "options": {
+        "parser": "babel"
+      }
+    }
+  ]
+}
+
+================
+File: reference/global.scss
+================
+@font-face {
+  font-family: 'IosevkaTerm-Regular';
+  src: url('https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/6397be61-3ea4-459d-8a3e-fd95168cb214.woff2') format('woff2');
+}
+
+a,
+abbr,
+acronym,
+address,
+applet,
+article,
+aside,
+audio,
+b,
+big,
+blockquote,
+body,
+canvas,
+caption,
+center,
+cite,
+code,
+dd,
+del,
+details,
+dfn,
+div,
+dl,
+dt,
+embed,
+em,
+figure,
+figcaption,
+fieldset,
+footer,
+form,
+h1,
+h2,
+h3,
+h4,
+h5,
+h6,
+header,
+hgroup,
+html,
+i,
+iframe,
+img,
+ins,
+kbd,
+label,
+legend,
+li,
+mark,
+menu,
+nav,
+object,
+ol,
+output,
+p,
+pre,
+q,
+ruby,
+s,
+samp,
+section,
+small,
+span,
+strike,
+strong,
+sub,
+summary,
+sup,
+table,
+tbody,
+td,
+tfoot,
+th,
+thead,
+time,
+tr,
+tt,
+u,
+ul,
+var,
+video {
+  border: 0;
+  box-sizing: border-box;
+  margin: 0;
+  padding: 0;
+  vertical-align: baseline;
+}
+
+a {
+  background: var(--theme-border-subdued);
+  color: var(--theme-text);
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+    color: var(--theme-text);
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    color: var(--theme-text);
+    outline: 0;
+  }
+}
+
+ul {
+  list-style-position: inside;
+  list-style-type: '▪';
+  text-indent: -1ch;
+}
+
+ol {
+  list-style-type: '';
+  list-style-position: inside;
+  counter-reset: cupcake;
+  text-indent: -1ch;
+}
+
+ul ul,
+ul ol,
+ol ul,
+ol ol {
+  padding-left: 2ch;
+}
+
+ol li {
+  padding-left: 1ch;
+  counter-increment: cupcake;
+}
+
+ul li:before {
+  content: ' ';
+  display: inline-block;
+  width: 1ch;
+  height: 0;
+  visibility: hidden;
+}
+
+ol li:before {
+  content: counters(cupcake, '.') '. ';
+}
+
+article,
+aside,
+details,
+figcaption,
+figure,
+footer,
+header,
+hgroup,
+menu,
+nav,
+section {
+  display: block;
+}
+
+body.theme-blue {
+  --theme-overlay: var(--color-blue-20-5);
+  --theme-background: var(--color-blue-80);
+  --theme-background-modal: var(--color-blue-70);
+  --theme-background-modal-footer: var(--color-blue-90);
+  --theme-background-input: var(--color-blue-60);
+  --theme-border: var(--color-blue-70);
+  --theme-border-subdued: var(--color-blue-60-2);
+  --theme-text: var(--color-blue-10);
+  --theme-button: var(--color-blue-10);
+  --theme-button-text: var(--color-blue-80);
+  --theme-button-foreground: var(--color-blue-60);
+  --theme-button-background: var(--color-blue-70);
+  --theme-focused-foreground: var(--color-blue-50);
+  --theme-focused-foreground-subdued: var(--color-blue-50-5);
+}
+
+body.theme-light {
+  --theme-overlay: var(--color-black-100-4);
+  --theme-background: var(--color-white);
+  --theme-background-modal: var(--color-gray-20);
+  --theme-background-modal-footer: var(--color-gray-40);
+  --theme-background-input: var(--color-gray-10);
+  --theme-border: var(--color-gray-20);
+  --theme-border-subdued: var(--color-gray-40-2);
+  --theme-text: var(--color-black-100);
+  --theme-button: var(--color-black-100);
+  --theme-button-text: var(--color-white);
+  --theme-button-foreground: var(--color-gray-30);
+  --theme-button-background: var(--color-gray-20);
+  --theme-focused-foreground: var(--color-neon-green-50);
+  --theme-focused-foreground-subdued: var(--color-neon-green-50-5);
+}
+
+body.theme-dark {
+  --theme-overlay: var(--color-black-100-4);
+  --theme-background: var(--color-black-100);
+  --theme-background-modal: var(--color-gray-80);
+  --theme-background-modal-footer: var(--color-gray-70);
+  --theme-background-input: var(--color-gray-60);
+  --theme-border: var(--color-gray-80);
+  --theme-border-subdued: var(--color-gray-70-3);
+  --theme-text: var(--color-white);
+  --theme-button: var(--color-white);
+  --theme-button-text: var(--color-black-100);
+  --theme-button-foreground: var(--color-gray-90);
+  --theme-button-background: var(--color-gray-80);
+  --theme-focused-foreground: var(--color-daybreak-10);
+  --theme-focused-foreground-subdued: var(--color-daybreak-10-5);
+}
+
+body.theme-green {
+  --theme-overlay: var(--color-neon-green-100-4);
+  --theme-background: rgba(44, 255, 5);
+  --theme-background-modal: var(--color-neon-green-50);
+  --theme-background-modal-footer: var(--color-neon-green-50-5);
+  --theme-background-input: var(--color-neon-green-30);
+  --theme-border: var(--color-neon-green-60);
+  --theme-border-subdued: var(--color-neon-green-60-3);
+  --theme-text: var(--color-neon-green-100);
+  --theme-button: var(--color-neon-green-100);
+  --theme-button-text: var(--color-neon-green-10);
+  --theme-button-foreground: var(--color-neon-green-80);
+  --theme-button-background: var(--color-neon-green-70);
+  --theme-focused-foreground: rgba(255, 82, 243, 1);
+  --theme-focused-foreground-subdued: rgba(255, 82, 243, 0.5);
+}
+
+body.theme-black-red {
+  --theme-overlay: var(--color-red-100-4);
+  --theme-background: var(--color-black-100);
+  --theme-background-modal: var(--color-red-70);
+  --theme-background-modal-footer: var(--color-red-80);
+  --theme-background-input: var(--color-red-60);
+  --theme-border: var(--color-red-60-7);
+  --theme-border-subdued: var(--color-red-60-3);
+  --theme-text: var(--color-red-30);
+  --theme-button: var(--color-red-100);
+  --theme-button-text: var(--color-red-20);
+  --theme-button-foreground: var(--color-red-80);
+  --theme-button-background: var(--color-red-90);
+  --theme-focused-foreground: var(--color-gray-70);
+  --theme-focused-foreground-subdued: var(--color-red-70-4);
+}
+
+body.theme-black-teal {
+  --theme-overlay: var(--color-teal-100-4);
+  --theme-background: var(--color-black-100);
+  --theme-background-modal: var(--color-teal-70);
+  --theme-background-modal-footer: var(--color-teal-80);
+  --theme-background-input: var(--color-teal-60);
+  --theme-border: var(--color-teal-60-7);
+  --theme-border-subdued: var(--color-teal-60-3);
+  --theme-text: var(--color-teal-30);
+  --theme-button: var(--color-teal-100);
+  --theme-button-text: var(--color-teal-20);
+  --theme-button-foreground: var(--color-teal-80);
+  --theme-button-background: var(--color-teal-90);
+  --theme-focused-foreground: var(--color-gray-70);
+  --theme-focused-foreground-subdued: var(--color-teal-70-4);
+}
+
+body.theme-black-green {
+  --theme-overlay: var(--color-black-100-4);
+  --theme-background: var(--color-black-100);
+  --theme-background-modal: var(--color-gray-90);
+  --theme-background-modal-footer: var(--color-gray-80);
+  --theme-background-input: var(--color-gray-70);
+  --theme-border: var(--color-gray-80);
+  --theme-border-subdued: var(--color-gray-70-3);
+  --theme-text: var(--color-green-50);
+  --theme-button: var(--color-green-50);
+  --theme-button-text: var(--color-green-80);
+  --theme-button-foreground: var(--color-green-80);
+  --theme-button-background: var(--color-green-90);
+  --theme-focused-foreground: var(--color-gray-30);
+  --theme-focused-foreground-subdued: var(--color-gray-40);
+}
+
+body.font-use-berkeley-mono {
+  --font-family-mono: 'TX02Mono-Regular', sans-serif;
+}
+
+body.font-use-commit-mono {
+  --font-family-mono: 'CommitMono-Regular', sans-serif;
+}
+
+body.font-use-departure-mono {
+  --font-family-mono: 'DepartureMono-Regular', sans-serif;
+}
+
+body.font-use-fira-code {
+  --font-family-mono: 'FiraCode-Regular', sans-serif;
+}
+
+body.font-use-fragment-mono {
+  --font-family-mono: 'FragmentMono-Regular', sans-serif;
+}
+
+body.font-use-iosevka-term {
+  --font-family-mono: 'IosevkaTerm-Regular', sans-serif;
+}
+
+body.font-use-jet-brains-mono {
+  --font-family-mono: 'JetBrainsMono-Regular', sans-serif;
+}
+
+body.font-use-server-mono {
+  --font-family-mono: 'ServerMono-Regular', sans-serif;
+}
+
+body.font-use-sfmono-square {
+  --font-family-mono: 'SFMonoSquare-Regular', sans-serif;
+}
+
+#__next {
+}
+
+html,
+body {
+  --color-black-100: rgba(0, 0, 0, 1);
+  --color-black-100-1: rgba(0, 0, 0, 0.1);
+  --color-black-100-2: rgba(0, 0, 0, 0.2);
+  --color-black-100-4: rgba(0, 0, 0, 0.4);
+  --color-black-daybreak-100: rgba(4, 2, 0, 1);
+  --color-black-daybreak-100-4: rgba(4, 2, 0, 0.4);
+
+  --color-blue-10: rgba(237, 245, 255, 1);
+  --color-blue-100: rgba(0, 17, 65, 1);
+  --color-blue-20: rgba(208, 226, 255, 1);
+  --color-blue-20-1: rgba(208, 226, 255, 0.1);
+  --color-blue-20-2: rgba(208, 226, 255, 0.2);
+  --color-blue-20-5: rgba(208, 226, 255, 0.5);
+  --color-blue-30: rgba(166, 200, 255, 1);
+  --color-blue-40: rgba(120, 169, 255, 1);
+  --color-blue-50: rgba(69, 137, 255, 1);
+  --color-blue-50-5: rgba(69, 137, 255, 0.5);
+  --color-blue-60: rgba(15, 98, 254, 1);
+  --color-blue-60-2: rgba(15, 98, 254, 0.2);
+  --color-blue-70: rgba(0, 67, 206, 1);
+  --color-blue-80: rgba(0, 45, 156, 1);
+  --color-blue-80-4: rgba(0, 45, 156, 0.4);
+  --color-blue-80-6: rgba(0, 45, 156, 0.6);
+  --color-blue-90: rgba(0, 29, 108, 1);
+  --color-blue-90-6: rgba(0, 29, 108, 0.6);
+
+  --color-daybreak: rgba(255, 108, 4, 1);
+  --color-daybreak-1: rgba(255, 108, 4, 0.1);
+  --color-daybreak-10: rgba(239, 99, 0, 1);
+  --color-daybreak-10-5: rgba(239, 99, 0, 0.5);
+  --color-daybreak-2: rgba(255, 108, 4, 0.2);
+  --color-daybreak-20: rgba(220, 91, 0, 1);
+  --color-daybreak-30: rgba(200, 83, 0, 1);
+  --color-daybreak-4: rgba(255, 108, 4, 0.4);
+  --color-daybreak-40: rgba(180, 75, 0, 1);
+  --color-daybreak-40-2: rgba(180, 75, 0, 0.2);
+  --color-daybreak-50: rgba(161, 67, 0, 1);
+  --color-daybreak-60: rgba(141, 59, 0, 1);
+  --color-daybreak-70: rgba(121, 50, 0, 1);
+  --color-daybreak-70-3: rgba(121, 50, 0, 0.3);
+  --color-daybreak-80: rgba(102, 42, 0, 1);
+  --color-daybreak-90: rgba(82, 34, 0, 1);
+
+  --color-gold-30: rgba(241, 194, 27, 1);
+
+  --color-gray-10: rgba(244, 244, 244, 1);
+  --color-gray-100: rgba(22, 22, 22, 1);
+  --color-gray-20: rgba(224, 224, 224, 1);
+  --color-gray-20-7: rgba(224, 224, 224, 0.7);
+  --color-gray-30: rgba(198, 198, 198, 1);
+  --color-gray-30-7: rgba(224, 224, 224, 0.7);
+  --color-gray-40: rgba(168, 168, 168, 1);
+  --color-gray-40-2: rgba(168, 168, 168, 0.2);
+  --color-gray-50: rgba(141, 141, 141, 1);
+  --color-gray-60: rgba(111, 111, 111, 1);
+  --color-gray-70: rgba(82, 82, 82, 1);
+  --color-gray-70-3: rgba(82, 82, 82, 0.3);
+  --color-gray-70-4: rgba(82, 82, 82, 0.4);
+  --color-gray-80: rgba(57, 57, 57, 1);
+  --color-gray-80-6: rgba(57, 57, 57, 0.6);
+  --color-gray-90: rgba(38, 38, 38, 1);
+  --color-gray-90-6: rgba(38, 38, 38, 0.6);
+
+  --color-green-100: rgba(7, 25, 8, 1);
+  --color-green-100: rgba(7, 25, 8, 1);
+  --color-green-90: rgba(2, 45, 13, 1);
+  --color-green-80: rgba(4, 67, 23, 1);
+  --color-green-70: rgba(14, 96, 39, 1);
+  --color-green-60: rgba(25, 128, 56, 1);
+  --color-green-60-3: rgba(25, 128, 56, 0.3);
+  --color-green-50: rgba(36, 161, 72, 1);
+  --color-green-40: rgba(66, 190, 101, 1);
+  --color-green-30: rgba(111, 220, 140, 1);
+  --color-green-20: rgba(167, 240, 186, 1);
+  --color-green-10: rgba(222, 251, 230, 1);
+
+  --color-neon-green-10: rgba(242, 255, 233, 1);
+  --color-neon-green-100: rgba(10, 44, 2, 1);
+  --color-neon-green-100-1: rgba(10, 44, 2, 0.1);
+  --color-neon-green-100-2: rgba(10, 44, 2, 0.2);
+  --color-neon-green-100-4: rgba(10, 44, 2, 0.4);
+  --color-neon-green-20: rgba(213, 255, 191, 1);
+  --color-neon-green-30: rgba(178, 255, 148, 1);
+  --color-neon-green-40: rgba(138, 255, 104, 1);
+  --color-neon-green-50: rgba(92, 255, 59, 1);
+  --color-neon-green-50-5: rgba(92, 255, 59, 0.5);
+  --color-neon-green-60: rgba(46, 231, 29, 1);
+  --color-neon-green-60-3: rgba(46, 231, 29, 0.3);
+  --color-neon-green-70: rgba(0, 207, 0, 1);
+  --color-neon-green-70-3: rgba(0, 207, 0, 0.3);
+  --color-neon-green-70-7: rgba(0, 207, 0, 0.7);
+  --color-neon-green-80: rgba(0, 159, 0, 1);
+  --color-neon-green-80-1: rgba(0, 159, 0, 0.1);
+  --color-neon-green-80-2: rgba(0, 159, 0, 0.2);
+  --color-neon-green-80-4: rgba(0, 159, 0, 0.4);
+  --color-neon-green-90: rgba(16, 107, 2, 1);
+
+  --color-red-100: rgba(45, 7, 9, 1);
+  --color-red-100-4: rgba(45, 7, 9, 0.4);
+  --color-red-90: rgba(82, 4, 8, 1);
+  --color-red-80: rgba(117, 14, 19, 1);
+  --color-red-70: rgba(162, 25, 31, 1);
+  --color-red-60: rgba(218, 30, 40, 1);
+  --color-red-60-7: rgba(218, 30, 40, 0.7);
+  --color-red-60-3: rgba(218, 30, 40, 0.3);
+  --color-red-50: rgba(250, 77, 86, 1);
+  --color-red-40: rgba(255, 131, 137, 1);
+  --color-red-30: rgba(255, 179, 184, 1);
+  --color-red-20: rgba(255, 215, 217, 1);
+  --color-red-10: rgba(255, 241, 241, 1);
+
+  --color-teal-100: rgba(8, 26, 28, 1);
+  --color-teal-100-4: rgba(8, 26, 28, 0.4);
+  --color-teal-90: rgba(2, 43, 48, 1);
+  --color-teal-80: rgba(0, 65, 68, 1);
+  --color-teal-70: rgba(0, 93, 93, 1);
+  --color-teal-70-4: rgba(0, 93, 93, 0.4);
+  --color-teal-70-3: rgba(0, 93, 93, 0.3);
+  --color-teal-60: rgba(0, 125, 121, 1);
+  --color-teal-60-7: rgba(0, 125, 121, 0.7);
+  --color-teal-60-3: rgba(0, 125, 121, 0.3);
+  --color-teal-50: rgba(0, 157, 154, 1);
+  --color-teal-40: rgba(8, 189, 186, 1);
+  --color-teal-30: rgba(61, 219, 217, 1);
+  --color-teal-20: rgba(158, 240, 240, 1);
+  --color-teal-10: rgba(217, 251, 251, 1);
+
+  --color-white: rgba(255, 255, 255, 1);
+  --color-white-1: rgba(255, 255, 255, 0.1);
+  --color-white-2: rgba(255, 255, 255, 0.2);
+  --color-white-4: rgba(255, 255, 255, 0.4);
+
+  --font-family: -apple-system, BlinkMacSystemFont, helvetica neue, helvetica, sans-serif;
+  --font-family-mono: 'IosevkaTerm-Regular', Consolas, monaco, monospace;
+  --font-family-serif: Georgia, Times New Roman, serif;
+
+  --theme-text: var(--color-black-100);
+  --theme-line-height-base: 1.25;
+  --font-size: 20px;
+
+  --z-index-page: 1;
+  --z-index-page-select: 3;
+  --z-index-page-tooltips: 4;
+  --z-index-page-popover: 5;
+  --z-index-page-dropdown-menus: 6;
+  --z-index-page-modals: 10;
+
+  background: var(--theme-background);
+  color: var(--theme-text);
+  font-family: var(--font-family-mono);
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+
+  font-size: var(--font-size);
+  font-optical-sizing: auto;
+  font-weight: 400;
+  font-variant-numeric: tabular-nums lining-nums;
+
+  &::-webkit-scrollbar {
+    background: transparent;
+    height: calc(var(--theme-line-height-base) * 1rem);
+    width: 1ch;
+  }
+
+  &::-webkit-scrollbar-track {
+    background: var(--theme-background);
+  }
+
+  &::-webkit-scrollbar-thumb {
+    background: var(--theme-border);
+  }
+
+  &::-webkit-scrollbar-thumb:hover {
+    background: var(--theme-border);
+  }
+
+  @media (max-width: 568px) {
+    --font-size: 16px;
+  }
+}
+
+================
+File: reference/LICENSE.md
+================
+Copyright (c) 2024 INTERNET DEVELOPMENT STUDIO COMPANY
+
+Permission is hereby granted, free of charge, to any person obtaining
+a copy of this software and associated documentation files (the
+"Software"), to deal in the Software without restriction, including
+without limitation the rights to use, copy, modify, merge, publish,
+distribute, sublicense, and/or sell copies of the Software, and to
+permit persons to whom the Software is furnished to do so, subject to
+the following conditions:
+
+The above copyright notice and this permission notice shall be
+included in all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+
+================
+File: reference/package.json
+================
+{
+  "name": "INTDEV",
+  "description": "A vocation guild and great hall for webmasters. We practice the craft of designing, building, shipping, and maintaining websites, platforms, brands, and applications—end to end.",
+  "engines": {
+    "node": ">=18"
+  },
+  "license": "MIT",
+  "version": "0.0.1",
+  "scripts": {
+    "dev": "next -p 10000",
+    "build": "next build",
+    "start": "PORT=10000 next start",
+    "lint": "next lint"
+  },
+  "dependencies": {
+    "next": "^15.1.3",
+    "react": "^19.0.0",
+    "react-dom": "^19.0.0",
+    "sass": "1.83.0"
+  },
+  "devDependencies": {
+    "@types/node": "^22.10.2",
+    "@types/react": "^19.0.2",
+    "ts-node": "^10.9.2",
+    "typescript": "^5.7.2"
+  }
+}
+
+================
+File: reference/README.md
+================
+# www-internet-v2
+
+TODO
+
+```sh
+npm install
+npm run dev
+```
+
+Go to `http://localhost:10000` in your browser of choice.
+
+### Contact
+
+If you have questions ping me on Twitter, [@wwwjim](https://www.twitter.com/wwwjim). Or you can ping [@internetxstudio](https://x.com/internetxstudio).
+
+================
+File: reference/tsconfig.json
+================
+{
+  "compilerOptions": {
+    "baseUrl": ".",
+    "paths": {
+      "@root/*": [
+        "./*"
+      ],
+      "@system/*": [
+        "./system/*"
+      ],
+      "@demos/*": [
+        "./demos/*"
+      ],
+      "@common/*": [
+        "./common/*"
+      ],
+      "@data/*": [
+        "./data/*"
+      ],
+      "@components/*": [
+        "./components/*"
+      ],
+      "@pages/*": [
+        "./pages/*"
+      ],
+      "@modules/*": [
+        "./modules/*"
+      ]
+    },
+    "target": "es5",
+    "lib": [
+      "dom",
+      "dom.iterable",
+      "esnext"
+    ],
+    "allowJs": true,
+    "skipLibCheck": true,
+    "strict": false,
+    "forceConsistentCasingInFileNames": true,
+    "noEmit": true,
+    "esModuleInterop": true,
+    "module": "esnext",
+    "moduleResolution": "node",
+    "resolveJsonModule": true,
+    "isolatedModules": true,
+    "jsx": "preserve",
+    "incremental": true,
+    "plugins": [
+      {
+        "name": "next"
+      }
+    ],
+    "strictNullChecks": true
+  },
+  "exclude": [
+    "node_modules",
+    "**/*.spec.ts"
+  ],
+  "include": [
+    "next-env.d.ts",
+    "**/*.ts",
+    "**/*.tsx",
+    ".next/types/**/*.ts"
+  ]
+}
+
+================
+File: src/app/globals.css
+================
+@tailwind base;
+@tailwind components;
+@tailwind utilities;
+
+:root {
+  --background: #ffffff;
+  --foreground: #171717;
+}
+
+@media (prefers-color-scheme: dark) {
+  :root {
+    --background: #0a0a0a;
+    --foreground: #ededed;
+  }
+}
+
+body {
+  color: var(--foreground);
+  background: var(--background);
+}
+
+================
+File: src/app/layout.tsx
+================
+import './globals.css';
+// Update this import to point to your actual Providers component location
+import Providers from '../components/Providers'; 
+
+export default function layout({
+  children,
+}: Readonly<{
+  children: React.ReactNode;
+}>) {
+  return (
+    <html lang="en">
+      <body className="theme-light">
+        <Providers>
+          {children}
+        </Providers>
+      </body>
+    </html>
+  );
+}
+
+================
+File: src/app/page.tsx
+================
+// Update these imports to point to your actual component and stylesheet locations
+import DefaultLayout from '../components/page/DefaultLayout'; 
+import styles from '../components/page/root.module.scss';
+import AsciiText from '../components/examples/AsciiText';
+
+export default function Home() {
+  return (
+    <DefaultLayout previewPixelSRC="https://intdev-global.s3.us-west-2.amazonaws.com/template-app-icon.png">
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <AsciiText text="🛹" />
+        </div>
+      </div>
+    </DefaultLayout>
+  );
+}
+
+================
+File: .gitignore
+================
+# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
+
+# dependencies
+/node_modules
+/.pnp
+.pnp.*
+.yarn/*
+!.yarn/patches
+!.yarn/plugins
+!.yarn/releases
+!.yarn/versions
+
+# testing
+/coverage
+
+# next.js
+/.next/
+/out/
+
+# production
+/build
+
+# misc
+.DS_Store
+*.pem
+
+# debug
+npm-debug.log*
+yarn-debug.log*
+yarn-error.log*
+.pnpm-debug.log*
+
+# env files (can opt-in for committing if needed)
+.env*
+
+# vercel
+.vercel
+
+# typescript
+*.tsbuildinfo
+next-env.d.ts
+.aider*
+
+================
+File: eslint.config.mjs
+================
+import { dirname } from "path";
+import { fileURLToPath } from "url";
+import { FlatCompat } from "@eslint/eslintrc";
+
+const __filename = fileURLToPath(import.meta.url);
+const __dirname = dirname(__filename);
+
+const compat = new FlatCompat({
+  baseDirectory: __dirname,
+});
+
+const eslintConfig = [
+  ...compat.extends("next/core-web-vitals", "next/typescript"),
+];
+
+export default eslintConfig;
+
+================
+File: next.config.ts
+================
+import type { NextConfig } from "next";
+
+const nextConfig: NextConfig = {
+  /* config options here */
+};
+
+export default nextConfig;
+
+================
+File: package.json
+================
+{
+  "name": "adam-web",
+  "version": "0.1.0",
+  "private": true,
+  "description": "Website for Adam Delaney", // Update description
+  "scripts": {
+    "dev": "next dev", // Removed --turbopack
+    "build": "next build",
+    "start": "next start",
+    "lint": "next lint"
+  },
+  "dependencies": {
+    "next": "15.1.6",
+    "react": "^19.0.0",
+    "react-dom": "^19.0.0",
+    "sass": "^1.84.0"
+    // Add any missing dependencies from reference/package.json here
+  },
+  "devDependencies": {
+    "@eslint/eslintrc": "^3",
+    "@types/node": "^20",
+    "@types/react": "^19",
+    "@types/react-dom": "^19",
+    "eslint": "^9",
+    "eslint-config-next": "15.1.6",
+    "postcss": "^8",
+    "tailwindcss": "^3.4.1",
+    "typescript": "^5"
+  }
+}
+
+================
+File: postcss.config.mjs
+================
+/** @type {import('postcss-load-config').Config} */
+const config = {
+  plugins: {
+    tailwindcss: {},
+  },
+};
+
+export default config;
+
+================
+File: README.md
+================
+This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).
+
+## Getting Started
+
+First, run the development server:
+
+```bash
+npm run dev
+# or
+yarn dev
+# or
+pnpm dev
+# or
+bun dev
+```
+
+Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.
+
+You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.
+
+This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.
+
+## Learn More
+
+To learn more about Next.js, take a look at the following resources:
+
+- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
+- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.
+
+You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!
+
+## Deploy on Vercel
+
+The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.
+
+Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
+
+================
+File: tailwind.config.ts
+================
+import type { Config } from "tailwindcss";
+
+export default {
+  content: [
+    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
+    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
+    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
+  ],
+  theme: {
+    extend: {
+      colors: {
+        background: "var(--background)",
+        foreground: "var(--foreground)",
+      },
+    },
+  },
+  plugins: [],
+} satisfies Config;
+
+================
+File: tsconfig.json
+================
+{
+  "compilerOptions": {
+    "target": "ES2017",
+    "lib": ["dom", "dom.iterable", "esnext"],
+    "allowJs": true,
+    "skipLibCheck": true,
+    "strict": true,
+    "noEmit": true,
+    "esModuleInterop": true,
+    "module": "esnext",
+    "moduleResolution": "bundler",
+    "resolveJsonModule": true,
+    "isolatedModules": true,
+    "jsx": "preserve",
+    "incremental": true,
+    "plugins": [
+      {
+        "name": "next"
+      }
+    ],
+    "paths": {
+      "@/*": ["./src/*"]
+    }
+  },
+  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
+  "exclude": ["node_modules"]
+}
+

# 2025-02-07 23:57:45.084921
+s

# 2025-02-07 23:57:46.884891
+y

# 2025-02-07 23:57:58.029073
+This file is a merged representation of the entire codebase, combining all repository files into a single document.
+Generated by Repomix on: 2025-02-08T07:57:51.648Z
+
+================================================================
+File Summary
+================================================================
+
+Purpose:
+--------
+This file contains a packed representation of the entire repository's contents.
+It is designed to be easily consumable by AI systems for analysis, code review,
+or other automated processes.
+
+File Format:
+------------
+The content is organized as follows:
+1. This summary section
+2. Repository information
+3. Directory structure
+4. Multiple file entries, each consisting of:
+  a. A separator line (================)
+  b. The file path (File: path/to/file)
+  c. Another separator line
+  d. The full contents of the file
+  e. A blank line
+
+Usage Guidelines:
+-----------------
+- This file should be treated as read-only. Any changes should be made to the
+  original repository files, not this packed version.
+- When processing this file, use the file path to distinguish
+  between different files in the repository.
+- Be aware that this file may contain sensitive information. Handle it with
+  the same level of security as you would the original repository.
+
+Notes:
+------
+- Some files may have been excluded based on .gitignore rules and Repomix's
+  configuration.
+- Binary files are not included in this packed representation. Please refer to
+  the Repository Structure section for a complete list of file paths, including
+  binary files.
+
+Additional Info:
+----------------
+
+================================================================
+Directory Structure
+================================================================
+public/
+  file.svg
+  globe.svg
+  next.svg
+  vercel.svg
+  window.svg
+reference/
+  .git/
+    hooks/
+      applypatch-msg.sample
+      commit-msg.sample
+      fsmonitor-watchman.sample
+      post-update.sample
+      pre-applypatch.sample
+      pre-commit.sample
+      pre-merge-commit.sample
+      pre-push.sample
+      pre-rebase.sample
+      pre-receive.sample
+      prepare-commit-msg.sample
+      push-to-checkout.sample
+      update.sample
+    info/
+      exclude
+    logs/
+      refs/
+        heads/
+          main
+        remotes/
+          origin/
+            HEAD
+      HEAD
+    refs/
+      heads/
+        main
+      remotes/
+        origin/
+          HEAD
+    config
+    description
+    FETCH_HEAD
+    HEAD
+    packed-refs
+  app/
+    office/
+      head.tsx
+      layout.tsx
+      page.tsx
+    head.tsx
+    layout.tsx
+    manifest.ts
+    page.tsx
+    robots.ts
+    sitemap.ts
+  common/
+    constants.ts
+    hooks.ts
+    position.ts
+    queries.ts
+    server.ts
+    utilities.ts
+  components/
+    detectors/
+      OutsideElementEvent.tsx
+    examples/
+      AS400.module.scss
+      AS400.tsx
+      DashboardRadar.module.scss
+      DashboardRadar.tsx
+      Denabase.module.scss
+      Denabase.tsx
+      MessagesInterface.tsx
+      UpdatingDataTable.tsx
+    modals/
+      ModalAlert.module.scss
+      ModalAlert.tsx
+      ModalCanvasPlatformer.module.scss
+      ModalCanvasPlatformer.tsx
+      ModalCanvasSnake.module.scss
+      ModalCanvasSnake.tsx
+      ModalChess.module.scss
+      ModalChess.tsx
+      ModalCreateAccount.module.scss
+      ModalCreateAccount.tsx
+      ModalError.module.scss
+      ModalError.tsx
+      ModalMatrixModes.module.scss
+      ModalMatrixModes.tsx
+    page/
+      DefaultActionBar.module.scss
+      DefaultActionBar.tsx
+      DefaultLayout.module.scss
+      DefaultLayout.tsx
+      ModalContext.tsx
+      root.module.scss
+    svg/
+      InternetDevelopmentLogo.tsx
+      InternetDevelopmentLogoMark.tsx
+      Sphere.tsx
+    Accordion.module.scss
+    Accordion.tsx
+    ActionBar.module.scss
+    ActionBar.tsx
+    ActionButton.module.scss
+    ActionButton.tsx
+    ActionListItem.module.scss
+    ActionListItem.tsx
+    AlertBanner.module.scss
+    AlertBanner.tsx
+    Avatar.module.scss
+    Avatar.tsx
+    Badge.module.scss
+    Badge.tsx
+    BarLoader.module.scss
+    BarLoader.tsx
+    BarProgress.module.scss
+    BarProgress.tsx
+    Block.module.scss
+    Block.tsx
+    BlockLoader.module.scss
+    BlockLoader.tsx
+    BreadCrumbs.module.scss
+    BreadCrumbs.tsx
+    Button.module.scss
+    Button.tsx
+    ButtonGroup.module.scss
+    ButtonGroup.tsx
+    Canvas.module.scss
+    Canvas.tsx
+    CanvasPlatformer.module.scss
+    CanvasPlatformer.tsx
+    CanvasSnake.module.scss
+    CanvasSnake.tsx
+    Card.module.scss
+    Card.tsx
+    CardDouble.module.scss
+    CardDouble.tsx
+    Checkbox.module.scss
+    Checkbox.tsx
+    Chessboard.module.scss
+    Chessboard.tsx
+    CodeBlock.module.scss
+    CodeBlock.tsx
+    ComboBox.module.scss
+    ComboBox.tsx
+    ContentFluid.module.scss
+    ContentFluid.tsx
+    DataTable.module.scss
+    DataTable.tsx
+    DatePicker.module.scss
+    DatePicker.tsx
+    DebugGrid.tsx
+    DefaultMetaTags.tsx
+    Dialog.module.scss
+    Dialog.tsx
+    Divider.module.scss
+    Divider.tsx
+    Drawer.module.scss
+    Drawer.tsx
+    DropdownMenu.module.scss
+    DropdownMenu.tsx
+    DropdownMenuTrigger.module.scss
+    DropdownMenuTrigger.tsx
+    Grid.module.scss
+    Grid.tsx
+    HoverComponentTrigger.module.scss
+    HoverComponentTrigger.tsx
+    Indent.module.scss
+    Indent.tsx
+    Input.module.scss
+    Input.tsx
+    ListItem.module.scss
+    ListItem.tsx
+    MatrixLoader.module.scss
+    MatrixLoader.tsx
+    Message.module.scss
+    Message.tsx
+    MessageViewer.module.scss
+    MessageViewer.tsx
+    ModalStack.module.scss
+    ModalStack.tsx
+    ModalTrigger.tsx
+    Navigation.module.scss
+    Navigation.tsx
+    NumberRangeSlider.module.scss
+    NumberRangeSlider.tsx
+    Popover.module.scss
+    Popover.tsx
+    Providers.tsx
+    RadioButton.module.scss
+    RadioButton.tsx
+    RadioButtonGroup.tsx
+    Row.module.scss
+    Row.tsx
+    RowEllipsis.module.scss
+    RowEllipsis.tsx
+    RowSpaceBetween.module.scss
+    RowSpaceBetween.tsx
+    Select.module.scss
+    Select.tsx
+    SidebarLayout.module.scss
+    SidebarLayout.tsx
+    Table.module.scss
+    Table.tsx
+    TableColumn.module.scss
+    TableColumn.tsx
+    TableRow.module.scss
+    TableRow.tsx
+    Text.module.scss
+    Text.tsx
+    TextArea.module.scss
+    TextArea.tsx
+    Tooltip.module.scss
+    Tooltip.tsx
+    TreeView.module.scss
+    TreeView.tsx
+  modules/
+    hotkeys/
+      bound-hotkeys-proxy-provider.tsx
+      hotkeys-provider.tsx
+      index.ts
+      is-hotkey-pressed.ts
+      parse-hotkeys.ts
+      types.ts
+      use-deep-equal-memo.ts
+      use-hotkeys.ts
+      use-record-hotkeys.ts
+      validators.ts
+    cors.ts
+    object-assign.ts
+    vary.ts
+  pages/
+    api/
+      index.ts
+    _app.tsx
+    _document.tsx
+  .gitignore
+  .prettierrc
+  global.scss
+  LICENSE.md
+  package.json
+  README.md
+  tsconfig.json
+src/
+  app/
+    globals.css
+    layout.tsx
+    page.tsx
+.gitignore
+eslint.config.mjs
+next.config.ts
+package.json
+postcss.config.mjs
+README.md
+tailwind.config.ts
+tsconfig.json
+
+================================================================
+Files
+================================================================
+
+================
+File: public/file.svg
+================
+<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
+
+================
+File: public/globe.svg
+================
+<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
+
+================
+File: public/next.svg
+================
+<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
+
+================
+File: public/vercel.svg
+================
+<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
+
+================
+File: public/window.svg
+================
+<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
+
+================
+File: reference/.git/hooks/applypatch-msg.sample
+================
+#!/bin/sh
+#
+# An example hook script to check the commit log message taken by
+# applypatch from an e-mail message.
+#
+# The hook should exit with non-zero status after issuing an
+# appropriate message if it wants to stop the commit.  The hook is
+# allowed to edit the commit message file.
+#
+# To enable this hook, rename this file to "applypatch-msg".
+
+. git-sh-setup
+commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
+test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
+:
+
+================
+File: reference/.git/hooks/commit-msg.sample
+================
+#!/bin/sh
+#
+# An example hook script to check the commit log message.
+# Called by "git commit" with one argument, the name of the file
+# that has the commit message.  The hook should exit with non-zero
+# status after issuing an appropriate message if it wants to stop the
+# commit.  The hook is allowed to edit the commit message file.
+#
+# To enable this hook, rename this file to "commit-msg".
+
+# Uncomment the below to add a Signed-off-by line to the message.
+# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
+# hook is more suited to it.
+#
+# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
+# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"
+
+# This example catches duplicate Signed-off-by lines.
+
+test "" = "$(grep '^Signed-off-by: ' "$1" |
+	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
+	echo >&2 Duplicate Signed-off-by lines.
+	exit 1
+}
+
+================
+File: reference/.git/hooks/fsmonitor-watchman.sample
+================
+#!/usr/bin/perl
+
+use strict;
+use warnings;
+use IPC::Open2;
+
+# An example hook script to integrate Watchman
+# (https://facebook.github.io/watchman/) with git to speed up detecting
+# new and modified files.
+#
+# The hook is passed a version (currently 2) and last update token
+# formatted as a string and outputs to stdout a new update token and
+# all files that have been modified since the update token. Paths must
+# be relative to the root of the working tree and separated by a single NUL.
+#
+# To enable this hook, rename this file to "query-watchman" and set
+# 'git config core.fsmonitor .git/hooks/query-watchman'
+#
+my ($version, $last_update_token) = @ARGV;
+
+# Uncomment for debugging
+# print STDERR "$0 $version $last_update_token\n";
+
+# Check the hook interface version
+if ($version ne 2) {
+	die "Unsupported query-fsmonitor hook version '$version'.\n" .
+	    "Falling back to scanning...\n";
+}
+
+my $git_work_tree = get_working_dir();
+
+my $retry = 1;
+
+my $json_pkg;
+eval {
+	require JSON::XS;
+	$json_pkg = "JSON::XS";
+	1;
+} or do {
+	require JSON::PP;
+	$json_pkg = "JSON::PP";
+};
+
+launch_watchman();
+
+sub launch_watchman {
+	my $o = watchman_query();
+	if (is_work_tree_watched($o)) {
+		output_result($o->{clock}, @{$o->{files}});
+	}
+}
+
+sub output_result {
+	my ($clockid, @files) = @_;
+
+	# Uncomment for debugging watchman output
+	# open (my $fh, ">", ".git/watchman-output.out");
+	# binmode $fh, ":utf8";
+	# print $fh "$clockid\n@files\n";
+	# close $fh;
+
+	binmode STDOUT, ":utf8";
+	print $clockid;
+	print "\0";
+	local $, = "\0";
+	print @files;
+}
+
+sub watchman_clock {
+	my $response = qx/watchman clock "$git_work_tree"/;
+	die "Failed to get clock id on '$git_work_tree'.\n" .
+		"Falling back to scanning...\n" if $? != 0;
+
+	return $json_pkg->new->utf8->decode($response);
+}
+
+sub watchman_query {
+	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
+	or die "open2() failed: $!\n" .
+	"Falling back to scanning...\n";
+
+	# In the query expression below we're asking for names of files that
+	# changed since $last_update_token but not from the .git folder.
+	#
+	# To accomplish this, we're using the "since" generator to use the
+	# recency index to select candidate nodes and "fields" to limit the
+	# output to file names only. Then we're using the "expression" term to
+	# further constrain the results.
+	my $last_update_line = "";
+	if (substr($last_update_token, 0, 1) eq "c") {
+		$last_update_token = "\"$last_update_token\"";
+		$last_update_line = qq[\n"since": $last_update_token,];
+	}
+	my $query = <<"	END";
+		["query", "$git_work_tree", {$last_update_line
+			"fields": ["name"],
+			"expression": ["not", ["dirname", ".git"]]
+		}]
+	END
+
+	# Uncomment for debugging the watchman query
+	# open (my $fh, ">", ".git/watchman-query.json");
+	# print $fh $query;
+	# close $fh;
+
+	print CHLD_IN $query;
+	close CHLD_IN;
+	my $response = do {local $/; <CHLD_OUT>};
+
+	# Uncomment for debugging the watch response
+	# open ($fh, ">", ".git/watchman-response.json");
+	# print $fh $response;
+	# close $fh;
+
+	die "Watchman: command returned no output.\n" .
+	"Falling back to scanning...\n" if $response eq "";
+	die "Watchman: command returned invalid output: $response\n" .
+	"Falling back to scanning...\n" unless $response =~ /^\{/;
+
+	return $json_pkg->new->utf8->decode($response);
+}
+
+sub is_work_tree_watched {
+	my ($output) = @_;
+	my $error = $output->{error};
+	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
+		$retry--;
+		my $response = qx/watchman watch "$git_work_tree"/;
+		die "Failed to make watchman watch '$git_work_tree'.\n" .
+		    "Falling back to scanning...\n" if $? != 0;
+		$output = $json_pkg->new->utf8->decode($response);
+		$error = $output->{error};
+		die "Watchman: $error.\n" .
+		"Falling back to scanning...\n" if $error;
+
+		# Uncomment for debugging watchman output
+		# open (my $fh, ">", ".git/watchman-output.out");
+		# close $fh;
+
+		# Watchman will always return all files on the first query so
+		# return the fast "everything is dirty" flag to git and do the
+		# Watchman query just to get it over with now so we won't pay
+		# the cost in git to look up each individual file.
+		my $o = watchman_clock();
+		$error = $output->{error};
+
+		die "Watchman: $error.\n" .
+		"Falling back to scanning...\n" if $error;
+
+		output_result($o->{clock}, ("/"));
+		$last_update_token = $o->{clock};
+
+		eval { launch_watchman() };
+		return 0;
+	}
+
+	die "Watchman: $error.\n" .
+	"Falling back to scanning...\n" if $error;
+
+	return 1;
+}
+
+sub get_working_dir {
+	my $working_dir;
+	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
+		$working_dir = Win32::GetCwd();
+		$working_dir =~ tr/\\/\//;
+	} else {
+		require Cwd;
+		$working_dir = Cwd::cwd();
+	}
+
+	return $working_dir;
+}
+
+================
+File: reference/.git/hooks/post-update.sample
+================
+#!/bin/sh
+#
+# An example hook script to prepare a packed repository for use over
+# dumb transports.
+#
+# To enable this hook, rename this file to "post-update".
+
+exec git update-server-info
+
+================
+File: reference/.git/hooks/pre-applypatch.sample
+================
+#!/bin/sh
+#
+# An example hook script to verify what is about to be committed
+# by applypatch from an e-mail message.
+#
+# The hook should exit with non-zero status after issuing an
+# appropriate message if it wants to stop the commit.
+#
+# To enable this hook, rename this file to "pre-applypatch".
+
+. git-sh-setup
+precommit="$(git rev-parse --git-path hooks/pre-commit)"
+test -x "$precommit" && exec "$precommit" ${1+"$@"}
+:
+
+================
+File: reference/.git/hooks/pre-commit.sample
+================
+#!/bin/sh
+#
+# An example hook script to verify what is about to be committed.
+# Called by "git commit" with no arguments.  The hook should
+# exit with non-zero status after issuing an appropriate message if
+# it wants to stop the commit.
+#
+# To enable this hook, rename this file to "pre-commit".
+
+if git rev-parse --verify HEAD >/dev/null 2>&1
+then
+	against=HEAD
+else
+	# Initial commit: diff against an empty tree object
+	against=$(git hash-object -t tree /dev/null)
+fi
+
+# If you want to allow non-ASCII filenames set this variable to true.
+allownonascii=$(git config --type=bool hooks.allownonascii)
+
+# Redirect output to stderr.
+exec 1>&2
+
+# Cross platform projects tend to avoid non-ASCII filenames; prevent
+# them from being added to the repository. We exploit the fact that the
+# printable range starts at the space character and ends with tilde.
+if [ "$allownonascii" != "true" ] &&
+	# Note that the use of brackets around a tr range is ok here, (it's
+	# even required, for portability to Solaris 10's /usr/bin/tr), since
+	# the square bracket bytes happen to fall in the designated range.
+	test $(git diff --cached --name-only --diff-filter=A -z $against |
+	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
+then
+	cat <<\EOF
+Error: Attempt to add a non-ASCII file name.
+
+This can cause problems if you want to work with people on other platforms.
+
+To be portable it is advisable to rename the file.
+
+If you know what you are doing you can disable this check using:
+
+  git config hooks.allownonascii true
+EOF
+	exit 1
+fi
+
+# If there are whitespace errors, print the offending file names and fail.
+exec git diff-index --check --cached $against --
+
+================
+File: reference/.git/hooks/pre-merge-commit.sample
+================
+#!/bin/sh
+#
+# An example hook script to verify what is about to be committed.
+# Called by "git merge" with no arguments.  The hook should
+# exit with non-zero status after issuing an appropriate message to
+# stderr if it wants to stop the merge commit.
+#
+# To enable this hook, rename this file to "pre-merge-commit".
+
+. git-sh-setup
+test -x "$GIT_DIR/hooks/pre-commit" &&
+        exec "$GIT_DIR/hooks/pre-commit"
+:
+
+================
+File: reference/.git/hooks/pre-push.sample
+================
+#!/bin/sh
+
+# An example hook script to verify what is about to be pushed.  Called by "git
+# push" after it has checked the remote status, but before anything has been
+# pushed.  If this script exits with a non-zero status nothing will be pushed.
+#
+# This hook is called with the following parameters:
+#
+# $1 -- Name of the remote to which the push is being done
+# $2 -- URL to which the push is being done
+#
+# If pushing without using a named remote those arguments will be equal.
+#
+# Information about the commits which are being pushed is supplied as lines to
+# the standard input in the form:
+#
+#   <local ref> <local oid> <remote ref> <remote oid>
+#
+# This sample shows how to prevent push of commits where the log message starts
+# with "WIP" (work in progress).
+
+remote="$1"
+url="$2"
+
+zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
+
+while read local_ref local_oid remote_ref remote_oid
+do
+	if test "$local_oid" = "$zero"
+	then
+		# Handle delete
+		:
+	else
+		if test "$remote_oid" = "$zero"
+		then
+			# New branch, examine all commits
+			range="$local_oid"
+		else
+			# Update to existing branch, examine new commits
+			range="$remote_oid..$local_oid"
+		fi
+
+		# Check for WIP commit
+		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
+		if test -n "$commit"
+		then
+			echo >&2 "Found WIP commit in $local_ref, not pushing"
+			exit 1
+		fi
+	fi
+done
+
+exit 0
+
+================
+File: reference/.git/hooks/pre-rebase.sample
+================
+#!/bin/sh
+#
+# Copyright (c) 2006, 2008 Junio C Hamano
+#
+# The "pre-rebase" hook is run just before "git rebase" starts doing
+# its job, and can prevent the command from running by exiting with
+# non-zero status.
+#
+# The hook is called with the following parameters:
+#
+# $1 -- the upstream the series was forked from.
+# $2 -- the branch being rebased (or empty when rebasing the current branch).
+#
+# This sample shows how to prevent topic branches that are already
+# merged to 'next' branch from getting rebased, because allowing it
+# would result in rebasing already published history.
+
+publish=next
+basebranch="$1"
+if test "$#" = 2
+then
+	topic="refs/heads/$2"
+else
+	topic=`git symbolic-ref HEAD` ||
+	exit 0 ;# we do not interrupt rebasing detached HEAD
+fi
+
+case "$topic" in
+refs/heads/??/*)
+	;;
+*)
+	exit 0 ;# we do not interrupt others.
+	;;
+esac
+
+# Now we are dealing with a topic branch being rebased
+# on top of master.  Is it OK to rebase it?
+
+# Does the topic really exist?
+git show-ref -q "$topic" || {
+	echo >&2 "No such branch $topic"
+	exit 1
+}
+
+# Is topic fully merged to master?
+not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
+if test -z "$not_in_master"
+then
+	echo >&2 "$topic is fully merged to master; better remove it."
+	exit 1 ;# we could allow it, but there is no point.
+fi
+
+# Is topic ever merged to next?  If so you should not be rebasing it.
+only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
+only_next_2=`git rev-list ^master           ${publish} | sort`
+if test "$only_next_1" = "$only_next_2"
+then
+	not_in_topic=`git rev-list "^$topic" master`
+	if test -z "$not_in_topic"
+	then
+		echo >&2 "$topic is already up to date with master"
+		exit 1 ;# we could allow it, but there is no point.
+	else
+		exit 0
+	fi
+else
+	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
+	/usr/bin/perl -e '
+		my $topic = $ARGV[0];
+		my $msg = "* $topic has commits already merged to public branch:\n";
+		my (%not_in_next) = map {
+			/^([0-9a-f]+) /;
+			($1 => 1);
+		} split(/\n/, $ARGV[1]);
+		for my $elem (map {
+				/^([0-9a-f]+) (.*)$/;
+				[$1 => $2];
+			} split(/\n/, $ARGV[2])) {
+			if (!exists $not_in_next{$elem->[0]}) {
+				if ($msg) {
+					print STDERR $msg;
+					undef $msg;
+				}
+				print STDERR " $elem->[1]\n";
+			}
+		}
+	' "$topic" "$not_in_next" "$not_in_master"
+	exit 1
+fi
+
+<<\DOC_END
+
+This sample hook safeguards topic branches that have been
+published from being rewound.
+
+The workflow assumed here is:
+
+ * Once a topic branch forks from "master", "master" is never
+   merged into it again (either directly or indirectly).
+
+ * Once a topic branch is fully cooked and merged into "master",
+   it is deleted.  If you need to build on top of it to correct
+   earlier mistakes, a new topic branch is created by forking at
+   the tip of the "master".  This is not strictly necessary, but
+   it makes it easier to keep your history simple.
+
+ * Whenever you need to test or publish your changes to topic
+   branches, merge them into "next" branch.
+
+The script, being an example, hardcodes the publish branch name
+to be "next", but it is trivial to make it configurable via
+$GIT_DIR/config mechanism.
+
+With this workflow, you would want to know:
+
+(1) ... if a topic branch has ever been merged to "next".  Young
+    topic branches can have stupid mistakes you would rather
+    clean up before publishing, and things that have not been
+    merged into other branches can be easily rebased without
+    affecting other people.  But once it is published, you would
+    not want to rewind it.
+
+(2) ... if a topic branch has been fully merged to "master".
+    Then you can delete it.  More importantly, you should not
+    build on top of it -- other people may already want to
+    change things related to the topic as patches against your
+    "master", so if you need further changes, it is better to
+    fork the topic (perhaps with the same name) afresh from the
+    tip of "master".
+
+Let's look at this example:
+
+		   o---o---o---o---o---o---o---o---o---o "next"
+		  /       /           /           /
+		 /   a---a---b A     /           /
+		/   /               /           /
+	       /   /   c---c---c---c B         /
+	      /   /   /             \         /
+	     /   /   /   b---b C     \       /
+	    /   /   /   /             \     /
+    ---o---o---o---o---o---o---o---o---o---o---o "master"
+
+
+A, B and C are topic branches.
+
+ * A has one fix since it was merged up to "next".
+
+ * B has finished.  It has been fully merged up to "master" and "next",
+   and is ready to be deleted.
+
+ * C has not merged to "next" at all.
+
+We would want to allow C to be rebased, refuse A, and encourage
+B to be deleted.
+
+To compute (1):
+
+	git rev-list ^master ^topic next
+	git rev-list ^master        next
+
+	if these match, topic has not merged in next at all.
+
+To compute (2):
+
+	git rev-list master..topic
+
+	if this is empty, it is fully merged to "master".
+
+DOC_END
+
+================
+File: reference/.git/hooks/pre-receive.sample
+================
+#!/bin/sh
+#
+# An example hook script to make use of push options.
+# The example simply echoes all push options that start with 'echoback='
+# and rejects all pushes when the "reject" push option is used.
+#
+# To enable this hook, rename this file to "pre-receive".
+
+if test -n "$GIT_PUSH_OPTION_COUNT"
+then
+	i=0
+	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
+	do
+		eval "value=\$GIT_PUSH_OPTION_$i"
+		case "$value" in
+		echoback=*)
+			echo "echo from the pre-receive-hook: ${value#*=}" >&2
+			;;
+		reject)
+			exit 1
+		esac
+		i=$((i + 1))
+	done
+fi
+
+================
+File: reference/.git/hooks/prepare-commit-msg.sample
+================
+#!/bin/sh
+#
+# An example hook script to prepare the commit log message.
+# Called by "git commit" with the name of the file that has the
+# commit message, followed by the description of the commit
+# message's source.  The hook's purpose is to edit the commit
+# message file.  If the hook fails with a non-zero status,
+# the commit is aborted.
+#
+# To enable this hook, rename this file to "prepare-commit-msg".
+
+# This hook includes three examples. The first one removes the
+# "# Please enter the commit message..." help message.
+#
+# The second includes the output of "git diff --name-status -r"
+# into the message, just before the "git status" output.  It is
+# commented because it doesn't cope with --amend or with squashed
+# commits.
+#
+# The third example adds a Signed-off-by line to the message, that can
+# still be edited.  This is rarely a good idea.
+
+COMMIT_MSG_FILE=$1
+COMMIT_SOURCE=$2
+SHA1=$3
+
+/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"
+
+# case "$COMMIT_SOURCE,$SHA1" in
+#  ,|template,)
+#    /usr/bin/perl -i.bak -pe '
+#       print "\n" . `git diff --cached --name-status -r`
+# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
+#  *) ;;
+# esac
+
+# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
+# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
+# if test -z "$COMMIT_SOURCE"
+# then
+#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
+# fi
+
+================
+File: reference/.git/hooks/push-to-checkout.sample
+================
+#!/bin/sh
+
+# An example hook script to update a checked-out tree on a git push.
+#
+# This hook is invoked by git-receive-pack(1) when it reacts to git
+# push and updates reference(s) in its repository, and when the push
+# tries to update the branch that is currently checked out and the
+# receive.denyCurrentBranch configuration variable is set to
+# updateInstead.
+#
+# By default, such a push is refused if the working tree and the index
+# of the remote repository has any difference from the currently
+# checked out commit; when both the working tree and the index match
+# the current commit, they are updated to match the newly pushed tip
+# of the branch. This hook is to be used to override the default
+# behaviour; however the code below reimplements the default behaviour
+# as a starting point for convenient modification.
+#
+# The hook receives the commit with which the tip of the current
+# branch is going to be updated:
+commit=$1
+
+# It can exit with a non-zero status to refuse the push (when it does
+# so, it must not modify the index or the working tree).
+die () {
+	echo >&2 "$*"
+	exit 1
+}
+
+# Or it can make any necessary changes to the working tree and to the
+# index to bring them to the desired state when the tip of the current
+# branch is updated to the new commit, and exit with a zero status.
+#
+# For example, the hook can simply run git read-tree -u -m HEAD "$1"
+# in order to emulate git fetch that is run in the reverse direction
+# with git push, as the two-tree form of git read-tree -u -m is
+# essentially the same as git switch or git checkout that switches
+# branches while keeping the local changes in the working tree that do
+# not interfere with the difference between the branches.
+
+# The below is a more-or-less exact translation to shell of the C code
+# for the default behaviour for git's push-to-checkout hook defined in
+# the push_to_deploy() function in builtin/receive-pack.c.
+#
+# Note that the hook will be executed from the repository directory,
+# not from the working tree, so if you want to perform operations on
+# the working tree, you will have to adapt your code accordingly, e.g.
+# by adding "cd .." or using relative paths.
+
+if ! git update-index -q --ignore-submodules --refresh
+then
+	die "Up-to-date check failed"
+fi
+
+if ! git diff-files --quiet --ignore-submodules --
+then
+	die "Working directory has unstaged changes"
+fi
+
+# This is a rough translation of:
+#
+#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
+if git cat-file -e HEAD 2>/dev/null
+then
+	head=HEAD
+else
+	head=$(git hash-object -t tree --stdin </dev/null)
+fi
+
+if ! git diff-index --quiet --cached --ignore-submodules $head --
+then
+	die "Working directory has staged changes"
+fi
+
+if ! git read-tree -u -m "$commit"
+then
+	die "Could not update working tree to new HEAD"
+fi
+
+================
+File: reference/.git/hooks/update.sample
+================
+#!/bin/sh
+#
+# An example hook script to block unannotated tags from entering.
+# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
+#
+# To enable this hook, rename this file to "update".
+#
+# Config
+# ------
+# hooks.allowunannotated
+#   This boolean sets whether unannotated tags will be allowed into the
+#   repository.  By default they won't be.
+# hooks.allowdeletetag
+#   This boolean sets whether deleting tags will be allowed in the
+#   repository.  By default they won't be.
+# hooks.allowmodifytag
+#   This boolean sets whether a tag may be modified after creation. By default
+#   it won't be.
+# hooks.allowdeletebranch
+#   This boolean sets whether deleting branches will be allowed in the
+#   repository.  By default they won't be.
+# hooks.denycreatebranch
+#   This boolean sets whether remotely creating branches will be denied
+#   in the repository.  By default this is allowed.
+#
+
+# --- Command line
+refname="$1"
+oldrev="$2"
+newrev="$3"
+
+# --- Safety check
+if [ -z "$GIT_DIR" ]; then
+	echo "Don't run this script from the command line." >&2
+	echo " (if you want, you could supply GIT_DIR then run" >&2
+	echo "  $0 <ref> <oldrev> <newrev>)" >&2
+	exit 1
+fi
+
+if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
+	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
+	exit 1
+fi
+
+# --- Config
+allowunannotated=$(git config --type=bool hooks.allowunannotated)
+allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
+denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
+allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
+allowmodifytag=$(git config --type=bool hooks.allowmodifytag)
+
+# check for no description
+projectdesc=$(sed -e '1q' "$GIT_DIR/description")
+case "$projectdesc" in
+"Unnamed repository"* | "")
+	echo "*** Project description file hasn't been set" >&2
+	exit 1
+	;;
+esac
+
+# --- Check types
+# if $newrev is 0000...0000, it's a commit to delete a ref.
+zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
+if [ "$newrev" = "$zero" ]; then
+	newrev_type=delete
+else
+	newrev_type=$(git cat-file -t $newrev)
+fi
+
+case "$refname","$newrev_type" in
+	refs/tags/*,commit)
+		# un-annotated tag
+		short_refname=${refname##refs/tags/}
+		if [ "$allowunannotated" != "true" ]; then
+			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
+			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
+			exit 1
+		fi
+		;;
+	refs/tags/*,delete)
+		# delete tag
+		if [ "$allowdeletetag" != "true" ]; then
+			echo "*** Deleting a tag is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	refs/tags/*,tag)
+		# annotated tag
+		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
+		then
+			echo "*** Tag '$refname' already exists." >&2
+			echo "*** Modifying a tag is not allowed in this repository." >&2
+			exit 1
+		fi
+		;;
+	refs/heads/*,commit)
+		# branch
+		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
+			echo "*** Creating a branch is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	refs/heads/*,delete)
+		# delete branch
+		if [ "$allowdeletebranch" != "true" ]; then
+			echo "*** Deleting a branch is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	refs/remotes/*,commit)
+		# tracking branch
+		;;
+	refs/remotes/*,delete)
+		# delete tracking branch
+		if [ "$allowdeletebranch" != "true" ]; then
+			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	*)
+		# Anything else (is there anything else?)
+		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
+		exit 1
+		;;
+esac
+
+# --- Finished
+exit 0
+
+================
+File: reference/.git/info/exclude
+================
+# git ls-files --others --exclude-from=.git/info/exclude
+# Lines that start with '#' are comments.
+# For a project mostly in C, the following would be a good set of
+# exclude patterns (uncomment them if you want to use them):
+# *.[oa]
+# *~
+
+================
+File: reference/.git/logs/refs/heads/main
+================
+0000000000000000000000000000000000000000 0c32f7764e928daf9473961c488e6e9a855339d2 Luke Nittmann <luke.nittmann@gmail.com> 1738221446 -0800	clone: from https://github.com/internet-development/www-internet-v2.git
+
+================
+File: reference/.git/logs/refs/remotes/origin/HEAD
+================
+0000000000000000000000000000000000000000 0c32f7764e928daf9473961c488e6e9a855339d2 Luke Nittmann <luke.nittmann@gmail.com> 1738221446 -0800	clone: from https://github.com/internet-development/www-internet-v2.git
+
+================
+File: reference/.git/logs/HEAD
+================
+0000000000000000000000000000000000000000 0c32f7764e928daf9473961c488e6e9a855339d2 Luke Nittmann <luke.nittmann@gmail.com> 1738221446 -0800	clone: from https://github.com/internet-development/www-internet-v2.git
+
+================
+File: reference/.git/refs/heads/main
+================
+0c32f7764e928daf9473961c488e6e9a855339d2
+
+================
+File: reference/.git/refs/remotes/origin/HEAD
+================
+ref: refs/remotes/origin/main
+
+================
+File: reference/.git/config
+================
+[core]
+	repositoryformatversion = 0
+	filemode = true
+	bare = false
+	logallrefupdates = true
+	ignorecase = true
+	precomposeunicode = true
+[remote "origin"]
+	url = https://github.com/internet-development/www-internet-v2.git
+	fetch = +refs/heads/*:refs/remotes/origin/*
+[branch "main"]
+	remote = origin
+	merge = refs/heads/main
+	vscode-merge-base = origin/main
+
+================
+File: reference/.git/description
+================
+Unnamed repository; edit this file 'description' to name the repository.
+
+================
+File: reference/.git/FETCH_HEAD
+================
+0c32f7764e928daf9473961c488e6e9a855339d2		branch 'main' of https://github.com/internet-development/www-internet-v2
+
+================
+File: reference/.git/HEAD
+================
+ref: refs/heads/main
+
+================
+File: reference/.git/packed-refs
+================
+# pack-refs with: peeled fully-peeled sorted 
+0c32f7764e928daf9473961c488e6e9a855339d2 refs/remotes/origin/main
+
+================
+File: reference/app/office/head.tsx
+================
+import DefaultMetaTags from '@components/DefaultMetaTags';
+
+export default async function Head({ params }) {
+  return (
+    <>
+      <DefaultMetaTags />
+    </>
+  );
+}
+
+================
+File: reference/app/office/layout.tsx
+================
+import Providers from '@components/Providers';
+
+export default function RootLayout({ children }: { children: React.ReactNode }) {
+  return (
+    <html lang="en-us">
+      <body className="theme-light">
+        <Providers>{children}</Providers>
+      </body>
+    </html>
+  );
+}
+
+================
+File: reference/app/office/page.tsx
+================
+import '@root/global.scss';
+
+import * as Constants from '@common/constants';
+import * as Utilities from '@common/utilities';
+
+import Accordion from '@components/Accordion';
+import ActionListItem from '@components/ActionListItem';
+import Canvas from '@components/Canvas';
+import DefaultLayout from '@components/page/DefaultLayout';
+import InternetDevelopmentLogo from '@components/svg/InternetDevelopmentLogo';
+import InternetDevelopmentLogoMark from '@components/svg/InternetDevelopmentLogoMark';
+import Table from '@components/Table';
+import TableRow from '@components/TableRow';
+import TableColumn from '@components/TableColumn';
+import Package from '@root/package.json';
+import styles from '@components/page/root.module.scss';
+
+export const dynamic = 'force-static';
+
+const VIDEO_URL = 'https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/03025ac3-aa78-4a21-ac3c-a465cb792d39.mp4';
+
+export async function generateMetadata({ params, searchParams }) {
+  const title = `${Package.name} - OFFICE`;
+  const description = `Learn more about our Office in Pike Place, Seattle`;
+  const url = 'https://internet.dev';
+  const handle = '@internetxstudio';
+
+  return {
+    description,
+    icons: {
+      icon: '/favicon-32x32.png',
+      shortcut: '/favicon-16x16.png',
+    },
+    metadataBase: new URL('https://internet.dev/office'),
+    openGraph: {
+      description,
+      images: [
+        {
+          url: 'https://next-s3-public.s3.us-west-2.amazonaws.com/internet-dev/intdev.png',
+          width: 1500,
+          height: 785,
+        },
+      ],
+      title,
+      type: 'website',
+      url,
+    },
+    title,
+    twitter: {
+      card: 'summary_large_image',
+      description,
+      handle,
+      images: ['https://next-s3-public.s3.us-west-2.amazonaws.com/internet-dev/intdev.png'],
+      title,
+      url,
+    },
+    url,
+  };
+}
+
+export default async function Page(props) {
+  return (
+    <DefaultLayout previewPixelSRC="https://intdev-global.s3.us-west-2.amazonaws.com/template-app-icon.png">
+      <div className={styles.row}>
+        <div className={styles.column} style={{ height: '176px', padding: 0 }}>
+          <Canvas />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <InternetDevelopmentLogo height="24px" />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <img className={styles.image} src="https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/7e6088bb-4ce2-47d9-9dfd-d658faed484d.png" />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <aside className={styles.aside}>
+            Champion Building, Pike Place
+            <br />
+            Seattle, Washington
+            <br />
+            United States of America, Earth
+          </aside>
+          <br />
+          <p className={styles.p}>We invite builders who love trying new things and learning to collaborate with us, guided by our values: everything matters, support your friends, and doing your best is more than enough.</p>
+          <br />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <img className={styles.image} src="https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/0bc8d758-d4a9-412e-aa28-1fa6e6481a9a.jpg" />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`What does the INTDEV office offer?`}>
+            <br />
+            Our space offers hardwood floors, symmetrical fiber internet, a local area network, two full kitchens, three meeting booths, a server room, lunch tables, and dedicated workstations. With 24/7 access and amenities like a color printer, shredder, scanner, gallery lounge, and triple-filtered water, we foster a collaborative environment where you can build your vision alongside like-minded peers.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Apply on Users Garden
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Manage your account
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+              Read our Office Use Agreement
+            </ActionListItem>
+            <br />
+            <br /> <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <img className={styles.image} src="https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/6dcedf7d-82d1-45db-a53e-31de509a7759.jpg" />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How do I work with INTDEV at their office?`}>
+            <br />
+            You can find an application link below or by reaching out through social. Please note that the INTDEV reserved desks are invite-only and intended for those with a genuine interest in building things together.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Apply on Users Garden
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Manage your account
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+              Read our Office Use Agreement
+            </ActionListItem>
+            <br />
+            <br /> <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <img className={styles.image} src="https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/9c524b6a-855e-4329-88cd-7bb81796fcc2.jpg" />
+          <br />
+        </div>
+      </div>
+
+      <footer className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <ActionListItem icon={`⊹`} href="https://wireframes.internet.dev/" target="_blank">
+            Explore INTDEV's open source work
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://github.com/orgs/internet-development/repositories" target="_blank">
+            Follow us on GitHub
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://www.linkedin.com/company/internet-dev" target="_blank">
+            Follow us on LinkedIn
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://www.instagram.com/internetdevelopmentstudio/" target="_blank">
+            Follow us on Instagram
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://read.cv/teams/intdev" target="_blank">
+            Follow us on Read.cv
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://x.com/internetxstudio" target="_blank">
+            Follow us on X
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+            Get our attention on Telegram
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="/">
+            Go home
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+            Manage your account
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-acceptable-use" target="_blank">
+            Read our Acceptable Use Policy
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+            Read our Office Use Agreement
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-privacy-policy" target="_blank">
+            Read our Privacy Policy
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-terms-of-service" target="_blank">
+            Read our Terms of Use
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://github.com/internet-development/www-internet-v2" target="_blank">
+            View source
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev" target="_blank">
+            Write a post
+          </ActionListItem>
+          <br />
+          Copyright © 2025. All rights reserved.
+          <br />
+          <br />
+          <br />
+        </div>
+      </footer>
+    </DefaultLayout>
+  );
+}
+
+================
+File: reference/app/head.tsx
+================
+import DefaultMetaTags from '@components/DefaultMetaTags';
+
+export default async function Head({ params }) {
+  return (
+    <>
+      <DefaultMetaTags />
+    </>
+  );
+}
+
+================
+File: reference/app/layout.tsx
+================
+import Providers from '@components/Providers';
+
+export default function RootLayout({ children }: { children: React.ReactNode }) {
+  return (
+    <html lang="en-us">
+      <body className="theme-light">
+        <Providers>{children}</Providers>
+      </body>
+    </html>
+  );
+}
+
+================
+File: reference/app/manifest.ts
+================
+import Package from '@root/package.json';
+
+import { MetadataRoute } from 'next';
+
+export default function manifest(): MetadataRoute.Manifest {
+  return {
+    background_color: '#ffffff',
+    description: Package.description,
+    display: 'standalone',
+    icons: [
+      {
+        src: '/favicon.ico',
+        sizes: 'any',
+        type: 'image/x-icon',
+      },
+    ],
+    name: Package.name,
+    short_name: Package.name,
+    start_url: '/',
+    theme_color: '#ffffff',
+  };
+}
+
+================
+File: reference/app/page.tsx
+================
+import '@root/global.scss';
+
+import * as Constants from '@common/constants';
+import * as Utilities from '@common/utilities';
+
+import Accordion from '@components/Accordion';
+import ActionListItem from '@components/ActionListItem';
+import Canvas from '@components/Canvas';
+import DefaultLayout from '@components/page/DefaultLayout';
+import InternetDevelopmentLogo from '@components/svg/InternetDevelopmentLogo';
+import InternetDevelopmentLogoMark from '@components/svg/InternetDevelopmentLogoMark';
+import Table from '@components/Table';
+import TableRow from '@components/TableRow';
+import TableColumn from '@components/TableColumn';
+import Package from '@root/package.json';
+import styles from '@components/page/root.module.scss';
+
+export const dynamic = 'force-static';
+
+const VIDEO_URL = 'https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/03025ac3-aa78-4a21-ac3c-a465cb792d39.mp4';
+
+export async function generateMetadata({ params, searchParams }) {
+  const title = Package.name;
+  const description = Package.description;
+  const url = 'https://internet.dev';
+  const handle = '@internetxstudio';
+
+  return {
+    description,
+    icons: {
+      icon: '/favicon-32x32.png',
+      shortcut: '/favicon-16x16.png',
+    },
+    metadataBase: new URL('https://internet.dev'),
+    openGraph: {
+      description,
+      images: [
+        {
+          url: 'https://next-s3-public.s3.us-west-2.amazonaws.com/internet-dev/intdev.png',
+          width: 1500,
+          height: 785,
+        },
+      ],
+      title,
+      type: 'website',
+      url,
+    },
+    title,
+    twitter: {
+      card: 'summary_large_image',
+      description,
+      handle,
+      images: ['https://next-s3-public.s3.us-west-2.amazonaws.com/internet-dev/intdev.png'],
+      title,
+      url,
+    },
+    url,
+  };
+}
+
+export default async function Page(props) {
+  return (
+    <DefaultLayout previewPixelSRC="https://intdev-global.s3.us-west-2.amazonaws.com/template-app-icon.png">
+      <div className={styles.row}>
+        <div className={styles.column} style={{ height: '176px', padding: 0 }}>
+          <Canvas />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <video className={styles.video} src={VIDEO_URL} autoPlay muted loop playsInline preload="auto">
+            Your browser does not support the video tag.
+          </video>
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <h1 className={styles.h1}>Internet Development Studio Company ("INTDEV")</h1>
+          <aside className={styles.aside}>
+            Champion Building, Pike Place
+            <br />
+            Seattle, Washington
+            <br />
+            United States of America, Earth
+          </aside>
+          <br />
+          <p className={styles.p}>An american vocation guild and great hall for webmasters. Every day we practice the craft of designing, building, shipping, and maintaining websites, platforms, brands, and applications—end to end.</p>
+          <br />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <ActionListItem icon={`⊹`} href="https://wireframes.internet.dev/" target="_blank">
+            Explore INTDEV's open source work
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+            Get our attention on Telegram
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://sacred.computer" target="_blank">
+            Go explore SRCL
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="/office">
+            Learn more about the Pike Place office
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://www.beautifulthings.xyz/" target="_blank">
+            Look at beautiful things
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+            Manage your account
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev" target="_blank">
+            Write a post
+          </ActionListItem>
+
+          <br />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`What does the Internet Development Studio Company ("INTDEV") actually do?`}>
+            <br />
+            We provide a team you can hire to get things done.
+            <br />
+            <br />
+            That team is a 6 person dedicated tiger team specializing in delivering high-performance web applications, internal tools, branding assets, presentations, static websites, LLM interfaces, illustrations, productivity applications, technical writing, and general web development services. By embedding with up to four companies at a time, we allocate a shared bandwidth of 360 hours per week to drive productivity and deliver results. It’s a process we genuinely enjoy, and every major milestone we knock out helps us grow and learn.
+            <br />
+            <br />
+            We also provide an invite-only space in Seattle for people to work alongside us, offering a collaborative environment that also serves the portfolio venture companies of{' '}
+            <a href="https://mana.inc" target="_blank">
+              Mana Industries Fund 1 LP
+            </a>{' '}
+            and contributors.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://wireframes.internet.dev/" target="_blank">
+              Explore INTDEV's open source work
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`Who did INTDEV work for in 2024?`}>
+            <br />
+            Aliaksandr Hudzilin, Bakken & Bæck, Beautiful Things, El Cap Capital, Google, Mana Industries, Microsoft, Protocol Labs and various startups.
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`Who is INTDEV working for in 2025?`}>
+            <br />
+            Microsoft
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How does an engagement with INTDEV typically feel?`}>
+            <br />
+            Imagine hiring your own team, and one that already has a well-established design and engineering culture.
+            <br />
+            <br />
+            By hiring us, you gain a team that works seamlessly in person, is highly productive, and has a proven track record. This is all made possible by the extensive successful startup experience shared across our team.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How much does it cost to hire this team?`}>
+            <br />
+            <Table>
+              <TableRow>
+                <TableColumn>ONE MONTH</TableColumn>
+                <TableColumn>$70,000 USD</TableColumn>
+              </TableRow>
+
+              <TableRow>
+                <TableColumn>THREE MONTHS</TableColumn>
+                <TableColumn>$195,000 USD</TableColumn>
+              </TableRow>
+
+              <TableRow>
+                <TableColumn>SIX MONTHS</TableColumn>
+                <TableColumn>$360,000 USD</TableColumn>
+              </TableRow>
+
+              <TableRow>
+                <TableColumn>NINE MONTHS</TableColumn>
+                <TableColumn>$495,000 USD</TableColumn>
+              </TableRow>
+
+              <TableRow>
+                <TableColumn>TWELVE MONTHS</TableColumn>
+                <TableColumn>$600,000 USD</TableColumn>
+              </TableRow>
+            </Table>
+            <br />
+            From the start, it will feel like you built this team yourself.
+            <br />
+            <br />
+            We don’t do change orders—instead, we aim to complete as much work as possible within our estimates while you have us on retainer. This approach is ideal for situations where you want to accomplish a lot efficiently.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`Why do I have to hire the full six-person team?`}>
+            <br />
+            Our studio fosters deep in-person collaboration, where we openly discuss challenges and make a concerted effort to learn and improve our skills through shared experiences.
+            <br />
+            <br />
+            This approach strengthens our team and enables us to support venture-backed companies with tight deadlines and ambitious goals. By learning from each other’s mistakes, we continually refine our work and strive to hit the mark every time.
+            <br />
+            <br />
+            Also, it should be known that, based on our prices, you're only paying the cost of a full-time employee for a much larger headcount. A lot of clients find this to be high value.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`Is there a discount if we want to work with less people from the INTDEV?`}>
+            <br />
+            No, but as a client, you are welcome to work with fewer team members if that is your preference.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How does working with the INTDEV work day to day?`}>
+            <br />
+            Here’s a glimpse of what it’s like to collaborate with our six-person team.
+            <br />
+            <br />
+            <Accordion defaultValue={true} title={`Discovery Video Call`}>
+              <br />
+              We begin with a video call to understand your goals and explore how our team can deliver results. We’re flexible with your preferred video chat platform.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`[OPTIONAL] First Meeting in Seattle, WA`}>
+              <br />
+              Join us at our Pike Place office to work alongside our team as we dive into your goals. You’re welcome to use our meeting rooms and open desks, meet other companies, and enjoy engaging conversations. We always have filtered water and are here on weekends, too.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Onboarding`}>
+              <br />
+              From day one, we integrate seamlessly into your team, bringing years of experience and familiarity with compliance requirements like NDAs. Comfortable across Linux, MacOS, and Windows, we’re happy to train your employees when needed and adapt to your existing tools and processes.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Embedding`}>
+              <br />
+              We adapt to the roles you need, whether following your direction or advocating for key features, integrating into your daily routine at whatever level you require. Comfortable with agile, waterfall, or even a “move fast and break things” approach, we’re always ready to embrace challenges.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Working in the Office`}>
+              <br />
+              We can host stand-ups and any meetings you need in our office, with meeting rooms perfect for bringing in your own customers. Sharing the space often leads to team-building, and we’re happy to host and cook for large groups with a little notice. <br />
+              <br />
+              Pike Place offers great restaurants and scenic spots for breaks, though guest parking isn’t available, so please plan accordingly. Our office features symmetrical fiber internet and quiet workspaces, and we keep our client list small to stay flexible and accommodating.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Technical Program Management`}>
+              <br />
+              We help identify your Technical Program Management needs, aligning your team around a shared goal with fresh perspectives. We guide long-term strategic decisions, define “done” from the start, and set expectations upfront. We bring experience from high-profile projects while focusing on supporting your vision and helping you achieve it.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Zero to One`}>
+              <br />
+              With over a decade of startup experience, our design partners help bring your product to market for the first time and support future launches, treating each launch as a personal milestone. We love exploring logos, drawing inspiration from our collection of books, and rely on tools like Figma, Sketch, Photoshop, and Illustrator. <br />
+              <br />
+              Our network also includes some of Seattle’s top photographers and videographers, many of whom work directly in our space.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Get in Quick`}>
+              <br />
+              When you need quick results without extra discussion, we’re ready to jump in, whether it’s tackling long-standing backlogs, handling one-off tasks, or adding missing design system components. We can deliver results without delay. <br />
+              <br />
+              We’re unfazed by technical debt, comfortable managing tricky repository forks, and always ready to take on backlog tasks—just let us know how we can help.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Tooling Investment`}>
+              <br />
+              We know a team’s identity is often shaped by the tools they use. Whether you’re looking to strengthen your current toolkit or start fresh, we can help. Our expertise spans tools like Next.js, Postgres, Figma, GSAP, and Tailwind, along with CSS dialects like CSS-in-JS and email-compliant inline styles. <br />
+              <br />
+              With one of our partners contributing to Expo (React Native), we deeply value tooling. We respect your existing tools while embracing fresh starts that energize teams and foster growth. Involve us in consulting meetings for fresh perspectives—we’re always ready to explore new technologies, including LLMs.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Launch, Maintain, and Survive`}>
+              <br />
+              Your uptime is critical, and while we can’t promise 99.9999999% uptime at scale, we specialize in keeping websites running with low effort on your part. This allows you to focus on growing your product and engaging your customers without unnecessary distractions.
+              <br />
+              <br />
+              Whether you need help with IPFS, managing VPS, consulting on on-premise solutions, or working with tools like Fly, Vercel, and Render, we’ve got you covered. With experience in GCE, GCS, AWS EC2, S3, and database backups, we’re here to ensure your systems work.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Supporting Volatility`}>
+              <br />
+              If you’re navigating changes in priorities, we offer the flexibility to help you adapt. We understand that leadership shifts happen, and we’re here to support you while keeping your team focused on what matters most. Whether starting fresh or removing what’s not working, our flexible deal structure evolves with your needs, always aligned with your goal of driving success and growth for your business.
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Libraries and Documentation`}>
+              <br />
+              We value great documentation and design systems, even if they’re not always a priority for everyone. We can create clear, user-friendly documentation and develop intuitive design systems for your web products, building tools to make these processes more efficient. <br />
+              <br />
+              Whether working with tools like Scalar, GitBook, and Notion or contributing to publications, blog posts, and video tutorials, we’re happy to provide custom solutions to meet your needs.
+              <br />
+              <br />
+            </Accordion>
+            <br />
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`What is INTDEV's relationship with the University of Washington?`}>
+            <br />
+            If your department requires a website that complies with the latest legal standards, is powered by modern web tooling, and boasts a functional design, partner with us. We read 313 pages of documentation for you.
+            <br />
+            <br />
+            We admire the{' '}
+            <a href="https://www.washington.edu/" target="_blank">
+              University of Washington
+            </a>
+            ’s dedication to innovation and inclusivity, and the alumni who work in our office proudly align our mission with these values. As designers, we are committed to ensuring that every website we create is not only modern but also accessible.
+            <br />
+            <br />
+            <a href="https://www.federalregister.gov/documents/2024/04/24/2024-07758/nondiscrimination-on-the-basis-of-disability-accessibility-of-web-information-and-services-of-state" target="_blank">
+              The guidelines
+            </a>{' '}
+            released by the Department of Justice under Title II of the Americans with Disabilities Act (ADA) have set a new bar for digital accessibility, which we embrace. Effective April 24, 2024, these standards require all web content to achieve compliance by April 24, 2026.
+            <br />
+            <br />
+            <Accordion defaultValue={true} title={`Ensuring all web content and mobile applications meet the Web Content Accessibility Guidelines (WCAG) 2.1, Level AA standards.`}>
+              <br />
+              This is a cornerstone of our approach to accessibility. We achieve this through rigorous processes and meticulous attention to detail. Our team follows best practices to make sure every user has a seamless and inclusive experience.
+              <br />
+              <br />
+              <Table>
+                <TableRow>
+                  <TableColumn>Semantic HTML</TableColumn>
+                  <TableColumn>We use semantic HTML to define the structure and meaning of web content, ensuring assistive technologies can interpret and navigate the site effectively.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Keyboard Accessibility</TableColumn>
+                  <TableColumn>We ensure all features are accessible via keyboard for users who cannot use a mouse.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Color Contrast</TableColumn>
+                  <TableColumn>We employ high-contrast color schemes to ensure text is readable by users with visual impairments while adhering to UW’s brand guidelines.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Alternative Text</TableColumn>
+                  <TableColumn>We provide descriptive text for images and multimedia content, helping screen readers convey information accurately to visually impaired users.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Resizable Text</TableColumn>
+                  <TableColumn>Our designs allow for text resizing without loss of content or functionality, catering to users who need larger fonts.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Error Identification and Suggestion</TableColumn>
+                  <TableColumn>Our forms are designed to identify errors and provide suggestions for correction, improving usability for those with cognitive disabilities.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Consistent Navigation</TableColumn>
+                  <TableColumn>Our predictable navigation and layouts help users with cognitive and learning disabilities.</TableColumn>
+                </TableRow>
+              </Table>
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Providing alternative text for all visual media, including images, videos, and interactive elements.`}>
+              <br />
+              Alternative text ensures that all users, including those with visual impairments, can fully understand and engage with all content on the website.
+              <br />
+              <br />
+              <Table>
+                <TableRow>
+                  <TableColumn>Descriptive Alt Text for Images</TableColumn>
+                  <TableColumn>We provide concise and descriptive alternative text for all images, enabling screen reader users to understand the context and content of visual elements.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Detailed Descriptions for Complex Images</TableColumn>
+                  <TableColumn>For complex images such as charts, infographics, or detailed diagrams, we offer extended descriptions to convey all critical information effectively.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Captions for Videos</TableColumn>
+                  <TableColumn>All video content includes synchronized captions, ensuring that users with hearing impairments can access the information being presented.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Transcripts for Audio Content</TableColumn>
+                  <TableColumn>We provide textual transcripts for all audio content, making it accessible to users with hearing impairments and allowing for easier comprehension during listening.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Text Alternatives for Interactive Elements</TableColumn>
+                  <TableColumn>Interactive elements, such as buttons, forms, and dynamic content, come with clear text alternatives or labels that describe their function and purpose.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Accessible Icons</TableColumn>
+                  <TableColumn>We use ARIA labels or alternative text for icons and other graphical elements to ensure they communicate their meaning to assistive technologies.</TableColumn>
+                </TableRow>
+              </Table>
+              <br />
+              <br />
+            </Accordion>
+            <Accordion defaultValue={true} title={`Making complex navigational structures accessible with clear and user-friendly interfaces.`}>
+              <br />
+              This is a fundamental aspect of our design philosophy. We believe that every user deserves an accessible browsing experience, regardless of the complexity of the content.
+              <br />
+              <br />
+              <Table>
+                <TableRow>
+                  <TableColumn>Logical Menu Hierarchies</TableColumn>
+                  <TableColumn>We design navigation menus with logical hierarchies, ensuring that users can easily find the information they need with minimal clicks.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Descriptive Links</TableColumn>
+                  <TableColumn>All links are clearly labeled with descriptive text, so users understand where each link will take them, aiding both screen readers and visual users.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Accessible Dropdown Menus</TableColumn>
+                  <TableColumn>Our dropdown menus are designed to be keyboard-accessible and screen reader-friendly, ensuring inclusivity for all users.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Breadcrumb Navigation</TableColumn>
+                  <TableColumn>We employ breadcrumb navigation to help users understand their current location within the website and easily backtrack if necessary.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Search Functionality</TableColumn>
+                  <TableColumn>We integrate advanced search functionalities, allowing users to quickly locate specific content without navigating through multiple menus.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Consistent Layouts</TableColumn>
+                  <TableColumn>We maintain consistency in layouts and navigation across all pages, so users can predict and understand where to find information.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Skip Navigation Links</TableColumn>
+                  <TableColumn>Our skip links allow users to bypass repetitive content and navigate directly to the main content, which is particularly helpful for screen reader users.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>Visual Indicators</TableColumn>
+                  <TableColumn>Clear visual indicators highlight the current page or section, helping users keep track of their navigation path.</TableColumn>
+                </TableRow>
+
+                <TableRow>
+                  <TableColumn>ARIA Landmarks</TableColumn>
+                  <TableColumn>We implement ARIA (Accessible Rich Internet Applications) landmarks to define regions of a page, making it easier for screen reader users to navigate and skip to different sections.</TableColumn>
+                </TableRow>
+              </Table>
+              <br />
+              <br />
+            </Accordion>
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How do I join INTDEV as a Webmaster?`}>
+            <br />
+            In 2025, we plan to grow our team from six to eight members. If you’re passionate about the vocation of being a Webmaster, let’s talk.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://wireframes.internet.dev/examples/features/job-posting" target="_blank">
+              View the job
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+              Get our attention on Telegram
+            </ActionListItem>
+            <br />
+            <br />
+            <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`What does the INTDEV office offer?`}>
+            <br />
+            Our space offers hardwood floors, symmetrical fiber internet, a local area network, two full kitchens, three meeting booths, a server room, lunch tables, and dedicated workstations. With 24/7 access and amenities like a color printer, shredder, scanner, gallery lounge, and triple-filtered water, we foster a collaborative environment where you can build your vision alongside like-minded peers.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Apply on Users Garden
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Manage your account
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+              Read our Office Use Agreement
+            </ActionListItem>
+            <br />
+            <br /> <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <Accordion defaultValue={true} title={`How do I work with INTDEV at their office?`}>
+            <br />
+            You can find an application link below or by reaching out through social. Please note that the INTDEV reserved desks are invite-only and intended for those with a genuine interest in building things together.
+            <br />
+            <br />
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Apply on Users Garden
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+              Manage your account
+            </ActionListItem>
+            <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+              Read our Office Use Agreement
+            </ActionListItem>
+            <br />
+            <br /> <br />
+          </Accordion>
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          Use this SVG for a logo without the word “INTDEV.”
+          <br />
+          <br />
+          <InternetDevelopmentLogoMark height="48px" />
+          <br />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          Use this SVG for a logo that includes our brand name.
+          <br />
+          <br />
+          <InternetDevelopmentLogo height="48px" />
+          <br />
+          <br />
+          <br />
+        </div>
+      </div>
+
+      <footer className={styles.row}>
+        <div className={styles.column}>
+          <br />
+          <img className={styles.image} src="https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/2fb7e012-4fa9-4446-9bf4-e2c5c7e4992a.jpg" />
+          <ActionListItem icon={`⊹`} href="https://wireframes.internet.dev/" target="_blank">
+            Explore INTDEV's open source work
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://bsky.app/profile/internetstudio.bsky.social" target="_blank">
+            Follow us on Bluesky
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://github.com/orgs/internet-development/repositories" target="_blank">
+            Follow us on GitHub
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://www.linkedin.com/company/internet-dev" target="_blank">
+            Follow us on LinkedIn
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://www.instagram.com/internetdevelopmentstudio/" target="_blank">
+            Follow us on Instagram
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://read.cv/teams/intdev" target="_blank">
+            Follow us on Read.cv
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://x.com/internetxstudio" target="_blank">
+            Follow us on X
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://t.me/internetdevelopmentstudio" target="_blank">
+            Get our attention on Telegram
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://sacred.computer" target="_blank">
+            Go explore SRCL
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="/office">
+            Learn more about the Pike Place office
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://users.garden" target="_blank">
+            Manage your account
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-acceptable-use" target="_blank">
+            Read our Acceptable Use Policy
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/office-use-agreement" target="_blank">
+            Read our Office Use Agreement
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-privacy-policy" target="_blank">
+            Read our Privacy Policy
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev/wwwjim/intdev-terms-of-service" target="_blank">
+            Read our Terms of Use
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://github.com/internet-development/www-internet-v2" target="_blank">
+            View source
+          </ActionListItem>
+          <ActionListItem icon={`⊹`} href="https://txt.dev" target="_blank">
+            Write a post
+          </ActionListItem>
+          <br />
+          Copyright © 2025. All rights reserved.
+          <br />
+          <br />
+          <br />
+        </div>
+      </footer>
+    </DefaultLayout>
+  );
+}
+
+================
+File: reference/app/robots.ts
+================
+import { MetadataRoute } from 'next';
+
+export default function robots(): MetadataRoute.Robots {
+  return {
+    rules: {
+      userAgent: '*',
+      allow: '/',
+      disallow: '/api/',
+    },
+    sitemap: 'https://internet.dev/sitemap.xml',
+  };
+}
+
+================
+File: reference/app/sitemap.ts
+================
+import { MetadataRoute } from 'next';
+
+export default function sitemap(): MetadataRoute.Sitemap {
+  return [
+    {
+      url: 'https://internet.dev',
+      lastModified: new Date(),
+    },
+  ];
+}
+
+================
+File: reference/common/constants.ts
+================
+export const MAX_SIZE_BYTES = 15728640;
+
+// NOTE(jimmylee):
+// https://github.com/internet-development/apis
+// export const API = `http://localhost:10001/api`;
+export const API = `https://api.internet.dev/api`;
+
+export const Users = {
+  tiers: {
+    UNVERIFIED: 0,
+    VERIFIED: 10,
+    PAYING: 20,
+    GENERAL_CO_WORKING: 30,
+    PARTNER: 40,
+    ADMIN: 100,
+  },
+};
+
+export const Tiers = {
+  PAYING: 899,
+  GENERAL_CO_WORKING: 32900,
+  PARTNER: 279000,
+};
+
+export const Payments = {
+  899: 'PAYING',
+  32900: 'GENERAL_CO_WORKING',
+  279000: 'PARTNER',
+};
+
+export const Payouts = {
+  PAYING: 1500,
+  GENERAL_CO_WORKING: 45000,
+  PARTNER: 45000,
+};
+
+export const LANDSCAPES = [
+  ['Sahara Desert', 'The Sahara stretches across North Africa with shifting dunes that tower above the horizon. Even in its harsh sunlight and cold nights, resilient life finds a way to endure.'],
+  ['Grand Canyon', 'Carved by the Colorado River, the Grand Canyon reveals layers of ancient rock. Its chasms echo with wind and the distant calls of raptors gliding through the afternoon sky.'],
+  ['Amazon Rainforest', 'The Amazon Rainforest teems with biodiversity under a dense green canopy. Rivers and flooded plains sustain countless species, while humid air hangs heavy with the promise of storms.'],
+  ['Rocky Mountains', 'The Rockies rise like rugged spines across the continent. Snowpack feeds rivers that carve valleys where elk graze, and fir trees cling to the slopes.'],
+  ['Gobi Desert', 'The Gobi Desert rolls out in arid sweeps across northern China and southern Mongolia. Sparse grasses and hardy camels testify to its unforgiving climate.'],
+  ['Andes Mountains', 'The Andes dominate western South America with ragged peaks and hidden valleys. Llamas graze on high plateaus, and glaciers feed the rivers far below.'],
+  ['Serengeti Plains', 'The Serengeti spreads under the African sun in rolling grasslands. Wildebeests and zebras migrate in vast herds, guided by the promise of water and fresh pasture.'],
+  ['Yosemite Valley', 'Glacial forces shaped this granite cradle in California. Towering waterfalls cascade from sheer cliffs, while giant sequoias stand in quiet strength.'],
+  ['Namib Desert', 'The Namib Desert clings to the Atlantic coast of southern Africa. Rust-red dunes shift above hidden water tables where desert elephants roam.'],
+  ['Patagonia', 'Patagonia’s windswept plains and jagged peaks stretch across Argentina and Chile. Glaciers calve into turquoise lakes, and guanacos graze on hardy grasses.'],
+  ['Swiss Alps', 'The Swiss Alps rise with sharp spires of snow and ice. Mountain chalets cling to slopes where wildflowers bloom each summer in vibrant displays.'],
+  ['Himalayas', 'The Himalayas hold the world’s highest summits beneath a freezing sky. From lush foothills to lofty glaciers, this range tests life’s resilience.'],
+  ['Icelandic Highlands', 'Iceland’s interior stands stark and raw with volcanic plains, steaming vents, and glacier-fed rivers. The wind sweeps across moss-coated lava fields in lonely gusts.'],
+  ['Atacama Desert', 'The Atacama is among the driest places on Earth. Its scorched soil and salt flats see rare blooms that burst into color after elusive rains.'],
+  ['Redwood Forest', 'Coastal redwoods tower in perpetual mist along the Pacific. Their trunks, thick and ancient, cradle a hidden world of fern and moss.'],
+  ['Scottish Highlands', 'The Highlands roll in rugged hills capped by heather and stone. Lochs reflect ever-shifting skies, and the wind carries the distant clang of sheep bells.'],
+  ['Great Rift Valley', 'This massive geological trench cleaves eastern Africa, where lakes shimmer at the bottom of steep escarpments. Flamingos gather in vast flocks to feed on algae.'],
+  ['Okavango Delta', 'The Okavango spreads like a bright labyrinth of channels and wetlands in Botswana. Seasonal floods create a green haven for elephants, lions, and hippos.'],
+  ['Appalachian Mountains', 'Old and eroded, the Appalachians meander through eastern North America. Their forests host black bears, rhododendrons, and the misty quiet of forest hollows.'],
+  ['Death Valley', 'Death Valley bakes under a relentless sun, reaching some of the hottest temperatures on record. Cracked salt flats testify to evaporated lakes and lost water.'],
+  ['Dolomites', 'Jagged limestone peaks define northern Italy’s Dolomites. Alpine meadows lie below sheer cliffs, where climbers test themselves against silent stone.'],
+  ['Torres del Paine', 'Chile’s Torres del Paine juts into the southern sky with glacier-fed lakes at its base. Guanacos roam windblown plains as ice cracks overhead.'],
+  ['Lofoten Islands', 'Lofoten’s dramatic peaks rise straight from Norway’s cold seas. Fishing villages huddle along rocky shores, while gulls circle overhead in crisp air.'],
+  ['Siberian Tundra', 'The Siberian tundra spans a realm of permafrost and low shrubs. Winters stretch long and bleak, yet migratory birds still find respite here each summer.'],
+  ['Norwegian Fjords', 'Deep fjords carve into Norway’s coast where dark waters mirror towering cliffs. Small farms cling to green patches between rock and sea.'],
+  ['Bungle Bungle Range', 'These striped sandstone domes rise from the Australian outback. Gorges cut deep under a harsh sun, hiding pockets of lush vegetation.'],
+  ['Zion Canyon', 'Zion Canyon glows red and orange under the Utah sky. The Virgin River sculpts sheer walls that watch over narrow trails and hidden pools.'],
+  ['Lake Baikal', 'Lake Baikal in Siberia is the world’s deepest lake. Its waters shimmer with unmatched clarity, home to species found nowhere else on Earth.'],
+  ['Banff National Park', 'Banff crowns the Canadian Rockies with turquoise lakes and towering peaks. Grizzlies roam pine forests while glacier-fed rivers reflect untouched wilderness.'],
+  ['Wadi Rum', 'Wadi Rum’s sandstone cliffs loom in Jordan’s desert, carved by millennia of wind and time. Nomadic tribes wander under a silent, star-filled sky.'],
+  ['Cappadocia', 'Cappadocia’s whimsical rock formations rise over central Turkey’s plains. Soft stone spires hold hidden chapels and the ghosts of ancient dwellers.'],
+];
+
+export const SAMPLE_TABLE_DATA_CHANGE_ME = [
+  ['NAME', 'SYMBOL', 'PRICE', 'HOLDINGS'],
+  ['Bat', 'BAT', '$9.01', '400'],
+  ['Bear', 'BR', '$56.78', '200'],
+  ['Camel', 'CML', '$55.67', '70'],
+  ['Cheetah', 'CHT', '$13.45', '150'],
+  ['Crab', 'CRB', '$15.67', '250'],
+  ['Deer', 'DER', '$29.99', '110'],
+  ['Dolphin', 'DLP', '$77.89', '50'],
+  ['Eagle', 'EGL', '$45.67', '90'],
+  ['Falcon', 'FLC', '$40.22', '85'],
+  ['Fox', 'FOX', '$12.34', '100'],
+  ['Frog', 'FRG', '$7.89', '400'],
+  ['Giraffe', 'GRF', '$44.56', '80'],
+  ['Hedgehog', 'HDG', '$11.23', '200'],
+  ['Horse', 'HRS', '$54.32', '70'],
+  ['Kangaroo', 'KNG', '$15.67', '120'],
+  ['Koala', 'KLA', '$22.34', '150'],
+  ['Leopard', 'LPR', '$14.56', '110'],
+  ['Lemur', 'LMR', '$11.12', '320'],
+  ['Lion', 'LION', '$67.89', '80'],
+  ['Lynx', 'LNX', '$16.78', '130'],
+  ['Mouse', 'MSE', '$5.12', '500'],
+  ['Octopus', 'OCT', '$88.90', '40'],
+  ['Otter', 'OTR', '$20.21', '180'],
+  ['Owl', 'OWL', '$19.01', '160'],
+  ['Panda', 'PND', '$78.90', '55'],
+  ['Peacock', 'PCK', '$12.34', '100'],
+  ['Penguin', 'PNG', '$33.45', '90'],
+  ['Porcupine', 'PRC', '$17.89', '140'],
+  ['Rabbit', 'RBT', '$9.10', '350'],
+  ['Raccoon', 'RCC', '$18.90', '150'],
+  ['Shark', 'SHK', '$89.01', '50'],
+  ['Snake', 'SNK', '$10.11', '300'],
+  ['Squirrel', 'SQL', '$10.12', '250'],
+  ['Tiger', 'TGR', '$34.56', '120'],
+  ['Turtle', 'TRL', '$66.78', '60'],
+  ['Whale', 'WHL', '$123.45', '30'],
+  ['Wolf', 'WLF', '$23.45', '150'],
+  ['Zebra', 'ZBR', '$65.43', '60'],
+];
+
+export const CHESSBOARD_DEFAULT_POSITIONS: string[][] = [
+  ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'],
+  ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],
+  ['', '', '', '', '', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],
+  ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R'],
+];
+
+export const CHESSBOARD_BAD_BISHOP: string[][] = [
+  ['r', ' ', ' ', 'q', ' ', 'r', 'k', ''],
+  [' ', 'b', ' ', ' ', ' ', 'p', 'p', 'p'],
+  ['p', '', 'p', 'b', 'p', 'n', '', ''],
+  ['', '', 'p', 'p', '', '', '', ''],
+  ['Q', '', '', 'P', '', '', '', ''],
+  ['', '', 'P', '', 'P', 'N', 'B', ''],
+  ['P', 'P', ' ', 'N', '', 'P', 'P', 'P'],
+  ['R', ' ', ' ', ' ', 'K', ' ', ' ', 'R'],
+];
+
+export const CHESSBOARD_CHECKMATE_STEP_ONE: string[][] = [
+  [' ', ' ', ' ', '', ' ', 'r', ' ', 'r'],
+  ['p', 'b', ' ', 'n', ' ', 'p', ' ', 'k'],
+  ['', 'q', '', 'N', 'p', '', '', ''],
+  ['', 'p', 'p', 'n', 'P', '', 'Q', ''],
+  ['', 'b', 'p', 'P', 'B', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['P', 'P', ' ', ' ', ' ', 'P', 'P', 'P'],
+  ['R', ' ', ' ', ' ', ' ', 'R', 'K', ''],
+];
+
+export const CHESSBOARD_CHECKMATE_STEP_TWO: string[][] = [
+  [' ', ' ', ' ', '', ' ', 'r', ' ', 'r'],
+  ['p', 'b', ' ', 'n', ' ', ' ', ' ', 'k'],
+  ['', 'q', '', 'N', 'p', '', '', ''],
+  ['', 'p', 'p', 'n', 'P', 'p', 'Q', ''],
+  ['', 'b', 'p', 'P', 'B', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['P', 'P', ' ', ' ', ' ', 'P', 'P', 'P'],
+  ['R', ' ', ' ', ' ', ' ', 'R', 'K', ''],
+];
+
+export const CHESSBOARD_CHECKMATE_STEP_THREE: string[][] = [
+  [' ', ' ', ' ', '', ' ', 'r', ' ', 'r'],
+  ['p', 'b', ' ', 'n', ' ', ' ', ' ', 'k'],
+  ['', 'q', '', 'N', 'p', 'P', '', ''],
+  ['', 'p', 'p', 'n', '', '', 'Q', ''],
+  ['', 'b', 'p', 'P', 'B', '', '', ''],
+  ['', '', '', '', '', '', '', ''],
+  ['P', 'P', ' ', ' ', ' ', 'P', 'P', 'P'],
+  ['R', ' ', ' ', ' ', ' ', 'R', 'K', ''],
+];
+
+================
+File: reference/common/hooks.ts
+================
+import * as React from 'react';
+
+export function useDebouncedCallback<T>(ms: number, f: (...args: T[]) => void, deps: any[]): (...args: T[]) => void {
+  let throttled = false;
+  let latestArgs: T | null = null;
+
+  const clearThrottle = () => {
+    throttled = false;
+
+    if (latestArgs !== null) {
+      f(latestArgs);
+      latestArgs = null;
+    }
+  };
+
+  return React.useCallback(
+    (args) => {
+      if (throttled) {
+        latestArgs = args;
+      } else {
+        f(args);
+
+        throttled = true;
+
+        setTimeout(clearThrottle, ms);
+      }
+    },
+    [...deps, ms]
+  );
+}
+
+================
+File: reference/common/position.ts
+================
+export type Placement = 'top' | 'bottom' | 'left' | 'right';
+
+export function calculate(triggerElement: HTMLElement, popoverElement: HTMLElement, scrollX: number = window.scrollX, scrollY: number = window.scrollY): { placement: Placement; position: { top: number; left: number } } {
+  let triggerRect;
+  let popoverRect;
+
+  if (triggerElement) {
+    triggerRect = triggerElement.getBoundingClientRect();
+  }
+
+  if (popoverElement) {
+    popoverRect = popoverElement.getBoundingClientRect();
+  }
+
+  const spaceAbove = triggerRect.top;
+  const spaceBelow = window.innerHeight - triggerRect.bottom;
+  const spaceLeft = triggerRect.left;
+  const spaceRight = window.innerWidth - triggerRect.right;
+
+  const viewportHeightThreshold = window.innerHeight * 0.4;
+  const viewportWidthThreshold = window.innerWidth * 0.4;
+
+  let placement: Placement = 'bottom';
+  let top = 0;
+  let left = 0;
+  if (!popoverRect) {
+    return { placement, position: { top: 0, left: 0 } };
+  }
+
+  if (spaceAbove >= viewportHeightThreshold && spaceAbove >= popoverRect.height) {
+    placement = 'top';
+    top = triggerRect.top + scrollY - popoverRect.height;
+    left = triggerRect.left + scrollX + (triggerRect.width - popoverRect.width) / 2;
+  } else if (spaceBelow >= viewportHeightThreshold && spaceBelow >= popoverRect.height) {
+    placement = 'bottom';
+    top = triggerRect.bottom + scrollY;
+    left = triggerRect.left + scrollX + (triggerRect.width - popoverRect.width) / 2;
+  } else if (spaceRight >= viewportWidthThreshold && spaceRight >= popoverRect.width) {
+    placement = 'right';
+    top = triggerRect.top + scrollY + (triggerRect.height - popoverRect.height) / 2;
+    left = triggerRect.right + scrollX;
+  } else if (spaceLeft >= viewportWidthThreshold && spaceLeft >= popoverRect.width) {
+    placement = 'left';
+    top = triggerRect.top + scrollY + (triggerRect.height - popoverRect.height) / 2;
+    left = triggerRect.left + scrollX - popoverRect.width;
+  } else {
+    placement = 'bottom';
+    top = triggerRect.bottom + scrollY;
+    left = triggerRect.left + scrollX + (triggerRect.width - popoverRect.width) / 2;
+  }
+
+  if (left < 0) left = 0;
+  else if (left + popoverRect.width > window.innerWidth) left = window.innerWidth - popoverRect.width;
+
+  if (top < 0) top = 0;
+  else if (top + popoverRect.height > window.innerHeight + scrollY) top = window.innerHeight + scrollY - popoverRect.height;
+
+  return { placement, position: { top, left } };
+}
+
+================
+File: reference/common/queries.ts
+================
+import * as Constants from '@common/constants';
+import * as Utilities from '@common/utilities';
+
+export async function getData({ route, key, body }, qualifier = 'data') {
+  let result;
+  try {
+    const response = await fetch(route, {
+      method: 'POST',
+      headers: { 'X-API-KEY': key, 'Content-Type': 'application/json' },
+      body: JSON.stringify(body),
+    });
+    result = await response.json();
+  } catch (e) {
+    return null;
+  }
+
+  if (!result) {
+    return null;
+  }
+
+  if (result.error) {
+    return null;
+  }
+
+  if (!result[qualifier]) {
+    return null;
+  }
+
+  return result;
+}
+
+export async function onUserListData({ key }) {
+  const route = `${Constants.API}/data`;
+  const body = {};
+  return await getData({ route, key, body });
+}
+
+export async function onUserDeleteData({ id, key }) {
+  const route = `${Constants.API}/data/delete`;
+  const body = { id };
+  return await getData({ route, key, body });
+}
+
+export async function onRefreshDocuments({ key, type, domain }) {
+  const route = `${Constants.API}/documents`;
+  const body = { type, domain };
+  return await getData({ route, key, body });
+}
+
+export async function onGetDocumentById({ id }) {
+  const route = `${Constants.API}/documents/${id}`;
+  const body = {};
+  return await getData({ route, key: null, body });
+}
+
+export async function onUserCreateDocument({ key, type, domain }) {
+  const route = `${Constants.API}/documents/create`;
+  const body = { type, domain };
+  return await getData({ route, key, body });
+}
+
+export async function onDeleteDocumentById({ id, key }) {
+  const route = `${Constants.API}/documents/delete`;
+  const body = { id };
+  return await getData({ route, key, body });
+}
+
+export async function onUpdateDocumentById({ id, key, data }) {
+  const route = `${Constants.API}/documents/update`;
+  const body = { id, data };
+  return await getData({ route, key, body });
+}
+
+export async function onPublicUserAuthenticate({ email, password }) {
+  const route = `${Constants.API}/users/authenticate`;
+  const body = { email, password };
+  return getData({ route, key: null, body }, 'user');
+}
+
+export async function onPublicUserForgotPassword({ email }) {
+  const route = `${Constants.API}/users/reset-password`;
+  const body = { email, source: 'wireframes.internet.dev' };
+  return getData({ route, key: null, body }, 'success');
+}
+
+export async function onUserChangePassword({ key, password }) {
+  const route = `${Constants.API}/users/update-viewer-password`;
+  const body = { password };
+  return getData({ route, key, body });
+}
+
+export async function onUserRegenerateAPIKey({ email, password }) {
+  const route = `${Constants.API}/users/regenerate-key`;
+  const body = { email, password };
+  return getData({ route, key: null, body }, 'user');
+}
+
+export async function onUserUnsubscribeServices({ key }) {
+  const route = `${Constants.API}/users/subscriptions/unsubscribe`;
+  const body = null;
+  return getData({ route, key, body }, 'user');
+}
+
+export async function onRefreshPosts({ key, type, user_id }) {
+  const route = `${Constants.API}/posts`;
+  const body = { type, user_id };
+  return await getData({ route, key, body });
+}
+
+export async function onUserCreatePost({ id, key, src, type }) {
+  const route = `${Constants.API}/posts/create`;
+  const body = { type, fields: { fileId: id, public: true }, src };
+  return getData({ route, key, body });
+}
+
+export async function onUserCreateThread({ fields, key, src, type }) {
+  const route = `${Constants.API}/posts/create`;
+  const body = { fields, src, type };
+  return getData({ route, key, body });
+}
+
+export async function onUserDeletePost({ id, key }) {
+  const route = `${Constants.API}/posts/delete`;
+  const body = { id };
+  return getData({ route, key, body });
+}
+
+export async function onUserListThreadReplies({ id, key, orderBy }) {
+  const route = `${Constants.API}/posts/all-thread-replies`;
+  const body = { id, orderBy };
+  return getData({ route, key, body });
+}
+
+export async function onUserListThreads({ key, orderBy }) {
+  const route = `${Constants.API}/posts/all-threads`;
+  const body = { orderBy };
+  return getData({ route, key, body });
+}
+
+export async function onUserUploadDataGCS({ domain, file, key }) {
+  let signedResult;
+  const name = file.name;
+  const type = file.type;
+  const size = file.size;
+
+  if (size > Constants.MAX_SIZE_BYTES) {
+    return { error: 'File size exceeds 15mb limit' };
+  }
+
+  try {
+    const route = `${Constants.API}/data/generate-presigned-url-gcs`;
+    const body = { domain, type, file: name, size };
+    signedResult = await getData({ route, key, body }, 'uploadURL');
+  } catch (e) {
+    return null;
+  }
+
+  try {
+    fetch(signedResult.uploadURL, {
+      method: 'PUT',
+      headers: {
+        'Content-Type': 'application/octet-stream',
+      },
+      body: file,
+    });
+  } catch (e) {
+    return null;
+  }
+
+  return signedResult;
+}
+
+export async function onUserUploadDataS3({ domain, file, key }) {
+  let signedResult;
+  const name = file.name;
+  const type = file.type;
+  const size = file.size;
+
+  if (size > Constants.MAX_SIZE_BYTES) {
+    return { error: 'File size exceeds 15mb limit' };
+  }
+
+  try {
+    const route = `${Constants.API}/data/generate-presigned-url`;
+    const body = { domain, type, file: name, size };
+    signedResult = await getData({ route, key, body }, 'uploadURL');
+  } catch (e) {
+    return null;
+  }
+
+  try {
+    fetch(signedResult.uploadURL, {
+      method: 'PUT',
+      body: file,
+    });
+  } catch (e) {
+    return null;
+  }
+
+  return signedResult;
+}
+
+================
+File: reference/common/server.ts
+================
+import * as Utilities from '@common/utilities';
+
+import Cors from '@modules/cors';
+
+// NOTE(jimmylee)
+// import aesjs from 'aes-js';
+/*
+Some endpoints on https://api.internet.dev require server-side decryption. Without it, you won’t be able to perform actions like password recovery or Google authentication. To enable these features, you’ll need to set two environment variables with the correct values, and have an active partnership with us.
+
+When we built this open-source template for learning purposes, we aimed to make it fully open and accessible. However, since we are also running a service, certain restrictions are necessary. We appreciate your understanding.
+
+API_AES_KEY=
+API_IV_KEY=
+*/
+
+/*
+export function decrypt(hex) {
+  if (Utilities.isEmpty(process.env.API_AES_KEY)) {
+    throw new Error('process.env.API_AES_KEY');
+    return;
+  }
+
+  if (Utilities.isEmpty(process.env.API_IV_KEY)) {
+    throw new Error('process.env.API_IV_KEY');
+    return;
+  }
+
+  const aesKey = aesjs.utils.utf8.toBytes(process.env.API_AES_KEY);
+  const base64IV = process.env.API_IV_KEY;
+
+  if (!base64IV) {
+    throw new Error('process.env.API_IV_KEY is undefined. Please set the environment variable.');
+  }
+
+  const ivBytes = aesjs.utils.hex.toBytes(Buffer.from(base64IV, 'base64').toString('hex'));
+  const aesCtr = new aesjs.ModeOfOperation.ctr(aesKey, new aesjs.Counter(ivBytes));
+  const encryptedBytes = aesjs.utils.hex.toBytes(hex);
+  const decryptedBytes = aesCtr.decrypt(encryptedBytes);
+  const decrypted = aesjs.utils.utf8.fromBytes(decryptedBytes);
+
+  return decrypted;
+}
+*/
+
+export function initMiddleware(middleware) {
+  return (req, res) =>
+    new Promise((resolve, reject) => {
+      middleware(req, res, (result) => {
+        if (result instanceof Error) {
+          return reject(result);
+        }
+        return resolve(result);
+      });
+    });
+}
+
+export const cors = initMiddleware(
+  Cors({
+    methods: ['GET', 'POST', 'DELETE', 'OPTIONS'],
+  })
+);
+
+export async function setup(context): Promise<{ sessionKey?: any; viewer?: Record<string, any> | null }> {
+  let viewer = null;
+  let sessionKey = context.req.cookies['sitekey'] || '';
+
+  if (!Utilities.isEmpty(sessionKey)) {
+    try {
+      const response = await fetch('https://api.internet.dev/api/users/viewer', {
+        method: 'PUT',
+        headers: { 'X-API-KEY': sessionKey, 'Content-Type': 'application/json' },
+      });
+      const result = await response.json();
+      if (result && result.viewer) {
+        viewer = result.viewer;
+      }
+    } catch (e) {}
+  }
+
+  return { sessionKey, viewer };
+}
+
+export async function tryKeyWithoutCookie(key): Promise<{ sessionKey?: any; viewer?: Record<string, any> | null }> {
+  let viewer = null;
+
+  if (!Utilities.isEmpty(key)) {
+    try {
+      const response = await fetch('https://api.internet.dev/api/users/viewer', {
+        method: 'PUT',
+        headers: { 'X-API-KEY': key, 'Content-Type': 'application/json' },
+      });
+      const result = await response.json();
+      if (result && result.viewer) {
+        viewer = result.viewer;
+      }
+    } catch (e) {}
+  }
+
+  return { sessionKey: key, viewer };
+}
+
+================
+File: reference/common/utilities.ts
+================
+const hasOwn = {}.hasOwnProperty;
+const localhostDomainRE = /^localhost[\:?\d]*(?:[^\:?\d]\S*)?$/;
+const nonLocalhostDomainRE = /^[^\s\.]+\.\S{2,}$/;
+const protocolAndDomainRE = /^(?:\w+:)?\/\/(\S+)$/;
+
+export function noop() {
+  return null;
+}
+
+export function pluralize(text: string, count: number) {
+  return count > 1 || count === 0 ? `${text}s` : text;
+}
+
+export function getOrdinalNumber(n) {
+  return n + (n > 0 ? ['th', 'st', 'nd', 'rd'][(n > 3 && n < 21) || n % 10 > 3 ? 0 : n % 10] : '');
+}
+
+// NOTE(jimmylee)
+// Stolen from: https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/deepEqual.ts
+export function deepEqual(x: any, y: any): boolean {
+  //@ts-ignore
+  return x && y && typeof x === 'object' && typeof y === 'object'
+    ? Object.keys(x).length === Object.keys(y).length &&
+        //@ts-ignore
+        Object.keys(x).reduce((isEqual, key) => isEqual && deepEqual(x[key], y[key]), true)
+    : x === y;
+}
+
+export function getDomainFromEmailWithoutAnySubdomain(email: string): string {
+  const atIndex = email.lastIndexOf('@');
+  if (atIndex === -1) {
+    return '';
+  }
+
+  const domain = email.slice(atIndex + 1);
+  const domainParts = domain.split('.');
+
+  if (domainParts.length < 2) {
+    return '';
+  }
+
+  const mainDomain = domainParts.slice(-2).join('.');
+  return mainDomain;
+}
+
+export function onHandleThemeChange(className?: string) {
+  const body = document.body;
+
+  body.classList.forEach((existingClass) => {
+    if (existingClass.startsWith('theme-')) {
+      body.classList.remove(existingClass);
+    }
+  });
+
+  if (className) {
+    body.classList.add(className);
+  } else {
+    body.classList.add('theme-light');
+  }
+}
+
+export function onHandleFontChange(className?: string) {
+  const body = document.body;
+
+  if (className) {
+    body.classList.forEach((existingClass) => {
+      if (existingClass.startsWith('font-')) {
+        body.classList.remove(existingClass);
+      }
+    });
+
+    body.classList.add(className);
+    return;
+  }
+
+  body.classList.forEach((existingClass) => {
+    if (existingClass.startsWith('font-')) {
+      body.classList.remove(existingClass);
+    }
+  });
+}
+
+export function formatDollars(value: number): string {
+  return new Intl.NumberFormat('en-US', {
+    style: 'currency',
+    currency: 'USD',
+  }).format(value);
+}
+
+export function calculatePositionWithGutter(rect, objectWidth, viewportWidth, gutter = 24) {
+  const right = viewportWidth - rect.right;
+  const top = rect.top + rect.height + gutter;
+  const side = right + objectWidth >= viewportWidth ? 'left' : 'right';
+  const adjustedRight = side === 'left' ? viewportWidth - objectWidth - gutter : right;
+  return { top, right: adjustedRight, side };
+}
+
+export function calculatePositionWithGutterById(id, objectWidth, viewportWidth, gutter?) {
+  let rect;
+  if (id) {
+    const el = document.getElementById(id);
+    if (el) {
+      rect = el.getBoundingClientRect();
+    }
+  }
+  return calculatePositionWithGutter(rect, objectWidth, viewportWidth, gutter);
+}
+
+export function leftPad(input, length) {
+  const zerosNeeded = length - input.length;
+  if (zerosNeeded <= 0) {
+    return input;
+  }
+
+  const zeros = '0'.repeat(zerosNeeded);
+
+  return zeros + input;
+}
+
+export function toDateISOString(data: string) {
+  const date = new Date(data);
+  const dayOfWeek = date.toLocaleDateString('en-US', {
+    weekday: 'long',
+  });
+  const month = date.toLocaleDateString('en-US', {
+    month: 'long',
+  });
+  const dayOfMonth = getOrdinalNumber(date.getDate());
+  const year = date.getFullYear();
+
+  const formattedDate = `${dayOfWeek}, ${month} ${dayOfMonth}, ${year}`;
+
+  return formattedDate;
+}
+
+export function elide(string, length = 140, emptyState = '...') {
+  if (isEmpty(string)) {
+    return emptyState;
+  }
+
+  if (string.length < length) {
+    return string.trim();
+  }
+
+  return `${string.substring(0, length)}...`;
+}
+
+export function bytesToSize(bytes: number, decimals: number = 2) {
+  if (bytes === 0) return '0 Bytes';
+
+  const k = 1000;
+  const dm = decimals < 0 ? 0 : decimals;
+  const sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
+
+  const i = Math.floor(Math.log(bytes) / Math.log(k));
+
+  return `${(bytes / Math.pow(k, i)).toFixed(dm)} ${sizes[i]}`;
+}
+
+export function isEmpty(text: any) {
+  // NOTE(jimmylee):
+  // If a number gets passed in, it isn't considered empty for zero.
+  if (text === 0) {
+    return false;
+  }
+
+  if (!text) {
+    return true;
+  }
+
+  if (typeof text === 'object') {
+    return true;
+  }
+
+  if (text.length === 0) {
+    return true;
+  }
+
+  text = text.toString();
+
+  return Boolean(!text.trim());
+}
+
+export function createSlug(text: any) {
+  if (isEmpty(text)) {
+    return 'untitled';
+  }
+
+  const a = 'æøåàáäâèéëêìíïîòóöôùúüûñçßÿœæŕśńṕẃǵǹḿǘẍźḧ·/_,:;';
+  const b = 'aoaaaaaeeeeiiiioooouuuuncsyoarsnpwgnmuxzh------';
+  const p = new RegExp(a.split('').join('|'), 'g');
+
+  return text
+    .toString()
+    .toLowerCase()
+    .replace(/\s+/g, '-') // Replace spaces with -
+    .replace(p, (c) => b.charAt(a.indexOf(c))) // Replace special chars
+    .replace(/&/g, '-and-') // Replace & with 'and'
+    .replace(/[^\w\-]+/g, '') // Remove all non-word chars
+    .replace(/\-\-+/g, '-') // Replace multiple - with single -
+    .replace(/^-+/, '') // Trim - from start of text
+    .replace(/-+$/, ''); // Trim - from end of text
+}
+
+export function isUrl(string: any) {
+  if (typeof string !== 'string') {
+    return false;
+  }
+
+  let match = string.match(protocolAndDomainRE);
+  if (!match) {
+    return false;
+  }
+
+  let everythingAfterProtocol = match[1];
+  if (!everythingAfterProtocol) {
+    return false;
+  }
+
+  if (localhostDomainRE.test(everythingAfterProtocol) || nonLocalhostDomainRE.test(everythingAfterProtocol)) {
+    return true;
+  }
+
+  return false;
+}
+
+export function debounce<Args extends unknown[]>(fn: (...args: Args) => void, delay: number) {
+  let timeoutID: number | undefined;
+  let lastArgs: Args | undefined;
+
+  const run = () => {
+    if (lastArgs) {
+      fn(...lastArgs);
+      lastArgs = undefined;
+    }
+  };
+
+  const debounced = (...args: Args) => {
+    clearTimeout(timeoutID);
+    lastArgs = args;
+    timeoutID = window.setTimeout(run, delay);
+  };
+
+  debounced.flush = () => {
+    clearTimeout(timeoutID);
+  };
+
+  return debounced;
+}
+
+export function timeAgo(dateInput: Date | string | number): string {
+  const date = new Date(dateInput);
+  const now = new Date();
+  const secondsPast = (now.getTime() - date.getTime()) / 1000;
+
+  if (secondsPast < 0 || isNaN(secondsPast)) {
+    return '[INVALID]';
+  }
+
+  if (secondsPast < 60) {
+    return 'Just now';
+  } else if (secondsPast < 3600) {
+    const minutes = Math.floor(secondsPast / 60);
+    return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;
+  } else if (secondsPast < 86400) {
+    const hours = Math.floor(secondsPast / 3600);
+    return `${hours} hour${hours > 1 ? 's' : ''} ago`;
+  } else if (secondsPast < 604800) {
+    const days = Math.floor(secondsPast / 86400);
+    return `${days} day${days > 1 ? 's' : ''} ago`;
+  }
+
+  const formattedDate = date.toLocaleDateString('en-US', {
+    month: '2-digit',
+    day: '2-digit',
+    year: 'numeric',
+  });
+
+  return formattedDate;
+}
+
+export function classNames(...args: any[]): string {
+  let classes: string[] = [];
+
+  for (let i = 0; i < arguments.length; i++) {
+    let arg = arguments[i];
+    if (!arg) continue;
+
+    let argType = typeof arg;
+
+    if (argType === 'string' || argType === 'number') {
+      classes.push(arg);
+    } else if (Array.isArray(arg)) {
+      if (arg.length) {
+        let inner = classNames.apply(null, arg);
+        if (inner) {
+          classes.push(inner);
+        }
+      }
+    } else if (argType === 'object') {
+      if (arg.toString !== Object.prototype.toString) {
+        classes.push(arg.toString());
+      } else {
+        for (let key in arg) {
+          if (hasOwn.call(arg, key) && arg[key]) {
+            classes.push(key);
+          }
+        }
+      }
+    }
+  }
+
+  return classes.join(' ');
+}
+
+export async function generateNonce() {
+  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
+  let result = '';
+  const charactersLength = characters.length;
+  for (let i = 0; i < 8; i++) {
+    result += characters.charAt(Math.floor(Math.random() * charactersLength));
+  }
+  return result;
+}
+
+export function filterUndefined(obj) {
+  const res = {};
+  Object.keys(obj)
+    .filter((k) => obj[k] !== undefined)
+    .forEach((k) => (res[k] = obj[k]));
+  return res;
+}
+
+export const isFocusableElement = (element: EventTarget | null): element is HTMLElement => {
+  if (!element || !(element instanceof HTMLElement)) {
+    return false;
+  }
+
+  const focusableSelectors = ['a[href]', 'button', 'input', 'select', 'textarea', '[tabindex]:not([tabindex="-1"])', '[contenteditable="true"]'];
+
+  return element.matches(focusableSelectors.join(', '));
+};
+
+export const findNextFocusable = (element: Element | null, direction: 'next' | 'previous' = 'next'): HTMLElement | null => {
+  if (!element) return null;
+
+  const focusableSelectors = ['a[href]', 'button', 'input', 'select', 'textarea', '[tabindex]:not([tabindex="-1"])', '[contenteditable="true"]'];
+
+  const focusableElements = Array.from(document.querySelectorAll<HTMLElement>(focusableSelectors.join(', ')));
+
+  const currentIndex = focusableElements.indexOf(element as HTMLElement);
+
+  if (currentIndex !== -1) {
+    const nextIndex = direction === 'next' ? (currentIndex + 1) % focusableElements.length : (currentIndex - 1 + focusableElements.length) % focusableElements.length;
+
+    return focusableElements[nextIndex];
+  }
+
+  return null;
+};
+
+export const findFocusableDescendant = (container: Element | null, currentFocused: Element | null = null, direction: 'next' | 'previous' = 'next'): HTMLElement | null => {
+  if (!container) return null;
+
+  const focusableElements = Array.from(container.querySelectorAll<HTMLElement>('a[href], button, input, select, textarea, [tabindex]:not([tabindex="-1"]), [contenteditable="true"]'));
+
+  if (focusableElements.length === 0) return null;
+
+  let index = 0;
+  if (currentFocused) {
+    const currentIndex = focusableElements.indexOf(currentFocused as HTMLElement);
+    if (currentIndex !== -1) {
+      index = direction === 'next' ? currentIndex + 1 : currentIndex - 1;
+    }
+  }
+
+  if (index >= 0 && index < focusableElements.length) {
+    return focusableElements[index];
+  }
+
+  return null;
+};
+
+================
+File: reference/components/detectors/OutsideElementEvent.tsx
+================
+import * as React from 'react';
+
+interface OutsideElementEventProps {
+  className?: string;
+  children: React.ReactNode;
+  onOutsideEvent: (event: MouseEvent | TouchEvent) => void;
+  style?: React.CSSProperties;
+}
+
+const OutsideElementEvent: React.FC<OutsideElementEventProps> = ({ className, children, onOutsideEvent, style }) => {
+  const ref = React.useRef<HTMLDivElement>(null);
+
+  const handleOutsideEvent = React.useCallback(
+    (event: MouseEvent | TouchEvent) => {
+      if (!(event.target instanceof Element)) return;
+
+      if (event.target.hasAttribute('data-detector-ignore')) {
+        return;
+      }
+
+      if (ref.current && !ref.current.contains(event.target as Node)) {
+        onOutsideEvent(event);
+      }
+    },
+    [onOutsideEvent]
+  );
+
+  React.useEffect(() => {
+    document.addEventListener('mousedown', handleOutsideEvent);
+    document.addEventListener('touchstart', handleOutsideEvent);
+
+    return () => {
+      document.removeEventListener('mousedown', handleOutsideEvent);
+      document.removeEventListener('touchstart', handleOutsideEvent);
+    };
+  }, [handleOutsideEvent]);
+
+  return (
+    <div ref={ref} className={className} style={style}>
+      {children}
+    </div>
+  );
+};
+
+export default OutsideElementEvent;
+
+================
+File: reference/components/examples/AS400.module.scss
+================
+.root {
+}
+
+================
+File: reference/components/examples/AS400.tsx
+================
+'use client';
+
+import styles from '@components/AS400.module.scss';
+
+import * as React from 'react';
+
+import Card from '@components/Card';
+import Row from '@components/Row';
+import RowSpaceBetween from '@components/RowSpaceBetween';
+import Table from '@components/Table';
+import TableRow from '@components/TableRow';
+import TableColumn from '@components/TableColumn';
+import TextArea from '@components/TextArea';
+
+type AS400Props = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const AS400 = () => {
+  return (
+    <>
+      <Card>
+        <RowSpaceBetween>
+          <span style={{ minWidth: `10ch` }}>COMMAND</span>
+          <span style={{ minWidth: `10ch` }}>Menu : ⌃+T</span>
+          <span style={{ minWidth: `10ch`, textAlign: 'right' }}>IND333</span>
+        </RowSpaceBetween>
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow style={{ textAlign: 'center' }}>
+            <TableColumn>F O O D&nbsp;&nbsp;D I S T R I B U T I O N</TableColumn>
+          </TableRow>
+          <TableRow style={{ textAlign: 'center' }}>
+            <TableColumn>- - Advance Sales Menu - -</TableColumn>
+          </TableRow>
+        </Table>
+        <br />
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow>
+            <TableColumn>1. Order Entry</TableColumn>
+            <TableColumn>13. Create Texlon/MSI Orders</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>2. Route Recap</TableColumn>
+            <TableColumn>14. Create Posting w/Scanner</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>3. Staging Ticket</TableColumn>
+            <TableColumn></TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>4. Picking Ticket</TableColumn>
+            <TableColumn>15. Order List</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>5. Order Posting</TableColumn>
+            <TableColumn>16. Order Maintenance</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>6. Bill of Lading</TableColumn>
+            <TableColumn>16. Order Hold</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>7. Load Sheets</TableColumn>
+            <TableColumn>18. Order Release</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>8. Order Entry Invoicing</TableColumn>
+            <TableColumn>19. Order Cancellation</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>9. Order Entry Confirmation</TableColumn>
+            <TableColumn>20. Order Change</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>10. Order Entry Processing</TableColumn>
+            <TableColumn>21. Unsettled Invoice Report</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>&nbsp;</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>11. Credit Memo Entry</TableColumn>
+            <TableColumn>- - Transaction Processing Menu - -</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>12. Credit Memo Processing</TableColumn>
+            <TableColumn>- - Main Menu - -</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn></TableColumn>
+            <TableColumn>24. Sign Off</TableColumn>
+          </TableRow>
+        </Table>
+        <br />
+        <br />
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow>
+            <TableColumn>Ready for option number or command</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>
+              <TextArea isBlink />
+            </TableColumn>
+          </TableRow>
+        </Table>
+      </Card>
+      <br />
+      <Card>
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;Option: 1337...&nbsp;&nbsp; Copy: US&nbsp;&nbsp;&nbsp;&nbsp;ITEM ACTIVITY INQUIRY</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>IND333</TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Regn: NW</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}></TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;Item #: 6666666</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}></TableColumn>
+          </TableRow>
+          <TableRow>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GMO HONEYDEW MELON USDA PRIME 72 OZ</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}></TableColumn>
+          </TableRow>
+        </Table>
+        <br />
+        <br />
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow>
+            <TableColumn>Warehouse</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>On Hand</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>On Order</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>In Transit</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>Total</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>W/S</TableColumn>
+            <TableColumn style={{ textAlign: 'right' }}>Sell</TableColumn>
+          </TableRow>
+
+          <TableRow>
+            <TableColumn>&nbsp;</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;01 SEATTLE</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;02 PORTLAND</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;06 TUKWILA</TableColumn>
+            <TableColumn>89</TableColumn>
+            <TableColumn>162</TableColumn>
+            <TableColumn>162</TableColumn>
+            <TableColumn>413</TableColumn>
+            <TableColumn>7.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;08 KIRKLAND</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;09 ALOHA</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;10 ANCHORAGE</TableColumn>
+            <TableColumn>107</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>324</TableColumn>
+            <TableColumn>511</TableColumn>
+            <TableColumn>5.5</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;13 SILVERDALE</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;17 EUGENE</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;61 FEDERAL WAY</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;63 NE ANCHORAGE</TableColumn>
+            <TableColumn>229</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>162</TableColumn>
+            <TableColumn>391</TableColumn>
+            <TableColumn>4.5</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;64 TUMWATER</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;67 MISSOULA</TableColumn>
+            <TableColumn>201</TableColumn>
+            <TableColumn>648</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>849</TableColumn>
+            <TableColumn>5.2</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+
+          <TableRow style={{ textAlign: 'right' }}>
+            <TableColumn>&nbsp;&nbsp;&nbsp;&nbsp;95 TACOMA</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>0</TableColumn>
+            <TableColumn>.0</TableColumn>
+            <TableColumn>8.88</TableColumn>
+          </TableRow>
+        </Table>
+        <br />
+        <br />
+        <Table style={{ minWidth: '71ch' }}>
+          <TableRow>
+            <TableColumn>CF-3 Exit&nbsp;&nbsp;&nbsp;&nbsp;CF7-Next Item&nbsp;&nbsp;&nbsp;&nbsp;CF21-Print Report</TableColumn>
+          </TableRow>
+        </Table>
+      </Card>
+    </>
+  );
+};
+
+AS400.displayName = 'AS400';
+
+export default AS400;
+
+================
+File: reference/components/examples/DashboardRadar.module.scss
+================
+.customSidebar {
+  display: flex;
+  align-items: center;
+  justify-content: space-between;
+  width: 100%;
+  flex-direction: column;
+  height: calc(var(--theme-line-height-base) * (var(--font-size) * 29.5));
+}
+
+.customTop {
+  min-height: 10%;
+  height: 100%;
+}
+
+.customBottom {
+  flex-shrink: 0;
+  width: 100%;
+}
+
+.root {
+  min-width: 56ch;
+}
+
+.cross {
+  width: 9ch;
+  height: calc(var(--theme-line-height-base) * (var(--font-size) * 7));
+  margin: calc(var(--theme-line-height-base) * (var(--font-size) * 0.5)) 0 calc(var(--theme-line-height-base) * (var(--font-size) * 0.5)) 0;
+  display: flex;
+  justify-content: space-between;
+  flex-direction: column;
+}
+
+.square {
+  width: 4.3ch;
+  height: calc(var(--theme-line-height-base) * (var(--font-size) * 3.4));
+}
+
+.nw {
+  border-right: 2px solid var(--theme-text);
+  border-bottom: 2px solid var(--theme-text);
+}
+
+.ne {
+  border-left: 2px solid var(--theme-text);
+  border-bottom: 2px solid var(--theme-text);
+}
+
+.sw {
+  border-top: 2px solid var(--theme-text);
+  border-right: 2px solid var(--theme-text);
+}
+
+.se {
+  border-top: 2px solid var(--theme-text);
+  border-left: 2px solid var(--theme-text);
+}
+
+.customContent {
+  width: 100%;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  height: calc(var(--theme-line-height-base) * (var(--font-size) * 24.5));
+}
+
+================
+File: reference/components/examples/DashboardRadar.tsx
+================
+import styles from '@components/examples/DashboardRadar.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import ActionButton from '@components/ActionButton';
+import ButtonGroup from '@components/ButtonGroup';
+import Card from '@components/Card';
+import RowSpaceBetween from '@components/RowSpaceBetween';
+import SidebarLayout from '@components/SidebarLayout';
+import Sphere from '@components/svg/Sphere';
+
+const RadarMarker = (props) => {
+  return (
+    <div className={styles.cross}>
+      <RowSpaceBetween>
+        <div className={Utilities.classNames(styles.square, styles.nw)} />
+        <div className={Utilities.classNames(styles.square, styles.ne)} />
+      </RowSpaceBetween>
+      <RowSpaceBetween>
+        <div className={Utilities.classNames(styles.square, styles.sw)} />
+        <div className={Utilities.classNames(styles.square, styles.se)} />
+      </RowSpaceBetween>
+    </div>
+  );
+};
+
+const DashboardRadar = (props) => {
+  return (
+    <div className={styles.root}>
+      <SidebarLayout
+        isReversed
+        sidebar={
+          <Card>
+            <div className={styles.customSidebar}>
+              <div className={styles.customTop}>
+                TIME FROM
+                <ActionButton style={{ width: '100%' }}>11:11:11:11</ActionButton>
+                <br />
+                <br />
+                PRESENT
+                <br />
+                P.O.R.
+                <br />
+                NOSTROMO
+                <br />
+              </div>
+              <div className={styles.customBottom}>
+                HEADING
+                <br />
+                <ButtonGroup isFull items={[{ body: 'N .36' }, { body: 'E .18' }]} />
+                <br />
+                GROUND
+                <br />
+                <ActionButton rootStyle={{ width: '100%' }}>SPEED 78.26</ActionButton>
+                <br />
+                CONDITION
+                <br />
+                CODE
+                <br />
+                <ActionButton style={{ width: '100%' }}>16 S=C75C</ActionButton>
+                <ActionButton>PAST=8</ActionButton>
+                <br />
+                <br />
+                <ActionButton rootStyle={{ width: '100%' }}>System #4</ActionButton>
+                <br />
+                <br />
+                AUTODECOUNT
+                <br />
+                <br />
+                <ActionButton rootStyle={{ width: '100%', textAlign: 'right' }}>3454.94#</ActionButton>
+              </div>
+            </div>
+          </Card>
+        }
+        defaultSidebarWidth={19}
+      >
+        <Card>
+          <RowSpaceBetween>
+            <span style={{ flexShrink: 0 }}>DEORBITAL DESCENT</span>
+            <span style={{ minWidth: '10%', width: '100%', display: 'flex', justifyContent: 'flex-end' }}>
+              <span>
+                <ActionButton>COMMENCE FINAL</ActionButton>
+                <br />
+                <ActionButton>SYSTEM :0L: 76.75 :08:</ActionButton>
+              </span>
+            </span>
+          </RowSpaceBetween>
+        </Card>
+        <br />
+        <Card>
+          <RowSpaceBetween style={{ position: 'absolute', top: 0, left: `6ch`, right: `6ch` }}>
+            <RadarMarker />
+            <RadarMarker />
+          </RowSpaceBetween>
+          <div className={styles.customContent}>
+            <Sphere style={{ transform: 'translateX(24ch) rotateZ(40deg)' }} />
+          </div>
+          <RowSpaceBetween style={{ position: 'absolute', bottom: `calc(var(--theme-line-height-base) * (var(--font-size) * 0.5))`, left: `6ch`, right: `6ch` }}>
+            <RadarMarker />
+            <RadarMarker />
+          </RowSpaceBetween>
+        </Card>
+      </SidebarLayout>
+    </div>
+  );
+};
+
+export default DashboardRadar;
+
+================
+File: reference/components/examples/Denabase.module.scss
+================
+.root {
+  min-width: 68ch;
+  margin-top: calc(var(--theme-line-height-base) * 1rem);
+}
+
+.dna {
+  min-width: 71ch;
+  -webkit-text-size-adjust: 100%;
+}
+
+.tag {
+  width: 3ch;
+  height: calc(var(--theme-line-height-base) * 0.5rem);
+  flex-shrink: 0;
+  box-shadow:
+    inset 2px 0 0 var(--theme-text),
+    inset -2px 0 0 var(--theme-text),
+    inset 0 2px 0 var(--theme-text);
+}
+
+.secondaryTag {
+  width: 3ch;
+  align-self: stretch;
+  flex-shrink: 0;
+  box-shadow:
+    inset 2px 0 0 var(--theme-text),
+    inset -2px 0 0 var(--theme-text),
+    inset 0 2px 0 var(--theme-text);
+}
+
+.small {
+  width: 13ch;
+  flex-shrink: 0;
+  text-align: right;
+}
+
+.smallWithBorder {
+  width: 13ch;
+  flex-shrink: 0;
+  text-align: right;
+  box-shadow: inset 0 2px 0 var(--theme-text);
+}
+
+.smallSection {
+  width: 13ch;
+  flex-shrink: 0;
+  min-width: 10%;
+  text-align: right;
+  box-shadow: inset 0 2px 0 var(--theme-text);
+}
+
+.large {
+  width: 80%;
+  min-width: 10%;
+  text-align: right;
+}
+
+.largeWithBorder {
+  width: 80%;
+  min-width: 10%;
+  text-align: right;
+  box-shadow:
+    inset 0 2px 0 var(--theme-text),
+    inset -2px 0 0 var(--theme-text);
+}
+
+.largeSection {
+  width: 80%;
+  min-width: 10%;
+  text-align: right;
+  box-shadow:
+    inset 0 2px 0 var(--theme-text),
+    inset -2px 0 0 var(--theme-text);
+}
+
+.absoluteTag {
+  top: calc(var(--theme-line-height-base) * -0.5rem);
+  left: 0;
+  height: calc(var(--theme-line-height-base) * 0.5rem);
+  width: 14.2ch;
+  background: var(--theme-background);
+  position: absolute;
+  box-shadow:
+    inset 2px 0 0 var(--theme-text),
+    inset -2px 0 0 var(--theme-text),
+    inset 0 2px 0 var(--theme-text);
+}
+
+.box {
+  width: 7.1ch;
+  flex-shrink: 0;
+  height: calc(var(--theme-line-height-base) * 3rem);
+  display: inline-flex;
+  align-items: center;
+  justify-content: center;
+  box-shadow:
+    inset -2px 0 0 var(--theme-text),
+    inset 0 2px 0 var(--theme-text),
+    inset 0 -2px 0 var(--theme-text);
+
+  &:first-child {
+    box-shadow:
+      inset 2px 0 0 var(--theme-text),
+      inset -2px 0 0 var(--theme-text),
+      inset 0 2px 0 var(--theme-text),
+      inset 0 -2px 0 var(--theme-text);
+  }
+}
+
+================
+File: reference/components/examples/Denabase.tsx
+================
+'use client';
+
+import styles from '@components/examples/Denabase.module.scss';
+
+import * as React from 'react';
+
+import ActionButton from '@components/ActionButton';
+import Card from '@components/Card';
+import Divider from '@components/Divider';
+import Row from '@components/Row';
+import RowSpaceBetween from '@components/RowSpaceBetween';
+import SidebarLayout from '@components/SidebarLayout';
+
+const Denabase = (props) => {
+  return (
+    <>
+      <Card style={{ overflowWrap: 'break-word' }}>
+        <Row>
+          <RowSpaceBetween>
+            <ActionButton>TR5342120027455925897981</ActionButton>
+            <ActionButton>02.14.2021</ActionButton>
+          </RowSpaceBetween>
+          <Divider type="GRADIENT" />
+          <div className={styles.dna}>
+            T-CA-AA-AA-TA-TC-GG-GC-AC-AT-TA-TT-TA-TT-TG-CC-GC-TC-GG-GA-AG-TA-GA-A
+            <br />
+            A-TG-GT-AC-AT-GT-GT-TT-TA-TG-AT-TT-CT-CG-CA-GT-GA-AA-AA-GC-AA-CG-AA-C
+            <br />
+            C-TC-GC-CC-TT-AG-AT-TC-TA-TA-GC-TG-CT-CT-GA-GA-CC-GC-AC-TG-GC-AA-GC-A
+            <br />
+            G-AA-AC-TC-CG-CA-TT-CA-GG-CA-GT-CC-TC-CA-TG-CA-CT-TC-CT-GC-CT-GT-CT-G
+            <br />
+            C-TG-AA-CC-TA-TT-AT-TA-GA-GA-TG-GA-CT-GC-AG-TT-CT-CA-AT-CA-CA-CG-GA-T
+            <br />
+            C-TG-AT-AC-CT-GC-TG-GT-AT-GT-TC-CT-GA-TA-CC-CA-CA-GA-CA-GC-GC-CC-GA-A
+            <br />
+            T-TT-TG-GC-AA-CC-GA-AC-TT-CT-CA-AC-AA-AA-CC-GC-CT-AG-TT-GC-TA-AT-TT-G
+            <br />
+            G-TG-AC-CT-GA-CT-GA-AT-TG-TC-AT-TA-AA-CA-CT-CC-TG-CT-AA-GA-TG-CG-AA-G
+            <br />
+            C-TA-TT-AT-AG-TG-TT-TT-GT-AC-AG-GC-TA-TT-TT-GC-GT-GA-AA-CG-CA-AA-CG-C
+            <br />
+            G-TT-GC-AT-TT-CA-GA-AT-TC-CG-TG-CA-TA-GT-TA-TC-TC-AT-GC-CG-TG-CT-CT-T
+            <br />
+            G-AT-TA-TT-GA-CA-TA-TG-CA-GT-TC-GT-CC-TA-AT-CC-GC-GC-CT-GG-TC-TT-TA-G
+            <br />
+            T-CA-CT-AA-CC-GA-CC-CT-TA-GT-AT-TG-TT-CT-CT-CA-AC-AA-AA-TG-TG-TT-AA-A
+            <br />
+            C-CG-GC-AT-AA-TC-TG-GT-GA-TC-GG-GA-GA-TC-CA-GA-GA-AA-CA-CA-CC-TT-GG-G
+            <br />
+            C-TA-GA-TG-CC-CT-AC-AT-TA-GA-TA-AG-GG-GT-CT-AT-AC-GG-GC-GG-GG-TT-AG-T
+            <br />
+            A-CA-CC-TT-GA-GC-GT-AT-AG-GA-GA-GT-AA-CG-AG-GT-GG-TT-GT-CG-TG-GG-AG-G
+            <br />
+            A-GG-AG-TA-TG-TT-CT-CC-CT-TA-CT-AG-TT-GC-CG-AT-AA-CA-GA-TA-CT-GA-TG-T
+            <br />
+            C-TG-GT-AA-TT-GC-CA-GT-CA-TG-GT-TG-TA-GT-AG-CC-GG-GA-CC-CG-CA-GT-CT-G
+            <br />
+            G-GT-AG-CG-CC-TA-AC-AG-AT-AA-GG-GG-GC-CT-AC-TC-CC-GC-CC-TG-GT-CG-GC-C
+            <br />
+            T-GA-TC-AT-AA-AC-CT-CT-GT-AA-TA-CC-AT-GG-GC-CA-CG-TT-AG-GC-GT-CG-AT-G
+            <br />
+            C-CG-GA-CC-CA-TA-TC-TT-TA-CA-TC-AT-CT-CT-TT-CA-TA-GA-AG-TA-CC-CA-CT-T
+            <br />
+          </div>
+          <Divider type="GRADIENT" />
+        </Row>
+      </Card>
+      <br />
+      <Card>
+        <SidebarLayout
+          sidebar={
+            <Card style={{ padding: `0 0 0 0` }}>
+              <br />
+              <br />
+              <Row style={{ textAlign: 'center' }}>╳</Row>
+              <br />
+              <br />
+            </Card>
+          }
+          defaultSidebarWidth={19}
+        >
+          <Card style={{ padding: 0, marginLeft: `1ch`, minWidth: `30ch` }}>
+            <br />
+            <br />
+            <br />
+            <br />
+            <Row style={{ textAlign: 'right' }}>NO DATA</Row>
+          </Card>
+        </SidebarLayout>
+        <div className={styles.root}>
+          <RowSpaceBetween>
+            <div className={styles.tag}></div>
+            <div className={styles.small}></div>
+            <div className={styles.tag}></div>
+            <div className={styles.large}></div>
+          </RowSpaceBetween>
+          <RowSpaceBetween>
+            <div className={styles.secondaryTag}>
+              <br />
+              <br />
+            </div>
+            <div className={styles.smallSection}>
+              <br />
+              2181&nbsp;
+              <br />
+              <br />
+            </div>
+            <div className={styles.secondaryTag}></div>
+            <div className={styles.largeSection}>
+              <br />
+              UNKNOWN&nbsp;&nbsp;
+              <br />
+              <br />
+            </div>
+          </RowSpaceBetween>
+          <RowSpaceBetween>
+            <div className={styles.tag}></div>
+            <div className={styles.smallWithBorder}></div>
+            <div className={styles.tag}></div>
+            <div className={styles.largeWithBorder}></div>
+          </RowSpaceBetween>
+          <RowSpaceBetween>
+            <div className={styles.secondaryTag}>
+              <br />
+              <br />
+            </div>
+            <div className={styles.smallSection}>
+              <br />
+              DECEASED&nbsp;
+              <br />
+              <br />
+            </div>
+            <div className={styles.secondaryTag}></div>
+            <div className={styles.largeSection}>
+              <br />
+              MORRILLCOLE&nbsp;&nbsp;
+              <br />
+              <br />
+            </div>
+          </RowSpaceBetween>
+          <RowSpaceBetween style={{ position: 'relative' }}>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.box}>╳</div>
+            <div className={styles.absoluteTag}></div>
+          </RowSpaceBetween>
+        </div>
+      </Card>
+    </>
+  );
+};
+
+export default Denabase;
+
+================
+File: reference/components/examples/MessagesInterface.tsx
+================
+import Avatar from '@components/Avatar';
+import ActionButton from '@components/ActionButton';
+import Divider from '@components/Divider';
+import DropdownMenuTrigger from '@components/DropdownMenuTrigger';
+import Indent from '@components/Indent';
+import Input from '@components/Input';
+import Message from '@components/Message';
+import MessageViewer from '@components/MessageViewer';
+import ModalError from '@components/modals/ModalError';
+import Navigation from '@components/Navigation';
+import RowEllipsis from '@components/RowEllipsis';
+import SidebarLayout from '@components/SidebarLayout';
+
+import * as React from 'react';
+
+interface MessagesInterfaceProps extends React.HTMLAttributes<HTMLSpanElement> {}
+
+const ChatPreviewInline = (props) => {
+  return <RowEllipsis style={{ opacity: 0.5, marginBottom: `10px` }}>{props.children}</RowEllipsis>;
+};
+
+const MessagesInterface: React.FC<MessagesInterfaceProps> = () => {
+  return (
+    <div style={{ minWidth: '28ch' }}>
+      <Navigation
+        logo="✶"
+        left={
+          <>
+            <DropdownMenuTrigger
+              items={[
+                {
+                  icon: '⊹',
+                  children: 'Open',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'New Message',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Quick Look',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Close Messages',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Open Conversation in New Window',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Print...',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+              ]}
+            >
+              <ActionButton>FILE</ActionButton>
+            </DropdownMenuTrigger>
+
+            <DropdownMenuTrigger
+              items={[
+                {
+                  icon: '⊹',
+                  children: 'Undo',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Redo',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Cut',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Copy',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Paste',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Paste and Match Style',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Delete',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Select All',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Find...',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Find Next',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Find Previous',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Spelling and Grammar',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Substitutions',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Speech',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Send Message',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Reply to Last Message',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Tapback Last Message',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Edit Last Message',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Autofill',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Start Dictation',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Emoji & Symbols',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+              ]}
+            >
+              <ActionButton>EDIT</ActionButton>
+            </DropdownMenuTrigger>
+            <DropdownMenuTrigger
+              items={[
+                {
+                  icon: '⊹',
+                  children: 'Show Tab Bar',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Show All Tabs',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Make Text Bigger',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Make Text Normal Size',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Make Text Smaller',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'All Messages',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Known Senders',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Unknown Senders',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Unread Messages',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Recently Delete',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Show Sidebar',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Enter Full Screen',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+              ]}
+            >
+              <ActionButton>VIEW</ActionButton>
+            </DropdownMenuTrigger>
+          </>
+        }
+        right={
+          <>
+            <DropdownMenuTrigger
+              items={[
+                {
+                  icon: '⊹',
+                  children: 'Search',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+                {
+                  icon: '⊹',
+                  children: 'Messages Help',
+                  modal: ModalError,
+                  modalProps: {
+                    message: <>Non-fatal error detected: error FOOLISH (Please contact Sacred Computer support.)</>,
+                    title: `MESSAGES`,
+                  },
+                },
+              ]}
+            >
+              <ActionButton>HELP</ActionButton>
+            </DropdownMenuTrigger>
+          </>
+        }
+      ></Navigation>
+      <Divider type="DOUBLE" />
+      <SidebarLayout
+        defaultSidebarWidth={12}
+        isShowingHandle={true}
+        sidebar={
+          <>
+            <Avatar>
+              <Indent>
+                Arthur
+                <br />
+                <ChatPreviewInline>No, it has to be more unique</ChatPreviewInline>
+              </Indent>
+            </Avatar>
+            <Avatar>
+              <Indent>
+                Ariadne
+                <br />
+                <ChatPreviewInline>No. Just you.</ChatPreviewInline>
+              </Indent>
+            </Avatar>
+            <Avatar>
+              <Indent>
+                Eames
+                <br />
+                <ChatPreviewInline>dream a little bigger</ChatPreviewInline>
+              </Indent>
+            </Avatar>
+            <Avatar>
+              <Indent>
+                Yusef
+                <br />
+                <ChatPreviewInline>Depends on the dream.</ChatPreviewInline>
+              </Indent>
+            </Avatar>
+            <Avatar>
+              <Indent>
+                Saito
+                <br />
+                <ChatPreviewInline>I bought the airline.</ChatPreviewInline>
+              </Indent>
+            </Avatar>
+          </>
+        }
+      >
+        <Message>Why are they all looking at me?</Message>
+        <MessageViewer>Because my subconscious feels that someone else is creating this world. The more you change things, the quicker the projections start to converge on you.</MessageViewer>
+        <Message>Converge?</Message>
+        <MessageViewer>It's the foreign nature of the dreamer. They attack like white blood cells fighting an infection.</MessageViewer>
+        <Message>They're going to attack us?</Message>
+        <MessageViewer>No. Just you.</MessageViewer>
+        <br />
+        <br />
+        <Input autoComplete="off" isBlink={true} label="Message" name="test_message_interface" />
+      </SidebarLayout>
+    </div>
+  );
+};
+
+export default MessagesInterface;
+
+================
+File: reference/components/examples/UpdatingDataTable.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+import DataTable from '@components/DataTable';
+
+const UpdatingDataTable = (props) => {
+  const [tableData, setTableData] = React.useState(props.data);
+
+  React.useEffect(() => {
+    const interval = setInterval(() => {
+      setTableData((prevData) => {
+        const header = prevData[0];
+        const rows = prevData.slice(1);
+
+        const updatedRows = rows.map((row) => {
+          const currentPrice = parseFloat(row[2].replace('$', ''));
+          const currentHoldings = parseInt(row[3], 10);
+          const priceChangeFactor = 1 + (Math.random() - 0.5) * 0.1;
+          const newPrice = currentPrice * priceChangeFactor;
+          const holdingsChange = Math.floor((Math.random() - 0.5) * 20);
+          const newHoldings = Math.max(1, currentHoldings + holdingsChange);
+
+          return [row[0], row[1], `$${newPrice.toFixed(2)}`, newHoldings.toString()];
+        });
+
+        updatedRows.sort((a, b) => {
+          const priceA = parseFloat(a[2].replace('$', ''));
+          const priceB = parseFloat(b[2].replace('$', ''));
+          return priceB - priceA;
+        });
+
+        return [header, ...updatedRows];
+      });
+    }, 1000);
+
+    return () => clearInterval(interval);
+  }, []);
+
+  return (
+    <>
+      <DataTable data={tableData} />
+    </>
+  );
+};
+
+export default UpdatingDataTable;
+
+================
+File: reference/components/modals/ModalAlert.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalAlert.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalAlert.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import Card from '@components/Card';
+
+interface ModalAlertProps {
+  buttonText?: string | any;
+  message: string;
+}
+
+function ModalAlert({ message, buttonText }: ModalAlertProps) {
+  const { close } = useModals();
+
+  return (
+    <div className={styles.root}>
+      <Card title="ALERT">
+        {message}
+        <br />
+        <br />
+        <Button onClick={() => close()}>{Utilities.isEmpty(buttonText) ? 'Close' : buttonText}</Button>
+      </Card>
+    </div>
+  );
+}
+
+export default ModalAlert;
+
+================
+File: reference/components/modals/ModalCanvasPlatformer.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalCanvasPlatformer.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalCanvasPlatformer.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import CanvasPlatformer from '@components/CanvasPlatformer';
+import Card from '@components/Card';
+
+interface ModalCanvasPlatformerProps {
+  buttonText?: string | any;
+}
+
+function ModalCanvasPlatformer({ buttonText }: ModalCanvasPlatformerProps) {
+  const { close } = useModals();
+
+  return (
+    <div className={styles.root}>
+      <Card title="ALERT">
+        <CanvasPlatformer rows={12} />
+        <br />
+        <br />
+        <Button onClick={() => close()}>{Utilities.isEmpty(buttonText) ? 'Close' : buttonText}</Button>
+      </Card>
+    </div>
+  );
+}
+
+export default ModalCanvasPlatformer;
+
+================
+File: reference/components/modals/ModalCanvasSnake.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalCanvasSnake.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalCanvasSnake.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import CanvasSnake from '@components/CanvasSnake';
+import Card from '@components/Card';
+
+interface ModalCanvasSnakeProps {
+  buttonText?: string | any;
+}
+
+function ModalCanvasSnake({ buttonText }: ModalCanvasSnakeProps) {
+  const { close } = useModals();
+
+  return (
+    <div className={styles.root}>
+      <Card title="CANVAS PLATFORMER">
+        <CanvasSnake rows={12} />
+        <br />
+        <br />
+        <Button onClick={() => close()}>{Utilities.isEmpty(buttonText) ? 'Close' : buttonText}</Button>
+      </Card>
+    </div>
+  );
+}
+
+export default ModalCanvasSnake;
+
+================
+File: reference/components/modals/ModalChess.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalChess.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalChess.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useHotkeys } from '@modules/hotkeys';
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import CardDouble from '@components/CardDouble';
+import Chessboard from '@components/Chessboard';
+
+interface ModalErrorProps {
+  buttonText?: string | any;
+  board: string[][];
+  title?: string;
+}
+
+function ModalChess({ board, buttonText, title }: ModalErrorProps) {
+  const { close } = useModals();
+
+  useHotkeys('enter', () => close());
+
+  return (
+    <div className={styles.root}>
+      <CardDouble title={title} style={{ textAlign: 'center' }}>
+        <Chessboard board={board} />
+        <br />
+        <br />
+        <Button onClick={() => close()}>{Utilities.isEmpty(buttonText) ? 'CLOSE' : buttonText}</Button>
+      </CardDouble>
+    </div>
+  );
+}
+
+export default ModalChess;
+
+================
+File: reference/components/modals/ModalCreateAccount.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalCreateAccount.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalAlert.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import CardDouble from '@components/CardDouble';
+import Checkbox from '@components/Checkbox';
+import Input from '@components/Input';
+import RadioButtonGroup from '@components/RadioButtonGroup';
+
+function ModalCreateAccount() {
+  const { close } = useModals();
+
+  return (
+    <div className={styles.root}>
+      <CardDouble title="NEW ACCOUNT">
+        Create a new MakeBelieve™ account, where anything is possible at your command line in the browser.
+        <br />
+        <br />
+        <RadioButtonGroup
+          defaultValue="modal_developer"
+          options={[
+            { value: 'modal_individual', label: 'I’m using this for personal use.' },
+            { value: 'modal_developer', label: 'I’m building or creating something for work.' },
+            { value: 'modal_company', label: 'We’re using this as a team or organization.' },
+          ]}
+        />
+        <br />
+        <Input autoComplete="off" label="USERNAME" placeholder="Choose a username (e.g., SurfGirl29)" name="modal_username" />
+        <Input autoComplete="off" label="PASSWORD" placeholder="Create a password (8+ characters)" type="password" name="modal_password" />
+        <Input autoComplete="off" label="CONFIRM" placeholder="Type it again" type="password" name="modal_confirm" />
+        <br />
+        <Checkbox name="modal_terms">I agree to the Terms of Service, Data Privacy Policy, and Acceptable Use Guidelines.</Checkbox>
+        <Checkbox name="modal_goodwill">I agree not to use this service for unlawful purposes.</Checkbox>
+        <br />
+        <Button onClick={() => close()}>Create an account</Button>
+      </CardDouble>
+    </div>
+  );
+}
+
+export default ModalCreateAccount;
+
+================
+File: reference/components/modals/ModalError.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalError.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalError.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useHotkeys } from '@modules/hotkeys';
+import { useModals } from '@components/page/ModalContext';
+
+import ActionButton from '@components/ActionButton';
+import Button from '@components/Button';
+import CardDouble from '@components/CardDouble';
+import Grid from '@components/Grid';
+
+interface ModalErrorProps {
+  buttonText?: string | any;
+  message: string | any;
+  title?: string;
+}
+
+// TODO(jimmylee)
+// Enter doesn't always work for some reason.
+function ModalError({ message, buttonText, title }: ModalErrorProps) {
+  const { close } = useModals();
+
+  useHotkeys('enter', () => close());
+
+  return (
+    <div className={styles.root}>
+      <CardDouble title={title}>
+        <br />
+        {message}
+        <Grid>
+          <ul>
+            <li>
+              Press{' '}
+              <ActionButton hotkey="⏎" onClick={() => close()}>
+                ENTER
+              </ActionButton>{' '}
+              to continue.
+            </li>
+          </ul>
+        </Grid>
+      </CardDouble>
+    </div>
+  );
+}
+
+export default ModalError;
+
+================
+File: reference/components/modals/ModalMatrixModes.module.scss
+================
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(88px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0px);
+  }
+}
+
+.root {
+  animation: fadeIn 0.3s ease-out;
+  background: var(--theme-background-modal);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  display: block;
+  font-weight: 400;
+  margin: 0 auto;
+  max-width: 64ch;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/modals/ModalMatrixModes.tsx
+================
+'use client';
+
+import styles from '@components/modals/ModalMatrixModes.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { useModals } from '@components/page/ModalContext';
+
+import Button from '@components/Button';
+import Card from '@components/Card';
+import MatrixLoader from '@components/MatrixLoader';
+
+interface ModalMatrixModesProps {
+  buttonText?: string | any;
+}
+
+function ModalMatrixModes({ buttonText }: ModalMatrixModesProps) {
+  const { close } = useModals();
+
+  return (
+    <div className={styles.root}>
+      <Card title="MATRIX MODES">
+        <Card title="KATAKANA DEFAULT">
+          <MatrixLoader rows={32} mode="katakana" />
+        </Card>
+        <Card title="GREEK LTR">
+          <MatrixLoader direction="left-to-right" rows={8} mode="greek" />
+        </Card>
+        <br />
+        <br />
+        <Button onClick={() => close()}>{Utilities.isEmpty(buttonText) ? 'Close' : buttonText}</Button>
+      </Card>
+    </div>
+  );
+}
+
+export default ModalMatrixModes;
+
+================
+File: reference/components/page/DefaultActionBar.module.scss
+================
+.root {
+  position: fixed;
+  top: 0;
+  left: 2ch;
+  z-index: 1;
+}
+
+================
+File: reference/components/page/DefaultActionBar.tsx
+================
+'use client';
+
+import styles from '@components/page/DefaultActionBar.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import { toggleDebugGrid } from '@components/DebugGrid';
+import { useHotkeys } from '@modules/hotkeys';
+
+import ActionBar from '@components/ActionBar';
+import ButtonGroup from '@components/ButtonGroup';
+
+function isElement(target: EventTarget | null): target is Element {
+  return target instanceof Element;
+}
+
+function isHTMLElement(target: EventTarget | null): target is HTMLElement {
+  return target instanceof HTMLElement;
+}
+
+const findFocusableParent = (element: Element | null): Element | null => {
+  while (element) {
+    element = element.parentElement;
+    if (element && Utilities.isFocusableElement(element)) {
+      return element;
+    }
+  }
+  return null;
+};
+
+const findNextFocusableSibling = (element: Element, direction: 'next' | 'previous'): HTMLElement | null => {
+  let sibling = direction === 'next' ? element.nextElementSibling : element.previousElementSibling;
+
+  while (sibling) {
+    if (Utilities.isFocusableElement(sibling)) {
+      return sibling as HTMLElement;
+    }
+
+    const focusableDescendant = Utilities.findFocusableDescendant(sibling, null, direction);
+    if (focusableDescendant) {
+      return focusableDescendant;
+    }
+
+    sibling = direction === 'next' ? sibling.nextElementSibling : sibling.previousElementSibling;
+  }
+
+  return null;
+};
+
+const findNextFocusableAncestor = (element: Element, direction: 'next' | 'previous'): HTMLElement | null => {
+  let ancestor = element.parentElement;
+
+  while (ancestor) {
+    const nextFocusable = findNextFocusableSibling(ancestor, direction);
+    if (nextFocusable) {
+      return nextFocusable;
+    }
+    ancestor = ancestor.parentElement;
+  }
+
+  return null;
+};
+
+const useGlobalNavigationHotkeys = () => {
+  const onHandleSubmit = (event: KeyboardEvent) => {
+    const target = event.target;
+    if (Utilities.isFocusableElement(target)) {
+      event.preventDefault();
+      (target as HTMLElement).click();
+    }
+  };
+
+  const onHandleNextFocus = (event: KeyboardEvent) => {
+    const target = event.target;
+
+    if (Utilities.isFocusableElement(target)) {
+      event.preventDefault();
+
+      const nextFocusable = Utilities.findNextFocusable(target as Element, 'next');
+      if (nextFocusable) {
+        nextFocusable.focus();
+      }
+    }
+  };
+
+  const onHandlePreviousFocus = (event: KeyboardEvent) => {
+    const target = event.target;
+
+    if (Utilities.isFocusableElement(target)) {
+      event.preventDefault();
+
+      const previousFocusable = Utilities.findNextFocusable(target as Element, 'previous');
+      if (previousFocusable) {
+        previousFocusable.focus();
+      }
+    }
+  };
+
+  useHotkeys('ArrowDown', onHandleNextFocus);
+  useHotkeys('ArrowUp', onHandlePreviousFocus);
+  useHotkeys('ArrowRight', onHandleNextFocus);
+  useHotkeys('ArrowLeft', onHandlePreviousFocus);
+  useHotkeys('Enter', onHandleSubmit);
+  useHotkeys(' ', onHandleSubmit);
+};
+
+interface DefaultActionBarProps {
+  items?: {
+    hotkey: string;
+    onClick: () => void;
+    body: React.ReactNode;
+    items?: any;
+  }[];
+}
+
+const DefaultActionBar: React.FC<DefaultActionBarProps> = ({ items = [] }) => {
+  const [isGrid, setGrid] = React.useState(false);
+  useHotkeys('ctrl+g', () => toggleDebugGrid());
+
+  useGlobalNavigationHotkeys();
+
+  return (
+    <div className={styles.root}>
+      <ActionBar
+        items={[
+          {
+            hotkey: '⌃+O',
+            body: 'Fonts',
+            openHotkey: 'ctrl+o',
+            items: [
+              {
+                icon: '⊹',
+                children: 'Commit Mono V143 [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-commit-mono'),
+              },
+              {
+                icon: '⊹',
+                children: 'Departure Mono [MIT]',
+                onClick: () => Utilities.onHandleFontChange('font-use-departure-mono'),
+              },
+              {
+                icon: '⊹',
+                children: 'Fira Code [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-fira-code'),
+              },
+              {
+                icon: '⊹',
+                children: 'Fragment Mono [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-fragment-mono'),
+              },
+              {
+                icon: '⊹',
+                children: 'Geist Mono [OFL] [DEFAULT]',
+                onClick: () => Utilities.onHandleFontChange(''),
+              },
+              {
+                icon: '⊹',
+                children: 'Iosevka Term [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-iosevka-term'),
+              },
+              {
+                icon: '⊹',
+                children: 'JetBrains Mono [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-jet-brains-mono'),
+              },
+              {
+                icon: '⊹',
+                children: 'SFMono Square [FOSS]',
+                onClick: () => Utilities.onHandleFontChange('font-use-sfmono-square'),
+              },
+              {
+                icon: '⊹',
+                children: 'Server Mono 0.0.6 [OFL]',
+                onClick: () => Utilities.onHandleFontChange('font-use-server-mono'),
+              },
+              {
+                icon: '⊹',
+                children: 'TX-02 Berkeley Mono™',
+                onClick: () => Utilities.onHandleFontChange('font-use-berkeley-mono'),
+              },
+            ],
+          },
+          {
+            hotkey: '⌃+T',
+            body: 'Theme',
+            openHotkey: 'ctrl+t',
+            items: [
+              {
+                icon: '⊹',
+                children: 'Refined White [DEFAULT]',
+                onClick: () => Utilities.onHandleThemeChange(''),
+              },
+              {
+                icon: '⊹',
+                children: 'Black Midnight Vapor',
+                onClick: () => Utilities.onHandleThemeChange('theme-dark'),
+              },
+              {
+                icon: '⊹',
+                children: 'U-571 Code Red',
+                onClick: () => Utilities.onHandleThemeChange('theme-black-red'),
+              },
+              {
+                icon: '⊹',
+                children: 'Digital Bioluminescence',
+                onClick: () => Utilities.onHandleThemeChange('theme-black-teal'),
+              },
+              {
+                icon: '⊹',
+                children: 'Operation Safe Blue',
+                onClick: () => Utilities.onHandleThemeChange('theme-blue'),
+              },
+              {
+                icon: '⊹',
+                children: 'Neon Green Garden',
+                onClick: () => Utilities.onHandleThemeChange('theme-green'),
+              },
+              {
+                icon: '⊹',
+                children: 'Kirkland Signature AS/400',
+                onClick: () => Utilities.onHandleThemeChange('theme-black-green'),
+              },
+            ],
+          },
+          {
+            hotkey: '⌃+G',
+            onClick: () => {
+              toggleDebugGrid();
+            },
+            body: 'Grid',
+            selected: false,
+          },
+          ...items,
+        ]}
+      />
+    </div>
+  );
+};
+
+export default DefaultActionBar;
+
+================
+File: reference/components/page/DefaultLayout.module.scss
+================
+.body {
+  width: 100%;
+}
+
+.pixel {
+  height: 1px;
+  left: 0;
+  position: absolute;
+  top: 0;
+  width: 1px;
+}
+
+================
+File: reference/components/page/DefaultLayout.tsx
+================
+import styles from '@components/page/DefaultLayout.module.scss';
+
+import * as React from 'react';
+
+interface DefaultLayoutProps {
+  previewPixelSRC: string;
+  children?: React.ReactNode;
+}
+
+const DefaultLayout: React.FC<DefaultLayoutProps> = ({ previewPixelSRC, children }) => {
+  return (
+    <div className={styles.body}>
+      <img className={styles.pixel} src={previewPixelSRC} alt="" />
+      {children}
+    </div>
+  );
+};
+
+export default DefaultLayout;
+
+================
+File: reference/components/page/ModalContext.tsx
+================
+import * as React from 'react';
+
+export type ModalComponent<P = {}> = React.ComponentType<React.PropsWithoutRef<P>>;
+
+export interface ModalState<P = any> {
+  key: string;
+  component: ModalComponent<P>;
+  props: P;
+}
+
+interface ModalContextType {
+  modalStack: ModalState[];
+  open: <P>(component: ModalComponent<P>, props: P) => string;
+  close: (key?: string) => void;
+}
+
+const ModalContext = React.createContext<ModalContextType | null>(null);
+
+export const ModalProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
+  const [modalStack, setModalStack] = React.useState<ModalState<any>[]>([]);
+
+  const open = <P,>(component: ModalComponent<P>, props: P): string => {
+    const key = `modal-${Date.now()}-${Math.random()}`;
+
+    const newModal: ModalState<P> = { key, component, props };
+
+    setModalStack((prev) => [...prev, newModal as ModalState<any>]);
+
+    return key;
+  };
+
+  const close = (key?: string): void => {
+    setModalStack((prev) =>
+      key ? prev.filter((modal) => modal.key !== key) : prev.slice(0, -1)
+    );
+  };
+
+  return (
+    <ModalContext.Provider value={{ modalStack, open, close }}>
+      {children}
+    </ModalContext.Provider>
+  );
+};
+
+export const useModals = (): ModalContextType => {
+  const context = React.useContext(ModalContext);
+  if (!context) {
+    throw new Error('useModals must be used within a ModalProvider and use client');
+  }
+  return context;
+};
+
+================
+File: reference/components/page/root.module.scss
+================
+.row {
+  border-bottom: 1px solid var(--theme-border);
+}
+
+.column {
+  max-width: 768px;
+  padding: 0 24px 0 24px;
+  margin: 0 auto 0 auto;
+  display: block;
+  border-left: 1px solid var(--theme-border);
+  border-right: 1px solid var(--theme-border);
+}
+
+.video {
+  display: block;
+  width: 100%;
+}
+
+.h1 {
+  display: block;
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+.p {
+  display: block;
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+.aside {
+  display: block;
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+.h2 {
+  display: block;
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+.image {
+  display: block;
+  width: 100%;
+}
+
+================
+File: reference/components/svg/InternetDevelopmentLogo.tsx
+================
+export default function IntDevLogo(props) {
+  return (
+    <svg viewBox="0 0 494.25 80.29" fill="currentColor" aria-hidden {...props}>
+      <path d="m57.8,29.75h0c0,5.34,4.33,9.67,9.67,9.67h38.11c5.34,0,9.67,4.33,9.67,9.67v.54c0,5.34-4.33,9.67-9.67,9.67h-38.11c-5.34,0-9.67,4.33-9.67,9.67v.29c0,5.34-4.33,9.67-9.67,9.67H9.67c-5.34,0-9.67-4.33-9.67-9.67v-.54c0-5.34,4.33-9.67,9.67-9.67h38.11c5.34,0,9.67-4.33,9.67-9.67v-.02c0-5.34-4.33-9.67-9.67-9.67H9.67c-5.34,0-9.67-4.33-9.67-9.67v-.54c0-5.34,4.33-9.67,9.67-9.67h38.11c5.34,0,9.67-4.33,9.67-9.67v-.27c0-5.34,4.33-9.67,9.67-9.67h38.45c5.34,0,9.67,4.33,9.67,9.67v.55c0,5.34-4.33,9.67-9.67,9.67h-38.11c-5.34,0-9.67,4.33-9.67,9.67Z" />
+      <g>
+        <path d="m136.93,75.57l7.21-2.12V5.34l-7.21-2.02V0h26.69v3.32l-7,2.02v68.11l7,2.12v3.37h-26.69v-3.37Z" />
+        <path d="m182.75,14.67v58.88l7.26,2.02v3.37h-19.54v-3.37l7.31-2.02V5.24l-7.31-1.92V0h20.63l31.88,51.37V5.24l-7.31-1.92V0h19.59v3.32l-7.36,1.92v75.06h-4.72L182.75,14.67Z" />
+        <path d="m253.86,75.57l9.59-2.18V5.13h-14.25c-3.52,5.7-5.96,12.44-7.57,18.09h-2.8l2.95-23.22h55.57l3.01,23.22h-2.8c-1.66-5.65-3.89-12.39-7.41-18.09h-14.2v68.27l9.54,2.18v3.37h-31.62v-3.37Z" />
+        <path d="m304.76,75.47l7.1-1.97V5.24l-7.1-1.92V0h21.87c13.94,0,21.98,1.92,28.35,7.46,7.77,6.74,12.7,18.14,12.7,31.98s-5.23,26.75-13.32,33.43c-5.29,4.35-11.04,6.06-20.01,6.06h-29.6v-3.47Zm42.97-8.92c3.89-5.8,5.75-15.08,5.75-27.47s-1.87-20.73-5.81-26.49c-3.52-5.13-8.6-7.41-16.22-7.41h-7.1v62.51c0,4.46,2.23,6.17,8.4,6.17,6.89,0,11.56-2.23,14.98-7.31Z" />
+        <path d="m374.05,75.57l7.05-2.02V5.24l-7.05-1.92V0h48.93l1.5,22.55h-3.01c-1.4-5.55-3.42-11.77-6.22-17.31h-21.67v29.44h11.61c1.76-3.94,2.75-7.98,3.42-11.82h3.01v28.72h-3.01c-.62-3.89-1.76-7.93-3.42-11.77h-11.61v33.8h21.2c3.47-6.22,5.39-12.44,7.36-18.66h3.78l-3.37,24h-48.52v-3.37Z" />
+        <path d="m436.92,9.59c-1.5-4.61-2.9-5.75-8.66-6.27V0h31.72v3.32c-8.03.73-9.12,1.71-7.67,6.79l12.75,44.89.78.05,11.77-40.48c2.07-7.36.36-9.8-8.09-11.25V0h24.73v3.32c-7.77,1.55-9.17,3.32-11.61,11.4l-19.85,65.31h-3.21l-22.65-70.44Z" />
+      </g>
+    </svg>
+  );
+}
+
+================
+File: reference/components/svg/InternetDevelopmentLogoMark.tsx
+================
+export default function LogoMark(props) {
+  return (
+    <svg viewBox="0 0 116.29 80.29" fill="currentColor" aria-hidden {...props}>
+      <path d="m57.8,29.75h0c0,5.34,4.33,9.67,9.67,9.67h38.11c5.34,0,9.67,4.33,9.67,9.67v.54c0,5.34-4.33,9.67-9.67,9.67h-38.11c-5.34,0-9.67,4.33-9.67,9.67v.29c0,5.34-4.33,9.67-9.67,9.67H9.67c-5.34,0-9.67-4.33-9.67-9.67v-.54c0-5.34,4.33-9.67,9.67-9.67h38.11c5.34,0,9.67-4.33,9.67-9.67v-.02c0-5.34-4.33-9.67-9.67-9.67H9.67c-5.34,0-9.67-4.33-9.67-9.67v-.54c0-5.34,4.33-9.67,9.67-9.67h38.11c5.34,0,9.67-4.33,9.67-9.67v-.27c0-5.34,4.33-9.67,9.67-9.67h38.45c5.34,0,9.67,4.33,9.67,9.67v.55c0,5.34-4.33,9.67-9.67,9.67h-38.11c-5.34,0-9.67,4.33-9.67,9.67Z" />
+    </svg>
+  );
+}
+
+================
+File: reference/components/svg/Sphere.tsx
+================
+import * as React from 'react';
+
+export default function Sphere(props: { size?: number; segments?: number; style?: React.CSSProperties }) {
+  const size = props.size || 500;
+  const segments = props.segments || 6;
+  const radius = size * 0.4;
+
+  const generateSpherePoints = () => {
+    const points: { x: number; y: number }[][] = [];
+    for (let lat = 0; lat <= segments; lat++) {
+      const row: { x: number; y: number }[] = [];
+      const phi = (lat * Math.PI) / segments;
+      for (let lon = 0; lon <= segments; lon++) {
+        const theta = (lon * 2 * Math.PI) / segments;
+        const x = radius * Math.sin(phi) * Math.cos(theta);
+        const y = radius * Math.cos(phi);
+        const z = radius * Math.sin(phi) * Math.sin(theta);
+        const scale = 1 + z / (radius * 4);
+        row.push({
+          x: size / 2 + x * scale,
+          y: size / 2 + y * scale,
+        });
+      }
+      points.push(row);
+    }
+    return points;
+  };
+
+  const createPaths = () => {
+    const spherePoints = generateSpherePoints();
+    const paths: string[] = [];
+    for (let lat = 0; lat <= segments; lat++) {
+      let pathString = `M ${spherePoints[lat][0].x},${spherePoints[lat][0].y}`;
+      for (let lon = 1; lon <= segments; lon++) {
+        pathString += ` L ${spherePoints[lat][lon].x},${spherePoints[lat][lon].y}`;
+      }
+      paths.push(pathString);
+    }
+    for (let lon = 0; lon <= segments; lon++) {
+      let pathString = `M ${spherePoints[0][lon].x},${spherePoints[0][lon].y}`;
+      for (let lat = 1; lat <= segments; lat++) {
+        pathString += ` L ${spherePoints[lat][lon].x},${spherePoints[lat][lon].y}`;
+      }
+      paths.push(pathString);
+    }
+    return paths;
+  };
+
+  return (
+    <svg viewBox={`0 0 ${size} ${size}`} xmlns="http://www.w3.org/2000/svg" style={props.style}>
+      <g fill="none" stroke="currentColor" strokeWidth="1">
+        {createPaths().map((path, index) => (
+          <path key={index} d={path} vectorEffect="non-scaling-stroke" />
+        ))}
+      </g>
+    </svg>
+  );
+}
+
+================
+File: reference/components/Accordion.module.scss
+================
+.flex {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+  padding: calc(var(--theme-line-height-base) * 1rem) 0 calc(var(--theme-line-height-base) * 1rem) 0;
+
+  background: var(--theme-border-subdued);
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.icon {
+  flex-shrink: 0;
+  user-select: none;
+  cursor: pointer;
+  font-size: var(--font-size);
+  align-self: stretch;
+}
+
+.content {
+  min-width: 10%;
+  width: 100%;
+  user-select: none;
+  cursor: pointer;
+  transition: 200ms ease all;
+  transition-property: padding;
+  padding-left: 0ch;
+}
+
+.active {
+  .content {
+    padding-left: 1ch;
+  }
+
+  .icon {
+  }
+}
+
+================
+File: reference/components/Accordion.tsx
+================
+'use client';
+
+import styles from '@components/Accordion.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import Row from '@components/Row';
+
+interface AccordionProps {
+  defaultValue?: boolean;
+  title: string;
+  children?: React.ReactNode;
+}
+
+const Accordion: React.FC<AccordionProps> = ({ defaultValue = false, title, children }) => {
+  const [show, setShow] = React.useState<boolean>(defaultValue);
+  const accordionRef = React.useRef<HTMLDivElement | null>(null);
+
+  const toggleShow = (): void => {
+    setShow((prevShow) => !prevShow);
+  };
+
+  return (
+    <>
+      <Row ref={accordionRef} tabIndex={0} role="button" onClick={toggleShow} aria-expanded={show}>
+        <div className={Utilities.classNames(styles.flex, show ? styles.active : undefined)}>
+          <span className={styles.icon}>{show ? '▾' : '▸'}</span>
+          <span className={styles.content}>{title}</span>
+        </div>
+      </Row>
+      {show && <Row style={{ paddingLeft: '2ch' }}>{children}</Row>}
+    </>
+  );
+};
+
+export default Accordion;
+
+================
+File: reference/components/ActionBar.module.scss
+================
+.root {
+  background: var(--theme-background);
+  box-shadow: inset 0 0 0 1px var(--theme-border);
+}
+
+================
+File: reference/components/ActionBar.tsx
+================
+import styles from '@components/ActionBar.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import ButtonGroup from '@components/ButtonGroup';
+
+interface ActionBarItem {
+  hotkey?: string;
+  onClick?: () => void;
+  openHotkey?: string;
+  selected?: boolean;
+  body: React.ReactNode;
+  items?: any;
+}
+
+interface ActionBarProps {
+  items: ActionBarItem[];
+}
+
+const ActionBar: React.FC<ActionBarProps> = ({ items }) => {
+  return (
+    <div className={styles.root}>
+      <ButtonGroup items={items} />
+    </div>
+  );
+};
+
+export default ActionBar;
+
+================
+File: reference/components/ActionButton.module.scss
+================
+.hotkey {
+  background: var(--theme-button-foreground);
+  color: var(--theme-text);
+  cursor: pointer;
+  flex-shrink: 0;
+  font-weight: 400;
+  padding: 0 1ch 0 1ch;
+  text-indent: 0ch;
+  user-select: none;
+}
+
+.content {
+  background: var(--theme-button-background);
+  box-shadow: inset 0 0 0 2px var(--theme-button-foreground);
+  cursor: pointer;
+  flex-shrink: 0;
+  font-weight: 400;
+  padding: 0 1ch 0 1ch;
+  text-indent: 0ch;
+  text-transform: uppercase;
+  user-select: none;
+}
+
+.root {
+  display: inline-flex;
+  align-items: center;
+  justify-content: space-between;
+  cursor: pointer;
+  outline: 0;
+  border: 0;
+  margin: 0;
+  padding: 0;
+  box-sizing: border-box;
+  font-family: var(--font-family-mono);
+  font-size: var(--font-size);
+  flex-shrink: 0;
+
+  &:hover .hotkey {
+    background: var(--theme-focused-foreground);
+  }
+
+  &:hover .content {
+    box-shadow: inset 0 0 0 2px var(--theme-focused-foreground);
+  }
+
+  &:focus .hotkey {
+    background: var(--theme-focused-foreground);
+  }
+
+  &:focus .content {
+    box-shadow: inset 0 0 0 2px var(--theme-focused-foreground);
+  }
+}
+
+.selected {
+  .content {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/ActionButton.tsx
+================
+import styles from '@components/ActionButton.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface ActionButtonProps {
+  onClick?: () => void;
+  hotkey?: any;
+  children?: React.ReactNode;
+  style?: any;
+  rootStyle?: any;
+  isSelected?: boolean;
+}
+
+const ActionButton = React.forwardRef<HTMLDivElement, ActionButtonProps>(({ onClick, hotkey, children, style, rootStyle, isSelected }, ref) => {
+  return (
+    <div className={Utilities.classNames(styles.root, isSelected ? styles.selected : null)} style={rootStyle} onClick={onClick} tabIndex={0} ref={ref} role="button">
+      {Utilities.isEmpty(hotkey) ? null : <span className={styles.hotkey}>{hotkey}</span>}
+      <span className={styles.content} style={style}>
+        {children}
+      </span>
+    </div>
+  );
+});
+
+ActionButton.displayName = 'ActionButton';
+
+export default ActionButton;
+
+================
+File: reference/components/ActionListItem.module.scss
+================
+.item {
+  align-items: flex-start;
+  background: transparent;
+  color: var(--theme-text);
+  cursor: pointer;
+  display: flex;
+  justify-content: space-between;
+  outline: 0;
+  border: 0;
+  text-decoration: none;
+
+  &:visited {
+    background: transparent;
+    color: var(--theme-text);
+  }
+
+  &:hover {
+    background: transparent;
+    color: var(--theme-text);
+  }
+
+  &:hover .icon {
+    background: var(--theme-focused-foreground);
+  }
+
+  &:focus .icon {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.icon {
+  align-items: center;
+  background: var(--theme-button-foreground);
+  display: inline-flex;
+  flex-shrink: 0;
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  justify-content: center;
+  width: 3ch;
+  user-select: none;
+}
+
+.text {
+  align-items: center;
+  align-self: stretch;
+  background: var(--theme-button-background);
+  display: inline-flex;
+  justify-content: flex-start;
+  min-width: 10%;
+  padding: 0 1ch 0 1ch;
+  user-select: none;
+  width: 100%;
+}
+
+================
+File: reference/components/ActionListItem.tsx
+================
+import styles from '@components/ActionListItem.module.scss';
+
+import * as React from 'react';
+
+interface ActionListItemProps {
+  style?: React.CSSProperties;
+  icon?: React.ReactNode;
+  children?: React.ReactNode;
+  href?: string;
+  target?: string;
+  onClick?: React.MouseEventHandler<HTMLDivElement | HTMLAnchorElement>;
+}
+
+const ActionListItem: React.FC<ActionListItemProps> = (props) => {
+  const { href, target, onClick, children, icon, style } = props;
+
+  if (href) {
+    return (
+      <a className={styles.item} href={href} target={target} style={style} tabIndex={0} role="link">
+        <figure className={styles.icon}>{icon}</figure>
+        <span className={styles.text}>{children}</span>
+      </a>
+    );
+  }
+
+  return (
+    <div className={styles.item} onClick={onClick} style={style} tabIndex={0} role="button">
+      <figure className={styles.icon}>{icon}</figure>
+      <span className={styles.text}>{children}</span>
+    </div>
+  );
+};
+
+export default ActionListItem;
+
+================
+File: reference/components/AlertBanner.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border);
+  box-shadow: 1ch 1ch 0 0 var(--theme-border-subdued);
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  font-weight: 400;
+}
+
+================
+File: reference/components/AlertBanner.tsx
+================
+import styles from '@components/AlertBanner.module.scss';
+
+import * as React from 'react';
+
+interface AlertBannerProps {
+  style?: any;
+  children?: any;
+}
+
+const AlertBanner: React.FC<AlertBannerProps> = ({ style: propStyle, ...rest }) => {
+  let style: React.CSSProperties = { ...propStyle };
+
+  return <div className={styles.root} {...rest} style={style} />;
+};
+
+export default AlertBanner;
+
+================
+File: reference/components/Avatar.module.scss
+================
+.parent {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+}
+
+.placeholder {
+  background: var(--theme-border);
+  display: inline-block;
+  width: 4ch;
+  height: calc(var(--font-size) * var(--theme-line-height-base) * 2);
+  vertical-align: bottom;
+  flex-shrink: 0;
+  position: relative;
+
+  &:hover {
+    &::before {
+      content: '';
+      top: 0;
+      left: 0;
+      right: 0;
+      bottom: 0;
+      position: absolute;
+      pointer-events: none;
+      opacity: 0.5;
+      background: var(--theme-focused-foreground);
+    }
+  }
+}
+
+.root {
+  background: unset;
+  background-size: cover;
+  background-position: 50% 50%;
+  background-repeat: no-repeat;
+  display: inline-block;
+  width: 4ch;
+  height: calc(var(--font-size) * var(--theme-line-height-base) * 2);
+  vertical-align: bottom;
+  flex-shrink: 0;
+  position: relative;
+
+  &:hover {
+    background: unset;
+    background-size: cover;
+    background-position: 50% 50%;
+    background-repeat: no-repeat;
+    &::before {
+      content: '';
+      top: 0;
+      left: 0;
+      right: 0;
+      bottom: 0;
+      position: absolute;
+      pointer-events: none;
+      opacity: 0.5;
+      background: var(--theme-focused-foreground);
+    }
+  }
+}
+
+a {
+  &.root {
+    background: unset;
+    background-size: cover;
+    background-position: 50% 50%;
+    background-repeat: no-repeat;
+    display: inline-block;
+    width: 4ch;
+    height: calc(var(--font-size) * var(--theme-line-height-base) * 2);
+    vertical-align: bottom;
+    flex-shrink: 0;
+    position: relative;
+
+    &:hover {
+      background: unset;
+      background-size: cover;
+      background-position: 50% 50%;
+      background-repeat: no-repeat;
+      &::before {
+        content: '';
+        top: 0;
+        left: 0;
+        right: 0;
+        bottom: 0;
+        position: absolute;
+        pointer-events: none;
+        opacity: 0.5;
+        background: var(--theme-focused-foreground);
+      }
+    }
+
+    &:focus {
+      background: unset;
+      background-size: cover;
+      background-position: 50% 50%;
+      background-repeat: no-repeat;
+      outline: 0;
+
+      &::before {
+        content: '';
+        top: 0;
+        left: 0;
+        right: 0;
+        bottom: 0;
+        position: absolute;
+        pointer-events: none;
+        opacity: 0.5;
+        background: var(--theme-focused-foreground);
+      }
+    }
+  }
+}
+
+.right {
+  min-width: 10%;
+  width: 100%;
+  background: var(--theme-foreground);
+}
+
+================
+File: reference/components/Avatar.tsx
+================
+import styles from '@components/Avatar.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface AvatarProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'style' | 'className' | 'children'> {
+  src?: string;
+  href?: string;
+  target?: string;
+  style?: React.CSSProperties;
+  children?: React.ReactNode;
+}
+
+const Avatar: React.FC<AvatarProps> = (props) => {
+  const { src, style: propStyle, href, target, children, ...rest } = props;
+
+  const backgroundStyle = src ? { backgroundImage: `url(${src})` } : {};
+
+  const combinedStyle = { ...propStyle, ...backgroundStyle };
+
+  let avatarElement: React.ReactElement;
+
+  if (href) {
+    avatarElement = <a className={Utilities.classNames(src ? styles.root : styles.placeholder)} style={combinedStyle} href={href} target={target} tabIndex={0} role="link" />;
+  } else {
+    avatarElement = <figure className={Utilities.classNames(src ? styles.root : styles.placeholder)} style={combinedStyle} />;
+  }
+
+  if (!children) {
+    return avatarElement;
+  }
+
+  return (
+    <div className={styles.parent} {...rest}>
+      {avatarElement}
+      <span className={styles.right}>{children}</span>
+    </div>
+  );
+};
+
+export default Avatar;
+
+================
+File: reference/components/Badge.module.scss
+================
+.root {
+  display: inline-block;
+  vertical-align: top;
+  text-align: center;
+  font-weight: 400;
+  margin: 0;
+  outline: 0;
+  border: 0;
+  font-family: var(--font-family-mono);
+  min-height: calc(var(--theme-line-height-base) * var(--font-size));
+  text-transform: uppercase;
+  transition: 200ms ease all;
+  background: var(--theme-border);
+  padding: 0 1ch 0 1ch;
+}
+
+================
+File: reference/components/Badge.tsx
+================
+'use client';
+
+import styles from '@components/Badge.module.scss';
+
+import * as React from 'react';
+
+interface BadgeProps extends React.HTMLAttributes<HTMLSpanElement> {
+  children?: React.ReactNode;
+}
+
+const Badge: React.FC<BadgeProps> = ({ children, ...rest }) => {
+  return (
+    <span className={styles.root} {...rest}>
+      {children}
+    </span>
+  );
+};
+
+export default Badge;
+
+================
+File: reference/components/BarLoader.module.scss
+================
+.root {
+  background: var(--theme-border);
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  white-space: nowrap;
+  text-align: left;
+  vertical-align: bottom;
+  display: block;
+}
+
+.bar {
+  background: linear-gradient(to right, transparent, var(--theme-text));
+  height: 100%;
+  width: 0%;
+  transition: width 0.1s linear;
+}
+
+================
+File: reference/components/BarLoader.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+import styles from '@components/BarLoader.module.scss';
+
+interface BarLoaderProps {
+  intervalRate?: number;
+  progress?: number;
+}
+
+const BarLoader: React.FC<BarLoaderProps> = ({ intervalRate, progress }) => {
+  const [currentProgress, setCurrentProgress] = React.useState<number>(progress || 0);
+
+  React.useEffect(() => {
+    if (progress !== undefined) {
+      setCurrentProgress(progress);
+      return;
+    }
+
+    if (!intervalRate) return;
+
+    const interval = setInterval(() => {
+      setCurrentProgress((prev) => (prev + 10) % 110);
+    }, intervalRate);
+
+    return () => clearInterval(interval);
+  }, [intervalRate, progress]);
+
+  return (
+    <div className={styles.root}>
+      <div
+        className={styles.bar}
+        style={{
+          width: `${Math.min(currentProgress, 100)}%`,
+        }}
+      ></div>
+    </div>
+  );
+};
+
+export default BarLoader;
+
+================
+File: reference/components/BarProgress.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border-subdued);
+  white-space: nowrap;
+  text-align: left;
+  vertical-align: bottom;
+  overflow: hidden;
+  position: relative;
+}
+
+.measure {
+  visibility: hidden;
+  position: absolute;
+  pointer-events: none;
+}
+
+================
+File: reference/components/BarProgress.tsx
+================
+'use client';
+
+import styles from '@components/BarProgress.module.scss';
+
+import * as React from 'react';
+
+interface BarProgressProps {
+  intervalRate?: number;
+  progress?: number;
+  fillChar?: string;
+}
+
+const BarProgress: React.FC<BarProgressProps> = ({ intervalRate, progress, fillChar = '░' }) => {
+  const [currentProgress, setCurrentProgress] = React.useState(progress ?? 0);
+  const [containerWidth, setContainerWidth] = React.useState(0);
+  const [charWidth, setCharWidth] = React.useState(0);
+
+  const containerRef = React.useRef<HTMLDivElement>(null);
+  const measureRef = React.useRef<HTMLSpanElement>(null);
+
+  React.useEffect(() => {
+    if (typeof progress === 'number') {
+      setCurrentProgress(progress);
+      return;
+    }
+    if (!intervalRate) return;
+    const interval = setInterval(() => {
+      setCurrentProgress((prev) => (prev + 10) % 110);
+    }, intervalRate);
+    return () => clearInterval(interval);
+  }, [intervalRate, progress]);
+
+  React.useLayoutEffect(() => {
+    if (!measureRef.current) return;
+    const rect = measureRef.current.getBoundingClientRect();
+    if (rect.width > 0) {
+      setCharWidth(rect.width);
+    } else {
+      requestAnimationFrame(() => {
+        const retryRect = measureRef.current?.getBoundingClientRect();
+        if (retryRect && retryRect.width > 0) {
+          setCharWidth(retryRect.width);
+        }
+      });
+    }
+  }, [fillChar]);
+
+  React.useEffect(() => {
+    if (!containerRef.current) return;
+    const observer = new ResizeObserver((entries) => {
+      for (const entry of entries) {
+        const { width } = entry.contentRect;
+        setContainerWidth(width);
+      }
+    });
+    observer.observe(containerRef.current);
+    return () => observer.disconnect();
+  }, []);
+
+  const cappedProgress = Math.min(currentProgress, 100);
+
+  let maxChars = 10;
+  if (charWidth > 0 && containerWidth > 0) {
+    maxChars = Math.max(1, Math.floor(containerWidth / charWidth));
+  }
+
+  const filledChars = Math.round((cappedProgress / 100) * maxChars);
+  const barStr = fillChar.repeat(filledChars);
+
+  return (
+    <div className={styles.root} ref={containerRef} aria-valuenow={cappedProgress} aria-valuemin={0} aria-valuemax={100} role="progressbar">
+      <span ref={measureRef} className={styles.measure}>
+        {fillChar}
+      </span>
+      {barStr}
+    </div>
+  );
+};
+
+export default BarProgress;
+
+================
+File: reference/components/Block.module.scss
+================
+.block {
+  display: inline-block;
+  width: 1ch;
+  background: var(--theme-text);
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  vertical-align: bottom;
+  flex-shrink: 0;
+}
+
+================
+File: reference/components/Block.tsx
+================
+import styles from '@components/Block.module.scss';
+
+import * as React from 'react';
+
+interface BlockProps extends React.HTMLAttributes<HTMLSpanElement> {
+  children?: React.ReactNode;
+}
+
+const Block: React.FC<BlockProps> = ({ children, ...rest }) => {
+  return (
+    <span className={styles.block} {...rest}>
+      {children}
+    </span>
+  );
+};
+
+export default Block;
+
+================
+File: reference/components/BlockLoader.module.scss
+================
+.root {
+  display: inline-block;
+  width: 1ch;
+  color: inherit;
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  vertical-align: bottom;
+}
+
+================
+File: reference/components/BlockLoader.tsx
+================
+'use client';
+
+import styles from '@components/BlockLoader.module.scss';
+
+import * as React from 'react';
+
+const SEQUENCES = [
+  ['⠁', '⠂', '⠄', '⡀', '⢀', '⠠', '⠐', '⠈'],
+  ['⣾', '⣽', '⣻', '⢿', '⡿', '⣟', '⣯', '⣷'],
+  ['▖', '▘', '▝', '▗'],
+  ['▁', '▂', '▃', '▄', '▅', '▆', '▇', '█', '▇', '▆', '▅', '▄', '▃', '▁'],
+  ['▉', '▊', '▋', '▌', '▍', '▎', '▏', '▎', '▍', '▌', '▋', '▊', '▉'],
+  ['←', '↖', '↑', '↗', '→', '↘', '↓', '↙'],
+  ['┤', '┘', '┴', '└', '├', '┌', '┬', '┐'],
+  ['◢', '◣', '◤', '◥'],
+  ['◰', '◳', '◲', '◱'],
+  ['◴', '◷', '◶', '◵'],
+  ['◐', '◓', '◑', '◒'],
+];
+
+interface BlockLoaderProps extends Omit<React.HTMLAttributes<HTMLSpanElement>, 'children'> {
+  mode?: number;
+}
+
+const BlockLoader: React.FC<BlockLoaderProps> = ({ mode = 0 }) => {
+  if (!SEQUENCES[mode]) {
+    return <span className={styles.block}>�</span>;
+  }
+
+  const [index, setIndex] = React.useState(0);
+  const intervalRef = React.useRef<number | null>(null);
+  const indexLength = SEQUENCES[mode].length;
+
+  React.useEffect(() => {
+    if (intervalRef.current) {
+      clearInterval(intervalRef.current);
+    }
+
+    intervalRef.current = window.setInterval(() => {
+      setIndex((prevIndex) => (prevIndex + 1) % indexLength);
+    }, 100);
+
+    return () => {
+      if (intervalRef.current) {
+        clearInterval(intervalRef.current);
+      }
+    };
+  }, [indexLength]);
+
+  return <span className={styles.root}>{SEQUENCES[mode][index]}</span>;
+};
+
+export default BlockLoader;
+
+================
+File: reference/components/BreadCrumbs.module.scss
+================
+.root {
+  display: inline-block;
+}
+
+.line {
+  display: inline-block;
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+}
+
+.link {
+  display: inline-block;
+  color: var(--theme-text);
+  outline: 0;
+  border: 0;
+  text-decoration: none;
+  background: var(--theme-border);
+
+  &:hover {
+    color: var(--theme-text);
+    background: var(--theme-focused-foreground);
+  }
+  
+  &:visited {
+    color: var(--theme-text);
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.symbol {
+  min-width: 1ch;
+  display: inline-block;
+  margin: 0 1ch 0 1ch;
+}
+
+================
+File: reference/components/BreadCrumbs.tsx
+================
+import styles from '@components/BreadCrumbs.module.scss';
+
+import * as React from 'react';
+
+interface BreadCrumbsItem {
+  url?: string;
+  name: string;
+}
+
+interface BreadCrumbsProps {
+  items: BreadCrumbsItem[];
+}
+
+const BreadCrumbs: React.FC<BreadCrumbsProps> = ({ items }) => {
+  return (
+    <nav aria-label="breadcrumb" className={styles.root}>
+      {items.map((item, index) => {
+        const linkElement = (
+          <a className={styles.link} href={item.url} target="_blank" tabIndex={0} role="link">
+            {item.name}
+          </a>
+        );
+
+        return (
+          <span className={styles.line} key={index}>
+            {index === items.length - 1 ? <span>{linkElement}</span> : linkElement}
+            {index < items.length - 1 && <span className={styles.symbol}> ❯ </span>}
+          </span>
+        );
+      })}
+    </nav>
+  );
+};
+
+export default BreadCrumbs;
+
+================
+File: reference/components/Button.module.scss
+================
+.root {
+  vertical-align: top;
+  display: inline-block;
+  font-weight: 400;
+  text-align: center;
+  margin: 0;
+  outline: 0;
+  border: 0;
+  font-family: var(--font-family-mono);
+  width: 100%;
+  font-size: var(--font-size);
+  line-height: calc(var(--theme-line-height-base) * 2em);
+  min-height: calc(var(--theme-line-height-base) * (var(--font-size) * 2));
+  padding: 0 2ch 0 2ch;
+  text-transform: uppercase;
+  letter-spacing: 1px;
+  transition: 200ms ease all;
+}
+
+.primary {
+  background: var(--theme-button);
+  color: var(--theme-button-text);
+  cursor: pointer;
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.secondary {
+  background: var(--theme-background);
+  color: var(--theme-text);
+  box-shadow: inset 0 0 0 1px var(--theme-border);
+  cursor: pointer;
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+    box-shadow: inset 0 0 0 1px transparent;
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    box-shadow: inset 0 0 0 1px transparent;
+  }
+}
+
+.disabled {
+  background: var(--theme-button-background);
+  color: var(--theme-button-foreground);
+  cursor: not-allowed;
+}
+
+================
+File: reference/components/Button.tsx
+================
+'use client';
+
+import styles from '@components/Button.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
+  theme?: 'PRIMARY' | 'SECONDARY';
+  isDisabled?: boolean;
+  children?: React.ReactNode;
+}
+
+const Button: React.FC<ButtonProps> = ({ theme = 'PRIMARY', isDisabled, children, ...rest }) => {
+  let classNames = Utilities.classNames(styles.root, styles.primary);
+
+  if (theme === 'SECONDARY') {
+    classNames = Utilities.classNames(styles.root, styles.secondary);
+  }
+
+  if (isDisabled) {
+    classNames = Utilities.classNames(styles.root, styles.disabled);
+
+    return <div className={classNames}>{children}</div>;
+  }
+
+  return (
+    <button className={classNames} role="button" tabIndex={0} disabled={isDisabled} {...rest}>
+      {children}
+    </button>
+  );
+};
+
+export default Button;
+
+================
+File: reference/components/ButtonGroup.module.scss
+================
+.root {
+}
+
+.full {
+  display: grid;
+  grid-template-columns: repeat(auto-fit, minmax(60px, 1fr));
+  white-space: nowrap;
+}
+
+================
+File: reference/components/ButtonGroup.tsx
+================
+'use client';
+
+import styles from '@components/ButtonGroup.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import ActionButton from '@components/ActionButton';
+import DropdownMenuTrigger from '@components/DropdownMenuTrigger';
+
+const ButtonGroup = (props) => {
+  if (!props.items) {
+    return null;
+  }
+
+  return (
+    <div className={Utilities.classNames(styles.root, props.isFull ? styles.full : null)}>
+      {props.items.map((each) => {
+        if (each.items) {
+          return (
+            <DropdownMenuTrigger key={each.body} items={each.items} hotkey={each.openHotkey}>
+              <ActionButton hotkey={each.hotkey} isSelected={each.selected}>
+                {each.body}
+              </ActionButton>
+            </DropdownMenuTrigger>
+          );
+        }
+
+        return (
+          <ActionButton key={each.body} onClick={each.onClick} hotkey={each.hotkey} isSelected={each.selected}>
+            {each.body}
+          </ActionButton>
+        );
+      })}
+    </div>
+  );
+};
+
+export default ButtonGroup;
+
+================
+File: reference/components/Canvas.module.scss
+================
+.canvas {
+  grid-row-start: 1;
+  grid-column-start: 1;
+  margin: 0;
+  padding: 0;
+  width: 100%;
+  min-height: 100%;
+  max-height: 288px;
+}
+
+================
+File: reference/components/Canvas.tsx
+================
+'use client';
+
+import styles from '@components/Canvas.module.scss';
+
+import * as React from 'react';
+
+type WebGLContextResult = {
+  gl: WebGLRenderingContext | WebGL2RenderingContext;
+  ext: {
+    internalFormat: number;
+    internalFormatRG: number;
+    formatRG: number;
+    texType: number;
+  };
+  support_linear_float: boolean | null;
+};
+
+var config = {
+  TEXTURE_DOWNSAMPLE: 1,
+  DENSITY_DISSIPATION: 0.991,
+  VELOCITY_DISSIPATION: 0.9992,
+  PRESSURE_DISSIPATION: 0.8,
+  PRESSURE_ITERATIONS: 16,
+  CURL: 12,
+  SPLAT_RADIUS: 0.12,
+  SPEED: 0.01,
+};
+
+export default function BlueCanvasComponent(props) {
+  const canvasRef = React.useRef<HTMLCanvasElement>(null);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    canvas.width = canvas.clientWidth;
+    canvas.height = canvas.clientHeight;
+
+    let splatStack: any[] = [];
+
+    const { gl, ext, support_linear_float } = getWebGLContext(canvas);
+
+    function getWebGLContext(canvas: HTMLCanvasElement): WebGLContextResult {
+      const params = {
+        alpha: false,
+        depth: false,
+        stencil: false,
+        antialias: true,
+      };
+
+      let gl: WebGLRenderingContext | WebGL2RenderingContext | null = canvas.getContext('webgl2', params) as WebGL2RenderingContext | null;
+
+      const isWebGL2 = !!gl;
+
+      if (!isWebGL2) {
+        gl = (canvas.getContext('webgl', params) || canvas.getContext('experimental-webgl', params)) as WebGLRenderingContext | null;
+      }
+
+      if (!gl) throw new Error('WebGL not supported');
+
+      const halfFloat = gl.getExtension('OES_texture_half_float');
+      let support_linear_float = gl.getExtension('OES_texture_half_float_linear');
+
+      if (isWebGL2) {
+        gl.getExtension('EXT_color_buffer_float');
+        support_linear_float = gl.getExtension('OES_texture_float_linear');
+      }
+
+      const internalFormat = isWebGL2 ? (gl as WebGL2RenderingContext).RGBA16F : gl.RGBA;
+      const internalFormatRG = isWebGL2 ? (gl as WebGL2RenderingContext).RG16F : gl.RGBA;
+      const formatRG = isWebGL2 ? (gl as WebGL2RenderingContext).RG : gl.RGBA;
+      const texType = isWebGL2 ? (gl as WebGL2RenderingContext).HALF_FLOAT : halfFloat?.HALF_FLOAT_OES || gl.UNSIGNED_BYTE;
+
+      return {
+        gl: gl as WebGLRenderingContext,
+        ext: {
+          internalFormat,
+          internalFormatRG,
+          formatRG,
+          texType,
+        },
+        support_linear_float: !!support_linear_float,
+      };
+    }
+
+    class GLProgram {
+      program: WebGLProgram;
+      uniforms: { [key: string]: WebGLUniformLocation | null };
+
+      constructor(vertexShader: WebGLShader, fragmentShader: WebGLShader) {
+        this.uniforms = {};
+        this.program = gl.createProgram()!;
+
+        gl.attachShader(this.program, vertexShader);
+        gl.attachShader(this.program, fragmentShader);
+        gl.linkProgram(this.program);
+
+        if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {
+          throw new Error(gl.getProgramInfoLog(this.program) || 'Program failed to link');
+        }
+
+        const uniformCount = gl.getProgramParameter(this.program, gl.ACTIVE_UNIFORMS);
+        for (let i = 0; i < uniformCount; i++) {
+          const uniformName = gl.getActiveUniform(this.program, i)!.name;
+          this.uniforms[uniformName] = gl.getUniformLocation(this.program, uniformName);
+        }
+      }
+
+      bind() {
+        gl.useProgram(this.program);
+      }
+    }
+
+    function compileShader(type: number, source: string): WebGLShader {
+      const shader = gl.createShader(type)!;
+      gl.shaderSource(shader, source);
+      gl.compileShader(shader);
+
+      if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
+        throw new Error(gl.getShaderInfoLog(shader) || 'Shader compilation failed');
+      }
+
+      return shader;
+    }
+
+    var baseVertexShader = compileShader(gl.VERTEX_SHADER, 'precision highp float; precision mediump sampler2D; attribute vec2 aPosition; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform vec2 texelSize; void main () {     vUv = aPosition * 0.5 + 0.5;     vL = vUv - vec2(texelSize.x, 0.0);     vR = vUv + vec2(texelSize.x, 0.0);     vT = vUv + vec2(0.0, texelSize.y);     vB = vUv - vec2(0.0, texelSize.y);     gl_Position = vec4(aPosition, 0.0, 1.0); }');
+    var clearShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; uniform sampler2D uTexture; uniform float value; void main () {     gl_FragColor = value * texture2D(uTexture, vUv); }');
+    var displayShader = compileShader(
+      gl.FRAGMENT_SHADER,
+      `
+  precision highp float;
+  precision mediump sampler2D;
+  varying vec2 vUv;
+  uniform sampler2D uTexture;
+  void main () {
+    float density = texture2D(uTexture, vUv).r;
+    vec3 splatColor = vec3(1.0, 1.0, 1.0);
+    vec3 backgroundColor = vec3(0.8, 0.8, 0.8);
+    vec3 color = mix(backgroundColor, splatColor, density);
+    gl_FragColor = vec4(color, 1.0);
+  }
+  `
+    );
+    var splatShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; uniform sampler2D uTarget; uniform float aspectRatio; uniform vec3 color; uniform vec2 point; uniform float radius; void main () {     vec2 p = vUv - point.xy;     p.x *= aspectRatio;     vec3 splat = exp(-dot(p, p) / radius) * color;     vec3 base = texture2D(uTarget, vUv).xyz;     gl_FragColor = vec4(base + splat, 1.0); }');
+    var advectionManualFilteringShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; uniform sampler2D uVelocity; uniform sampler2D uSource; uniform vec2 texelSize; uniform float dt; uniform float dissipation; vec4 bilerp (in sampler2D sam, in vec2 p) {     vec4 st;     st.xy = floor(p - 0.5) + 0.5;     st.zw = st.xy + 1.0;     vec4 uv = st * texelSize.xyxy;     vec4 a = texture2D(sam, uv.xy);     vec4 b = texture2D(sam, uv.zy);     vec4 c = texture2D(sam, uv.xw);     vec4 d = texture2D(sam, uv.zw);     vec2 f = p - st.xy;     return mix(mix(a, b, f.x), mix(c, d, f.x), f.y); } void main () {     vec2 coord = gl_FragCoord.xy - dt * texture2D(uVelocity, vUv).xy;     gl_FragColor = dissipation * bilerp(uSource, coord);     gl_FragColor.a = 1.0; }');
+    var advectionShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; uniform sampler2D uVelocity; uniform sampler2D uSource; uniform vec2 texelSize; uniform float dt; uniform float dissipation; void main () {     vec2 coord = vUv - dt * texture2D(uVelocity, vUv).xy * texelSize;     gl_FragColor = dissipation * texture2D(uSource, coord); }');
+    var divergenceShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform sampler2D uVelocity; vec2 sampleVelocity (in vec2 uv) {     vec2 multiplier = vec2(1.0, 1.0);     if (uv.x < 0.0) { uv.x = 0.0; multiplier.x = -1.0; }     if (uv.x > 1.0) { uv.x = 1.0; multiplier.x = -1.0; }     if (uv.y < 0.0) { uv.y = 0.0; multiplier.y = -1.0; }     if (uv.y > 1.0) { uv.y = 1.0; multiplier.y = -1.0; }     return multiplier * texture2D(uVelocity, uv).xy; } void main () {     float L = sampleVelocity(vL).x;     float R = sampleVelocity(vR).x;     float T = sampleVelocity(vT).y;     float B = sampleVelocity(vB).y;     float div = 0.5 * (R - L + T - B);     gl_FragColor = vec4(div, 0.0, 0.0, 1.0); }');
+    var curlShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform sampler2D uVelocity; void main () {     float L = texture2D(uVelocity, vL).y;     float R = texture2D(uVelocity, vR).y;     float T = texture2D(uVelocity, vT).x;     float B = texture2D(uVelocity, vB).x;     float vorticity = R - L - T + B;     gl_FragColor = vec4(vorticity, 0.0, 0.0, 1.0); }');
+    var vorticityShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform sampler2D uVelocity; uniform sampler2D uCurl; uniform float curl; uniform float dt; void main () {     float L = texture2D(uCurl, vL).y;     float R = texture2D(uCurl, vR).y;     float T = texture2D(uCurl, vT).x;     float B = texture2D(uCurl, vB).x;     float C = texture2D(uCurl, vUv).x;     vec2 force = vec2(abs(T) - abs(B), abs(R) - abs(L));     force *= 1.0 / length(force + 0.00001) * curl * C;     vec2 vel = texture2D(uVelocity, vUv).xy;     gl_FragColor = vec4(vel + force * dt, 0.0, 1.0); }');
+    var pressureShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform sampler2D uPressure; uniform sampler2D uDivergence; vec2 boundary (in vec2 uv) {     uv = min(max(uv, 0.0), 1.0);     return uv; } void main () {     float L = texture2D(uPressure, boundary(vL)).x;     float R = texture2D(uPressure, boundary(vR)).x;     float T = texture2D(uPressure, boundary(vT)).x;     float B = texture2D(uPressure, boundary(vB)).x;     float C = texture2D(uPressure, vUv).x;     float divergence = texture2D(uDivergence, vUv).x;     float pressure = (L + R + B + T - divergence) * 0.25;     gl_FragColor = vec4(pressure, 0.0, 0.0, 1.0); }');
+    var gradientSubtractShader = compileShader(gl.FRAGMENT_SHADER, 'precision highp float; precision mediump sampler2D; varying vec2 vUv; varying vec2 vL; varying vec2 vR; varying vec2 vT; varying vec2 vB; uniform sampler2D uPressure; uniform sampler2D uVelocity; vec2 boundary (in vec2 uv) {     uv = min(max(uv, 0.0), 1.0);     return uv; } void main () {     float L = texture2D(uPressure, boundary(vL)).x;     float R = texture2D(uPressure, boundary(vR)).x;     float T = texture2D(uPressure, boundary(vT)).x;     float B = texture2D(uPressure, boundary(vB)).x;     vec2 velocity = texture2D(uVelocity, vUv).xy;     velocity.xy -= vec2(R - L, T - B);     gl_FragColor = vec4(velocity, 0.0, 1.0); }');
+
+    let textureWidth: number = 0;
+    let textureHeight: number = 0;
+
+    let density: { first: any[]; second: any[]; swap: () => void } | undefined;
+    let velocity: { first: any[]; second: any[]; swap: () => void } | undefined;
+    let divergence: any[] | undefined;
+    let curl: any[] | undefined;
+    let pressure: { first: any[]; second: any[]; swap: () => void } | undefined;
+
+    initFramebuffers();
+
+    var clearProgram = new GLProgram(baseVertexShader, clearShader);
+    var displayProgram = new GLProgram(baseVertexShader, displayShader);
+    var splatProgram = new GLProgram(baseVertexShader, splatShader);
+    var advectionProgram = new GLProgram(baseVertexShader, support_linear_float ? advectionShader : advectionManualFilteringShader);
+    var divergenceProgram = new GLProgram(baseVertexShader, divergenceShader);
+    var curlProgram = new GLProgram(baseVertexShader, curlShader);
+    var vorticityProgram = new GLProgram(baseVertexShader, vorticityShader);
+    var pressureProgram = new GLProgram(baseVertexShader, pressureShader);
+    var gradienSubtractProgram = new GLProgram(baseVertexShader, gradientSubtractShader);
+
+    function initFramebuffers() {
+      textureWidth = gl.drawingBufferWidth >> config.TEXTURE_DOWNSAMPLE;
+      textureHeight = gl.drawingBufferHeight >> config.TEXTURE_DOWNSAMPLE;
+
+      var iFormat = ext.internalFormat;
+      var iFormatRG = ext.internalFormatRG;
+      var formatRG = ext.formatRG;
+      var texType = ext.texType;
+
+      density = createDoubleFBO(0, textureWidth, textureHeight, iFormat, gl.RGBA, texType, support_linear_float ? gl.LINEAR : gl.NEAREST);
+      velocity = createDoubleFBO(2, textureWidth, textureHeight, iFormatRG, formatRG, texType, support_linear_float ? gl.LINEAR : gl.NEAREST);
+      divergence = createFBO(4, textureWidth, textureHeight, iFormatRG, formatRG, texType, gl.NEAREST);
+      curl = createFBO(5, textureWidth, textureHeight, iFormatRG, formatRG, texType, gl.NEAREST);
+      pressure = createDoubleFBO(6, textureWidth, textureHeight, iFormatRG, formatRG, texType, gl.NEAREST);
+    }
+
+    function createFBO(texId, w, h, internalFormat, format, type, param) {
+      gl.activeTexture(gl.TEXTURE0 + texId);
+
+      var texture = gl.createTexture();
+
+      gl.bindTexture(gl.TEXTURE_2D, texture);
+      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, param);
+      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, param);
+      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
+      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
+      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, w, h, 0, format, type, null);
+
+      var fbo = gl.createFramebuffer();
+
+      gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
+      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
+      gl.viewport(0, 0, w, h);
+      gl.clear(gl.COLOR_BUFFER_BIT);
+
+      return [texture, fbo, texId];
+    }
+
+    function createDoubleFBO(texId, w, h, internalFormat, format, type, param) {
+      var fbo1 = createFBO(texId, w, h, internalFormat, format, type, param);
+      var fbo2 = createFBO(texId + 1, w, h, internalFormat, format, type, param);
+
+      return {
+        get first() {
+          return fbo1;
+        },
+        get second() {
+          return fbo2;
+        },
+        swap: function swap() {
+          var temp = fbo1;
+
+          fbo1 = fbo2;
+          fbo2 = temp;
+        },
+      };
+    }
+
+    const blit = (() => {
+      const vertexData = new Float32Array([-1, -1, -1, 1, 1, 1, 1, -1]);
+      const elementData = new Uint16Array([0, 1, 2, 0, 2, 3]);
+
+      gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());
+      gl.bufferData(gl.ARRAY_BUFFER, vertexData, gl.STATIC_DRAW);
+      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer());
+      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, elementData, gl.STATIC_DRAW);
+      gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);
+      gl.enableVertexAttribArray(0);
+
+      return (destination: WebGLFramebuffer | null) => {
+        gl.bindFramebuffer(gl.FRAMEBUFFER, destination);
+        gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);
+      };
+    })();
+
+    var lastTime = Date.now();
+    let timeAccumulator = 0;
+
+    update();
+
+    function splat(x: number, y: number, dx: number, dy: number) {
+      if (!velocity) return;
+      if (!canvas) return;
+      if (!density) return;
+
+      splatProgram.bind();
+      gl.uniform1i(splatProgram.uniforms.uTarget, velocity.first[2]);
+      gl.uniform1f(splatProgram.uniforms.aspectRatio, canvas.width / canvas.height);
+      gl.uniform2f(splatProgram.uniforms.point, x / canvas.width, 1.0 - y / canvas.height);
+      gl.uniform3f(splatProgram.uniforms.color, dx, -dy, 1.0);
+      gl.uniform1f(splatProgram.uniforms.radius, config.SPLAT_RADIUS);
+      blit(velocity.second[1]);
+      velocity.swap();
+
+      gl.uniform1i(splatProgram.uniforms.uTarget, density.first[2]);
+
+      gl.uniform3f(splatProgram.uniforms.color, 0.9, 0.9, 0.9);
+      blit(density.second[1]);
+      density.swap();
+    }
+
+    function update() {
+      resizeCanvas();
+
+      const dt = Math.min((Date.now() - lastTime) / 1000, 0.016);
+      lastTime = Date.now();
+
+      gl.viewport(0, 0, textureWidth, textureHeight);
+
+      timeAccumulator += dt;
+
+      if (canvas) {
+        if (timeAccumulator >= config.SPEED) {
+          timeAccumulator = 0;
+          // splat(canvas.width * 0.5, canvas.height, 0, 48 * 8);
+          splat(0, canvas.height, canvas.width * 0.3, 8);
+        }
+      }
+
+      advectionProgram.bind();
+
+      if (!velocity) return;
+      if (!density) return;
+      if (!curl) return;
+      if (!divergence) return;
+      if (!pressure) return;
+
+      gl.uniform2f(advectionProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(advectionProgram.uniforms.uVelocity, velocity.first[2]);
+      gl.uniform1i(advectionProgram.uniforms.uSource, velocity.first[2]);
+      gl.uniform1f(advectionProgram.uniforms.dt, dt);
+      gl.uniform1f(advectionProgram.uniforms.dissipation, config.VELOCITY_DISSIPATION);
+      blit(velocity.second[1]);
+      velocity.swap();
+
+      gl.uniform1i(advectionProgram.uniforms.uVelocity, velocity.first[2]);
+
+      gl.uniform1i(advectionProgram.uniforms.uSource, density.first[2]);
+      gl.uniform1f(advectionProgram.uniforms.dissipation, config.DENSITY_DISSIPATION);
+      blit(density.second[1]);
+      density.swap();
+
+      curlProgram.bind();
+      gl.uniform2f(curlProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(curlProgram.uniforms.uVelocity, velocity.first[2]);
+      blit(curl[1]);
+
+      vorticityProgram.bind();
+      gl.uniform2f(vorticityProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(vorticityProgram.uniforms.uVelocity, velocity.first[2]);
+      gl.uniform1i(vorticityProgram.uniforms.uCurl, curl[2]);
+      gl.uniform1f(vorticityProgram.uniforms.curl, config.CURL);
+      gl.uniform1f(vorticityProgram.uniforms.dt, dt);
+      blit(velocity.second[1]);
+      velocity.swap();
+
+      divergenceProgram.bind();
+      gl.uniform2f(divergenceProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(divergenceProgram.uniforms.uVelocity, velocity.first[2]);
+      blit(divergence[1]);
+
+      clearProgram.bind();
+
+      var pressureTexId = pressure.first[2];
+
+      gl.activeTexture(gl.TEXTURE0 + pressureTexId);
+      gl.bindTexture(gl.TEXTURE_2D, pressure.first[0]);
+      gl.uniform1i(clearProgram.uniforms.uTexture, pressureTexId);
+      gl.uniform1f(clearProgram.uniforms.value, config.PRESSURE_DISSIPATION);
+      blit(pressure.second[1]);
+      pressure.swap();
+
+      pressureProgram.bind();
+      gl.uniform2f(pressureProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(pressureProgram.uniforms.uDivergence, divergence[2]);
+      pressureTexId = pressure.first[2];
+      gl.activeTexture(gl.TEXTURE0 + pressureTexId);
+
+      for (var _i = 0; _i < config.PRESSURE_ITERATIONS; _i++) {
+        gl.bindTexture(gl.TEXTURE_2D, pressure.first[0]);
+        gl.uniform1i(pressureProgram.uniforms.uPressure, pressureTexId);
+        blit(pressure.second[1]);
+        pressure.swap();
+      }
+
+      gradienSubtractProgram.bind();
+      gl.uniform2f(gradienSubtractProgram.uniforms.texelSize, 1.0 / textureWidth, 1.0 / textureHeight);
+      gl.uniform1i(gradienSubtractProgram.uniforms.uPressure, pressure.first[2]);
+      gl.uniform1i(gradienSubtractProgram.uniforms.uVelocity, velocity.first[2]);
+      blit(velocity.second[1]);
+      velocity.swap();
+
+      gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
+      displayProgram.bind();
+      gl.uniform1i(displayProgram.uniforms.uTexture, density.first[2]);
+      blit(null);
+
+      requestAnimationFrame(update);
+    }
+
+    function resizeCanvas() {
+      if (!canvas) return;
+
+      (canvas.width !== canvas.clientWidth || canvas.height !== canvas.clientHeight) && ((canvas.width = canvas.clientWidth), (canvas.height = canvas.clientHeight), initFramebuffers());
+    }
+  }, []);
+
+  return <canvas className={styles.canvas} ref={canvasRef} style={props.style} />;
+}
+
+================
+File: reference/components/CanvasPlatformer.module.scss
+================
+.container {
+  width: 100%;
+  height: auto;
+  position: relative;
+}
+
+.root {
+  display: block;
+  width: 100%;
+  background: transparent;
+
+  &:focus {
+    outline: 0;
+    box-shadow: inset 0 0 0 1px var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/CanvasPlatformer.tsx
+================
+'use client';
+
+import styles from '@components/CanvasPlatformer.module.scss';
+
+import * as React from 'react';
+
+import ActionButton from '@components/ActionButton';
+
+interface PlatformerProps {
+  rows?: number;
+}
+
+// TODO(jimmylee)
+// Move these constants into a separate file
+// Dynamically compute these constants since we're going to
+// Support t-shirt sizes for the system.
+const LINE_HEIGHT = 20;
+const CHARACTER_WIDTH = 9.6;
+const GRAVITY = 0.3;
+const MOVE_SPEED = 2;
+const JUMP_SPEED = -6;
+const FRICTION = 0.85;
+
+interface Position {
+  x: number;
+  y: number;
+}
+
+interface Keys {
+  left: boolean;
+  right: boolean;
+  jump: boolean;
+}
+
+interface Block {
+  x: number;
+  y: number;
+}
+
+const CanvasPlatformer: React.FC<PlatformerProps> = ({ rows = 25 }) => {
+  const canvasRef = React.useRef<HTMLCanvasElement>(null);
+  const [focused, setFocused] = React.useState(false);
+
+  const positionRef = React.useRef<Position>({ x: 50, y: 0 });
+  const velocityRef = React.useRef<Position>({ x: 0, y: 0 });
+  const keysRef = React.useRef<Keys>({ left: false, right: false, jump: false });
+  const platformBlocksRef = React.useRef<Block[]>([]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+    const parent = canvas.parentElement;
+    if (!parent) return;
+
+    const resizeCanvas = () => {
+      const parentWidth = parent.clientWidth;
+      const canvasHeight = rows * LINE_HEIGHT;
+      canvas.width = parentWidth;
+      canvas.height = canvasHeight;
+      const platformY = canvas.height - LINE_HEIGHT * 2;
+      positionRef.current.y = platformY - LINE_HEIGHT;
+      platformBlocksRef.current = [];
+      const numBlocks = Math.floor(parentWidth / CHARACTER_WIDTH);
+      for (let i = 0; i < numBlocks; i++) {
+        platformBlocksRef.current.push({ x: i * CHARACTER_WIDTH, y: platformY });
+      }
+    };
+
+    resizeCanvas();
+    window.addEventListener('resize', resizeCanvas);
+    return () => {
+      window.removeEventListener('resize', resizeCanvas);
+    };
+  }, [rows]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const handleFocus = () => setFocused(true);
+    const handleBlur = () => {
+      setFocused(false);
+      keysRef.current = { left: false, right: false, jump: false };
+    };
+
+    canvas.tabIndex = 0;
+    canvas.addEventListener('focus', handleFocus);
+    canvas.addEventListener('blur', handleBlur);
+
+    const handleClick = (e: MouseEvent) => {
+      const rect = canvas.getBoundingClientRect();
+      const x = Math.floor((e.clientX - rect.left) / CHARACTER_WIDTH) * CHARACTER_WIDTH;
+      const y = Math.floor((e.clientY - rect.top) / LINE_HEIGHT) * LINE_HEIGHT;
+      const blocks = platformBlocksRef.current;
+      const existingIndex = blocks.findIndex((b) => b.x === x && b.y === y);
+      if (existingIndex !== -1) {
+        blocks.splice(existingIndex, 1);
+      } else {
+        blocks.push({ x, y });
+      }
+    };
+
+    canvas.addEventListener('click', handleClick);
+
+    return () => {
+      canvas.removeEventListener('focus', handleFocus);
+      canvas.removeEventListener('blur', handleBlur);
+      canvas.removeEventListener('click', handleClick);
+    };
+  }, []);
+
+  React.useEffect(() => {
+    const handleKeyDown = (e: KeyboardEvent) => {
+      if (!focused) return;
+      if (e.key === 'ArrowLeft' || e.key === 'ArrowRight' || e.code === 'Space') {
+        e.preventDefault();
+        e.stopPropagation();
+      }
+      if (e.key === 'ArrowLeft') keysRef.current.left = true;
+      if (e.key === 'ArrowRight') keysRef.current.right = true;
+      if (e.code === 'Space') keysRef.current.jump = true;
+    };
+
+    const handleKeyUp = (e: KeyboardEvent) => {
+      if (!focused) return;
+      if (e.key === 'ArrowLeft' || e.key === 'ArrowRight' || e.code === 'Space') {
+        e.preventDefault();
+        e.stopPropagation();
+      }
+      if (e.key === 'ArrowLeft') keysRef.current.left = false;
+      if (e.key === 'ArrowRight') keysRef.current.right = false;
+      if (e.code === 'Space') keysRef.current.jump = false;
+    };
+
+    window.addEventListener('keydown', handleKeyDown, { capture: true });
+    window.addEventListener('keyup', handleKeyUp, { capture: true });
+
+    return () => {
+      window.removeEventListener('keydown', handleKeyDown, { capture: true });
+      window.removeEventListener('keyup', handleKeyUp, { capture: true });
+    };
+  }, [focused]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+    const ctx = canvas.getContext('2d');
+    if (!ctx) return;
+
+    const loop = () => {
+      const w = canvas.width;
+      const h = canvas.height;
+      ctx.clearRect(0, 0, w, h);
+
+      const pos = positionRef.current;
+      const vel = velocityRef.current;
+      const keys = keysRef.current;
+      const blocks = platformBlocksRef.current;
+
+      const themeBorderColor = getComputedStyle(document.body).getPropertyValue('--theme-border').trim();
+      const themeTextColor = getComputedStyle(document.body).getPropertyValue('--theme-text').trim();
+
+      ctx.fillStyle = themeBorderColor;
+      for (const b of blocks) {
+        ctx.fillRect(b.x, b.y, CHARACTER_WIDTH, LINE_HEIGHT);
+      }
+
+      if (keys.left) vel.x = -MOVE_SPEED;
+      else if (keys.right) vel.x = MOVE_SPEED;
+      else {
+        vel.x *= FRICTION;
+        if (Math.abs(vel.x) < 0.1) vel.x = 0;
+      }
+
+      const oldY = pos.y;
+      vel.y += GRAVITY;
+      pos.x += vel.x;
+      pos.y += vel.y;
+
+      if (pos.x < 0) pos.x = 0;
+      if (pos.x > w - CHARACTER_WIDTH) pos.x = w - CHARACTER_WIDTH;
+
+      let groundY = h;
+      for (const b of blocks) {
+        const horizontallyOverlapping = pos.x + CHARACTER_WIDTH > b.x && pos.x < b.x + CHARACTER_WIDTH;
+        if (horizontallyOverlapping && oldY + LINE_HEIGHT <= b.y && pos.y + LINE_HEIGHT >= b.y) {
+          if (b.y < groundY) groundY = b.y;
+        }
+      }
+
+      if (pos.y + LINE_HEIGHT > groundY) {
+        pos.y = groundY - LINE_HEIGHT;
+        vel.y = 0;
+        if (keys.jump) vel.y = JUMP_SPEED;
+      }
+
+      ctx.fillStyle = themeTextColor;
+      ctx.fillRect(pos.x, pos.y, CHARACTER_WIDTH, LINE_HEIGHT);
+
+      requestAnimationFrame(loop);
+    };
+
+    requestAnimationFrame(loop);
+  }, []);
+
+  const handleJumpClick = () => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+    const pos = positionRef.current;
+    const vel = velocityRef.current;
+    let w = canvas.width;
+    let h = canvas.height;
+    let groundY = h;
+    for (const b of platformBlocksRef.current) {
+      const horizontallyOverlapping = pos.x + CHARACTER_WIDTH > b.x && pos.x < b.x + CHARACTER_WIDTH;
+      if (horizontallyOverlapping && pos.y + LINE_HEIGHT <= b.y) {
+        if (b.y < groundY) groundY = b.y;
+      }
+    }
+    if (pos.y + LINE_HEIGHT >= groundY) vel.y = JUMP_SPEED;
+  };
+
+  const handleLeftClick = () => {
+    const pos = positionRef.current;
+    pos.x -= CHARACTER_WIDTH;
+    if (pos.x < 0) pos.x = 0;
+  };
+
+  const handleRightClick = () => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+    const pos = positionRef.current;
+    pos.x += CHARACTER_WIDTH;
+    if (pos.x > canvas.width - CHARACTER_WIDTH) pos.x = canvas.width - CHARACTER_WIDTH;
+  };
+
+  return (
+    <>
+      <ActionButton hotkey="␣" onClick={handleJumpClick}>
+        Jump
+      </ActionButton>
+      <ActionButton hotkey="←" onClick={handleLeftClick}>
+        Left
+      </ActionButton>
+      <ActionButton hotkey="→" onClick={handleRightClick}>
+        Right
+      </ActionButton>
+      <div className={styles.container}>
+        <canvas className={styles.root} ref={canvasRef} />
+      </div>
+    </>
+  );
+};
+
+export default CanvasPlatformer;
+
+================
+File: reference/components/CanvasSnake.module.scss
+================
+.container {
+  width: 100%;
+  height: auto;
+  position: relative;
+}
+
+.root {
+  display: block;
+  width: 100%;
+  background: transparent;
+
+  &:focus {
+    outline: 0;
+    box-shadow: inset 0 0 0 1px var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/CanvasSnake.tsx
+================
+'use client';
+
+import styles from '@components/CanvasSnake.module.scss';
+
+import * as React from 'react';
+
+import ActionButton from '@components/ActionButton';
+
+interface SnakeProps {
+  rows?: number;
+}
+
+// TODO(jimmylee)
+// Move these constants into a separate file
+// Dynamically compute these constants since we're going to
+// Support t-shirt sizes for the system.
+const LINE_HEIGHT = 20;
+const CHARACTER_WIDTH = 9.6;
+
+interface Position {
+  x: number;
+  y: number;
+}
+
+type Direction = 'UP' | 'DOWN' | 'LEFT' | 'RIGHT';
+
+const CanvasSnake = ({ rows = 25 }: SnakeProps) => {
+  const canvasRef = React.useRef<HTMLCanvasElement>(null);
+  const [focused, setFocused] = React.useState(false);
+  const directionRef = React.useRef<Direction>('RIGHT');
+  const snakeRef = React.useRef<Position[]>([]);
+  const fruitRef = React.useRef<Position>({ x: 0, y: 0 });
+  const gridWidthRef = React.useRef<number>(0);
+  const gridHeightRef = React.useRef<number>(0);
+  const lastMoveTimeRef = React.useRef<number>(0);
+  const moveInterval = 150;
+  const animationFrameRef = React.useRef<number | null>(null);
+
+  const reset = React.useCallback(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const w = canvas.width;
+    const h = canvas.height;
+    const gridWidth = Math.floor(w / CHARACTER_WIDTH);
+    const gridHeight = Math.floor(h / LINE_HEIGHT);
+
+    gridWidthRef.current = gridWidth;
+    gridHeightRef.current = gridHeight;
+
+    const startX = Math.floor(gridWidth / 2);
+    const startY = Math.floor(gridHeight / 2);
+
+    snakeRef.current = [
+      { x: startX - 13, y: startY },
+      { x: startX - 12, y: startY },
+      { x: startX - 11, y: startY },
+      { x: startX - 10, y: startY },
+      { x: startX - 9, y: startY },
+      { x: startX - 8, y: startY },
+      { x: startX - 7, y: startY },
+      { x: startX - 6, y: startY },
+      { x: startX - 5, y: startY },
+      { x: startX - 4, y: startY },
+      { x: startX - 3, y: startY },
+      { x: startX - 2, y: startY },
+      { x: startX - 1, y: startY },
+      { x: startX, y: startY },
+    ];
+
+    directionRef.current = 'RIGHT';
+
+    fruitRef.current = {
+      x: Math.floor(Math.random() * gridWidth),
+      y: Math.floor(Math.random() * gridHeight),
+    };
+
+    lastMoveTimeRef.current = performance.now();
+  }, []);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const parent = canvas.parentElement;
+    if (!parent) return;
+
+    const onHandleResizeCanvas = () => {
+      const parentWidth = parent.clientWidth;
+      const canvasHeight = rows * LINE_HEIGHT;
+      canvas.width = parentWidth;
+      canvas.height = canvasHeight;
+      reset();
+    };
+
+    onHandleResizeCanvas();
+    window.addEventListener('resize', onHandleResizeCanvas);
+    return () => {
+      window.removeEventListener('resize', onHandleResizeCanvas);
+    };
+  }, [rows, reset]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const onHandleFocus = () => {
+      setFocused(true);
+    };
+    const onHandleBlur = () => {
+      setFocused(false);
+    };
+
+    canvas.tabIndex = 0;
+    canvas.addEventListener('focus', onHandleFocus);
+    canvas.addEventListener('blur', onHandleBlur);
+
+    return () => {
+      canvas.removeEventListener('focus', onHandleFocus);
+      canvas.removeEventListener('blur', onHandleBlur);
+    };
+  }, []);
+
+  React.useEffect(() => {
+    const handleKeyDown = (e: KeyboardEvent) => {
+      if (!focused) return;
+      if (e.key === 'ArrowLeft' || e.key === 'ArrowRight' || e.key === 'ArrowUp' || e.key === 'ArrowDown') {
+        e.preventDefault();
+        e.stopPropagation();
+      }
+      const currentDir = directionRef.current;
+      if (e.key === 'ArrowLeft' && currentDir !== 'RIGHT') directionRef.current = 'LEFT';
+      if (e.key === 'ArrowRight' && currentDir !== 'LEFT') directionRef.current = 'RIGHT';
+      if (e.key === 'ArrowUp' && currentDir !== 'DOWN') directionRef.current = 'UP';
+      if (e.key === 'ArrowDown' && currentDir !== 'UP') directionRef.current = 'DOWN';
+    };
+
+    window.addEventListener('keydown', handleKeyDown, { capture: true });
+    return () => {
+      window.removeEventListener('keydown', handleKeyDown, { capture: true });
+    };
+  }, [focused]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const ctx = canvas.getContext('2d');
+    if (!ctx) return;
+
+    const themeBorderColor = getComputedStyle(document.body).getPropertyValue('--theme-text').trim();
+    const themeTextColor = getComputedStyle(document.body).getPropertyValue('--theme-focused-foreground').trim();
+
+    const moveSnake = () => {
+      const snake = snakeRef.current;
+      const dir = directionRef.current;
+      const head = snake[snake.length - 1];
+      let newHead: Position = { x: head.x, y: head.y };
+      if (dir === 'LEFT') newHead.x -= 1;
+      if (dir === 'RIGHT') newHead.x += 1;
+      if (dir === 'UP') newHead.y -= 1;
+      if (dir === 'DOWN') newHead.y += 1;
+      if (newHead.x < 0 || newHead.x >= gridWidthRef.current || newHead.y < 0 || newHead.y >= gridHeightRef.current) {
+        reset();
+        return;
+      }
+      for (const seg of snake) {
+        if (seg.x === newHead.x && seg.y === newHead.y) {
+          reset();
+          return;
+        }
+      }
+      snake.push(newHead);
+      if (newHead.x === fruitRef.current.x && newHead.y === fruitRef.current.y) {
+        placeTarget();
+      } else {
+        snake.shift();
+      }
+    };
+
+    const placeTarget = () => {
+      const snake = snakeRef.current;
+      const gridW = gridWidthRef.current;
+      const gridH = gridHeightRef.current;
+      let fruitPos: Position;
+      while (true) {
+        fruitPos = {
+          x: Math.floor(Math.random() * gridW),
+          y: Math.floor(Math.random() * gridH),
+        };
+        if (!snake.some((s) => s.x === fruitPos.x && s.y === fruitPos.y)) break;
+      }
+      fruitRef.current = fruitPos;
+    };
+
+    const loop = (time: number) => {
+      if (!ctx) return;
+      if (!focused) return;
+
+      const w = canvas.width;
+      const h = canvas.height;
+
+      ctx.clearRect(0, 0, w, h);
+      ctx.fillStyle = themeTextColor;
+      ctx.fillRect(fruitRef.current.x * CHARACTER_WIDTH, fruitRef.current.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+      ctx.fillStyle = themeBorderColor;
+      for (const segment of snakeRef.current) {
+        ctx.fillRect(segment.x * CHARACTER_WIDTH, segment.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+      }
+      if (time - lastMoveTimeRef.current > moveInterval) {
+        moveSnake();
+        lastMoveTimeRef.current = time;
+      }
+      animationFrameRef.current = requestAnimationFrame(loop);
+    };
+
+    if (focused && animationFrameRef.current === null) {
+      animationFrameRef.current = requestAnimationFrame(loop);
+    }
+
+    return () => {
+      if (animationFrameRef.current !== null) {
+        cancelAnimationFrame(animationFrameRef.current);
+        animationFrameRef.current = null;
+      }
+    };
+  }, [focused, reset]);
+
+  React.useEffect(() => {
+    if (!focused) {
+      if (animationFrameRef.current !== null) {
+        cancelAnimationFrame(animationFrameRef.current);
+        animationFrameRef.current = null;
+      }
+
+      return;
+    }
+
+    if (animationFrameRef.current === null && canvasRef.current) {
+      animationFrameRef.current = requestAnimationFrame((time) => {
+        const canvas = canvasRef.current;
+        if (!canvas) return;
+
+        const ctx = canvas.getContext('2d');
+        if (!ctx) return;
+
+        const themeBorderColor = getComputedStyle(document.body).getPropertyValue('--theme-border').trim();
+        const themeTextColor = getComputedStyle(document.body).getPropertyValue('--theme-text').trim();
+
+        ctx.clearRect(0, 0, canvas.width, canvas.height);
+        ctx.fillStyle = themeBorderColor;
+        ctx.fillRect(fruitRef.current.x * CHARACTER_WIDTH, fruitRef.current.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+        ctx.fillStyle = themeTextColor;
+
+        for (const segment of snakeRef.current) {
+          ctx.fillRect(segment.x * CHARACTER_WIDTH, segment.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+        }
+
+        lastMoveTimeRef.current = time;
+        animationFrameRef.current = requestAnimationFrame(loop);
+
+        function loop(time: number) {
+          if (!focused) return;
+          if (!ctx) return;
+          if (!canvas) return;
+
+          ctx.clearRect(0, 0, canvas.width, canvas.height);
+          ctx.fillStyle = themeBorderColor;
+          ctx.fillRect(fruitRef.current.x * CHARACTER_WIDTH, fruitRef.current.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+          ctx.fillStyle = themeTextColor;
+          for (const segment of snakeRef.current) {
+            ctx.fillRect(segment.x * CHARACTER_WIDTH, segment.y * LINE_HEIGHT, CHARACTER_WIDTH, LINE_HEIGHT);
+          }
+          if (time - lastMoveTimeRef.current > moveInterval) {
+            moveSnake();
+            lastMoveTimeRef.current = time;
+          }
+          animationFrameRef.current = requestAnimationFrame(loop);
+        }
+
+        const moveSnake = () => {
+          const snake = snakeRef.current;
+          const dir = directionRef.current;
+          const head = snake[snake.length - 1];
+          let newHead: Position = { x: head.x, y: head.y };
+          if (dir === 'LEFT') newHead.x -= 1;
+          if (dir === 'RIGHT') newHead.x += 1;
+          if (dir === 'UP') newHead.y -= 1;
+          if (dir === 'DOWN') newHead.y += 1;
+          if (newHead.x < 0 || newHead.x >= gridWidthRef.current || newHead.y < 0 || newHead.y >= gridHeightRef.current) {
+            reset();
+            return;
+          }
+
+          for (const seg of snake) {
+            if (seg.x === newHead.x && seg.y === newHead.y) {
+              reset();
+              return;
+            }
+          }
+
+          snake.push(newHead);
+          if (newHead.x === fruitRef.current.x && newHead.y === fruitRef.current.y) {
+            placeTarget();
+          } else {
+            snake.shift();
+          }
+        };
+
+        const placeTarget = () => {
+          const snake = snakeRef.current;
+          const gridW = gridWidthRef.current;
+          const gridH = gridHeightRef.current;
+          let fruitPos: Position;
+          while (true) {
+            fruitPos = {
+              x: Math.floor(Math.random() * gridW),
+              y: Math.floor(Math.random() * gridH),
+            };
+            if (!snake.some((s) => s.x === fruitPos.x && s.y === fruitPos.y)) break;
+          }
+          fruitRef.current = fruitPos;
+        };
+      });
+    }
+  }, [focused, reset]);
+
+  const onHandleClickUp = () => {
+    if (directionRef.current !== 'DOWN') directionRef.current = 'UP';
+  };
+  const onHandleClickDown = () => {
+    if (directionRef.current !== 'UP') directionRef.current = 'DOWN';
+  };
+  const onHandleClickLeft = () => {
+    if (directionRef.current !== 'RIGHT') directionRef.current = 'LEFT';
+  };
+  const onHandleClickRight = () => {
+    if (directionRef.current !== 'LEFT') directionRef.current = 'RIGHT';
+  };
+
+  return (
+    <>
+      <ActionButton hotkey="↑" onClick={onHandleClickUp}>
+        Up
+      </ActionButton>
+      <ActionButton hotkey="↓" onClick={onHandleClickDown}>
+        Down
+      </ActionButton>
+      <ActionButton hotkey="←" onClick={onHandleClickLeft}>
+        Left
+      </ActionButton>
+      <ActionButton hotkey="→" onClick={onHandleClickRight}>
+        Right
+      </ActionButton>
+      <div className={styles.container}>
+        <canvas className={styles.root} ref={canvasRef} />
+      </div>
+    </>
+  );
+};
+
+export default CanvasSnake;
+
+================
+File: reference/components/Card.module.scss
+================
+.card {
+  position: relative;
+  display: block;
+  padding-top: 0;
+  padding-left: 0;
+  padding-right: 0;
+  padding-bottom: 0;
+  white-space: prewrap;
+}
+
+.children {
+  box-shadow:
+    inset 2px 0 0 0 var(--theme-text),
+    inset -2px 0 0 0 var(--theme-text),
+    inset 0 -2px 0 0 var(--theme-text);
+  display: block;
+  padding-top: calc(var(--theme-line-height-base) * 0.5rem);
+  padding-left: 2ch;
+  padding-right: 2ch;
+  padding-bottom: calc(var(--theme-line-height-base) * 1rem);
+  overflow-x: auto;
+  overflow-y: hidden;
+
+  &::-webkit-scrollbar {
+    display: none;
+  }
+
+  scrollbar-width: none;
+}
+
+.action {
+  display: flex;
+  align-items: flex-end;
+  justify-content: space-between;
+}
+
+.left {
+  min-width: 10%;
+  width: 100%;
+  box-shadow:
+    inset 2px 0 0 0 var(--theme-text),
+    inset 0 2px 0 0 var(--theme-text);
+  padding: calc((var(--font-size) * 0.5) * var(--theme-line-height-base)) 2ch 0px 1ch;
+}
+
+.leftCorner {
+  flex-shrink: 0;
+  box-shadow:
+    inset 2px 0 0 0 var(--theme-text),
+    inset 0 2px 0 0 var(--theme-text);
+  padding: calc((var(--font-size) * 0.5) * var(--theme-line-height-base)) 1ch 0px 1ch;
+}
+
+.right {
+  min-width: 10%;
+  width: 100%;
+  box-shadow:
+    inset -2px 0 0 0 var(--theme-text),
+    inset 0 2px 0 0 var(--theme-text);
+  padding: calc((var(--font-size) * 0.5) * var(--theme-line-height-base)) 2ch 0px 1ch;
+}
+
+.rightCorner {
+  flex-shrink: 0;
+  box-shadow:
+    inset -2px 0 0 0 var(--theme-text),
+    inset 0 2px 0 0 var(--theme-text);
+  padding: calc((var(--font-size) * 0.5) * var(--theme-line-height-base)) 1ch 0px 1ch;
+}
+
+.title {
+  flex-shrink: 0;
+  padding: 0 1ch 0 1ch;
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+================
+File: reference/components/Card.tsx
+================
+import styles from '@components/Card.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface CardProps extends React.HTMLAttributes<HTMLDivElement> {
+  children?: React.ReactNode;
+  title?: string | any;
+  mode?: string | any;
+}
+
+const Card: React.FC<CardProps> = ({ children, mode, title, style, ...rest }) => {
+  let titleElement = (
+    <header className={styles.action}>
+      <div className={styles.left} aria-hidden="true"></div>
+      {title ? <h2 className={styles.title}>{title}</h2> : null}
+      <div className={styles.right} aria-hidden="true"></div>
+    </header>
+  );
+
+  if (mode === 'left') {
+    titleElement = (
+      <header className={styles.action}>
+        <div className={styles.leftCorner} aria-hidden="true"></div>
+        <h2 className={styles.title}>{title}</h2>
+        <div className={styles.right} aria-hidden="true"></div>
+      </header>
+    );
+  }
+
+  if (mode === 'right') {
+    titleElement = (
+      <header className={styles.action}>
+        <div className={styles.left} aria-hidden="true"></div>
+        <h2 className={styles.title}>{title}</h2>
+        <div className={styles.rightCorner} aria-hidden="true"></div>
+      </header>
+    );
+  }
+
+  return (
+    <article className={styles.card} style={style}>
+      {titleElement}
+      <section className={styles.children}>{children}</section>
+    </article>
+  );
+};
+
+export default Card;
+
+================
+File: reference/components/CardDouble.module.scss
+================
+.card {
+  --card-double-border-width: 6px;
+  --card-double-half-gutter: (var(--font-size) * 0.5);
+  --card-double-top-gutter: 6px;
+
+  position: relative;
+  display: block;
+  padding-top: 0;
+  padding-right: 0;
+  padding-left: 0;
+  padding-bottom: 0;
+}
+
+.children {
+  border-left: var(--card-double-border-width) solid var(--theme-text);
+  border-left-style: double;
+  border-bottom: var(--card-double-border-width) solid var(--theme-text);
+  border-bottom-style: double;
+  border-right: var(--card-double-border-width) solid var(--theme-text);
+  border-right-style: double;
+  display: block;
+  padding-top: calc(var(--theme-line-height-base) * 0.5rem);
+  padding-left: calc(2ch - var(--card-double-border-width));
+  padding-right: calc(2ch - var(--card-double-border-width));
+  padding-bottom: calc(var(--theme-line-height-base) * 1rem - var(--card-double-border-width));
+
+  overflow-x: auto;
+  overflow-y: hidden;
+
+  &::-webkit-scrollbar {
+    display: none;
+  }
+
+  scrollbar-width: none;
+}
+
+.action {
+  display: flex;
+  align-items: flex-end;
+  justify-content: space-between;
+}
+
+.left {
+  min-width: 10%;
+  width: 100%;
+  border-top: var(--card-double-border-width) solid var(--theme-text);
+  border-top-style: double;
+  border-left: var(--card-double-border-width) solid var(--theme-text);
+  border-left-style: double;
+  padding: calc(var(--card-double-top-gutter) * var(--theme-line-height-base)) 2ch 0px 1ch;
+}
+
+.leftCorner {
+  flex-shrink: 0;
+  border-top: var(--card-double-border-width) solid var(--theme-text);
+  border-top-style: double;
+  border-left: var(--card-double-border-width) solid var(--theme-text);
+  border-left-style: double;
+  padding: calc(var(--card-double-top-gutter) * var(--theme-line-height-base)) calc(1ch - 6px) 0px 1ch;
+}
+
+.right {
+  min-width: 10%;
+  width: 100%;
+  border-top: var(--card-double-border-width) solid var(--theme-text);
+  border-top-style: double;
+  border-right: var(--card-double-border-width) solid var(--theme-text);
+  border-right-style: double;
+  padding: calc(var(--card-double-top-gutter) * var(--theme-line-height-base)) 2ch 0px 1ch;
+}
+
+.rightCorner {
+  flex-shrink: 0;
+  border-top: var(--card-double-border-width) solid var(--theme-text);
+  border-top-style: double;
+  border-right: var(--card-double-border-width) solid var(--theme-text);
+  border-right-style: double;
+  padding: calc(var(--card-double-top-gutter) * var(--theme-line-height-base)) 1ch 0px calc(1ch - 6px);
+}
+
+.title {
+  flex-shrink: 0;
+  padding: 0 1ch 0 1ch;
+  font-size: var(--font-size);
+  font-weight: 400;
+}
+
+================
+File: reference/components/CardDouble.tsx
+================
+import styles from '@components/CardDouble.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface CardProps extends React.HTMLAttributes<HTMLDivElement> {
+  children?: React.ReactNode;
+  title?: string | any;
+  mode?: string | any;
+  style?: any;
+}
+
+const CardDouble: React.FC<CardProps> = ({ children, mode, title, style, ...rest }) => {
+  let titleElement = (
+    <header className={styles.action}>
+      <div className={styles.left} aria-hidden="true"></div>
+      <h2 className={styles.title}>{title}</h2>
+      <div className={styles.right} aria-hidden="true"></div>
+    </header>
+  );
+
+  if (mode === 'left') {
+    titleElement = (
+      <header className={styles.action}>
+        <div className={styles.leftCorner} aria-hidden="true"></div>
+        <h2 className={styles.title}>{title}</h2>
+        <div className={styles.right} aria-hidden="true"></div>
+      </header>
+    );
+  }
+
+  if (mode === 'right') {
+    titleElement = (
+      <header className={styles.action}>
+        <div className={styles.left} aria-hidden="true"></div>
+        <h2 className={styles.title}>{title}</h2>
+        <div className={styles.rightCorner} aria-hidden="true"></div>
+      </header>
+    );
+  }
+
+  return (
+    <article className={styles.card}>
+      {titleElement}
+      <section className={styles.children}>
+        <section className={styles.borderChildren} style={style}>
+          {children}
+        </section>
+      </section>
+    </article>
+  );
+};
+
+export default CardDouble;
+
+================
+File: reference/components/Checkbox.module.scss
+================
+.section {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+
+  .right {
+    padding-bottom: calc(8px * var(--theme-line-height-base));
+    box-shadow: inset 0 1px 0 0 var(--theme-border-subdued);
+  }
+
+  &:last-child {
+    .right {
+      padding-bottom: 0;
+    }
+  }
+}
+
+.checked {
+}
+
+.focused {
+  .figure {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.relative {
+  position: relative;
+  flex-shrink: 0;
+  display: inline-block;
+  vertical-align: baseline;
+}
+
+.figure {
+  width: 100%;
+  height: 100%;
+  cursor: pointer;
+  color: var(--theme-text);
+  background: var(--theme-button-foreground);
+  align-self: stretch;
+  display: inline-block;
+  padding: 0 1ch 0 1ch;
+}
+
+.right {
+  background: var(--theme-button-background);
+  min-width: 10%;
+  width: 100%;
+  align-self: stretch;
+}
+
+.input {
+  top: 0;
+  left: 0;
+  opacity: 0;
+  position: absolute;
+  width: 1px;
+  height: 1px;
+}
+
+================
+File: reference/components/Checkbox.tsx
+================
+'use client';
+
+import styles from '@components/Checkbox.module.scss';
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface CheckboxProps {
+  style?: React.CSSProperties;
+  checkboxStyle?: React.CSSProperties;
+  name: string;
+  defaultChecked?: boolean;
+  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;
+  tabIndex?: number;
+  children?: React.ReactNode;
+}
+
+const Checkbox: React.FC<CheckboxProps> = ({ style, name, defaultChecked = false, onChange, children }) => {
+  const checkboxId = `${name}-checkbox`;
+  const inputRef = React.useRef<HTMLInputElement>(null);
+
+  const [isChecked, setIsChecked] = React.useState(defaultChecked);
+  const [isFocused, setIsFocused] = React.useState(false);
+
+  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
+    switch (event.key) {
+      case 'Enter':
+        event.preventDefault();
+        inputRef.current?.click();
+        break;
+      case 'ArrowUp':
+      case 'ArrowLeft': {
+        event.preventDefault();
+        const previousFocusable = Utilities.findNextFocusable(document.activeElement, 'previous');
+        previousFocusable?.focus();
+        break;
+      }
+      case 'ArrowDown':
+      case 'ArrowRight': {
+        event.preventDefault();
+        const nextFocusable = Utilities.findNextFocusable(document.activeElement, 'next');
+        nextFocusable?.focus();
+        break;
+      }
+      default:
+        break;
+    }
+  };
+
+  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
+    const newCheckedStatus = event.target.checked;
+    setIsChecked(newCheckedStatus);
+    if (onChange) {
+      onChange(event);
+    }
+  };
+
+  const handleFocus = () => setIsFocused(true);
+  const handleBlur = () => setIsFocused(false);
+
+  return (
+    <div
+      className={Utilities.classNames(styles.section, {
+        [styles.checked]: isChecked,
+        [styles.focused]: isFocused,
+      })}
+      style={style}
+    >
+      <div className={styles.relative}>
+        <input className={styles.input} id={checkboxId} type="checkbox" name={name} defaultChecked={defaultChecked} onChange={handleChange} onKeyDown={handleKeyDown} onFocus={handleFocus} onBlur={handleBlur} tabIndex={0} ref={inputRef} />
+        <label className={styles.figure} htmlFor={checkboxId}>
+          {isChecked ? '╳' : '\u00A0'}
+        </label>
+      </div>
+      <div className={styles.right}>&nbsp;&nbsp;{children}</div>
+    </div>
+  );
+};
+
+export default Checkbox;
+
+================
+File: reference/components/Chessboard.module.scss
+================
+.board {
+  display: inline-table;
+  border-collapse: collapse;
+}
+
+.corner {
+  width: 1ch;
+  height: calc(var(--theme-line-height-base) * 1rem);
+}
+
+.cell {
+  width: 1ch;
+  height: calc(var(--theme-line-height-base) * 1rem);
+  background-color: var(--theme-border-subdued);
+  text-align: center;
+  vertical-align: middle;
+}
+
+.square {
+  height: calc(var(--theme-line-height-base) * 2rem);
+  text-align: center;
+  vertical-align: middle;
+  width: 3ch;
+}
+
+.dark {
+  background-color: var(--theme-focused-foreground);
+}
+
+.light {
+  background-color: var(--theme-focused-foreground-subdued);
+}
+
+.symbol {
+  font-size: 40px;
+  line-height: calc(var(--theme-line-height-base) * 2rem);
+}
+
+================
+File: reference/components/Chessboard.tsx
+================
+'use client';
+
+import styles from '@components/Chessboard.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+const FILE = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];
+const RANK = [8, 7, 6, 5, 4, 3, 2, 1];
+
+const getPieceSymbol = (piece: string) => {
+  const mapping: Record<string, string> = {
+    K: '♔',
+    Q: '♕',
+    R: '♖',
+    B: '♗',
+    N: '♘',
+    P: '♙',
+    k: '♚',
+    q: '♛',
+    r: '♜',
+    b: '♝',
+    n: '♞',
+    p: '♟',
+  };
+  return mapping[piece] || '';
+};
+
+interface ChessboardProps {
+  board: string[][];
+}
+
+const Chessboard: React.FC<ChessboardProps> = ({ board }) => {
+  return (
+    <table className={styles.board}>
+      <tbody>
+        <tr>
+          <td className={styles.corner}></td>
+          {FILE.map((file) => (
+            <td key={file} className={styles.cell}>
+              {file}
+            </td>
+          ))}
+        </tr>
+        {RANK.map((rank, rowIndex) => (
+          <tr key={rank}>
+            <td className={styles.cell}>{rank}</td>
+            {FILE.map((_, colIndex) => {
+              const isDark = (rowIndex + colIndex) % 2 === 0;
+              const squareClass = isDark ? styles.dark : styles.light;
+              return (
+                <td key={colIndex} className={Utilities.classNames(styles.square, squareClass)}>
+                  <span className={styles.symbol}>{getPieceSymbol(board[rowIndex][colIndex])}</span>
+                </td>
+              );
+            })}
+          </tr>
+        ))}
+      </tbody>
+    </table>
+  );
+};
+
+export default Chessboard;
+
+================
+File: reference/components/CodeBlock.module.scss
+================
+.root {
+  display: block;
+  font-weight: 400;
+  overflow: auto;
+  font-family: inherit;
+  background: var(--theme-border-subdued);
+
+  &::-webkit-scrollbar {
+    display: none;
+  }
+
+  scrollbar-width: none;
+}
+
+.line {
+  display: flex;
+  justify-content: space-between;
+  align-items: flex-start;
+}
+
+.number {
+  display: inline-flex;
+  width: 3ch;
+  text-align: right;
+  padding-right: 1ch;
+  user-select: none;
+  background: var(--theme-background);
+  opacity: 0.5;
+}
+
+.content {
+  min-width: 10%;
+  width: 100%;
+  white-space: pre;
+  background: var(--theme-border-subdued);
+  padding-left: 2ch;
+}
+
+================
+File: reference/components/CodeBlock.tsx
+================
+'use client';
+
+import styles from '@components/CodeBlock.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface CodeBlockProps extends React.HTMLAttributes<HTMLPreElement> {
+  children?: React.ReactNode;
+}
+
+const CodeBlock = React.forwardRef<HTMLPreElement, CodeBlockProps>(({ children, ...rest }, ref) => {
+  return (
+    <pre className={styles.root} ref={ref} {...rest}>
+      {String(children)
+        .split('\n')
+        .map((line, index) => (
+          <div key={index} className={styles.line}>
+            <span className={styles.number}>{Utilities.leftPad(String(index + 1), 3)}</span>
+            <span className={styles.content}>{line}</span>
+          </div>
+        ))}
+    </pre>
+  );
+});
+
+CodeBlock.displayName = 'CodeBlock';
+
+export default CodeBlock;
+
+================
+File: reference/components/ComboBox.module.scss
+================
+.root {
+  padding: 0;
+}
+
+================
+File: reference/components/ComboBox.tsx
+================
+'use client';
+
+import styles from '@components/ComboBox.module.scss';
+
+import * as React from 'react';
+
+import AlertBanner from '@components/AlertBanner';
+import ButtonGroup from '@components/ButtonGroup';
+import CardDouble from '@components/CardDouble';
+import Input from '@components/Input';
+
+interface ComboBoxProps {
+  data: string[][];
+  label?: string;
+}
+
+function ComboBox({ data, label }: ComboBoxProps) {
+  const [searchTerm, setSearchTerm] = React.useState('');
+
+  const filtered = React.useMemo(() => {
+    const sliced = data.slice(1);
+    if (!searchTerm) return [];
+    return sliced.filter((entry) => entry[0].toLowerCase().includes(searchTerm.toLowerCase()));
+  }, [data, searchTerm]);
+
+  const displayed = React.useMemo(() => {
+    const sliced = data.slice(1);
+    if (filtered.length >= 5) return filtered.slice(0, 5);
+    if (filtered.length === 0 && searchTerm) return sliced.slice(0, 5);
+    if (filtered.length > 0 && filtered.length < 5) {
+      const needed = 5 - filtered.length;
+      const remainder = sliced.filter((entry) => !filtered.includes(entry));
+      return [...filtered, ...remainder.slice(0, needed)];
+    }
+    return sliced.slice(0, 5);
+  }, [filtered, data, searchTerm]);
+
+  const handleChange = React.useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
+    setSearchTerm(e.target.value);
+  }, []);
+
+  return (
+    <>
+      <div className={styles.root}>
+        <Input autoComplete="off" isBlink label={label} name="input_test_blink" value={searchTerm} onChange={handleChange} />
+      </div>
+      {displayed.map((entry) => (
+        <CardDouble key={entry[0]} title={entry[0]}>
+          <AlertBanner>{entry[1]}</AlertBanner>
+          <br />
+          <ButtonGroup isFull items={[{ body: 'FAVORITE' }, { body: 'DONATE' }, { body: 'LEARN MORE' }]} />
+        </CardDouble>
+      ))}
+    </>
+  );
+}
+
+export default ComboBox;
+
+================
+File: reference/components/ContentFluid.module.scss
+================
+.root {
+  display: block;
+  min-width: 10%;
+  width: 100%;
+  align-self: stretch;
+}
+
+================
+File: reference/components/ContentFluid.tsx
+================
+import styles from '@components/ContentFluid.module.scss';
+
+import * as React from 'react';
+
+interface ContentFluidProps extends React.HTMLAttributes<HTMLSpanElement> {
+  children?: React.ReactNode;
+}
+
+const ContentFluid: React.FC<ContentFluidProps> = ({ children, ...rest }) => {
+  return <div className={styles.root}>{children}</div>;
+};
+
+export default ContentFluid;
+
+================
+File: reference/components/DataTable.module.scss
+================
+.root {
+  position: relative;
+  width: 100%;
+  border-spacing: 0px;
+  max-width: 64ch;
+}
+
+.body {
+}
+
+.row {
+  transition: transform 0.5s ease;
+  border-spacing: 0px;
+
+  &:first-child {
+    font-weight: 400;
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    outline: 0;
+  }
+}
+
+.column {
+  border: 0;
+  outline: 0;
+  padding-right: 1ch;
+  transition: background-color 0.5s ease;
+}
+
+.changed {
+  animation: flash 2000ms ease;
+}
+
+@keyframes flash {
+  0% {
+    background-color: var(--theme-focused-foreground-subdued);
+  }
+  100% {
+    background-color: transparent;
+  }
+}
+
+================
+File: reference/components/DataTable.tsx
+================
+'use client';
+
+import styles from '@components/DataTable.module.scss';
+
+import * as React from 'react';
+
+interface TableProps {
+  data: string[][];
+}
+
+interface RGBAColor {
+  r: number;
+  g: number;
+  b: number;
+  a: number;
+}
+
+const BASE_FOREGROUND_RGBA: RGBAColor = { r: 98, g: 98, b: 98, a: 0.5 };
+const BASE_BACKGROUND_RGBA: RGBAColor = { r: 168, g: 168, b: 168, a: 0.5 };
+const ALPHA = 0.45;
+
+function interpolateColor(color1: RGBAColor, color2: RGBAColor, factor: number): RGBAColor {
+  return {
+    r: Math.round(color1.r + factor * (color2.r - color1.r)),
+    g: Math.round(color1.g + factor * (color2.g - color1.g)),
+    b: Math.round(color1.b + factor * (color2.b - color1.b)),
+    a: color1.a + factor * (color2.a - color1.a),
+  };
+}
+
+const DataTable: React.FC<TableProps> = ({ data }) => {
+  const tableRef = React.useRef<HTMLTableElement>(null);
+  const prevDataRef = React.useRef<string[][]>(data);
+
+  React.useEffect(() => {
+    const rows = tableRef.current?.querySelectorAll<HTMLTableRowElement>('tr') || [];
+    for (let i = 1; i < data.length; i++) {
+      const cells = rows[i]?.querySelectorAll<HTMLTableCellElement>('td');
+      if (!cells) continue;
+      for (let j = 0; j < data[i].length; j++) {
+        const cell = cells[j];
+        const changed = prevDataRef.current[i]?.[j] !== data[i][j];
+        if (cell && changed) {
+          cell.classList.remove(styles.changed);
+          void cell.offsetWidth;
+          cell.classList.add(styles.changed);
+        }
+      }
+    }
+    prevDataRef.current = data;
+  }, [data]);
+
+  const handleKeyDown = (event: React.KeyboardEvent<HTMLTableElement>) => {
+    const activeElement = document.activeElement;
+    if (!activeElement) return;
+    switch (event.key) {
+      case 'Enter':
+        event.preventDefault();
+        if (activeElement instanceof HTMLTableCellElement) {
+          activeElement.click();
+        }
+        break;
+      case 'ArrowUp':
+      case 'ArrowDown':
+      case 'ArrowLeft':
+      case 'ArrowRight':
+        event.preventDefault();
+        if (!(activeElement instanceof HTMLTableCellElement)) return;
+        const direction = event.key === 'ArrowUp' || event.key === 'ArrowLeft' ? 'previous' : 'next';
+        const allCells = Array.from(tableRef.current?.querySelectorAll<HTMLTableCellElement>('td') || []);
+        const currentIndex = allCells.indexOf(activeElement);
+        if (currentIndex === -1) return;
+        let nextIndex = direction === 'next' ? currentIndex + 1 : currentIndex - 1;
+        if (direction === 'previous') {
+          if (nextIndex < 0) nextIndex = allCells.length - 1;
+        } else {
+          if (nextIndex >= allCells.length) nextIndex = 0;
+        }
+        allCells[nextIndex].focus();
+        break;
+    }
+  };
+
+  const targetColorHeader: RGBAColor = { r: 255, g: 255, b: 255, a: ALPHA };
+  const targetColorData: RGBAColor = { r: 255, g: 255, b: 255, a: ALPHA };
+
+  return (
+    <table className={styles.root} ref={tableRef} onKeyDown={handleKeyDown}>
+      <tbody className={styles.body}>
+        {data.map((row, rowIndex) => (
+          <tr key={rowIndex} className={styles.row} tabIndex={0} onClick={() => alert('testing')}>
+            {row.map((cellContent, colIndex) => {
+              let backgroundColor: string;
+              if (rowIndex === 0) {
+                const lightnessFactor = row.length > 1 ? colIndex / (row.length - 1) : 0;
+                const newColor = interpolateColor(BASE_FOREGROUND_RGBA, targetColorHeader, lightnessFactor);
+                backgroundColor = `rgba(${newColor.r}, ${newColor.g}, ${newColor.b}, ${newColor.a.toFixed(2)})`;
+              } else {
+                const numRows = data.length - 1;
+                const maxIndexSum = numRows - 1 + (row.length - 1) || 1;
+                const indexSum = rowIndex - 1 + colIndex;
+                const lightnessFactor = indexSum / maxIndexSum;
+                const newColor = interpolateColor(BASE_BACKGROUND_RGBA, targetColorData, lightnessFactor);
+                backgroundColor = `rgba(${newColor.r}, ${newColor.g}, ${newColor.b}, ${newColor.a.toFixed(2)})`;
+              }
+              return (
+                <td key={colIndex} className={styles.column} style={{ backgroundColor }}>
+                  {cellContent}
+                </td>
+              );
+            })}
+          </tr>
+        ))}
+      </tbody>
+    </table>
+  );
+};
+
+export default DataTable;
+
+================
+File: reference/components/DatePicker.module.scss
+================
+.root {
+  display: inline-block;
+  user-select: none;
+}
+
+.controls {
+  align-items: center;
+  background: var(--theme-border);
+  display: flex;
+  justify-content: space-between;
+}
+
+.button {
+  align-self: stretch;
+  background: none;
+  border: none;
+  color: var(--theme-text);
+  cursor: pointer;
+  display: inline-block;
+  line-height: calc(var(--theme-line-height-base) * 1em);
+  margin: 0;
+  outline: 0;
+  padding: 0 1ch 0 1ch;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    outline: 0;
+  }
+}
+
+.date {
+  min-width: 10%;
+  padding: 0 1ch 0 1ch;
+  text-align: left;
+  width: 100%;
+}
+
+.header {
+  background: var(--theme-border);
+  display: grid;
+  grid-template-columns: repeat(7, 1fr);
+  text-align: center;
+}
+
+.days {
+  background: var(--theme-border-subdued);
+  display: grid;
+  grid-template-columns: repeat(7, 1fr);
+  grid-template-rows: repeat(6, min-content);
+  align-items: start;
+  min-height: calc(var(--theme-line-height-base) * 6em);
+}
+
+.cell {
+  outline: none;
+  padding: 0 1ch 0 1ch;
+  text-align: center;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/DatePicker.tsx
+================
+'use client';
+
+import styles from '@components/DatePicker.module.scss';
+
+import * as React from 'react';
+
+interface DatePickerProps {
+  year?: number;
+  month?: number;
+}
+
+const WEEKDAYS = ['SU', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA'];
+
+const MONTH_NAMES = [
+  'January', 'February', 'March', 'April', 'May', 'June',
+  'July', 'August', 'September', 'October', 'November', 'December'
+];
+
+const MAX_CELLS = 42;
+
+const DatePicker: React.FC<DatePickerProps> = ({ year, month }) => {
+  const today = new Date();
+  const [currentYear, setYear] = React.useState(year || today.getFullYear());
+  const [currentMonth, setMonth] = React.useState(month || today.getMonth() + 1);
+
+  const first = new Date(currentYear, currentMonth - 1, 1);
+  const startingWeekday = first.getDay();
+  const daysInMonth = new Date(currentYear, currentMonth, 0).getDate();
+
+  const cells: React.ReactNode[] = [];
+
+  for (let i = 0; i < startingWeekday; i++) {
+    cells.push(<div key={`empty-start-${i}`} className={styles.dayCell} />);
+  }
+
+  for (let day = 1; day <= daysInMonth; day++) {
+    const presentationDay = String(day).padStart(2, '0');
+    cells.push(
+      <div
+        key={day}
+        className={styles.cell}
+        tabIndex={0}
+        aria-label={`${currentYear}-${String(currentMonth).padStart(2, '0')}-${presentationDay}`}
+      >
+        {presentationDay}
+      </div>
+    );
+  }
+
+  while (cells.length < MAX_CELLS) {
+    cells.push(<div key={`empty-end-${cells.length}`} className={styles.dayCell} />);
+  }
+
+  const onSwitchPreviousMonth = () => {
+    let newMonth = currentMonth - 1;
+    let newYear = currentYear;
+    if (newMonth < 1) {
+      newMonth = 12;
+      newYear--;
+    }
+    setMonth(newMonth);
+    setYear(newYear);
+  };
+
+  const onSwitchNextMonth = () => {
+    let newMonth = currentMonth + 1;
+    let newYear = currentYear;
+    if (newMonth > 12) {
+      newMonth = 1;
+      newYear++;
+    }
+    setMonth(newMonth);
+    setYear(newYear);
+  };
+
+  return (
+    <div className={styles.root}>
+      <div className={styles.controls}>
+        <button type="button" className={styles.button} onClick={onSwitchPreviousMonth} aria-label="Previous month">
+          ▲
+        </button>
+        <div className={styles.date}>
+          {currentYear} {MONTH_NAMES[currentMonth - 1].toUpperCase()}
+        </div>
+        <button type="button" className={styles.button} onClick={onSwitchNextMonth} aria-label="Next month">
+          ▼
+        </button>
+      </div>
+      <div className={styles.header}>
+        {WEEKDAYS.map((day) => (
+          <div key={day} className={styles.cell}>
+            {day}
+          </div>
+        ))}
+      </div>
+      <div className={styles.days}>{cells}</div>
+    </div>
+  );
+};
+
+export default DatePicker;
+
+================
+File: reference/components/DebugGrid.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+const DebugGrid: React.FC = () => {
+  React.useEffect(() => {
+    const debugGrid = document.createElement('div');
+    let isVisible = false;
+
+    const setGridHeight = () => {
+      debugGrid.style.height = `${document.documentElement.scrollHeight}px`;
+    };
+
+    Object.assign(debugGrid.style, {
+      position: 'absolute',
+      top: '0',
+      left: '0',
+      right: '0',
+      zIndex: '-1',
+      margin: '0',
+      backgroundImage: `
+        repeating-linear-gradient(var(--theme-border) 0 1px, transparent 1px 100%),
+        repeating-linear-gradient(90deg, var(--theme-border) 0 1px, transparent 1px 100%)
+      `,
+      backgroundSize: '1ch 1.25rem',
+      pointerEvents: 'none',
+      display: 'none',
+    });
+
+    document.body.appendChild(debugGrid);
+    setGridHeight();
+
+    const toggleDebugGrid = () => {
+      isVisible = !isVisible;
+      debugGrid.style.display = isVisible ? 'block' : 'none';
+    };
+
+    const handleDebugGridToggle = () => toggleDebugGrid();
+
+    const observer = new ResizeObserver(() => {
+      setGridHeight();
+    });
+    observer.observe(document.documentElement);
+
+    window.addEventListener('debugGridToggle', handleDebugGridToggle);
+    window.addEventListener('resize', setGridHeight);
+
+    return () => {
+      document.body.removeChild(debugGrid);
+      window.removeEventListener('resize', setGridHeight);
+      window.removeEventListener('debugGridToggle', handleDebugGridToggle);
+      observer.disconnect();
+    };
+  }, []);
+
+  return null;
+};
+
+export const toggleDebugGrid = (): void => {
+  window.dispatchEvent(new CustomEvent('debugGridToggle'));
+};
+
+export default DebugGrid;
+
+================
+File: reference/components/DefaultMetaTags.tsx
+================
+export default function DefaultMetaTags() {
+  return (
+    <>
+      <meta httpEquiv="content-language" content="en-us" />
+      <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0" />
+      <link rel="icon" type="image/png" sizes="32x32" href="/favicon-16x16.png" />
+      <link rel="icon" type="image/png" sizes="16x16" href="/favicon-32x32.png" />
+      <link rel="shortcut icon" href="/favicon.ico" />
+    </>
+  );
+}
+
+================
+File: reference/components/Dialog.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border);
+  box-shadow: 1ch 1ch 0 0 var(--theme-border-subdued);
+  font-weight: 400;
+  max-width: 56ch;
+  min-width: 24ch;
+  margin: 0;
+  padding: 0;
+}
+
+.header {
+  background: var(--theme-text);
+  color: var(--theme-background);
+  text-align: center;
+  margin: 0;
+  padding: 0;
+  display: block;
+}
+
+.message {
+  display: block;
+  margin: 0;
+  text-align: center;
+  padding: 0 2ch 0 2ch;
+}
+
+.actions {
+  display: flex;
+  justify-content: space-between;
+  align-items: center;
+  max-width: 24ch;
+  margin: 0 auto 0 auto;
+  padding: 0 2ch 0 2ch;
+}
+
+================
+File: reference/components/Dialog.tsx
+================
+import styles from '@components/Dialog.module.scss';
+
+import * as React from 'react';
+
+import Block from '@components/Block';
+import Button from '@components/Button';
+
+interface DialogProps {
+  title?: React.ReactNode;
+  children?: React.ReactNode;
+  style?: React.CSSProperties;
+  onConfirm?: () => void;
+  onCancel?: () => void;
+}
+
+const Dialog: React.FC<DialogProps> = ({ title, children, style, onConfirm, onCancel }) => {
+  const titleId = React.useId();
+  const descId = React.useId();
+
+  return (
+    <div className={styles.root} style={style} role="dialog" aria-modal="true" aria-labelledby={titleId} aria-describedby={descId}>
+      <header className={styles.header}>{title}</header>
+      <br />
+      <article className={styles.message} id={descId}>
+        {children}
+      </article>
+      <br />
+      <div className={styles.actions}>
+        <Button theme="SECONDARY" onClick={onConfirm}>
+          OK
+        </Button>
+        <Block style={{ opacity: 0 }} />
+        <Button theme="SECONDARY" onClick={onCancel}>
+          Cancel
+        </Button>
+      </div>
+      <br />
+    </div>
+  );
+};
+
+export default Dialog;
+
+================
+File: reference/components/Divider.module.scss
+================
+.gradient {
+  background: linear-gradient(to right, transparent, var(--theme-border), transparent);
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  width: 100%;
+}
+
+.divider {
+  align-items: center;
+  border: 0;
+  display: flex;
+  flex-direction: column;
+  flex-shrink: 0;
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  justify-content: center;
+  outline: 0;
+  width: 100%;
+}
+
+.line {
+  background: var(--theme-text);
+  display: block;
+  flex-shrink: 0;
+  height: 2px;
+  width: 100%;
+}
+
+================
+File: reference/components/Divider.tsx
+================
+import styles from '@components/Divider.module.scss';
+
+import * as React from 'react';
+
+interface DividerProps extends React.HTMLAttributes<HTMLSpanElement> {
+  children?: React.ReactNode;
+  type?: string | any;
+  style?: any;
+}
+
+const Divider: React.FC<DividerProps> = ({ children, style, type }) => {
+  if (type === 'GRADIENT') {
+    return <div className={styles.gradient} style={style} />;
+  }
+
+  if (type === 'DOUBLE') {
+    return (
+      <div className={styles.divider} style={style}>
+        <div className={styles.line} style={{ marginBottom: `2px` }} />
+        <div className={styles.line} />
+      </div>
+    );
+  }
+
+  return (
+    <div className={styles.divider} style={style}>
+      <div className={styles.line} />
+    </div>
+  );
+};
+
+export default Divider;
+
+================
+File: reference/components/Drawer.module.scss
+================
+@keyframes fadeInLeft {
+  from {
+    opacity: 0;
+  }
+  to {
+    opacity: 1;
+  }
+}
+
+.root {
+  align-self: stretch;
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+}
+
+.side {
+  animation: fadeInLeft 0.2s ease-out;
+  min-width: 10%;
+  width: 100%;
+  align-self: stretch;
+  min-width: 22ch;
+}
+
+.right {
+  flex-shrink: 0;
+  align-self: stretch;
+  background: var(--theme-background-input);
+  display: flex;
+  align-items: center;
+  width: 3ch;
+}
+
+.action {
+  display: inline-flex;
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  font-size: var(--font-size);
+  user-select: none;
+  cursor: pointer;
+  color: var(--theme-text);
+  background: var(--theme-button-foreground);
+  flex-shrink: 0;
+  align-items: center;
+  justify-content: center;
+  border: 0;
+  outline: 0;
+  margin: 0;
+  padding: 0;
+  width: 100%;
+
+  &:focus {
+    border: 0;
+    outline: 0;
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/Drawer.tsx
+================
+'use client';
+
+import styles from '@components/Drawer.module.scss';
+
+import * as React from 'react';
+
+interface DrawerProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'defaultValue'> {
+  children?: React.ReactNode;
+  defaultValue?: boolean;
+}
+
+const Drawer: React.FC<DrawerProps> = ({ children, defaultValue = false, ...rest }) => {
+  const [expand, setExpand] = React.useState<boolean>(defaultValue);
+
+  return (
+    <div className={styles.root} {...rest}>
+      {expand ? <div className={styles.side}>{children}</div> : null}
+      <div className={styles.right}>
+        <button className={styles.action} onClick={() => setExpand(!expand)}>
+          {expand ? '⭠' : '⭢'}
+        </button>
+      </div>
+    </div>
+  );
+};
+
+export default Drawer;
+
+================
+File: reference/components/DropdownMenu.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border);
+  font-weight: 400;
+}
+
+.footer {
+  background: var(--theme-background-modal-footer);
+  padding: calc(var(--font-size) * 0.5 * var(--theme-line-height-base)) 1ch calc(var(--font-size) * 0.5 * var(--theme-line-height-base)) 1ch;
+}
+
+================
+File: reference/components/DropdownMenu.tsx
+================
+import styles from '@components/DropdownMenu.module.scss';
+
+import * as React from 'react';
+
+import ActionButton from '@components/ActionButton';
+import ActionListItem from '@components/ActionListItem';
+import ModalTrigger from '@components/ModalTrigger';
+
+import { useHotkeys } from '@modules/hotkeys';
+
+interface DropdownMenuItemProps {
+  children: React.ReactNode;
+  icon?: React.ReactNode;
+  href?: string;
+  target?: string;
+  onClick?: () => void;
+  modal?: any;
+  modalProps?: Record<string, unknown>;
+}
+
+interface DropdownMenuProps extends React.HTMLAttributes<HTMLDivElement> {
+  onClose?: (event?: MouseEvent | TouchEvent | KeyboardEvent) => void;
+  items?: DropdownMenuItemProps[];
+}
+
+const DropdownMenu = React.forwardRef<HTMLDivElement, DropdownMenuProps>((props, ref) => {
+  const { onClose, items, style, ...rest } = props;
+
+  const handleHotkey = () => {
+    if (onClose) onClose();
+  };
+
+  useHotkeys('space', handleHotkey);
+
+  return (
+    <div ref={ref} className={styles.root} style={style} {...rest}>
+      {items &&
+        items.map((each, index) => {
+          if (each.modal) {
+            return (
+              <ModalTrigger key={`action-items-${index}`} modal={each.modal} modalProps={each.modalProps}>
+                <ActionListItem children={each.children} icon={each.icon} />
+              </ModalTrigger>
+            );
+          }
+
+          return (
+            <ActionListItem
+              key={`action-items-${index}`}
+              children={each.children}
+              icon={each.icon}
+              href={each.href}
+              target={each.target}
+              onClick={() => {
+                if (each.onClick) {
+                  each.onClick();
+                }
+
+                if (onClose) {
+                  onClose();
+                }
+              }}
+            />
+          );
+        })}
+
+      <footer className={styles.footer}>
+        Press space to{' '}
+        <ActionButton
+          hotkey="␣"
+          onClick={() => {
+            if (onClose) onClose();
+          }}
+        >
+          Close
+        </ActionButton>
+      </footer>
+    </div>
+  );
+});
+
+DropdownMenu.displayName = 'DropdownMenu';
+
+export default DropdownMenu;
+
+================
+File: reference/components/DropdownMenuTrigger.module.scss
+================
+.root {
+  display: inline-block;
+  position: relative;
+}
+
+================
+File: reference/components/DropdownMenuTrigger.tsx
+================
+'use client';
+
+import styles from '@components/DropdownMenuTrigger.module.scss';
+
+import * as Position from '@common/position';
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import DropdownMenu from '@components/DropdownMenu';
+import OutsideElementEvent from '@components/detectors/OutsideElementEvent';
+
+import { createPortal } from 'react-dom';
+import { useHotkeys } from '@modules/hotkeys';
+
+interface DropdownMenuTriggerProps {
+  children: React.ReactElement<React.HTMLAttributes<HTMLElement>>;
+  items: any;
+  hotkey?: string;
+}
+
+function DropdownMenuTrigger({ children, items, hotkey }: DropdownMenuTriggerProps) {
+  const [open, setOpen] = React.useState(false);
+  const [focusChildren, setFocusChildren] = React.useState(false);
+  const [willClose, setWillClose] = React.useState(false);
+  const [placement, setPlacement] = React.useState<Position.Placement>('bottom');
+  const [position, setPosition] = React.useState<{ top: number; left: number }>({ top: 0, left: 0 });
+
+  const triggerRef = React.useRef<HTMLElement>(null);
+  const elementRef = React.useRef<HTMLDivElement>(null);
+
+  const onClick = React.useCallback((event: React.MouseEvent) => {
+    event.preventDefault();
+    setOpen(true);
+  }, []);
+
+  const onOutsideEvent = React.useCallback(() => setOpen(false), []);
+  const onClose = React.useCallback(() => setWillClose(true), []);
+
+  if (hotkey) {
+    useHotkeys(hotkey, () => {
+      setOpen(!open);
+    });
+  }
+
+  React.useEffect(() => {
+    if (focusChildren) {
+      const element = elementRef.current;
+      if (element) {
+        const firstFocusable = Utilities.findFocusableDescendant(element);
+        if (firstFocusable) {
+          firstFocusable.focus();
+        } else {
+          element.focus();
+        }
+      }
+      setFocusChildren(false);
+    }
+  }, [focusChildren]);
+
+  React.useEffect(() => {
+    if (willClose) {
+      setOpen(false);
+      setWillClose(false);
+    }
+  }, [willClose]);
+
+  React.useEffect(() => {
+    if (!open || !triggerRef.current || !elementRef.current) return;
+
+    const updatePosition = () => {
+      const { placement, position } = Position.calculate(triggerRef.current!, elementRef.current!);
+      setPlacement(placement);
+      setPosition(position);
+    };
+
+    updatePosition();
+    setFocusChildren(true);
+
+    const handleResizeOrScroll = () => updatePosition();
+    const observer = new MutationObserver(() => updatePosition());
+    observer.observe(document.body, { attributes: true, childList: true, subtree: true });
+
+    window.addEventListener('resize', handleResizeOrScroll);
+    window.addEventListener('scroll', handleResizeOrScroll, true);
+
+    return () => {
+      window.removeEventListener('resize', handleResizeOrScroll);
+      window.removeEventListener('scroll', handleResizeOrScroll, true);
+      observer.disconnect();
+    };
+  }, [open]);
+
+  const element = open
+    ? createPortal(
+        <OutsideElementEvent onOutsideEvent={onOutsideEvent}>
+          <DropdownMenu
+            onClose={onClose}
+            ref={elementRef}
+            items={items}
+            style={{
+              position: 'absolute',
+              top: `${position.top}px`,
+              left: `${position.left}px`,
+              zIndex: `var(--z-index-page-dropdown-menus)`,
+            }}
+            role="dialog"
+            aria-modal="true"
+          />
+        </OutsideElementEvent>,
+        document.body
+      )
+    : null;
+
+  return (
+    <div className={styles.root}>
+      {React.cloneElement(children, {
+        tabIndex: 0,
+        onClick,
+        // @ts-ignore
+        ref: triggerRef,
+      })}
+      {element}
+    </div>
+  );
+}
+
+export default DropdownMenuTrigger;
+
+================
+File: reference/components/Grid.module.scss
+================
+.grid {
+  display: block;
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+}
+
+================
+File: reference/components/Grid.tsx
+================
+import styles from '@components/Grid.module.scss';
+
+import * as React from 'react';
+
+interface GridProps extends React.HTMLAttributes<HTMLDivElement> {
+  children?: React.ReactNode;
+}
+
+const Grid: React.FC<GridProps> = ({ children, ...rest }) => {
+  return (
+    <div className={styles.grid} {...rest}>
+      {children}
+    </div>
+  );
+};
+
+export default Grid;
+
+================
+File: reference/components/HoverComponentTrigger.module.scss
+================
+.root {
+  display: inline-block;
+  position: relative;
+}
+
+================
+File: reference/components/HoverComponentTrigger.tsx
+================
+'use client';
+
+import styles from '@components/HoverComponentTrigger.module.scss';
+
+import * as React from 'react';
+import * as Position from '@common/position';
+
+import OutsideElementEvent from '@components/detectors/OutsideElementEvent';
+import Popover from '@components/Popover';
+import Tooltip from '@components/Tooltip';
+
+import { createPortal } from 'react-dom';
+
+interface HoverComponentTriggerProps {
+  children: React.ReactElement<React.HTMLAttributes<HTMLElement>>;
+  text: string;
+  component: 'popover' | 'tooltip';
+}
+
+function HoverComponentTrigger({ children, text, component }: HoverComponentTriggerProps) {
+  const [open, setOpen] = React.useState(false);
+  const [placement, setPlacement] = React.useState<Position.Placement>('bottom');
+  const [position, setPosition] = React.useState<{ top: number; left: number }>({ top: 0, left: 0 });
+
+  const triggerRef = React.useRef<HTMLDivElement>(null);
+  const popoverRef = React.useRef<HTMLDivElement>(null);
+
+  const onMouseEnter = () => setOpen(true);
+  const onClick = () => setOpen(true);
+  const onHandleFocus = () => setOpen(true);
+  const onOutsideEvent = () => setOpen(false);
+
+  React.useEffect(() => {
+    if (!open || !triggerRef.current || !popoverRef.current) return;
+
+    const updatePosition = () => {
+      const { placement, position } = Position.calculate(triggerRef.current!, popoverRef.current!);
+      setPlacement(placement);
+      setPosition(position);
+    };
+
+    updatePosition();
+
+    const handleResizeOrScroll = () => updatePosition();
+
+    const mutationObserver = new MutationObserver(() => updatePosition());
+    mutationObserver.observe(document.body, { attributes: true, childList: true, subtree: true });
+
+    window.addEventListener('resize', handleResizeOrScroll);
+    window.addEventListener('scroll', handleResizeOrScroll, true);
+
+    return () => {
+      window.removeEventListener('resize', handleResizeOrScroll);
+      window.removeEventListener('scroll', handleResizeOrScroll, true);
+      mutationObserver.disconnect();
+    };
+  }, [open]);
+
+  const renderComponent = () => {
+    if (component === 'popover') {
+      return (
+        <Popover
+          ref={popoverRef}
+          style={{
+            position: 'absolute',
+            top: `${position.top}px`,
+            left: `${position.left}px`,
+            zIndex: `var(--z-index-page-popover)`,
+          }}
+          role="dialog"
+          aria-modal="true"
+        >
+          {text}
+        </Popover>
+      );
+    } else if (component === 'tooltip') {
+      return (
+        <Tooltip
+          ref={popoverRef}
+          style={{
+            position: 'absolute',
+            top: `${position.top}px`,
+            left: `${position.left}px`,
+            zIndex: `var(--z-index-page-tooltip)`,
+          }}
+        >
+          {text}
+        </Tooltip>
+      );
+    }
+    return null;
+  };
+
+  const popoverElement = open ? createPortal(<OutsideElementEvent onOutsideEvent={onOutsideEvent}>{renderComponent()}</OutsideElementEvent>, document.body) : null;
+
+  return (
+    <div ref={triggerRef} className={styles.root} data-detector-ignore onMouseEnter={onMouseEnter} onClick={onClick} onFocus={onHandleFocus}>
+      {React.cloneElement(children, {
+        tabIndex: 0,
+      })}
+      {popoverElement}
+    </div>
+  );
+}
+
+export default HoverComponentTrigger;
+
+================
+File: reference/components/Indent.module.scss
+================
+.root {
+  display: block;
+  padding: 0 0 0 1ch;
+}
+
+================
+File: reference/components/Indent.tsx
+================
+import styles from '@components/Indent.module.scss';
+
+import * as React from 'react';
+
+interface IndentProps extends React.HTMLAttributes<HTMLDivElement> {
+  children?: React.ReactNode;
+}
+
+const Indent: React.FC<IndentProps> = ({ children, ...rest }) => {
+  return (
+    <div className={styles.root} {...rest}>
+      {children}
+    </div>
+  );
+};
+
+export default Indent;
+
+================
+File: reference/components/Input.module.scss
+================
+.root {
+  position: relative;
+  display: block;
+}
+
+.label {
+  background: var(--theme-border);
+  display: block;
+}
+
+.placeholder {
+  font-style: italic;
+  color: var(--theme-overlay);
+}
+
+.displayed {
+  overflow: hidden;
+  white-space: nowrap;
+  pointer-events: none;
+  overflow-wrap: anywhere;
+  background: var(--theme-background-input);
+  box-shadow: inset 0 0 0 2px var(--theme-border);
+}
+
+.focused {
+  .block {
+    background: var(--theme-focused-foreground);
+  }
+
+  .placeholder {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+@keyframes blink {
+  50% {
+    opacity: 0;
+  }
+}
+
+.blink {
+  animation: blink 1s step-start 0s infinite;
+}
+
+.block {
+  display: inline-block;
+  min-width: 1ch;
+  background: var(--theme-text);
+  color: var(--theme-background);
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  vertical-align: bottom;
+}
+
+.inputContainer {
+  position: relative;
+  display: block;
+}
+
+.hidden {
+  position: absolute;
+  top: 0;
+  left: 0;
+  width: 100%;
+  color: transparent;
+  background: transparent;
+  caret-color: transparent;
+  border: none;
+  outline: none;
+  overflow: hidden;
+  padding: 0;
+  margin: 0;
+  line-height: var(--theme-line-height-base);
+  font-size: var(--font-size);
+  font-family: inherit;
+
+  &:-webkit-autofill {
+    -webkit-box-shadow: 0 0 0px 1000px var(--theme-focused-foreground) inset;
+  }
+}
+
+================
+File: reference/components/Input.tsx
+================
+'use client';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+import styles from '@components/Input.module.scss';
+
+type InputProps = React.InputHTMLAttributes<HTMLInputElement> & {
+  caretChars?: string | any;
+  label?: string | any;
+  isBlink?: boolean;
+};
+
+function Input({ caretChars, isBlink = true, label, placeholder, onChange, type, id, ...rest }: InputProps) {
+  const generatedId = React.useId();
+  const inputId = id || generatedId;
+
+  const inputRef = React.useRef<HTMLInputElement | null>(null);
+  const [text, setText] = React.useState<string>(rest.defaultValue?.toString() || rest.value?.toString() || '');
+  const [isFocused, setIsFocused] = React.useState<boolean>(false);
+  const [selectionStart, setSelectionStart] = React.useState<number>(text.length);
+
+  const lastFocusDirectionRef = React.useRef<'up' | 'down' | null>(null);
+
+  React.useEffect(() => {
+    if (rest.value !== undefined) {
+      const val = rest.value.toString();
+      setText(val);
+      setSelectionStart(val.length);
+    }
+  }, [rest.value]);
+
+  const onHandleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
+    const value = e.target.value;
+    setText(value);
+    if (onChange) {
+      onChange(e);
+    }
+    setSelectionStart(e.target.selectionStart ?? value.length);
+  };
+
+  const onHandleFocus = () => {
+    setIsFocused(true);
+    if (!inputRef.current) return;
+
+    if (lastFocusDirectionRef.current === 'down') {
+      setSelectionStart(text.length);
+      inputRef.current.setSelectionRange(text.length, text.length);
+    } else if (lastFocusDirectionRef.current === 'up') {
+      setSelectionStart(0);
+      inputRef.current.setSelectionRange(0, 0);
+    }
+  };
+
+  const onHandleBlur = () => {
+    setIsFocused(false);
+  };
+
+  const onHandleSelect = (e: React.SyntheticEvent<HTMLInputElement>) => {
+    const inputEl = e.currentTarget as HTMLInputElement;
+    setSelectionStart(inputEl.selectionStart ?? text.length);
+  };
+
+  const onHandleClick = (e: React.MouseEvent<HTMLInputElement>) => {
+    const inputEl = e.currentTarget as HTMLInputElement;
+    inputEl.focus();
+    setSelectionStart(inputEl.selectionStart ?? text.length);
+  };
+
+  const onHandleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
+    if (e.key === 'ArrowUp') {
+      e.preventDefault();
+      lastFocusDirectionRef.current = 'up';
+      const previousFocusable = Utilities.findNextFocusable(document.activeElement, 'previous');
+      previousFocusable?.focus();
+    } else if (e.key === 'ArrowDown') {
+      e.preventDefault();
+      lastFocusDirectionRef.current = 'down';
+      const nextFocusable = Utilities.findNextFocusable(document.activeElement, 'next');
+      nextFocusable?.focus();
+    }
+  };
+
+  const isPlaceholderVisible = !text && placeholder;
+  const containerClasses = Utilities.classNames(styles.root, isFocused && styles.focused);
+
+  const maskText = (t: string) => (type === 'password' ? '•'.repeat(t.length) : t);
+
+  const beforeCaretText = isPlaceholderVisible ? placeholder ?? '' : maskText(text.substring(0, selectionStart));
+  const afterCaretText = isPlaceholderVisible ? '' : maskText(text.substring(selectionStart));
+
+  return (
+    <div className={containerClasses}>
+      {label && (
+        <label htmlFor={inputId} className={styles.label}>
+          {label}
+        </label>
+      )}
+      <div className={styles.inputContainer}>
+        <div className={Utilities.classNames(styles.displayed, isPlaceholderVisible && styles.placeholder)}>
+          {beforeCaretText}
+          {!isPlaceholderVisible && <span className={Utilities.classNames(styles.block, isBlink && styles.blink)}>{caretChars || ''}</span>}
+          {!isPlaceholderVisible && afterCaretText}
+        </div>
+        <input id={inputId} ref={inputRef} className={styles.hidden} value={text} aria-placeholder={placeholder} type={type} onFocus={onHandleFocus} onBlur={onHandleBlur} onChange={onHandleChange} onSelect={onHandleSelect} onClick={onHandleClick} onKeyDown={onHandleKeyDown} {...rest} />
+      </div>
+    </div>
+  );
+}
+
+export default Input;
+
+================
+File: reference/components/ListItem.module.scss
+================
+.root {
+  padding-left: 1ch;
+
+  &:focus {
+    outline: 0;
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/ListItem.tsx
+================
+'use client';
+
+import styles from '@components/ListItem.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+const ListItem = ({ children }) => {
+  const itemRef = React.useRef<HTMLLIElement>(null);
+
+  const handleKeyDown = (event: React.KeyboardEvent<HTMLLIElement>) => {
+    switch (event.key) {
+      case 'Enter':
+        event.preventDefault();
+        itemRef.current?.click();
+        break;
+      case 'ArrowUp':
+      case 'ArrowLeft': {
+        event.preventDefault();
+        const previousFocusable = Utilities.findNextFocusable(document.activeElement, 'previous');
+        previousFocusable?.focus();
+        break;
+      }
+      case 'ArrowDown':
+      case 'ArrowRight': {
+        event.preventDefault();
+        const nextFocusable = Utilities.findNextFocusable(document.activeElement, 'next');
+        nextFocusable?.focus();
+        break;
+      }
+      default:
+        break;
+    }
+  };
+
+  return (
+    <li className={styles.root} tabIndex={0} ref={itemRef} onKeyDown={handleKeyDown}>
+      {children}
+    </li>
+  );
+};
+
+export default ListItem;
+
+================
+File: reference/components/MatrixLoader.module.scss
+================
+.container {
+  width: 100%;
+  height: auto;
+  position: relative;
+}
+
+.root {
+  display: block;
+  width: 100%;
+  background: transparent;
+}
+
+================
+File: reference/components/MatrixLoader.tsx
+================
+'use client';
+
+import styles from '@components/MatrixLoader.module.scss';
+
+import * as React from 'react';
+
+interface MatrixLoaderProps {
+  rows?: number;
+  direction?: undefined | 'top-to-bottom' | 'left-to-right';
+  mode?: undefined | 'greek' | 'katakana';
+}
+
+// TODO(jimmylee)
+// Move these constants into a separate file
+// Dynamically compute these constants since we're going to
+// Support t-shirt sizes for the system.
+const LINE_HEIGHT = 20;
+const CHARACTER_WIDTH = 9.6;
+
+function onTextGeneration({ mode = 'greek' }) {
+  if (mode === 'greek') {
+    const isUppercase = Math.random() < 0.5;
+
+    return String.fromCharCode(isUppercase ? 0x0391 + Math.floor(Math.random() * (0x03a9 - 0x0391 + 1)) : 0x03b1 + Math.floor(Math.random() * (0x03c9 - 0x03b1 + 1)));
+  }
+
+  if (mode === 'katakana') {
+    const japaneseRanges = [{ start: 0x30a0, end: 0x30ff }];
+
+    const allJapaneseCharacters = japaneseRanges.flatMap((range) => Array.from({ length: range.end - range.start + 1 }, (_, i) => range.start + i));
+
+    const randomJapaneseCharacter = allJapaneseCharacters[Math.floor(Math.random() * allJapaneseCharacters.length)];
+    return String.fromCharCode(randomJapaneseCharacter);
+  }
+
+  return '0';
+}
+
+const MatrixLoader: React.FC<MatrixLoaderProps> = ({ rows = 25, direction = 'top-to-bottom', mode = 'greek' }) => {
+  const canvasRef = React.useRef<HTMLCanvasElement>(null);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+
+    const parent = canvas.parentElement;
+    if (!parent) return;
+
+    const resizeCanvas = () => {
+      const parentWidth = parent.clientWidth;
+      const parentHeight = rows * LINE_HEIGHT;
+
+      const dpr = window.devicePixelRatio || 1;
+
+      canvas.style.width = parentWidth + 'px';
+      canvas.style.height = parentHeight + 'px';
+      canvas.width = Math.floor(parentWidth * dpr);
+      canvas.height = Math.floor(parentHeight * dpr);
+
+      const ctx = canvas.getContext('2d');
+      if (ctx) {
+        ctx.scale(dpr, dpr);
+      }
+    };
+
+    resizeCanvas();
+
+    window.addEventListener('resize', resizeCanvas);
+
+    return () => {
+      window.removeEventListener('resize', resizeCanvas);
+    };
+  }, [rows]);
+
+  React.useEffect(() => {
+    const canvas = canvasRef.current;
+    if (!canvas) return;
+    const ctx = canvas.getContext('2d');
+    if (!ctx) return;
+
+    let interval: number;
+
+    const drawMatrix = () => {
+      const w = canvas.width;
+      const h = canvas.height;
+
+      if (direction === 'top-to-bottom') {
+        const cols = Math.floor(w / CHARACTER_WIDTH);
+        const ypos: number[] = Array(cols).fill(0);
+
+        const matrix = () => {
+          const themeTextColor = getComputedStyle(document.body).getPropertyValue('--theme-text').trim();
+          const fontFamily = getComputedStyle(document.body).getPropertyValue('--font-family-mono').trim();
+
+          ctx.globalCompositeOperation = 'destination-out';
+          ctx.fillStyle = 'rgba(255, 255, 255, 0.05)';
+          ctx.fillRect(0, 0, w, h);
+          ctx.textBaseline = 'top';
+          ctx.font = `16px ${fontFamily}`;
+
+          ctx.globalCompositeOperation = 'source-over';
+
+          ypos.forEach((y, ind) => {
+            const text = onTextGeneration({ mode });
+            const x = ind * CHARACTER_WIDTH;
+
+            ctx.fillStyle = themeTextColor;
+            ctx.fillText(text, x, y);
+
+            if (y > h + Math.random() * 10000) {
+              ypos[ind] = 0;
+            } else {
+              ypos[ind] = y + LINE_HEIGHT;
+            }
+          });
+        };
+
+        interval = window.setInterval(matrix, 50);
+      } else if (direction === 'left-to-right') {
+        const totalRows = rows; // Use rows directly for total rows
+        const xpos: number[] = Array(totalRows).fill(0);
+
+        const matrix = () => {
+          const themeTextColor = getComputedStyle(document.body).getPropertyValue('--theme-text').trim();
+          const fontFamily = getComputedStyle(document.body).getPropertyValue('--font-family-mono').trim();
+
+          ctx.globalCompositeOperation = 'destination-out';
+          ctx.fillStyle = 'rgba(255, 255, 255, 0.05)';
+          ctx.fillRect(0, 0, w, h);
+          ctx.textBaseline = 'top';
+          ctx.font = `16px ${fontFamily}`;
+
+          ctx.globalCompositeOperation = 'source-over';
+
+          xpos.forEach((x, ind) => {
+            const text = onTextGeneration({ mode });
+            const y = ind * LINE_HEIGHT;
+
+            ctx.fillStyle = themeTextColor;
+            ctx.fillText(text, x, y);
+
+            if (x > w + Math.random() * 10000) {
+              xpos[ind] = 0;
+            } else {
+              xpos[ind] = x + CHARACTER_WIDTH;
+            }
+          });
+        };
+
+        interval = window.setInterval(matrix, 50);
+      }
+    };
+
+    drawMatrix();
+
+    return () => {
+      window.clearInterval(interval);
+    };
+  }, [rows, direction, mode]);
+
+  return (
+    <div className={styles.container}>
+      <canvas className={styles.root} ref={canvasRef} />
+    </div>
+  );
+};
+
+export default MatrixLoader;
+
+================
+File: reference/components/Message.module.scss
+================
+.message {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+  margin-bottom: calc(var(--font-size) * var(--theme-line-height-base));
+
+  &:last-child {
+    margin-bottom: 0px;
+  }
+}
+
+.left {
+  align-self: stretch;
+  flex-shrink: 0;
+  display: flex;
+  align-items: flex-end;
+  position: relative;
+}
+
+.triangle {
+  display: inline-block;
+  width: 0;
+  height: 0;
+  border-top: calc((var(--font-size) * var(--theme-line-height-base)) / 2) solid transparent;
+  border-bottom: calc((var(--font-size) * var(--theme-line-height-base)) / 2) solid transparent;
+  border-right: 1ch solid var(--theme-border);
+  margin-bottom: calc((var(--font-size) * var(--theme-line-height-base)) / 2);
+}
+
+.right {
+  min-width: 10%;
+  width: 100%;
+  text-align: left;
+}
+
+.bubble {
+  padding: calc(8px * var(--theme-line-height-base)) 1ch calc(8px * var(--theme-line-height-base)) 1ch;
+  background: var(--theme-border);
+  display: inline-block;
+  box-shadow: 1ch 1ch 0 0 var(--theme-border-subdued);
+}
+
+================
+File: reference/components/Message.tsx
+================
+import styles from '@components/Message.module.scss';
+
+export default function Message(props) {
+  return (
+    <div className={styles.message}>
+      <div className={styles.left}>
+        <figure className={styles.triangle} />
+      </div>
+      <div className={styles.right}>
+        <div className={styles.bubble}>{props.children}</div>
+      </div>
+    </div>
+  );
+}
+
+================
+File: reference/components/MessageViewer.module.scss
+================
+.message {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+  margin-bottom: calc(var(--font-size) * var(--theme-line-height-base));
+}
+
+.bubble {
+  display: inline-block;
+  background: var(--theme-focused-foreground);
+  padding: calc(8px * var(--theme-line-height-base)) 1ch calc(8px * var(--theme-line-height-base)) 1ch;
+}
+
+.left {
+  min-width: 10%;
+  width: 100%;
+  text-align: right;
+}
+
+.right {
+  align-self: stretch;
+  flex-shrink: 0;
+  display: flex;
+  align-items: flex-end;
+}
+
+.triangle {
+  display: inline-block;
+  width: 0;
+  height: 0;
+  border-top: calc((var(--font-size) * var(--theme-line-height-base)) / 2) solid transparent;
+  border-bottom: calc((var(--font-size) * var(--theme-line-height-base)) / 2) solid transparent;
+  border-left: 1ch solid var(--theme-focused-foreground);
+  margin-bottom: calc((var(--font-size) * var(--theme-line-height-base)) / 2);
+}
+
+================
+File: reference/components/MessageViewer.tsx
+================
+import styles from '@components/MessageViewer.module.scss';
+
+export default function MessageViewer(props) {
+  return (
+    <div className={styles.message}>
+      <div className={styles.left}>
+        <div className={styles.bubble}>{props.children}</div>
+      </div>
+      <div className={styles.right}>
+        <figure className={styles.triangle} />
+      </div>
+    </div>
+  );
+}
+
+================
+File: reference/components/ModalStack.module.scss
+================
+.root {
+  align-items: center;
+  bottom: 0;
+  display: flex;
+  justify-content: center;
+  left: 0;
+  pointer-events: none;
+  position: fixed;
+  right: 0;
+  top: 0;
+  z-index: var(--z-index-page-modals);
+}
+
+.item {
+  pointer-events: auto;
+  position: absolute;
+  transition:
+    opacity 0.2s ease,
+    transform 0.4s ease;
+}
+
+================
+File: reference/components/ModalStack.tsx
+================
+'use client';
+
+import styles from '@components/ModalStack.module.scss';
+
+import * as React from 'react';
+
+import { useModals } from '@components/page/ModalContext';
+
+interface ModalStackProps {}
+
+const ModalStack: React.FC<ModalStackProps> = () => {
+  const { modalStack } = useModals();
+
+  const totalModals = modalStack.length;
+
+  return (
+    <div className={styles.root}>
+      {modalStack.map((modalState, index) => {
+        const { key, component: ModalComponent, props } = modalState;
+
+        const offsetFromLast = totalModals - 1 - index;
+        const translateY = -offsetFromLast * 40;
+        const blur = offsetFromLast * 1.1;
+
+        return (
+          <div
+            key={key}
+            className={styles.item}
+            style={{
+              zIndex: 10 + index,
+              transform: `translateY(${translateY}px)`,
+              filter: `blur(${blur}px)`,
+            }}
+          >
+            <ModalComponent {...props} />
+          </div>
+        );
+      })}
+    </div>
+  );
+};
+
+export default ModalStack;
+
+================
+File: reference/components/ModalTrigger.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+import { useModals } from '@components/page/ModalContext';
+
+interface ModalTriggerProps {
+  children: React.ReactElement<{ onClick?: React.MouseEventHandler }>;
+  modal: React.ComponentType<any>;
+  modalProps?: Record<string, any>;
+}
+
+function ModalTrigger({ children, modal, modalProps = {} }: ModalTriggerProps) {
+  const { open } = useModals();
+
+  const onHandleOpenModal = () => {
+    open(modal, modalProps);
+  };
+
+  return React.cloneElement(children, {
+    onClick: onHandleOpenModal,
+  });
+}
+
+export default ModalTrigger;
+
+================
+File: reference/components/Navigation.module.scss
+================
+.root {
+  display: flex;
+  align-items: center;
+  justify-content: space-between;
+  background: var(--theme-border);
+}
+
+.logo {
+  flex-shrink: 0;
+  padding: 0 1ch 0 1ch;
+  display: inline-flex;
+  color: var(--theme-text);
+  background: var(--theme-border);
+  text-decoration: none;
+  border: 0;
+  outline: 0;
+  border-radius: 0;
+  margin: 0;
+  font-size: var(--font-size);
+
+  &:visited {
+    color: var(--theme-text);
+  }
+
+  &:hover {
+    color: var(--theme-text);
+    background: var(--theme-focused-foreground);
+  }
+
+  &:focus {
+    outline: 0;
+    border: 0;
+    margin: 0;
+    padding: 0 1ch 0 1ch;
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.left {
+  flex-shrink: 0;
+}
+
+.children {
+  min-width: 10%;
+  width: 100%;
+}
+
+.right {
+  flex-shrink: 0;
+}
+
+================
+File: reference/components/Navigation.tsx
+================
+'use client';
+
+import styles from '@components/Navigation.module.scss';
+
+import * as React from 'react';
+
+interface NavigationProps extends React.HTMLAttributes<HTMLElement> {
+  children?: React.ReactNode;
+  logoHref?: string;
+  logoTarget?: React.HTMLAttributeAnchorTarget;
+  onClickLogo?: React.MouseEventHandler<HTMLButtonElement>;
+  logo?: React.ReactNode;
+  left?: React.ReactNode;
+  right?: React.ReactNode;
+}
+
+const Navigation: React.FC<NavigationProps> = ({ children, logoHref, logoTarget, onClickLogo, logo, left, right }) => {
+  let logoElement = <button className={styles.logo}>{logo}</button>;
+
+  if (onClickLogo) {
+    logoElement = (
+      <button className={styles.logo} onClick={onClickLogo}>
+        {logo}
+      </button>
+    );
+  }
+
+  if (logoHref) {
+    logoElement = (
+      <a href={logoHref} className={styles.logo} target={logoTarget}>
+        {logo}
+      </a>
+    );
+  }
+
+  return (
+    <nav className={styles.root}>
+      {logoElement}
+      <section className={styles.left}>{left}</section>
+      <section className={styles.children}>{children}</section>
+      <section className={styles.right}>{right}</section>
+    </nav>
+  );
+};
+
+export default Navigation;
+
+================
+File: reference/components/NumberRangeSlider.module.scss
+================
+.root {
+  display: flex;
+  align-items: center;
+  justify-content: space-between;
+}
+
+.amount {
+  flex-shrink: 0;
+  background: var(--theme-text);
+  color: var(--theme-background);
+  font-weight: 400;
+  padding: 0 1ch 0 1ch;
+}
+
+.slider {
+  border-radius: 0;
+  display: block;
+  margin: 0;
+  padding: 0;
+  width: 100%;
+  min-width: 10%;
+
+  -webkit-appearance: none;
+  -moz-appearance: none;
+  appearance: none;
+
+  background: var(--theme-border-subdued);
+
+  &:focus {
+    background: linear-gradient(to right, transparent, var(--theme-focused-foreground));
+    outline: none;
+  }
+
+  &:hover {
+    background: linear-gradient(to right, transparent, var(--theme-focused-foreground));
+    cursor: pointer;
+  }
+
+  &::-webkit-slider-thumb {
+    -webkit-appearance: none;
+    appearance: none;
+    font-size: var(--font-size);
+    width: 1ch;
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: var(--theme-button-foreground);
+    vertical-align: bottom;
+    cursor: pointer;
+    border-radius: 0;
+  }
+
+  /* Customizing the track */
+  &::-webkit-slider-runnable-track {
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: var(--theme-border-subdued);
+    border-radius: 0;
+  }
+
+  &::-moz-range-thumb {
+    -moz-appearance: none;
+    appearance: none;
+    font-size: var(--font-size);
+    width: 1ch;
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: var(--theme-button-foreground);
+    vertical-align: bottom;
+    cursor: pointer;
+    border: none;
+    border-radius: 0;
+  }
+
+  &::-moz-range-track {
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: var(--theme-border-subdued);
+    border-radius: 0;
+  }
+
+  &::-ms-thumb {
+    appearance: none;
+    font-size: var(--font-size);
+    width: 1ch;
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: var(--theme-button-foreground);
+    vertical-align: bottom;
+    cursor: pointer;
+    border: none;
+    border-radius: 0;
+  }
+
+  &::-ms-track {
+    height: calc(var(--font-size) * var(--theme-line-height-base));
+    background: transparent;
+    border-color: transparent;
+    color: transparent;
+  }
+
+  &::-ms-fill-lower {
+    background: var(--theme-border-subdued);
+  }
+
+  &::-ms-fill-upper {
+    background: var(--theme-border-subdued);
+  }
+}
+
+================
+File: reference/components/NumberRangeSlider.tsx
+================
+'use client';
+
+import styles from '@components/NumberRangeSlider.module.scss';
+
+import * as React from 'react';
+
+interface RangerProps {
+  defaultValue?: number;
+  max?: number;
+  min?: number;
+  step?: number;
+}
+
+const NumberRangeSlider: React.FC<RangerProps> = ({ defaultValue = 0, max = 5000, min = 0, step = 1 }) => {
+  const sliderRef = React.useRef<HTMLInputElement>(null);
+  const [displayValue, setDisplayValue] = React.useState<number>(defaultValue);
+
+  const maxDigits = max.toString().length;
+
+  const padValue = (value: number): string => {
+    return value.toString().padStart(maxDigits, '0');
+  };
+
+  React.useEffect(() => {
+    if (sliderRef.current) {
+      sliderRef.current.value = String(defaultValue);
+    }
+    setDisplayValue(defaultValue);
+  }, [defaultValue]);
+
+  const scrub = (event: React.ChangeEvent<HTMLInputElement>): void => {
+    const value = parseInt(event.target.value, 10);
+    setDisplayValue(value);
+  };
+
+  return (
+    <div className={styles.root}>
+      <label className={styles.left}>
+        <div className={styles.amount}>{padValue(displayValue)}</div>
+      </label>
+      <input className={styles.slider} defaultValue={defaultValue} max={max} min={min} onChange={scrub} ref={sliderRef} role="slider" step={step} tabIndex={0} type="range" />
+    </div>
+  );
+};
+
+export default NumberRangeSlider;
+
+================
+File: reference/components/Popover.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border);
+  box-shadow: 0 0 0 1ch var(--theme-border-subdued);
+  padding: calc(var(--font-size) * var(--theme-line-height-base)) 2ch calc(var(--font-size) * var(--theme-line-height-base)) 2ch;
+  font-weight: 400;
+}
+
+================
+File: reference/components/Popover.tsx
+================
+import styles from '@components/Popover.module.scss';
+
+import * as React from 'react';
+
+interface PopoverProps extends React.HTMLAttributes<HTMLDivElement> {}
+
+const Popover = React.forwardRef<HTMLDivElement, PopoverProps>(({ style: propStyle, ...rest }, ref) => {
+  const style: React.CSSProperties = { ...propStyle };
+
+  return <div ref={ref} className={styles.root} {...rest} style={style} />;
+});
+
+Popover.displayName = 'Popover';
+
+export default Popover;
+
+================
+File: reference/components/Providers.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+import { ModalProvider } from '@components/page/ModalContext';
+
+interface ProvidersProps {
+  children: React.ReactNode;
+}
+
+const Providers: React.FC<ProvidersProps> = ({ children }) => {
+  return <ModalProvider>{children}</ModalProvider>;
+};
+
+export default Providers;
+
+================
+File: reference/components/RadioButton.module.scss
+================
+.section {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+  position: relative;
+
+  .right {
+    padding-bottom: calc(8px * var(--theme-line-height-base));
+    box-shadow: inset 0 1px 0 0 var(--theme-border-subdued);
+  }
+
+  &:last-child {
+    .right {
+      padding-bottom: 0;
+    }
+  }
+}
+
+.figure {
+  display: inline-flex;
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  cursor: pointer;
+  color: var(--theme-text);
+  background: var(--theme-button-foreground);
+  width: 3ch;
+  align-items: center;
+  justify-content: center;
+}
+
+.selected {
+  .figure {
+    background: var(--theme-text);
+  }
+}
+
+.dot {
+  display: inline-block;
+  width: 1ch;
+  height: 1ch;
+  background: var(--theme-background);
+  transform: rotate(45deg);
+  vertical-align: middle;
+}
+
+.focused {
+  .figure {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.relative {
+  flex-shrink: 0;
+  display: inline-block;
+  vertical-align: baseline;
+}
+
+.right {
+  background: var(--theme-button-background);
+  min-width: 10%;
+  width: 100%;
+  align-self: stretch;
+}
+
+.input {
+  position: absolute;
+  height: 1px;
+  width: 1px;
+  opacity: 0;
+  background: transparent;
+  border: 0;
+  outline: 0;
+  margin: 0;
+  padding: 0;
+}
+
+================
+File: reference/components/RadioButton.tsx
+================
+import styles from '@components/RadioButton.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface RadioButtonProps {
+  style?: React.CSSProperties;
+  name: string;
+  value: string;
+  selected?: boolean;
+  onSelect?: (value: string) => void;
+  children?: React.ReactNode;
+}
+
+const RadioButton: React.FC<RadioButtonProps> = ({ style, name, value, selected = false, onSelect, children }) => {
+  const radioId = `${name}-${value}-radio`;
+  const [isFocused, setIsFocused] = React.useState(false);
+
+  const handleFocus = () => setIsFocused(true);
+  const handleBlur = () => setIsFocused(false);
+
+  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
+    switch (event.key) {
+      case 'Enter':
+        event.preventDefault();
+        onSelect?.(value);
+        break;
+      case 'ArrowUp':
+      case 'ArrowLeft':
+        event.preventDefault();
+        Utilities.findNextFocusable(document.activeElement, 'previous')?.focus();
+        break;
+      case 'Tab':
+      case 'ArrowDown':
+      case 'ArrowRight':
+        event.preventDefault();
+        Utilities.findNextFocusable(document.activeElement, 'next')?.focus();
+        break;
+      default:
+        break;
+    }
+  };
+
+  const handleChange = () => {
+    onSelect?.(value);
+  };
+
+  return (
+    <div
+      className={Utilities.classNames(styles.section, {
+        [styles.focused]: isFocused,
+        [styles.selected]: selected,
+      })}
+      style={style}
+    >
+      <input className={styles.input} id={radioId} type="radio" name={name} value={value} checked={selected} onFocus={handleFocus} onBlur={handleBlur} onKeyDown={handleKeyDown} onChange={handleChange} />
+      <div className={styles.relative}>
+        <label className={styles.figure} htmlFor={radioId}>
+          {selected ? <span aria-hidden="true" className={styles.dot} /> : null}
+        </label>
+      </div>
+      <div className={styles.right}>&nbsp;&nbsp;{children}</div>
+    </div>
+  );
+};
+
+export default RadioButton;
+
+================
+File: reference/components/RadioButtonGroup.tsx
+================
+'use client';
+
+import * as React from 'react';
+
+import RadioButton from '@components/RadioButton';
+
+interface RadioButtonGroupProps {
+  options: { value: string; label: string }[];
+  defaultValue?: string;
+}
+
+const RadioButtonGroup: React.FC<RadioButtonGroupProps> = ({ options, defaultValue = '' }) => {
+  const [selectedValue, setSelectedValue] = React.useState<string>(defaultValue);
+
+  const handleSelect = (value: string) => {
+    setSelectedValue(value);
+  };
+
+  return (
+    <>
+      {options.map((option) => (
+        <RadioButton key={option.value} name="example" value={option.value} selected={selectedValue === option.value} onSelect={handleSelect}>
+          {option.label}
+        </RadioButton>
+      ))}
+    </>
+  );
+};
+
+export default RadioButtonGroup;
+
+================
+File: reference/components/Row.module.scss
+================
+.row {
+  display: block;
+  outline: 0;
+  border: 0;
+  transition: 200ms ease background;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/Row.tsx
+================
+'use client';
+
+import styles from '@components/Row.module.scss';
+
+import * as React from 'react';
+
+type RowProps = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const Row = React.forwardRef<HTMLElement, RowProps>(({ children, ...rest }, ref) => {
+  return (
+    <section className={styles.row} ref={ref} {...rest}>
+      {children}
+    </section>
+  );
+});
+
+Row.displayName = 'Row';
+
+export default Row;
+
+================
+File: reference/components/RowEllipsis.module.scss
+================
+.row {
+  display: block;
+  outline: 0;
+  border: 0;
+  transition: 200ms ease background;
+  white-space: nowrap;
+  overflow: hidden;
+  text-overflow: ellipsis;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/RowEllipsis.tsx
+================
+'use client';
+
+import styles from '@components/RowEllipsis.module.scss';
+
+import * as React from 'react';
+
+type RowEllipsisProps = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const RowEllipsis = React.forwardRef<HTMLElement, RowEllipsisProps>(({ children, ...rest }, ref) => {
+  return (
+    <section className={styles.row} ref={ref} {...rest}>
+      {children}
+    </section>
+  );
+});
+
+RowEllipsis.displayName = 'RowEllipsis';
+
+export default RowEllipsis;
+
+================
+File: reference/components/RowSpaceBetween.module.scss
+================
+.row {
+  display: flex;
+  justify-content: space-between;
+  outline: 0;
+  border: 0;
+  transition: 200ms ease background;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+================
+File: reference/components/RowSpaceBetween.tsx
+================
+'use client';
+
+import styles from '@components/RowSpaceBetween.module.scss';
+
+import * as React from 'react';
+
+type RowSpaceBetweenProps = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const RowSpaceBetween = React.forwardRef<HTMLElement, RowSpaceBetweenProps>(({ children, ...rest }, ref) => {
+  return (
+    <section className={styles.row} ref={ref} {...rest}>
+      {children}
+    </section>
+  );
+});
+
+RowSpaceBetween.displayName = 'RowSpaceBetween';
+
+export default RowSpaceBetween;
+
+================
+File: reference/components/Select.module.scss
+================
+.select {
+  align-items: flex-start;
+  cursor: default;
+  display: flex;
+  justify-content: space-between;
+  outline: none;
+  position: relative;
+  z-index: var(--z-index-page-select);
+}
+
+.control {
+  align-self: stretch;
+  background: var(--theme-button-foreground);
+  cursor: pointer;
+  flex-shrink: 0;
+  padding: 0 1ch 0 1ch;
+
+  &.focused {
+    background: var(--theme-text);
+    color: var(--theme-background);
+  }
+}
+
+.display {
+  background: var(--theme-border);
+  border: 0;
+  color: var(--theme-text);
+  cursor: pointer;
+  font-family: var(--font-family-mono);
+  font-size: var(--font-size);
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+  margin: 0;
+  min-width: 10%;
+  outline: 0;
+  padding: 0;
+  padding-left: 3ch;
+  text-align: left;
+  user-select: none;
+  width: 100%;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    border: 0;
+    outline: 0;
+  }
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.menu {
+  background-color: var(--theme-border-subdued);
+  left: 3ch;
+  list-style-type: none;
+  padding: 0;
+  right: 0;
+  z-index: var(--z-index-page-select);
+}
+
+.item {
+  border: 0;
+  cursor: pointer;
+  outline: 0;
+  padding-left: 6ch;
+  user-select: none;
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    border: 0;
+    outline: 0;
+  }
+}
+
+================
+File: reference/components/Select.tsx
+================
+'use client';
+
+import styles from '@components/Select.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+interface SelectProps {
+  name: string;
+  options: string[];
+  placeholder?: string;
+  defaultValue?: string;
+  onChange?: (selectedValue: string) => void;
+}
+
+const Select: React.FC<SelectProps> = ({ name, options, placeholder, defaultValue = '', onChange }) => {
+  const [isOpen, setIsOpen] = React.useState(false);
+  const [index, setIndex] = React.useState(-1);
+  const [selectedValue, setSelectedValue] = React.useState(defaultValue);
+
+  const containerRef = React.useRef<HTMLButtonElement | null>(null);
+
+  const handleOpen = () => {
+    setIsOpen(true);
+    const currentIndex = options.indexOf(selectedValue);
+    setIndex(currentIndex >= 0 ? currentIndex : 0);
+  };
+
+  const handleClose = () => {
+    setIsOpen(false);
+    setIndex(-1);
+
+    if (containerRef && containerRef.current) {
+      containerRef.current?.focus();
+    }
+  };
+
+  const handleSelect = (value: string) => {
+    setSelectedValue(value);
+    onChange?.(value);
+    handleClose();
+  };
+
+  return (
+    <>
+      <section className={styles.select}>
+        <figure
+          className={Utilities.classNames(isOpen ? styles.focused : null, styles.control)}
+          onClick={() => {
+            isOpen ? handleClose() : handleOpen();
+          }}
+        >
+          ▼
+        </figure>
+        <button
+          className={styles.display}
+          ref={containerRef}
+          tabIndex={0}
+          onClick={() => {
+            isOpen ? handleClose() : handleOpen();
+          }}
+          aria-haspopup="listbox"
+          aria-expanded={isOpen}
+        >
+          {selectedValue || placeholder}
+        </button>
+      </section>
+
+      {isOpen && (
+        <ul className={styles.menu} role="listbox">
+          {options.map((option, idx) => {
+            return (
+              <li key={option} role="option" tabIndex={0} className={Utilities.classNames(styles.item)} onClick={() => handleSelect(option)}>
+                {option}
+              </li>
+            );
+          })}
+        </ul>
+      )}
+    </>
+  );
+};
+
+export default Select;
+
+================
+File: reference/components/SidebarLayout.module.scss
+================
+.root {
+  display: flex;
+  align-items: flex-start;
+  justify-content: space-between;
+  white-space: pre-wrap;
+}
+
+.sidebar {
+  align-self: stretch;
+  flex-shrink: 0;
+  width: 20ch;
+}
+
+.handle {
+  align-self: stretch;
+  flex-shrink: 0;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  width: 3ch;
+  outline: 0;
+  border: 0;
+  cursor: col-resize;
+
+  &:hover {
+    .line {
+      background: var(--theme-focused-foreground);
+    }
+  }
+
+  &:focus {
+    outline: 0;
+    border: 0;
+
+    .line {
+      background: var(--theme-focused-foreground);
+    }
+  }
+}
+
+.line {
+  align-self: stretch;
+  width: 2px;
+  background: var(--theme-text);
+
+  &:first-child {
+    margin-left: 1px;
+    margin-right: 2px;
+  }
+}
+
+.content {
+  min-width: 10%;
+  width: 100%;
+}
+
+================
+File: reference/components/SidebarLayout.tsx
+================
+'use client';
+
+import styles from '@components/SidebarLayout.module.scss';
+import * as React from 'react';
+
+interface SidebarLayoutProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'defaultValue'> {
+  children?: React.ReactNode;
+  sidebar?: React.ReactNode;
+  defaultSidebarWidth?: number;
+  isShowingHandle?: boolean;
+  isReversed?: boolean;
+}
+
+const LINE_HEIGHT = 20;
+const CHARACTER_WIDTH = 9.6;
+
+const SidebarLayout: React.FC<SidebarLayoutProps> = ({ defaultSidebarWidth = 20, children, sidebar, isShowingHandle = false, isReversed = false, ...rest }) => {
+  const [sidebarWidth, setSidebarWidth] = React.useState(defaultSidebarWidth);
+  const handleRef = React.useRef<HTMLDivElement>(null);
+
+  const handleMouseDown = (event: React.MouseEvent<HTMLDivElement>) => {
+    const startX = event.clientX;
+    const startWidth = sidebarWidth;
+
+    const onMouseMove = (moveEvent: MouseEvent) => {
+      const deltaX = moveEvent.clientX - startX;
+      const increment = Math.round(deltaX / CHARACTER_WIDTH);
+      setSidebarWidth(Math.max(CHARACTER_WIDTH, startWidth + increment));
+    };
+
+    const onMouseUp = () => {
+      document.removeEventListener('mousemove', onMouseMove);
+      document.removeEventListener('mouseup', onMouseUp);
+    };
+
+    document.addEventListener('mousemove', onMouseMove);
+    document.addEventListener('mouseup', onMouseUp);
+  };
+
+  if (isReversed) {
+    return (
+      <div className={styles.root} {...rest}>
+        <div className={styles.content}>{children}</div>
+        &nbsp;
+        <div
+          className={styles.sidebar}
+          style={{
+            width: `${sidebarWidth}ch`,
+          }}
+        >
+          {sidebar}
+        </div>
+      </div>
+    );
+  }
+
+  return (
+    <div className={styles.root} {...rest}>
+      <div
+        className={styles.sidebar}
+        style={{
+          width: `${sidebarWidth}ch`,
+        }}
+      >
+        {sidebar}
+      </div>
+      {isShowingHandle ? (
+        <div className={styles.handle} ref={handleRef} role="button" tabIndex={0} onMouseDown={handleMouseDown} style={isShowingHandle ? {} : { width: `0.5ch` }}>
+          <>
+            <div className={styles.line} />
+            <div className={styles.line} />
+          </>
+        </div>
+      ) : null}
+      <div className={styles.content}>{children}</div>
+    </div>
+  );
+};
+
+export default SidebarLayout;
+
+================
+File: reference/components/Table.module.scss
+================
+.root {
+  border: 0;
+  outline: 0;
+  margin: 0;
+  padding: 0;
+  position: relative;
+  width: 100%;
+  border-spacing: 0px;
+  -webkit-text-size-adjust: 100%;
+}
+
+.body {
+}
+
+================
+File: reference/components/Table.tsx
+================
+'use client';
+
+import styles from '@components/Table.module.scss';
+
+import * as React from 'react';
+
+type TableProps = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const Table = ({ children, ...rest }) => {
+  return (
+    <table className={styles.root} {...rest}>
+      <tbody className={styles.body}>{children}</tbody>
+    </table>
+  );
+};
+
+Table.displayName = 'Table';
+
+export default Table;
+
+================
+File: reference/components/TableColumn.module.scss
+================
+.root {
+  border: 0;
+  outline: 0;
+  margin: 0;
+  padding: 0;
+  transition: background-color 0.5s ease;
+  padding-left: 1ch;
+  font-size: var(--font-size);
+  flex-shrink: 0;
+  -webkit-text-size-adjust: 100%;
+
+  &:first-child {
+    padding-left: 0px;
+  }
+}
+
+================
+File: reference/components/TableColumn.tsx
+================
+'use client';
+
+import styles from '@components/TableColumn.module.scss';
+
+import * as React from 'react';
+
+type TableColumnProps = React.HTMLAttributes<HTMLTableCellElement> & {
+  children?: React.ReactNode;
+};
+
+const TableColumn: React.FC<TableColumnProps> = ({ children, ...rest }) => {
+  return (
+    <td className={styles.root} {...rest}>
+      {children}
+    </td>
+  );
+};
+
+TableColumn.displayName = 'TableColumn';
+
+export default TableColumn;
+
+================
+File: reference/components/TableRow.module.scss
+================
+.root {
+  border: 0;
+  outline: 0;
+  margin: 0;
+  padding: 0;
+
+  transition: transform 0.5s ease;
+  border-spacing: 0px;
+  -webkit-text-size-adjust: 100%;
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    outline: 0;
+  }
+}
+
+================
+File: reference/components/TableRow.tsx
+================
+'use client';
+
+import styles from '@components/TableRow.module.scss';
+
+import * as React from 'react';
+
+type TableRowProps = React.HTMLAttributes<HTMLElement> & {
+  children?: React.ReactNode;
+};
+
+const TableRow = ({ children, ...rest }) => {
+  return (
+    <tr className={styles.root} tabIndex={0} {...rest}>
+      {children}
+    </tr>
+  );
+};
+
+TableRow.displayName = 'TableRow';
+
+export default TableRow;
+
+================
+File: reference/components/Text.module.scss
+================
+.text {
+  white-space: pre-wrap;
+  overflow-wrap: break-word;
+}
+
+================
+File: reference/components/Text.tsx
+================
+import styles from '@components/Text.module.scss';
+
+import * as React from 'react';
+
+interface TextProps extends React.HTMLAttributes<HTMLParagraphElement> {
+  children?: React.ReactNode;
+}
+
+const Text: React.FC<TextProps> = ({ children, ...rest }) => {
+  return (
+    <p className={styles.text} {...rest}>
+      {children}
+    </p>
+  );
+};
+
+export default Text;
+
+================
+File: reference/components/TextArea.module.scss
+================
+.root {
+  position: relative;
+}
+
+.placeholder {
+  opacity: 0.7;
+  font-style: italic;
+}
+
+.displayed {
+  white-space: pre-wrap;
+  word-wrap: break-word;
+  pointer-events: none;
+  overflow-wrap: anywhere;
+}
+
+.hidden {
+  white-space: pre-wrap;
+  word-wrap: break-word;
+  pointer-events: none;
+  overflow-wrap: anywhere;
+  position: absolute;
+  visibility: hidden;
+  width: 100%;
+  overflow: auto;
+}
+
+.focused {
+  .block {
+    background: var(--theme-focused-foreground);
+  }
+
+  .placeholder {
+    background: var(--theme-focused-foreground);
+  }
+}
+
+@keyframes blink {
+  50% {
+    opacity: 0;
+  }
+}
+
+.blink {
+  animation: blink 1s step-start 0s infinite;
+}
+
+.block {
+  display: inline-block;
+  min-width: 1ch;
+  background: var(--theme-text);
+  height: calc(var(--font-size) * var(--theme-line-height-base));
+  vertical-align: bottom;
+}
+
+.hiddenElement {
+  position: absolute;
+  top: 0;
+  left: 0;
+  width: 100%;
+  height: 100%;
+  color: transparent;
+  background: transparent;
+  caret-color: transparent;
+  border: none;
+  resize: none;
+  outline: none;
+  overflow: hidden;
+  padding: 0;
+  margin: 0;
+  line-height: var(--theme-line-height-base);
+  font-size: var(--font-size);
+  font-family: inherit;
+}
+
+================
+File: reference/components/TextArea.tsx
+================
+'use client';
+
+import styles from '@components/TextArea.module.scss';
+
+import * as React from 'react';
+import * as Utilities from '@common/utilities';
+
+type TextAreaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement> & {
+  autoPlay?: string;
+  autoPlaySpeedMS?: number;
+  isBlink?: boolean;
+};
+function TextArea({ autoPlay, autoPlaySpeedMS = 40, isBlink, placeholder, onChange, ...rest }: TextAreaProps) {
+  const textAreaRef = React.useRef<HTMLTextAreaElement | null>(null);
+  const measurementRef = React.useRef<HTMLDivElement | null>(null);
+
+  const [text, setText] = React.useState<string>(rest.defaultValue?.toString() || rest.value?.toString() || '');
+  const [isAutoPlaying, setIsAutoPlaying] = React.useState<boolean>(!!autoPlay);
+  const [isFocused, setIsFocused] = React.useState<boolean>(false);
+  const [selectionStart, setSelectionStart] = React.useState<number>(0);
+
+  const autoPlayIntervalRef = React.useRef<NodeJS.Timeout | null>(null);
+  const autoPlayIndexRef = React.useRef<number>(0);
+
+  const [currentLineIndex, setCurrentLineIndex] = React.useState<number>(0);
+  const [totalLines, setTotalLines] = React.useState<number>(0);
+
+  React.useEffect(() => {
+    if (textAreaRef.current && isFocused) {
+      textAreaRef.current.setSelectionRange(selectionStart, selectionStart);
+    }
+  }, [selectionStart, isFocused]);
+
+  React.useEffect(() => {
+    if (rest.value !== undefined) {
+      const val = rest.value.toString();
+      setText(val);
+      setIsAutoPlaying(false);
+      if (autoPlayIntervalRef.current) {
+        clearInterval(autoPlayIntervalRef.current);
+      }
+      setSelectionStart(val.length);
+    }
+  }, [rest.value]);
+
+  React.useEffect(() => {
+    if (autoPlay && !rest.value && !rest.defaultValue) {
+      setIsAutoPlaying(true);
+      autoPlayIndexRef.current = 0;
+      setText('');
+      if (autoPlayIntervalRef.current) clearInterval(autoPlayIntervalRef.current);
+
+      autoPlayIntervalRef.current = setInterval(() => {
+        autoPlayIndexRef.current++;
+        if (!autoPlay) return;
+        if (autoPlayIndexRef.current > autoPlay.length) {
+          setIsAutoPlaying(false);
+          clearInterval(autoPlayIntervalRef.current!);
+          return;
+        }
+        const newText = autoPlay.slice(0, autoPlayIndexRef.current);
+        setText(newText);
+        setSelectionStart(newText.length);
+      }, autoPlaySpeedMS);
+    }
+
+    return () => {
+      if (autoPlayIntervalRef.current) clearInterval(autoPlayIntervalRef.current);
+    };
+  }, [autoPlay, rest.value, rest.defaultValue]);
+
+  const resizeTextArea = React.useCallback(() => {
+    if (!textAreaRef.current) return;
+    textAreaRef.current.style.height = 'auto';
+    textAreaRef.current.style.height = `${textAreaRef.current.scrollHeight}px`;
+  }, []);
+
+  React.useEffect(() => {
+    resizeTextArea();
+    window.addEventListener('resize', resizeTextArea);
+    return () => window.removeEventListener('resize', resizeTextArea);
+  }, [resizeTextArea]);
+
+  const onHandleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
+    const value = e.target.value;
+    setText(value);
+    setIsAutoPlaying(false);
+    if (autoPlayIntervalRef.current) {
+      clearInterval(autoPlayIntervalRef.current);
+    }
+    resizeTextArea();
+    if (onChange) {
+      onChange(e);
+    }
+    setSelectionStart(e.target.selectionStart ?? 0);
+  };
+
+  const onHandleSelect = (e: React.SyntheticEvent<HTMLTextAreaElement>) => {
+    const textarea = e.currentTarget as HTMLTextAreaElement;
+    setSelectionStart(textarea.selectionStart);
+  };
+
+  const onHandleFocus = () => {
+    setIsFocused(true);
+    if (textAreaRef.current) {
+      setSelectionStart(textAreaRef.current.selectionStart);
+    }
+  };
+
+  const onHandleBlur = () => {
+    setIsFocused(false);
+  };
+
+  const onHandleClick = (e: React.MouseEvent<HTMLTextAreaElement>) => {
+    const textarea = e.currentTarget as HTMLTextAreaElement;
+    textarea.focus();
+    setSelectionStart(textarea.selectionStart);
+  };
+
+  React.useLayoutEffect(() => {
+    if (!measurementRef.current) return;
+
+    const measurementEl = measurementRef.current;
+    const computedStyle = window.getComputedStyle(measurementEl);
+    const lineHeightStr = computedStyle.lineHeight;
+    let lineHeight = 20;
+    if (lineHeightStr.endsWith('px')) {
+      lineHeight = parseFloat(lineHeightStr);
+    }
+
+    const countLines = (content: string) => {
+      measurementEl.textContent = content || '\u00A0';
+      const height = measurementEl.offsetHeight;
+      return Math.round(height / lineHeight);
+    };
+
+    const displayString = text || placeholder || '';
+
+    const textBeforeCaret = text.substring(0, selectionStart);
+    const textAfterCaret = text.substring(selectionStart);
+
+    const total = countLines(displayString);
+    setTotalLines(total > 0 ? total - 1 : 0);
+
+    const currentLines = countLines(textBeforeCaret);
+    setCurrentLineIndex(currentLines > 0 ? currentLines - 1 : 0);
+  }, [text, selectionStart, placeholder]);
+
+  const onHandleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
+    if (e.key === 'ArrowUp' && currentLineIndex === 0) {
+      e.preventDefault();
+      const previousFocusable = Utilities.findNextFocusable(document.activeElement, 'previous');
+      previousFocusable?.focus();
+    } else if (e.key === 'ArrowDown' && currentLineIndex === totalLines) {
+      e.preventDefault();
+      const nextFocusable = Utilities.findNextFocusable(document.activeElement, 'next');
+      nextFocusable?.focus();
+    }
+  };
+
+  const isPlaceholderVisible = !text && placeholder;
+
+  const containerClasses = Utilities.classNames(styles.root, isFocused && styles.focused);
+
+  return (
+    <div className={containerClasses}>
+      <div className={Utilities.classNames(styles.displayed, isPlaceholderVisible && styles.placeholder)}>
+        {isPlaceholderVisible ? placeholder : text.substring(0, selectionStart)}
+        {!isPlaceholderVisible && <span className={Utilities.classNames(styles.block, isBlink && styles.blink)}></span>}
+        {!isPlaceholderVisible && text.substring(selectionStart)}
+      </div>
+
+      <div ref={measurementRef} className={styles.hidden}></div>
+
+      <textarea className={styles.hiddenElement} ref={textAreaRef} value={text} aria-placeholder={placeholder} onFocus={onHandleFocus} onBlur={onHandleBlur} onKeyDown={onHandleKeyDown} onChange={onHandleChange} onSelect={onHandleSelect} onClick={onHandleClick} {...rest} />
+    </div>
+  );
+}
+
+export default TextArea;
+
+================
+File: reference/components/Tooltip.module.scss
+================
+.root {
+  display: block;
+  background: var(--theme-border);
+  box-shadow: 0.5ch 0.5ch 0 0 var(--theme-border-subdued);
+  font-weight: 400;
+  max-width: 24ch;
+}
+
+================
+File: reference/components/Tooltip.tsx
+================
+import styles from '@components/Tooltip.module.scss';
+
+import * as React from 'react';
+
+interface TooltipProps extends React.HTMLAttributes<HTMLDivElement> {}
+
+const Tooltip = React.forwardRef<HTMLDivElement, TooltipProps>(({ style: propStyle, ...rest }, ref) => {
+  const style: React.CSSProperties = { ...propStyle };
+
+  return <div ref={ref} className={styles.root} {...rest} style={style} />;
+});
+
+Tooltip.displayName = 'Tooltip';
+
+export default Tooltip;
+
+================
+File: reference/components/TreeView.module.scss
+================
+.root {
+  white-space: nowrap;
+  -webkit-text-size-adjust: 100%;
+}
+
+.item {
+  cursor: pointer;
+
+  &:focus {
+    outline: 0;
+    border: 0;
+    background: var(--theme-focused-foreground);
+  }
+}
+
+.empty {
+  opacity: 0.5;
+}
+
+================
+File: reference/components/TreeView.tsx
+================
+'use client';
+
+import styles from '@components/TreeView.module.scss';
+
+import * as React from 'react';
+
+interface TreeViewProps {
+  children?: React.ReactNode;
+  defaultValue?: boolean;
+  depth?: number;
+  isFile?: boolean;
+  isLastChild?: boolean;
+  isRoot?: boolean;
+  parentLines?: boolean[];
+  style?: any;
+  title: string;
+}
+
+const TreeView: React.FC<TreeViewProps> = ({ defaultValue = false, title, children, depth = 0, isFile = false, isRoot = false, isLastChild = false, style, parentLines = [] }) => {
+  const [show, setShow] = React.useState<boolean>(defaultValue);
+
+  const onToggleShow = (): void => {
+    if (!isFile) setShow((prevShow) => !prevShow);
+  };
+
+  const hasChildren = React.Children.count(children) > 0;
+  const isEmptyFolder = !isFile && !hasChildren;
+
+  const spacing = parentLines.map((line) => (line ? '│ . ' : '. . ')).join('');
+  const endPrefix = isLastChild ? '└───' : '├───';
+  const prefix = `${spacing}${endPrefix}`;
+  const icon = isFile ? ' ' : show ? '╦ ' : '╤ ';
+
+  const updatedParentLines = [...parentLines, !isLastChild];
+
+  return (
+    <div className={styles.root} style={style}>
+      <div tabIndex={0} role="button" onClick={onToggleShow} className={styles.item} aria-expanded={show}>
+        {prefix}
+        {icon}
+        {title}
+      </div>
+      {show && hasChildren && (
+        <div>
+          {React.Children.map(children, (child, index) =>
+            React.isValidElement(child)
+              ? React.cloneElement(child as React.ReactElement<TreeViewProps>, {
+                  depth: depth + 1,
+                  isLastChild: index === React.Children.count(children) - 1,
+                  parentLines: updatedParentLines,
+                })
+              : child
+          )}
+        </div>
+      )}
+    </div>
+  );
+};
+
+export default TreeView;
+
+================
+File: reference/modules/hotkeys/bound-hotkeys-proxy-provider.tsx
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/BoundHotkeysProxyProvider.tsx
+
+import { createContext, ReactNode, useContext } from 'react'
+import { Hotkey } from '@modules/hotkeys/types'
+
+type BoundHotkeysProxyProviderType = {
+  addHotkey: (hotkey: Hotkey) => void
+  removeHotkey: (hotkey: Hotkey) => void
+}
+
+const BoundHotkeysProxyProvider = createContext<BoundHotkeysProxyProviderType | undefined>(undefined)
+
+export const useBoundHotkeysProxy = () => {
+  return useContext(BoundHotkeysProxyProvider)
+}
+
+interface Props {
+  children: ReactNode
+  addHotkey: (hotkey: Hotkey) => void
+  removeHotkey: (hotkey: Hotkey) => void
+}
+
+export default function BoundHotkeysProxyProviderProvider({ addHotkey, removeHotkey, children }: Props) {
+  return (
+    <BoundHotkeysProxyProvider.Provider value={{ addHotkey, removeHotkey }}>
+      {children}
+    </BoundHotkeysProxyProvider.Provider>
+  )
+}
+
+================
+File: reference/modules/hotkeys/hotkeys-provider.tsx
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/HotkeysProvider.tsx
+import { Hotkey } from '@modules/hotkeys/types'
+import { createContext, ReactNode, useState, useContext, useCallback } from 'react'
+import BoundHotkeysProxyProviderProvider from '@modules/hotkeys/bound-hotkeys-proxy-provider'
+
+import * as Utilities from '@common/utilities';
+
+export type HotkeysContextType = {
+  hotkeys: ReadonlyArray<Hotkey>
+  enabledScopes: string[]
+  toggleScope: (scope: string) => void
+  enableScope: (scope: string) => void
+  disableScope: (scope: string) => void
+}
+
+// The context is only needed for special features like global scoping, so we use a graceful default fallback
+const HotkeysContext = createContext<HotkeysContextType>({
+  hotkeys: [],
+  enabledScopes: [], // This array has to be empty instead of containing '*' as default, to check if the provider is set or not
+  toggleScope: () => {},
+  enableScope: () => {},
+  disableScope: () => {},
+})
+
+export const useHotkeysContext = () => {
+  return useContext(HotkeysContext)
+}
+
+interface Props {
+  initiallyActiveScopes?: string[]
+  children: ReactNode
+}
+
+export const HotkeysProvider = ({ initiallyActiveScopes = ['*'], children }: Props) => {
+  const [internalActiveScopes, setInternalActiveScopes] = useState(
+    initiallyActiveScopes?.length > 0 ? initiallyActiveScopes : ['*']
+  )
+  const [boundHotkeys, setBoundHotkeys] = useState<Hotkey[]>([])
+
+  const enableScope = useCallback((scope: string) => {
+    setInternalActiveScopes((prev) => {
+      if (prev.includes('*')) {
+        return [scope]
+      }
+
+      return Array.from(new Set([...prev, scope]))
+    })
+  }, [])
+
+  const disableScope = useCallback((scope: string) => {
+    setInternalActiveScopes((prev) => {
+      if (prev.filter((s) => s !== scope).length === 0) {
+        return ['*']
+      } else {
+        return prev.filter((s) => s !== scope)
+      }
+    })
+  }, [])
+
+  const toggleScope = useCallback((scope: string) => {
+    setInternalActiveScopes((prev) => {
+      if (prev.includes(scope)) {
+        if (prev.filter((s) => s !== scope).length === 0) {
+          return ['*']
+        } else {
+          return prev.filter((s) => s !== scope)
+        }
+      } else {
+        if (prev.includes('*')) {
+          return [scope]
+        }
+
+        return Array.from(new Set([...prev, scope]))
+      }
+    })
+  }, [])
+
+  const addBoundHotkey = useCallback((hotkey: Hotkey) => {
+    setBoundHotkeys((prev) => [...prev, hotkey])
+  }, [])
+
+  const removeBoundHotkey = useCallback((hotkey: Hotkey) => {
+    setBoundHotkeys((prev) => prev.filter((h) => !Utilities.deepEqual(h, hotkey)))
+  }, [])
+
+  return (
+    <HotkeysContext.Provider
+      value={{ enabledScopes: internalActiveScopes, hotkeys: boundHotkeys, enableScope, disableScope, toggleScope }}
+    >
+      <BoundHotkeysProxyProviderProvider addHotkey={addBoundHotkey} removeHotkey={removeBoundHotkey}>
+        {children}
+      </BoundHotkeysProxyProviderProvider>
+    </HotkeysContext.Provider>
+  )
+}
+
+================
+File: reference/modules/hotkeys/index.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/index.ts
+
+import useHotkeys from '@modules/hotkeys/use-hotkeys'
+import type { Options, Keys, HotkeyCallback } from '@modules/hotkeys/types'
+import { HotkeysProvider, useHotkeysContext } from '@modules/hotkeys/hotkeys-provider'
+import { isHotkeyPressed } from '@modules/hotkeys/is-hotkey-pressed'
+import useRecordHotkeys from '@modules/hotkeys/use-record-hotkeys'
+
+export {
+  useHotkeys,
+  useRecordHotkeys,
+  useHotkeysContext,
+  isHotkeyPressed,
+  HotkeysProvider,
+  Options,
+  Keys,
+  HotkeyCallback,
+}
+
+================
+File: reference/modules/hotkeys/is-hotkey-pressed.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/isHotkeyPressed.ts
+
+import { isHotkeyModifier, mapKey } from '@modules/hotkeys/parse-hotkeys'
+;(() => {
+  if (typeof document !== 'undefined') {
+    document.addEventListener('keydown', (e) => {
+      if (e.key === undefined) {
+        // Synthetic event (e.g., Chrome autofill).  Ignore.
+        return
+      }
+
+      pushToCurrentlyPressedKeys([mapKey(e.key), mapKey(e.code)])
+    })
+
+    document.addEventListener('keyup', (e) => {
+      if (e.key === undefined) {
+        // Synthetic event (e.g., Chrome autofill).  Ignore.
+        return
+      }
+
+      removeFromCurrentlyPressedKeys([mapKey(e.key), mapKey(e.code)])
+    })
+  }
+
+  if (typeof window !== 'undefined') {
+    window.addEventListener('blur', () => {
+      currentlyPressedKeys.clear()
+    })
+  }
+})()
+
+const currentlyPressedKeys: Set<string> = new Set<string>()
+
+// https://github.com/microsoft/TypeScript/issues/17002
+export function isReadonlyArray(value: unknown): value is readonly unknown[] {
+  return Array.isArray(value)
+}
+
+export function isHotkeyPressed(key: string | readonly string[], splitKey = ','): boolean {
+  const hotkeyArray = isReadonlyArray(key) ? key : key.split(splitKey)
+
+  return hotkeyArray.every((hotkey) => currentlyPressedKeys.has(hotkey.trim().toLowerCase()))
+}
+
+export function pushToCurrentlyPressedKeys(key: string | string[]): void {
+  const hotkeyArray = Array.isArray(key) ? key : [key]
+
+  /*
+  Due to a weird behavior on macOS we need to clear the set if the user pressed down the meta key and presses another key.
+  https://stackoverflow.com/questions/11818637/why-does-javascript-drop-keyup-events-when-the-metakey-is-pressed-on-mac-browser
+  Otherwise the set will hold all ever pressed keys while the meta key is down which leads to wrong results.
+   */
+  if (currentlyPressedKeys.has('meta')) {
+    currentlyPressedKeys.forEach((key) => !isHotkeyModifier(key) && currentlyPressedKeys.delete(key.toLowerCase()))
+  }
+
+  hotkeyArray.forEach((hotkey) => currentlyPressedKeys.add(hotkey.toLowerCase()))
+}
+
+export function removeFromCurrentlyPressedKeys(key: string | string[]): void {
+  const hotkeyArray = Array.isArray(key) ? key : [key]
+
+  /*
+  Due to a weird behavior on macOS we need to clear the set if the user pressed down the meta key and presses another key.
+  https://stackoverflow.com/questions/11818637/why-does-javascript-drop-keyup-events-when-the-metakey-is-pressed-on-mac-browser
+  Otherwise the set will hold all ever pressed keys while the meta key is down which leads to wrong results.
+   */
+  if (key === 'meta') {
+    currentlyPressedKeys.clear()
+  } else {
+    hotkeyArray.forEach((hotkey) => currentlyPressedKeys.delete(hotkey.toLowerCase()))
+  }
+}
+
+================
+File: reference/modules/hotkeys/parse-hotkeys.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/parseHotkeys.ts
+
+import { Hotkey, KeyboardModifiers } from '@modules/hotkeys/types'
+
+const reservedModifierKeywords = ['shift', 'alt', 'meta', 'mod', 'ctrl']
+
+const mappedKeys: Record<string, string> = {
+  esc: 'escape',
+  return: 'enter',
+  '.': 'period',
+  ',': 'comma',
+  '-': 'slash',
+  ' ': 'space',
+  '`': 'backquote',
+  '#': 'backslash',
+  '+': 'bracketright',
+  ShiftLeft: 'shift',
+  ShiftRight: 'shift',
+  AltLeft: 'alt',
+  AltRight: 'alt',
+  MetaLeft: 'meta',
+  MetaRight: 'meta',
+  OSLeft: 'meta',
+  OSRight: 'meta',
+  ControlLeft: 'ctrl',
+  ControlRight: 'ctrl',
+}
+
+export function mapKey(key?: string): string {
+  return ((key && mappedKeys[key]) || key || '')
+    .trim()
+    .toLowerCase()
+    .replace(/key|digit|numpad|arrow/, '')
+}
+
+export function isHotkeyModifier(key: string) {
+  return reservedModifierKeywords.includes(key)
+}
+
+export function parseKeysHookInput(keys: string, splitKey = ','): string[] {
+  return keys.split(splitKey)
+}
+
+export function parseHotkey(hotkey: string, combinationKey = '+', description?: string): Hotkey {
+  const keys = hotkey
+    .toLocaleLowerCase()
+    .split(combinationKey)
+    .map((k) => mapKey(k))
+
+  const modifiers: KeyboardModifiers = {
+    alt: keys.includes('alt'),
+    ctrl: keys.includes('ctrl') || keys.includes('control'),
+    shift: keys.includes('shift'),
+    meta: keys.includes('meta'),
+    mod: keys.includes('mod'),
+  }
+
+  const singleCharKeys = keys.filter((k) => !reservedModifierKeywords.includes(k))
+
+  return {
+    ...modifiers,
+    keys: singleCharKeys,
+    description,
+    hotkey,
+  }
+}
+
+================
+File: reference/modules/hotkeys/types.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/types.ts
+import type { DependencyList } from 'react'
+
+export type FormTags = 'input' | 'textarea' | 'select' | 'INPUT' | 'TEXTAREA' | 'SELECT'
+export type Keys = string | readonly string[]
+export type Scopes = string | readonly string[]
+
+export type RefType<T> = T | null
+
+export type KeyboardModifiers = {
+  alt?: boolean
+  ctrl?: boolean
+  meta?: boolean
+  shift?: boolean
+  mod?: boolean
+}
+
+export type Hotkey = KeyboardModifiers & {
+  keys?: readonly string[]
+  scopes?: Scopes
+  description?: string
+  hotkey: string
+}
+
+export type HotkeysEvent = Hotkey
+
+export type HotkeyCallback = (keyboardEvent: KeyboardEvent, hotkeysEvent: HotkeysEvent) => void
+
+export type Trigger = boolean | ((keyboardEvent: KeyboardEvent, hotkeysEvent: HotkeysEvent) => boolean)
+
+export type Options = {
+  enabled?: Trigger // Main setting that determines if the hotkey is enabled or not. (Default: true)
+  enableOnFormTags?: readonly FormTags[] | boolean // Enable hotkeys on a list of tags. (Default: false)
+  enableOnContentEditable?: boolean // Enable hotkeys on tags with contentEditable props. (Default: false)
+  ignoreEventWhen?: (e: KeyboardEvent) => boolean // Ignore evenets based on a condition (Default: undefined)
+  combinationKey?: string // Character to split keys in hotkeys combinations. (Default: +)
+  splitKey?: string // Character to separate different hotkeys. (Default: ,)
+  scopes?: Scopes // Scope
+  keyup?: boolean // Trigger on keyup event? (Default: undefined)
+  keydown?: boolean // Trigger on keydown event? (Default: true)
+  preventDefault?: Trigger // Prevent default browser behavior? (Default: false)
+  description?: string // Use this option to describe what the hotkey does. (Default: undefined)
+  document?: Document // Listen to events on the document instead of the window. (Default: false)
+  ignoreModifiers?: boolean // Ignore modifiers when matching hotkeys. (Default: false)
+}
+
+export type OptionsOrDependencyArray = Options | DependencyList
+
+================
+File: reference/modules/hotkeys/use-deep-equal-memo.ts
+================
+import { useRef } from 'react'
+
+import * as Utilities from '@common/utilities';
+
+export default function useDeepEqualMemo<T>(value: T) {
+  const ref = useRef<T | undefined>(undefined)
+
+  if (!Utilities.deepEqual(ref.current, value)) {
+    ref.current = value
+  }
+
+  return ref.current
+}
+
+================
+File: reference/modules/hotkeys/use-hotkeys.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/useHotkeys.ts
+
+import { HotkeyCallback, Keys, Options, OptionsOrDependencyArray, RefType } from '@modules/hotkeys/types'
+import { DependencyList, RefCallback, useCallback, useEffect, useState, useLayoutEffect, useRef } from 'react'
+import { mapKey, parseHotkey, parseKeysHookInput } from '@modules/hotkeys/parse-hotkeys'
+import {
+  isHotkeyEnabled,
+  isHotkeyEnabledOnTag,
+  isHotkeyMatchingKeyboardEvent,
+  isKeyboardEventTriggeredByInput,
+  isScopeActive,
+  maybePreventDefault,
+} from '@modules/hotkeys/validators'
+import { useHotkeysContext } from '@modules/hotkeys/hotkeys-provider'
+import { useBoundHotkeysProxy } from '@modules/hotkeys/bound-hotkeys-proxy-provider'
+import useDeepEqualMemo from '@modules/hotkeys/use-deep-equal-memo'
+import { isReadonlyArray, pushToCurrentlyPressedKeys, removeFromCurrentlyPressedKeys } from '@modules/hotkeys/is-hotkey-pressed'
+
+const stopPropagation = (e: KeyboardEvent): void => {
+  e.stopPropagation()
+  e.preventDefault()
+  e.stopImmediatePropagation()
+}
+
+const useSafeLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect
+
+export default function useHotkeys<T extends HTMLElement>(
+  keys: Keys,
+  callback: HotkeyCallback,
+  options?: OptionsOrDependencyArray,
+  dependencies?: OptionsOrDependencyArray
+) {
+  const [ref, setRef] = useState<RefType<T>>(null)
+  const hasTriggeredRef = useRef(false)
+
+  const _options: Options | undefined = !(options instanceof Array)
+    ? (options as Options)
+    : !(dependencies instanceof Array)
+    ? (dependencies as Options)
+    : undefined
+  const _keys: string = isReadonlyArray(keys) ? keys.join(_options?.splitKey) : keys
+  const _deps: DependencyList | undefined =
+    options instanceof Array ? options : dependencies instanceof Array ? dependencies : undefined
+
+  const memoisedCB = useCallback(callback, _deps ?? [])
+  const cbRef = useRef<HotkeyCallback>(memoisedCB)
+
+  if (_deps) {
+    cbRef.current = memoisedCB
+  } else {
+    cbRef.current = callback
+  }
+
+  const memoisedOptions = useDeepEqualMemo(_options)
+
+  const { enabledScopes } = useHotkeysContext()
+  const proxy = useBoundHotkeysProxy()
+
+  useSafeLayoutEffect(() => {
+    if (memoisedOptions?.enabled === false || !isScopeActive(enabledScopes, memoisedOptions?.scopes)) {
+      return
+    }
+
+    const listener = (e: KeyboardEvent, isKeyUp = false) => {
+      if (isKeyboardEventTriggeredByInput(e) && !isHotkeyEnabledOnTag(e, memoisedOptions?.enableOnFormTags)) {
+        return
+      }
+
+      // TODO: SINCE THE EVENT IS NOW ATTACHED TO THE REF, THE ACTIVE ELEMENT CAN NEVER BE INSIDE THE REF. THE HOTKEY ONLY TRIGGERS IF THE
+      // REF IS THE ACTIVE ELEMENT. THIS IS A PROBLEM SINCE FOCUSED SUB COMPONENTS WON'T TRIGGER THE HOTKEY.
+      if (ref !== null) {
+        const rootNode = ref.getRootNode()
+        if (
+          (rootNode instanceof Document || rootNode instanceof ShadowRoot) &&
+          rootNode.activeElement !== ref &&
+          !ref.contains(rootNode.activeElement)
+        ) {
+          stopPropagation(e)
+          return
+        }
+      }
+
+      if ((e.target as HTMLElement)?.isContentEditable && !memoisedOptions?.enableOnContentEditable) {
+        return
+      }
+
+      parseKeysHookInput(_keys, memoisedOptions?.splitKey).forEach((key) => {
+        const hotkey = parseHotkey(key, memoisedOptions?.combinationKey)
+
+        if (isHotkeyMatchingKeyboardEvent(e, hotkey, memoisedOptions?.ignoreModifiers) || hotkey.keys?.includes('*')) {
+          if (memoisedOptions?.ignoreEventWhen?.(e)) {
+            return
+          }
+
+          if (isKeyUp && hasTriggeredRef.current) {
+            return
+          }
+
+          maybePreventDefault(e, hotkey, memoisedOptions?.preventDefault)
+
+          if (!isHotkeyEnabled(e, hotkey, memoisedOptions?.enabled)) {
+            stopPropagation(e)
+
+            return
+          }
+
+          // Execute the user callback for that hotkey
+          cbRef.current(e, hotkey)
+
+          if (!isKeyUp) {
+            hasTriggeredRef.current = true
+          }
+        }
+      })
+    }
+
+    const handleKeyDown = (event: KeyboardEvent) => {
+      if (event.key === undefined) {
+        // Synthetic event (e.g., Chrome autofill).  Ignore.
+        return
+      }
+
+      pushToCurrentlyPressedKeys(mapKey(event.code))
+
+      if ((memoisedOptions?.keydown === undefined && memoisedOptions?.keyup !== true) || memoisedOptions?.keydown) {
+        listener(event)
+      }
+    }
+
+    const handleKeyUp = (event: KeyboardEvent) => {
+      if (event.key === undefined) {
+        // Synthetic event (e.g., Chrome autofill).  Ignore.
+        return
+      }
+
+      removeFromCurrentlyPressedKeys(mapKey(event.code))
+
+      hasTriggeredRef.current = false
+
+      if (memoisedOptions?.keyup) {
+        listener(event, true)
+      }
+    }
+
+    const domNode = ref || _options?.document || document
+
+    // @ts-ignore
+    domNode.addEventListener('keyup', handleKeyUp)
+    // @ts-ignore
+    domNode.addEventListener('keydown', handleKeyDown)
+
+    if (proxy) {
+      parseKeysHookInput(_keys, memoisedOptions?.splitKey).forEach((key) =>
+        proxy.addHotkey(parseHotkey(key, memoisedOptions?.combinationKey, memoisedOptions?.description))
+      )
+    }
+
+    return () => {
+      // @ts-ignore
+      domNode.removeEventListener('keyup', handleKeyUp)
+      // @ts-ignore
+      domNode.removeEventListener('keydown', handleKeyDown)
+
+      if (proxy) {
+        parseKeysHookInput(_keys, memoisedOptions?.splitKey).forEach((key) =>
+          proxy.removeHotkey(parseHotkey(key, memoisedOptions?.combinationKey, memoisedOptions?.description))
+        )
+      }
+    }
+  }, [ref, _keys, memoisedOptions, enabledScopes])
+
+  return setRef as RefCallback<T>
+}
+
+================
+File: reference/modules/hotkeys/use-record-hotkeys.ts
+================
+import { useCallback, useState } from 'react'
+import { mapKey } from '@modules/hotkeys/parse-hotkeys'
+
+export default function useRecordHotkeys() {
+  const [keys, setKeys] = useState(new Set<string>())
+  const [isRecording, setIsRecording] = useState(false)
+
+  const handler = useCallback((event: KeyboardEvent) => {
+    if (event.key === undefined) {
+      // Synthetic event (e.g., Chrome autofill).  Ignore.
+      return
+    }
+
+    event.preventDefault()
+    event.stopPropagation()
+
+    setKeys((prev) => {
+      const newKeys = new Set(prev)
+
+      newKeys.add(mapKey(event.code))
+
+      return newKeys
+    })
+  }, [])
+
+  const stop = useCallback(() => {
+    if (typeof document !== 'undefined') {
+      document.removeEventListener('keydown', handler)
+
+      setIsRecording(false)
+    }
+  }, [handler])
+
+  const start = useCallback(() => {
+    setKeys(new Set<string>())
+
+    if (typeof document !== 'undefined') {
+      stop()
+
+      document.addEventListener('keydown', handler)
+
+      setIsRecording(true)
+    }
+  }, [handler, stop])
+
+  const resetKeys = useCallback(() => {
+    setKeys(new Set<string>())
+  }, [])
+
+  return [keys, { start, stop, resetKeys, isRecording }] as const
+}
+
+================
+File: reference/modules/hotkeys/validators.ts
+================
+// NOTE(jimmylee)
+// Vendored from
+// https://github.com/JohannesKlauss/react-hotkeys-hook/blob/main/src/validators.ts
+
+import { FormTags, Hotkey, Scopes, Trigger } from '@modules/hotkeys/types'
+import { isHotkeyPressed, isReadonlyArray } from '@modules/hotkeys/is-hotkey-pressed'
+import { mapKey } from '@modules/hotkeys/parse-hotkeys'
+
+export function maybePreventDefault(e: KeyboardEvent, hotkey: Hotkey, preventDefault?: Trigger): void {
+  if ((typeof preventDefault === 'function' && preventDefault(e, hotkey)) || preventDefault === true) {
+    e.preventDefault()
+  }
+}
+
+export function isHotkeyEnabled(e: KeyboardEvent, hotkey: Hotkey, enabled?: Trigger): boolean {
+  if (typeof enabled === 'function') {
+    return enabled(e, hotkey)
+  }
+
+  return enabled === true || enabled === undefined
+}
+
+export function isKeyboardEventTriggeredByInput(ev: KeyboardEvent): boolean {
+  return isHotkeyEnabledOnTag(ev, ['input', 'textarea', 'select'])
+}
+
+export function isHotkeyEnabledOnTag(
+  event: KeyboardEvent,
+  enabledOnTags: readonly FormTags[] | boolean = false
+): boolean {
+  const {target, composed} = event;
+
+  let targetTagName: string | null = null
+
+  if (isCustomElement(target as HTMLElement) && composed) {
+    targetTagName = event.composedPath()[0] && (event.composedPath()[0] as HTMLElement).tagName;
+  } else {
+    targetTagName = target && (target as HTMLElement).tagName;
+  }
+
+  if (isReadonlyArray(enabledOnTags)) {
+    return Boolean(
+      targetTagName && enabledOnTags && enabledOnTags.some((tag) => tag.toLowerCase() === targetTagName?.toLowerCase())
+    )
+  }
+
+  return Boolean(targetTagName && enabledOnTags && enabledOnTags)
+}
+
+export function isCustomElement(element: HTMLElement): boolean {
+  // We just do a basic check w/o any complex RegEx or validation against the list of legacy names containing a hyphen,
+  // as none of them is likely to be an event target, and it won't hurt anyway if we miss.
+  // see: https://html.spec.whatwg.org/multipage/custom-elements.html#prod-potentialcustomelementname
+  return !!element.tagName && !element.tagName.startsWith("-") && element.tagName.includes("-");
+}
+
+export function isScopeActive(activeScopes: string[], scopes?: Scopes): boolean {
+  if (activeScopes.length === 0 && scopes) {
+    console.warn(
+      'A hotkey has the "scopes" option set, however no active scopes were found. If you want to use the global scopes feature, you need to wrap your app in a <HotkeysProvider>'
+    )
+
+    return true
+  }
+
+  if (!scopes) {
+    return true
+  }
+
+  return activeScopes.some((scope) => scopes.includes(scope)) || activeScopes.includes('*')
+}
+
+export const isHotkeyMatchingKeyboardEvent = (e: KeyboardEvent, hotkey: Hotkey, ignoreModifiers = false): boolean => {
+  const { alt, meta, mod, shift, ctrl, keys } = hotkey
+  const { key: pressedKeyUppercase, code, ctrlKey, metaKey, shiftKey, altKey } = e
+
+  const keyCode = mapKey(code)
+  const pressedKey = pressedKeyUppercase.toLowerCase()
+
+  if (
+    !keys?.includes(keyCode) &&
+    !keys?.includes(pressedKey) &&
+    !['ctrl', 'control', 'unknown', 'meta', 'alt', 'shift', 'os'].includes(keyCode)
+  ) {
+    return false
+  }
+
+  if (!ignoreModifiers) {
+    // We check the pressed keys for compatibility with the keyup event. In keyup events the modifier flags are not set.
+    if (alt === !altKey && pressedKey !== 'alt') {
+      return false
+    }
+
+    if (shift === !shiftKey && pressedKey !== 'shift') {
+      return false
+    }
+
+    // Mod is a special key name that is checking for meta on macOS and ctrl on other platforms
+    if (mod) {
+      if (!metaKey && !ctrlKey) {
+        return false
+      }
+    } else {
+      if (meta === !metaKey && pressedKey !== 'meta' && pressedKey !== 'os') {
+        return false
+      }
+
+      if (ctrl === !ctrlKey && pressedKey !== 'ctrl' && pressedKey !== 'control') {
+        return false
+      }
+    }
+  }
+
+  // All modifiers are correct, now check the key
+  // If the key is set, we check for the key
+  if (keys && keys.length === 1 && (keys.includes(pressedKey) || keys.includes(keyCode))) {
+    return true
+  } else if (keys) {
+    // Check if all keys are present in pressedDownKeys set
+    return isHotkeyPressed(keys)
+  } else if (!keys) {
+    // If the key is not set, we only listen for modifiers, that check went alright, so we return true
+    return true
+  }
+
+  // There is nothing that matches.
+  return false
+}
+
+================
+File: reference/modules/cors.ts
+================
+// @ts-nocheck
+
+'use strict';
+
+import assign from '@modules/object-assign';
+import vary from '@modules/vary';
+
+var defaults = {
+  origin: '*',
+  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
+  preflightContinue: false,
+  optionsSuccessStatus: 204,
+};
+
+function isString(s) {
+  return typeof s === 'string' || s instanceof String;
+}
+
+function isOriginAllowed(origin, allowedOrigin) {
+  if (Array.isArray(allowedOrigin)) {
+    for (var i = 0; i < allowedOrigin.length; ++i) {
+      if (isOriginAllowed(origin, allowedOrigin[i])) {
+        return true;
+      }
+    }
+    return false;
+  } else if (isString(allowedOrigin)) {
+    return origin === allowedOrigin;
+  } else if (allowedOrigin instanceof RegExp) {
+    return allowedOrigin.test(origin);
+  } else {
+    return !!allowedOrigin;
+  }
+}
+
+function configureOrigin(options, req) {
+  var requestOrigin = req.headers.origin,
+    headers = [],
+    isAllowed;
+
+  if (!options.origin || options.origin === '*') {
+    // allow any origin
+    headers.push([
+      {
+        key: 'Access-Control-Allow-Origin',
+        value: '*',
+      },
+    ]);
+  } else if (isString(options.origin)) {
+    // fixed origin
+    headers.push([
+      {
+        key: 'Access-Control-Allow-Origin',
+        value: options.origin,
+      },
+    ]);
+    headers.push([
+      {
+        key: 'Vary',
+        value: 'Origin',
+      },
+    ]);
+  } else {
+    isAllowed = isOriginAllowed(requestOrigin, options.origin);
+    // reflect origin
+    headers.push([
+      {
+        key: 'Access-Control-Allow-Origin',
+        value: isAllowed ? requestOrigin : false,
+      },
+    ]);
+    headers.push([
+      {
+        key: 'Vary',
+        value: 'Origin',
+      },
+    ]);
+  }
+
+  return headers;
+}
+
+function configureMethods(options) {
+  var methods = options.methods;
+  if (methods.join) {
+    methods = options.methods.join(','); // .methods is an array, so turn it into a string
+  }
+  return {
+    key: 'Access-Control-Allow-Methods',
+    value: methods,
+  };
+}
+
+function configureCredentials(options) {
+  if (options.credentials === true) {
+    return {
+      key: 'Access-Control-Allow-Credentials',
+      value: 'true',
+    };
+  }
+  return null;
+}
+
+function configureAllowedHeaders(options, req) {
+  var allowedHeaders = options.allowedHeaders || options.headers;
+  var headers = [];
+
+  if (!allowedHeaders) {
+    allowedHeaders = req.headers['access-control-request-headers']; // .headers wasn't specified, so reflect the request headers
+    headers.push([
+      {
+        key: 'Vary',
+        value: 'Access-Control-Request-Headers',
+      },
+    ]);
+  } else if (allowedHeaders.join) {
+    allowedHeaders = allowedHeaders.join(','); // .headers is an array, so turn it into a string
+  }
+  if (allowedHeaders && allowedHeaders.length) {
+    headers.push([
+      {
+        key: 'Access-Control-Allow-Headers',
+        value: allowedHeaders,
+      },
+    ]);
+  }
+
+  return headers;
+}
+
+function configureExposedHeaders(options) {
+  var headers = options.exposedHeaders;
+  if (!headers) {
+    return null;
+  } else if (headers.join) {
+    headers = headers.join(','); // .headers is an array, so turn it into a string
+  }
+  if (headers && headers.length) {
+    return {
+      key: 'Access-Control-Expose-Headers',
+      value: headers,
+    };
+  }
+  return null;
+}
+
+function configureMaxAge(options) {
+  var maxAge = (typeof options.maxAge === 'number' || options.maxAge) && options.maxAge.toString();
+  if (maxAge && maxAge.length) {
+    return {
+      key: 'Access-Control-Max-Age',
+      value: maxAge,
+    };
+  }
+  return null;
+}
+
+function applyHeaders(headers, res) {
+  for (var i = 0, n = headers.length; i < n; i++) {
+    var header = headers[i];
+    if (header) {
+      if (Array.isArray(header)) {
+        applyHeaders(header, res);
+      } else if (header.key === 'Vary' && header.value) {
+        vary(res, header.value);
+      } else if (header.value) {
+        res.setHeader(header.key, header.value);
+      }
+    }
+  }
+}
+
+function cors(options, req, res, next) {
+  var headers = [],
+    method = req.method && req.method.toUpperCase && req.method.toUpperCase();
+
+  if (method === 'OPTIONS') {
+    // preflight
+    headers.push(configureOrigin(options, req));
+    headers.push(configureCredentials(options));
+    headers.push(configureMethods(options));
+    headers.push(configureAllowedHeaders(options, req));
+    headers.push(configureMaxAge(options));
+    headers.push(configureExposedHeaders(options));
+    applyHeaders(headers, res);
+
+    if (options.preflightContinue) {
+      next();
+    } else {
+      // Safari (and potentially other browsers) need content-length 0,
+      //   for 204 or they just hang waiting for a body
+      res.statusCode = options.optionsSuccessStatus;
+      res.setHeader('Content-Length', '0');
+      res.end();
+    }
+  } else {
+    // actual response
+    headers.push(configureOrigin(options, req));
+    headers.push(configureCredentials(options));
+    headers.push(configureExposedHeaders(options));
+    applyHeaders(headers, res);
+    next();
+  }
+}
+
+function middlewareWrapper(o) {
+  // if options are static (either via defaults or custom options passed in), wrap in a function
+  var optionsCallback = null;
+  if (typeof o === 'function') {
+    optionsCallback = o;
+  } else {
+    optionsCallback = function (req, cb) {
+      cb(null, o);
+    };
+  }
+
+  return function corsMiddleware(req, res, next) {
+    optionsCallback(req, function (err, options) {
+      if (err) {
+        next(err);
+      } else {
+        var corsOptions = assign({}, defaults, options);
+        var originCallback = null;
+        if (corsOptions.origin && typeof corsOptions.origin === 'function') {
+          originCallback = corsOptions.origin;
+        } else if (corsOptions.origin) {
+          originCallback = function (origin, cb) {
+            cb(null, corsOptions.origin);
+          };
+        }
+
+        if (originCallback) {
+          originCallback(req.headers.origin, function (err2, origin) {
+            if (err2 || !origin) {
+              next(err2);
+            } else {
+              corsOptions.origin = origin;
+              cors(corsOptions, req, res, next);
+            }
+          });
+        } else {
+          next();
+        }
+      }
+    });
+  };
+}
+
+export default middlewareWrapper;
+
+================
+File: reference/modules/object-assign.ts
+================
+// @ts-nocheck
+
+/*
+object-assign
+(c) Sindre Sorhus
+@license MIT
+*/
+
+'use strict';
+
+/* eslint-disable no-unused-vars */
+var getOwnPropertySymbols = Object.getOwnPropertySymbols;
+var hasOwnProperty = Object.prototype.hasOwnProperty;
+var propIsEnumerable = Object.prototype.propertyIsEnumerable;
+
+function toObject(val) {
+  if (val === null || val === undefined) {
+    throw new TypeError('Object.assign cannot be called with null or undefined');
+  }
+
+  return Object(val);
+}
+
+function shouldUseNative() {
+  try {
+    if (!Object.assign) {
+      return false;
+    }
+
+    // Detect buggy property enumeration order in older V8 versions.
+
+    // https://bugs.chromium.org/p/v8/issues/detail?id=4118
+    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
+    // @ts-ignore
+    test1[5] = 'de';
+    if (Object.getOwnPropertyNames(test1)[0] === '5') {
+      return false;
+    }
+
+    // https://bugs.chromium.org/p/v8/issues/detail?id=3056
+    var test2 = {};
+    for (var i = 0; i < 10; i++) {
+      test2['_' + String.fromCharCode(i)] = i;
+    }
+    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
+      return test2[n];
+    });
+    if (order2.join('') !== '0123456789') {
+      return false;
+    }
+
+    // https://bugs.chromium.org/p/v8/issues/detail?id=3056
+    var test3 = {};
+    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
+      test3[letter] = letter;
+    });
+    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
+      return false;
+    }
+
+    return true;
+  } catch (err) {
+    // We don't expect any of the above to throw, but better to be safe.
+    return false;
+  }
+}
+
+const assign = shouldUseNative()
+  ? Object.assign
+  : function (target, source) {
+      var from;
+      var to = toObject(target);
+      var symbols;
+
+      for (var s = 1; s < arguments.length; s++) {
+        from = Object(arguments[s]);
+
+        for (var key in from) {
+          if (hasOwnProperty.call(from, key)) {
+            to[key] = from[key];
+          }
+        }
+
+        if (getOwnPropertySymbols) {
+          symbols = getOwnPropertySymbols(from);
+          for (var i = 0; i < symbols.length; i++) {
+            if (propIsEnumerable.call(from, symbols[i])) {
+              to[symbols[i]] = from[symbols[i]];
+            }
+          }
+        }
+      }
+
+      return to;
+    };
+
+export default assign;
+
+================
+File: reference/modules/vary.ts
+================
+// @ts-nocheck
+
+/*!
+ * vary
+ * Copyright(c) 2014-2017 Douglas Christopher Wilson
+ * MIT Licensed
+ */
+
+'use strict';
+
+/**
+ * RegExp to match field-name in RFC 7230 sec 3.2
+ *
+ * field-name    = token
+ * token         = 1*tchar
+ * tchar         = "!" / "#" / "$" / "%" / "&" / "'" / "*"
+ *               / "+" / "-" / "." / "^" / "_" / "`" / "|" / "~"
+ *               / DIGIT / ALPHA
+ *               ; any VCHAR, except delimiters
+ */
+
+var FIELD_NAME_REGEXP = /^[!#$%&'*+\-.^_`|~0-9A-Za-z]+$/;
+
+/**
+ * Append a field to a vary header.
+ *
+ * @param {String} header
+ * @param {String|Array} field
+ * @return {String}
+ * @public
+ */
+
+function append(header, field) {
+  if (typeof header !== 'string') {
+    throw new TypeError('header argument is required');
+  }
+
+  if (!field) {
+    throw new TypeError('field argument is required');
+  }
+
+  // get fields array
+  var fields = !Array.isArray(field) ? parse(String(field)) : field;
+
+  // assert on invalid field names
+  for (var j = 0; j < fields.length; j++) {
+    if (!FIELD_NAME_REGEXP.test(fields[j])) {
+      throw new TypeError('field argument contains an invalid header name');
+    }
+  }
+
+  // existing, unspecified vary
+  if (header === '*') {
+    return header;
+  }
+
+  // enumerate current values
+  var val = header;
+  var vals = parse(header.toLowerCase());
+
+  // unspecified vary
+  if (fields.indexOf('*') !== -1 || vals.indexOf('*') !== -1) {
+    return '*';
+  }
+
+  for (var i = 0; i < fields.length; i++) {
+    var fld = fields[i].toLowerCase();
+
+    // append value (case-preserving)
+    if (vals.indexOf(fld) === -1) {
+      vals.push(fld);
+      val = val ? val + ', ' + fields[i] : fields[i];
+    }
+  }
+
+  return val;
+}
+
+/**
+ * Parse a vary header into an array.
+ *
+ * @param {String} header
+ * @return {Array}
+ * @private
+ */
+
+function parse(header) {
+  var end = 0;
+  var list = [];
+  var start = 0;
+
+  // gather tokens
+  for (var i = 0, len = header.length; i < len; i++) {
+    switch (header.charCodeAt(i)) {
+      case 0x20 /*   */:
+        if (start === end) {
+          start = end = i + 1;
+        }
+        break;
+      case 0x2c /* , */:
+        list.push(header.substring(start, end));
+        start = end = i + 1;
+        break;
+      default:
+        end = i + 1;
+        break;
+    }
+  }
+
+  // final token
+  list.push(header.substring(start, end));
+
+  return list;
+}
+
+/**
+ * Mark that a request is varied on a header field.
+ *
+ * @param {Object} res
+ * @param {String|Array} field
+ * @public
+ */
+
+function vary(res, field) {
+  if (!res || !res.getHeader || !res.setHeader) {
+    // quack quack
+    throw new TypeError('res argument is required');
+  }
+
+  // get existing header
+  var val = res.getHeader('Vary') || '';
+  var header = Array.isArray(val) ? val.join(', ') : String(val);
+
+  // set new header
+  if ((val = append(header, field))) {
+    res.setHeader('Vary', val);
+  }
+}
+
+export default vary;
+
+================
+File: reference/pages/api/index.ts
+================
+import * as Server from '@common/server';
+import * as Constants from '@common/constants';
+
+export default async function apiIndex(req, res) {
+  await Server.cors(req, res);
+
+  res.json({
+    success: true,
+    message: 'hey there, friend.',
+  });
+}
+
+================
+File: reference/pages/_app.tsx
+================
+import '@root/global.scss';
+
+import * as React from 'react';
+
+import Providers from '@components/Providers';
+
+function MyApp({ Component, pageProps }) {
+  return (
+    <Providers>
+      <Component {...pageProps} />
+    </Providers>
+  );
+}
+
+export default MyApp;
+
+================
+File: reference/pages/_document.tsx
+================
+import Document, { Html, Head, Main, NextScript } from 'next/document';
+
+export default class MyDocument extends Document {
+  render() {
+    return (
+      <Html>
+        <Head />
+        <body className="theme-light">
+          <Main />
+          <NextScript />
+        </body>
+      </Html>
+    );
+  }
+}
+
+================
+File: reference/.gitignore
+================
+.next
+.nova
+.env
+.env.local
+.env-custom-development
+.env-development
+.env-textile
+.env-production
+.DS_STORE
+DS_STORE
+yarn.lock
+node_modules
+dist
+analytics.txt
+package-lock.json
+
+/**/*/.DS_STORE
+/**/*/node_modules
+/**/*/.next
+/**/*/.data
+
+================
+File: reference/.prettierrc
+================
+{
+  "printWidth": 9999,
+  "tabWidth": 2,
+  "useTabs": false,
+  "semi": true,
+  "singleQuote": true,
+  "trailingComma": "es5",
+  "bracketSpacing": true,
+  "jsxBracketSameLine": false,
+  "arrowParens": "always",
+  "requirePragma": false,
+  "insertPragma": false,
+  "proseWrap": "preserve",
+  "parser": "babel-ts",
+  "overrides": [
+    {
+      "files": "*.js",
+      "options": {
+        "parser": "babel"
+      }
+    }
+  ]
+}
+
+================
+File: reference/global.scss
+================
+@font-face {
+  font-family: 'IosevkaTerm-Regular';
+  src: url('https://intdev-global.s3.us-west-2.amazonaws.com/public/internet-dev/6397be61-3ea4-459d-8a3e-fd95168cb214.woff2') format('woff2');
+}
+
+a,
+abbr,
+acronym,
+address,
+applet,
+article,
+aside,
+audio,
+b,
+big,
+blockquote,
+body,
+canvas,
+caption,
+center,
+cite,
+code,
+dd,
+del,
+details,
+dfn,
+div,
+dl,
+dt,
+embed,
+em,
+figure,
+figcaption,
+fieldset,
+footer,
+form,
+h1,
+h2,
+h3,
+h4,
+h5,
+h6,
+header,
+hgroup,
+html,
+i,
+iframe,
+img,
+ins,
+kbd,
+label,
+legend,
+li,
+mark,
+menu,
+nav,
+object,
+ol,
+output,
+p,
+pre,
+q,
+ruby,
+s,
+samp,
+section,
+small,
+span,
+strike,
+strong,
+sub,
+summary,
+sup,
+table,
+tbody,
+td,
+tfoot,
+th,
+thead,
+time,
+tr,
+tt,
+u,
+ul,
+var,
+video {
+  border: 0;
+  box-sizing: border-box;
+  margin: 0;
+  padding: 0;
+  vertical-align: baseline;
+}
+
+a {
+  background: var(--theme-border-subdued);
+  color: var(--theme-text);
+
+  &:hover {
+    background: var(--theme-focused-foreground);
+    color: var(--theme-text);
+  }
+
+  &:focus {
+    background: var(--theme-focused-foreground);
+    color: var(--theme-text);
+    outline: 0;
+  }
+}
+
+ul {
+  list-style-position: inside;
+  list-style-type: '▪';
+  text-indent: -1ch;
+}
+
+ol {
+  list-style-type: '';
+  list-style-position: inside;
+  counter-reset: cupcake;
+  text-indent: -1ch;
+}
+
+ul ul,
+ul ol,
+ol ul,
+ol ol {
+  padding-left: 2ch;
+}
+
+ol li {
+  padding-left: 1ch;
+  counter-increment: cupcake;
+}
+
+ul li:before {
+  content: ' ';
+  display: inline-block;
+  width: 1ch;
+  height: 0;
+  visibility: hidden;
+}
+
+ol li:before {
+  content: counters(cupcake, '.') '. ';
+}
+
+article,
+aside,
+details,
+figcaption,
+figure,
+footer,
+header,
+hgroup,
+menu,
+nav,
+section {
+  display: block;
+}
+
+body.theme-blue {
+  --theme-overlay: var(--color-blue-20-5);
+  --theme-background: var(--color-blue-80);
+  --theme-background-modal: var(--color-blue-70);
+  --theme-background-modal-footer: var(--color-blue-90);
+  --theme-background-input: var(--color-blue-60);
+  --theme-border: var(--color-blue-70);
+  --theme-border-subdued: var(--color-blue-60-2);
+  --theme-text: var(--color-blue-10);
+  --theme-button: var(--color-blue-10);
+  --theme-button-text: var(--color-blue-80);
+  --theme-button-foreground: var(--color-blue-60);
+  --theme-button-background: var(--color-blue-70);
+  --theme-focused-foreground: var(--color-blue-50);
+  --theme-focused-foreground-subdued: var(--color-blue-50-5);
+}
+
+body.theme-light {
+  --theme-overlay: var(--color-black-100-4);
+  --theme-background: var(--color-white);
+  --theme-background-modal: var(--color-gray-20);
+  --theme-background-modal-footer: var(--color-gray-40);
+  --theme-background-input: var(--color-gray-10);
+  --theme-border: var(--color-gray-20);
+  --theme-border-subdued: var(--color-gray-40-2);
+  --theme-text: var(--color-black-100);
+  --theme-button: var(--color-black-100);
+  --theme-button-text: var(--color-white);
+  --theme-button-foreground: var(--color-gray-30);
+  --theme-button-background: var(--color-gray-20);
+  --theme-focused-foreground: var(--color-neon-green-50);
+  --theme-focused-foreground-subdued: var(--color-neon-green-50-5);
+}
+
+body.theme-dark {
+  --theme-overlay: var(--color-black-100-4);
+  --theme-background: var(--color-black-100);
+  --theme-background-modal: var(--color-gray-80);
+  --theme-background-modal-footer: var(--color-gray-70);
+  --theme-background-input: var(--color-gray-60);
+  --theme-border: var(--color-gray-80);
+  --theme-border-subdued: var(--color-gray-70-3);
+  --theme-text: var(--color-white);
+  --theme-button: var(--color-white);
+  --theme-button-text: var(--color-black-100);
+  --theme-button-foreground: var(--color-gray-90);
+  --theme-button-background: var(--color-gray-80);
+  --theme-focused-foreground: var(--color-daybreak-10);
+  --theme-focused-foreground-subdued: var(--color-daybreak-10-5);
+}
+
+body.theme-green {
+  --theme-overlay: var(--color-neon-green-100-4);
+  --theme-background: rgba(44, 255, 5);
+  --theme-background-modal: var(--color-neon-green-50);
+  --theme-background-modal-footer: var(--color-neon-green-50-5);
+  --theme-background-input: var(--color-neon-green-30);
+  --theme-border: var(--color-neon-green-60);
+  --theme-border-subdued: var(--color-neon-green-60-3);
+  --theme-text: var(--color-neon-green-100);
+  --theme-button: var(--color-neon-green-100);
+  --theme-button-text: var(--color-neon-green-10);
+  --theme-button-foreground: var(--color-neon-green-80);
+  --theme-button-background: var(--color-neon-green-70);
+  --theme-focused-foreground: rgba(255, 82, 243, 1);
+  --theme-focused-foreground-subdued: rgba(255, 82, 243, 0.5);
+}
+
+body.theme-black-red {
+  --theme-overlay: var(--color-red-100-4);
+  --theme-background: var(--color-black-100);
+  --theme-background-modal: var(--color-red-70);
+  --theme-background-modal-footer: var(--color-red-80);
+  --theme-background-input: var(--color-red-60);
+  --theme-border: var(--color-red-60-7);
+  --theme-border-subdued: var(--color-red-60-3);
+  --theme-text: var(--color-red-30);
+  --theme-button: var(--color-red-100);
+  --theme-button-text: var(--color-red-20);
+  --theme-button-foreground: var(--color-red-80);
+  --theme-button-background: var(--color-red-90);
+  --theme-focused-foreground: var(--color-gray-70);
+  --theme-focused-foreground-subdued: var(--color-red-70-4);
+}
+
+body.theme-black-teal {
+  --theme-overlay: var(--color-teal-100-4);
+  --theme-background: var(--color-black-100);
+  --theme-background-modal: var(--color-teal-70);
+  --theme-background-modal-footer: var(--color-teal-80);
+  --theme-background-input: var(--color-teal-60);
+  --theme-border: var(--color-teal-60-7);
+  --theme-border-subdued: var(--color-teal-60-3);
+  --theme-text: var(--color-teal-30);
+  --theme-button: var(--color-teal-100);
+  --theme-button-text: var(--color-teal-20);
+  --theme-button-foreground: var(--color-teal-80);
+  --theme-button-background: var(--color-teal-90);
+  --theme-focused-foreground: var(--color-gray-70);
+  --theme-focused-foreground-subdued: var(--color-teal-70-4);
+}
+
+body.theme-black-green {
+  --theme-overlay: var(--color-black-100-4);
+  --theme-background: var(--color-black-100);
+  --theme-background-modal: var(--color-gray-90);
+  --theme-background-modal-footer: var(--color-gray-80);
+  --theme-background-input: var(--color-gray-70);
+  --theme-border: var(--color-gray-80);
+  --theme-border-subdued: var(--color-gray-70-3);
+  --theme-text: var(--color-green-50);
+  --theme-button: var(--color-green-50);
+  --theme-button-text: var(--color-green-80);
+  --theme-button-foreground: var(--color-green-80);
+  --theme-button-background: var(--color-green-90);
+  --theme-focused-foreground: var(--color-gray-30);
+  --theme-focused-foreground-subdued: var(--color-gray-40);
+}
+
+body.font-use-berkeley-mono {
+  --font-family-mono: 'TX02Mono-Regular', sans-serif;
+}
+
+body.font-use-commit-mono {
+  --font-family-mono: 'CommitMono-Regular', sans-serif;
+}
+
+body.font-use-departure-mono {
+  --font-family-mono: 'DepartureMono-Regular', sans-serif;
+}
+
+body.font-use-fira-code {
+  --font-family-mono: 'FiraCode-Regular', sans-serif;
+}
+
+body.font-use-fragment-mono {
+  --font-family-mono: 'FragmentMono-Regular', sans-serif;
+}
+
+body.font-use-iosevka-term {
+  --font-family-mono: 'IosevkaTerm-Regular', sans-serif;
+}
+
+body.font-use-jet-brains-mono {
+  --font-family-mono: 'JetBrainsMono-Regular', sans-serif;
+}
+
+body.font-use-server-mono {
+  --font-family-mono: 'ServerMono-Regular', sans-serif;
+}
+
+body.font-use-sfmono-square {
+  --font-family-mono: 'SFMonoSquare-Regular', sans-serif;
+}
+
+#__next {
+}
+
+html,
+body {
+  --color-black-100: rgba(0, 0, 0, 1);
+  --color-black-100-1: rgba(0, 0, 0, 0.1);
+  --color-black-100-2: rgba(0, 0, 0, 0.2);
+  --color-black-100-4: rgba(0, 0, 0, 0.4);
+  --color-black-daybreak-100: rgba(4, 2, 0, 1);
+  --color-black-daybreak-100-4: rgba(4, 2, 0, 0.4);
+
+  --color-blue-10: rgba(237, 245, 255, 1);
+  --color-blue-100: rgba(0, 17, 65, 1);
+  --color-blue-20: rgba(208, 226, 255, 1);
+  --color-blue-20-1: rgba(208, 226, 255, 0.1);
+  --color-blue-20-2: rgba(208, 226, 255, 0.2);
+  --color-blue-20-5: rgba(208, 226, 255, 0.5);
+  --color-blue-30: rgba(166, 200, 255, 1);
+  --color-blue-40: rgba(120, 169, 255, 1);
+  --color-blue-50: rgba(69, 137, 255, 1);
+  --color-blue-50-5: rgba(69, 137, 255, 0.5);
+  --color-blue-60: rgba(15, 98, 254, 1);
+  --color-blue-60-2: rgba(15, 98, 254, 0.2);
+  --color-blue-70: rgba(0, 67, 206, 1);
+  --color-blue-80: rgba(0, 45, 156, 1);
+  --color-blue-80-4: rgba(0, 45, 156, 0.4);
+  --color-blue-80-6: rgba(0, 45, 156, 0.6);
+  --color-blue-90: rgba(0, 29, 108, 1);
+  --color-blue-90-6: rgba(0, 29, 108, 0.6);
+
+  --color-daybreak: rgba(255, 108, 4, 1);
+  --color-daybreak-1: rgba(255, 108, 4, 0.1);
+  --color-daybreak-10: rgba(239, 99, 0, 1);
+  --color-daybreak-10-5: rgba(239, 99, 0, 0.5);
+  --color-daybreak-2: rgba(255, 108, 4, 0.2);
+  --color-daybreak-20: rgba(220, 91, 0, 1);
+  --color-daybreak-30: rgba(200, 83, 0, 1);
+  --color-daybreak-4: rgba(255, 108, 4, 0.4);
+  --color-daybreak-40: rgba(180, 75, 0, 1);
+  --color-daybreak-40-2: rgba(180, 75, 0, 0.2);
+  --color-daybreak-50: rgba(161, 67, 0, 1);
+  --color-daybreak-60: rgba(141, 59, 0, 1);
+  --color-daybreak-70: rgba(121, 50, 0, 1);
+  --color-daybreak-70-3: rgba(121, 50, 0, 0.3);
+  --color-daybreak-80: rgba(102, 42, 0, 1);
+  --color-daybreak-90: rgba(82, 34, 0, 1);
+
+  --color-gold-30: rgba(241, 194, 27, 1);
+
+  --color-gray-10: rgba(244, 244, 244, 1);
+  --color-gray-100: rgba(22, 22, 22, 1);
+  --color-gray-20: rgba(224, 224, 224, 1);
+  --color-gray-20-7: rgba(224, 224, 224, 0.7);
+  --color-gray-30: rgba(198, 198, 198, 1);
+  --color-gray-30-7: rgba(224, 224, 224, 0.7);
+  --color-gray-40: rgba(168, 168, 168, 1);
+  --color-gray-40-2: rgba(168, 168, 168, 0.2);
+  --color-gray-50: rgba(141, 141, 141, 1);
+  --color-gray-60: rgba(111, 111, 111, 1);
+  --color-gray-70: rgba(82, 82, 82, 1);
+  --color-gray-70-3: rgba(82, 82, 82, 0.3);
+  --color-gray-70-4: rgba(82, 82, 82, 0.4);
+  --color-gray-80: rgba(57, 57, 57, 1);
+  --color-gray-80-6: rgba(57, 57, 57, 0.6);
+  --color-gray-90: rgba(38, 38, 38, 1);
+  --color-gray-90-6: rgba(38, 38, 38, 0.6);
+
+  --color-green-100: rgba(7, 25, 8, 1);
+  --color-green-100: rgba(7, 25, 8, 1);
+  --color-green-90: rgba(2, 45, 13, 1);
+  --color-green-80: rgba(4, 67, 23, 1);
+  --color-green-70: rgba(14, 96, 39, 1);
+  --color-green-60: rgba(25, 128, 56, 1);
+  --color-green-60-3: rgba(25, 128, 56, 0.3);
+  --color-green-50: rgba(36, 161, 72, 1);
+  --color-green-40: rgba(66, 190, 101, 1);
+  --color-green-30: rgba(111, 220, 140, 1);
+  --color-green-20: rgba(167, 240, 186, 1);
+  --color-green-10: rgba(222, 251, 230, 1);
+
+  --color-neon-green-10: rgba(242, 255, 233, 1);
+  --color-neon-green-100: rgba(10, 44, 2, 1);
+  --color-neon-green-100-1: rgba(10, 44, 2, 0.1);
+  --color-neon-green-100-2: rgba(10, 44, 2, 0.2);
+  --color-neon-green-100-4: rgba(10, 44, 2, 0.4);
+  --color-neon-green-20: rgba(213, 255, 191, 1);
+  --color-neon-green-30: rgba(178, 255, 148, 1);
+  --color-neon-green-40: rgba(138, 255, 104, 1);
+  --color-neon-green-50: rgba(92, 255, 59, 1);
+  --color-neon-green-50-5: rgba(92, 255, 59, 0.5);
+  --color-neon-green-60: rgba(46, 231, 29, 1);
+  --color-neon-green-60-3: rgba(46, 231, 29, 0.3);
+  --color-neon-green-70: rgba(0, 207, 0, 1);
+  --color-neon-green-70-3: rgba(0, 207, 0, 0.3);
+  --color-neon-green-70-7: rgba(0, 207, 0, 0.7);
+  --color-neon-green-80: rgba(0, 159, 0, 1);
+  --color-neon-green-80-1: rgba(0, 159, 0, 0.1);
+  --color-neon-green-80-2: rgba(0, 159, 0, 0.2);
+  --color-neon-green-80-4: rgba(0, 159, 0, 0.4);
+  --color-neon-green-90: rgba(16, 107, 2, 1);
+
+  --color-red-100: rgba(45, 7, 9, 1);
+  --color-red-100-4: rgba(45, 7, 9, 0.4);
+  --color-red-90: rgba(82, 4, 8, 1);
+  --color-red-80: rgba(117, 14, 19, 1);
+  --color-red-70: rgba(162, 25, 31, 1);
+  --color-red-60: rgba(218, 30, 40, 1);
+  --color-red-60-7: rgba(218, 30, 40, 0.7);
+  --color-red-60-3: rgba(218, 30, 40, 0.3);
+  --color-red-50: rgba(250, 77, 86, 1);
+  --color-red-40: rgba(255, 131, 137, 1);
+  --color-red-30: rgba(255, 179, 184, 1);
+  --color-red-20: rgba(255, 215, 217, 1);
+  --color-red-10: rgba(255, 241, 241, 1);
+
+  --color-teal-100: rgba(8, 26, 28, 1);
+  --color-teal-100-4: rgba(8, 26, 28, 0.4);
+  --color-teal-90: rgba(2, 43, 48, 1);
+  --color-teal-80: rgba(0, 65, 68, 1);
+  --color-teal-70: rgba(0, 93, 93, 1);
+  --color-teal-70-4: rgba(0, 93, 93, 0.4);
+  --color-teal-70-3: rgba(0, 93, 93, 0.3);
+  --color-teal-60: rgba(0, 125, 121, 1);
+  --color-teal-60-7: rgba(0, 125, 121, 0.7);
+  --color-teal-60-3: rgba(0, 125, 121, 0.3);
+  --color-teal-50: rgba(0, 157, 154, 1);
+  --color-teal-40: rgba(8, 189, 186, 1);
+  --color-teal-30: rgba(61, 219, 217, 1);
+  --color-teal-20: rgba(158, 240, 240, 1);
+  --color-teal-10: rgba(217, 251, 251, 1);
+
+  --color-white: rgba(255, 255, 255, 1);
+  --color-white-1: rgba(255, 255, 255, 0.1);
+  --color-white-2: rgba(255, 255, 255, 0.2);
+  --color-white-4: rgba(255, 255, 255, 0.4);
+
+  --font-family: -apple-system, BlinkMacSystemFont, helvetica neue, helvetica, sans-serif;
+  --font-family-mono: 'IosevkaTerm-Regular', Consolas, monaco, monospace;
+  --font-family-serif: Georgia, Times New Roman, serif;
+
+  --theme-text: var(--color-black-100);
+  --theme-line-height-base: 1.25;
+  --font-size: 20px;
+
+  --z-index-page: 1;
+  --z-index-page-select: 3;
+  --z-index-page-tooltips: 4;
+  --z-index-page-popover: 5;
+  --z-index-page-dropdown-menus: 6;
+  --z-index-page-modals: 10;
+
+  background: var(--theme-background);
+  color: var(--theme-text);
+  font-family: var(--font-family-mono);
+  line-height: calc(var(--theme-line-height-base) * 1rem);
+
+  font-size: var(--font-size);
+  font-optical-sizing: auto;
+  font-weight: 400;
+  font-variant-numeric: tabular-nums lining-nums;
+
+  &::-webkit-scrollbar {
+    background: transparent;
+    height: calc(var(--theme-line-height-base) * 1rem);
+    width: 1ch;
+  }
+
+  &::-webkit-scrollbar-track {
+    background: var(--theme-background);
+  }
+
+  &::-webkit-scrollbar-thumb {
+    background: var(--theme-border);
+  }
+
+  &::-webkit-scrollbar-thumb:hover {
+    background: var(--theme-border);
+  }
+
+  @media (max-width: 568px) {
+    --font-size: 16px;
+  }
+}
+
+================
+File: reference/LICENSE.md
+================
+Copyright (c) 2024 INTERNET DEVELOPMENT STUDIO COMPANY
+
+Permission is hereby granted, free of charge, to any person obtaining
+a copy of this software and associated documentation files (the
+"Software"), to deal in the Software without restriction, including
+without limitation the rights to use, copy, modify, merge, publish,
+distribute, sublicense, and/or sell copies of the Software, and to
+permit persons to whom the Software is furnished to do so, subject to
+the following conditions:
+
+The above copyright notice and this permission notice shall be
+included in all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+
+================
+File: reference/package.json
+================
+{
+  "name": "INTDEV",
+  "description": "A vocation guild and great hall for webmasters. We practice the craft of designing, building, shipping, and maintaining websites, platforms, brands, and applications—end to end.",
+  "engines": {
+    "node": ">=18"
+  },
+  "license": "MIT",
+  "version": "0.0.1",
+  "scripts": {
+    "dev": "next -p 10000",
+    "build": "next build",
+    "start": "PORT=10000 next start",
+    "lint": "next lint"
+  },
+  "dependencies": {
+    "next": "^15.1.3",
+    "react": "^19.0.0",
+    "react-dom": "^19.0.0",
+    "sass": "1.83.0"
+  },
+  "devDependencies": {
+    "@types/node": "^22.10.2",
+    "@types/react": "^19.0.2",
+    "ts-node": "^10.9.2",
+    "typescript": "^5.7.2"
+  }
+}
+
+================
+File: reference/README.md
+================
+# www-internet-v2
+
+TODO
+
+```sh
+npm install
+npm run dev
+```
+
+Go to `http://localhost:10000` in your browser of choice.
+
+### Contact
+
+If you have questions ping me on Twitter, [@wwwjim](https://www.twitter.com/wwwjim). Or you can ping [@internetxstudio](https://x.com/internetxstudio).
+
+================
+File: reference/tsconfig.json
+================
+{
+  "compilerOptions": {
+    "baseUrl": ".",
+    "paths": {
+      "@root/*": [
+        "./*"
+      ],
+      "@system/*": [
+        "./system/*"
+      ],
+      "@demos/*": [
+        "./demos/*"
+      ],
+      "@common/*": [
+        "./common/*"
+      ],
+      "@data/*": [
+        "./data/*"
+      ],
+      "@components/*": [
+        "./components/*"
+      ],
+      "@pages/*": [
+        "./pages/*"
+      ],
+      "@modules/*": [
+        "./modules/*"
+      ]
+    },
+    "target": "es5",
+    "lib": [
+      "dom",
+      "dom.iterable",
+      "esnext"
+    ],
+    "allowJs": true,
+    "skipLibCheck": true,
+    "strict": false,
+    "forceConsistentCasingInFileNames": true,
+    "noEmit": true,
+    "esModuleInterop": true,
+    "module": "esnext",
+    "moduleResolution": "node",
+    "resolveJsonModule": true,
+    "isolatedModules": true,
+    "jsx": "preserve",
+    "incremental": true,
+    "plugins": [
+      {
+        "name": "next"
+      }
+    ],
+    "strictNullChecks": true
+  },
+  "exclude": [
+    "node_modules",
+    "**/*.spec.ts"
+  ],
+  "include": [
+    "next-env.d.ts",
+    "**/*.ts",
+    "**/*.tsx",
+    ".next/types/**/*.ts"
+  ]
+}
+
+================
+File: src/app/globals.css
+================
+@tailwind base;
+@tailwind components;
+@tailwind utilities;
+
+:root {
+  --background: #ffffff;
+  --foreground: #171717;
+}
+
+@media (prefers-color-scheme: dark) {
+  :root {
+    --background: #0a0a0a;
+    --foreground: #ededed;
+  }
+}
+
+body {
+  color: var(--foreground);
+  background: var(--background);
+}
+
+================
+File: src/app/layout.tsx
+================
+import './globals.css';
+// Update this import to point to your actual Providers component location
+import Providers from '../components/Providers'; 
+
+export default function layout({
+  children,
+}: Readonly<{
+  children: React.ReactNode;
+}>) {
+  return (
+    <html lang="en">
+      <body className="theme-light">
+        <Providers>
+          {children}
+        </Providers>
+      </body>
+    </html>
+  );
+}
+
+================
+File: src/app/page.tsx
+================
+// Update these imports to point to your actual component and stylesheet locations
+import DefaultLayout from '../components/page/DefaultLayout'; 
+import styles from '../components/page/root.module.scss';
+import AsciiText from '../components/examples/AsciiText';
+
+export default function Home() {
+  return (
+    <DefaultLayout previewPixelSRC="https://intdev-global.s3.us-west-2.amazonaws.com/template-app-icon.png">
+      <div className={styles.row}>
+        <div className={styles.column}>
+          <AsciiText text="🛹" />
+        </div>
+      </div>
+    </DefaultLayout>
+  );
+}
+
+================
+File: .gitignore
+================
+# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
+
+# dependencies
+/node_modules
+/.pnp
+.pnp.*
+.yarn/*
+!.yarn/patches
+!.yarn/plugins
+!.yarn/releases
+!.yarn/versions
+
+# testing
+/coverage
+
+# next.js
+/.next/
+/out/
+
+# production
+/build
+
+# misc
+.DS_Store
+*.pem
+
+# debug
+npm-debug.log*
+yarn-debug.log*
+yarn-error.log*
+.pnpm-debug.log*
+
+# env files (can opt-in for committing if needed)
+.env*
+
+# vercel
+.vercel
+
+# typescript
+*.tsbuildinfo
+next-env.d.ts
+.aider*
+
+================
+File: eslint.config.mjs
+================
+import { dirname } from "path";
+import { fileURLToPath } from "url";
+import { FlatCompat } from "@eslint/eslintrc";
+
+const __filename = fileURLToPath(import.meta.url);
+const __dirname = dirname(__filename);
+
+const compat = new FlatCompat({
+  baseDirectory: __dirname,
+});
+
+const eslintConfig = [
+  ...compat.extends("next/core-web-vitals", "next/typescript"),
+];
+
+export default eslintConfig;
+
+================
+File: next.config.ts
+================
+import type { NextConfig } from "next";
+
+const nextConfig: NextConfig = {
+  /* config options here */
+};
+
+export default nextConfig;
+
+================
+File: package.json
+================
+{
+  "name": "adam-web",
+  "version": "0.1.0",
+  "private": true,
+  "description": "Website for Adam Delaney", // Update description
+  "scripts": {
+    "dev": "next dev", // Removed --turbopack
+    "build": "next build",
+    "start": "next start",
+    "lint": "next lint"
+  },
+  "dependencies": {
+    "next": "15.1.6",
+    "react": "^19.0.0",
+    "react-dom": "^19.0.0",
+    "sass": "^1.84.0"
+    // Add any missing dependencies from reference/package.json here
+  },
+  "devDependencies": {
+    "@eslint/eslintrc": "^3",
+    "@types/node": "^20",
+    "@types/react": "^19",
+    "@types/react-dom": "^19",
+    "eslint": "^9",
+    "eslint-config-next": "15.1.6",
+    "postcss": "^8",
+    "tailwindcss": "^3.4.1",
+    "typescript": "^5"
+  }
+}
+
+================
+File: postcss.config.mjs
+================
+/** @type {import('postcss-load-config').Config} */
+const config = {
+  plugins: {
+    tailwindcss: {},
+  },
+};
+
+export default config;
+
+================
+File: README.md
+================
+This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).
+
+## Getting Started
+
+First, run the development server:
+
+```bash
+npm run dev
+# or
+yarn dev
+# or
+pnpm dev
+# or
+bun dev
+```
+
+Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.
+
+You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.
+
+This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.
+
+## Learn More
+
+To learn more about Next.js, take a look at the following resources:
+
+- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
+- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.
+
+You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!
+
+## Deploy on Vercel
+
+The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.
+
+Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
+
+================
+File: tailwind.config.ts
+================
+import type { Config } from "tailwindcss";
+
+export default {
+  content: [
+    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
+    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
+    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
+  ],
+  theme: {
+    extend: {
+      colors: {
+        background: "var(--background)",
+        foreground: "var(--foreground)",
+      },
+    },
+  },
+  plugins: [],
+} satisfies Config;
+
+================
+File: tsconfig.json
+================
+{
+  "compilerOptions": {
+    "target": "ES2017",
+    "lib": ["dom", "dom.iterable", "esnext"],
+    "allowJs": true,
+    "skipLibCheck": true,
+    "strict": true,
+    "noEmit": true,
+    "esModuleInterop": true,
+    "module": "esnext",
+    "moduleResolution": "bundler",
+    "resolveJsonModule": true,
+    "isolatedModules": true,
+    "jsx": "preserve",
+    "incremental": true,
+    "plugins": [
+      {
+        "name": "next"
+      }
+    ],
+    "paths": {
+      "@/*": ["./src/*"]
+    }
+  },
+  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
+  "exclude": ["node_modules"]
+}
+

# 2025-02-07 23:57:59.192262
+s

# 2025-02-07 23:58:01.937959
+y
